GEODE-6580: Cleanup static analyzer warnings. (#3432)


+
-    this.attributes.socketConnectTimeout = socketConnectTimeout;
+    attributes.socketConnectTimeout = socketConnectTimeout;
-    this.attributes.connectionTimeout = connectionTimeout;
+    attributes.connectionTimeout = connectionTimeout;
-    this.attributes.connectionLifetime = connectionLifetime;
+    attributes.connectionLifetime = connectionLifetime;
-    this.attributes.socketBufferSize = bufferSize;
+    attributes.socketBufferSize = bufferSize;
-    this.attributes.threadLocalConnections = threadLocalConnections;
+    attributes.threadLocalConnections = threadLocalConnections;
-    this.attributes.idleTimeout = idleTimout;
+    attributes.idleTimeout = idleTimout;
-    if (maxConnections < this.attributes.minConnections && maxConnections != -1) {
+    if (maxConnections < attributes.minConnections && maxConnections != -1) {
-    this.attributes.maxConnections = maxConnections;
+    attributes.maxConnections = maxConnections;
-    this.attributes.minConnections = minConnections;
+    attributes.minConnections = minConnections;
-    this.attributes.pingInterval = pingInterval;
+    attributes.pingInterval = pingInterval;
-    this.attributes.statisticInterval = statisticInterval;
+    attributes.statisticInterval = statisticInterval;
-    this.attributes.retryAttempts = retryAttempts;
+    attributes.retryAttempts = retryAttempts;
-    this.attributes.readTimeout = timeout;
+    attributes.readTimeout = timeout;
-    this.attributes.serverGroup = group;
+    attributes.serverGroup = group;
-    this.attributes.queueEnabled = enabled;
+    attributes.queueEnabled = enabled;
-    this.attributes.prSingleHopEnabled = enabled;
+    attributes.prSingleHopEnabled = enabled;
-    this.attributes.multiuserSecureModeEnabled = enabled;
+    attributes.multiuserSecureModeEnabled = enabled;
-    this.attributes.startDisabled = disable;
+    attributes.startDisabled = disable;
-    this.attributes.locatorCallback = callback;
+    attributes.locatorCallback = callback;
-    this.attributes.queueRedundancyLevel = redundancyLevel;
+    attributes.queueRedundancyLevel = redundancyLevel;
-    this.attributes.queueMessageTrackingTimeout = messageTrackingTimeout;
+    attributes.queueMessageTrackingTimeout = messageTrackingTimeout;
-    this.attributes.subscriptionTimeoutMultipler = multiplier;
+    attributes.subscriptionTimeoutMultipler = multiplier;
-    InetSocketAddress sockAddr = null;
+    InetSocketAddress sockAddr;
-    this.attributes.queueAckInterval = ackInterval;
+    attributes.queueAckInterval = ackInterval;
-    if (this.attributes.servers.size() > 0) {
+    if (attributes.servers.size() > 0) {
-    this.attributes.locators.add(isa);
+    attributes.locators.add(isa);
-    if (this.attributes.locators.size() > 0) {
+    if (attributes.locators.size() > 0) {
-    this.attributes.servers.add(getInetSocketAddress(host, port));
+    attributes.servers.add(getInetSocketAddress(host, port));
-    boolean sd = this.attributes.startDisabled;
-    this.attributes = new PoolAttributes();
-    this.attributes.startDisabled = sd;
+    boolean sd = attributes.startDisabled;
+    attributes = new PoolAttributes();
+    attributes.startDisabled = sd;
-    this.attributes.servers.addAll(cp.getServers());
+    attributes.servers.addAll(cp.getServers());
-    this.attributes.setGateway(true);
-    this.attributes.setGatewaySender(sender);
+    attributes.setGateway(true);
+    attributes.setGatewaySender(sender);
-    InternalCache cache = GemFireCacheImpl.getInstance();
+    InternalCache cache = getInternalCache();
-    return PoolImpl.create(this.pm, name, this.attributes, this.locatorAddresses, distributedSystem,
+    return PoolImpl.create(pm, name, attributes, locatorAddresses, distributedSystem,
+  @SuppressWarnings("deprecation")
+  private static GemFireCacheImpl getInternalCache() {
+    return GemFireCacheImpl.getInstance();
+  }
+
-    return this.attributes;
+    return attributes;
-        && Objects.equals(new HashSet(locatorAddresses), new HashSet(that.locatorAddresses));
+        && Objects.equals(new HashSet<>(locatorAddresses), new HashSet<>(that.locatorAddresses));
-    public int socketConnectTimeout = DEFAULT_SOCKET_CONNECT_TIMEOUT;
-    public int connectionTimeout = DEFAULT_FREE_CONNECTION_TIMEOUT;
-    public int connectionLifetime = DEFAULT_LOAD_CONDITIONING_INTERVAL;
+    int socketConnectTimeout = DEFAULT_SOCKET_CONNECT_TIMEOUT;
+    int connectionTimeout = DEFAULT_FREE_CONNECTION_TIMEOUT;
+    int connectionLifetime = DEFAULT_LOAD_CONDITIONING_INTERVAL;
-    public boolean queueEnabled = DEFAULT_SUBSCRIPTION_ENABLED;
+    boolean queueEnabled = DEFAULT_SUBSCRIPTION_ENABLED;
-    public int queueRedundancyLevel = DEFAULT_SUBSCRIPTION_REDUNDANCY;
-    public int queueMessageTrackingTimeout = DEFAULT_SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT;
-    public int queueAckInterval = DEFAULT_SUBSCRIPTION_ACK_INTERVAL;
-    public int subscriptionTimeoutMultipler = DEFAULT_SUBSCRIPTION_TIMEOUT_MULTIPLIER;
+    int queueRedundancyLevel = DEFAULT_SUBSCRIPTION_REDUNDANCY;
+    int queueMessageTrackingTimeout = DEFAULT_SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT;
+    int queueAckInterval = DEFAULT_SUBSCRIPTION_ACK_INTERVAL;
+    int subscriptionTimeoutMultipler = DEFAULT_SUBSCRIPTION_TIMEOUT_MULTIPLIER;
-    public boolean multiuserSecureModeEnabled = DEFAULT_MULTIUSER_AUTHENTICATION;
-    public ArrayList/* <InetSocketAddress> */ locators = new ArrayList();
-    public ArrayList/* <InetSocketAddress> */ servers = new ArrayList();
+    boolean multiuserSecureModeEnabled = DEFAULT_MULTIUSER_AUTHENTICATION;
+    public ArrayList<InetSocketAddress> locators = new ArrayList<>();
+    public ArrayList<InetSocketAddress> servers = new ArrayList<>();
-      return this.socketConnectTimeout;
+      return socketConnectTimeout;
-      return this.connectionTimeout;
+      return connectionTimeout;
-      return this.connectionLifetime;
+      return connectionLifetime;
-      return this.socketBufferSize;
+      return socketBufferSize;
-      return this.threadLocalConnections;
+      return threadLocalConnections;
-      return this.readTimeout;
+      return readTimeout;
-      return this.queueEnabled;
+      return queueEnabled;
-      return this.prSingleHopEnabled;
+      return prSingleHopEnabled;
-      return this.queueRedundancyLevel;
+      return queueRedundancyLevel;
-      return this.queueMessageTrackingTimeout;
+      return queueMessageTrackingTimeout;
-      return this.serverGroup;
+      return serverGroup;
-      return this.gateway;
+      return gateway;
-      this.gateway = v;
+      gateway = v;
-      this.gatewaySender = sender;
+      gatewaySender = sender;
-      return this.gatewaySender;
+      return gatewaySender;
-      return this.multiuserSecureModeEnabled;
+      return multiuserSecureModeEnabled;
-      this.multiuserSecureModeEnabled = v;
+      multiuserSecureModeEnabled = v;
-      return this.subscriptionTimeoutMultipler;
+      return subscriptionTimeoutMultipler;
-    public List/* <InetSocketAddress> */ getLocators() {
-      if (this.locators.size() == 0 && this.servers.size() == 0) {
+    public List<InetSocketAddress> getLocators() {
+      if (locators.size() == 0 && servers.size() == 0) {
-      // needs to return a copy.
-      return Collections.unmodifiableList(new ArrayList(this.locators));
+      return Collections.unmodifiableList(new ArrayList<>(locators));
-    public List/* <InetSocketAddress> */ getServers() {
-      if (this.locators.size() == 0 && this.servers.size() == 0) {
+    public List<InetSocketAddress> getServers() {
+      if (locators.size() == 0 && servers.size() == 0) {
-      return Collections.unmodifiableList(new ArrayList(this.servers));
+      return Collections.unmodifiableList(new ArrayList<>(servers));
-      DataSerializer.writePrimitiveInt(this.connectionTimeout, out);
-      DataSerializer.writePrimitiveInt(this.connectionLifetime, out);
-      DataSerializer.writePrimitiveInt(this.socketBufferSize, out);
-      DataSerializer.writePrimitiveInt(this.readTimeout, out);
-      DataSerializer.writePrimitiveInt(this.minConnections, out);
-      DataSerializer.writePrimitiveInt(this.maxConnections, out);
-      DataSerializer.writePrimitiveInt(this.retryAttempts, out);
-      DataSerializer.writePrimitiveLong(this.idleTimeout, out);
-      DataSerializer.writePrimitiveLong(this.pingInterval, out);
-      DataSerializer.writePrimitiveInt(this.queueRedundancyLevel, out);
-      DataSerializer.writePrimitiveInt(this.queueMessageTrackingTimeout, out);
-      DataSerializer.writePrimitiveBoolean(this.threadLocalConnections, out);
-      DataSerializer.writePrimitiveBoolean(this.queueEnabled, out);
-      DataSerializer.writeString(this.serverGroup, out);
-      DataSerializer.writeArrayList(this.locators, out);
-      DataSerializer.writeArrayList(this.servers, out);
-      DataSerializer.writePrimitiveInt(this.statisticInterval, out);
-      DataSerializer.writePrimitiveBoolean(this.multiuserSecureModeEnabled, out);
-      DataSerializer.writePrimitiveInt(this.socketConnectTimeout, out);
+      DataSerializer.writePrimitiveInt(connectionTimeout, out);
+      DataSerializer.writePrimitiveInt(connectionLifetime, out);
+      DataSerializer.writePrimitiveInt(socketBufferSize, out);
+      DataSerializer.writePrimitiveInt(readTimeout, out);
+      DataSerializer.writePrimitiveInt(minConnections, out);
+      DataSerializer.writePrimitiveInt(maxConnections, out);
+      DataSerializer.writePrimitiveInt(retryAttempts, out);
+      DataSerializer.writePrimitiveLong(idleTimeout, out);
+      DataSerializer.writePrimitiveLong(pingInterval, out);
+      DataSerializer.writePrimitiveInt(queueRedundancyLevel, out);
+      DataSerializer.writePrimitiveInt(queueMessageTrackingTimeout, out);
+      DataSerializer.writePrimitiveBoolean(threadLocalConnections, out);
+      DataSerializer.writePrimitiveBoolean(queueEnabled, out);
+      DataSerializer.writeString(serverGroup, out);
+      DataSerializer.writeArrayList(locators, out);
+      DataSerializer.writeArrayList(servers, out);
+      DataSerializer.writePrimitiveInt(statisticInterval, out);
+      DataSerializer.writePrimitiveBoolean(multiuserSecureModeEnabled, out);
+      DataSerializer.writePrimitiveInt(socketConnectTimeout, out);
-      this.connectionTimeout = DataSerializer.readPrimitiveInt(in);
-      this.connectionLifetime = DataSerializer.readPrimitiveInt(in);
-      this.socketBufferSize = DataSerializer.readPrimitiveInt(in);
-      this.readTimeout = DataSerializer.readPrimitiveInt(in);
-      this.minConnections = DataSerializer.readPrimitiveInt(in);
-      this.maxConnections = DataSerializer.readPrimitiveInt(in);
-      this.retryAttempts = DataSerializer.readPrimitiveInt(in);
-      this.idleTimeout = DataSerializer.readPrimitiveLong(in);
-      this.pingInterval = DataSerializer.readPrimitiveLong(in);
-      this.queueRedundancyLevel = DataSerializer.readPrimitiveInt(in);
-      this.queueMessageTrackingTimeout = DataSerializer.readPrimitiveInt(in);
-      this.threadLocalConnections = DataSerializer.readPrimitiveBoolean(in);
-      this.queueEnabled = DataSerializer.readPrimitiveBoolean(in);
-      this.serverGroup = DataSerializer.readString(in);
-      this.locators = DataSerializer.readArrayList(in);
-      this.servers = DataSerializer.readArrayList(in);
-      this.statisticInterval = DataSerializer.readPrimitiveInt(in);
-      this.multiuserSecureModeEnabled = DataSerializer.readPrimitiveBoolean(in);
-      this.socketConnectTimeout = DataSerializer.readPrimitiveInt(in);
+      connectionTimeout = DataSerializer.readPrimitiveInt(in);
+      connectionLifetime = DataSerializer.readPrimitiveInt(in);
+      socketBufferSize = DataSerializer.readPrimitiveInt(in);
+      readTimeout = DataSerializer.readPrimitiveInt(in);
+      minConnections = DataSerializer.readPrimitiveInt(in);
+      maxConnections = DataSerializer.readPrimitiveInt(in);
+      retryAttempts = DataSerializer.readPrimitiveInt(in);
+      idleTimeout = DataSerializer.readPrimitiveLong(in);
+      pingInterval = DataSerializer.readPrimitiveLong(in);
+      queueRedundancyLevel = DataSerializer.readPrimitiveInt(in);
+      queueMessageTrackingTimeout = DataSerializer.readPrimitiveInt(in);
+      threadLocalConnections = DataSerializer.readPrimitiveBoolean(in);
+      queueEnabled = DataSerializer.readPrimitiveBoolean(in);
+      serverGroup = DataSerializer.readString(in);
+      locators = DataSerializer.readArrayList(in);
+      servers = DataSerializer.readArrayList(in);
+      statisticInterval = DataSerializer.readPrimitiveInt(in);
+      multiuserSecureModeEnabled = DataSerializer.readPrimitiveBoolean(in);
+      socketConnectTimeout = DataSerializer.readPrimitiveInt(in);
-          && Objects.equals(new HashSet(locators), new HashSet(that.locators))
-          && Objects.equals(new HashSet(servers), new HashSet(that.servers))
+          && Objects.equals(new HashSet<>(locators), new HashSet<>(that.locators))
+          && Objects.equals(new HashSet<>(servers), new HashSet<>(that.servers))

INS31 MOV23 MOV78 MOV43 MOV44 MOV78 MOV43 MOV44 INS79 INS83 INS83 INS43 INS42 INS8 MOV41 MOV41 MOV41 MOV41 MOV41 INS42 INS45 INS42 INS41 INS74 INS74 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV78 MOV44 MOV78 MOV44 MOV78 MOV78 INS74 MOV78 INS74 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV21 MOV32 INS42 MOV43 INS43 UPD42 MOV43 INS43 UPD42 MOV43 INS43 MOV43 INS43 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS40 INS42 INS40 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS42 MOV14 INS42 INS74 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV8 INS42 MOV8 MOV27 INS40 INS40 INS40 INS42 MOV43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS74 INS42 INS74 INS40 INS74 INS42 INS74 INS42 MOV42 MOV42 UPD40 MOV40 MOV43 MOV43 INS42 INS42 MOV43 INS42 INS42 MOV43 INS27 MOV14 INS42 INS40 MOV27 INS32 INS42 INS42 INS14 INS14 INS74 INS42 INS74 INS40 INS74 INS42 INS74 INS40 MOV43 MOV43 MOV43 MOV43 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL33 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL40 DEL42 DEL42 DEL14 DEL40 DEL14 DEL27