Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static final String TABLE_DATA_ACCESSOR   = "__tables__";
-  public static final String BYTE_DATA_ACCESSOR    = "__bytes__";
+  public static final String TABLE_DATA_ACCESSOR = "__tables__";
+  public static final String BYTE_DATA_ACCESSOR = "__bytes__";
-  public static final int FILE_TYPE_TEXT   = 1;
-  private static final String FILE_NAME_FIELD   = "fileName";
-  private static final String FILE_TYPE_FIELD   = "fileType";
-  private static final String FILE_DATA_FIELD   = "fileData";
-  private static final String DATA_FIELD        = "data";
+  public static final int FILE_TYPE_TEXT = 1;
+  private static final String FILE_NAME_FIELD = "fileName";
+  private static final String FILE_TYPE_FIELD = "fileType";
+  private static final String FILE_DATA_FIELD = "fileData";
+  private static final String DATA_FIELD = "data";
-  private static final String FILE_MESSAGE      = "fileMessage";
-  
+  private static final String FILE_MESSAGE = "fileMessage";
+
-  
+
-  
+
-    gfJsonObject  = new GfJsonObject();
+    gfJsonObject = new GfJsonObject();
-      //ignorable as key won't be null here & it's thrown for ignorable values
+      // ignorable as key won't be null here & it's thrown for ignorable values
-  
+
-   * @throws ResultDataException
-   *           If the value is non-finite number or if the key is null.
+   * @throws ResultDataException If the value is non-finite number or if the key is null.
-    
+
-  
+
-   * @throws ResultDataException
-   *           If the value is non-finite number or if the key is null.
+   * @throws ResultDataException If the value is non-finite number or if the key is null.
-    
+
-  
+
-    
+
-      
+
-    
+
-  public ResultData addAsFile(String fileName, String fileContents, String message, boolean addTimeStampToName) {
-    return this.addAsFile(fileName, fileContents.getBytes(), FILE_TYPE_TEXT, message, addTimeStampToName);
+  public ResultData addAsFile(String fileName, String fileContents, String message,
+      boolean addTimeStampToName) {
+    return this.addAsFile(fileName, fileContents.getBytes(), FILE_TYPE_TEXT, message,
+        addTimeStampToName);
-  
-  public ResultData addAsFile(String fileName, byte[] data, int fileType, String message, boolean addTimeStampToName) {
+
+  public ResultData addAsFile(String fileName, byte[] data, int fileType, String message,
+      boolean addTimeStampToName) {
-  
-  public ResultData addByteDataFromFileFile(String filePath, int fileType, String message, boolean addTimeStampToName) throws FileNotFoundException, IOException {
-    byte[][] filesToBytes = CliUtil.filesToBytes(new String[] { filePath });
-    
+
+  public ResultData addByteDataFromFileFile(String filePath, int fileType, String message,
+      boolean addTimeStampToName) throws FileNotFoundException, IOException {
+    byte[][] filesToBytes = CliUtil.filesToBytes(new String[] {filePath});
+
-  
+
-//    System.out.println("fileType :: "+fileType);
-//    System.out.println("FILE_TYPE_BINARY :: "+FILE_TYPE_BINARY);
-//    System.out.println("FILE_TYPE_TEXT :: "+FILE_TYPE_TEXT);
+    // System.out.println("fileType :: "+fileType);
+    // System.out.println("FILE_TYPE_BINARY :: "+FILE_TYPE_BINARY);
+    // System.out.println("FILE_TYPE_TEXT :: "+FILE_TYPE_TEXT);
-    
+
-//      System.out.println(data);
-//      sectionData.put(FILE_DATA_FIELD, Base64.encodeBytes(data, Base64.GZIP));
+      // System.out.println(data);
+      // sectionData.put(FILE_DATA_FIELD, Base64.encodeBytes(data, Base64.GZIP));
-//    } catch (IOException e) {
-//      e.printStackTrace();
+      // } catch (IOException e) {
+      // e.printStackTrace();
-   * @throws IOException 
+   * @throws IOException
-    String options = length > 1 ? "(y/N/a)" : "(y/N)"; //TODO - Abhishek Make this consistent - with AbstractCliAroundInterceptor.readYesNo() 
+    String options = length > 1 ? "(y/N/a)" : "(y/N)"; // TODO - Abhishek Make this consistent -
+                                                       // with
+                                                       // AbstractCliAroundInterceptor.readYesNo()
-    BYTEARRAY_LOOP:
-    for (int i = 0; i < length; i++) {
+    BYTEARRAY_LOOP: for (int i = 0; i < length; i++) {
-  //      System.out.println(object.names());
-//      System.out.println(fileName);
+      // System.out.println(object.names());
+      // System.out.println(fileName);
-//      String encodedString = object.getString(FILE_DATA_FIELD);
-//      byte[] uncompressed = Base64.decode(encodedString, Base64.GZIP);
+      // String encodedString = object.getString(FILE_DATA_FIELD);
+      // byte[] uncompressed = Base64.decode(encodedString, Base64.GZIP);
-        String fileExistsMessage = CliStrings.format(
-                                    CliStrings.ABSTRACTRESULTDATA__MSG__FILE_WITH_NAME_0_EXISTS_IN_1,
-                                    new Object[] { fileName, fileToDumpData.getParent(), options });
+        String fileExistsMessage =
+            CliStrings.format(CliStrings.ABSTRACTRESULTDATA__MSG__FILE_WITH_NAME_0_EXISTS_IN_1,
+                new Object[] {fileName, fileToDumpData.getParent(), options});
-        handleCondition(CliStrings.format(CliStrings.ABSTRACTRESULTDATA__MSG__PARENT_DIRECTORY_OF_0_DOES_NOT_EXIST, fileToDumpData.getAbsolutePath()), isGfshVM);
+        handleCondition(CliStrings.format(
+            CliStrings.ABSTRACTRESULTDATA__MSG__PARENT_DIRECTORY_OF_0_DOES_NOT_EXIST,
+            fileToDumpData.getAbsolutePath()), isGfshVM);
-        handleCondition(CliStrings.format(CliStrings.ABSTRACTRESULTDATA__MSG__PARENT_DIRECTORY_OF_0_IS_NOT_WRITABLE, fileToDumpData.getAbsolutePath()), isGfshVM);
+        handleCondition(CliStrings.format(
+            CliStrings.ABSTRACTRESULTDATA__MSG__PARENT_DIRECTORY_OF_0_IS_NOT_WRITABLE,
+            fileToDumpData.getAbsolutePath()), isGfshVM);
-        handleCondition(CliStrings.format(CliStrings.ABSTRACTRESULTDATA__MSG__PARENT_OF_0_IS_NOT_DIRECTORY, fileToDumpData.getAbsolutePath()), isGfshVM);
+        handleCondition(
+            CliStrings.format(CliStrings.ABSTRACTRESULTDATA__MSG__PARENT_OF_0_IS_NOT_DIRECTORY,
+                fileToDumpData.getAbsolutePath()),
+            isGfshVM);
-//      System.out.println("fileMessage :: "+fileMessage);
+      // System.out.println("fileMessage :: "+fileMessage);
-          Gfsh.println(MessageFormat.format(fileMessage, new Object[] {fileToDumpData.getAbsolutePath()}));
+          Gfsh.println(
+              MessageFormat.format(fileMessage, new Object[] {fileToDumpData.getAbsolutePath()}));
-//      System.out.println(new String(uncompressed));
+      // System.out.println(new String(uncompressed));
-  //TODO - Abhishek : prepare common utility for this & ANSI Styling
+  // TODO - Abhishek : prepare common utility for this & ANSI Styling
-  
+
-  
+

UPD66 UPD66 DEL66