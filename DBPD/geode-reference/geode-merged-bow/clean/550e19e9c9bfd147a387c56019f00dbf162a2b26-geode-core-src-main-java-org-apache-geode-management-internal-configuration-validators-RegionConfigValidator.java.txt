GEODE-6945:geode-managment should create its own set of configurationâ€¦ (#3928)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

* do not use xml domain object for region configuration
* add RegionType.UNSUPPORTED

-import org.apache.geode.cache.configuration.EnumActionDestroyOverflow;
-import org.apache.geode.cache.configuration.RegionAttributesDataPolicy;
-import org.apache.geode.cache.configuration.RegionAttributesScope;
-import org.apache.geode.cache.configuration.RegionAttributesType;
-import org.apache.geode.cache.configuration.RegionConfig;
+import org.apache.geode.management.configuration.Region;
-public class RegionConfigValidator implements ConfigurationValidator<RegionConfig> {
+public class RegionConfigValidator implements ConfigurationValidator<Region> {
-  public void validate(CacheElementOperation operation, RegionConfig config)
+  public void validate(CacheElementOperation operation, Region config)
-  private void validateCreate(RegionConfig config) {
+  private void validateCreate(Region config) {
-    // validate if the type is a valid RegionType. Only types defined in RegionType are supported
-    // by management v2 api.
-    try {
-      RegionType.valueOf(config.getType());
-    } catch (IllegalArgumentException e) {
-      throw new IllegalArgumentException(
-          String.format("Region type '%s' is not supported.", config.getType()));
+    if (config.getType() == RegionType.UNSUPPORTED) {
+      throw new IllegalArgumentException(("Region type is unsupported."));
-
-    setShortcutAttributes(config);
-
-    if (config.getRegionAttributes().getDataPolicy().isPersistent()) {
+    if (config.getType().name().contains("PERSISTENT")) {
-
-  public static void setShortcutAttributes(RegionConfig config) {
-    String type = config.getType();
-    RegionAttributesType regionAttributes;
-
-    if (config.getRegionAttributes() == null) {
-      regionAttributes = new RegionAttributesType();
-      config.setRegionAttributes(regionAttributes);
-    }
-
-    regionAttributes = config.getRegionAttributes();
-    switch (type) {
-      case "PARTITION": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
-        break;
-      }
-      case "REPLICATE": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.REPLICATE, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
-        break;
-      }
-      case "PARTITION_REDUNDANT": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
-        checkAndSetRedundancyCopy("1", regionAttributes);
-        break;
-      }
-      case "PARTITION_PERSISTENT": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION, regionAttributes);
-        break;
-      }
-      case "PARTITION_REDUNDANT_PERSISTENT": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION, regionAttributes);
-        checkAndSetRedundancyCopy("1", regionAttributes);
-        break;
-      }
-      case "PARTITION_OVERFLOW": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
-        break;
-      }
-      case "PARTITION_REDUNDANT_OVERFLOW": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
-        checkAndSetRedundancyCopy("1", regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
-        break;
-      }
-      case "PARTITION_PERSISTENT_OVERFLOW": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION, regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
-        break;
-      }
-      case "PARTITION_REDUNDANT_PERSISTENT_OVERFLOW": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION, regionAttributes);
-        checkAndSetRedundancyCopy("1", regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
-        break;
-      }
-      case "PARTITION_HEAP_LRU": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.LOCAL_DESTROY, regionAttributes);
-        break;
-
-      }
-      case "PARTITION_REDUNDANT_HEAP_LRU": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
-        checkAndSetRedundancyCopy("1", regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.LOCAL_DESTROY, regionAttributes);
-        break;
-      }
-
-      case "REPLICATE_PERSISTENT": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
-        break;
-      }
-      case "REPLICATE_OVERFLOW": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.REPLICATE, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
-        break;
-
-      }
-      case "REPLICATE_PERSISTENT_OVERFLOW": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
-        break;
-      }
-      case "REPLICATE_HEAP_LRU": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PRELOADED, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
-        regionAttributes.setInterestPolicy("all");
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.LOCAL_DESTROY, regionAttributes);
-        break;
-      }
-      case "LOCAL": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.NORMAL, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
-        break;
-      }
-      case "LOCAL_PERSISTENT": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
-        break;
-      }
-      case "LOCAL_HEAP_LRU": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.NORMAL, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.LOCAL_DESTROY, regionAttributes);
-        break;
-      }
-      case "LOCAL_OVERFLOW": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.NORMAL, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
-        break;
-      }
-      case "LOCAL_PERSISTENT_OVERFLOW": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
-        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
-        break;
-      }
-      case "PARTITION_PROXY": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
-        checkAndSetLocalMaxMemory("0", regionAttributes);
-        break;
-      }
-      case "PARTITION_PROXY_REDUNDANT": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
-        checkAndSetLocalMaxMemory("0", regionAttributes);
-        checkAndSetRedundancyCopy("1", regionAttributes);
-        break;
-      }
-      case "REPLICATE_PROXY": {
-        checkAndSetDataPolicy(RegionAttributesDataPolicy.EMPTY, regionAttributes);
-        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
-        break;
-      }
-      default:
-        throw new IllegalArgumentException("Invalid type " + type + ".");
-    }
-  }
-
-  private static void checkAndSetLocalMaxMemory(String maxMemory,
-      RegionAttributesType regionAttributes) {
-    if (regionAttributes.getPartitionAttributes() == null
-        || regionAttributes.getPartitionAttributes().getLocalMaxMemory() == null) {
-      regionAttributes.setLocalMaxMemory(maxMemory);
-    }
-    String existing = regionAttributes.getPartitionAttributes().getLocalMaxMemory();
-    if (!existing.equals(maxMemory)) {
-      throw new IllegalArgumentException("Invalid local max memory: " + existing + ".");
-    }
-  }
-
-  private static void checkAndSetEvictionAction(EnumActionDestroyOverflow evictionAction,
-      RegionAttributesType regionAttributes) {
-    if (regionAttributes.getEvictionAttributes() == null
-        || regionAttributes.getEvictionAttributes().getLruHeapPercentage() == null
-        || regionAttributes.getEvictionAttributes().getLruHeapPercentage().getAction() == null) {
-      regionAttributes.setLruHeapPercentageEvictionAction(evictionAction);
-    }
-
-    EnumActionDestroyOverflow existing =
-        regionAttributes.getEvictionAttributes().getLruHeapPercentage().getAction();
-    if (existing != evictionAction) {
-      throw new IllegalArgumentException(
-          "Conflicting eviction action " + existing.toString() + ".");
-    }
-  }
-
-  private static void checkAndSetScope(RegionAttributesScope scope,
-      RegionAttributesType regionAttributes) {
-    RegionAttributesScope existing = regionAttributes.getScope();
-    if (existing == null) {
-      regionAttributes.setScope(scope);
-    } else if (existing != scope) {
-      throw new IllegalArgumentException("Conflicting scope " + existing.toString() + ".");
-    }
-  }
-
-  private static void checkAndSetDataPolicy(RegionAttributesDataPolicy policy,
-      RegionAttributesType regionAttributes) {
-    RegionAttributesDataPolicy existing = regionAttributes.getDataPolicy();
-    if (existing == null) {
-      regionAttributes.setDataPolicy(policy);
-    } else if (existing != policy) {
-      throw new IllegalArgumentException("Conflicting data policy "
-          + existing.toString() + ".");
-    }
-  }
-
-  // need to do this if user already set the redundant copy in the RegionAttributeType
-  private static void checkAndSetRedundancyCopy(String copies,
-      RegionAttributesType regionAttributes) {
-    if (regionAttributes.getPartitionAttributes() == null
-        || regionAttributes.getPartitionAttributes().getRedundantCopies() == null) {
-      regionAttributes.setRedundantCopy(copies);
-    }
-    RegionAttributesType.PartitionAttributes partitionAttributes =
-        regionAttributes.getPartitionAttributes();
-    if ("0".equals(partitionAttributes.getRedundantCopies())) {
-      throw new IllegalArgumentException(
-          "Conflicting redundant copy when region type is REDUNDANT.");
-    }
-  }

MOV26 UPD40 UPD74 UPD43 UPD42 UPD43 UPD43 INS25 UPD42 UPD42 INS27 INS8 MOV32 INS40 MOV53 UPD42 INS45 UPD42 MOV43 INS36 MOV42 UPD42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL21 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL45 DEL42 DEL32 DEL21 DEL10 DEL8 DEL45 DEL49 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL40 DEL42 DEL32 DEL21 DEL10 DEL8 DEL49 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL50 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31