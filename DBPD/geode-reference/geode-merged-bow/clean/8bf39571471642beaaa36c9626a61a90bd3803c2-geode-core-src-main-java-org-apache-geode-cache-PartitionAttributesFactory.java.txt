Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A factory that creates instances of {@link PartitionAttributes} which are
- * used to create a partitioned {@link Region}. The setter methods follow the
- * self-return idiom so that they can be "chained" together with the
- * {@link #create} method to create
- * {@link PartitionAttributes}. For example:<br>
+ * A factory that creates instances of {@link PartitionAttributes} which are used to create a
+ * partitioned {@link Region}. The setter methods follow the self-return idiom so that they can be
+ * "chained" together with the {@link #create} method to create {@link PartitionAttributes}. For
+ * example:<br>
- * PartitionAttributes pa = new PartitionAttributesFactory()
- *  .setRedundantCopies(1)
- *  .setLocalMaxMemory(1240)
- *  .create();
- *     
- * final Region myRegion = new RegionFactory()
- *  .setPartitionAttributes(pa)
- *  .setKeyConstraint(String.class)
- *  .setValueConstraint(ArrayList.class)
- *  .create("myRegion");
+ * PartitionAttributes pa =
+ *     new PartitionAttributesFactory().setRedundantCopies(1).setLocalMaxMemory(1240).create();
+ * 
+ * final Region myRegion = new RegionFactory().setPartitionAttributes(pa)
+ *     .setKeyConstraint(String.class).setValueConstraint(ArrayList.class).create("myRegion");
- * <a href="package-summary.html#declarative">cache.xml</a> file. Here is an
- * example of how to configure a Partitioned Region named "pRoot" whose 
- * {@link org.apache.geode.cache.Scope} is Distributed Ack, which maintains
- * a {@link #setRedundantCopies(int) redundant copy} of any given 
- * {@link org.apache.geode.cache.Region.Entry}, configures a 
- * {@link org.apache.geode.cache.CacheLoader} implementation, and sets 
- * {@link #setGlobalProperties(Properties) global properties} as well as 
+ * <a href="package-summary.html#declarative">cache.xml</a> file. Here is an example of how to
+ * configure a Partitioned Region named "pRoot" whose {@link org.apache.geode.cache.Scope} is
+ * Distributed Ack, which maintains a {@link #setRedundantCopies(int) redundant copy} of any given
+ * {@link org.apache.geode.cache.Region.Entry}, configures a
+ * {@link org.apache.geode.cache.CacheLoader} implementation, and sets
+ * {@link #setGlobalProperties(Properties) global properties} as well as
-public class PartitionAttributesFactory<K,V>
-{
+public class PartitionAttributesFactory<K, V> {
-   * @deprecated - please use the {@link #setLocalMaxMemory(int)} method instead.<p>
-   * The {@link #setLocalProperties(Properties) local property} name that sets
-   * the maximum heap storage a VM contributes to a partitioned Region. When set
-   * to zero, the resulting Region reference allows access to the partitioned
-   * Region without any consuming any heap storage.
+   * @deprecated - please use the {@link #setLocalMaxMemory(int)} method instead.
+   *             <p>
+   *             The {@link #setLocalProperties(Properties) local property} name that sets the
+   *             maximum heap storage a VM contributes to a partitioned Region. When set to zero,
+   *             the resulting Region reference allows access to the partitioned Region without any
+   *             consuming any heap storage.
-   * Default local max memory value in megabytes.  By default each partitioned
-   * Region can contribute 90% of the maximum memory allocated to a VM.
+   * Default local max memory value in megabytes. By default each partitioned Region can contribute
+   * 90% of the maximum memory allocated to a VM.
-  static int computeMaxMem()
-  {
+  static int computeMaxMem() {
-    final long maxMemoryToUse = (long) (maxMemInMegabytes * 0.90); 
+    final long maxMemoryToUse = (long) (maxMemInMegabytes * 0.90);
-      ret = (int) maxMemoryToUse; 
+      ret = (int) maxMemoryToUse;
-  
+
-   * The default maximum amount of memory to be used by this region in this
-   * process, in megabytes.
+   * The default maximum amount of memory to be used by this region in this process, in megabytes.
-   * @deprecated Use {@link
-   *             PartitionAttributesImpl#getLocalMaxMemoryDefault()} instead.
+   * @deprecated Use {@link PartitionAttributesImpl#getLocalMaxMemoryDefault()} instead.
-  @Deprecated 
+  @Deprecated
-   * @deprecated - use {@link #setTotalMaxMemory(long)} instead.<p>
-   * The {@link #setGlobalProperties(Properties) global property} name that
-   * defines the total maximum size for the partitioned Region.<p>
-   * <em>This setting must be the same in all processes using the Region.</em>
+   * @deprecated - use {@link #setTotalMaxMemory(long)} instead.
+   *             <p>
+   *             The {@link #setGlobalProperties(Properties) global property} name that defines the
+   *             total maximum size for the partitioned Region.
+   *             <p>
+   *             <em>This setting must be the same in all processes using the Region.</em>
-   * @deprecated - please use {@link #setTotalNumBuckets(int)} instead.<p>
-   * <em>This setting must be the same in all processes using the Region.</em>
+   * @deprecated - please use {@link #setTotalNumBuckets(int)} instead.
+   *             <p>
+   *             <em>This setting must be the same in all processes using the Region.</em>
-  public PartitionAttributesFactory() {
-  }
+  public PartitionAttributesFactory() {}
-   * {@link PartitionAttributes} with the same settings as those in
-   * the specified {@link PartitionAttributes}
+   * {@link PartitionAttributes} with the same settings as those in the specified
+   * {@link PartitionAttributes}
-   * @param pa  the <code>PartitionAttributes</code> used to initialize this
-   *          PartitionAttributesFactory
+   * @param pa the <code>PartitionAttributes</code> used to initialize this
+   *        PartitionAttributesFactory
-  
+
-   * Sets the number of extra copies of buckets desired. Extra copies allow for
-   * both high availability in the face of VM departure (intended or unintended)
-   * and and load balancing read operations.<p>
-   * <em>This setting must be the same in all processes using the Region.</em>
-   * Default number of redundant copies is 0.
+   * Sets the number of extra copies of buckets desired. Extra copies allow for both high
+   * availability in the face of VM departure (intended or unintended) and and load balancing read
+   * operations.
+   * <p>
+   * <em>This setting must be the same in all processes using the Region.</em> Default number of
+   * redundant copies is 0.
-   * @param redundantCopies
-   *          the number of redundant bucket copies, limited to values 0, 1, 2 and 3.
+   * @param redundantCopies the number of redundant bucket copies, limited to values 0, 1, 2 and 3.
-  public PartitionAttributesFactory<K,V> setRedundantCopies(int redundantCopies)
-  {
+  public PartitionAttributesFactory<K, V> setRedundantCopies(int redundantCopies) {
-   * Sets the cache writer for the next <code>PartitionAttributes</code>
-   * created.  <i>Currently unsupported for the early access release.</i>
+   * Sets the cache writer for the next <code>PartitionAttributes</code> created. <i>Currently
+   * unsupported for the early access release.</i>
-   * @param cacheWriter
-   *          the cache writer or null if no cache writer
-   * @return this
-  public PartitionAttributesFactory<K,V> setCacheWriter(CacheWriter cacheWriter)
-  {
-    this.partitionAttributes.setCacheWriter(cacheWriter);
-    return this;
-  }
-     */
+   * @param cacheWriter the cache writer or null if no cache writer
+   * @return this public PartitionAttributesFactory<K,V> setCacheWriter(CacheWriter cacheWriter) {
+   *         this.partitionAttributes.setCacheWriter(cacheWriter); return this; }
+   */
-   * Sets the maximum amount of memory, in megabytes, to be used by the
-   * region in this process.  If not set, a default of 
-   * 90% of available heap is used.
+   * Sets the maximum amount of memory, in megabytes, to be used by the region in this process. If
+   * not set, a default of 90% of available heap is used.
-  public PartitionAttributesFactory<K,V> setLocalMaxMemory(int mb) {
+  public PartitionAttributesFactory<K, V> setLocalMaxMemory(int mb) {
-  
+
-   * Sets the maximum amount of memory, in megabytes, to be used by the
-   * region in all processes.<p>
-   * <em>This setting must be the same in all processes using the Region.</em>
-   * The default value is Integer.MAX_VALUE.
+   * Sets the maximum amount of memory, in megabytes, to be used by the region in all processes.
+   * <p>
+   * <em>This setting must be the same in all processes using the Region.</em> The default value is
+   * Integer.MAX_VALUE.
-  public PartitionAttributesFactory<K,V> setTotalMaxMemory(long mb) {
+  public PartitionAttributesFactory<K, V> setTotalMaxMemory(long mb) {
-  
+
-   * Sets the total number of hash buckets to be used by the region in
-   * all processes.
+   * Sets the total number of hash buckets to be used by the region in all processes.
-   * {@link org.apache.geode.cache.Region.Entry Entries} are stored in
-   * buckets and buckets may move from one VM to another. Buckets may also have
-   * copies, depending on {@link #setRedundantCopies(int) redundancy} to provide
-   * high availability in the face of VM failure.
+   * {@link org.apache.geode.cache.Region.Entry Entries} are stored in buckets and buckets may move
+   * from one VM to another. Buckets may also have copies, depending on
+   * {@link #setRedundantCopies(int) redundancy} to provide high availability in the face of VM
+   * failure.
-   * The number of buckets should be prime and as a rough guide at the least four
-   * times the number of partition VMs. However, there is significant overhead
-   * to managing a bucket, particularly for higher values of
-   * {@link #setRedundantCopies(int) redundancy}.
+   * The number of buckets should be prime and as a rough guide at the least four times the number
+   * of partition VMs. However, there is significant overhead to managing a bucket, particularly for
+   * higher values of {@link #setRedundantCopies(int) redundancy}.
-  public PartitionAttributesFactory<K,V> setTotalNumBuckets(int numBuckets) {
+  public PartitionAttributesFactory<K, V> setTotalNumBuckets(int numBuckets) {
+
-  public PartitionAttributesFactory<K,V> setPartitionResolver(
-                  PartitionResolver<K,V> resolver) {
+  public PartitionAttributesFactory<K, V> setPartitionResolver(PartitionResolver<K, V> resolver) {
+
-   *  Sets the name of the PartitionRegion with which this newly created
-   *  partitioned region is colocated 
+   * Sets the name of the PartitionRegion with which this newly created partitioned region is
+   * colocated
-  public PartitionAttributesFactory<K,V> setColocatedWith(String colocatedRegionFullPath) {
+  public PartitionAttributesFactory<K, V> setColocatedWith(String colocatedRegionFullPath) {
-  
+
-   *  Sets the delay in milliseconds that
-   * existing members will wait before satisfying redundancy
-   * after another member crashes. 
-   * Default value is set to -1 which indicates
-   * that redundancy will not be recovered after a failure.
+   * Sets the delay in milliseconds that existing members will wait before satisfying redundancy
+   * after another member crashes. Default value is set to -1 which indicates that redundancy will
+   * not be recovered after a failure.
-  public PartitionAttributesFactory<K,V> setRecoveryDelay(long recoveryDelay) {
+  public PartitionAttributesFactory<K, V> setRecoveryDelay(long recoveryDelay) {
-  
+
-   *  Sets the delay in milliseconds that
-   * new members will wait before satisfying redundancy. -1 indicates
-   * that adding new members will not trigger redundancy recovery.
-   * The default (set to 0) is to recover redundancy immediately when a new
-   * member is added. 
+   * Sets the delay in milliseconds that new members will wait before satisfying redundancy. -1
+   * indicates that adding new members will not trigger redundancy recovery. The default (set to 0)
+   * is to recover redundancy immediately when a new member is added.
-  public PartitionAttributesFactory<K,V> setStartupRecoveryDelay(long startupRecoveryDelay) {
+  public PartitionAttributesFactory<K, V> setStartupRecoveryDelay(long startupRecoveryDelay) {
-  
+
-  public PartitionAttributesFactory<K, V> addPartitionListener(
-      PartitionListener listener) {
+  public PartitionAttributesFactory<K, V> addPartitionListener(PartitionListener listener) {
-  }  
-  
+  }
+
-   * Sets the <code>Properties</code> for the local instance the partitioned
-   * Region. Local properties define how the local instance of the partitioned
-   * region and any storage it may provide, behaves.  There are currently no
-   * non-deprecated local properties.
-   * @deprecated use {@link #setLocalMaxMemory(int)}  in GemFire 5.1 and later releases
+   * Sets the <code>Properties</code> for the local instance the partitioned Region. Local
+   * properties define how the local instance of the partitioned region and any storage it may
+   * provide, behaves. There are currently no non-deprecated local properties.
+   * 
+   * @deprecated use {@link #setLocalMaxMemory(int)} in GemFire 5.1 and later releases
-  public PartitionAttributesFactory<K,V> setLocalProperties(Properties localProps)
-  {
+  public PartitionAttributesFactory<K, V> setLocalProperties(Properties localProps) {
- 
+
-   * Sets the global <code>Properties</code> for the next <code>PartitionAttributes</code>
-   * created.  Global properties define how the entire partitioned Region behaves.
+   * Sets the global <code>Properties</code> for the next <code>PartitionAttributes</code> created.
+   * Global properties define how the entire partitioned Region behaves.
-   * @deprecated use {@link #setTotalMaxMemory(long)} and {@link #setTotalNumBuckets(int)} in GemFire 5.1 and later releases
+   * @deprecated use {@link #setTotalMaxMemory(long)} and {@link #setTotalNumBuckets(int)} in
+   *             GemFire 5.1 and later releases
-  public PartitionAttributesFactory<K,V> setGlobalProperties(Properties globalProps)
-  {
+  public PartitionAttributesFactory<K, V> setGlobalProperties(Properties globalProps) {
-  
+
-   * FixedPartitionAttributes defined for this partitioned region is added to
-   * PR attributes.
+   * FixedPartitionAttributes defined for this partitioned region is added to PR attributes.
-  
+
-   * @param idleTimeout
-   *          the idleTimeout ExpirationAttributes for entries in this region
-   * @throws IllegalArgumentException
-   *           if idleTimeout is null
+   * @param idleTimeout the idleTimeout ExpirationAttributes for entries in this region
+   * @throws IllegalArgumentException if idleTimeout is null
-  public PartitionAttributesFactory<K,V> setEntryIdleTimeout(
-      ExpirationAttributes idleTimeout)
-  {
-    if (idleTimeout == null) {
-      throw new IllegalArgumentException(LocalizedStrings.PartitionAttributesFactory_IDLETIMEOUT_MUST_NOT_BE_NULL.toLocalizedString());
-    }
-    this.partitionAttributes.entryIdleTimeoutExpiration = idleTimeout;
-    return this;
-  }
-  */
+   * public PartitionAttributesFactory<K,V> setEntryIdleTimeout( ExpirationAttributes idleTimeout) {
+   * if (idleTimeout == null) { throw new IllegalArgumentException(LocalizedStrings.
+   * PartitionAttributesFactory_IDLETIMEOUT_MUST_NOT_BE_NULL.toLocalizedString()); }
+   * this.partitionAttributes.entryIdleTimeoutExpiration = idleTimeout; return this; }
+   */
-   * @param timeToLive
-   *          the timeToLive ExpirationAttributes for entries in this region
-   * @throws IllegalArgumentException
-   *           if timeToLive is null
+   * @param timeToLive the timeToLive ExpirationAttributes for entries in this region
+   * @throws IllegalArgumentException if timeToLive is null
-  public PartitionAttributesFactory<K,V> setEntryTimeToLive(
-      ExpirationAttributes timeToLive)
-  {
-    if (timeToLive == null) {
-      throw new IllegalArgumentException(LocalizedStrings.PartitionAttributesFactory_TIMETOLIVE_MUST_NOT_BE_NULL.toLocalizedString());
-    }
-    this.partitionAttributes.entryTimeToLiveExpiration = timeToLive;
-    return this;
-  }
-  */
+   * public PartitionAttributesFactory<K,V> setEntryTimeToLive( ExpirationAttributes timeToLive) {
+   * if (timeToLive == null) { throw new IllegalArgumentException(LocalizedStrings.
+   * PartitionAttributesFactory_TIMETOLIVE_MUST_NOT_BE_NULL.toLocalizedString()); }
+   * this.partitionAttributes.entryTimeToLiveExpiration = timeToLive; return this; }
+   */
-   * Enables/Disables local Caching for this node for region entries for the
-   * next <code>PartitionAttributes</code> created. Default is true.
+   * Enables/Disables local Caching for this node for region entries for the next
+   * <code>PartitionAttributes</code> created. Default is true.
-   * @throws IllegalStateException
-   *           if the current settings violate the <a
-   *           href="#compatibility">compatibility rules </a>
+   * @throws IllegalStateException if the current settings violate the
+   *         <a href="#compatibility">compatibility rules </a>
-  public PartitionAttributes<K,V> create()
-  {
+  public PartitionAttributes<K, V> create() {
-//    setDefaults();  [bruce] defaults are set in the PartitionedRegion when the
-//                            attributes are applied
-    return (PartitionAttributes<K,V>)this.partitionAttributes.clone();
+    // setDefaults(); [bruce] defaults are set in the PartitionedRegion when the
+    // attributes are applied
+    return (PartitionAttributes<K, V>) this.partitionAttributes.clone();
-//  /**
-//   * This method sets the properties to their default values in preparation
-//   * for returning a PartitionAttributes to the user. For example, if it
-//   * doesn't have localMaxMemory, it would set it to
-//   * LOCAL_MAX_MEMORY_DEFAULT.
-//   * 
-//   */
-//  private void setDefaults()
-//  {
-//    if (this.partitionAttributes.localProperties
-//        .get(PartitionAttributesFactory.LOCAL_MAX_MEMORY_PROPERTY) == null) {
-//      this.partitionAttributes.setLocalMaxMemory(PartitionAttributesFactory.LOCAL_MAX_MEMORY_DEFAULT);
-//    }
-//
-//  }
+  // /**
+  // * This method sets the properties to their default values in preparation
+  // * for returning a PartitionAttributes to the user. For example, if it
+  // * doesn't have localMaxMemory, it would set it to
+  // * LOCAL_MAX_MEMORY_DEFAULT.
+  // *
+  // */
+  // private void setDefaults()
+  // {
+  // if (this.partitionAttributes.localProperties
+  // .get(PartitionAttributesFactory.LOCAL_MAX_MEMORY_PROPERTY) == null) {
+  // this.partitionAttributes.setLocalMaxMemory(PartitionAttributesFactory.LOCAL_MAX_MEMORY_DEFAULT);
+  // }
+  //
+  // }

