Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Utility methods for managing and using Sets 
+ * Utility methods for managing and using Sets
+ * 
-  public static  <T> boolean intersectsWith(final Set<? extends T> a, final Set<? extends T> b) {
+  public static <T> boolean intersectsWith(final Set<? extends T> a, final Set<? extends T> b) {
-    final Set/*<T>*/ lSet, sSet;
+    final Set/* <T> */ lSet, sSet;
-      lSet = a; sSet = b;
+      lSet = a;
+      sSet = b;
-      lSet = b; sSet = a;
+      lSet = b;
+      sSet = a;
-    for (Iterator i=sSet.iterator(); i.hasNext(); ) {
+    for (Iterator i = sSet.iterator(); i.hasNext();) {
-  
-  public static /*T*/ Set/*<T>*/ intersection(final Set/*<T>*/ a, final Set/*<T>*/ b) {
+
+  public static /* T */ Set/* <T> */ intersection(final Set/* <T> */ a, final Set/* <T> */ b) {
-    final Set/*<T>*/ lSet, sSet;
+    final Set/* <T> */ lSet, sSet;
-      lSet = a; sSet = b;
+      lSet = a;
+      sSet = b;
-      lSet = b; sSet = a;
+      lSet = b;
+      sSet = a;
-    HashSet /*<T>*/ ret = new HashSet/*<T>*/();
-    for (Iterator i=sSet.iterator(); i.hasNext(); ) {
+    HashSet /* <T> */ ret = new HashSet/* <T> */();
+    for (Iterator i = sSet.iterator(); i.hasNext();) {

UPD66