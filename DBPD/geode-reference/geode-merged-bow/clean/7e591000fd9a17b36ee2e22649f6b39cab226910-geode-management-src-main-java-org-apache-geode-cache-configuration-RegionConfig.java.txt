GEODE-6744: list index rest api (#3550)

Co-authored-by: Owen Nichols <onichols@pivotal.io>


+import javax.xml.bind.annotation.XmlTransient;
+import org.apache.commons.lang3.StringUtils;
-  public static class Index extends CacheElement {
+  public static class Index extends CacheElement implements RestfulEndpoint {
+    @XmlTransient
+    protected String regionName;
+
+    public Index() {}
+
+    public Index(Index index) {
+      this.name = index.name;
+      this.expression = index.expression;
+      this.fromClause = index.fromClause;
+      this.imports = index.imports;
+      this.keyIndex = index.keyIndex;
+      this.type = index.type;
+    }
+      // this should return a "key" value because some production code relies on this method
+      // returning a type string that would turn into IndexType enum object
+      if (keyIndex == Boolean.TRUE) {
+        return "key";
+      }
+
-      if ("range".equalsIgnoreCase(value) || "hash".equalsIgnoreCase(value)
-          || "key".equalsIgnoreCase(value)) {
+      if ("range".equalsIgnoreCase(value) || "hash".equalsIgnoreCase(value)) {
+        setKeyIndex(false);
+      }
+      // we need to avoid setting the "type" to key since by xsd definition, it should only contain
+      // "hash" and "range" value.
+      else if ("key".equalsIgnoreCase(value)) {
+        this.type = null;
+        setKeyIndex(true);
+    }
-      setKeyIndex("key".equalsIgnoreCase(value));
+    public String getRegionName() {
+      return regionName;
+    }
+
+    public void setRegionName(String regionName) {
+      this.regionName = regionName;
+      if (fromClause == null) {
+        fromClause = "/" + regionName;
+      } else if (!fromClause.contains(regionName)) {
+        throw new IllegalArgumentException(
+            "Invalid regionName for this index with fromClause = " + fromClause);
+      }
+    @JsonIgnore
+
+    @Override
+    public String getEndpoint() {
+      if (StringUtils.isBlank(regionName)) {
+        throw new IllegalArgumentException("regionName is required.");
+      }
+      return RegionConfig.REGION_CONFIG_ENDPOINT + "/" + regionName + "/indexes";
+    }

INS26 INS26 INS40 INS40 INS43 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS78 INS83 INS43 INS59 INS83 INS42 INS8 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS78 INS78 INS43 MOV78 INS83 MOV43 INS42 INS8 INS42 INS42 INS42 INS43 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS25 INS42 INS41 INS43 INS42 INS21 INS25 INS42 INS42 INS42 INS25 INS41 INS42 INS7 INS7 INS7 INS7 INS7 INS7 INS27 INS8 INS25 INS42 INS42 INS7 INS27 INS8 INS25 INS32 INS8 INS27 INS22 INS40 INS22 INS40 INS22 INS40 INS22 INS40 INS22 INS40 INS22 INS40 INS42 INS40 INS41 INS21 MOV32 INS8 MOV8 INS22 INS42 INS42 INS33 INS21 INS38 INS8 INS42 INS42 INS42 INS53 INS40 INS45 INS42 INS45 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS45 INS32 INS21 INS21 INS52 INS42 INS7 INS32 INS53 INS14 INS42 INS9 INS7 INS32 INS42 INS27 INS42 INS42 INS42 INS14 INS43 INS45 INS22 INS33 INS42 INS9 INS45 INS42 INS43 INS27 INS42 INS52 INS42 INS42 INS45 INS42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21