GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)

* GEODE-7556: remove membership dependencies on geode-core exeptions

Removed use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.

Except for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.

MemberShunnedException is now in the membership module instead of the TcpConduit module. It, too, is a checked exception.

CancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.

Several tests had to be modified to handle our stress-test environement.

* use checkCancelled method

+import org.apache.geode.ForcedDisconnectException;
+import org.apache.geode.GemFireConfigException;
+import org.apache.geode.SystemConnectException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberDisconnectedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberShunnedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberStartupException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipClosedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfigurationException;
-import org.apache.geode.distributed.internal.membership.gms.api.MembershipTestHook;
+import org.apache.geode.internal.tcp.ConnectionException;
+import org.apache.geode.security.AuthenticationRequiredException;
+import org.apache.geode.security.GemFireSecurityException;
-    membership = MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()
-        .setAuthenticator(
-            new GMSAuthenticator(system.getSecurityProperties(), system.getSecurityService(),
-                system.getSecurityLogWriter(), system.getInternalLogWriter()))
-        .setStatistics(clusterDistributionManager.stats)
-        .setMessageListener(messageListener)
-        .setMembershipListener(listener)
-        .setConfig(new ServiceConfig(transport, system.getConfig()))
-        .setSerializer(InternalDataSerializer.getDSFIDSerializer())
-        .setLifecycleListener(new LifecycleListenerImpl(this))
-        .setMemberIDFactory(new ClusterDistributionManager.ClusterDistributionManagerIDFactory())
-        .setLocatorClient(new TcpClient(
-            asTcpSocketCreator(
-                SocketCreatorFactory
-                    .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),
-            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),
-            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))
-        .create();
+    try {
+      membership = MembershipBuilder.<InternalDistributedMember>newMembershipBuilder()
+          .setAuthenticator(
+              new GMSAuthenticator(system.getSecurityProperties(), system.getSecurityService(),
+                  system.getSecurityLogWriter(), system.getInternalLogWriter()))
+          .setStatistics(clusterDistributionManager.stats)
+          .setMessageListener(messageListener)
+          .setMembershipListener(listener)
+          .setConfig(new ServiceConfig(transport, system.getConfig()))
+          .setSerializer(InternalDataSerializer.getDSFIDSerializer())
+          .setLifecycleListener(new LifecycleListenerImpl(this))
+          .setMemberIDFactory(new ClusterDistributionManager.ClusterDistributionManagerIDFactory())
+          .setLocatorClient(new TcpClient(
+              asTcpSocketCreator(
+                  SocketCreatorFactory
+                      .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),
+              InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),
+              InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer()))
+          .create();
+    } catch (MembershipConfigurationException e) {
+      throw new GemFireConfigException(e.getMessage(), e.getCause());
+    } catch (GemFireSecurityException e) {
+      throw e;
+    } catch (RuntimeException e) {
+      Services.getLogger().error("Unexpected problem starting up membership services", e);
+      throw new SystemConnectException("Problem starting up membership services", e);
+    }
-    membership.start();
+    try {
+      membership.start();
+    } catch (ConnectionException e) {
+      throw new DistributionException(
+          "Unable to create membership manager",
+          e);
+    } catch (SecurityException e) {
+      String failReason = e.getMessage();
+      if (failReason.contains("Failed to find credentials")) {
+        throw new AuthenticationRequiredException(failReason);
+      }
+      throw new GemFireSecurityException(e.getMessage(),
+          e);
+    } catch (MembershipConfigurationException e) {
+      throw new GemFireConfigException(e.getMessage());
+    } catch (MemberStartupException e) {
+      throw new SystemConnectException(e.getMessage());
+    } catch (RuntimeException e) {
+      logger.error("Unexpected problem starting up membership services", e);
+      throw new SystemConnectException("Problem starting up membership services: " + e.getMessage()
+          + ".  Consult log file for more details");
+    }
-    membership.checkCancelled();
+    checkCancelled();
+   * This method catches membership exceptions that need to be translated into
+   * exceptions implementing CancelException in order to satisfy geode-core
+   * error handling.
+   */
+  private void checkCancelled() {
+    try {
+      membership.checkCancelled();
+    } catch (MembershipClosedException e) {
+      throw new DistributedSystemDisconnectedException(e.getMessage());
+    }
+  }
+
+  /**
-        membership.checkCancelled();
+        checkCancelled();
+    } catch (MembershipClosedException e) {
+      throw new DistributedSystemDisconnectedException(e.getMessage(), e.getCause());
-      membership.checkCancelled();
-      throw ex; // see bug 41416
+      throw ex;
-        membership.checkCancelled();
+        checkCancelled();
-      Map<String, Long> state) throws InterruptedException {
+      Map<String, Long> state) throws InterruptedException, TimeoutException {
-    return membership.requestMemberRemoval(member, reason);
+    try {
+      return membership.requestMemberRemoval(member, reason);
+    } catch (MemberDisconnectedException | MembershipClosedException e) {
+      throw new DistributedSystemDisconnectedException("Distribution is closed");
+    } catch (RuntimeException e) {
+      if (!membership.isConnected()) {
+        throw new DistributedSystemDisconnectedException("Distribution is closed", e);
+      }
+      throw e;
+    }
-  public void registerTestHook(
-      MembershipTestHook mth) {
-    membership.registerTestHook(mth);
-  }
-
-  @Override
-  public void unregisterTestHook(
-      MembershipTestHook mth) {
-    membership.unregisterTestHook(mth);
-  }
-
-  @Override
-    public void messageReceived(Message<InternalDistributedMember> msg) {
+    public void messageReceived(Message<InternalDistributedMember> msg)
+        throws MemberShunnedException {
-    public boolean disconnect(Exception exception) {
+    public boolean disconnect(Exception cause) {
+      Exception exception = cause;
+      // translate into a ForcedDisconnectException if necessary
+      if (cause instanceof MemberDisconnectedException) {
+        exception = new ForcedDisconnectException(cause.getMessage());
+        if (cause.getCause() != null) {
+          exception.initCause(cause.getCause());
+        }
+      }

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS31 INS31 MOV78 MOV83 MOV39 MOV42 INS8 INS29 UPD83 MOV83 MOV39 UPD42 MOV42 INS8 INS43 MOV78 UPD39 UPD42 MOV44 MOV44 INS8 INS54 INS54 INS65 INS54 INS42 INS54 INS43 INS8 INS8 INS12 INS12 INS12 MOV8 INS12 INS12 INS12 INS12 INS12 INS66 INS66 INS66 MOV8 INS12 INS12 MOV8 INS12 INS12 INS42 UPD42 INS60 INS25 MOV41 MOV21 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS43 INS59 INS62 INS8 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS21 INS53 INS43 INS42 INS53 INS43 INS42 INS60 INS25 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS21 INS53 UPD43 MOV43 UPD42 MOV42 INS53 INS8 INS43 INS42 INS53 INS84 UPD42 MOV42 INS53 INS43 INS42 INS25 INS53 INS42 INS42 INS42 INS42 INS43 INS21 INS25 INS42 INS14 INS42 INS42 INS42 INS32 INS14 INS42 INS14 INS42 INS43 INS59 INS32 INS8 INS14 INS42 INS14 INS42 INS14 INS42 INS32 INS14 UPD42 INS14 INS21 INS42 INS14 INS43 INS43 INS14 INS42 INS38 INS8 INS42 INS42 INS7 INS27 INS8 INS43 INS32 INS32 INS32 INS42 INS45 INS42 INS43 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS53 INS43 INS32 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS45 INS42 INS43 INS27 INS43 INS32 INS32 INS43 INS32 INS32 INS42 UPD42 MOV42 INS43 INS45 INS32 INS53 INS42 INS14 INS32 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS14 INS43 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL31 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL78 DEL43 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL83 DEL39 DEL42 DEL31 DEL42 DEL78 DEL44 DEL42 DEL32 DEL21 DEL8 DEL31 DEL8