Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A <code>SystemMember</code> that is also managed (or manageable) by
- * the admin API.
+ * A <code>SystemMember</code> that is also managed (or manageable) by the admin API.
- * This class must be public so that its methods can be invoked
- * reflectively (for MBean operations) on instances of its
- * subclasses. 
+ * This class must be public so that its methods can be invoked reflectively (for MBean operations)
+ * on instances of its subclasses.
-  implements InternalManagedEntity {
+    implements InternalManagedEntity {
-  
+
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * Creates a new <code>ManagedSystemMemberImpl</code> that
-   * represents an existing member of an
+   * Creates a new <code>ManagedSystemMemberImpl</code> that represents an existing member of an
-  protected ManagedSystemMemberImpl(AdminDistributedSystemImpl system, 
-                                    GemFireVM vm) 
-    throws AdminException {
+  protected ManagedSystemMemberImpl(AdminDistributedSystemImpl system, GemFireVM vm)
+      throws AdminException {
-   * Creates a new <code>ManagedSystemMemberImpl</code> that
-   * represents a non-existing member with the given
-   * <code>ManagedEntityConfig</code> that has not yet been started.
+   * Creates a new <code>ManagedSystemMemberImpl</code> that represents a non-existing member with
+   * the given <code>ManagedEntityConfig</code> that has not yet been started.
-  protected ManagedSystemMemberImpl(AdminDistributedSystemImpl system,
-                                    ManagedEntityConfig config) 
-    throws AdminException {
+  protected ManagedSystemMemberImpl(AdminDistributedSystemImpl system, ManagedEntityConfig config)
+      throws AdminException {
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-      
+
-        
+
-   * Returns whether or not this managed system member needs to be
-   * stopped.  If this member is stopped or is stopping, then it does
-   * not need to be stopped.  Otherwise, it will atomically place this
-   * member in the {@link #STOPPING} state.  See bug 32455.
+   * Returns whether or not this managed system member needs to be stopped. If this member is
+   * stopped or is stopping, then it does not need to be stopped. Otherwise, it will atomically
+   * place this member in the {@link #STOPPING} state. See bug 32455.
-   * Returns whether or not this managed system member needs to be
-   * started.  If this member is started or is starting, then it
-   * does not need to be started.  Otherwise, it will atomically
-   * place this member in the {@link #STARTING} state.  See bug
-   * 32455.
+   * Returns whether or not this managed system member needs to be started. If this member is
+   * started or is starting, then it does not need to be started. Otherwise, it will atomically
+   * place this member in the {@link #STARTING} state. See bug 32455.
-   * Sets the state of this managed system member depending on whether
-   * or not <code>vm</code> is <code>null</code>.
+   * Sets the state of this managed system member depending on whether or not <code>vm</code> is
+   * <code>null</code>.
-  public boolean waitToStart(long timeout) 
-    throws InterruptedException {
+  public boolean waitToStart(long timeout) throws InterruptedException {
-    if (Thread.interrupted()) throw new InterruptedException();
-    
+    if (Thread.interrupted())
+      throw new InterruptedException();
+
-  public boolean waitToStop(long timeout) 
-    throws InterruptedException {
+  public boolean waitToStop(long timeout) throws InterruptedException {
-    if (Thread.interrupted()) throw new InterruptedException();
+    if (Thread.interrupted())
+      throw new InterruptedException();
-   * Appends configuration information to a <code>StringBuffer</code>
-   * that contains a command line.  Handles certain configuration
-   * parameters specially.
+   * Appends configuration information to a <code>StringBuffer</code> that contains a command line.
+   * Handles certain configuration parameters specially.
-          // rsh.  See bug 32306.
+          // rsh. See bug 32306.
-            String port =
-              locator.substring(firstBracket + 1, lastBracket);
+            String port = locator.substring(firstBracket + 1, lastBracket);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66