Merge branch 'develop' into feature/GEODE-3109

+import org.apache.geode.internal.VersionedDataInputStream;
+    return getDistributedMember(Version.CURRENT);
+  }
+
+  /**
+   * deserialize the memberID bytes using the given version. The correct thing to do would be to
+   * have EventID carry the version ordinal of the serialized memberID, or to have it be part of the
+   * memberID bytes and use that version to deserialize the bytes. Clients prior to 1.1.0 need to
+   * have UUID bytes in the memberID. Newer clients don't require this.
+   */
+  public InternalDistributedMember getDistributedMember(Version targetVersion) {
+    if (targetVersion.compareTo(Version.GEODE_110) < 0) {
+      // GEODE-3153: clients expect to receive UUID bytes, which are only
+      // read if the stream's version is 1.0.0-incubating
+      dis = new VersionedDataInputStream(dis, Version.GFE_90);
+    }
-    if (version.compareTo(Version.GFE_90) <= 0) {
-      InternalDistributedMember member = getDistributedMember();
-      HeapDataOutputStream hdos = new HeapDataOutputStream(version);
+    // if we are sending to old clients we need to reserialize the ID
+    // using the client's version to ensure it gets the proper on-wire form
+    // of the identifier
+    // See GEODE-3072
+    if (version.compareTo(Version.GEODE_110) < 0) {
+      InternalDistributedMember member = getDistributedMember(Version.GFE_90);
+      // reserialize with the client's version so that we write the UUID
+      // bytes
+      HeapDataOutputStream hdos = new HeapDataOutputStream(Version.GFE_90);
-    if (!Arrays.equals(membershipID, other.membershipID))
+    return equalMembershipIds(membershipID, other.membershipID);
+  }
+
+  /** GEODE_3072 - 1.0.0 client IDs contain a UUID and member-weight byte that are all zero */
+  static final int NULL_90_MEMBER_DATA_LENGTH = 17;
+
+  /** minimum length of an ID array */
+  static final int MINIMIM_ID_LENGTH = 19;
+
+  /**
+   * check to see if membership ID byte arrays are equal
+   */
+  static public boolean equalMembershipIds(byte[] m1, byte[] m2) {
+    int sizeDifference = Math.abs(m1.length - m2.length);
+    if (sizeDifference != 0 && sizeDifference != NULL_90_MEMBER_DATA_LENGTH) {
+    }
+    for (int i = 0; i < m1.length; i++) {
+      if (i >= m2.length) {
+        return nullUUIDCheck(m1, i);
+      }
+      if (m1[i] != m2[i]) {
+        return false;
+      }
+    }
+    if (m1.length != m2.length) {
+      return nullUUIDCheck(m2, m1.length);
+    }
+  /**
+   * GEODE-3072 - v1.0.0 memberIDs in EventIDs may have trailing bytes that should be ignored
+   */
+  static private boolean nullUUIDCheck(byte[] memberID, int position) {
+    if (position < 0) {
+      return false;
+    }
+    if (memberID.length - position != NULL_90_MEMBER_DATA_LENGTH) {
+      return false;
+    }
+    for (int i = position; i < memberID.length; i++) {
+      if (memberID[i] != 0) {
+        return false;
+      }
+    }
+    return true;
+  }
-  @Override
+  /**
+   * form the hashcode for the memberID byte array
+   */
+  static public int hashCodeMemberId(byte[] memberID) {
+    if (memberID.length < (NULL_90_MEMBER_DATA_LENGTH + MINIMIM_ID_LENGTH)
+        || !nullUUIDCheck(memberID, memberID.length - NULL_90_MEMBER_DATA_LENGTH)) {
+      return Arrays.hashCode(memberID);
+    }
+    byte[] newID = new byte[memberID.length - NULL_90_MEMBER_DATA_LENGTH];
+    System.arraycopy(memberID, 0, newID, 0, newID.length);
+    return Arrays.hashCode(newID);
+  }
+
-      result = prime * result + Arrays.hashCode(membershipID);
+      result = prime * result + hashCodeMemberId(membershipID);
-      buf.append("[");
+      buf.append("id=").append(membershipID.length).append("bytes;");

INS26 INS40 INS31 INS23 INS23 INS31 INS31 INS31 MOV29 INS83 INS43 INS42 INS8 INS29 INS44 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS41 INS65 INS43 INS42 INS25 INS41 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS5 INS42 INS5 INS42 INS60 INS25 INS24 INS25 MOV41 INS65 INS5 INS42 INS39 INS42 INS25 INS25 INS24 INS41 INS65 INS5 INS42 INS25 INS60 INS21 INS41 INS32 INS66 INS66 INS66 INS66 INS42 INS27 INS8 UPD27 INS32 INS66 INS66 INS66 INS39 INS85 INS39 INS85 INS39 INS59 INS27 INS8 INS58 INS27 INS37 INS8 INS27 INS8 INS66 INS39 INS85 INS27 INS8 INS27 INS8 INS58 INS27 INS37 INS8 INS9 INS66 INS39 INS85 INS27 INS8 INS5 INS59 INS32 INS32 INS42 INS40 INS32 INS34 INS21 UPD42 MOV42 MOV42 MOV40 INS42 INS32 INS27 INS27 MOV41 INS39 INS59 INS42 INS40 INS42 INS25 INS25 INS40 INS40 INS41 INS42 INS34 INS41 INS27 INS42 INS41 INS39 INS59 INS42 INS40 INS42 INS25 INS27 INS38 INS41 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS34 INS42 INS34 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS7 UPD40 MOV43 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS42 INS34 INS27 INS8 INS27 INS8 INS32 INS9 INS40 INS42 INS9 INS42 INS42 INS27 INS8 INS40 INS36 INS32 INS32 INS5 INS27 INS32 INS42 INS14 INS40 INS40 INS42 INS40 INS41 INS2 INS2 INS41 INS42 INS42 INS40 INS2 INS34 INS41 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS39 INS85 INS40 INS42 INS32 INS42 INS45 INS43 INS42 INS40 INS40 MOV43 INS40 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS42 INS40 INS42 INS32 INS42 INS40 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 UPD45 MOV45 DEL42 DEL42 DEL32 DEL38 DEL25 DEL42 DEL78 DEL42 DEL32