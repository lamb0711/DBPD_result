Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)

This reverts commit 2f6bf013368df5a4b5efe68162a4953f9a88bbf2.
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-import org.apache.geode.redis.internal.CoderException;
-import org.apache.geode.redis.internal.RedisConstants;
+    @SuppressWarnings("unchecked")
+    Region<ByteArrayWrapper, Boolean> keyRegion =
+        (Region<ByteArrayWrapper, Boolean>) context.getRegionProvider().getRegion(key);
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
-      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
+    int count = 1;
-      int count = 1;
-
-      if (commandElems.size() > 2) {
-        try {
-          count = Coder.bytesToInt(commandElems.get(2));
-        } catch (NumberFormatException e) {
-          command.setResponse(
-              Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_NOT_NUMERIC));
-          return;
-        }
-      }
-
-      Set<ByteArrayWrapper> set = region.get(key);
-
-      if (set == null || count == 0) {
-        command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-        return;
-      }
-
-      int members = set.size();
-
-      if (members <= count && count != 1) {
-        respondBulkStrings(command, context, new HashSet<ByteArrayWrapper>(set));
-        return;
-      }
-
-      Random rand = new Random();
-
-      ByteArrayWrapper[] entries = set.toArray(new ByteArrayWrapper[members]);
-
+    if (commandElems.size() > 2) {
-        if (count == 1) {
-          ByteArrayWrapper randEntry = entries[rand.nextInt(entries.length)];
-          command.setResponse(
-              Coder.getBulkStringResponse(context.getByteBufAllocator(), randEntry.toBytes()));
-        } else if (count > 0) {
-          Set<ByteArrayWrapper> randEntries = new HashSet<>();
-          do {
-            ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
-            randEntries.add(s);
-          } while (randEntries.size() < count);
-          command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), randEntries));
-        } else {
-          count = -count;
-          List<ByteArrayWrapper> randEntries = new ArrayList<>();
-          for (int i = 0; i < count; i++) {
-            ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
-            randEntries.add(s);
-          }
-          command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), randEntries));
-        }
-      } catch (CoderException e) {
-        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-            RedisConstants.SERVER_ERROR_MESSAGE));
+        count = Coder.bytesToInt(commandElems.get(2));
+      } catch (NumberFormatException e) {
+        command
+            .setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_NOT_NUMERIC));
+        return;
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+    }
+
+    if (keyRegion == null || count == 0) {
+      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-    } catch (TimeoutException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
+    }
+
+    int members = keyRegion.size();
+
+    if (members <= count && count != 1) {
+      respondBulkStrings(command, context, new HashSet<ByteArrayWrapper>(keyRegion.keySet()));
+
+    Random rand = new Random();
+
+    ByteArrayWrapper[] entries = keyRegion.keySet().toArray(new ByteArrayWrapper[members]);
+
+    if (count == 1) {
+      ByteArrayWrapper randEntry = entries[rand.nextInt(entries.length)];
+      respondBulkStrings(command, context, randEntry);
+    } else if (count > 0) {
+      Set<ByteArrayWrapper> randEntries = new HashSet<ByteArrayWrapper>();
+      do {
+        ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
+        randEntries.add(s);
+      } while (randEntries.size() < count);
+      respondBulkStrings(command, context, randEntries);
+    } else {
+      count = -count;
+      List<ByteArrayWrapper> randEntries = new ArrayList<ByteArrayWrapper>();
+      for (int i = 0; i < count; i++) {
+        ByteArrayWrapper s = entries[rand.nextInt(entries.length)];
+        randEntries.add(s);
+      }
+      respondBulkStrings(command, context, randEntries);
+    }

MOV8 MOV60 MOV25 MOV60 INS60 MOV60 MOV25 MOV25 INS60 MOV25 MOV60 MOV60 INS79 INS74 INS59 INS39 INS59 INS42 INS45 INS43 INS43 INS43 INS42 INS11 INS42 INS32 INS42 INS42 INS42 UPD74 MOV74 INS32 UPD42 INS42 INS42 INS32 UPD43 MOV43 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 UPD42 MOV42 MOV42 MOV42 UPD42 INS42 INS42 INS32 UPD42 UPD42 MOV42 MOV42 MOV42 UPD42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 UPD74 UPD74 INS43 INS43 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54 DEL8