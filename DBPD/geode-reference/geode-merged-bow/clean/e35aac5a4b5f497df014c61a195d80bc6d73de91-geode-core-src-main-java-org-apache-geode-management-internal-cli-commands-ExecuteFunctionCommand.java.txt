Merge branch 'release/1.5.0'

+import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
-    for (DistributedMember member : dsMembers) {
-      executeAndGetResults(functionId, filterString, resultCollector, arguments, member,
-          resultTable, onRegion);
-    }
-    return ResultBuilder.buildResult(resultTable);
-  }
-
-  public static class ExecuteFunctionCommandInterceptor implements CliAroundInterceptor {
-    @Override
-    public Result preExecution(GfshParseResult parseResult) {
-      String onRegion = parseResult.getParamValueAsString(CliStrings.EXECUTE_FUNCTION__ONREGION);
-      String onMember = parseResult.getParamValueAsString(CliStrings.MEMBER);
-      String onGroup = parseResult.getParamValueAsString(CliStrings.GROUP);
-      String filter = parseResult.getParamValueAsString(CliStrings.EXECUTE_FUNCTION__FILTER);
-
-      boolean moreThanOne =
-          Stream.of(onRegion, onMember, onGroup).filter(Objects::nonNull).count() > 1;
-
-      if (moreThanOne) {
-        return ResultBuilder.createUserErrorResult(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-      }
-
-      if (onRegion == null && filter != null) {
-        return ResultBuilder.createUserErrorResult(
-            CliStrings.EXECUTE_FUNCTION__MSG__MEMBER_SHOULD_NOT_HAVE_FILTER_FOR_EXECUTION);
-      }
-
-      return ResultBuilder.createInfoResult("");
-    }
-  }
-
-  void executeAndGetResults(String functionId, String filterString, String resultCollector,
-      String[] arguments, DistributedMember member, TabularResultData resultTable,
-      String onRegion) {
-    StringBuilder resultMessage = new StringBuilder();
-
-    Function function = new UserFunctionExecution();
+    // Build up our argument list
-    Execution execution = FunctionService.onMember(member).setArguments(args);
-    if (execution != null) {
-      List<Object> results = (List<Object>) execution.execute(function).getResult();
-      if (results != null) {
-        for (Object resultObj : results) {
-          if (resultObj != null) {
-            if (resultObj instanceof String) {
-              resultMessage.append(((String) resultObj));
-            } else if (resultObj instanceof Exception) {
-              resultMessage.append(((Exception) resultObj).getMessage());
-            } else {
-              resultMessage.append(resultObj);
-            }
-          }
-        }
+    // Execute function and aggregate results
+    List<CliFunctionResult> results =
+        executeAndGetFunctionResult(new UserFunctionExecution(), args, dsMembers);
+
+    for (CliFunctionResult r : results) {
+      resultTable.accumulate("Member ID/Name", r.getMemberIdOrName());
+      resultTable.accumulate("Function Execution Result", r.getMessage());
+      if (!r.isSuccessful()) {
+        resultTable.setStatus(Result.Status.ERROR);
-      toTabularResultData(resultTable, member.getId(), resultMessage.toString());
-    } else {
-      toTabularResultData(resultTable, member.getId(),
-          CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR);
+
+    return ResultBuilder.buildResult(resultTable);
-  private void toTabularResultData(TabularResultData table, String memberId, String memberResult) {
-    table.accumulate("Member ID/Name", memberId);
-    table.accumulate("Function Execution Result", memberResult);
+  public static class ExecuteFunctionCommandInterceptor implements CliAroundInterceptor {
+    @Override
+    public Result preExecution(GfshParseResult parseResult) {
+      String onRegion = parseResult.getParamValueAsString(CliStrings.EXECUTE_FUNCTION__ONREGION);
+      String onMember = parseResult.getParamValueAsString(CliStrings.MEMBER);
+      String onGroup = parseResult.getParamValueAsString(CliStrings.GROUP);
+      String filter = parseResult.getParamValueAsString(CliStrings.EXECUTE_FUNCTION__FILTER);
+
+      boolean moreThanOne =
+          Stream.of(onRegion, onMember, onGroup).filter(Objects::nonNull).count() > 1;
+
+      if (moreThanOne) {
+        return ResultBuilder.createUserErrorResult(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
+      }
+
+      if (onRegion == null && filter != null) {
+        return ResultBuilder.createUserErrorResult(
+            CliStrings.EXECUTE_FUNCTION__MSG__MEMBER_SHOULD_NOT_HAVE_FILTER_FOR_EXECUTION);
+      }
+
+      return ResultBuilder.createInfoResult("");
+    }

INS26 INS40 MOV60 MOV21 MOV25 MOV25 MOV25 MOV21 MOV60 MOV25 INS60 INS70 INS74 INS59 INS44 INS42 INS8 MOV43 INS43 INS42 INS32 INS43 INS42 INS21 INS21 INS25 UPD42 MOV42 INS42 INS42 MOV14 INS42 UPD42 MOV42 INS42 INS32 INS32 INS38 INS8 MOV42 UPD42 MOV42 INS45 INS32 INS42 INS42 INS45 INS32 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL32 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL31