GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-public final class PutAllPRMessage extends PartitionMessageWithDirectReply {
+public class PutAllPRMessage extends PartitionMessageWithDirectReply {
-    this.bucketId = Integer.valueOf(bucketId);
+    this.bucketId = bucketId;
-    this.bucketId = Integer.valueOf((int) InternalDataSerializer.readSignedVL(in));
+    this.bucketId = (int) InternalDataSerializer.readSignedVL(in);
-      InternalDataSerializer.writeSignedVL(bucketId.intValue(), out);
+      InternalDataSerializer.writeSignedVL(bucketId, out);
-  protected final boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion r,
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion pr,
-      result = doLocalPutAll(r, eventSender, lastModified);
+      result = doLocalPutAll(pr, eventSender, lastModified);
-      sendReply(getSender(), getProcessorId(), dm, new ReplyException(fre), r, startTime);
+      sendReply(getSender(), getProcessorId(), dm, new ReplyException(fre), pr, startTime);
-      sendReply(getSender(), getProcessorId(), dm, null, r, startTime);
+      sendReply(getSender(), getProcessorId(), dm, null, pr, startTime);
-  @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = "IMSE_DONT_CATCH_IMSE")
-  public final boolean doLocalPutAll(PartitionedRegion r, InternalDistributedMember eventSender,
+  @edu.umd.cs.findbugs.annotations.SuppressWarnings("IMSE_DONT_CATCH_IMSE")
+  public boolean doLocalPutAll(PartitionedRegion r, InternalDistributedMember eventSender,
-          } catch (IllegalMonitorStateException ex) {
-            ForceReattemptException fre =
-                new ForceReattemptException("unable to get lock for primary, retrying... ");
-            throw fre;
+          } catch (IllegalMonitorStateException ignore) {
+            throw new ForceReattemptException("unable to get lock for primary, retrying... ");
-  protected final void appendFields(StringBuffer buff) {
+  protected void appendFields(StringBuilder buff) {
-      // buff.append("; entry"+i+":").append(putAllPRData[i]);
-      buff.append("; entry" + i + ":").append(putAllPRData[i].getKey()).append(",")
+      buff.append("; entry").append(i).append(":").append(putAllPRData[i].getKey()).append(",")
-  public final InternalDistributedSystem getInternalDs() {
-    return internalDs;
-  }
-
-  public final void setInternalDs(InternalDistributedSystem internalDs) {
+  public void setInternalDs(InternalDistributedSystem internalDs) {
-  public final void setDirectAck(boolean directAck) {
+  public void setDirectAck(boolean directAck) {
-    StringBuffer buff = new StringBuffer();
+    StringBuilder buff = new StringBuilder();
-    // className.substring(className.lastIndexOf('.', className.lastIndexOf('.') - 1) + 1); //
-    // partition.<foo> more generic version
-    } catch (Exception e) {
+    } catch (Exception ignore) {
-  public static final class PutAllReplyMessage extends ReplyMessage {
+  public static class PutAllReplyMessage extends ReplyMessage {
-      StringBuffer sb = new StringBuffer();
+      StringBuilder sb = new StringBuilder();
-      // try {
-      // waitForRepliesUninterruptibly();
-      // }
-      // catch (ReplyException e) {
-      // Throwable t = e.getCause();
-      // if (t instanceof CacheClosedException) {
-      // throw new PartitionedRegionCommunicationException("Put operation received an exception",
-      // t);
-      // }
-      // e.handleAsUnexpected();
-      // }

INS79 UPD42 INS40 INS45 UPD43 UPD42 UPD43 INS42 MOV11 UPD42 UPD43 UPD43 UPD42 UPD42 MOV42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 INS32 INS42 INS45 INS32 INS42 INS42 UPD42 MOV42 MOV42 INS45 MOV14 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL83 DEL40 DEL42 DEL45 DEL80 DEL77 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL83 DEL45 DEL42 DEL45 DEL27 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL83