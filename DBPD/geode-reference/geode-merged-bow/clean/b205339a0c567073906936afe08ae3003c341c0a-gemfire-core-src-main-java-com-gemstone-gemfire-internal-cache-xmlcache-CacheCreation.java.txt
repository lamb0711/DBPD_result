Merge branch 'feature/GEODE-8' into develop

+import java.util.Map.Entry;
+import com.gemstone.gemfire.cache.lucene.LuceneService;
+import com.gemstone.gemfire.cache.hdfs.HDFSStore;
+import com.gemstone.gemfire.cache.hdfs.HDFSStoreFactory;
+import com.gemstone.gemfire.cache.hdfs.internal.HDFSIntegrationUtil;
+import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreCreation;
+import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreFactoryImpl;
+import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreImpl;
+  protected final Map hdfsStores = new LinkedHashMap();
-    
+
+    for(Iterator iter = this.hdfsStores.entrySet().iterator(); iter.hasNext(); ) {
+      Entry entry = (Entry) iter.next();
+      HDFSStoreCreation hdfsStoreCreation = (HDFSStoreCreation) entry.getValue();
+      HDFSStoreFactory storefactory = cache.createHDFSStoreFactory(hdfsStoreCreation);
+      storefactory.create((String) entry.getKey());
+    }
+
+      // TODO: HDFS: HDFS store/queue will be mapped against region path and not
+      // the attribute id; don't really understand what this is trying to do
+      if (creation.getHDFSStoreName() != null)
+      {
+        HDFSStoreImpl store = cache.findHDFSStore(creation.getHDFSStoreName());
+        if(store == null || store.getHDFSEventQueueAttributes() == null) {
+          HDFSIntegrationUtil.createDefaultAsyncQueueForHDFS((Cache)cache, creation.getHDFSWriteOnly(), id);
+        }
+      }
+      if (creation.getHDFSStoreName() != null && creation.getPartitionAttributes().getColocatedWith() == null) {
+        creation.addAsyncEventQueueId(HDFSStoreFactoryImpl.getEventQueueName(id));
+      }
+      
+  @Override
+  public HDFSStoreFactory createHDFSStoreFactory() {
+    // TODO Auto-generated method stub
+    return new HDFSStoreFactoryImpl(this);
+  }
+  @Override
+  public HDFSStore findHDFSStore(String storeName) {
+    return (HDFSStore)this.hdfsStores.get(storeName);
+  }
+
+  @Override
+  public Collection<HDFSStoreImpl> getHDFSStores() {
+    return this.hdfsStores.values();
+  }
+
+  public void addHDFSStore(String name, HDFSStoreCreation hs) {
+    this.hdfsStores.put(name, hs);
+  }
+
+  @Override
+  public LuceneService getLuceneService() {
+    return null;
+  }
+
-
+    
+	  
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS14 INS24 INS42 INS42 INS41 INS42 INS42 INS43 INS42 INS41 INS42 INS43 INS43 INS41 INS43 INS42 INS43 INS42 INS21 INS42 INS42 INS41 INS43 INS58 INS32 INS8 INS14 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS43 INS59 INS42 INS42 INS60 INS60 INS60 INS21 INS25 INS25 INS43 INS52 INS43 INS32 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS27 INS8 INS27 INS8 INS42 INS42 INS22 INS42 INS42 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS11 INS32 INS33 INS60 INS25 INS27 INS27 INS21 INS52 INS42 INS22 INS42 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS33 INS32 INS33 INS32 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS32 INS42 INS43 INS42 INS42 INS42 INS42