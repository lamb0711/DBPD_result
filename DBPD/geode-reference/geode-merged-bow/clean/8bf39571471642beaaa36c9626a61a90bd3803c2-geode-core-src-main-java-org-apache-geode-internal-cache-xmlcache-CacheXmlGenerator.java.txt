Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Generates a declarative XML file that describes a given {@link
- * Cache} instance.  This class was developed for testing purposes,
- * but it is conceivable that it could be used in the product as well.
+ * Generates a declarative XML file that describes a given {@link Cache} instance. This class was
+ * developed for testing purposes, but it is conceivable that it could be used in the product as
+ * well.
-  /////////////////////////  Instance Fields  ////////////////////////
+  ///////////////////////// Instance Fields ////////////////////////
-  /** Will the generated XML file reference an XML schema instead of
-   * the DTD? */
+  /**
+   * Will the generated XML file reference an XML schema instead of the DTD?
+   */
-//  final private int cacheLockLease;
-//  final private int cacheLockTimeout;
-//  final private int cacheSearchTimeout;
-//  final private boolean isServer;
-//  final private boolean copyOnRead;
+  // final private int cacheLockLease;
+  // final private int cacheLockTimeout;
+  // final private int cacheSearchTimeout;
+  // final private boolean isServer;
+  // final private boolean copyOnRead;
-  ///////////////////////  Static Methods  ///////////////////////
+  /////////////////////// Static Methods ///////////////////////
-   * Examines the given <code>Cache</code> and from it generates XML
-   * data that is written to the given <code>PrintWriter</code>.  The
-   * schema/dtd for the current version of GemFire is used.
+   * Examines the given <code>Cache</code> and from it generates XML data that is written to the
+   * given <code>PrintWriter</code>. The schema/dtd for the current version of GemFire is used.
-   * @param useSchema
-   *        Should the generated XML reference a schema (as opposed to
-   *        a DTD)? For versions 8.1 or newer this should be true,
-   *        otherwise false.
-   * @param version
-   *        The version of GemFire whose DTD/schema should be used in
-   *        the generated XML.  See {@link #VERSION_4_0}.
+   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? For
+   *        versions 8.1 or newer this should be true, otherwise false.
+   * @param version The version of GemFire whose DTD/schema should be used in the generated XML. See
+   *        {@link #VERSION_4_0}.
-  public static void generate(Cache cache, PrintWriter pw,
-                              boolean useSchema, String version) {
+  public static void generate(Cache cache, PrintWriter pw, boolean useSchema, String version) {
-   * Examines the given <code>Cache</code> and from it generates XML
-   * data that is written to the given <code>PrintWriter</code>.  The
-   * schema/dtd for the current version of GemFire is used.
+   * Examines the given <code>Cache</code> and from it generates XML data that is written to the
+   * given <code>PrintWriter</code>. The schema/dtd for the current version of GemFire is used.
-   * @param useSchema
-   *        Should the generated XML reference a schema (as opposed to
-   *        a DTD)? As of 8.1 this value is ignored and always true.
+   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? As of 8.1
+   *        this value is ignored and always true.
-  public static void generate(Cache cache, PrintWriter pw,
-                              boolean useSchema) {
-    (new CacheXmlGenerator(cache, true /*latest version always true*/, VERSION_LATEST, true)).generate(pw);
+  public static void generate(Cache cache, PrintWriter pw, boolean useSchema) {
+    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST, true))
+        .generate(pw);
-   * Examines the given <code>Cache</code> and from it generates XML
-   * data that is written to the given <code>PrintWriter</code>.  The
-   * schema/dtd for the current version of GemFire is used.
+   * Examines the given <code>Cache</code> and from it generates XML data that is written to the
+   * given <code>PrintWriter</code>. The schema/dtd for the current version of GemFire is used.
-   * @param useSchema
-   *        Should the generated XML reference a schema (as opposed to
-   *        a DTD)? As of 8.1 this value is ignored and always true.
-   * @param includeKeysValues true if the xml should include keys and values
-   *                          false otherwise
+   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? As of 8.1
+   *        this value is ignored and always true.
+   * @param includeKeysValues true if the xml should include keys and values false otherwise
-  public static void generate(Cache cache, PrintWriter pw,
-                              boolean useSchema, boolean includeKeysValues) {
-    (new CacheXmlGenerator(cache, true /*latest version always true*/, VERSION_LATEST, includeKeysValues)).generate(pw);
+  public static void generate(Cache cache, PrintWriter pw, boolean useSchema,
+      boolean includeKeysValues) {
+    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST,
+        includeKeysValues)).generate(pw);
+
-   * @param useSchema
-   *        Should the generated XML reference a schema (as opposed to
-   *        a DTD)? As of 8.1 this value is ignored and always true.
+   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? As of 8.1
+   *        this value is ignored and always true.
-  public static void generate(Cache cache, PrintWriter pw,
-      boolean useSchema, boolean includeKeysValues, boolean includeDefaults) {
-    (new CacheXmlGenerator(cache, true /*latest version always true*/, VERSION_LATEST, includeKeysValues, includeDefaults)).generate(pw);
+  public static void generate(Cache cache, PrintWriter pw, boolean useSchema,
+      boolean includeKeysValues, boolean includeDefaults) {
+    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST,
+        includeKeysValues, includeDefaults)).generate(pw);
-   * Examines the given <code>Cache</code> and from it generates XML
-   * data that is written to the given <code>PrintWriter</code>.
+   * Examines the given <code>Cache</code> and from it generates XML data that is written to the
+   * given <code>PrintWriter</code>.
-   * Examines the given <code>ClientCache</code> and from it generates XML
-   * data that is written to the given <code>PrintWriter</code>.  The
-   * schema/dtd for the current version of GemFire is used.
+   * Examines the given <code>ClientCache</code> and from it generates XML data that is written to
+   * the given <code>PrintWriter</code>. The schema/dtd for the current version of GemFire is used.
-   * @param useSchema
-   *        Should the generated XML reference a schema (as opposed to
-   *        a DTD)? For versions 8.1 or newer this should be true,
-   *        otherwise false.
-   * @param version
-   *        The version of GemFire whose DTD/schema should be used in
-   *        the generated XML.  See {@link #VERSION_4_0}.
+   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? For
+   *        versions 8.1 or newer this should be true, otherwise false.
+   * @param version The version of GemFire whose DTD/schema should be used in the generated XML. See
+   *        {@link #VERSION_4_0}.
-  public static void generate(ClientCache cache, PrintWriter pw,
-                              boolean useSchema, String version) {
+  public static void generate(ClientCache cache, PrintWriter pw, boolean useSchema,
+      String version) {
-   * Examines the given <code>ClientCache</code> and from it generates XML
-   * data that is written to the given <code>PrintWriter</code>.  The
-   * schema/dtd for the current version of GemFire is used.
+   * Examines the given <code>ClientCache</code> and from it generates XML data that is written to
+   * the given <code>PrintWriter</code>. The schema/dtd for the current version of GemFire is used.
-   * @param useSchema
-   *        Should the generated XML reference a schema (as opposed to
-   *        a DTD)? As of 8.1 this value is ignored and always true.
+   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? As of 8.1
+   *        this value is ignored and always true.
-  public static void generate(ClientCache cache, PrintWriter pw,
-                              boolean useSchema) {
-    (new CacheXmlGenerator(cache, true /*latest version always true*/, VERSION_LATEST, true)).generate(pw);
+  public static void generate(ClientCache cache, PrintWriter pw, boolean useSchema) {
+    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST, true))
+        .generate(pw);
-   * Examines the given <code>ClientCache</code> and from it generates XML
-   * data that is written to the given <code>PrintWriter</code>.  The
-   * schema/dtd for the current version of GemFire is used.
+   * Examines the given <code>ClientCache</code> and from it generates XML data that is written to
+   * the given <code>PrintWriter</code>. The schema/dtd for the current version of GemFire is used.
-   * @param useSchema
-   *        Should the generated XML reference a schema (as opposed to
-   *        a DTD)? As of 8.1 this value is ignored and always true.
-   * @param includeKeysValues true if the xml should include keys and values
-   *                          false otherwise
+   * @param useSchema Should the generated XML reference a schema (as opposed to a DTD)? As of 8.1
+   *        this value is ignored and always true.
+   * @param includeKeysValues true if the xml should include keys and values false otherwise
-  public static void generate(ClientCache cache, PrintWriter pw,
-                              boolean useSchema, boolean includeKeysValues) {
-    (new CacheXmlGenerator(cache, true /*latest version always true*/, VERSION_LATEST, includeKeysValues)).generate(pw);
+  public static void generate(ClientCache cache, PrintWriter pw, boolean useSchema,
+      boolean includeKeysValues) {
+    (new CacheXmlGenerator(cache, true /* latest version always true */, VERSION_LATEST,
+        includeKeysValues)).generate(pw);
-   * Examines the given <code>Cache</code> and from it generates XML
-   * data that is written to the given <code>PrintWriter</code>.
+   * Examines the given <code>Cache</code> and from it generates XML data that is written to the
+   * given <code>PrintWriter</code>.
+
-  ////////////////////////  Constructors  ////////////////////////
+  //////////////////////// Constructors ////////////////////////
-   * Creates a new <code>CacheXmlGenerator</code> that generates XML
-   * for a given <code>Cache</code>.
+   * Creates a new <code>CacheXmlGenerator</code> that generates XML for a given <code>Cache</code>.
-  private CacheXmlGenerator(Cache cache, boolean useSchema,
-                            String version, boolean includeKeysValues) {
+  private CacheXmlGenerator(Cache cache, boolean useSchema, String version,
+      boolean includeKeysValues) {
-  private CacheXmlGenerator(Cache cache, boolean useSchema,
-        String version, boolean includeKeysValues, boolean generateDefaults) {
+
+  private CacheXmlGenerator(Cache cache, boolean useSchema, String version,
+      boolean includeKeysValues, boolean generateDefaults) {
-      if (((GemFireCacheImpl)cache).isClient()) {
+      if (((GemFireCacheImpl) cache).isClient()) {
-        if (generateDefaults() || cache.getSearchTimeout() != GemFireCacheImpl.DEFAULT_SEARCH_TIMEOUT) {
+        if (generateDefaults()
+            || cache.getSearchTimeout() != GemFireCacheImpl.DEFAULT_SEARCH_TIMEOUT) {
-      if (generateDefaults() || cache.getSearchTimeout() != GemFireCacheImpl.DEFAULT_SEARCH_TIMEOUT) {
+      if (generateDefaults()
+          || cache.getSearchTimeout() != GemFireCacheImpl.DEFAULT_SEARCH_TIMEOUT) {
-   * Creates a new <code>CacheXmlGenerator</code> that generates XML
-   * for a given <code>ClientCache</code>.
+   * Creates a new <code>CacheXmlGenerator</code> that generates XML for a given
+   * <code>ClientCache</code>.
-  private CacheXmlGenerator(ClientCache cache, boolean useSchema,
-                            String version, boolean includeKeysValues) {
-    this.cache = (Cache)cache;
+  private CacheXmlGenerator(ClientCache cache, boolean useSchema, String version,
+      boolean includeKeysValues) {
+    this.cache = (Cache) cache;
+
+
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-      RuntimeException ex2 = new RuntimeException(LocalizedStrings.CacheXmlGenerator_AN_EXCEPTION_WAS_THROWN_WHILE_GENERATING_XML.toLocalizedString());
+      RuntimeException ex2 = new RuntimeException(
+          LocalizedStrings.CacheXmlGenerator_AN_EXCEPTION_WAS_THROWN_WHILE_GENERATING_XML
+              .toLocalizedString());
-   * Called by the transformer to parse the "input source".  We ignore
-   * the input source and, instead, generate SAX events to the {@link
-   * #setContentHandler ContentHandler}.
+   * Called by the transformer to parse the "input source". We ignore the input source and, instead,
+   * generate SAX events to the {@link #setContentHandler ContentHandler}.
-      addAttribute(atts, W3C_XML_SCHEMA_INSTANCE_PREFIX, W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION, version.getNamespace() + " " + version.getSchemaLocation());
-      
+      addAttribute(atts, W3C_XML_SCHEMA_INSTANCE_PREFIX,
+          W3C_XML_SCHEMA_INSTANCE_ATTRIBUTE_SCHEMA_LOCATION,
+          version.getNamespace() + " " + version.getSchemaLocation());
+
-      atts.addAttribute("", "", LOCK_LEASE, "",
-                        String.valueOf(creation.getLockLease()));
+      atts.addAttribute("", "", LOCK_LEASE, "", String.valueOf(creation.getLockLease()));
-      atts.addAttribute("", "", LOCK_TIMEOUT, "",
-                        String.valueOf(creation.getLockTimeout()));
+      atts.addAttribute("", "", LOCK_TIMEOUT, "", String.valueOf(creation.getLockTimeout()));
-      atts.addAttribute("", "", SEARCH_TIMEOUT, "",
-                        String.valueOf(creation.getSearchTimeout()));
+      atts.addAttribute("", "", SEARCH_TIMEOUT, "", String.valueOf(creation.getSearchTimeout()));
-        atts.addAttribute("", "", MESSAGE_SYNC_INTERVAL, "", String
-            .valueOf(creation.getMessageSyncInterval()));
+        atts.addAttribute("", "", MESSAGE_SYNC_INTERVAL, "",
+            String.valueOf(creation.getMessageSyncInterval()));
-        atts.addAttribute("", "", IS_SERVER, "",
-                          String.valueOf(creation.isServer()));
+        atts.addAttribute("", "", IS_SERVER, "", String.valueOf(creation.isServer()));
-        atts.addAttribute("", "", COPY_ON_READ, "",
-            String.valueOf(creation.getCopyOnRead()));
-      }      
+        atts.addAttribute("", "", COPY_ON_READ, "", String.valueOf(creation.getCopyOnRead()));
+      }
-          generate(this.cache.getCacheTransactionManager());
-      } else if(this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
+        generate(this.cache.getCacheTransactionManager());
+      } else if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
-      
+
-        for (Iterator iter = this.cache.getCacheServers().iterator();
-             iter.hasNext(); ) {
+        for (Iterator iter = this.cache.getCacheServers().iterator(); iter.hasNext();) {
-      
+
-          Pool cp = (Pool)pools.next();
+          Pool cp = (Pool) pools.next();
-      
+
-          GemFireCacheImpl gfc = (GemFireCacheImpl)this.cache;
-          for (DiskStore ds: gfc.listDiskStores()) {
+          GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
+          for (DiskStore ds : gfc.listDiskStores()) {
-          for (DiskStore ds: this.creation.listDiskStores()) {
+          for (DiskStore ds : this.creation.listDiskStores()) {
-      if(this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
+      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
-      
+
-        for (Iterator iter = namedAttributes.entrySet().iterator();
-             iter.hasNext(); ) {
+        for (Iterator iter = namedAttributes.entrySet().iterator(); iter.hasNext();) {
-          /*if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0)*/ {
+          /* if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) */ {
-                continue; 
+                continue;
-                continue; 
+                continue;
-      if (cache instanceof GemFireCacheImpl) { 
-    	  generateRegions(); 
-      }
-      else { 
+      if (cache instanceof GemFireCacheImpl) {
+        generateRegions();
+      } else {
-    	  while (it.hasNext()) { 
-    		  Region root = (Region)it.next(); 
-    		  generateRegion(root); 
-    	  }
+        while (it.hasNext()) {
+          Region root = (Region) it.next();
+          generateRegion(root);
+        }
-            GemFireCacheImpl gfc = (GemFireCacheImpl)this.cache;
+            GemFireCacheImpl gfc = (GemFireCacheImpl) this.cache;
-            for (File file: this.creation.getBackupFiles()) {
+            for (File file : this.creation.getBackupFiles()) {
-      if(this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
+      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_6) >= 0) {
-        //LexicalHandler lex = (LexicalHandler) handler;
-       //lex.comment(comment.toCharArray(), 0, comment.length());
+        // LexicalHandler lex = (LexicalHandler) handler;
+        // lex.comment(comment.toCharArray(), 0, comment.length());
-    
+
-    
+
-    if(this.cache instanceof CacheCreation) {
+    if (this.cache instanceof CacheCreation) {
-    if(config.pdxReadSerializedUserSet) {
+    if (config.pdxReadSerializedUserSet) {
-      atts.addAttribute("", "", READ_SERIALIZED, "", Boolean.toString(this.cache.getPdxReadSerialized()));
+        atts.addAttribute("", "", READ_SERIALIZED, "",
+            Boolean.toString(this.cache.getPdxReadSerialized()));
-    if(config.pdxIgnoreUnreadFieldsUserSet) {
+    if (config.pdxIgnoreUnreadFieldsUserSet) {
-      atts.addAttribute("", "", IGNORE_UNREAD_FIELDS, "", Boolean.toString(this.cache.getPdxIgnoreUnreadFields()));
+        atts.addAttribute("", "", IGNORE_UNREAD_FIELDS, "",
+            Boolean.toString(this.cache.getPdxIgnoreUnreadFields()));
-    if(config.pdxPersistentUserSet) {
+    if (config.pdxPersistentUserSet) {
-      atts.addAttribute("", "", PERSISTENT, "", Boolean.toString(this.cache.getPdxPersistent()));
+        atts.addAttribute("", "", PERSISTENT, "", Boolean.toString(this.cache.getPdxPersistent()));
-    if(config.pdxDiskStoreUserSet) {
-      if (generateDefaults() || this.cache.getPdxDiskStore() != null && !this.cache.getPdxDiskStore().equals(""))
-      atts.addAttribute("", "", DISK_STORE_NAME, "", this.cache.getPdxDiskStore());
+    if (config.pdxDiskStoreUserSet) {
+      if (generateDefaults()
+          || this.cache.getPdxDiskStore() != null && !this.cache.getPdxDiskStore().equals(""))
+        atts.addAttribute("", "", DISK_STORE_NAME, "", this.cache.getPdxDiskStore());
-    if(!generateDefaults() && this.cache.getPdxSerializer() == null && atts.getLength() == 0) {
+    if (!generateDefaults() && this.cache.getPdxSerializer() == null && atts.getLength() == 0) {
-    
-    if(this.cache.getPdxSerializer() != null) {
+
+    if (this.cache.getPdxSerializer() != null) {
-  
+
-    }
-    else {
+    } else {
-  
+
-    //Merge from persist_Nov10 - iterate the regions in order for persistent recovery.
+    // Merge from persist_Nov10 - iterate the regions in order for persistent recovery.
-      Region root = (Region)it.next();
+      Region root = (Region) it.next();
-        PartitionedRegion pr = (PartitionedRegion)root;
+        PartitionedRegion pr = (PartitionedRegion) root;
-        }
-        else {
+        } else {
-      }
-      else {
+      } else {
-          Region subregion = (Region)object;
+          Region subregion = (Region) object;
-            PartitionedRegion pr = (PartitionedRegion)subregion;
+            PartitionedRegion pr = (PartitionedRegion) subregion;
-        PartitionedRegion pr = (PartitionedRegion)root;
-        PartitionedRegion colocatedWithPr = ColocationHelper
-            .getColocatedRegion(pr);
-        if (colocatedWithPr != null
-            && !generatedRegions.contains(colocatedWithPr)) {
+        PartitionedRegion pr = (PartitionedRegion) root;
+        PartitionedRegion colocatedWithPr = ColocationHelper.getColocatedRegion(pr);
+        if (colocatedWithPr != null && !generatedRegions.contains(colocatedWithPr)) {
-      }
-      else {
+      } else {
+
-   * Generate a resource-manager element 
+   * Generate a resource-manager element
-        atts.addAttribute("", "", CRITICAL_HEAP_PERCENTAGE, "",
-            String.valueOf(chp));
-        generateIt = true;
+          atts.addAttribute("", "", CRITICAL_HEAP_PERCENTAGE, "", String.valueOf(chp));
+          generateIt = true;
-        atts.addAttribute("", "", EVICTION_HEAP_PERCENTAGE, "",
-            String.valueOf(ehp));
-        generateIt = true;
+          atts.addAttribute("", "", EVICTION_HEAP_PERCENTAGE, "", String.valueOf(ehp));
+          generateIt = true;
-      
+
-        int chp = (int)this.cache.getResourceManager().getCriticalHeapPercentage();
+        int chp = (int) this.cache.getResourceManager().getCriticalHeapPercentage();
-        atts.addAttribute("", "", CRITICAL_HEAP_PERCENTAGE, "",
-            String.valueOf(chp));
+          atts.addAttribute("", "", CRITICAL_HEAP_PERCENTAGE, "", String.valueOf(chp));
-        int ehp = (int)this.cache.getResourceManager().getEvictionHeapPercentage();
+        int ehp = (int) this.cache.getResourceManager().getEvictionHeapPercentage();
-        atts.addAttribute("", "", EVICTION_HEAP_PERCENTAGE, "",
-            String.valueOf(ehp));
+          atts.addAttribute("", "", EVICTION_HEAP_PERCENTAGE, "", String.valueOf(ehp));
-      
+
-          int chp = (int)this.cache.getResourceManager().getCriticalOffHeapPercentage();
+          int chp = (int) this.cache.getResourceManager().getCriticalOffHeapPercentage();
-  
-          atts.addAttribute("", "", CRITICAL_OFF_HEAP_PERCENTAGE, "",
-              String.valueOf(chp));
+
+            atts.addAttribute("", "", CRITICAL_OFF_HEAP_PERCENTAGE, "", String.valueOf(chp));
-          int ehp = (int)this.cache.getResourceManager().getEvictionOffHeapPercentage();
+          int ehp = (int) this.cache.getResourceManager().getEvictionOffHeapPercentage();
-          atts.addAttribute("", "", EVICTION_OFF_HEAP_PERCENTAGE, "",
-              String.valueOf(ehp));
+            atts.addAttribute("", "", EVICTION_OFF_HEAP_PERCENTAGE, "", String.valueOf(ehp));
-      generateResourceManagerElement(atts);
+        generateResourceManagerElement(atts);
+
-  
+
+   * 
-    if(sc == null){
+    if (sc == null) {
-    
+
-    for(Class c : sc.getSerializerRegistrations()) {
+    for (Class c : sc.getSerializerRegistrations()) {
-    
-    for(Map.Entry<Class, Integer> e : sc.getInstantiatorRegistrations().entrySet()) {
+
+    for (Map.Entry<Class, Integer> e : sc.getInstantiatorRegistrations().entrySet()) {
-      
+
-      handler.endElement("", INSTANTIATOR_REGISTRATION, INSTANTIATOR_REGISTRATION);      
+      handler.endElement("", INSTANTIATOR_REGISTRATION, INSTANTIATOR_REGISTRATION);
-    
+
-   * @throws SAXException 
+   * @throws SAXException
+   * 
-  
+
-    ClientSubscriptionConfigImpl csc = (ClientSubscriptionConfigImpl)bridge.getClientSubscriptionConfig();
+    ClientSubscriptionConfigImpl csc =
+        (ClientSubscriptionConfigImpl) bridge.getClientSubscriptionConfig();
-        atts.addAttribute("", "", CLIENT_SUBSCRIPTION_EVICTION_POLICY, "", csc.getEvictionPolicy());
-        atts.addAttribute("", "", CLIENT_SUBSCRIPTION_CAPACITY, "", String.valueOf(csc.getCapacity()));
-        if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
-          String dsVal = csc.getDiskStoreName();
-          if (dsVal != null) {
-            atts.addAttribute("", "", DISK_STORE_NAME, "", dsVal);
-          }
+      atts.addAttribute("", "", CLIENT_SUBSCRIPTION_EVICTION_POLICY, "", csc.getEvictionPolicy());
+      atts.addAttribute("", "", CLIENT_SUBSCRIPTION_CAPACITY, "",
+          String.valueOf(csc.getCapacity()));
+      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) >= 0) {
+        String dsVal = csc.getDiskStoreName();
+        if (dsVal != null) {
+          atts.addAttribute("", "", DISK_STORE_NAME, "", dsVal);
-        if (csc.getDiskStoreName() == null && csc.hasOverflowDirectory()) {
-          atts.addAttribute("", "", OVERFLOW_DIRECTORY, "", csc.getOverflowDirectory());
-        }
-        handler.startElement("", CLIENT_SUBSCRIPTION, CLIENT_SUBSCRIPTION, atts);
-        handler.endElement("", CLIENT_SUBSCRIPTION, CLIENT_SUBSCRIPTION);
-      
+      }
+      if (csc.getDiskStoreName() == null && csc.hasOverflowDirectory()) {
+        atts.addAttribute("", "", OVERFLOW_DIRECTORY, "", csc.getOverflowDirectory());
+      }
+      handler.startElement("", CLIENT_SUBSCRIPTION, CLIENT_SUBSCRIPTION, atts);
+      handler.endElement("", CLIENT_SUBSCRIPTION, CLIENT_SUBSCRIPTION);
+
-    }     
+    }
-      atts.addAttribute("", "", PORT, "",
-          String.valueOf(bridge.getPort()));
-      
+        atts.addAttribute("", "", PORT, "", String.valueOf(bridge.getPort()));
+
-      if (generateDefaults() || bridge.getMaximumTimeBetweenPings() != CacheServer.DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS)
-      atts.addAttribute("", "", MAXIMUM_TIME_BETWEEN_PINGS, "",
-          String.valueOf(bridge.getMaximumTimeBetweenPings()));
+      if (generateDefaults()
+          || bridge.getMaximumTimeBetweenPings() != CacheServer.DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS)
+        atts.addAttribute("", "", MAXIMUM_TIME_BETWEEN_PINGS, "",
+            String.valueOf(bridge.getMaximumTimeBetweenPings()));
-      if (generateDefaults() || bridge.getNotifyBySubscription() != CacheServer.DEFAULT_NOTIFY_BY_SUBSCRIPTION)
-      atts.addAttribute("", "", NOTIFY_BY_SUBSCRIPTION, "",
-          String.valueOf(bridge.getNotifyBySubscription()));
+      if (generateDefaults()
+          || bridge.getNotifyBySubscription() != CacheServer.DEFAULT_NOTIFY_BY_SUBSCRIPTION)
+        atts.addAttribute("", "", NOTIFY_BY_SUBSCRIPTION, "",
+            String.valueOf(bridge.getNotifyBySubscription()));
-      if (generateDefaults() || bridge.getSocketBufferSize() != CacheServer.DEFAULT_SOCKET_BUFFER_SIZE)
-      atts.addAttribute("", "", SOCKET_BUFFER_SIZE, "",
-          String.valueOf(bridge.getSocketBufferSize()));
-      
+      if (generateDefaults()
+          || bridge.getSocketBufferSize() != CacheServer.DEFAULT_SOCKET_BUFFER_SIZE)
+        atts.addAttribute("", "", SOCKET_BUFFER_SIZE, "",
+            String.valueOf(bridge.getSocketBufferSize()));
+
-      
+
-      atts.addAttribute("", "", MAX_CONNECTIONS, "",
-          String.valueOf(bridge.getMaxConnections()));
-      
+        atts.addAttribute("", "", MAX_CONNECTIONS, "", String.valueOf(bridge.getMaxConnections()));
+
-      atts.addAttribute("", "", MAX_THREADS, "",
-          String.valueOf(bridge.getMaxThreads()));
-      if (generateDefaults() || bridge.getMaximumMessageCount() != CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT)
-      atts.addAttribute("", "", MAXIMUM_MESSAGE_COUNT, "",
-          String.valueOf(bridge.getMaximumMessageCount()));
-      
-      if (generateDefaults() || bridge.getMessageTimeToLive() != CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE)
-      atts.addAttribute("", "", MESSAGE_TIME_TO_LIVE, "",
-          String.valueOf(bridge.getMessageTimeToLive()));
-      
-      
-      
+        atts.addAttribute("", "", MAX_THREADS, "", String.valueOf(bridge.getMaxThreads()));
+      if (generateDefaults()
+          || bridge.getMaximumMessageCount() != CacheServer.DEFAULT_MAXIMUM_MESSAGE_COUNT)
+        atts.addAttribute("", "", MAXIMUM_MESSAGE_COUNT, "",
+            String.valueOf(bridge.getMaximumMessageCount()));
+
+      if (generateDefaults()
+          || bridge.getMessageTimeToLive() != CacheServer.DEFAULT_MESSAGE_TIME_TO_LIVE)
+        atts.addAttribute("", "", MESSAGE_TIME_TO_LIVE, "",
+            String.valueOf(bridge.getMessageTimeToLive()));
+
+
+
-      
-      if(bridge.getBindAddress() != null) {
-        if (generateDefaults() ||  !CacheServer.DEFAULT_BIND_ADDRESS.equals(bridge.getBindAddress()))
-        atts.addAttribute("","",BIND_ADDRESS,"",bridge.getBindAddress());
+
+      if (bridge.getBindAddress() != null) {
+        if (generateDefaults() || !CacheServer.DEFAULT_BIND_ADDRESS.equals(bridge.getBindAddress()))
+          atts.addAttribute("", "", BIND_ADDRESS, "", bridge.getBindAddress());
-  
-      if (bridge.getHostnameForClients() != null
-          && !bridge.getHostnameForClients().equals("")) {
+
+      if (bridge.getHostnameForClients() != null && !bridge.getHostnameForClients().equals("")) {
-      if (generateDefaults() || bridge.getLoadPollInterval() != CacheServer.DEFAULT_LOAD_POLL_INTERVAL)
-      atts.addAttribute("", "", LOAD_POLL_INTERVAL, "", String.valueOf(bridge.getLoadPollInterval()));
-      
+      if (generateDefaults()
+          || bridge.getLoadPollInterval() != CacheServer.DEFAULT_LOAD_POLL_INTERVAL)
+        atts.addAttribute("", "", LOAD_POLL_INTERVAL, "",
+            String.valueOf(bridge.getLoadPollInterval()));
+
-        atts.addAttribute("", "", TCP_NO_DELAY, "", ""+bridge.getTcpNoDelay());
+        atts.addAttribute("", "", TCP_NO_DELAY, "", "" + bridge.getTcpNoDelay());
-      
+
-        
-        if(!bridge.getClientSubscriptionConfig().getEvictionPolicy().equals("none")){
+
+        if (!bridge.getClientSubscriptionConfig().getEvictionPolicy().equals("none")) {
-        
+
-        
-        
+
+
-    } 
+    }
-  
+
-      if ((!(ds instanceof DiskStoreAttributesCreation) ||
-          ((DiskStoreAttributesCreation) ds).hasAutoCompact())) {
+      if ((!(ds instanceof DiskStoreAttributesCreation)
+          || ((DiskStoreAttributesCreation) ds).hasAutoCompact())) {
-        atts.addAttribute("", "", AUTO_COMPACT, "", 
-            String.valueOf(ds.getAutoCompact()));
+          atts.addAttribute("", "", AUTO_COMPACT, "", String.valueOf(ds.getAutoCompact()));
-      if ((!(ds instanceof DiskStoreAttributesCreation) ||
-          ((DiskStoreAttributesCreation) ds).hasAllowForceCompaction())) {
-        if (generateDefaults() || ds.getAllowForceCompaction() != DiskStoreFactory.DEFAULT_ALLOW_FORCE_COMPACTION)
-        atts.addAttribute("", "", ALLOW_FORCE_COMPACTION, "", 
-            String.valueOf(ds.getAllowForceCompaction()));
+      if ((!(ds instanceof DiskStoreAttributesCreation)
+          || ((DiskStoreAttributesCreation) ds).hasAllowForceCompaction())) {
+        if (generateDefaults()
+            || ds.getAllowForceCompaction() != DiskStoreFactory.DEFAULT_ALLOW_FORCE_COMPACTION)
+          atts.addAttribute("", "", ALLOW_FORCE_COMPACTION, "",
+              String.valueOf(ds.getAllowForceCompaction()));
-      if ((!(ds instanceof DiskStoreAttributesCreation) ||
-          ((DiskStoreAttributesCreation) ds).hasCompactionThreshold())) {
-        if (generateDefaults() || ds.getCompactionThreshold() != DiskStoreFactory.DEFAULT_COMPACTION_THRESHOLD)
-        atts.addAttribute("", "", COMPACTION_THRESHOLD, "", 
-            String.valueOf(ds.getCompactionThreshold()));
+      if ((!(ds instanceof DiskStoreAttributesCreation)
+          || ((DiskStoreAttributesCreation) ds).hasCompactionThreshold())) {
+        if (generateDefaults()
+            || ds.getCompactionThreshold() != DiskStoreFactory.DEFAULT_COMPACTION_THRESHOLD)
+          atts.addAttribute("", "", COMPACTION_THRESHOLD, "",
+              String.valueOf(ds.getCompactionThreshold()));
-      
-      if ((!(ds instanceof DiskStoreAttributesCreation) ||
-          ((DiskStoreAttributesCreation) ds).hasMaxOplogSize())) {
+
+      if ((!(ds instanceof DiskStoreAttributesCreation)
+          || ((DiskStoreAttributesCreation) ds).hasMaxOplogSize())) {
-        atts.addAttribute("", "", MAX_OPLOG_SIZE, "", 
-            String.valueOf(ds.getMaxOplogSize()));
+          atts.addAttribute("", "", MAX_OPLOG_SIZE, "", String.valueOf(ds.getMaxOplogSize()));
-      if ((!(ds instanceof DiskStoreAttributesCreation) ||
-          ((DiskStoreAttributesCreation) ds).hasTimeInterval())) {
+      if ((!(ds instanceof DiskStoreAttributesCreation)
+          || ((DiskStoreAttributesCreation) ds).hasTimeInterval())) {
-        atts.addAttribute("", "", TIME_INTERVAL, "", 
-            String.valueOf(ds.getTimeInterval()));
+          atts.addAttribute("", "", TIME_INTERVAL, "", String.valueOf(ds.getTimeInterval()));
-      if ((!(ds instanceof DiskStoreAttributesCreation) ||
-          ((DiskStoreAttributesCreation) ds).hasWriteBufferSize())) {
-        if (generateDefaults() || ds.getWriteBufferSize() != DiskStoreFactory.DEFAULT_WRITE_BUFFER_SIZE)
-        atts.addAttribute("", "", WRITE_BUFFER_SIZE, "", 
-            String.valueOf(ds.getWriteBufferSize()));
+      if ((!(ds instanceof DiskStoreAttributesCreation)
+          || ((DiskStoreAttributesCreation) ds).hasWriteBufferSize())) {
+        if (generateDefaults()
+            || ds.getWriteBufferSize() != DiskStoreFactory.DEFAULT_WRITE_BUFFER_SIZE)
+          atts.addAttribute("", "", WRITE_BUFFER_SIZE, "", String.valueOf(ds.getWriteBufferSize()));
-      
-      if ((!(ds instanceof DiskStoreAttributesCreation) ||
-          ((DiskStoreAttributesCreation) ds).hasQueueSize())) {
+
+      if ((!(ds instanceof DiskStoreAttributesCreation)
+          || ((DiskStoreAttributesCreation) ds).hasQueueSize())) {
-        atts.addAttribute("", "", QUEUE_SIZE, "", 
-            String.valueOf(ds.getQueueSize()));
+          atts.addAttribute("", "", QUEUE_SIZE, "", String.valueOf(ds.getQueueSize()));
-      
+
-        if ((!(ds instanceof DiskStoreAttributesCreation) ||
-            ((DiskStoreAttributesCreation) ds).hasDiskUsageWarningPercentage())) {
-          if (generateDefaults() || ds.getDiskUsageWarningPercentage() != DiskStoreFactory.DEFAULT_DISK_USAGE_WARNING_PERCENTAGE)
-          atts.addAttribute("", "", DISK_USAGE_WARNING_PERCENTAGE, "", 
-              String.valueOf(ds.getDiskUsageWarningPercentage()));
+        if ((!(ds instanceof DiskStoreAttributesCreation)
+            || ((DiskStoreAttributesCreation) ds).hasDiskUsageWarningPercentage())) {
+          if (generateDefaults() || ds
+              .getDiskUsageWarningPercentage() != DiskStoreFactory.DEFAULT_DISK_USAGE_WARNING_PERCENTAGE)
+            atts.addAttribute("", "", DISK_USAGE_WARNING_PERCENTAGE, "",
+                String.valueOf(ds.getDiskUsageWarningPercentage()));
-        
-        if ((!(ds instanceof DiskStoreAttributesCreation) ||
-            ((DiskStoreAttributesCreation) ds).hasDiskUsageCriticalPercentage())) {
-          if (generateDefaults() || ds.getDiskUsageCriticalPercentage() != DiskStoreFactory.DEFAULT_DISK_USAGE_CRITICAL_PERCENTAGE)
-          atts.addAttribute("", "", DISK_USAGE_CRITICAL_PERCENTAGE, "", 
-              String.valueOf(ds.getDiskUsageCriticalPercentage()));
+
+        if ((!(ds instanceof DiskStoreAttributesCreation)
+            || ((DiskStoreAttributesCreation) ds).hasDiskUsageCriticalPercentage())) {
+          if (generateDefaults() || ds
+              .getDiskUsageCriticalPercentage() != DiskStoreFactory.DEFAULT_DISK_USAGE_CRITICAL_PERCENTAGE)
+            atts.addAttribute("", "", DISK_USAGE_CRITICAL_PERCENTAGE, "",
+                String.valueOf(ds.getDiskUsageCriticalPercentage()));
-      
-      if ((!(ds instanceof DiskStoreAttributesCreation) ||
-          ((DiskStoreAttributesCreation) ds).hasDiskDirs())) {
+
+      if ((!(ds instanceof DiskStoreAttributesCreation)
+          || ((DiskStoreAttributesCreation) ds).hasDiskDirs())) {
-          handler.startElement("", DISK_DIRS, DISK_DIRS, EMPTY);
-          for (int i = 0; i < diskDirs.length; i++) {
-            AttributesImpl diskAtts = new AttributesImpl();
-            if (diskSizes[i] != DiskStoreFactory.DEFAULT_DISK_DIR_SIZE) {
-              diskAtts.addAttribute("", "", DIR_SIZE, "", String
-                  .valueOf(diskSizes[i]));
+            handler.startElement("", DISK_DIRS, DISK_DIRS, EMPTY);
+            for (int i = 0; i < diskDirs.length; i++) {
+              AttributesImpl diskAtts = new AttributesImpl();
+              if (diskSizes[i] != DiskStoreFactory.DEFAULT_DISK_DIR_SIZE) {
+                diskAtts.addAttribute("", "", DIR_SIZE, "", String.valueOf(diskSizes[i]));
+              }
+              handler.startElement("", DISK_DIR, DISK_DIR, diskAtts);
+              File dir = diskDirs[i];
+              String name = generateDefaults() ? dir.getAbsolutePath() : dir.getPath();
+              handler.characters(name.toCharArray(), 0, name.length());
+              handler.endElement("", DISK_DIR, DISK_DIR);
-            handler.startElement("", DISK_DIR, DISK_DIR, diskAtts);
-            File dir = diskDirs[i];
-            String name = generateDefaults() ? dir.getAbsolutePath() : dir.getPath();
-            handler.characters(name.toCharArray(), 0, name.length());
-            handler.endElement("", DISK_DIR, DISK_DIR);
-          }
-          handler.endElement("", DISK_DIRS, DISK_DIRS);
+            handler.endElement("", DISK_DIRS, DISK_DIRS);
-    } 
+    }
-  
-  /** Compare regions by name 
+
+  /**
+   * Compare regions by name
-       return (((Region)o1).getFullPath().compareTo(((Region)o2).getFullPath()));
+      return (((Region) o1).getFullPath().compareTo(((Region) o2).getFullPath()));
+
-       return ((Region)this).getFullPath().equals(((Region)anObj).getFullPath());
+      return ((Region) this).getFullPath().equals(((Region) anObj).getFullPath());
- }
+  }
-    if (((PoolImpl)cp).isUsedByGateway()) {
+    if (((PoolImpl) cp).isUsedByGateway()) {
-      if (generateDefaults() || cp.getFreeConnectionTimeout() != PoolFactory.DEFAULT_FREE_CONNECTION_TIMEOUT)
-      atts.addAttribute("", "", FREE_CONNECTION_TIMEOUT, "",
-                        String.valueOf(cp.getFreeConnectionTimeout()));
-      if (generateDefaults() || cp.getLoadConditioningInterval() != PoolFactory.DEFAULT_LOAD_CONDITIONING_INTERVAL)
-      atts.addAttribute("", "", LOAD_CONDITIONING_INTERVAL, "",
-                        String.valueOf(cp.getLoadConditioningInterval()));
+      if (generateDefaults()
+          || cp.getFreeConnectionTimeout() != PoolFactory.DEFAULT_FREE_CONNECTION_TIMEOUT)
+        atts.addAttribute("", "", FREE_CONNECTION_TIMEOUT, "",
+            String.valueOf(cp.getFreeConnectionTimeout()));
+      if (generateDefaults()
+          || cp.getLoadConditioningInterval() != PoolFactory.DEFAULT_LOAD_CONDITIONING_INTERVAL)
+        atts.addAttribute("", "", LOAD_CONDITIONING_INTERVAL, "",
+            String.valueOf(cp.getLoadConditioningInterval()));
-      atts.addAttribute("", "", MIN_CONNECTIONS, "",
-                        String.valueOf(cp.getMinConnections()));
+        atts.addAttribute("", "", MIN_CONNECTIONS, "", String.valueOf(cp.getMinConnections()));
-      atts.addAttribute("", "", MAX_CONNECTIONS, "",
-          String.valueOf(cp.getMaxConnections()));
+        atts.addAttribute("", "", MAX_CONNECTIONS, "", String.valueOf(cp.getMaxConnections()));
-      atts.addAttribute("", "", RETRY_ATTEMPTS, "",
-          String.valueOf(cp.getRetryAttempts()));
+        atts.addAttribute("", "", RETRY_ATTEMPTS, "", String.valueOf(cp.getRetryAttempts()));
-      atts.addAttribute("", "", IDLE_TIMEOUT, "",
-          String.valueOf(cp.getIdleTimeout()));
+        atts.addAttribute("", "", IDLE_TIMEOUT, "", String.valueOf(cp.getIdleTimeout()));
-      atts.addAttribute("", "", PING_INTERVAL, "",
-          String.valueOf(cp.getPingInterval()));
+        atts.addAttribute("", "", PING_INTERVAL, "", String.valueOf(cp.getPingInterval()));
-      atts.addAttribute("", "", STATISTIC_INTERVAL, "",
-          String.valueOf(cp.getStatisticInterval()));
-      if (generateDefaults() || cp.getSubscriptionAckInterval() != PoolFactory.DEFAULT_SUBSCRIPTION_ACK_INTERVAL)
-      atts.addAttribute("", "", SUBSCRIPTION_ACK_INTERVAL, "",
-          String.valueOf(cp.getSubscriptionAckInterval()));
-      if (generateDefaults() || cp.getSubscriptionEnabled() != PoolFactory.DEFAULT_SUBSCRIPTION_ENABLED)
-      atts.addAttribute("", "", SUBSCRIPTION_ENABLED, "",
-                        String.valueOf(cp.getSubscriptionEnabled()));
-      if (generateDefaults() || cp.getSubscriptionMessageTrackingTimeout() != PoolFactory.DEFAULT_SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT)
-      atts.addAttribute("", "", SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT, "",
-                        String.valueOf(cp.getSubscriptionMessageTrackingTimeout()));
-      if (generateDefaults() || cp.getSubscriptionRedundancy() != PoolFactory.DEFAULT_SUBSCRIPTION_REDUNDANCY)
-      atts.addAttribute("", "", SUBSCRIPTION_REDUNDANCY, "",
-                        String.valueOf(cp.getSubscriptionRedundancy()));
+        atts.addAttribute("", "", STATISTIC_INTERVAL, "",
+            String.valueOf(cp.getStatisticInterval()));
+      if (generateDefaults()
+          || cp.getSubscriptionAckInterval() != PoolFactory.DEFAULT_SUBSCRIPTION_ACK_INTERVAL)
+        atts.addAttribute("", "", SUBSCRIPTION_ACK_INTERVAL, "",
+            String.valueOf(cp.getSubscriptionAckInterval()));
+      if (generateDefaults()
+          || cp.getSubscriptionEnabled() != PoolFactory.DEFAULT_SUBSCRIPTION_ENABLED)
+        atts.addAttribute("", "", SUBSCRIPTION_ENABLED, "",
+            String.valueOf(cp.getSubscriptionEnabled()));
+      if (generateDefaults() || cp
+          .getSubscriptionMessageTrackingTimeout() != PoolFactory.DEFAULT_SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT)
+        atts.addAttribute("", "", SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT, "",
+            String.valueOf(cp.getSubscriptionMessageTrackingTimeout()));
+      if (generateDefaults()
+          || cp.getSubscriptionRedundancy() != PoolFactory.DEFAULT_SUBSCRIPTION_REDUNDANCY)
+        atts.addAttribute("", "", SUBSCRIPTION_REDUNDANCY, "",
+            String.valueOf(cp.getSubscriptionRedundancy()));
-      atts.addAttribute("", "", READ_TIMEOUT, "",
-                        String.valueOf(cp.getReadTimeout()));
+        atts.addAttribute("", "", READ_TIMEOUT, "", String.valueOf(cp.getReadTimeout()));
-      atts.addAttribute("", "", SOCKET_BUFFER_SIZE, "",
-                        String.valueOf(cp.getSocketBufferSize()));
-      if (generateDefaults() || cp.getThreadLocalConnections() != PoolFactory.DEFAULT_THREAD_LOCAL_CONNECTIONS)
-      atts.addAttribute("", "", THREAD_LOCAL_CONNECTIONS, "",
-                        String.valueOf(cp.getThreadLocalConnections()));
+        atts.addAttribute("", "", SOCKET_BUFFER_SIZE, "", String.valueOf(cp.getSocketBufferSize()));
+      if (generateDefaults()
+          || cp.getThreadLocalConnections() != PoolFactory.DEFAULT_THREAD_LOCAL_CONNECTIONS)
+        atts.addAttribute("", "", THREAD_LOCAL_CONNECTIONS, "",
+            String.valueOf(cp.getThreadLocalConnections()));
-        if (generateDefaults() || cp.getPRSingleHopEnabled() != PoolFactory.DEFAULT_PR_SINGLE_HOP_ENABLED)
-        atts.addAttribute("", "", PR_SINGLE_HOP_ENABLED, "",
-            String.valueOf(cp.getPRSingleHopEnabled()));  
+        if (generateDefaults()
+            || cp.getPRSingleHopEnabled() != PoolFactory.DEFAULT_PR_SINGLE_HOP_ENABLED)
+          atts.addAttribute("", "", PR_SINGLE_HOP_ENABLED, "",
+              String.valueOf(cp.getPRSingleHopEnabled()));
-        if (generateDefaults() || cp.getMultiuserAuthentication() != PoolFactory.DEFAULT_MULTIUSER_AUTHENTICATION)
-        atts.addAttribute("", "", MULTIUSER_SECURE_MODE_ENABLED, "", String.valueOf(cp
-            .getMultiuserAuthentication()));
+        if (generateDefaults()
+            || cp.getMultiuserAuthentication() != PoolFactory.DEFAULT_MULTIUSER_AUTHENTICATION)
+          atts.addAttribute("", "", MULTIUSER_SECURE_MODE_ENABLED, "",
+              String.valueOf(cp.getMultiuserAuthentication()));
-        Iterator/*<InetSocketAddress>*/ locators = cp.getLocators().iterator();
+        Iterator/* <InetSocketAddress> */ locators = cp.getLocators().iterator();
-          InetSocketAddress addr = (InetSocketAddress)locators.next();
+          InetSocketAddress addr = (InetSocketAddress) locators.next();
-        Iterator/*<InetSocketAddress>*/ servers = cp.getServers().iterator();
+        Iterator/* <InetSocketAddress> */ servers = cp.getServers().iterator();
-          InetSocketAddress addr = (InetSocketAddress)servers.next();
+          InetSocketAddress addr = (InetSocketAddress) servers.next();
-    } 
+    }
-    if (!generateDefaults() && txMgr.getWriter() == null
-        && txMgr.getListeners().length == 0) {
+    if (!generateDefaults() && txMgr.getWriter() == null && txMgr.getListeners().length == 0) {
-      for (int i=0; i < listeners.length; i++) {
+      for (int i = 0; i < listeners.length; i++) {
-      if(txMgr.getWriter()!=null) {
+      if (txMgr.getWriter() != null) {
-      cfg = ((CacheCreation)c).getDynamicRegionFactoryConfig();
+      cfg = ((CacheCreation) c).getDynamicRegionFactoryConfig();
-    if(cfg.getPoolName() != null) {
+    if (cfg.getPoolName() != null) {
-      AttributesImpl atts = new AttributesImpl();
-      // id
-      atts.addAttribute("", "", ID, "", sender.getId());
-      // remote-distributed-system
-      atts.addAttribute("", "", REMOTE_DISTRIBUTED_SYSTEM_ID, "", String
-        .valueOf(sender.getRemoteDSId()));
-      // parallel
-      if (generateDefaults() || sender.isParallel() != GatewaySender.DEFAULT_IS_PARALLEL)
+    AttributesImpl atts = new AttributesImpl();
+    // id
+    atts.addAttribute("", "", ID, "", sender.getId());
+    // remote-distributed-system
+    atts.addAttribute("", "", REMOTE_DISTRIBUTED_SYSTEM_ID, "",
+        String.valueOf(sender.getRemoteDSId()));
+    // parallel
+    if (generateDefaults() || sender.isParallel() != GatewaySender.DEFAULT_IS_PARALLEL)
-      // manual-start
-      if (generateDefaults() || sender.isManualStart() != GatewaySender.DEFAULT_MANUAL_START)
+    // manual-start
+    if (generateDefaults() || sender.isManualStart() != GatewaySender.DEFAULT_MANUAL_START)
-      // socket-buffer-size
-      if (generateDefaults() || sender.getSocketBufferSize() != GatewaySender.DEFAULT_SOCKET_BUFFER_SIZE)
-      atts.addAttribute("", "", SOCKET_BUFFER_SIZE, "", String.valueOf(sender
-          .getSocketBufferSize()));
-      // socket-read-timeout
-      if (generateDefaults() || sender.getSocketReadTimeout() != GatewaySender.DEFAULT_SOCKET_READ_TIMEOUT)
-      atts.addAttribute("", "", SOCKET_READ_TIMEOUT, "", String.valueOf(sender
-          .getSocketReadTimeout()));
-      // enable-batch-conflation
-      if (generateDefaults() || sender.isBatchConflationEnabled() != GatewaySender.DEFAULT_BATCH_CONFLATION)
-      atts.addAttribute("", "", ENABLE_BATCH_CONFLATION, "", String.valueOf(sender
-          .isBatchConflationEnabled())); // Should we use ENABLE-CONFLATION
-      // batch-size
-      if (generateDefaults() || sender.getBatchSize() != GatewaySender.DEFAULT_BATCH_SIZE)
-      atts.addAttribute("", "", BATCH_SIZE, "", String.valueOf(sender
-          .getBatchSize()));
-      // batch-time-interval
-      if (generateDefaults() || sender.getBatchTimeInterval() != GatewaySender.DEFAULT_BATCH_TIME_INTERVAL)
-      atts.addAttribute("", "", BATCH_TIME_INTERVAL, "", String.valueOf(sender
-          .getBatchTimeInterval()));
-      // enable-persistence
-      if (generateDefaults() || sender.isPersistenceEnabled() != GatewaySender.DEFAULT_PERSISTENCE_ENABLED)
-      atts.addAttribute("", "", ENABLE_PERSISTENCE, "", String.valueOf(sender
-          .isPersistenceEnabled()));
-      // disk-store-name
-      if (generateDefaults() || sender.getDiskStoreName() != null && !sender.getDiskStoreName().equals(""))
-      atts.addAttribute("", "", DISK_STORE_NAME, "", String.valueOf(sender
-          .getDiskStoreName()));
-      // disk-synchronous
-      if (generateDefaults() || sender.isDiskSynchronous() != GatewaySender.DEFAULT_DISK_SYNCHRONOUS)
-      atts.addAttribute("", "", DISK_SYNCHRONOUS, "", String.valueOf(sender
-          .isDiskSynchronous()));
-      // maximum-queue-memory
-      if (generateDefaults() || sender.getMaximumQueueMemory() != GatewaySender.DEFAULT_MAXIMUM_QUEUE_MEMORY)
-      atts.addAttribute("", "", MAXIMUM_QUEUE_MEMORY, "", String.valueOf(sender
-          .getMaximumQueueMemory()));
-      // alert-threshold
-      if (generateDefaults() || sender.getAlertThreshold() != GatewaySender.DEFAULT_ALERT_THRESHOLD)
-      atts.addAttribute("", "", ALERT_THRESHOLD, "", String.valueOf(sender
-          .getAlertThreshold()));
+    // socket-buffer-size
+    if (generateDefaults()
+        || sender.getSocketBufferSize() != GatewaySender.DEFAULT_SOCKET_BUFFER_SIZE)
+      atts.addAttribute("", "", SOCKET_BUFFER_SIZE, "",
+          String.valueOf(sender.getSocketBufferSize()));
+    // socket-read-timeout
+    if (generateDefaults()
+        || sender.getSocketReadTimeout() != GatewaySender.DEFAULT_SOCKET_READ_TIMEOUT)
+      atts.addAttribute("", "", SOCKET_READ_TIMEOUT, "",
+          String.valueOf(sender.getSocketReadTimeout()));
+    // enable-batch-conflation
+    if (generateDefaults()
+        || sender.isBatchConflationEnabled() != GatewaySender.DEFAULT_BATCH_CONFLATION)
+      atts.addAttribute("", "", ENABLE_BATCH_CONFLATION, "",
+          String.valueOf(sender.isBatchConflationEnabled())); // Should we use ENABLE-CONFLATION
+    // batch-size
+    if (generateDefaults() || sender.getBatchSize() != GatewaySender.DEFAULT_BATCH_SIZE)
+      atts.addAttribute("", "", BATCH_SIZE, "", String.valueOf(sender.getBatchSize()));
+    // batch-time-interval
+    if (generateDefaults()
+        || sender.getBatchTimeInterval() != GatewaySender.DEFAULT_BATCH_TIME_INTERVAL)
+      atts.addAttribute("", "", BATCH_TIME_INTERVAL, "",
+          String.valueOf(sender.getBatchTimeInterval()));
+    // enable-persistence
+    if (generateDefaults()
+        || sender.isPersistenceEnabled() != GatewaySender.DEFAULT_PERSISTENCE_ENABLED)
+      atts.addAttribute("", "", ENABLE_PERSISTENCE, "",
+          String.valueOf(sender.isPersistenceEnabled()));
+    // disk-store-name
+    if (generateDefaults()
+        || sender.getDiskStoreName() != null && !sender.getDiskStoreName().equals(""))
+      atts.addAttribute("", "", DISK_STORE_NAME, "", String.valueOf(sender.getDiskStoreName()));
+    // disk-synchronous
+    if (generateDefaults() || sender.isDiskSynchronous() != GatewaySender.DEFAULT_DISK_SYNCHRONOUS)
+      atts.addAttribute("", "", DISK_SYNCHRONOUS, "", String.valueOf(sender.isDiskSynchronous()));
+    // maximum-queue-memory
+    if (generateDefaults()
+        || sender.getMaximumQueueMemory() != GatewaySender.DEFAULT_MAXIMUM_QUEUE_MEMORY)
+      atts.addAttribute("", "", MAXIMUM_QUEUE_MEMORY, "",
+          String.valueOf(sender.getMaximumQueueMemory()));
+    // alert-threshold
+    if (generateDefaults() || sender.getAlertThreshold() != GatewaySender.DEFAULT_ALERT_THRESHOLD)
+      atts.addAttribute("", "", ALERT_THRESHOLD, "", String.valueOf(sender.getAlertThreshold()));
-      // dispatcher-threads
-      if (generateDefaults() || sender.getDispatcherThreads() != GatewaySender.DEFAULT_DISPATCHER_THREADS)
-      atts.addAttribute("", "", DISPATCHER_THREADS, "", String.valueOf(sender
-          .getDispatcherThreads()));
-      // order-policy
-      if (sender.getOrderPolicy() != null) {
-        if (generateDefaults() || !sender.getOrderPolicy().equals(GatewaySender.DEFAULT_ORDER_POLICY))
-        atts.addAttribute("", "", ORDER_POLICY, "", String.valueOf(sender
-          .getOrderPolicy()));
+    // dispatcher-threads
+    if (generateDefaults()
+        || sender.getDispatcherThreads() != GatewaySender.DEFAULT_DISPATCHER_THREADS)
+      atts.addAttribute("", "", DISPATCHER_THREADS, "",
+          String.valueOf(sender.getDispatcherThreads()));
+    // order-policy
+    if (sender.getOrderPolicy() != null) {
+      if (generateDefaults() || !sender.getOrderPolicy().equals(GatewaySender.DEFAULT_ORDER_POLICY))
+        atts.addAttribute("", "", ORDER_POLICY, "", String.valueOf(sender.getOrderPolicy()));
+    }
+
+    handler.startElement("", GATEWAY_SENDER, GATEWAY_SENDER, atts);
+
+    for (GatewayEventFilter gef : sender.getGatewayEventFilters()) {
+      generateGatewayEventFilter(gef);
+    }
+
+    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
+      if (sender.getGatewayEventSubstitutionFilter() != null) {
+        generateGatewayEventSubstitutionFilter(sender.getGatewayEventSubstitutionFilter());
-      
-      handler.startElement("", GATEWAY_SENDER, GATEWAY_SENDER, atts);
-      
-      for (GatewayEventFilter gef : sender.getGatewayEventFilters()) {
-         generateGatewayEventFilter(gef);
-      }
+    }
-      if (this.version.compareTo(CacheXmlVersion.GEMFIRE_8_0) >= 0) {
-        if (sender.getGatewayEventSubstitutionFilter() != null) {
-          generateGatewayEventSubstitutionFilter(sender.getGatewayEventSubstitutionFilter());
-        }
-      }
+    for (GatewayTransportFilter gsf : sender.getGatewayTransportFilters()) {
+      generateGatewayTransportFilter(gsf);
+    }
-      for (GatewayTransportFilter gsf : sender.getGatewayTransportFilters()) {
-        generateGatewayTransportFilter(gsf);
-     }
-
-      handler.endElement("", GATEWAY_SENDER, GATEWAY_SENDER);
+    handler.endElement("", GATEWAY_SENDER, GATEWAY_SENDER);
-      atts.addAttribute("", "", PARALLEL, "", String.valueOf(asyncEventQueue.isParallel()));
+        atts.addAttribute("", "", PARALLEL, "", String.valueOf(asyncEventQueue.isParallel()));
-      atts.addAttribute("", "", BATCH_SIZE, "", String.valueOf(asyncEventQueue
-        .getBatchSize()));
+        atts.addAttribute("", "", BATCH_SIZE, "", String.valueOf(asyncEventQueue.getBatchSize()));
-      if (generateDefaults() || asyncEventQueue.getBatchTimeInterval() != GatewaySender.DEFAULT_BATCH_TIME_INTERVAL)
-      atts.addAttribute("", "", BATCH_TIME_INTERVAL, "", String.valueOf(asyncEventQueue
-          .getBatchTimeInterval()));
+      if (generateDefaults()
+          || asyncEventQueue.getBatchTimeInterval() != GatewaySender.DEFAULT_BATCH_TIME_INTERVAL)
+        atts.addAttribute("", "", BATCH_TIME_INTERVAL, "",
+            String.valueOf(asyncEventQueue.getBatchTimeInterval()));
-      if (generateDefaults() || asyncEventQueue.isBatchConflationEnabled() != GatewaySender.DEFAULT_BATCH_CONFLATION)
-      atts.addAttribute("", "", ENABLE_BATCH_CONFLATION, "", String.valueOf(asyncEventQueue
-          .isBatchConflationEnabled()));
+      if (generateDefaults()
+          || asyncEventQueue.isBatchConflationEnabled() != GatewaySender.DEFAULT_BATCH_CONFLATION)
+        atts.addAttribute("", "", ENABLE_BATCH_CONFLATION, "",
+            String.valueOf(asyncEventQueue.isBatchConflationEnabled()));
-      if (generateDefaults() || asyncEventQueue.getMaximumQueueMemory() != GatewaySender.DEFAULT_MAXIMUM_QUEUE_MEMORY)
-      atts.addAttribute("", "", MAXIMUM_QUEUE_MEMORY, "", String.valueOf(asyncEventQueue
-        .getMaximumQueueMemory()));
+      if (generateDefaults()
+          || asyncEventQueue.getMaximumQueueMemory() != GatewaySender.DEFAULT_MAXIMUM_QUEUE_MEMORY)
+        atts.addAttribute("", "", MAXIMUM_QUEUE_MEMORY, "",
+            String.valueOf(asyncEventQueue.getMaximumQueueMemory()));
-      if (generateDefaults() || asyncEventQueue.isPersistent() != GatewaySender.DEFAULT_PERSISTENCE_ENABLED)
-      atts.addAttribute("", "", PERSISTENT, "", String.valueOf(asyncEventQueue
-        .isPersistent()));
+      if (generateDefaults()
+          || asyncEventQueue.isPersistent() != GatewaySender.DEFAULT_PERSISTENCE_ENABLED)
+        atts.addAttribute("", "", PERSISTENT, "", String.valueOf(asyncEventQueue.isPersistent()));
-        //disk-store-name
-        if (generateDefaults() || (asyncEventQueue.getDiskStoreName() != null && !asyncEventQueue.getDiskStoreName().equals("")))
-        atts.addAttribute("", "", DISK_STORE_NAME, "", String.valueOf(asyncEventQueue
-            .getDiskStoreName()));
+        // disk-store-name
+        if (generateDefaults() || (asyncEventQueue.getDiskStoreName() != null
+            && !asyncEventQueue.getDiskStoreName().equals("")))
+          atts.addAttribute("", "", DISK_STORE_NAME, "",
+              String.valueOf(asyncEventQueue.getDiskStoreName()));
-      if (generateDefaults() || asyncEventQueue.getDispatcherThreads() != GatewaySender.DEFAULT_DISPATCHER_THREADS)
-      atts.addAttribute("", "", DISPATCHER_THREADS, "", String.valueOf(asyncEventQueue
-          .getDispatcherThreads()));
+      if (generateDefaults()
+          || asyncEventQueue.getDispatcherThreads() != GatewaySender.DEFAULT_DISPATCHER_THREADS)
+        atts.addAttribute("", "", DISPATCHER_THREADS, "",
+            String.valueOf(asyncEventQueue.getDispatcherThreads()));
-        if (generateDefaults() || !asyncEventQueue.getOrderPolicy().equals(GatewaySender.DEFAULT_ORDER_POLICY))
-        atts.addAttribute("", "", ORDER_POLICY, "", String.valueOf(asyncEventQueue
-          .getOrderPolicy()));
+        if (generateDefaults()
+            || !asyncEventQueue.getOrderPolicy().equals(GatewaySender.DEFAULT_ORDER_POLICY))
+          atts.addAttribute("", "", ORDER_POLICY, "",
+              String.valueOf(asyncEventQueue.getOrderPolicy()));
-        if (generateDefaults() || asyncEventQueue.isForwardExpirationDestroy() != (GatewaySender.DEFAULT_FORWARD_EXPIRATION_DESTROY))
-          atts.addAttribute("", "", FORWARD_EXPIRATION_DESTROY, "", String.valueOf(asyncEventQueue
-              .isForwardExpirationDestroy()));
+        if (generateDefaults() || asyncEventQueue
+            .isForwardExpirationDestroy() != (GatewaySender.DEFAULT_FORWARD_EXPIRATION_DESTROY))
+          atts.addAttribute("", "", FORWARD_EXPIRATION_DESTROY, "",
+              String.valueOf(asyncEventQueue.isForwardExpirationDestroy()));
-      if (generateDefaults() || asyncEventQueue.isDiskSynchronous() != GatewaySender.DEFAULT_DISK_SYNCHRONOUS)
-      atts.addAttribute("", "", DISK_SYNCHRONOUS, "", String.valueOf(asyncEventQueue
-          .isDiskSynchronous()));
-      
+      if (generateDefaults()
+          || asyncEventQueue.isDiskSynchronous() != GatewaySender.DEFAULT_DISK_SYNCHRONOUS)
+        atts.addAttribute("", "", DISK_SYNCHRONOUS, "",
+            String.valueOf(asyncEventQueue.isDiskSynchronous()));
+
-    
+
-    	  for (GatewayEventFilter eventFilter : eventFilters) {
-    		generateGatewayEventFilter(eventFilter);
-    	  }
+        for (GatewayEventFilter eventFilter : eventFilters) {
+          generateGatewayEventFilter(eventFilter);
+        }
-          generateGatewayEventSubstitutionFilter(asyncEventQueue.getGatewayEventSubstitutionFilter());
+          generateGatewayEventSubstitutionFilter(
+              asyncEventQueue.getGatewayEventSubstitutionFilter());
-      
+
-}
+  }
-  
+
-        if (generateDefaults()
-            || receiver.getStartPort() != GatewayReceiver.DEFAULT_START_PORT)
-          atts.addAttribute("", "", START_PORT, "",
-              String.valueOf(receiver.getStartPort()));
+        if (generateDefaults() || receiver.getStartPort() != GatewayReceiver.DEFAULT_START_PORT)
+          atts.addAttribute("", "", START_PORT, "", String.valueOf(receiver.getStartPort()));
-        if (generateDefaults()
-            || receiver.getEndPort() != GatewayReceiver.DEFAULT_END_PORT)
-          atts.addAttribute("", "", END_PORT, "",
-              String.valueOf(receiver.getEndPort()));
+        if (generateDefaults() || receiver.getEndPort() != GatewayReceiver.DEFAULT_END_PORT)
+          atts.addAttribute("", "", END_PORT, "", String.valueOf(receiver.getEndPort()));
-        if (generateDefaults()
-            || (receiver.getBindAddress() != null && !receiver.getBindAddress()
-                .equals(GatewayReceiver.DEFAULT_BIND_ADDRESS)))
+        if (generateDefaults() || (receiver.getBindAddress() != null
+            && !receiver.getBindAddress().equals(GatewayReceiver.DEFAULT_BIND_ADDRESS)))
-        if (generateDefaults()
-            || receiver.getMaximumTimeBetweenPings() != GatewayReceiver.DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS)
+        if (generateDefaults() || receiver
+            .getMaximumTimeBetweenPings() != GatewayReceiver.DEFAULT_MAXIMUM_TIME_BETWEEN_PINGS)
-        if (generateDefaults()
-            || receiver.isManualStart() != GatewayReceiver.DEFAULT_MANUAL_START)
-          atts.addAttribute("", "", MANUAL_START, "",
-              String.valueOf(receiver.isManualStart()));
+        if (generateDefaults() || receiver.isManualStart() != GatewayReceiver.DEFAULT_MANUAL_START)
+          atts.addAttribute("", "", MANUAL_START, "", String.valueOf(receiver.isManualStart()));
-      }
-      finally {
+      } finally {
-  
-  private void generateGatewayEventFilter(GatewayEventFilter gef)
-      throws SAXException {
+
+  private void generateGatewayEventFilter(GatewayEventFilter gef) throws SAXException {
-      props = ((Declarable2)gef).getConfig();
+      props = ((Declarable2) gef).getConfig();
-  private void generateGatewayTransportFilter(GatewayTransportFilter gef)
-      throws SAXException {
+  private void generateGatewayTransportFilter(GatewayTransportFilter gef) throws SAXException {
-    handler.startElement("", GATEWAY_TRANSPORT_FILTER, GATEWAY_TRANSPORT_FILTER,
-        EMPTY);
+    handler.startElement("", GATEWAY_TRANSPORT_FILTER, GATEWAY_TRANSPORT_FILTER, EMPTY);
-      props = ((Declarable2)gef).getConfig();
+      props = ((Declarable2) gef).getConfig();
-      props = ((Declarable2)filter).getConfig();
+      props = ((Declarable2) filter).getConfig();
-//
-//  private void generateGatewayEventListener(GatewayEventListener gef)
-//      throws SAXException {
-//
-//    handler.startElement("", GATEWAY_EVENT_LISTENER, GATEWAY_EVENT_LISTENER,
-//        EMPTY);
-//    String className = gef.getClass().getName();
-//
-//    handler.startElement("", CLASS_NAME, CLASS_NAME, EMPTY);
-//    handler.characters(className.toCharArray(), 0, className.length());
-//    handler.endElement("", CLASS_NAME, CLASS_NAME);
-//    Properties props = null;
-//    if (gef instanceof Declarable2) {
-//      props = ((Declarable2)gef).getConfig();
-//      generate(props, null);
-//    }
-//    handler.endElement("", GATEWAY_EVENT_LISTENER, GATEWAY_EVENT_LISTENER);
-//  }
-  
+  //
+  // private void generateGatewayEventListener(GatewayEventListener gef)
+  // throws SAXException {
+  //
+  // handler.startElement("", GATEWAY_EVENT_LISTENER, GATEWAY_EVENT_LISTENER,
+  // EMPTY);
+  // String className = gef.getClass().getName();
+  //
+  // handler.startElement("", CLASS_NAME, CLASS_NAME, EMPTY);
+  // handler.characters(className.toCharArray(), 0, className.length());
+  // handler.endElement("", CLASS_NAME, CLASS_NAME);
+  // Properties props = null;
+  // if (gef instanceof Declarable2) {
+  // props = ((Declarable2)gef).getConfig();
+  // generate(props, null);
+  // }
+  // handler.endElement("", GATEWAY_EVENT_LISTENER, GATEWAY_EVENT_LISTENER);
+  // }
+
-      RegionCreation rc = (RegionCreation)region;
+      RegionCreation rc = (RegionCreation) region;
-      RegionCreation rc = (RegionCreation)region;
+      RegionCreation rc = (RegionCreation) region;
-    
-    //generate index data here
+
+    // generate index data here
-      for (Object index: indexesForRegion) {
-        generate((Index)index);
+      for (Object index : indexesForRegion) {
+        generate((Index) index);
-            Region.Entry entry = (Region.Entry)iter.next();
+            Region.Entry entry = (Region.Entry) iter.next();
-    }
-    else {
+    } else {
-          Region.Entry entry = (Region.Entry)iter.next();
+          Region.Entry entry = (Region.Entry) iter.next();
-    
+
-    for (Iterator iter = rSet.iterator(); iter.hasNext(); ) {
+    for (Iterator iter = rSet.iterator(); iter.hasNext();) {
-      @SuppressWarnings({ "unchecked" })
+      @SuppressWarnings({"unchecked"})
-        atts.addAttribute("","", KEY_INDEX, "", "true");
-      }
-      else {
-        //convert the indexType to the xml indexType
+        atts.addAttribute("", "", KEY_INDEX, "", "true");
+      } else {
+        // convert the indexType to the xml indexType
-        }
-        else {
+        } else {
-        atts.addAttribute("","", KEY_INDEX, "", "false");
+        atts.addAttribute("", "", KEY_INDEX, "", "false");
-      atts.addAttribute("", "", EXPRESSION, "",indexData.getIndexExpression());
-    }
-    else {
+      atts.addAttribute("", "", EXPRESSION, "", indexData.getIndexExpression());
+    } else {
-        atts.addAttribute("","", KEY_INDEX, "", "true");
-      }
-      else {
-        atts.addAttribute("","", KEY_INDEX, "", "false");
+        atts.addAttribute("", "", KEY_INDEX, "", "true");
+      } else {
+        atts.addAttribute("", "", KEY_INDEX, "", "false");
-      atts.addAttribute("", "", EXPRESSION, "",index.getIndexedExpression());
+      atts.addAttribute("", "", EXPRESSION, "", index.getIndexedExpression());
-  
+
-   * @param id
-   *        The id of the named region attributes (may be
-   *        <code>null</code>)
+   * @param id The id of the named region attributes (may be <code>null</code>)
-  private void generate(String id, RegionAttributes attrs)
-    throws SAXException {
+  private void generate(String id, RegionAttributes attrs) throws SAXException {
-    // Unless, the attrs is a "creation" instance, 
+    // Unless, the attrs is a "creation" instance,
-    // point, the refid information is lost.  
+    // point, the refid information is lost.
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-        ((RegionAttributesCreation) attrs).hasScope())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasScope())) {
-        throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_SCOPE_0.toLocalizedString(scope));
+        throw new InternalGemFireException(
+            LocalizedStrings.CacheXmlGenerator_UNKNOWN_SCOPE_0.toLocalizedString(scope));
-      
+
-        isPartitionedRegion = rac.getPartitionAttributes() != null || 
-          (rac.hasDataPolicy() && rac.getDataPolicy().withPartitioning());
+        isPartitionedRegion = rac.getPartitionAttributes() != null
+            || (rac.hasDataPolicy() && rac.getDataPolicy().withPartitioning());
-        isPartitionedRegion = attrs.getPartitionAttributes() != null ||
-          attrs.getDataPolicy().withPartitioning();
+        isPartitionedRegion =
+            attrs.getPartitionAttributes() != null || attrs.getDataPolicy().withPartitioning();
-      if ( ! isPartitionedRegion) {
+      if (!isPartitionedRegion) {
-        atts.addAttribute("", "", SCOPE, "", scopeString);
-      } 
+          atts.addAttribute("", "", SCOPE, "", scopeString);
+      }
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasEarlyAck())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasEarlyAck())) {
-      atts.addAttribute("", "", EARLY_ACK, "",
-                        String.valueOf(attrs.getEarlyAck()));
+        atts.addAttribute("", "", EARLY_ACK, "", String.valueOf(attrs.getEarlyAck()));
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasMulticastEnabled())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasMulticastEnabled())) {
-      atts.addAttribute("", "", MULTICAST_ENABLED, "",
-                        String.valueOf(attrs.getMulticastEnabled()));
+        atts.addAttribute("", "", MULTICAST_ENABLED, "",
+            String.valueOf(attrs.getMulticastEnabled()));
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasPublisher())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasPublisher())) {
-      atts.addAttribute("", "", PUBLISHER, "",
-                        String.valueOf(attrs.getPublisher()));
+        atts.addAttribute("", "", PUBLISHER, "", String.valueOf(attrs.getPublisher()));
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasEnableAsyncConflation())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasEnableAsyncConflation())) {
-      atts.addAttribute("", "", ENABLE_ASYNC_CONFLATION, "",
-                        String.valueOf(attrs.getEnableAsyncConflation()));
+        atts.addAttribute("", "", ENABLE_ASYNC_CONFLATION, "",
+            String.valueOf(attrs.getEnableAsyncConflation()));
-      
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-           ((RegionAttributesCreation) attrs).hasEnableSubscriptionConflation())) {
+
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasEnableSubscriptionConflation())) {
-          atts.addAttribute("", "", ENABLE_SUBSCRIPTION_CONFLATION, "",
-                            String.valueOf(attrs.getEnableSubscriptionConflation()));
+            atts.addAttribute("", "", ENABLE_SUBSCRIPTION_CONFLATION, "",
+                String.valueOf(attrs.getEnableSubscriptionConflation()));
-          atts.addAttribute("", "", ENABLE_BRIDGE_CONFLATION, "",
-                            String.valueOf(attrs.getEnableSubscriptionConflation()));
+            atts.addAttribute("", "", ENABLE_BRIDGE_CONFLATION, "",
+                String.valueOf(attrs.getEnableSubscriptionConflation()));
-      
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-           ((RegionAttributesCreation) attrs).hasDataPolicy())) {
+
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasDataPolicy())) {
-          }
-          else {
+          } else {
-          throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_DATA_POLICY_0.toLocalizedString(dp));
+          throw new InternalGemFireException(
+              LocalizedStrings.CacheXmlGenerator_UNKNOWN_DATA_POLICY_0.toLocalizedString(dp));
-        atts.addAttribute("", "", DATA_POLICY, "", dpString);
+          atts.addAttribute("", "", DATA_POLICY, "", dpString);
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-          ((RegionAttributesCreation) attrs).hasEnableSubscriptionConflation())) {
-       if (generateDefaults() || attrs.getEnableSubscriptionConflation())
-       atts.addAttribute("", "", "enable-conflation", "",
-                         String.valueOf(attrs.getEnableSubscriptionConflation()));
-     }
-      
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-           ((RegionAttributesCreation) attrs).hasMirrorType())) {
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasEnableSubscriptionConflation())) {
+        if (generateDefaults() || attrs.getEnableSubscriptionConflation())
+          atts.addAttribute("", "", "enable-conflation", "",
+              String.valueOf(attrs.getEnableSubscriptionConflation()));
+      }
+
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasMirrorType())) {
-          throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_MIRROR_TYPE_0.toLocalizedString(mirror));
+          throw new InternalGemFireException(
+              LocalizedStrings.CacheXmlGenerator_UNKNOWN_MIRROR_TYPE_0.toLocalizedString(mirror));
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-           ((RegionAttributesCreation) attrs).hasPersistBackup())) {
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasPersistBackup())) {
-                          String.valueOf(attrs.getDataPolicy() == DataPolicy.PERSISTENT_REPLICATE));
+            String.valueOf(attrs.getDataPolicy() == DataPolicy.PERSISTENT_REPLICATE));
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasInitialCapacity())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasInitialCapacity())) {
-      atts.addAttribute("", "", INITIAL_CAPACITY, "",
-                        String.valueOf(attrs.getInitialCapacity()));
+        atts.addAttribute("", "", INITIAL_CAPACITY, "", String.valueOf(attrs.getInitialCapacity()));
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasLoadFactor())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasLoadFactor())) {
-      atts.addAttribute("", "", LOAD_FACTOR, "",
-                        String.valueOf(attrs.getLoadFactor()));
+        atts.addAttribute("", "", LOAD_FACTOR, "", String.valueOf(attrs.getLoadFactor()));
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasConcurrencyLevel())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasConcurrencyLevel())) {
-      atts.addAttribute("", "", CONCURRENCY_LEVEL, "",
-                        String.valueOf(attrs.getConcurrencyLevel()));
+        atts.addAttribute("", "", CONCURRENCY_LEVEL, "",
+            String.valueOf(attrs.getConcurrencyLevel()));
-    
+
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-          ((RegionAttributesCreation) attrs).hasConcurrencyChecksEnabled())) {
-       if (generateDefaults() || attrs.getConcurrencyChecksEnabled() != true/*fixes bug 46654*/)
-       atts.addAttribute("", "", CONCURRENCY_CHECKS_ENABLED, "",
-                         String.valueOf(attrs.getConcurrencyChecksEnabled()));
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasConcurrencyChecksEnabled())) {
+        if (generateDefaults() || attrs.getConcurrencyChecksEnabled() != true/* fixes bug 46654 */)
+          atts.addAttribute("", "", CONCURRENCY_CHECKS_ENABLED, "",
+              String.valueOf(attrs.getConcurrencyChecksEnabled()));
-   
-    
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasStatisticsEnabled())) {
+
+
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasStatisticsEnabled())) {
-      atts.addAttribute("", "", STATISTICS_ENABLED, "",
-                        String.valueOf(attrs.getStatisticsEnabled()));
+        atts.addAttribute("", "", STATISTICS_ENABLED, "",
+            String.valueOf(attrs.getStatisticsEnabled()));
-    if ( !(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation)attrs).hasIgnoreJTA() ) {
+    if (!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasIgnoreJTA()) {
-      atts.addAttribute("", "", IGNORE_JTA, "",
-                        String.valueOf(attrs.getIgnoreJTA()));
+        atts.addAttribute("", "", IGNORE_JTA, "", String.valueOf(attrs.getIgnoreJTA()));
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-           ((RegionAttributesCreation) attrs).hasIsLockGrantor())) {
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasIsLockGrantor())) {
-        atts.addAttribute("", "", IS_LOCK_GRANTOR, "",
-                          String.valueOf(attrs.isLockGrantor()));
+          atts.addAttribute("", "", IS_LOCK_GRANTOR, "", String.valueOf(attrs.isLockGrantor()));
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-           ((RegionAttributesCreation) attrs).hasPoolName())) {
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasPoolName())) {
-        atts.addAttribute("", "", POOL_NAME, "", cpVal);
+          atts.addAttribute("", "", POOL_NAME, "", cpVal);
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-          ((RegionAttributesCreation) attrs).hasDiskStoreName())) {
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasDiskStoreName())) {
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-          ((RegionAttributesCreation) attrs).hasDiskSynchronous())) {
-        if (generateDefaults() || attrs.isDiskSynchronous() != AttributesFactory.DEFAULT_DISK_SYNCHRONOUS)
-        atts.addAttribute("", "", DISK_SYNCHRONOUS, "", String.valueOf(attrs.isDiskSynchronous()));
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasDiskSynchronous())) {
+        if (generateDefaults()
+            || attrs.isDiskSynchronous() != AttributesFactory.DEFAULT_DISK_SYNCHRONOUS)
+          atts.addAttribute("", "", DISK_SYNCHRONOUS, "",
+              String.valueOf(attrs.isDiskSynchronous()));
-    if(this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) >= 0)
-      if ((!(attrs instanceof RegionAttributesCreation)||
-          ((RegionAttributesCreation) attrs).hasCloningEnabled())) {
+    if (this.version.compareTo(CacheXmlVersion.GEMFIRE_6_1) >= 0)
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasCloningEnabled())) {
-        atts.addAttribute("", "", CLONING_ENABLED, "",
-            String.valueOf(attrs.getCloningEnabled()));
-     }
-    
+          atts.addAttribute("", "", CLONING_ENABLED, "", String.valueOf(attrs.getCloningEnabled()));
+      }
+
-      if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs)
-          .hasGatewaySenderId())) {
-        Set<String> senderIds = new HashSet<String>(attrs
-            .getGatewaySenderIds());
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasGatewaySenderId())) {
+        Set<String> senderIds = new HashSet<String>(attrs.getGatewaySenderIds());
-        atts.addAttribute("", "", GATEWAY_SENDER_IDS, "", senderStringBuff.toString());
+          atts.addAttribute("", "", GATEWAY_SENDER_IDS, "", senderStringBuff.toString());
-    
+
-      if ((!(attrs instanceof RegionAttributesCreation) || ((RegionAttributesCreation)attrs)
-          .hasAsyncEventListeners())) {
-        Set<String> asyncEventQueueIds = new HashSet<String>(attrs
-            .getAsyncEventQueueIds());
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasAsyncEventListeners())) {
+        Set<String> asyncEventQueueIds = new HashSet<String>(attrs.getAsyncEventQueueIds());
-        atts.addAttribute("", "", ASYNC_EVENT_QUEUE_IDS, "", asyncEventQueueStringBuff.toString());
+          atts.addAttribute("", "", ASYNC_EVENT_QUEUE_IDS, "",
+              asyncEventQueueStringBuff.toString());
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-          ((RegionAttributesCreation) attrs).hasOffHeap())) {
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasOffHeap())) {
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasKeyConstraint())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasKeyConstraint())) {
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasValueConstraint())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasValueConstraint())) {
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasRegionTimeToLive())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasRegionTimeToLive())) {
-      generate(REGION_TIME_TO_LIVE, attrs.getRegionTimeToLive(), null);
+        generate(REGION_TIME_TO_LIVE, attrs.getRegionTimeToLive(), null);
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasRegionIdleTimeout())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasRegionIdleTimeout())) {
-      generate(REGION_IDLE_TIME, attrs.getRegionIdleTimeout(), null);
+        generate(REGION_IDLE_TIME, attrs.getRegionIdleTimeout(), null);
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasEntryTimeToLive()
-         || ((RegionAttributesCreation)attrs).hasCustomEntryTimeToLive())) {
-      if (generateDefaults() || !attrs.getEntryTimeToLive().equals(ExpirationAttributes.DEFAULT) || attrs.getCustomEntryTimeToLive() != null)
-      generate(ENTRY_TIME_TO_LIVE, attrs.getEntryTimeToLive(), 
-          attrs.getCustomEntryTimeToLive());
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasEntryTimeToLive()
+        || ((RegionAttributesCreation) attrs).hasCustomEntryTimeToLive())) {
+      if (generateDefaults() || !attrs.getEntryTimeToLive().equals(ExpirationAttributes.DEFAULT)
+          || attrs.getCustomEntryTimeToLive() != null)
+        generate(ENTRY_TIME_TO_LIVE, attrs.getEntryTimeToLive(), attrs.getCustomEntryTimeToLive());
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasEntryIdleTimeout()
-         || ((RegionAttributesCreation)attrs).hasCustomEntryIdleTimeout())) {
-      if (generateDefaults() || !attrs.getEntryIdleTimeout().equals(ExpirationAttributes.DEFAULT) || attrs.getCustomEntryIdleTimeout() != null)
-      generate(ENTRY_IDLE_TIME, attrs.getEntryIdleTimeout(), 
-          attrs.getCustomEntryIdleTimeout());
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasEntryIdleTimeout()
+        || ((RegionAttributesCreation) attrs).hasCustomEntryIdleTimeout())) {
+      if (generateDefaults() || !attrs.getEntryIdleTimeout().equals(ExpirationAttributes.DEFAULT)
+          || attrs.getCustomEntryIdleTimeout() != null)
+        generate(ENTRY_IDLE_TIME, attrs.getEntryIdleTimeout(), attrs.getCustomEntryIdleTimeout());
-    if (attrs.getDiskStoreName() == null && (generateDefaults() || this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) < 0)) {
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasDiskWriteAttributes())) {
-      generate(attrs.getDiskWriteAttributes());
-    }
-
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasDiskDirs())) {
-      File[] diskDirs = attrs.getDiskDirs();
-      int[] diskSizes = attrs.getDiskDirSizes();
-      if (diskDirs != null && diskDirs.length > 0) {
-        handler.startElement("", DISK_DIRS, DISK_DIRS, EMPTY);
-        for (int i = 0; i < diskDirs.length; i++) {
-          AttributesImpl diskAtts = new AttributesImpl();
-          if (diskSizes[i] != DiskStoreFactory.DEFAULT_DISK_DIR_SIZE) {
-            diskAtts.addAttribute("", "", DIR_SIZE, "", String
-                .valueOf(diskSizes[i]));
-          }
-          handler.startElement("", DISK_DIR, DISK_DIR, diskAtts);
-          File dir = diskDirs[i];
-          String name = generateDefaults() ? dir.getAbsolutePath() : dir.getPath();
-          handler.characters(name.toCharArray(), 0, name.length());
-          handler.endElement("", DISK_DIR, DISK_DIR);
-        }
-        handler.endElement("", DISK_DIRS, DISK_DIRS);
+    if (attrs.getDiskStoreName() == null
+        && (generateDefaults() || this.version.compareTo(CacheXmlVersion.GEMFIRE_6_5) < 0)) {
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasDiskWriteAttributes())) {
+        generate(attrs.getDiskWriteAttributes());
-    }
+
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasDiskDirs())) {
+        File[] diskDirs = attrs.getDiskDirs();
+        int[] diskSizes = attrs.getDiskDirSizes();
+        if (diskDirs != null && diskDirs.length > 0) {
+          handler.startElement("", DISK_DIRS, DISK_DIRS, EMPTY);
+          for (int i = 0; i < diskDirs.length; i++) {
+            AttributesImpl diskAtts = new AttributesImpl();
+            if (diskSizes[i] != DiskStoreFactory.DEFAULT_DISK_DIR_SIZE) {
+              diskAtts.addAttribute("", "", DIR_SIZE, "", String.valueOf(diskSizes[i]));
+            }
+            handler.startElement("", DISK_DIR, DISK_DIR, diskAtts);
+            File dir = diskDirs[i];
+            String name = generateDefaults() ? dir.getAbsolutePath() : dir.getPath();
+            handler.characters(name.toCharArray(), 0, name.length());
+            handler.endElement("", DISK_DIR, DISK_DIR);
+          }
+          handler.endElement("", DISK_DIRS, DISK_DIRS);
+        }
+      }
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-          ((RegionAttributesCreation) attrs).hasPartitionAttributes())) {
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasPartitionAttributes())) {
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-          ((RegionAttributesCreation) attrs).hasSubscriptionAttributes())) {
-       SubscriptionAttributes sa = attrs.getSubscriptionAttributes();
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasSubscriptionAttributes())) {
+        SubscriptionAttributes sa = attrs.getSubscriptionAttributes();
-          generate(sa);
+            generate(sa);
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-        ((RegionAttributesCreation) attrs).hasCacheWriter())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasCacheWriter())) {
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasCacheListeners())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasCacheListeners())) {
-      for (int i=0; i < listeners.length; i++) {
+      for (int i = 0; i < listeners.length; i++) {
-    
+
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-          ((RegionAttributesCreation) attrs).hasCompressor())) {
-       generate(COMPRESSOR, attrs.getCompressor());
+      if ((!(attrs instanceof RegionAttributesCreation)
+          || ((RegionAttributesCreation) attrs).hasCompressor())) {
+        generate(COMPRESSOR, attrs.getCompressor());
-    if ((!(attrs instanceof RegionAttributesCreation) ||
-         ((RegionAttributesCreation) attrs).hasEvictionAttributes())) {
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasEvictionAttributes())) {
-  private void generate(String kind, Object callback)
-    throws SAXException {
+  private void generate(String kind, Object callback) throws SAXException {
-    } else if (callback instanceof Declarable  && cache instanceof GemFireCacheImpl) {
+    } else if (callback instanceof Declarable && cache instanceof GemFireCacheImpl) {
-  
-  private void generate(String kind, Declarable d, Properties p)
-  throws SAXException {
+
+  private void generate(String kind, Declarable d, Properties p) throws SAXException {
-  private void generate(EvictionAttributes ea) throws SAXException
-  {
+  private void generate(EvictionAttributes ea) throws SAXException {
-    handler.startElement("", EVICTION_ATTRIBUTES,
-        EVICTION_ATTRIBUTES, EMPTY);
+    handler.startElement("", EVICTION_ATTRIBUTES, EVICTION_ATTRIBUTES, EMPTY);
-      atts.addAttribute("", "", MAXIMUM, "",
-          String.valueOf(ea.getMaximum()));
-      handler.startElement("", LRU_ENTRY_COUNT,
-          LRU_ENTRY_COUNT, atts);
+      atts.addAttribute("", "", MAXIMUM, "", String.valueOf(ea.getMaximum()));
+      handler.startElement("", LRU_ENTRY_COUNT, LRU_ENTRY_COUNT, atts);
-      atts.addAttribute("", "", MAXIMUM, "",
-          String.valueOf(ea.getMaximum()));
-      handler.startElement("", LRU_MEMORY_SIZE,
-          LRU_MEMORY_SIZE, atts);
+      atts.addAttribute("", "", MAXIMUM, "", String.valueOf(ea.getMaximum()));
+      handler.startElement("", LRU_MEMORY_SIZE, LRU_MEMORY_SIZE, atts);
-      handler.startElement("", LRU_HEAP_PERCENTAGE,
-          LRU_HEAP_PERCENTAGE, atts);
+      handler.startElement("", LRU_HEAP_PERCENTAGE, LRU_HEAP_PERCENTAGE, atts);
-    throws SAXException {
+      throws SAXException {
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_EXPIRATIONACTION_0.toLocalizedString(action));
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlGenerator_UNKNOWN_EXPIRATIONACTION_0.toLocalizedString(action));
-    handler.startElement("", EXPIRATION_ATTRIBUTES,
-                         EXPIRATION_ATTRIBUTES, atts);
+    handler.startElement("", EXPIRATION_ATTRIBUTES, EXPIRATION_ATTRIBUTES, atts);
-      generate((Declarable)custom, false);
+      generate((Declarable) custom, false);
-    handler.endElement("", EXPIRATION_ATTRIBUTES,
-                       EXPIRATION_ATTRIBUTES);
+    handler.endElement("", EXPIRATION_ATTRIBUTES, EXPIRATION_ATTRIBUTES);
-  private void generate(SubscriptionAttributes attrs)
-    throws SAXException {
+  private void generate(SubscriptionAttributes attrs) throws SAXException {
-      throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_INTERESTPOLICY_0.toLocalizedString(ip));
+      throw new InternalGemFireException(
+          LocalizedStrings.CacheXmlGenerator_UNKNOWN_INTERESTPOLICY_0.toLocalizedString(ip));
-    handler.startElement("", SUBSCRIPTION_ATTRIBUTES,
-                         SUBSCRIPTION_ATTRIBUTES, atts);
-    handler.endElement("", SUBSCRIPTION_ATTRIBUTES,
-                       SUBSCRIPTION_ATTRIBUTES);
+    handler.startElement("", SUBSCRIPTION_ATTRIBUTES, SUBSCRIPTION_ATTRIBUTES, atts);
+    handler.endElement("", SUBSCRIPTION_ATTRIBUTES, SUBSCRIPTION_ATTRIBUTES);
-    atts.addAttribute("", "", PARTITION_REDUNDANT_COPIES, "",
-        String.valueOf(pa.getRedundantCopies()));
-    
+      atts.addAttribute("", "", PARTITION_REDUNDANT_COPIES, "",
+          String.valueOf(pa.getRedundantCopies()));
+
-      if (generateDefaults() || pa.getLocalMaxMemory() != ((PartitionAttributesImpl) pa).getLocalMaxMemoryDefault())
-      atts.addAttribute("", "", LOCAL_MAX_MEMORY, "",
-          String.valueOf(pa.getLocalMaxMemory()));
-      if (generateDefaults() || pa.getTotalMaxMemory() != PartitionAttributesFactory.GLOBAL_MAX_MEMORY_DEFAULT)
-      atts.addAttribute("", "", TOTAL_MAX_MEMORY, "",
-          String.valueOf(pa.getTotalMaxMemory()));
-      if (generateDefaults() || pa.getTotalNumBuckets() != PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT)
-      atts.addAttribute("", "", TOTAL_NUM_BUCKETS, "",
-          String.valueOf(pa.getTotalNumBuckets()));
+      if (generateDefaults()
+          || pa.getLocalMaxMemory() != ((PartitionAttributesImpl) pa).getLocalMaxMemoryDefault())
+        atts.addAttribute("", "", LOCAL_MAX_MEMORY, "", String.valueOf(pa.getLocalMaxMemory()));
+      if (generateDefaults()
+          || pa.getTotalMaxMemory() != PartitionAttributesFactory.GLOBAL_MAX_MEMORY_DEFAULT)
+        atts.addAttribute("", "", TOTAL_MAX_MEMORY, "", String.valueOf(pa.getTotalMaxMemory()));
+      if (generateDefaults()
+          || pa.getTotalNumBuckets() != PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT)
+        atts.addAttribute("", "", TOTAL_NUM_BUCKETS, "", String.valueOf(pa.getTotalNumBuckets()));
-    
+
-      if(pa.getColocatedWith() != null)
-        atts.addAttribute("", "", PARTITION_COLOCATED_WITH, "",
-            pa.getColocatedWith());
-      
+      if (pa.getColocatedWith() != null)
+        atts.addAttribute("", "", PARTITION_COLOCATED_WITH, "", pa.getColocatedWith());
+
-      if (generateDefaults() || pa.getRecoveryDelay() != PartitionAttributesFactory.RECOVERY_DELAY_DEFAULT)
-        atts.addAttribute("", "", RECOVERY_DELAY, "",
-            String.valueOf(pa.getRecoveryDelay()));
-      if (generateDefaults() || pa.getStartupRecoveryDelay() != PartitionAttributesFactory.STARTUP_RECOVERY_DELAY_DEFAULT)
+      if (generateDefaults()
+          || pa.getRecoveryDelay() != PartitionAttributesFactory.RECOVERY_DELAY_DEFAULT)
+        atts.addAttribute("", "", RECOVERY_DELAY, "", String.valueOf(pa.getRecoveryDelay()));
+      if (generateDefaults() || pa
+          .getStartupRecoveryDelay() != PartitionAttributesFactory.STARTUP_RECOVERY_DELAY_DEFAULT)
-    
-    if (!generateDefaults() && atts.getLength() == 0
-        && pa.getPartitionResolver() == null
-        && pa.getPartitionListeners().length == 0
-        && (pa.getFixedPartitionAttributes() == null || pa.getFixedPartitionAttributes().isEmpty())) {
+
+    if (!generateDefaults() && atts.getLength() == 0 && pa.getPartitionResolver() == null
+        && pa.getPartitionListeners().length == 0 && (pa.getFixedPartitionAttributes() == null
+            || pa.getFixedPartitionAttributes().isEmpty())) {
-    
-    handler.startElement("", PARTITION_ATTRIBUTES,
-                           PARTITION_ATTRIBUTES, atts);
-    
+
+    handler.startElement("", PARTITION_ATTRIBUTES, PARTITION_ATTRIBUTES, atts);
+
-        generate(PARTITION_RESOLVER, rr);        
+        generate(PARTITION_RESOLVER, rr);
-    
+
-    }   
+    }
-      List<FixedPartitionAttributes> staticAttrs = pa
-          .getFixedPartitionAttributes();
+      List<FixedPartitionAttributes> staticAttrs = pa.getFixedPartitionAttributes();
-  
+
-    private void generate(String kind, PartitionResolver rr) throws SAXException {
+  private void generate(String kind, PartitionResolver rr) throws SAXException {
-    
+
-  } 
-    
+  }
+
-      props = ((Declarable2)pl).getConfig();
+      props = ((Declarable2) pl).getConfig();
-  }   
+  }
-/**
+  /**
-      sAtts.addAttribute("", "", IS_PRIMARY, "", String.valueOf(attr
-          .isPrimary()));
-      sAtts.addAttribute("", "", NUM_BUCKETS, "", String.valueOf(attr
-          .getNumBuckets()));
+      sAtts.addAttribute("", "", IS_PRIMARY, "", String.valueOf(attr.isPrimary()));
+      sAtts.addAttribute("", "", NUM_BUCKETS, "", String.valueOf(attr.getNumBuckets()));
-      handler.endElement("", kind,kind);      
-    }    
-  }  
+      handler.endElement("", kind, kind);
+    }
+  }
-      
+
-    }
-    else {
+    } else {
-        atts.addAttribute("", "", ROLL_OPLOG, "",
-                          String.valueOf(dwa.isRollOplogs()));
+        atts.addAttribute("", "", ROLL_OPLOG, "", String.valueOf(dwa.isRollOplogs()));
-      handler.startElement("", DISK_WRITE_ATTRIBUTES, DISK_WRITE_ATTRIBUTES,
-          atts);
+      handler.startElement("", DISK_WRITE_ATTRIBUTES, DISK_WRITE_ATTRIBUTES, atts);
-      handler.startElement("", SYNCHRONOUS_WRITES, SYNCHRONOUS_WRITES,
-                           EMPTY);
+      handler.startElement("", SYNCHRONOUS_WRITES, SYNCHRONOUS_WRITES, EMPTY);
-      if (dwa.getTimeInterval()!= -1) {
-      atts.addAttribute("", "", TIME_INTERVAL, "",
-                        String.valueOf(dwa.getTimeInterval()));
+      if (dwa.getTimeInterval() != -1) {
+        atts.addAttribute("", "", TIME_INTERVAL, "", String.valueOf(dwa.getTimeInterval()));
-      atts.addAttribute("", "", BYTES_THRESHOLD, "",
-                        String.valueOf(dwa.getBytesThreshold()));
+      atts.addAttribute("", "", BYTES_THRESHOLD, "", String.valueOf(dwa.getBytesThreshold()));
-    handler.endElement("", DISK_WRITE_ATTRIBUTES,
-                       DISK_WRITE_ATTRIBUTES);
+    handler.endElement("", DISK_WRITE_ATTRIBUTES, DISK_WRITE_ATTRIBUTES);
-    String laction =
-      ra.getLossAction().toString().toLowerCase().replace('_', '-');
-    String raction =
-      ra.getResumptionAction().toString().toLowerCase().replace('_', '-');
+    String laction = ra.getLossAction().toString().toLowerCase().replace('_', '-');
+    String raction = ra.getResumptionAction().toString().toLowerCase().replace('_', '-');
-    handler.startElement("", MEMBERSHIP_ATTRIBUTES,
-                         MEMBERSHIP_ATTRIBUTES, raAtts);
+    handler.startElement("", MEMBERSHIP_ATTRIBUTES, MEMBERSHIP_ATTRIBUTES, raAtts);
-   * Generates XML for a <code>Declarable</code>.  Will handle the
-   * config <code>Properties</code> for a {@link Declarable2}.
+   * Generates XML for a <code>Declarable</code>. Will handle the config <code>Properties</code> for
+   * a {@link Declarable2}.
+
-//      for (Iterator iter = props.entrySet().iterator();
-//           iter.hasNext(); ) {
-//        Map.Entry entry = (Map.Entry) iter.next();
-//        String name = (String) entry.getKey();
-//        Object value = entry.getValue();
-//
-//        AttributesImpl atts = new AttributesImpl();
-//        atts.addAttribute("", "", NAME, "", name);
-//
-//        handler.startElement("", PARAMETER, PARAMETER, atts);
-//
-//        if (value instanceof String) {
-//          generate((String) value);
-//
-//        } else if (value instanceof Declarable) {
-//          generate((Declarable) value);
-//
-//        } else {
-//          // Ignore it
-//        }
-//
-//        handler.endElement("", PARAMETER, PARAMETER);
-//      }
+      // for (Iterator iter = props.entrySet().iterator();
+      // iter.hasNext(); ) {
+      // Map.Entry entry = (Map.Entry) iter.next();
+      // String name = (String) entry.getKey();
+      // Object value = entry.getValue();
+      //
+      // AttributesImpl atts = new AttributesImpl();
+      // atts.addAttribute("", "", NAME, "", name);
+      //
+      // handler.startElement("", PARAMETER, PARAMETER, atts);
+      //
+      // if (value instanceof String) {
+      // generate((String) value);
+      //
+      // } else if (value instanceof Declarable) {
+      // generate((Declarable) value);
+      //
+      // } else {
+      // // Ignore it
+      // }
+      //
+      // handler.endElement("", PARAMETER, PARAMETER);
+      // }
-   * @param element
-   *        The kind of element to generate (KEY_CONSTRAINT or
-   *        VALUE_CONSTRAINT).
+   * @param element The kind of element to generate (KEY_CONSTRAINT or VALUE_CONSTRAINT).
-   * Generates XML for an arbitrary object.  It special cases {@link
-   * String}s and {@link Declarable}s.
+   * Generates XML for an arbitrary object. It special cases {@link String}s and
+   * {@link Declarable}s.
-    for (Iterator iter = props.entrySet().iterator();
-    iter.hasNext(); ) {
+    for (Iterator iter = props.entrySet().iterator(); iter.hasNext();) {
-  
+
-  //////////  Inherited methods that don't do anything  //////////
+  ////////// Inherited methods that don't do anything //////////
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+      throws SAXNotRecognizedException, SAXNotSupportedException {
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+      throws SAXNotRecognizedException, SAXNotSupportedException {
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+      throws SAXNotRecognizedException, SAXNotSupportedException {
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+      throws SAXNotRecognizedException, SAXNotSupportedException {
-  public void parse(String systemId)
-    throws IOException, SAXException {
+  public void parse(String systemId) throws IOException, SAXException {
-   * Used by gemfire build.xml to generate a default gemfire.properties
-   * for use by applications. See bug 30995 for the feature request.
+   * Used by gemfire build.xml to generate a default gemfire.properties for use by applications. See
+   * bug 30995 for the feature request.
-    
+

UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66