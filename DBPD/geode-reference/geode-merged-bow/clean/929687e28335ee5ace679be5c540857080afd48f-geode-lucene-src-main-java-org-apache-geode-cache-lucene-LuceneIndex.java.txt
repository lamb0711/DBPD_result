GEODE-269 : Resolving conflicts with develop.

-import org.apache.geode.annotations.Experimental;
-
- * An Lucene index is built over the data stored in a GemFire Region.
+ * LuceneIndex represents the Lucene index created over the data stored in Apache Geode regions. The
+ * Lucene indexes are maintained automatically by Apache Geode whenever the entries are updated in
+ * the associated regions. Lucene Indexes are created using {@link LuceneService#createIndexFactory}
+ * by specifying the Lucene index name, the region associated with the Lucene index and the fields
+ * on which the Lucene index is to be created.
+ *
- * An index is specified using a index name, field names, region name.
+ * Every Lucene index is uniquely identified by the index name and the name of the region associated
+ * with it. To obtain the LuceneIndex created over a region use
+ * {@link LuceneService#getIndex(String, String)}
- * The index name and region name together uniquely identifies the Lucene index.
- * 
+ *
+ * <p>
+ * LuceneIndexes are created using gfsh, xml, or the Java API using LuceneService
+ * {@link LuceneService#createIndexFactory}. More information about LuceneIndex can be found at
+ * {@link LuceneService}
+ * </p>
-@Experimental
-   * @return the name of this index
+   * Returns the name of the LuceneIndex object. This name is provided while creating the
+   * LuceneIndex using {@link LuceneService#createIndexFactory()} create method
+   *
+   * @return Name of the LuceneIndex
-   * @return the name of the region that is being indexed
+   * Returns the path of the region on which the LuceneIndex was created. The region name is
+   * provided while creating the LuceneIndex using {@link LuceneService#createIndexFactory()}
+   *
+   * @return Path of the region
-   * @return the indexed field names
+   * Returns a string array containing the fields on which the LuceneIndex was created. These fields
+   * are assigned using the addField method while creating the LuceneIndex using
+   * {@link LuceneService#createIndexFactory()}
+   *
+   * @return String array containing the field names
-   * @return a map of what {@link Analyzer} is being used for each indexed field.
+   * Returns a map containing the field name and the {@link Analyzer} used to tokenize the field.
+   * The analyzer to be used on a particular field is set in the addField method while creating the
+   * LuceneIndex using {@link LuceneService#createIndexFactory()}
+   *
+   * @return a map containing pairs of the indexed field name and the corresponding {@link Analyzer}
+   *         being used on each indexed field.

MOV43 MOV43 UPD66 INS66 INS66 INS65 INS66 INS66 UPD66 INS66 INS65 INS66 INS66 INS65 UPD66 INS65 INS66 INS65 INS65 INS65 INS65 INS67 INS68 INS67 INS42 INS66 INS66 INS65 INS66 UPD66 INS66 INS66 INS65 UPD66 INS66 INS66 INS65 UPD66 INS66 MOV65 INS66 INS66 INS66 INS65 UPD66 INS65 UPD66 INS42 INS42 INS42 INS42 INS69 INS69 INS42 INS42 INS68 INS68 INS68 INS68 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL78