GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

- * <code>Instantiator</code> allows classes that implement {@link DataSerializable} to be registered
- * with the data serialization framework. Knowledge of <code>DataSerializable</code> classes allows
- * the framework to optimize how instances of those classes are data serialized.
+ * {@code Instantiator} allows classes that implement {@link DataSerializable} to be registered with
+ * the data serialization framework. Knowledge of {@code DataSerializable} classes allows the
+ * framework to optimize how instances of those classes are data serialized.
- * Ordinarily, when a <code>DataSerializable</code> object is written using
+ * Ordinarily, when a {@code DataSerializable} object is written using
- * written to the stream followed by the class name of the <code>DataSerializable</code> object.
- * After the marker class id is read by {@link DataSerializer#readObject} it performs the following
+ * written to the stream followed by the class name of the {@code DataSerializable} object. After
+ * the marker class id is read by {@link DataSerializer#readObject} it performs the following
- * However, if a <code>DataSerializable</code> class is {@linkplain #register(Instantiator)
- * registered} with the data serialization framework and assigned a unique class id, an important
- * optimization can be performed that avoid the expense of using reflection to instantiate the
- * <code>DataSerializable</code> class. When the object is written using
+ * However, if a {@code DataSerializable} class is {@linkplain #register(Instantiator) registered}
+ * with the data serialization framework and assigned a unique class id, an important optimization
+ * can be performed that avoid the expense of using reflection to instantiate the
+ * {@code DataSerializable} class. When the object is written using
- * {@link #newInstance} method of the appropriate <code>Instantiator</code> instance is invoked to
- * create an "empty" instance of the <code>DataSerializable</code> instead of using reflection to
- * create the new instance.
+ * {@link #newInstance} method of the appropriate {@code Instantiator} instance is invoked to create
+ * an "empty" instance of the {@code DataSerializable} instead of using reflection to create the new
+ * instance.
- * Commonly, a <code>DataSerializable</code> class will register itself with the
- * <code>Instantiator</code> in a static initializer as shown in the below example code.
- *
- * <!-- The source code for the CompanySerializer class resides in tests/com/examples/ds/User.java
- * Please keep the below code snippet in sync with that file. -->
+ * Commonly, a {@code DataSerializable} class will register itself with the {@code Instantiator} in
+ * a static initializer as shown in the below example code.
- * <code>Instantiator</code>s may be distributed to other members of the distributed system when
- * they are registered. Consider the following scenario in which VM1 and VM2 are members of the same
+ * {@code Instantiator}s may be distributed to other members of the distributed system when they are
+ * registered. Consider the following scenario in which VM1 and VM2 are members of the same
- * VM1's using replication. VM1 puts an instance of the above <code>User</code> class into the
- * region. The act of instantiating <code>User</code> will load the <code>User</code> class and
- * invoke its static initializer, thus registering the <code>Instantiator</code> with the data
- * serialization framework. Because the region is a replicate, the <code>User</code> will be data
- * serialized and sent to VM2. However, when VM2 attempts to data deserialize the <code>User</code>,
- * its <code>Instantiator</code> will not necessarily be registered because <code>User</code>'s
- * static initializer may not have been invoked yet. As a result, an exception would be logged while
- * deserializing the <code>User</code> and the replicate would not appear to have the new value. So,
- * in order to ensure that the <code>Instantiator</code> is registered in VM2, the data
- * serialization framework distributes a message to each member when an <code>Instantiator</code> is
- * {@linkplain #register(Instantiator) registered}.
+ * VM1's using replication. VM1 puts an instance of the above {@code User} class into the region.
+ * The act of instantiating {@code User} will load the {@code User} class and invoke its static
+ * initializer, thus registering the {@code Instantiator} with the data serialization framework.
+ * Because the region is a replicate, the {@code User} will be data serialized and sent to VM2.
+ * However, when VM2 attempts to data deserialize the {@code User}, its {@code Instantiator} will
+ * not necessarily be registered because {@code User}'s static initializer may not have been invoked
+ * yet. As a result, an exception would be logged while deserializing the {@code User} and the
+ * replicate would not appear to have the new value. So, in order to ensure that the
+ * {@code Instantiator} is registered in VM2, the data serialization framework distributes a message
+ * to each member when an {@code Instantiator} is {@linkplain #register(Instantiator) registered}.
- * Note that the framework does not require that an <code>Instantiator</code> be
+ * Note that the framework does not require that an {@code Instantiator} be
-  /** The id of this <code>Instantiator</code> */
+  /** The id of this {@code Instantiator} */
-  /** The eventId of this <code>Instantiator</code> */
+  /** The eventId of this {@code Instantiator} */
-  /** The originator of this <code>Instantiator</code> */
+  /** The originator of this {@code Instantiator} */
-   * Registers a <code>DataSerializable</code> class with the data serialization framework. This
-   * method is usually invoked from the static initializer of a class that implements
-   * <code>DataSerializable</code>.
+   * Registers a {@code DataSerializable} class with the data serialization framework. This method
+   * is usually invoked from the static initializer of a class that implements
+   * {@code DataSerializable}.
-   * @param instantiator An <code>Instantiator</code> whose {@link #newInstance} method is invoked
-   *        when an object is data deserialized.
+   * @param instantiator An {@code Instantiator} whose {@link #newInstance} method is invoked when
+   *        an object is data deserialized.
-   * @throws IllegalStateException If class <code>c</code> is already registered with a different
-   *         class id, or another class has already been registered with id <code>classId</code>
-   * @throws NullPointerException If <code>instantiator</code> is <code>null</code>.
+   * @throws IllegalStateException If class {@code c} is already registered with a different class
+   *         id, or another class has already been registered with id {@code classId}
+   * @throws NullPointerException If {@code instantiator} is {@code null}.
-   * Registers a <code>DataSerializable</code> class with the data serialization framework. This
-   * method is usually invoked from the static initializer of a class that implements
-   * <code>DataSerializable</code>.
+   * Registers a {@code DataSerializable} class with the data serialization framework. This method
+   * is usually invoked from the static initializer of a class that implements
+   * {@code DataSerializable}.
-   * @param instantiator An <code>Instantiator</code> whose {@link #newInstance} method is invoked
-   *        when an object is data deserialized.
+   * @param instantiator An {@code Instantiator} whose {@link #newInstance} method is invoked when
+   *        an object is data deserialized.
-   * @param distribute True if the registered <code>Instantiator</code> has to be distributed to
-   *        other members of the distributed system. Note that if distribute is set to false it may
-   *        still be distributed in some cases.
+   * @param distribute True if the registered {@code Instantiator} has to be distributed to other
+   *        members of the distributed system. Note that if distribute is set to false it may still
+   *        be distributed in some cases.
-   * @throws IllegalArgumentException If class <code>c</code> is already registered with a different
-   *         class id, or another class has already been registered with id <code>classId</code>
-   * @throws NullPointerException If <code>instantiator</code> is <code>null</code>.
+   * @throws IllegalArgumentException If class {@code c} is already registered with a different
+   *         class id, or another class has already been registered with id {@code classId}
+   * @throws NullPointerException If {@code instantiator} is {@code null}.
+  @Deprecated
-   * Creates a new <code>Instantiator</code> that instantiates a given class.
+   * Creates a new {@code Instantiator} that instantiates a given class.
-   * @param c The <code>DataSerializable</code> class to register. This class must have a static
-   *        initializer that registers this <code>Instantiator</code>.
-   * @param classId A unique id for class <code>c</code>. The <code>classId</code> must not be zero.
-   *        This has been an <code>int</code> since dsPhase1.
+   * @param c The {@code DataSerializable} class to register. This class must have a static
+   *        initializer that registers this {@code Instantiator}.
+   * @param classId A unique id for class {@code c}. The {@code classId} must not be zero. This has
+   *        been an {@code int} since dsPhase1.
-   * @throws IllegalArgumentException If <code>c</code> does not implement
-   *         <code>DataSerializable</code>, <code>classId</code> is less than or equal to zero.
-   * @throws NullPointerException If <code>c</code> is <code>null</code>
+   * @throws IllegalArgumentException If {@code c} does not implement {@code DataSerializable},
+   *         {@code classId} is less than or equal to zero.
+   * @throws NullPointerException If {@code c} is {@code null}
-      throw new IllegalArgumentException(LocalizedStrings.Instantiator_CLASS_ID_0_MUST_NOT_BE_0
-          .toLocalizedString(Integer.valueOf(classId)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.Instantiator_CLASS_ID_0_MUST_NOT_BE_0.toLocalizedString(classId));
-   * Creates a new "empty" instance of a <Code>DataSerializable</code> class whose state will be
-   * filled in by invoking its {@link DataSerializable#fromData fromData} method.
+   * Creates a new "empty" instance of a {@code DataSerializable} class whose state will be filled
+   * in by invoking its {@link DataSerializable#fromData fromData} method.
-   * Returns the <code>DataSerializable</code> class that is instantiated by this
-   * <code>Instantiator</code>.
+   * Returns the {@code DataSerializable} class that is instantiated by this {@code Instantiator}.
-   * Returns the unique <code>id</code> of this <code>Instantiator</code>.
+   * Returns the unique {@code id} of this {@code Instantiator}.
-   * sets the unique <code>eventId</code> of this <code>Instantiator</code>. For internal use only.
+   * sets the unique {@code eventId} of this {@code Instantiator}. For internal use only.
-   * Returns the unique <code>eventId</code> of this <code>Instantiator</code>. For internal use
-   * only.
+   * Returns the unique {@code eventId} of this {@code Instantiator}. For internal use only.
-   * sets the context of this <code>Instantiator</code>. For internal use only.
+   * sets the context of this {@code Instantiator}. For internal use only.
-   * Returns the context of this <code>Instantiator</code>. For internal use only.
+   * Returns the context of this {@code Instantiator}. For internal use only.

INS78 INS65 UPD66 UPD66 UPD66 INS65 INS66 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 UPD66 UPD66 INS65 INS66 UPD66 UPD66 INS65 UPD66 UPD66 INS65 INS66 INS66 INS65 UPD66 UPD66 INS66 INS65 UPD66 INS65 UPD66 UPD66 INS65 UPD66 UPD66 UPD66 INS65 INS66 UPD66 INS65 INS66 INS65 INS66 UPD66 INS65 INS66 UPD66 INS65 INS66 UPD66 INS65 INS66 INS65 INS66 UPD66 INS65 INS66 UPD66 INS65 INS66 UPD66 INS65 UPD66 INS66 INS65 INS66 UPD66 INS65 INS66 INS42 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 MOV66 INS66 INS66 UPD66 INS65 INS66 UPD66 INS65 INS66 UPD66 INS65 INS66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS66 INS65 INS66 MOV65 UPD66 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS66 INS65 INS66 MOV65 UPD66 UPD66 UPD66 INS65 INS66 UPD66 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS65 INS66 INS65 INS66 INS66 INS65 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 UPD66 INS65 INS66 INS65 INS66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS65 INS66 INS65 UPD66 UPD66 INS65 INS66 INS65 UPD66 INS65 INS66 UPD66 INS66 INS65 UPD66 INS65 INS66 UPD66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS65 UPD66 UPD66 INS65 INS66 INS65 UPD66 UPD66 INS65 INS66 UPD66 INS65 INS66 INS66 INS66 INS66 INS66 UPD66 MOV66 UPD66 MOV66 INS66 INS66 UPD66 MOV66 INS66 INS66 UPD66 MOV66 UPD66 MOV66 INS66 INS66 INS66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 MOV66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 MOV42 DEL42 DEL42 DEL32