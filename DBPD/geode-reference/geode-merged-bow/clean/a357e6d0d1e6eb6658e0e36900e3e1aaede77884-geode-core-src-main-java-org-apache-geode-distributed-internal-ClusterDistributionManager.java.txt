GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)

* GEODE-7556: remove membership dependencies on geode-core exeptions

Removed use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.

Except for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.

MemberShunnedException is now in the membership module instead of the TcpConduit module. It, too, is a checked exception.

CancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.

Several tests had to be modified to handle our stress-test environement.

* use checkCancelled method

+import java.util.ArrayList;
+   * Membership failure listeners - for testing
+   */
+  private List<MembershipTestHook> membershipTestHooks;
+
+
+  /**
-      getSystem().disconnect(reason, true);
+      if (rootCause != null && !(rootCause instanceof ForcedDisconnectException)) {
+        logger.info("cluster membership failed due to ", rootCause);
+        rootCause = new ForcedDisconnectException(rootCause.getMessage());
+      }
+      try {
+        if (membershipTestHooks != null) {
+          List<MembershipTestHook> l = membershipTestHooks;
+          for (final MembershipTestHook aL : l) {
+            MembershipTestHook dml = aL;
+            dml.beforeMembershipFailure(reason, rootCause);
+          }
+        }
+        getSystem().disconnect(reason, true);
+        if (membershipTestHooks != null) {
+          List<MembershipTestHook> l = membershipTestHooks;
+          for (final MembershipTestHook aL : l) {
+            MembershipTestHook dml = aL;
+            dml.afterMembershipFailure(reason, rootCause);
+          }
+        }
+      } catch (RuntimeException re) {
+        logger.warn("Exception caught while shutting down", re);
+      }
-      dm.addNewMember(member);
+      try {
+        dm.addNewMember(member);
+      } catch (VirtualMachineError err) {
+        // If this ever returns, rethrow the error. We're poisoned
+        // now, so don't let this thread continue.
+        throw err;
+      } catch (DistributedSystemDisconnectedException e) {
+        // don't log shutdown exceptions
+      } catch (Throwable t) {
+        logger.info(String.format("Membership: Fault while processing view addition of %s",
+            member),
+            t);
+      }
-      boolean wasAdmin = getAdminMemberSet().contains(theId);
-      if (wasAdmin) {
-        // Pretend we received an AdminConsoleDisconnectMessage from the console that
-        // is no longer in the JavaGroup view.
-        // It must have died without sending a ShutdownMessage.
-        // This fixes bug 28454.
-        AdminConsoleDisconnectMessage message = new AdminConsoleDisconnectMessage();
-        message.setSender(theId);
-        message.setCrashed(crashed);
-        message.setAlertListenerExpected(true);
-        message.setIgnoreAlertListenerRemovalFailure(true); // we don't know if it was a listener so
-                                                            // don't issue a warning
-        message.setRecipient(localAddress);
-        message.setReason(reason); // added for #37950
-        handleIncomingDMsg(message);
+      try {
+        boolean wasAdmin = getAdminMemberSet().contains(theId);
+        if (wasAdmin) {
+          // Pretend we received an AdminConsoleDisconnectMessage from the console that
+          // is no longer in the JavaGroup view.
+          // It must have died without sending a ShutdownMessage.
+          // This fixes bug 28454.
+          AdminConsoleDisconnectMessage message = new AdminConsoleDisconnectMessage();
+          message.setSender(theId);
+          message.setCrashed(crashed);
+          message.setAlertListenerExpected(true);
+          message.setIgnoreAlertListenerRemovalFailure(true); // we don't know if it was a listener
+                                                              // so
+          // don't issue a warning
+          message.setRecipient(localAddress);
+          message.setReason(reason); // added for #37950
+          handleIncomingDMsg(message);
+        }
+        dm.handleManagerDeparture(theId, crashed, reason);
+      } catch (DistributedSystemDisconnectedException se) {
+        // let's not get huffy about it
-      dm.handleManagerDeparture(theId, crashed, reason);
-      dm.handleManagerSuspect(suspect, whoSuspected, reason);
+      try {
+        dm.handleManagerSuspect(suspect, whoSuspected, reason);
+      } catch (DistributedSystemDisconnectedException se) {
+        // let's not get huffy about it
+      }
-      dm.handleViewInstalled(view);
+      try {
+        dm.handleViewInstalled(view);
+      } catch (DistributedSystemDisconnectedException se) {
+      }
+  @Override
+  public void registerTestHook(MembershipTestHook mth) {
+    this.getDistribution().doWithViewLocked(() -> {
+      if (this.membershipTestHooks == null) {
+        this.membershipTestHooks = Collections.singletonList(mth);
+      } else {
+        List<MembershipTestHook> l = new ArrayList<>(this.membershipTestHooks);
+        l.add(mth);
+        this.membershipTestHooks = l;
+      }
+      return null;
+    });
+  }
+
+  @Override
+  public void unregisterTestHook(MembershipTestHook mth) {
+    this.getDistribution().doWithViewLocked(() -> {
+      if (this.membershipTestHooks != null) {
+        if (this.membershipTestHooks.size() == 1) {
+          this.membershipTestHooks = null;
+        } else {
+          List<MembershipTestHook> l = new ArrayList<>(this.membershipTestHooks);
+          l.remove(mth);
+          this.membershipTestHooks = l;
+        }
+      }
+      return null;
+    });
+  }
+

INS26 INS40 INS23 INS31 INS31 INS29 INS83 INS74 INS59 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS65 INS43 INS43 INS42 INS8 INS8 INS8 INS8 INS8 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS21 INS66 INS42 INS42 MOV21 MOV21 INS25 INS54 INS54 INS54 INS54 INS54 INS42 INS32 INS42 INS32 INS27 INS8 INS8 INS12 MOV8 INS12 INS12 INS12 MOV8 INS12 MOV8 INS12 MOV8 INS12 INS32 INS42 INS86 INS32 INS42 INS86 INS27 INS38 INS21 INS21 INS25 MOV21 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS52 INS42 INS8 INS52 INS42 INS8 INS42 INS33 INS36 INS32 INS7 INS27 INS8 INS27 INS8 INS43 INS42 INS21 INS43 INS42 INS53 INS43 INS42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS41 INS25 INS41 INS62 INS42 INS42 INS45 INS42 INS42 INS14 INS42 INS33 INS60 INS70 INS42 INS33 INS60 INS70 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS8 INS8 INS33 INS27 INS8 INS33 INS42 INS43 INS43 INS32 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS22 INS33 INS21 INS60 INS21 INS21 INS22 INS33 INS25 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS83 INS43 INS42 INS60 INS21 INS43 INS43 INS42 INS42 INS83 INS43 INS42 INS60 INS21 INS42 INS42 INS45 INS42 INS52 INS42 INS7 INS74 INS59 INS32 INS7 INS52 INS42 INS27 INS8 INS8 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS43 INS59 INS32 INS22 INS32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS22 INS42 INS32 INS34 INS21 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS22 INS52 INS42 INS22 INS42 INS7 INS74 INS59 INS32 INS7 INS43 INS52 INS42 INS52 INS42 INS22 INS33 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS22 INS42 INS42 INS52 INS42 INS42 INS42 INS74 INS22 INS52 INS42 INS43 INS52 INS42 INS42 DEL8