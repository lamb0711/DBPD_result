GEODE-8175: remove unsupported redis commands (#5146)

Removed list and zset commands.
Removed redis HyperLog commands.
Removed redis transaction commands.
-      throwDataTypeException(key, existingValue);
+      throwDataTypeException();
-  private static final RedisDataTransformer REDIS_SORTEDSET_DATA =
-      new RedisDataTransformer(RedisDataType.REDIS_SORTEDSET);
-  private static final RedisDataTransformer REDIS_LIST_DATA =
-      new RedisDataTransformer(RedisDataType.REDIS_LIST);
-  private static final RedisDataTransformer REDIS_PROTECTED_DATA =
-      new RedisDataTransformer(RedisDataType.REDIS_PROTECTED);
-  private static final RedisDataTransformer REDIS_HLL_DATA =
-      new RedisDataTransformer(RedisDataType.REDIS_HLL);
-      case REDIS_SORTEDSET:
-        return REDIS_SORTEDSET_DATA;
-      case REDIS_LIST:
-        return REDIS_LIST_DATA;
-      case REDIS_PROTECTED:
-        return REDIS_PROTECTED_DATA;
-      case REDIS_HLL:
-        return REDIS_HLL_DATA;
-    return this.redisDataRegion.size() - GeodeRedisServer.PROTECTED_KEY_COUNT;
+    return this.redisDataRegion.size();
-        throwDataTypeException(key, currentType);
+        throwDataTypeException();
-  /**
-   * Checks if the given key is a protected string in GeodeRedis
-   *
-   * @param key Key to check
-   */
-  public boolean isProtected(ByteArrayWrapper key) {
-    RedisData redisData = redisDataRegion.get(key);
-    if (redisData == null) {
-      return false;
-    }
-    return RedisDataType.REDIS_PROTECTED.equals(redisData.getType());
-  }
-
-  private void throwDataTypeException(ByteArrayWrapper key, RedisData data) {
-    throwDataTypeException(key, data.getType());
-  }
-
-  private void throwDataTypeException(ByteArrayWrapper key, RedisDataType dataType) {
-    if (RedisDataType.REDIS_PROTECTED.equals(dataType)) {
-      throw new RedisDataTypeMismatchException("The key name \"" + key + "\" is protected");
-    } else {
-      throw new RedisDataTypeMismatchException(
-          RedisConstants.ERROR_WRONG_TYPE);
-    }
+  private void throwDataTypeException() {
+    throw new RedisDataTypeMismatchException(RedisConstants.ERROR_WRONG_TYPE);

MOV8 MOV49 MOV32 DEL42 DEL42 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL23 DEL42 DEL41 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL42 DEL41 DEL42 DEL49 DEL40 DEL27 DEL42 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL9 DEL41 DEL8 DEL25 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31