Merge branch 'release/1.0.0-incubating.M1'

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import java.util.concurrent.TimeUnit;
-public final class FileProcessController implements ProcessController {
+public class FileProcessController implements ProcessController {
-  private final long statusTimeout = Long.getLong(STATUS_TIMEOUT_PROPERTY, 60*1000);
+  private final long statusTimeoutMillis;
-   * @param pid process id identifying the process to attach to
+   * @param arguments details about the controllable process
+   * @param pid process id identifying the process to control
+    this(arguments, pid, Long.getLong(STATUS_TIMEOUT_PROPERTY, 60*1000), TimeUnit.MILLISECONDS);
+  }
+
+  /**
+   * Constructs an instance for controlling a local process.
+   * 
+   * @param arguments details about the controllable process
+   * @param pid process id identifying the process to control
+   * @param timeout the timeout that operations must complete within
+   * @param units the units of the timeout
+   * 
+   * @throws IllegalArgumentException if pid is not a positive integer
+   */
+  public FileProcessController(final FileControllerParameters arguments, final int pid, final long timeout, final TimeUnit units) {
+    this.statusTimeoutMillis = units.toMillis(timeout);
+        final StringBuilder lines = new StringBuilder();
-          final StringBuilder lines = new StringBuilder();
-          statusRef.set(lines.toString());
+          statusRef.set(lines.toString());
-      Thread.sleep(100);
-      if (System.currentTimeMillis() >= start + this.statusTimeout) {
+      Thread.sleep(10);
+      if (System.currentTimeMillis() >= start + this.statusTimeoutMillis) {
-    assert statusRef.get() != null;
-    return statusRef.get();
+    
+    final String lines = statusRef.get();
+    if (null == lines || lines.trim().isEmpty()) {
+      throw new IllegalStateException("Failed to read status file");
+    }
+    return lines;

INS26 INS40 INS31 MOV29 INS83 INS42 INS44 INS44 INS8 INS29 INS44 INS44 UPD42 INS65 INS83 INS43 INS42 INS83 INS39 INS42 INS17 INS65 INS65 INS65 INS65 INS65 INS65 INS83 INS39 INS42 INS83 INS43 INS42 INS21 INS60 INS25 INS42 INS66 UPD66 INS42 INS42 INS42 MOV32 INS40 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS7 INS83 INS43 INS59 INS27 INS8 INS42 INS22 INS32 INS42 INS42 MOV32 INS27 INS32 INS53 INS52 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS14 UPD34 UPD42 MOV42 UPD42 MOV42 INS43 INS45 MOV8 INS42 MOV60 INS54 UPD42 INS8 INS8 MOV60 MOV61 MOV21 MOV21 DEL83 DEL8 DEL54 DEL8 DEL32 DEL33 DEL27 DEL6