Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Supports modification of certain region attributes after the region has been
- * created. It is recommended that the attributes be completely initialized
- * using an {@link AttributesFactory} before creating the region instead of
- * using an <code>AttributesMutator</code> after region creation. This will
- * avoid a potential performance penalty due to the additional
- * network traffic.
- *<p>
- * The setter methods all return the previous value of the attribute. 
+ * Supports modification of certain region attributes after the region has been created. It is
+ * recommended that the attributes be completely initialized using an {@link AttributesFactory}
+ * before creating the region instead of using an <code>AttributesMutator</code> after region
+ * creation. This will avoid a potential performance penalty due to the additional network traffic.
+ * <p>
+ * The setter methods all return the previous value of the attribute.
-public interface AttributesMutator<K,V> {
-  
-  /** Returns the Region whose attributes this mutator affects.
+public interface AttributesMutator<K, V> {
+
+  /**
+   * Returns the Region whose attributes this mutator affects.
+   * 
-  public Region<K,V> getRegion();
-  
-  /** Changes the timeToLive expiration attributes for the region as a whole
+  public Region<K, V> getRegion();
+
+  /**
+   * Changes the timeToLive expiration attributes for the region as a whole
-   * @throws IllegalArgumentException if timeToLive is null or if the
-   * ExpirationAction is LOCAL_INVALIDATE and the region is
-   * {@link DataPolicy#withReplication replicated}
+   * @throws IllegalArgumentException if timeToLive is null or if the ExpirationAction is
+   *         LOCAL_INVALIDATE and the region is {@link DataPolicy#withReplication replicated}
-  
-  /** Changes the idleTimeout expiration attributes for the region as a whole.
-   * Resets the {@link CacheStatistics#getLastAccessedTime} for the region.
+
+  /**
+   * Changes the idleTimeout expiration attributes for the region as a whole. Resets the
+   * {@link CacheStatistics#getLastAccessedTime} for the region.
-   * @throws IllegalArgumentException if idleTimeout is null or if the
-   * ExpirationAction is LOCAL_INVALIDATE and the region is
-   * {@link DataPolicy#withReplication replicated}
+   * @throws IllegalArgumentException if idleTimeout is null or if the ExpirationAction is
+   *         LOCAL_INVALIDATE and the region is {@link DataPolicy#withReplication replicated}
-    
-  /** Changes the timeToLive expiration attributes for values in this region.
+
+  /**
+   * Changes the timeToLive expiration attributes for values in this region.
-   * @throws IllegalArgumentException if timeToLive is null or if the
-   * ExpirationAction is LOCAL_DESTROY and the region is {@link DataPolicy#withReplication replicated} or if 
-   * the ExpirationAction is LOCAL_INVALIDATE and the region is 
-   * {@link DataPolicy#withReplication replicated}
+   * @throws IllegalArgumentException if timeToLive is null or if the ExpirationAction is
+   *         LOCAL_DESTROY and the region is {@link DataPolicy#withReplication replicated} or if the
+   *         ExpirationAction is LOCAL_INVALIDATE and the region is
+   *         {@link DataPolicy#withReplication replicated}
-  
+
+   * 
-  public CustomExpiry<K,V> setCustomEntryTimeToLive(CustomExpiry<K,V> custom);
-  
-  /** Changes the idleTimeout expiration attributes for values in the region.
+  public CustomExpiry<K, V> setCustomEntryTimeToLive(CustomExpiry<K, V> custom);
+
+  /**
+   * Changes the idleTimeout expiration attributes for values in the region.
-   * @throws IllegalArgumentException if idleTimeout is null or if the
-   * ExpirationAction is LOCAL_DESTROY and the region is
-   * {@link DataPolicy#withReplication replicated}
-   * or if the the ExpirationAction is LOCAL_INVALIDATE and the region is 
-   * {@link DataPolicy#withReplication replicated}
+   * @throws IllegalArgumentException if idleTimeout is null or if the ExpirationAction is
+   *         LOCAL_DESTROY and the region is {@link DataPolicy#withReplication replicated} or if the
+   *         the ExpirationAction is LOCAL_INVALIDATE and the region is
+   *         {@link DataPolicy#withReplication replicated}
-  
-  /** Changes the CustomExpiry for idleTimeout for values in the region
+
+  /**
+   * Changes the CustomExpiry for idleTimeout for values in the region
-  public CustomExpiry<K,V> setCustomEntryIdleTimeout(CustomExpiry<K,V> custom);
-  
-  /** Changes the CacheListener for the region.
-   * Removes listeners already added and calls {@link CacheCallback#close} on each of them.
+  public CustomExpiry<K, V> setCustomEntryIdleTimeout(CustomExpiry<K, V> custom);
+
+  /**
+   * Changes the CacheListener for the region. Removes listeners already added and calls
+   * {@link CacheCallback#close} on each of them.
+   * 
-   * @deprecated as of GemFire 5.0, use {@link #addCacheListener} or {@link #initCacheListeners} instead.
+   * @deprecated as of GemFire 5.0, use {@link #addCacheListener} or {@link #initCacheListeners}
+   *             instead.
-  public CacheListener<K,V> setCacheListener(CacheListener<K,V> aListener);
+  public CacheListener<K, V> setCacheListener(CacheListener<K, V> aListener);
+
+   * 
-  public void addCacheListener(CacheListener<K,V> aListener);
+  public void addCacheListener(CacheListener<K, V> aListener);
+
-   * Removes a cache listener from the list of cache listeners on this region.
-   * Does nothing if the specified listener has not been added.
-   * If the specified listener has been added then {@link CacheCallback#close} will
-   * be called on it; otherwise does nothing.
+   * Removes a cache listener from the list of cache listeners on this region. Does nothing if the
+   * specified listener has not been added. If the specified listener has been added then
+   * {@link CacheCallback#close} will be called on it; otherwise does nothing.
+   * 
-  public void removeCacheListener(CacheListener<K,V> aListener);
+  public void removeCacheListener(CacheListener<K, V> aListener);
+
-   * Removes all cache listeners, calling {@link CacheCallback#close} on each of them, and then adds each listener in the specified array.
+   * Removes all cache listeners, calling {@link CacheCallback#close} on each of them, and then adds
+   * each listener in the specified array.
+   * 
-  public void initCacheListeners(CacheListener<K,V>[] newListeners);
-  
-  /** Changes the cache writer for the region.
+  public void initCacheListeners(CacheListener<K, V>[] newListeners);
+
+  /**
+   * Changes the cache writer for the region.
+   * 
-  public CacheWriter<K,V> setCacheWriter(CacheWriter<K,V> cacheWriter);
-  
+  public CacheWriter<K, V> setCacheWriter(CacheWriter<K, V> cacheWriter);
+
-   * Changing the cache loader for partitioned regions is not recommended due to
-   * the fact that it can result in an inconsistent cache loader configuration.
-   * This feature may be removed in future releases.
+   * Changing the cache loader for partitioned regions is not recommended due to the fact that it
+   * can result in an inconsistent cache loader configuration. This feature may be removed in future
+   * releases.
-   * @param cacheLoader
-   *          the cache loader
+   * @param cacheLoader the cache loader
-  public CacheLoader<K,V> setCacheLoader(CacheLoader<K,V> cacheLoader);
-  
+  public CacheLoader<K, V> setCacheLoader(CacheLoader<K, V> cacheLoader);
-  /** Allows changing the eviction controller attributes for the region.
+
+  /**
+   * Allows changing the eviction controller attributes for the region.
-   * Sets cloning on region
-   * Note: off-heap regions always behave as if cloning is enabled.
+   * Sets cloning on region Note: off-heap regions always behave as if cloning is enabled.
+   * 
+
-   * @return True if cloning is enabled (default);
-   *         false cloning is not enabled.
+   * @return True if cloning is enabled (default); false cloning is not enabled.
-  
+
-   * Adds GatewaySenderId to the list of GatewaySenderIds of the region.
-   * If the GatewaySenderId is not present on this VM then it will try to send it to other VM's
+   * Adds GatewaySenderId to the list of GatewaySenderIds of the region. If the GatewaySenderId is
+   * not present on this VM then it will try to send it to other VM's
-   public void addGatewaySenderId(String gatewaySenderId);
-   
-   /**
-    * Removes GatewaySenderId from the list of GatewaySenderIds of the region.
-    * @param gatewaySenderId 
-    */
-   public void removeGatewaySenderId(String gatewaySenderId);
-   
-   /**
-    * Adds AsyncEventQueueId to the list of AsyncEventQueueId of the region.
-    * @param asyncEventQueueId 
-    */
-   public void addAsyncEventQueueId(String asyncEventQueueId);
-   
-   /**
-    * Removes AsyncEventQueueId from the list of AsyncEventQueuesId of the region.
-    * @param asyncEventQueueId 
-    */
-   public void removeAsyncEventQueueId(String asyncEventQueueId);
+  public void addGatewaySenderId(String gatewaySenderId);
+
+  /**
+   * Removes GatewaySenderId from the list of GatewaySenderIds of the region.
+   * 
+   * @param gatewaySenderId
+   */
+  public void removeGatewaySenderId(String gatewaySenderId);
+
+  /**
+   * Adds AsyncEventQueueId to the list of AsyncEventQueueId of the region.
+   * 
+   * @param asyncEventQueueId
+   */
+  public void addAsyncEventQueueId(String asyncEventQueueId);
+
+  /**
+   * Removes AsyncEventQueueId from the list of AsyncEventQueuesId of the region.
+   * 
+   * @param asyncEventQueueId
+   */
+  public void removeAsyncEventQueueId(String asyncEventQueueId);

UPD66 UPD66 UPD66 UPD66 UPD66 INS65 MOV65 INS65 MOV65 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 MOV65 INS66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL42 DEL66 DEL65 DEL66 DEL66