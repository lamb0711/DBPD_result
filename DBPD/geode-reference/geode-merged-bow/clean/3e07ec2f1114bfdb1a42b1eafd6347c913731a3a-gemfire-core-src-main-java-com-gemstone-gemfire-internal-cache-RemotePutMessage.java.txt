Merge remote-tracking branch 'origin/develop' into feature/GEODE-11

-
-    Object oldValue;
+    private Object oldValue;
-    private PutReplyMessage(int processorId,
+    // unit tests may call this constructor
+    PutReplyMessage(int processorId,
-    /** Return oldValue in deserialized form */
+    /** Return oldValue as a byte[] or as a CachedDeserializable.
+     * This method used to deserialize a CachedDeserializable but that is too soon.
+     * This method is called during message processing. The deserialization needs
+     * to be deferred until we get back to the application thread which happens
+     * for this oldValue when they call EntryEventImpl.getOldValue.
+     */
-      if (this.oldValue instanceof CachedDeserializable) {
-        return ((CachedDeserializable)this.oldValue).getDeserializedValue(null, null);
-      }
-    @Override
+    public static void oldValueToData(DataOutput out, Object ov, boolean ovIsSerialized) throws IOException {
+      if (ovIsSerialized && ov != null) {
+        byte[] oldValueBytes;
+        if (ov instanceof byte[]) {
+          oldValueBytes = (byte[]) ov;
+          DataSerializer.writeObject(new VMCachedDeserializable(oldValueBytes), out);
+        } else if (ov instanceof CachedDeserializable) {
+          if (ov instanceof StoredObject) {
+            ((StoredObject) ov).sendAsCachedDeserializable(out);
+          } else {
+            DataSerializer.writeObject(ov, out);
+          }
+        } else {
+          oldValueBytes = EntryEventImpl.serialize(ov);
+          DataSerializer.writeObject(new VMCachedDeserializable(oldValueBytes), out);
+        }
+      } else {
+        DataSerializer.writeObject(ov, out);
+      }
+      
+    }
+    
+     @Override
-      if (this.oldValueIsSerialized) {
-        byte[] oldValueBytes = (byte[]) this.oldValue;
-        out.write(oldValueBytes);
-      } else {
-        DataSerializer.writeObject(this.oldValue, out);
-      }
+      oldValueToData(out, getOldValue(), this.oldValueIsSerialized);
-      // isSerialized does not matter.
-      // toData will just call writeObject
-      // and fromData will just call readObject
+      this.oldValueIsSerialized = isSerialized;
-      if (isSerialized) {
-        this.oldValueIsSerialized = true;
-      }
-      this.oldValue = ov;
+      importOldObject(ov, isSerialized);

MOV31 INS31 INS83 INS8 INS83 UPD42 INS44 INS44 INS44 INS43 MOV78 INS83 INS39 INS42 MOV44 MOV44 INS8 MOV41 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS25 INS21 INS21 INS21 UPD66 INS66 INS66 INS66 INS66 INS42 INS42 INS27 INS8 INS8 INS32 INS7 INS32 INS42 INS27 INS60 INS25 INS21 INS42 MOV42 INS32 MOV22 MOV22 INS42 MOV22 INS42 INS42 INS42 INS42 INS33 MOV5 INS59 INS62 MOV8 INS25 INS32 INS42 MOV52 INS42 INS42 INS5 INS21 MOV62 INS8 INS8 INS42 INS42 INS42 INS42 INS39 INS85 INS32 INS42 INS25 MOV21 INS21 INS42 INS11 INS42 INS42 INS14 INS42 INS62 INS8 INS8 INS32 MOV5 INS42 INS43 INS42 INS42 INS43 INS21 INS21 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS43 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS43 INS42 INS42 DEL83 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL36 DEL42 DEL33 DEL33 DEL32 DEL41 DEL8 DEL25 DEL8 DEL9 DEL52 DEL42 DEL22 DEL42 DEL25 DEL42 DEL52 DEL42 DEL22 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL25