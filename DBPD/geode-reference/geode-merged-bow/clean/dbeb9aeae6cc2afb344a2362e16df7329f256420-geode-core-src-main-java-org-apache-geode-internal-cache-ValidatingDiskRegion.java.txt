Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  protected ValidatingDiskRegion(DiskStoreImpl ds,
-                               DiskRegionView drv) {
+  protected ValidatingDiskRegion(DiskStoreImpl ds, DiskRegionView drv) {
-          new DiskRegionStats(ds.getCache().getDistributedSystem(), drv.getName()),
-          new DummyCancelCriterion(),
-          new DummyDiskExceptionHandler(),
-          null, drv.getFlags(), drv.getPartitionName(), drv.getStartingBucketId(),
-          drv.getCompressorClassName(), drv.getOffHeap());
+        new DiskRegionStats(ds.getCache().getDistributedSystem(), drv.getName()),
+        new DummyCancelCriterion(), new DummyDiskExceptionHandler(), null, drv.getFlags(),
+        drv.getPartitionName(), drv.getStartingBucketId(), drv.getCompressorClassName(),
+        drv.getOffHeap());
-              drv.getConcurrencyLevel(), drv.getInitialCapacity(),
-              drv.getLoadFactor(), drv.getStatisticsEnabled(),
-              drv.isBucket(), drv.getFlags(), drv.getPartitionName(), drv.getStartingBucketId(),
-              drv.getCompressorClassName(), drv.getOffHeap());
+        drv.getConcurrencyLevel(), drv.getInitialCapacity(), drv.getLoadFactor(),
+        drv.getStatisticsEnabled(), drv.isBucket(), drv.getFlags(), drv.getPartitionName(),
+        drv.getStartingBucketId(), drv.getCompressorClassName(), drv.getOffHeap());
-  
+
-  
+
-      throw new InternalGemFireError(LocalizedStrings.LocalRegion_ENTRY_ALREADY_EXISTED_0.toLocalizedString(key));
+      throw new InternalGemFireError(
+          LocalizedStrings.LocalRegion_ENTRY_ALREADY_EXISTED_0.toLocalizedString(key));
+
+
-    throw new IllegalStateException("foreachRegionEntry should not be called when validating disk store");
+    throw new IllegalStateException(
+        "foreachRegionEntry should not be called when validating disk store");
+
+
-    throw new IllegalStateException("copyRecoveredEntries should not be called on ValidatingDiskRegion");
+    throw new IllegalStateException(
+        "copyRecoveredEntries should not be called on ValidatingDiskRegion");
+
-    throw new IllegalStateException("updateSizeOnFaultIn should not be called on ValidatingDiskRegion");
+    throw new IllegalStateException(
+        "updateSizeOnFaultIn should not be called on ValidatingDiskRegion");
+
+
+
+
-    throw new IllegalStateException("handleDiskAccessException should not be called on ValidatingDiskRegion");
+    throw new IllegalStateException(
+        "handleDiskAccessException should not be called on ValidatingDiskRegion");
+
-  
+
+
+
+
+
-    
+
-    
+
-    
+
-    public void setValueWithContext(RegionEntryContext context,Object value) {
+    public void setValueWithContext(RegionEntryContext context, Object value) {
-    }    
+    }
+
-    public void handleValueOverflow(RegionEntryContext context) {throw new IllegalStateException("should never be called");}
-    
+    public void handleValueOverflow(RegionEntryContext context) {
+      throw new IllegalStateException("should never be called");
+    }
+
+
-  
+
+
+
+
-    /* (non-Javadoc)
+
+    /*
+     * (non-Javadoc)
+     * 
+
+
+
+
+
-    public void updateStatsForPut(long lastModifiedTime) {
+    public void updateStatsForPut(long lastModifiedTime, long lastAccessedTime) {
+
-    public VersionTag generateVersionTag(VersionSource member,
-        boolean withDelta, LocalRegion region, EntryEventImpl event) {
+    public VersionTag generateVersionTag(VersionSource member, boolean withDelta,
+        LocalRegion region, EntryEventImpl event) {
+
-    public boolean dispatchListenerEvents(EntryEventImpl event)
-        throws InterruptedException {
+    public boolean dispatchListenerEvents(EntryEventImpl event) throws InterruptedException {
+
+
+
+
+
-    public void makeTombstone(LocalRegion r, VersionTag version)
-        throws RegionClearedException {
+    public void makeTombstone(LocalRegion r, VersionTag version) throws RegionClearedException {
+
-    public void removePhase1(LocalRegion r, boolean clear)
-        throws RegionClearedException {
+    public void removePhase1(LocalRegion r, boolean clear) throws RegionClearedException {
+
+
+
+
+
+
+
+
+
-    public void setValue(RegionEntryContext context, Object value)
-        throws RegionClearedException {
+    public void setValue(RegionEntryContext context, Object value) throws RegionClearedException {
+
+
+
+
+
-    public Object getValueOnDiskOrBuffer(LocalRegion r)
-        throws EntryNotFoundException {
+    public Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException {
+
-    public boolean initialImagePut(LocalRegion region, long lastModified,
-        Object newValue, boolean wasRecovered, boolean acceptedVersionTag)
+    public boolean initialImagePut(LocalRegion region, long lastModified, Object newValue,
+        boolean wasRecovered, boolean acceptedVersionTag) throws RegionClearedException {
+      // TODO Auto-generated method stub
+      return false;
+    }
+
+    @Override
+    public boolean initialImageInit(LocalRegion region, long lastModified, Object newValue,
+        boolean create, boolean wasRecovered, boolean acceptedVersionTag)
+
-    public boolean initialImageInit(LocalRegion region, long lastModified,
-        Object newValue, boolean create, boolean wasRecovered,
-        boolean acceptedVersionTag) throws RegionClearedException {
+    public boolean destroy(LocalRegion region, EntryEventImpl event, boolean inTokenMode,
+        boolean cacheWrite, Object expectedOldValue, boolean forceDestroy,
+        boolean removeRecoveredEntry) throws CacheWriterException, EntryNotFoundException,
+        TimeoutException, RegionClearedException {
-    @Override
-    public boolean destroy(LocalRegion region, EntryEventImpl event,
-        boolean inTokenMode, boolean cacheWrite, Object expectedOldValue,
-        boolean forceDestroy, boolean removeRecoveredEntry)
-        throws CacheWriterException, EntryNotFoundException, TimeoutException,
-        RegionClearedException {
-      // TODO Auto-generated method stub
-      return false;
-    }
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
-      
+
+
-    public void setValue(RegionEntryContext context, Object value,
-        EntryEventImpl event) throws RegionClearedException {
-    }
-    
+    public void setValue(RegionEntryContext context, Object value, EntryEventImpl event)
+        throws RegionClearedException {}
+
+
-    public void setInUseByTransaction(boolean v) {
-    }
+    public void setInUseByTransaction(boolean v) {}
+
-    public void incRefCount() {
-    }
+    public void incRefCount() {}
+
-    public void decRefCount(NewLRUClockHand lruList, LocalRegion lr) {
-    }
+    public void decRefCount(NewLRUClockHand lruList, LocalRegion lr) {}
+
-    public void resetRefCount(NewLRUClockHand lruList) {
-    }
+    public void resetRefCount(NewLRUClockHand lruList) {}
+
-    public Object prepareValueForCache(RegionEntryContext r, Object val,
-        EntryEventImpl event, boolean isEntryUpdate) {
+    public Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event,
+        boolean isEntryUpdate) {
+

INS44 INS39 INS42