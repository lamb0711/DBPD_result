Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
- * Faulty delta implementation, raising ArrayIndexOutOfBound exception as
- * fromDelta reads incorrect sequence then wrote by toDelta
+ * Faulty delta implementation, raising ArrayIndexOutOfBound exception as fromDelta reads incorrect
+ * sequence then wrote by toDelta
+ * 
-  public static final byte INT_MASK          = 0x1;
-  public static final byte BIG_OBJECT_MASK   = 0x2;
-  public static final byte COMPLETE_MASK     = 0x3;
-  
-  protected int intVal=0;
+  public static final byte INT_MASK = 0x1;
+  public static final byte BIG_OBJECT_MASK = 0x2;
+  public static final byte COMPLETE_MASK = 0x3;
+
+  protected int intVal = 0;
-  
+
-          GemFireCacheImpl.getInstance().getLogger().fine(" Applied delta on DeltaImpl's field 'bigObj' = {"
-              + this.bigObj[0] + " " + this.bigObj[1] + "}"); 
+          GemFireCacheImpl.getInstance().getLogger()
+              .fine(" Applied delta on DeltaImpl's field 'bigObj' = {" + this.bigObj[0] + " "
+                  + this.bigObj[1] + "}");
-          GemFireCacheImpl.getInstance().getLogger().fine(" Applied delta on DeltaImpl's field 'intVal' = "
-              + this.intVal);
+          GemFireCacheImpl.getInstance().getLogger()
+              .fine(" Applied delta on DeltaImpl's field 'intVal' = " + this.intVal);
-    }
-    catch (IOException ioe) {
+    } catch (IOException ioe) {
-    }
-    catch (IllegalArgumentException iae) {
+    } catch (IllegalArgumentException iae) {
-      if((deltaBits & INT_MASK) == INT_MASK){
-        GemFireCacheImpl.getInstance().getLogger().fine(" Extracted delta from DeltaObj's field 'intVal' = " + this.intVal);
+      if ((deltaBits & INT_MASK) == INT_MASK) {
+        GemFireCacheImpl.getInstance().getLogger()
+            .fine(" Extracted delta from DeltaObj's field 'intVal' = " + this.intVal);
-      if((deltaBits & BIG_OBJECT_MASK) == BIG_OBJECT_MASK){
-        GemFireCacheImpl.getInstance().getLogger().fine(" Extracted delta from DeltaObj's field 'bigObj' = {"
-                + this.bigObj[0] + " " + this.bigObj[1] + "}");
+      if ((deltaBits & BIG_OBJECT_MASK) == BIG_OBJECT_MASK) {
+        GemFireCacheImpl.getInstance().getLogger()
+            .fine(" Extracted delta from DeltaObj's field 'bigObj' = {" + this.bigObj[0] + " "
+                + this.bigObj[1] + "}");
-        throw new IllegalArgumentException(
-            "DeltaImpl.toDelta(): Unknown field code, " + deltaBits);
+        throw new IllegalArgumentException("DeltaImpl.toDelta(): Unknown field code, " + deltaBits);
-      DataSerializer.writeByte((byte)255, out);
-      GemFireCacheImpl.getInstance().getLogger().fine(" Writing extra DeltaObj's field 'byte' = " + 255);
+      DataSerializer.writeByte((byte) 255, out);
+      GemFireCacheImpl.getInstance().getLogger()
+          .fine(" Writing extra DeltaObj's field 'byte' = " + 255);
-    }
-    catch (IOException ioe) {
+    } catch (IOException ioe) {
-    }
-    catch (IllegalArgumentException iae) {
+    } catch (IllegalArgumentException iae) {
-   
+
-   
+
-  
+
-    return "DeltaObj[hasDelta=" + this.hasDelta + ",intVal=" + this.intVal
-        + ",bigObj={" + this.bigObj[0] + "," + this.bigObj[1] + "}]";
+    return "DeltaObj[hasDelta=" + this.hasDelta + ",intVal=" + this.intVal + ",bigObj={"
+        + this.bigObj[0] + "," + this.bigObj[1] + "}]";

UPD66 UPD66