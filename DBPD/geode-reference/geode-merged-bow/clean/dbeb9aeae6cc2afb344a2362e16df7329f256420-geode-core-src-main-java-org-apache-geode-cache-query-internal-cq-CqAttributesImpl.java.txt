Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+   * 
-    if (listeners == null){
+    if (listeners == null) {
-    synchronized(this.clSync){
+    synchronized (this.clSync) {
+   * 
-    throw new IllegalStateException(LocalizedStrings.CqAttributesFactory_MORE_THAN_ONE_CQLISTENER_EXISTS.toLocalizedString());
+    throw new IllegalStateException(
+        LocalizedStrings.CqAttributesFactory_MORE_THAN_ONE_CQLISTENER_EXISTS.toLocalizedString());
-    }
-    catch (CloneNotSupportedException e) {
-      throw new InternalError(LocalizedStrings.CqAttributesFactory_CLONENOTSUPPORTEDEXCEPTION_THROWN_IN_CLASS_THAT_IMPLEMENTS_CLONEABLE.toLocalizedString());
+    } catch (CloneNotSupportedException e) {
+      throw new InternalError(
+          LocalizedStrings.CqAttributesFactory_CLONENOTSUPPORTEDEXCEPTION_THROWN_IN_CLASS_THAT_IMPLEMENTS_CLONEABLE
+              .toLocalizedString());
+   * 
-  public void addCqListener(CqListener cql)
-  {
+  public void addCqListener(CqListener cql) {
-      throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_ADDCQLISTENER_PARAMETER_WAS_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.CqAttributesFactory_ADDCQLISTENER_PARAMETER_WAS_NULL
+              .toLocalizedString());
-      }
-      else {
+      } else {
-   * Removes all Cqlisteners, calling on each of them, and then adds each listener in the specified array.
+   * Removes all Cqlisteners, calling on each of them, and then adds each listener in the specified
+   * array.
+   * 
-  public void initCqListeners(CqListener[] addedListeners)
-  {
+  public void initCqListeners(CqListener[] addedListeners) {
-      }
-      else { // we have some listeners to add
+      } else { // we have some listeners to add
-          throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_INITCQLISTENERS_PARAMETER_HAD_A_NULL_ELEMENT.toLocalizedString());
+          throw new IllegalArgumentException(
+              LocalizedStrings.CqAttributesFactory_INITCQLISTENERS_PARAMETER_HAD_A_NULL_ELEMENT
+                  .toLocalizedString());
-          logger.warn(LocalizedMessage
-            .create(LocalizedStrings.CqAttributesFactory_EXCEPTION_OCCURED_WHILE_CLOSING_CQ_LISTENER_ERROR_0, ex.getLocalizedMessage()));
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.CqAttributesFactory_EXCEPTION_OCCURED_WHILE_CLOSING_CQ_LISTENER_ERROR_0,
+              ex.getLocalizedMessage()));
-        }
-        catch (VirtualMachineError err) {
+        } catch (VirtualMachineError err) {
-          // If this ever returns, rethrow the error.  We're poisoned
+          // If this ever returns, rethrow the error. We're poisoned
-        }
-        catch (Throwable t) {
+        } catch (Throwable t) {
-          // catch VirtualMachineError (see above).  However, there is
+          // catch VirtualMachineError (see above). However, there is
-          logger.warn(LocalizedMessage.create(LocalizedStrings.CqAttributesFactory_RUNTIME_EXCEPTION_OCCURED_WHILE_CLOSING_CQ_LISTENER_ERROR_0, t.getLocalizedMessage()));
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.CqAttributesFactory_RUNTIME_EXCEPTION_OCCURED_WHILE_CLOSING_CQ_LISTENER_ERROR_0,
+              t.getLocalizedMessage()));
-   * Removes a Cqlistener from the list of Cqlisteners on this CqQuery.
-   * Does nothing if the specified listener has not been added.
-   * If the specified listener has been added then {@link CacheCallback#close()} will
-   * be called on it; otherwise does nothing.
+   * Removes a Cqlistener from the list of Cqlisteners on this CqQuery. Does nothing if the
+   * specified listener has not been added. If the specified listener has been added then
+   * {@link CacheCallback#close()} will be called on it; otherwise does nothing.
+   * 
-  public void removeCqListener(CqListener cql)
-  {
+  public void removeCqListener(CqListener cql) {
-      throw new IllegalArgumentException(LocalizedStrings.CqAttributesFactory_REMOVECQLISTENER_PARAMETER_WAS_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.CqAttributesFactory_REMOVECQLISTENER_PARAMETER_WAS_NULL
+              .toLocalizedString());
-            logger.warn(LocalizedMessage.create(LocalizedStrings.CqAttributesFactory_EXCEPTION_CLOSING_CQ_LISTENER_ERROR_0, ex.getLocalizedMessage()));
+            logger.warn(LocalizedMessage.create(
+                LocalizedStrings.CqAttributesFactory_EXCEPTION_CLOSING_CQ_LISTENER_ERROR_0,
+                ex.getLocalizedMessage()));
-          }
-          catch (VirtualMachineError err) {
+          } catch (VirtualMachineError err) {
-            // If this ever returns, rethrow the error.  We're poisoned
+            // If this ever returns, rethrow the error. We're poisoned
-          }
-          catch (Throwable t) {
+          } catch (Throwable t) {
-            // catch VirtualMachineError (see above).  However, there is
+            // catch VirtualMachineError (see above). However, there is
-            logger.warn(LocalizedMessage.create(LocalizedStrings.CqAttributesFactory_RUNTIME_EXCEPTION_OCCURED_CLOSING_CQ_LISTENER_ERROR_0, t.getLocalizedMessage()));
+            logger.warn(LocalizedMessage.create(
+                LocalizedStrings.CqAttributesFactory_RUNTIME_EXCEPTION_OCCURED_CLOSING_CQ_LISTENER_ERROR_0,
+                t.getLocalizedMessage()));
-            }
+          }
-    synchronized(this.clSync) {
+    synchronized (this.clSync) {

UPD66 INS66 UPD66 UPD66 UPD66 DEL66 DEL66