sweeper now used instead of repl vs non-repl variables

-   * tasks for cleaning up tombstones
-   */
-  private TombstoneSweeper replicatedTombstoneSweeper;
-  private TombstoneSweeper nonReplicatedTombstoneSweeper;
-
-  /** a tombstone service is tied to a cache */
-  private GemFireCacheImpl cache;
-
-  /**
-   * two queues, one for replicated regions (including PR buckets) and one for
+   * two sweepers, one for replicated regions (including PR buckets) and one for
-  private Queue<Tombstone> replicatedTombstones = new ConcurrentLinkedQueue<Tombstone>();
-  private Queue<Tombstone> nonReplicatedTombstones = new ConcurrentLinkedQueue<Tombstone>();
+  private final TombstoneSweeper replicatedTombstoneSweeper;
+  private final TombstoneSweeper nonReplicatedTombstoneSweeper;
-  private AtomicLong replicatedTombstoneQueueSize = new AtomicLong();
-  private AtomicLong nonReplicatedTombstoneQueueSize = new AtomicLong();
-  
-    this.cache = cache;
-    this.replicatedTombstoneSweeper = new TombstoneSweeper(cache, this.replicatedTombstones,
-        REPLICATED_TOMBSTONE_TIMEOUT, true, this.replicatedTombstoneQueueSize);
-    this.nonReplicatedTombstoneSweeper = new TombstoneSweeper(cache, this.nonReplicatedTombstones,
-        CLIENT_TOMBSTONE_TIMEOUT, false, this.nonReplicatedTombstoneQueueSize);
+    this.replicatedTombstoneSweeper = new TombstoneSweeper(cache, new ConcurrentLinkedQueue<Tombstone>(),
+        REPLICATED_TOMBSTONE_TIMEOUT, true, new AtomicLong());
+    this.nonReplicatedTombstoneSweeper = new TombstoneSweeper(cache, new ConcurrentLinkedQueue<Tombstone>(),
+        CLIENT_TOMBSTONE_TIMEOUT, false, new AtomicLong());
-    boolean useReplicated = useReplicatedQueue(r);
-    if (useReplicated) {
-      this.replicatedTombstones.add(ts);
-      this.replicatedTombstoneQueueSize.addAndGet(ts.getSize());
-    } else {
-      this.nonReplicatedTombstones.add(ts);
-      this.nonReplicatedTombstoneQueueSize.addAndGet(ts.getSize());
-    }
+    this.getSweeper(r).scheduleTombstone(ts);
-  private boolean useReplicatedQueue(LocalRegion r) {
-    return (r.getScope().isDistributed() && r.getServerProxy() == null) && r.dataPolicy.withReplication();
+  private TombstoneSweeper getSweeper(LocalRegion r)  {
+    if (r.getScope().isDistributed() && r.getServerProxy() == null && r.dataPolicy.withReplication()) {
+      return this.replicatedTombstoneSweeper;
+    } else {
+      return this.nonReplicatedTombstoneSweeper;
+    }
-    Queue<Tombstone> queue =
-      r.getAttributes().getDataPolicy().withReplication() ? replicatedTombstones : nonReplicatedTombstones;
+    TombstoneSweeper sweeper = this.getSweeper(r);
+    Queue<Tombstone> queue = sweeper.getQueue();
-    if (queue == replicatedTombstones) {
-      replicatedTombstoneQueueSize.addAndGet(-removalSize);
-    } else {
-      nonReplicatedTombstoneQueueSize.addAndGet(-removalSize);
-    }
+    sweeper.incQueueSize(-removalSize);
-    Queue<Tombstone> queue;
-    boolean replicated = false;
-    Tombstone currentTombstone;
-    StoppableReentrantLock lock = null;
-    boolean locked = false;
+    final TombstoneSweeper sweeper = this.getSweeper(r);
+    Tombstone currentTombstone = sweeper.lockAndGetCurrentTombstone();
-      locked = false;
-      if (r.getServerProxy() != null) {
-        queue = this.nonReplicatedTombstones;
-        lock = this.nonReplicatedTombstoneSweeper.currentTombstoneLock;
-        lock.lock();
-        locked = true;
-        currentTombstone = this.nonReplicatedTombstoneSweeper.currentTombstone;
-      } else {
-        queue = this.replicatedTombstones;
-        replicated = true;
-        lock = this.replicatedTombstoneSweeper.currentTombstoneLock;
-        lock.lock();
-        locked = true;
-        currentTombstone = this.replicatedTombstoneSweeper.currentTombstone;
-      }
+          removalSize += currentTombstone.getSize();
+          // TODO call sweeper.clearCurrentTombstone
-      for (Tombstone t: queue) {
+      for (Iterator<Tombstone> it=sweeper.getQueue().iterator(); it.hasNext(); ) {
+        Tombstone t = it.next();
+            it.remove();
-      
-      queue.removeAll(removals);
-      if (replicated) {
-        this.replicatedTombstoneQueueSize.addAndGet(-removalSize);
-      } else {
-        this.nonReplicatedTombstoneQueueSize.addAndGet(-removalSize);
-      }
+      sweeper.incQueueSize(-removalSize);
-      if (locked) {
-        lock.unlock();
-      }
+      sweeper.unlock();
-    Queue<Tombstone> queue = this.nonReplicatedTombstones;
+    if (r.getServerProxy() == null) {
+      // if the region does not have a server proxy
+      // then it will not have any tombstones to gc for the server.
+      return;
+    }
+    final TombstoneSweeper sweeper = this.getSweeper(r);
-    this.nonReplicatedTombstoneSweeper.currentTombstoneLock.lock();
+    Tombstone currentTombstone = sweeper.lockAndGetCurrentTombstone();
-      Tombstone currentTombstone = this.nonReplicatedTombstoneSweeper.currentTombstone;
+          removalSize += currentTombstone.getSize();
+          // TODO: shouldn't we call sweeper.clearTombstone()?
-      for (Tombstone t: queue) {
+      for (Iterator<Tombstone> it=sweeper.getQueue().iterator(); it.hasNext(); ) {
+        Tombstone t = it.next();
+            it.remove();
-      
-      queue.removeAll(removals);
-      nonReplicatedTombstoneQueueSize.addAndGet(removalSize);
-      
+      sweeper.incQueueSize(-removalSize);
-      this.nonReplicatedTombstoneSweeper.currentTombstoneLock.unlock();
+      sweeper.unlock();
-    Queue<Tombstone> queue;
-    if (r.getDataPolicy().withReplication()) {
-      queue = this.replicatedTombstones;
-    } else {
-      queue = this.nonReplicatedTombstones;
-    }
+    TombstoneSweeper sweeper = this.getSweeper(r);
-    for (Tombstone t: queue) {
+    for (Tombstone t: sweeper.getQueue()) {
-    if (this.replicatedTombstoneSweeper != null) {
-      return this.replicatedTombstoneSweeper.hasExpiredTombstone(r, re, entryTag);
-    }
-    return false;
+    return sweeper.hasExpiredTombstone(r, re, entryTag);
-    return "Destroyed entries GC service.  Replicate Queue=" + this.replicatedTombstones.toString()
-    + " Non-replicate Queue=" + this.nonReplicatedTombstones
+    return "Destroyed entries GC service.  Replicate Queue=" + this.replicatedTombstoneSweeper.getQueue().toString()
+    + " Non-replicate Queue=" + this.nonReplicatedTombstoneSweeper.getQueue().toString()
-    Queue<Tombstone> tombstones;
+    final Queue<Tombstone> tombstones;
-    AtomicLong queueSize = new AtomicLong();
+    final AtomicLong queueSize;
-    private GemFireCacheImpl cache;
+    private final GemFireCacheImpl cache;
+
+    public Tombstone lockAndGetCurrentTombstone() {
+      this.currentTombstoneLock.lock();
+      return this.currentTombstone;
+    }
+
+    public void unlock() {
+      this.currentTombstoneLock.unlock();
+    }
+
+    public void incQueueSize(long delta) {
+      this.queueSize.addAndGet(delta);
+    }
+
+    public Queue<Tombstone> getQueue() {
+      return this.tombstones;
+    }
+
+    void scheduleTombstone(Tombstone ts) {
+      this.tombstones.add(ts);
+      this.queueSize.addAndGet(ts.getSize());
+    }
+    
+      if (this.expiredTombstones == null) {
+        return false;
+      }

MOV23 INS83 MOV43 MOV59 INS83 INS43 INS42 INS31 INS31 INS31 INS31 INS31 INS21 INS42 INS25 INS60 MOV21 INS25 INS60 INS60 MOV41 INS83 INS83 INS83 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 MOV74 INS42 INS8 INS39 INS42 INS44 INS8 UPD66 INS32 MOV27 INS8 INS8 INS43 MOV74 INS59 MOV60 UPD27 MOV27 INS8 INS83 INS43 INS43 INS59 INS43 INS59 INS32 INS42 INS21 INS41 INS21 INS39 INS42 INS21 INS41 INS43 INS42 INS21 INS21 INS25 INS32 INS42 MOV42 MOV27 MOV41 INS41 INS42 UPD42 INS32 INS42 INS32 UPD42 UPD42 INS60 INS41 UPD42 MOV42 UPD42 INS32 INS42 INS42 INS32 INS24 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 INS32 INS22 INS32 INS32 INS22 INS42 INS32 INS32 INS27 INS8 MOV43 MOV14 MOV14 MOV43 MOV14 MOV14 INS52 UPD42 MOV42 MOV42 MOV22 MOV22 INS52 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS83 INS43 INS43 INS59 INS8 INS52 INS42 INS42 INS42 UPD42 MOV42 INS58 INS32 MOV8 INS32 INS52 UPD42 MOV42 UPD42 MOV42 INS32 MOV32 INS42 INS22 INS42 INS52 INS42 INS22 INS42 INS22 INS42 INS42 INS52 INS42 INS22 INS42 INS42 INS22 INS42 MOV32 INS22 INS33 MOV41 UPD42 MOV42 UPD42 INS32 INS42 MOV42 INS32 INS24 MOV21 MOV21 INS74 INS59 UPD42 MOV42 INS42 INS60 UPD42 UPD42 MOV38 INS42 INS42 MOV22 INS42 MOV22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS58 INS32 MOV8 MOV8 INS43 INS43 INS42 INS32 MOV43 INS59 INS74 INS59 INS42 UPD42 MOV42 INS60 INS42 UPD42 MOV38 UPD42 INS21 INS42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS8 INS43 INS43 INS42 INS32 MOV43 INS59 INS7 INS42 UPD42 MOV42 INS42 INS42 MOV21 INS21 INS42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS32 INS21 INS7 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL36 DEL42 DEL32 DEL32 DEL42 DEL32 DEL42 DEL42 DEL16 DEL42 DEL42 DEL27 DEL8 DEL42 DEL42 DEL38 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL43 DEL74 DEL42 DEL9 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL7 DEL21 DEL8 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL43 DEL42 DEL44 DEL42 DEL70 DEL32 DEL21 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL8 DEL25 DEL42 DEL8 DEL25 DEL8 DEL42 DEL43 DEL43 DEL74 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL32 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL59 DEL60 DEL8 DEL43 DEL42 DEL44 DEL42 DEL70 DEL32 DEL21 DEL42 DEL42 DEL43 DEL43 DEL74 DEL59 DEL60 DEL42 DEL32 DEL32 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL25 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL14