Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <p>A single instance of this interface can be created using {@link ClientCacheFactory#create}.
- * Multiple instances may also be created using
- * {@link PoolFactory#create}.
- * A {@link PoolFactory} instance is created by calling
- * {@link PoolManager#createFactory}. So to create a default <code>Pool</code> do this:
+ * <p>
+ * A single instance of this interface can be created using {@link ClientCacheFactory#create}.
+ * Multiple instances may also be created using {@link PoolFactory#create}. A {@link PoolFactory}
+ * instance is created by calling {@link PoolManager#createFactory}. So to create a default
+ * <code>Pool</code> do this:
+ * 
-     new ClientCacheFactory().create();
+ * new ClientCacheFactory().create();
+ * 
+ * 
-     PoolManager.createFactory().create("myPool");
+ * PoolManager.createFactory().create("myPool");
+ * 
- * <p>Existing Pool instances can be found using {@link PoolManager#find(String)}
- * and {@link PoolManager#getAll}.
- * <p>The pool name must be configured
- * on the client regions that will use this pool by calling
+ * <p>
+ * Existing Pool instances can be found using {@link PoolManager#find(String)} and
+ * {@link PoolManager#getAll}.
+ * <p>
+ * The pool name must be configured on the client regions that will use this pool by calling
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
-  
+
+   * 
+
+   * 
-  
+
-   * Returns an unmodifiable list of {@link java.net.InetSocketAddress} of the
-   * locators this pool is using. Each locator is either one
-   * {@link PoolFactory#addLocator added explicitly}
-   * when the pool was created or were discovered using the explicit locators.
-   * <p> If a pool has no locators then it can not discover servers or locators at runtime.
+   * Returns an unmodifiable list of {@link java.net.InetSocketAddress} of the locators this pool is
+   * using. Each locator is either one {@link PoolFactory#addLocator added explicitly} when the pool
+   * was created or were discovered using the explicit locators.
+   * <p>
+   * If a pool has no locators then it can not discover servers or locators at runtime.
+
-   * Returns an unmodifiable list of {@link java.net.InetSocketAddress} of the
-   * servers this pool is using. These servers where either
-   * {@link PoolFactory#addServer added explicitly}
-   * when the pool was created or were discovered using this pools {@link #getLocators locators}.
+   * Returns an unmodifiable list of {@link java.net.InetSocketAddress} of the servers this pool is
+   * using. These servers where either {@link PoolFactory#addServer added explicitly} when the pool
+   * was created or were discovered using this pools {@link #getLocators locators}.
-   * @param keepAlive
-   *                whether the server should keep the durable client's
-   *                subscriptions alive for the timeout period
-   * @throws IllegalStateException
-   *                 if the pool is still in use
+   * 
+   * @param keepAlive whether the server should keep the durable client's subscriptions alive for
+   *        the timeout period
+   * @throws IllegalStateException if the pool is still in use
-  
+
+   * 
-  
+
-   * Indicates whether this Pool has been
-   * destroyed.
+   * Indicates whether this Pool has been destroyed.
-  
+
-   * If this pool was configured to to use thread local connections,
-   * then this method will release the connection cached for the calling thread.
-   * The connection will then be available for use by other threads.
+   * If this pool was configured to to use thread local connections, then this method will release
+   * the connection cached for the calling thread. The connection will then be available for use by
+   * other threads.
-   * If this pool is not using thread local connections, this method
-   * will have no effect.
+   * If this pool is not using thread local connections, this method will have no effect.
-  
+
-   * Returns the QueryService for this Pool. The query operations performed
-   * using this QueryService will be executed on the servers that are associated
-   * with this pool.
+   * Returns the QueryService for this Pool. The query operations performed using this QueryService
+   * will be executed on the servers that are associated with this pool.
-   * Returns the approximate number of pending subscription events maintained at
-   * server for this durable client pool at the time it (re)connected to the
-   * server. Server would start dispatching these events to this durable client
-   * pool when it receives {@link ClientCache#readyForEvents()} from it.
+   * Returns the approximate number of pending subscription events maintained at server for this
+   * durable client pool at the time it (re)connected to the server. Server would start dispatching
+   * these events to this durable client pool when it receives {@link ClientCache#readyForEvents()}
+   * from it.
-   * Durable clients can call this method on reconnect to assess the amount of
-   * 'stale' data i.e. events accumulated at server while this client was away
-   * and, importantly, before calling {@link ClientCache#readyForEvents()}.
+   * Durable clients can call this method on reconnect to assess the amount of 'stale' data i.e.
+   * events accumulated at server while this client was away and, importantly, before calling
+   * {@link ClientCache#readyForEvents()}.
-   * Any number of invocations of this method during a single session will
-   * return the same value.
+   * Any number of invocations of this method during a single session will return the same value.
-   * It may return a zero value if there are no events pending at server for
-   * this client pool. A negative value returned tells us that no queue was
-   * available at server for this client pool.
+   * It may return a zero value if there are no events pending at server for this client pool. A
+   * negative value returned tells us that no queue was available at server for this client pool.
-   * 'durable-client-timeout' period elapsed and hence its subscription queue at
-   * server was removed, possibly causing data loss.
+   * 'durable-client-timeout' period elapsed and hence its subscription queue at server was removed,
+   * possibly causing data loss.
-   * A value -2 indicates that this client pool connected to server for the
-   * first time.
+   * A value -2 indicates that this client pool connected to server for the first time.
-   * @return int The number of subscription events maintained at server for this
-   *         durable client pool at the time this pool (re)connected. A negative
-   *         value indicates no queue was found for this client pool.
-   * @throws IllegalStateException
-   *           If called by a non-durable client or if invoked any time after
-   *           invocation of {@link ClientCache#readyForEvents()}.
+   * @return int The number of subscription events maintained at server for this durable client pool
+   *         at the time this pool (re)connected. A negative value indicates no queue was found for
+   *         this client pool.
+   * @throws IllegalStateException If called by a non-durable client or if invoked any time after
+   *         invocation of {@link ClientCache#readyForEvents()}.

MOV66 MOV66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66