GEODE-4541: remove singleton calls (#1463)

* removed getAnyInstance call from PartitionedRegionHelper

* removed getInstance call from CacheServerLauncher

* removed getAnyInstance call from EventStateHelper

* DistributedPutAllOperation no longer calls GemFireCacheImpl.getInstance

* EntryEventImpl no longer calls getInstance.
This fix requires that when an EntryEventImpl is deserialized
that setRegion will be called on it before the values are accessed.
Also encapsulated the "region" field and got rid of getLocalRegion
in favor of getRegion.

-  public transient LocalRegion region;
+  private transient LocalRegion region;
-        this.newValue =
-            CachedDeserializableFactory.create(this.newValueBytes, GemFireCacheImpl.getInstance());
+        this.newValue = null; // set later in generateNewValueFromBytesIfNeeded
+        this.newValueBytes = null;
+        this.cachedSerializedNewValue = null;
-      this.oldValue =
-          CachedDeserializableFactory.create(this.oldValueBytes, GemFireCacheImpl.getInstance());
+      this.oldValue = null; // set later in basicGetOldValue
+      this.oldValueBytes = null;
-    this.keyInfo = this.region.getKeyInfo(key);
+    this.keyInfo = region.getKeyInfo(key);
-    this.keyInfo = this.region.getKeyInfo(key, newVal, callbackArgument);
+    this.keyInfo = region.getKeyInfo(key, newVal, callbackArgument);
-      basicSetNewValue(newVal);
+      basicSetNewValue(newVal, false);
-    this.txId = this.region.getTXId();
+    this.txId = region.getTXId();
-    region = other.region;
+    setRegion(other.getRegion());
-    basicSetNewValue(other.basicGetNewValue());
+    basicSetNewValue(other.basicGetNewValue(), false);
-      if (isOriginRemote() && this.region.isProxy()) {
+      if (isOriginRemote() && getRegion().isProxy()) {
-              return oldValueCD.getDeserializedWritableCopy(this.region, this.re);
+              return oldValueCD.getDeserializedWritableCopy(getRegion(), this.re);
-              return oldValueCD.getDeserializedValue(this.region, this.re);
+              return oldValueCD.getDeserializedValue(getRegion(), this.re);
-        result = this.region.getValueInVMOrDiskWithoutFaultIn(getKey());
+        result = getRegion().getValueInVMOrDiskWithoutFaultIn(getKey());
-  protected void basicSetNewValue(@Retained(ENTRY_EVENT_NEW_VALUE) Object v) {
+  protected void basicSetNewValue(@Retained(ENTRY_EVENT_NEW_VALUE) Object v,
+      boolean clearCachedSerializedAndBytes) {
-    this.cachedSerializedNewValue = null;
+    if (clearCachedSerializedAndBytes) {
+      this.newValueBytes = null;
+      this.cachedSerializedNewValue = null;
+    }
+  }
+
+  private void generateNewValueFromBytesIfNeeded() {
+    if (this.newValue != null) {
+      // no need to generate a new value
+      return;
+    }
+    byte[] bytes = this.newValueBytes;
+    if (bytes != null) {
+      this.newValue = CachedDeserializableFactory.create(bytes, getRegion().getCache());
+    }
+    generateNewValueFromBytesIfNeeded();
+    this.oldValueBytes = null;
+          this.oldValueBytes = null;
+          this.oldValueBytes = null;
+    if (result == null) {
+      byte[] bytes = this.oldValueBytes;
+      if (bytes != null) {
+        result = CachedDeserializableFactory.create(bytes, getRegion().getCache());
+        this.oldValue = result;
+      }
+    }
-            v = newValueCD.getDeserializedWritableCopy(this.region, this.re);
+            v = newValueCD.getDeserializedWritableCopy(getRegion(), this.re);
-            v = newValueCD.getDeserializedValue(this.region, this.re);
+            v = newValueCD.getDeserializedValue(getRegion(), this.re);
-    basicSetNewValue(obj);
+    basicSetNewValue(obj, true);
-      if (getCachedSerializedNewValue() != null) {
-        importer.importNewBytes(getCachedSerializedNewValue(), true);
-        return;
-      } else if (this.newValueBytes != null && this.newValue instanceof CachedDeserializable) {
-        importer.importNewBytes(this.newValueBytes, true);
+      byte[] serializedNewValue = getCachedSerializedNewValue();
+      if (serializedNewValue == null) {
+        serializedNewValue = this.newValueBytes;
+      }
+      if (serializedNewValue != null) {
+        importer.importNewBytes(serializedNewValue, true);
-      if (this.oldValueBytes != null && this.oldValue instanceof CachedDeserializable) {
+      if (this.oldValueBytes != null) {
-    basicSetNewValue(getCachedDeserializable(obj, this));
+    basicSetNewValue(getCachedDeserializable(obj, this), false);
+    basicSetNewValue(newVal, false);
-    basicSetNewValue(newVal);
-    this.oldValueBytes = serializedOldValue;
+    this.oldValueBytes = serializedOldValue;
-    if (this.oldValue == null) {
+    if (this.oldValue == null && this.oldValueBytes == null) {
-        if (requireOldValue || areOldValuesEnabled() || this.region instanceof HARegion // fix for
-                                                                                        // bug
-        // 37909
-        ) {
+        if (requireOldValue || areOldValuesEnabled() || getRegion() instanceof HARegion) {
-          if (ov == null)
+          if (ov == null) {
+          }
-      FilterProfile fp = this.region.getFilterProfile();
+      FilterProfile fp = getRegion().getFilterProfile();
-    if (this.deltaBytes != null && this.newValue == null) {
+    if (this.deltaBytes != null && this.newValue == null && this.newValueBytes == null) {
-      this.region.generateAndSetVersionTag(this, reentry);
+      getRegion().generateAndSetVersionTag(this, reentry);
+    generateNewValueFromBytesIfNeeded();
-      this.region.regionInvalid = false;
+      getRegion().regionInvalid = false;
-    if (v instanceof org.apache.geode.Delta && region.isUsedForPartitionedRegionBucket()) {
+    if (v instanceof org.apache.geode.Delta && getRegion().isUsedForPartitionedRegionBucket()) {
-        vSize = CachedDeserializableFactory.calcMemSize(v, region.getObjectSizer(), false);
+        vSize = CachedDeserializableFactory.calcMemSize(v, getRegion().getObjectSizer(), false);
-      v = CachedDeserializableFactory.create(v, vSize, region.getCache());
-      basicSetNewValue(v);
+      v = CachedDeserializableFactory.create(v, vSize, getRegion().getCache());
+      basicSetNewValue(v, true);
-    Object preparedV = reentry.prepareValueForCache(this.region, v, this, false);
+    Object preparedV = reentry.prepareValueForCache(getRegion(), v, this, false);
-          basicSetNewValue(v);
+          basicSetNewValue(v, false);
-            IndexUtils.getIndexManager(this.region.getCache(), this.region, false);
+            IndexUtils.getIndexManager(getRegion().getCache(), getRegion(), false);
-      lr = this.region;
+      lr = getRegion();
-    if (!this.region.hasSeenEvent(this)) {
+    if (!getRegion().hasSeenEvent(this)) {
-        this.region.getCachePerfStats().incDeltaFailedUpdates();
+        getRegion().getCachePerfStats().incDeltaFailedUpdates();
-      FilterProfile fp = this.region.getFilterProfile();
+      FilterProfile fp = getRegion().getFilterProfile();
-      boolean copy = this.region.getCompressor() == null && (this.region.isCopyOnRead()
-          || this.region.getCloningEnabled() || (fp != null && fp.getCqCount() > 0));
+      boolean copy = getRegion().getCompressor() == null && (getRegion().isCopyOnRead()
+          || getRegion().getCloningEnabled() || (fp != null && fp.getCqCount() > 0));
-          value = ((CachedDeserializable) value).getDeserializedWritableCopy(this.region, re);
+          value = ((CachedDeserializable) value).getDeserializedWritableCopy(getRegion(), re);
-          value = ((CachedDeserializable) value).getDeserializedValue(this.region, re);
+          value = ((CachedDeserializable) value).getDeserializedValue(getRegion(), re);
-        this.region.getCachePerfStats().endDeltaUpdate(start);
+        getRegion().getCachePerfStats().endDeltaUpdate(start);
-          this.region.getCachePerfStats().incDeltaFailedUpdates();
+          getRegion().getCachePerfStats().incDeltaFailedUpdates();
-              CachedDeserializableFactory.calcMemSize(value, region.getObjectSizer(), false);
+              CachedDeserializableFactory.calcMemSize(value, getRegion().getObjectSizer(), false);
-      this.region.getCachePerfStats().incDeltaFailedUpdates();
+      getRegion().getCachePerfStats().incDeltaFailedUpdates();
-      RegionEntry re = this.region.getRegionEntry(getKey());
+      RegionEntry re = getRegion().getRegionEntry(getKey());
-      Object v = re.getValueRetain(this.region, true);
+      Object v = re.getValueRetain(getRegion(), true);
-    if (this.region instanceof HARegion) {
+    if (getRegion() instanceof HARegion) {
+    if (this.newValueBytes != null) {
+      return true;
+    }
+    if (this.oldValueBytes != null) {
+      return true;
+    }
-    if (isOriginRemote() && this.region.isProxy()) {
+    if (isOriginRemote() && getRegion().isProxy()) {
-      return new SerializedCacheValueImpl(this, this.region, this.re, cd, this.oldValueBytes);
+      return new SerializedCacheValueImpl(this, getRegion(), this.re, cd, this.oldValueBytes);
-
-  public LocalRegion getLocalRegion() {
-    return this.region;
-  }
-
-    RegionEntry reentry = this.region.entries.getEntry(this.getKey());
+    RegionEntry reentry = getRegion().entries.getEntry(this.getKey());
-      Object v = reentry.getValueOffHeapOrDiskWithoutFaultIn(this.region);
+      Object v = reentry.getValueOffHeapOrDiskWithoutFaultIn(getRegion());
-      LocalRegion region = this.getLocalRegion();
+      LocalRegion region = this.getRegion();
-    return PeerTypeRegistration.REGION_FULL_PATH.equals(this.region.getFullPath());
+    return PeerTypeRegistration.REGION_FULL_PATH.equals(getRegion().getFullPath());
-    return versionTag == null && region.getConcurrencyChecksEnabled()
-        && region.getServerProxy() != null && !op.isLocal() && !isOriginRemote();
+    return versionTag == null && getRegion().getConcurrencyChecksEnabled()
+        && getRegion().getServerProxy() != null && !op.isLocal() && !isOriginRemote();
-    LocalRegion lr = this.region;
+    LocalRegion lr = getRegion();

MOV31 UPD83 INS44 UPD83 INS39 UPD42 MOV21 MOV21 INS39 INS42 INS25 INS25 INS60 INS25 INS21 INS21 INS25 INS21 INS25 INS25 INS32 INS42 INS8 INS27 INS8 INS5 INS59 INS27 INS8 INS32 INS7 INS27 INS8 INS27 INS27 INS32 MOV27 INS8 INS27 INS8 INS21 INS42 INS32 INS9 INS21 MOV21 INS22 INS33 INS41 INS39 INS85 INS42 MOV22 INS42 INS33 INS21 INS42 INS22 INS33 INS42 INS33 INS60 INS25 INS9 INS60 INS25 INS9 INS9 MOV27 INS27 MOV27 INS27 INS42 INS32 INS41 INS22 INS33 INS41 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS7 MOV52 UPD42 MOV42 INS7 INS52 INS42 MOV8 INS5 INS59 INS27 INS8 INS5 INS59 INS27 MOV8 MOV27 INS22 INS33 INS22 INS33 INS32 INS32 INS32 INS42 INS9 INS52 INS42 INS9 INS32 INS32 INS42 INS21 INS21 INS33 INS22 INS33 INS9 INS22 INS33 MOV22 INS32 INS25 MOV25 INS39 INS85 INS42 MOV22 INS42 INS33 INS21 INS21 INS39 INS85 INS42 MOV32 INS42 INS33 INS42 INS52 INS42 INS52 INS42 INS32 UPD42 MOV42 INS9 INS42 INS32 INS42 MOV8 INS42 INS32 INS32 INS42 INS7 INS7 INS52 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS32 INS42 INS8 MOV38 INS7 INS7 INS7 INS32 INS42 INS32 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS32 UPD42 INS33 INS22 INS33 INS22 INS33 INS42 INS32 INS42 MOV21 INS21 INS41 INS21 INS42 INS32 MOV22 INS42 INS42 MOV22 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS52 INS42 INS52 INS42 INS32 INS42 INS7 INS7 INS42 INS42 INS42 INS32 INS32 INS8 UPD42 MOV42 INS32 INS32 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS22 INS33 INS22 INS33 INS32 INS42 INS42 MOV21 INS32 INS9 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS52 INS42 INS52 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 INS32 UPD42 INS32 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 INS32 MOV22 INS32 MOV22 INS32 INS32 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL40 DEL7 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL22 DEL41 DEL42 DEL41 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL9 DEL32 DEL41 DEL42 DEL32 DEL42 DEL43 DEL62 DEL27 DEL25 DEL42 DEL43 DEL62 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22