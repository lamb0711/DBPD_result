Merge branch 'release/1.0.0-incubating.M3'

+import java.util.concurrent.locks.Lock;
-import com.gemstone.gemfire.cache.server.CacheServer;
-  
+  private final Lock latestViewReadLock = latestViewLock.readLock();
+  private final Lock latestViewWriteLock = latestViewLock.writeLock();
+
-      "gemfire.shunned-member-timeout", 300).intValue();
+      DistributionConfig.GEMFIRE_PREFIX + "shunned-member-timeout", 300).intValue();
-   @since 5.0
+   @since GemFire 5.0
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-    surpriseMemberTimeout = Integer.getInteger("gemfire.surprise-member-timeout", surpriseMemberTimeout).intValue();
+    surpriseMemberTimeout = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "surprise-member-timeout", surpriseMemberTimeout).intValue();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-            latestViewLock.writeLock().lock();
+            latestViewWriteLock.lock();
-              latestViewLock.writeLock().unlock();
+              latestViewWriteLock.unlock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-    // First grab the lock: check the sender against our stabilized view.
-    latestViewLock.writeLock().lock();
-    try {
-      if (isShunned(m)) {
-        if (msg instanceof StartupMessage) {
-          endShun(m);
+    // If this member is shunned or new, grab the latestViewWriteLock: update the appropriate data structure.
+    //    synchronized (latestViewLock) {
+    if (isShunnedOrNew(m)) {
+      latestViewWriteLock.lock();
+      try {
+        if (isShunned(m)) {
+          if (msg instanceof StartupMessage) {
+            endShun(m);
+          } else {
+            // fix for bug 41538 - sick alert listener causes deadlock
+            // due to view latestViewReadWriteLock being held during messaging
+            shunned = true;
+          }
-        else {
-          // fix for bug 41538 - sick alert listener causes deadlock
-          // due to view lock being held during messaging
-          shunned = true;
+
+        if (!shunned) {
+          // If it's a new sender, wait our turn, generate the event
+          if (isNew(m)) {
+            shunned = !addSurpriseMember(m);
+          }
-      } // isShunned
-
-      if (!shunned) {
-        isNew = !latestView.contains(m) && !surpriseMembers.containsKey(m);
-
-        // If it's a new sender, wait our turn, generate the event
-        if (isNew) {
-          shunned = !addSurpriseMember(m);
-        } // isNew
+      } finally {
+        latestViewWriteLock.unlock();
-
-      // Latch the view before we unlock
-    } finally {
-      latestViewLock.writeLock().unlock();
-    
+
-      logger.info("Membership: Ignoring message from shunned member <{}>:{}", m, msg);
+      if (logger.isTraceEnabled(LogMarker.DISTRIBUTION_VIEWS)) {
+        logger.trace(LogMarker.DISTRIBUTION_VIEWS, "Membership: Ignoring message from shunned member <{}>:{}", m, msg);
+      }
-    
+
-  /**
-   * Process a new view object, or place on the startup queue
-   * @param viewArg the new view
-   */
+
+    /**
+     * Process a new view object, or place on the startup queue
+     * @param viewArg the new view
+     */
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-    latestViewLock.readLock().lock();
+    latestViewReadLock.lock();
-    latestViewLock.readLock().unlock();
+    latestViewReadLock.unlock();
-    latestViewLock.readLock().lock();
+    latestViewReadLock.lock();
-      latestViewLock.readLock().unlock();
+      latestViewReadLock.unlock();
-    latestViewLock.readLock().lock();
+    latestViewReadLock.lock();
-      latestViewLock.readLock().unlock();
+      latestViewReadLock.unlock();
-    latestViewLock.readLock().lock();
+    latestViewReadLock.lock();
-    latestViewLock.readLock().unlock();
+    latestViewReadLock.unlock();
-        latestViewLock.writeLock().lock();
+        latestViewWriteLock.lock();
-          latestViewLock.writeLock().unlock();
+          latestViewWriteLock.unlock();
-      if (!Boolean.getBoolean("gemfire.autoReconnect-useCacheXMLFile")
-          && !cache.isSqlfSystem() && !sharedConfigEnabled) {
+      if (!Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "autoReconnect-useCacheXMLFile")
+          && !sharedConfigEnabled) {
-      latestViewLock.writeLock().lock();
+      latestViewReadLock.lock();
-        latestViewLock.writeLock().unlock();
+        latestViewReadLock.unlock();
-        if (services.getCancelCriterion().cancelInProgress() != null) {
+        if (services.getCancelCriterion().isCancelInProgress()) {
-    if (services.getCancelCriterion().cancelInProgress() != null) {
+    if (services.getCancelCriterion().isCancelInProgress()) {
-      if(m != null) {
+      if (m != null) {
-          latestViewLock.readLock().lock();
+          latestViewReadLock.lock();
-            latestViewLock.readLock().unlock();
+            latestViewReadLock.unlock();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-    latestViewLock.writeLock().unlock();
+    latestViewWriteLock.unlock();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-   * 
+   *
-    latestViewLock.writeLock().lock();
+    if (!shunnedMembers.containsKey(m)) {
+      return false;
+    }
+
+    latestViewWriteLock.lock();
-      if (!shunnedMembers.containsKey(m))
-        return false;
-      
-      if (shunTime + SHUNNED_SUNSET * 1000 > now)
+      if (shunTime + SHUNNED_SUNSET * 1000 > now) {
+      }
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
+  private final boolean isShunnedOrNew(final InternalDistributedMember m) {
+    latestViewReadLock.lock();
+    try {
+      return shunnedMembers.containsKey(m) || isNew(m);
+    } finally { // synchronized
+      latestViewReadLock.unlock();
+    }
+  }
+
+  // must be invoked under view read or write lock
+  private final boolean isNew(final InternalDistributedMember m) {
+    return !latestView.contains(m) && !surpriseMembers.containsKey(m);
+  }
+
-    latestViewLock.readLock().lock();
+    latestViewReadLock.lock();
-      latestViewLock.readLock().unlock();
+      latestViewReadLock.unlock();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-        latestViewLock.readLock().lock();
+        latestViewReadLock.lock();
-          latestViewLock.readLock().unlock();
+          latestViewReadLock.unlock();
-        && services.getCancelCriterion().cancelInProgress()==null );
+        && !services.getCancelCriterion().isCancelInProgress());
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();
-    latestViewLock.writeLock().lock();
+    latestViewWriteLock.lock();
-      latestViewLock.writeLock().unlock();
+      latestViewWriteLock.unlock();

MOV26 UPD40 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 MOV8 INS42 INS42 MOV32 INS42 INS42 MOV32 INS25 MOV25 INS83 INS43 INS42 INS21 INS54 INS83 INS43 INS42 INS41 UPD66 INS32 INS8 MOV32 INS8 INS42 INS32 INS8 INS8 INS42 MOV27 UPD27 MOV27 INS27 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV21 MOV54 INS25 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV41 UPD42 MOV42 INS42 INS42 INS41 INS21 UPD42 MOV42 UPD42 MOV42 INS42 MOV36 INS38 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS45 INS32 INS8 INS8 INS27 INS32 MOV32 UPD42 MOV42 UPD42 MOV42 INS27 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS40 MOV21 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV41 UPD42 MOV42 INS32 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS45 INS8 MOV32 INS42 INS42 INS42 INS42 INS42 MOV25 UPD42 MOV42 UPD42 INS40 UPD42 MOV42 INS27 UPD42 MOV42 UPD42 UPD42 MOV42 INS32 INS40 INS45 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL33 DEL27 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL7 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL33 DEL42 DEL27 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32