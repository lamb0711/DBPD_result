Merge branch 'release/1.3.0'

+import org.apache.geode.cache.EntryExistsException;
+import org.apache.geode.cache.TransactionDataNotColocatedException;
+import org.apache.geode.cache.TransactionException;
+import org.apache.geode.internal.cache.event.DistributedEventTracker;
+import org.apache.geode.internal.cache.event.EventTracker;
-import org.apache.geode.internal.cache.partitioned.Bucket;
+import org.apache.geode.internal.cache.partitioned.RemoteSizeMessage;
-  public void createEventTracker() {
-    this.eventTracker = new EventTracker(this);
-    this.eventTracker.start();
+  protected EventTracker createEventTracker() {
+    EventTracker tracker = new DistributedEventTracker(cache, stopper, getName());
+    tracker.start();
+    return tracker;
+  @Override
+  public boolean hasSeenEvent(EntryEventImpl event) {
+    boolean isDuplicate = false;
+
+    isDuplicate = getEventTracker().hasSeenEvent(event);
+    if (isDuplicate) {
+      markEventAsDuplicate(event);
+    } else {
+      // bug #48205 - a retried PR operation may already have a version assigned to it
+      // in another VM
+      if (event.isPossibleDuplicate() && event.getRegion().concurrencyChecksEnabled
+          && event.getVersionTag() == null && event.getEventId() != null) {
+        boolean isBulkOp = event.getOperation().isPutAll() || event.getOperation().isRemoveAll();
+        VersionTag tag =
+            FindVersionTagOperation.findVersionTag(event.getRegion(), event.getEventId(), isBulkOp);
+        event.setVersionTag(tag);
+      }
+    }
+    return isDuplicate;
+  }
+
+  private void markEventAsDuplicate(EntryEventImpl event) {
+    event.setPossibleDuplicate(true);
+    if (concurrencyChecksEnabled && event.getVersionTag() == null) {
+      if (event.isBulkOpInProgress()) {
+        event.setVersionTag(getEventTracker().findVersionTagForBulkOp(event.getEventId()));
+      } else {
+        event.setVersionTag(getEventTracker().findVersionTagForSequence(event.getEventId()));
+      }
+    }
+  }
+
-    validateCallbackArg(aCallbackArgument);
-      if (this.eventTracker != null) {
-        this.eventTracker.setInitialized();
-      }
+      getEventTracker().setInitialized();
+  public void basicBridgeRemove(Object key, Object expectedOldValue, Object p_callbackArg,
+      ClientProxyMembershipID memberId, boolean fromClient, EntryEventImpl clientEvent)
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
+    Lock lock = getDistributedLockIfGlobal(key);
+    try {
+      super.basicBridgeRemove(key, expectedOldValue, p_callbackArg, memberId, fromClient,
+          clientEvent);
+    } finally {
+      if (lock != null) {
+        logger.debug("releasing distributed lock on {}", key);
+        lock.unlock();
+        getLockService().freeResources(key);
+      }
+    }
+  }
+
+  @Override
+  public void basicBridgeDestroy(Object key, Object p_callbackArg, ClientProxyMembershipID memberId,
+      boolean fromClient, EntryEventImpl clientEvent)
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
+    Lock lock = getDistributedLockIfGlobal(key);
+    try {
+      super.basicBridgeDestroy(key, p_callbackArg, memberId, fromClient, clientEvent);
+    } finally {
+      if (lock != null) {
+        logger.debug("releasing distributed lock on {}", key);
+        lock.unlock();
+        getLockService().freeResources(key);
+      }
+    }
+  }
+
+  @Override
+  public void basicBridgeInvalidate(Object key, Object p_callbackArg,
+      ClientProxyMembershipID memberId, boolean fromClient, EntryEventImpl clientEvent)
+      throws TimeoutException, EntryNotFoundException, CacheWriterException {
+    Lock lock = getDistributedLockIfGlobal(key);
+    try {
+      super.basicBridgeInvalidate(key, p_callbackArg, memberId, fromClient, clientEvent);
+    } finally {
+      if (lock != null) {
+        logger.debug("releasing distributed lock on {}", key);
+        lock.unlock();
+      }
+    }
+  }
+
+  @Override
-      // set the tail key so that the event is passed to GatewaySender queues.
-      // if the tailKey is not set, the event gets filtered out in ParallelGatewaySenderQueue
-      if (this instanceof BucketRegion) {
-        if (((BucketRegion) this).getPartitionedRegion().isParallelWanEnabled())
-          ((BucketRegion) this).handleWANEvent(event);
-      }
+
+  /**
+   * Returns the size in this region.
+   *
+   * This is used in a transaction to find the size of the region on the transaction hosting node.
+   *
+   * @param target the host of the transaction TXState
+   * @return the number of entries in this region
+   */
+  public int getRegionSize(DistributedMember target) {
+    try {
+      RemoteSizeMessage.SizeResponse response =
+          RemoteSizeMessage.send(Collections.singleton(target), this);
+      return response.waitForSize();
+    } catch (RegionDestroyedException rde) {
+      throw new TransactionDataNotColocatedException(
+          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
+              .toLocalizedString(rde.getRegionFullPath()),
+          rde);
+    } catch (Exception e) {
+      throw new TransactionException(e);
+    }
+  }
+
-    final RegionFunctionContextImpl context = new RegionFunctionContextImpl(function.getId(), this,
-        args, filter, null, null, resultSender, isReExecute);
+    final RegionFunctionContextImpl context = new RegionFunctionContextImpl(cache, function.getId(),
+        this, args, filter, null, null, resultSender, isReExecute);
-    final RegionFunctionContextImpl context = new RegionFunctionContextImpl(function.getId(),
+    final RegionFunctionContextImpl context = new RegionFunctionContextImpl(cache, function.getId(),

INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 MOV78 INS83 INS43 INS42 INS8 INS78 UPD39 UPD42 INS44 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS60 INS21 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS43 INS42 INS21 INS25 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS42 INS42 INS42 INS60 INS54 INS65 INS65 INS65 INS43 INS42 INS54 MOV43 INS59 INS32 INS42 INS42 INS39 INS59 INS42 INS8 INS8 INS42 INS42 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS42 INS43 INS59 INS8 INS8 INS66 INS66 INS42 INS66 INS66 INS42 INS8 INS12 INS12 INS42 INS14 INS42 INS42 INS42 INS9 INS42 INS32 INS21 INS25 INS42 INS42 INS9 INS42 INS27 INS25 MOV21 INS42 INS42 INS32 INS21 INS25 INS42 INS42 INS32 INS21 INS25 INS42 INS42 INS32 INS21 INS25 INS60 INS41 INS44 INS8 INS44 INS8 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS27 INS8 INS32 INS33 INS32 INS8 INS8 INS42 INS42 INS48 INS27 INS8 INS42 INS42 INS48 INS27 INS8 INS42 INS42 INS48 INS27 INS8 INS43 INS59 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS60 INS60 MOV21 INS42 INS42 INS42 INS42 INS21 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS40 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS14 INS32 INS22 INS27 INS32 INS33 INS39 INS59 INS43 INS59 INS32 INS32 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS52 INS43 INS32 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS32 INS33 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL14 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL8 DEL52 DEL42 DEL43 DEL62 DEL42 DEL43 DEL52 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL52 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL25