Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * If true, we randomize the amount of time we wait before polling a
-   * {@link WaitCriterion}.
+   * If true, we randomize the amount of time we wait before polling a {@link WaitCriterion}.
-  
+
-  protected Jitter() {
-  }
+  protected Jitter() {}
-   * <code>intervalMillis</code> milliseconds. If jittering is disabled then 
-   * the value returned will be equal to intervalMillis.
+   * <code>intervalMillis</code> milliseconds. If jittering is disabled then the value returned will
+   * be equal to intervalMillis.
-  
+
-  
+
-  
+
-   * If jittering is enabled then returns a jittered interval up to a maximum
-   * of <code>intervalMillis</code> milliseconds, inclusive.
+   * If jittering is enabled then returns a jittered interval up to a maximum of
+   * <code>intervalMillis</code> milliseconds, inclusive.
-    
+
-      return (int)intervalMillis; // Don't ever jitter anything below this.
+      return (int) intervalMillis; // Don't ever jitter anything below this.
-      maxValue = (int)intervalMillis;
+      maxValue = (int) intervalMillis;

UPD66 UPD66 UPD66 UPD66 UPD66