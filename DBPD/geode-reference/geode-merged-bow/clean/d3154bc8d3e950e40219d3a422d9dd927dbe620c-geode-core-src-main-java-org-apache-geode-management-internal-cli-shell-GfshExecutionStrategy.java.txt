GEODE-5971: have command pipeline send ResultModel json across the wire (#3495)

Co-authored-by: Owen Nichols <onichols@pivotal.io>
-import org.apache.commons.lang3.StringUtils;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.CommandResponse;
-import org.apache.geode.management.internal.cli.CommandResponseBuilder;
-import org.apache.geode.management.internal.cli.i18n.CliStrings;
-import org.apache.geode.management.internal.cli.result.CommandResult;
-import org.apache.geode.management.internal.cli.result.ResultBuilder;
+   *         this returns a ModelCommandResult for all the online commands. For offline-commands,
+   *         this can return either a ModelCommandResult or ExitShellRequest
-    Result result;
-    result = executeOnRemote((GfshParseResult) parseResult);
-    return result;
+    ResultModel resultModel = executeOnRemote((GfshParseResult) parseResult);
+
+    if (resultModel == null) {
+      return null;
+    }
+    return new ModelCommandResult(resultModel);
-  private Result executeOnRemote(GfshParseResult parseResult) {
+  private ResultModel executeOnRemote(GfshParseResult parseResult) {
-    boolean useResultModel = false;
-        return ResultBuilder.createBadConfigurationErrorResult("Interceptor Configuration Error");
+        return ResultModel.createError("Interceptor Configuration Error");
-      Object preExecResult = interceptor.preExecution(parseResult);
-      if (preExecResult instanceof ResultModel) {
-        useResultModel = true;
-        if (((ResultModel) preExecResult).getStatus() != Status.OK) {
-          return new ModelCommandResult((ResultModel) preExecResult);
-        }
-      } else { // Must be Result
-        if (Status.ERROR.equals(((Result) preExecResult).getStatus())) {
-          return (Result) preExecResult;
-        }
+      ResultModel preExecResult = interceptor.preExecution(parseResult);
+      if (preExecResult.getStatus() != Status.OK) {
+        return preExecResult;
-
-      // when the preExecution yields a FileResult, we will get the fileData out of it
-      if (preExecResult instanceof ResultModel) {
-        ResultModel fileResult = (ResultModel) preExecResult;
-        fileData = fileResult.getFileList();
-      }
+      fileData = preExecResult.getFileList();
-        return ResultBuilder
-            .createBadResponseErrorResult("Response was null for: " + parseResult.getUserInput());
+        return ResultModel.createError("Response was null for: " + parseResult.getUserInput());
-      return ResultBuilder
-          .createGemFireUnAuthorizedErrorResult("Unauthorized. Reason : " + e.getMessage());
+      return ResultModel.createError("Unauthorized. Reason : " + e.getMessage());
-      e.printStackTrace();
-      return ResultBuilder.createBadResponseErrorResult(
+      return ResultModel.createError(
-    // CommandResult/ResultModel object
+    // ResultModel object
-    Object commandResult = null;
+    ResultModel commandResult = null;
-      try {
-        // if it's ResultModel
-        commandResult = ResultModel.fromJson((String) response);
-        useResultModel = true;
-      } catch (Exception ex) {
-        // if it's a CommandResult
-        CommandResponse commandResponse =
-            CommandResponseBuilder.prepareCommandResponseFromJson((String) response);
+      commandResult = ResultModel.fromJson((String) response);
-        if (commandResponse.isFailedToPersist()) {
-          shell.printAsSevere(CliStrings.SHARED_CONFIGURATION_FAILED_TO_PERSIST_COMMAND_CHANGES);
-          logWrapper.severe(CliStrings.SHARED_CONFIGURATION_FAILED_TO_PERSIST_COMMAND_CHANGES);
-        }
-
-        String debugInfo = commandResponse.getDebugInfo();
-        if (StringUtils.isNotBlank(debugInfo)) {
-          debugInfo = debugInfo.replaceAll("\n\n\n", "\n");
-          debugInfo = debugInfo.replaceAll("\n\n", "\n");
-          debugInfo =
-              debugInfo.replaceAll("\n", "\n[From Manager : " + commandResponse.getSender() + "]");
-          debugInfo = "[From Manager : " + commandResponse.getSender() + "]" + debugInfo;
-          this.logWrapper.info(debugInfo);
-        }
-        commandResult = ResultBuilder.fromJson((String) response);
-      }
-        if (useResultModel) {
-          commandResult =
-              interceptor.postExecution(parseResult, (ResultModel) commandResult, tempFile);
-        } else {
-          commandResult =
-              interceptor.postExecution(parseResult, (CommandResult) commandResult, tempFile);
-        }
+        commandResult =
+            interceptor.postExecution(parseResult, commandResult, tempFile);
+
-        commandResult = ResultBuilder.createGemFireErrorResult(e.getMessage());
+        commandResult = ResultModel.createError(e.getMessage());
-      commandResult = ResultBuilder
-          .createGemFireErrorResult("Unable to build commandResult using the remote response.");
+      commandResult =
+          ResultModel.createError("Unable to build ResultModel using the remote response.");
-    CommandResult gfshResult;
-    if (commandResult instanceof ResultModel) {
-      gfshResult = new ModelCommandResult((ResultModel) commandResult);
-    } else {
-      gfshResult = (CommandResult) commandResult;
-    }
-
-    return gfshResult;
+    return commandResult;

MOV60 MOV43 INS25 MOV25 INS66 INS66 MOV43 INS27 INS8 INS14 MOV43 MOV62 MOV8 MOV25 UPD42 UPD42 MOV42 UPD42 MOV32 INS42 INS33 INS41 MOV43 INS42 MOV25 MOV21 INS33 MOV43 INS8 MOV21 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL11 DEL36 DEL42 DEL11 DEL14 DEL42 DEL62 DEL42 DEL9 DEL7 DEL21 DEL8 DEL40 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL11 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL11 DEL59 DEL60 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL45 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL45 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL7 DEL21 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11 DEL42 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL8 DEL25