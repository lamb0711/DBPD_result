GEODE-3319 - refactor to use protobuf encoding for primitive types. This now closes #661

+import org.apache.geode.protocol.protobuf.utilities.exception.UnknownProtobufPrimitiveType;
-   * 
+   *
-    BasicTypes.EncodingType resultEncodingType =
-        EncodingTypeTranslator.getEncodingTypeForObject(unencodedValue);
-    byte[] encodedValue = serializationService.encode(resultEncodingType, unencodedValue);
-    return BasicTypes.EncodedValue.newBuilder().setEncodingType(resultEncodingType)
-        .setValue(ByteString.copyFrom(encodedValue)).build();
+
+    try {
+      return createPrimitiveEncodedValue(unencodedValue);
+    } catch (UnknownProtobufPrimitiveType e) {
+      BasicTypes.EncodingType resultEncodingType =
+          EncodingTypeTranslator.getEncodingTypeForObject(unencodedValue);
+      byte[] encodedValue = serializationService.encode(resultEncodingType, unencodedValue);
+      BasicTypes.CustomEncodedValue.Builder customEncodedValueBuilder =
+          BasicTypes.CustomEncodedValue.newBuilder().setEncodingType(resultEncodingType)
+              .setValue(ByteString.copyFrom(encodedValue));
+      return BasicTypes.EncodedValue.newBuilder().setCustomEncodedValue(customEncodedValueBuilder)
+          .build();
+    }
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    BasicTypes.EncodingType encoding = encodedValue.getEncodingType();
-    byte[] bytes = encodedValue.getValue().toByteArray();
-    return serializationService.decode(encoding, bytes);
+
+    if (encodedValue.getValueCase() == BasicTypes.EncodedValue.ValueCase.CUSTOMENCODEDVALUE) {
+      BasicTypes.CustomEncodedValue customEncodedValue = encodedValue.getCustomEncodedValue();
+      return serializationService.decode(customEncodedValue.getEncodingType(),
+          customEncodedValue.getValue().toByteArray());
+    } else {
+      try {
+        return getPrimitiveValueFromEncodedValue(encodedValue);
+      } catch (UnknownProtobufPrimitiveType unknownProtobufPrimitiveType) {
+        throw new UnsupportedEncodingTypeException("Unknown primitive type encoding",
+            unknownProtobufPrimitiveType);
+      }
+    }
+
+
+  /**
+   * This will create an EncodedValue message for a primitive type.
+   *
+   * @param valueToEncode this represents the potential primitive value that needs to be encoded in
+   *        an EncodedValue
+   * @return EncodedValue message with the correct primitive value populated
+   * @throws UnknownProtobufPrimitiveType
+   */
+  static BasicTypes.EncodedValue createPrimitiveEncodedValue(Object valueToEncode)
+      throws UnknownProtobufPrimitiveType {
+    ProtobufPrimitiveTypes protobufPrimitiveTypes =
+        ProtobufPrimitiveTypes.valueOf(valueToEncode.getClass());
+    BasicTypes.EncodedValue.Builder builder = BasicTypes.EncodedValue.newBuilder();
+    switch (protobufPrimitiveTypes) {
+      case INT: {
+        builder.setIntResult((Integer) valueToEncode);
+        break;
+      }
+      case LONG: {
+        builder.setLongResult((Long) valueToEncode);
+        break;
+      }
+      case SHORT: {
+        builder.setShortResult((Short) valueToEncode);
+        break;
+      }
+      case BYTE: {
+        builder.setByteResult((Byte) valueToEncode);
+        break;
+      }
+      case DOUBLE: {
+        builder.setDoubleResult((Double) valueToEncode);
+        break;
+      }
+      case FLOAT: {
+        builder.setFloatResult((Float) valueToEncode);
+        break;
+      }
+      case BINARY: {
+        builder.setBinaryResult(ByteString.copyFrom((byte[]) valueToEncode));
+        break;
+      }
+      case BOOLEAN: {
+        builder.setBooleanResult((Boolean) valueToEncode);
+        break;
+      }
+      case STRING: {
+        builder.setStringResult((String) valueToEncode);
+        break;
+      }
+
+    }
+    return builder.build();
+  }
+
+  static Object getPrimitiveValueFromEncodedValue(BasicTypes.EncodedValue encodedValue)
+      throws UnknownProtobufPrimitiveType {
+    switch (encodedValue.getValueCase()) {
+      case BINARYRESULT:
+        return encodedValue.getBinaryResult().toByteArray();
+      case BOOLEANRESULT:
+        return encodedValue.getBooleanResult();
+      case BYTERESULT:
+        return (byte) encodedValue.getByteResult();
+      case DOUBLERESULT:
+        return encodedValue.getDoubleResult();
+      case FLOATRESULT:
+        return encodedValue.getFloatResult();
+      case INTRESULT:
+        return encodedValue.getIntResult();
+      case LONGRESULT:
+        return encodedValue.getLongResult();
+      case SHORTRESULT:
+        return (short) encodedValue.getShortResult();
+      case STRINGRESULT:
+        return encodedValue.getStringResult();
+      default:
+        throw new UnknownProtobufPrimitiveType(
+            "Unknown primitive type for: " + encodedValue.getValueCase());
+    }
+  }

INS26 INS40 INS31 INS31 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS43 INS42 INS44 INS43 INS8 INS54 INS25 INS65 INS65 INS65 INS65 INS40 INS43 INS42 INS42 INS60 INS60 INS50 INS41 INS42 INS43 INS42 INS42 INS50 INS8 INS12 INS27 INS8 INS8 INS66 INS42 INS66 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS42 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS32 INS40 INS32 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS53 INS41 INS44 MOV8 INS32 INS40 MOV60 INS41 INS54 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS21 INS10 INS42 INS21 INS10 INS42 INS21 INS10 INS42 INS21 INS10 INS42 INS21 INS10 INS42 INS21 INS10 INS42 INS21 INS10 INS42 INS21 INS10 INS42 INS21 INS10 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS11 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS11 INS42 INS32 INS14 INS32 INS43 INS42 INS60 INS42 INS42 UPD43 INS32 INS8 INS12 INS42 INS42 INS32 INS40 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS39 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS32 INS42 INS42 INS43 INS27 INS42 INS42 INS42 INS43 INS59 MOV32 UPD40 UPD42 INS42 INS42 INS32 INS32 MOV41 INS44 INS8 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS40 INS42 INS32 UPD42 UPD42 INS42 INS42 MOV32 MOV42 INS43 INS42 INS53 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS11 INS43 INS42 INS43 INS42 INS42 INS42 INS32 INS42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 MOV5 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS45 INS42 INS40 INS42 INS42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60