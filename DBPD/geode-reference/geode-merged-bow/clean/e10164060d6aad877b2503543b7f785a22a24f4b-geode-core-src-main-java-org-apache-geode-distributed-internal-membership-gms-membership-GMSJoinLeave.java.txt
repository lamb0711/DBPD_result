GEODE-6451 CI Failure: Hang cleaning up after ClusterConfigLocatorRestartDUnitTest.serverRestartsAfterLocatorReconnects

Removed code that scrubbed the current membership view of IDs matching a
new join request.  This code is no longer needed now that we generate a
new UUID for a member when it tries to auto-reconnect.  The new ID of
such a member would never match an old ID.

In practice this code was causing test failures in situations where the
auto-reconnect time was set to a small value.  A member would end up
sending multiple join requests to the same coordinator.  The first would
be used to allow the new member into the cluster but the second, due to
this code, would cause that member to be immediately removed from the
cluster.

The unicast receiver thread was becoming blocked if a
forced disconnect occurred during reconnect because
InternalDistributedSystem.disconnect sychronizes, for some
reason, on GemFireCacheImpl.class.  This reworks that
logic to have the reconnect thread get a
SystemConnectException forcing cleanup of the reconnecting
InternalDistributedSystem in that thread.

+            if (this.isStopping) {
+              break;
+            }
-    logger.debug("received join response {}", response);
+    logger.info("received join response {}", response);
-          || failReason.contains("15806")) {
+          || failReason.contains("15806")
+          || failReason.contains("ForcedDisconnectException")) {
-    services.getManager().forceDisconnect(reason);
+    if (!isJoined) {
+      logger.fatal("BRUCE: forcedDisconnect invoked.  isReconnecting={} isJoined={}",
+          services.getConfig().isReconnecting(), isJoined);
+      joinResponse[0] =
+          new JoinResponseMessage(
+              "Stopping due to ForcedDisconnectException caused by '" + reason + "'", -1);
+      isJoined = false;
+      synchronized (joinResponse) {
+        joinResponse.notifyAll();
+      }
+    } else {
+      services.getManager().forceDisconnect(reason);
+    }
-            logger.info("View Creator is processing {} requests for the next membership view",
-                requests.size());
+            logger.info("View Creator is processing {} requests for the next membership view ({})",
+                requests.size(), requests);
-            // see if an old member ID is being reused. If
-            // so we'll remove it from the new view
-            for (InternalDistributedMember m : oldMembers) {
-              if (mbr.compareTo(m, false) == 0) {
-                oldIDs.add(m);
-                break;
-              }
-            }

INS8 MOV21 INS25 INS38 INS8 MOV8 UPD42 INS42 INS21 INS21 INS21 INS51 INS32 INS7 INS7 INS42 INS8 MOV10 MOV10 INS32 INS42 INS42 INS45 INS32 INS42 INS2 INS14 INS42 INS9 INS21 INS10 INS42 INS42 INS45 INS32 INS42 INS42 INS34 INS43 INS27 INS38 INS32 INS42 INS42 INS42 INS45 INS42 INS45 INS34 INS42 INS42 INS25 INS22 INS8 UPD45 INS42 INS52 INS42 INS10 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL10 DEL8 DEL25 DEL8 DEL70 DEL10