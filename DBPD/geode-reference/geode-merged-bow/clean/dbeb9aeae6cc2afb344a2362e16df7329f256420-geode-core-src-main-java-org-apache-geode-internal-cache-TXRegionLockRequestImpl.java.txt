Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-/** TXRegionLockRequest represents all the locks that need to be made
- * for a single region.
+/**
+ * TXRegionLockRequest represents all the locks that need to be made for a single region.
-  implements org.apache.geode.internal.cache.locks.TXRegionLockRequest
-{
+    implements org.apache.geode.internal.cache.locks.TXRegionLockRequest {
-  
+
-  
-  public TXRegionLockRequestImpl(LocalRegion r)
-  {
+
+  public TXRegionLockRequestImpl(LocalRegion r) {
+
-      //Create new temporary HashSet. Fix for defect # 44472.
+      // Create new temporary HashSet. Fix for defect # 44472.
-    	
+
-      final HashSet<Object> tmp = new HashSet<Object>(this.entryKeys.size()
-          + s.size());
+      final HashSet<Object> tmp = new HashSet<Object>(this.entryKeys.size() + s.size());
-  
-  public final void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+
+  public final void fromData(DataInput in) throws IOException, ClassNotFoundException {
-        this.r = (LocalRegion)cache.getRegion(this.regionPath);
+        this.r = (LocalRegion) cache.getRegion(this.regionPath);
-  
-  private final Set<Object> readEntryKeySet(
-      final int size, final DataInput in) throws IOException,
-      ClassNotFoundException {
+
+  private final Set<Object> readEntryKeySet(final int size, final DataInput in)
+      throws IOException, ClassNotFoundException {
-  public static final TXRegionLockRequestImpl createFromData(DataInput in) 
-    throws IOException, ClassNotFoundException
-  {
+  public static final TXRegionLockRequestImpl createFromData(DataInput in)
+      throws IOException, ClassNotFoundException {
-   * Only safe to call in the vm that creates this request.
-   * Once it is serialized this method will return null.
+   * Only safe to call in the vm that creates this request. Once it is serialized this method will
+   * return null.
-    result.append("regionPath=")
-      .append(getRegionFullPath())
-      .append(" keys=")
-      .append(this.entryKeys);
+    result.append("regionPath=").append(getRegionFullPath()).append(" keys=")
+        .append(this.entryKeys);

UPD66 UPD66 UPD66 DEL66