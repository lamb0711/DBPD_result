Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Agent implementation that controls the HTTP server end points used for REST
- * clients to connect gemfire data node.
+ * Agent implementation that controls the HTTP server end points used for REST clients to connect
+ * gemfire data node.
- * The RestAgent is used to start http service in embedded mode on any non
- * manager data node with developer REST APIs service enabled.
+ * The RestAgent is used to start http service in embedded mode on any non manager data node with
+ * developer REST APIs service enabled.
-    final SystemManagementService managementService = (SystemManagementService) ManagementService
-        .getManagementService(cache);
-    return (managementService.getManagementAgent() != null && managementService
-        .getManagementAgent().isHttpServiceRunning());
+    final SystemManagementService managementService =
+        (SystemManagementService) ManagementService.getManagementService(cache);
+    return (managementService.getManagementAgent() != null
+        && managementService.getManagementAgent().isHttpServiceRunning());
-    return (System.getProperty("catalina.base") != null || System.getProperty("catalina.home") != null);
+    return (System.getProperty("catalina.base") != null
+        || System.getProperty("catalina.home") != null);
-    String httpServiceBindAddress = getBindAddressForHttpService();
+    String httpServiceBindAddress = getBindAddressForHttpService(this.config);
-      logger.info("Unable to find GemFire Developer REST API WAR file; the Developer REST Interface for GemFire will not be accessible.");
+      logger.info(
+          "Unable to find GemFire Developer REST API WAR file; the Developer REST Interface for GemFire will not be accessible.");
-        logger.warn("Detected presence of catalina system properties. HTTP service will not be started. To enable the GemFire Developer REST API, please deploy the /geode-web-api WAR file in your application server."); 
+        logger.warn(
+            "Detected presence of catalina system properties. HTTP service will not be started. To enable the GemFire Developer REST API, please deploy the /geode-web-api WAR file in your application server.");
-        this.httpServer = JettyHelper.initJetty(httpServiceBindAddress, port, SSLConfigurationFactory.getSSLConfigForComponent(SecurableCommunicationChannel.WEB));
+        this.httpServer = JettyHelper.initJetty(httpServiceBindAddress, port,
+            SSLConfigurationFactory.getSSLConfigForComponent(SecurableCommunicationChannel.WEB));
-              ((ServerConnector) this.httpServer.getConnectors()[0]).getPort(), httpServiceBindAddress);
+              ((ServerConnector) this.httpServer.getConnectors()[0]).getPort(),
+              httpServiceBindAddress);
-  private String getBindAddressForHttpService() {
-    java.lang.String bindAddress = this.config.getHttpServiceBindAddress();
-    if (StringUtils.isBlank(bindAddress)) {
-      if (StringUtils.isBlank(this.config.getServerBindAddress())) {
-        if (StringUtils.isBlank(this.config.getBindAddress())) {
-          try {
-            bindAddress = SocketCreator.getLocalHost().getHostAddress();
-            logger.info("RestAgent.getBindAddressForHttpService.localhost: " + SocketCreator.getLocalHost().getHostAddress());
-          } catch (UnknownHostException e) {
-            logger.error("LocalHost could not be found.", e);
-            return bindAddress;
-          }
-        } else {
-          bindAddress = this.config.getBindAddress();
-        }
-      } else {
-        bindAddress = this.config.getServerBindAddress();
-      }
+  public static String getBindAddressForHttpService(DistributionConfig config) {
+    String bindAddress = config.getHttpServiceBindAddress();
+    if (!StringUtils.isBlank(bindAddress))
+      return bindAddress;
+
+    bindAddress = config.getServerBindAddress();
+    if (!StringUtils.isBlank(bindAddress))
+      return bindAddress;
+
+    bindAddress = config.getBindAddress();
+    if (!StringUtils.isBlank(bindAddress))
+      return bindAddress;
+
+    try {
+      bindAddress = SocketCreator.getLocalHost().getHostAddress();
+      logger.info("RestAgent.getBindAddressForHttpService.localhost: "
+          + SocketCreator.getLocalHost().getHostAddress());
+    } catch (UnknownHostException e) {
+      logger.error("LocalHost could not be found.", e);
-   * This method will create a REPLICATED region named _ParameterizedQueries__.
-   * In developer REST APIs, this region will be used to store the queryId and
-   * queryString as a key and value respectively.
+   * This method will create a REPLICATED region named _ParameterizedQueries__. In developer REST
+   * APIs, this region will be used to store the queryId and queryString as a key and value
+   * respectively.
-        final AttributesFactory<String, String> attributesFactory = new AttributesFactory<String, String>();
+        final AttributesFactory<String, String> attributesFactory =
+            new AttributesFactory<String, String>();
-        logger.debug("Error creating __ParameterizedQueries__ Region with cause {}",
-            e.getMessage(), e);
+        logger.debug("Error creating __ParameterizedQueries__ Region with cause {}", e.getMessage(),
+            e);

UPD83 INS83 INS44 MOV8 UPD66 UPD66 UPD66 UPD66 INS43 INS42 INS60 INS25 INS21 INS25 INS21 INS25 MOV41 INS42 INS43 INS59 INS38 INS41 INS7 INS38 INS41 INS7 INS38 MOV41 UPD66 UPD66 UPD66 INS42 INS42 INS32 MOV32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 MOV22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8