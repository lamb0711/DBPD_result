GEODE-2847: Get correct version tags for retried bulk operation

-   * a mapping of originator to bulkOp's last status (true means finished processing) applied to
-   * this cache.
+   * a mapping of originator to bulkOps
-   * Keys are instances of @link {@link ThreadIdentifier}, values are instances of
-   * {@link BulkOpProcessed}.
+   * Keys are instances of @link {@link ThreadIdentifier}
-  private final ConcurrentMap<ThreadIdentifier, BulkOpProcessed> recordedBulkOps =
-      new ConcurrentHashMap<ThreadIdentifier, BulkOpProcessed>(100);
+  private final ConcurrentMap<ThreadIdentifier, Object> recordedBulkOps =
+      new ConcurrentHashMap<ThreadIdentifier, Object>(100);
-    this.initializationLatch = new StoppableCountDownLatch(region.stopper, 1);
+    this.initializationLatch = new StoppableCountDownLatch(region.getStopper(), 1);
-    // If this is a bulkOp, and concurrency checks are enabled, we need to
-    // save the version tag in case we retry.
-    if (lr.concurrencyChecksEnabled
-        && (event.getOperation().isPutAll() || event.getOperation().isRemoveAll())
-        && lr.getServerProxy() == null) {
-      recordBulkOpEvent(event, membershipID);
-    }
-
+
+    // If this is a bulkOp, and concurrency checks are enabled, we need to
+    // save the version tag in case we retry.
+    // Make recordBulkOp version tag after recordSeqno, so that recordBulkOpStart
+    // in a retry bulk op would not incorrectly remove the saved version tag in
+    // recordedBulkOpVersionTags
+    if (lr.getConcurrencyChecksEnabled()
+        && (event.getOperation().isPutAll() || event.getOperation().isRemoveAll())
+        && lr.getServerProxy() == null) {
+      recordBulkOpEvent(event, membershipID);
+    }
-    BulkOpProcessed opSyncObj =
-        recordedBulkOps.putIfAbsent(membershipID, new BulkOpProcessed(false));
-    if (opSyncObj == null) {
-      opSyncObj = recordedBulkOps.get(membershipID);
-    }
+    Object opSyncObj = null;
+    do {
+      opSyncObj = recordedBulkOps.putIfAbsent(membershipID, new Object());
+      if (opSyncObj == null) {
+        opSyncObj = recordedBulkOps.get(membershipID);
+      }
+    } while (opSyncObj == null);
+
-        if (opSyncObj.getStatus() && logger.isDebugEnabled()) {
-          logger.debug("SyncBulkOp: The operation was performed by another thread.");
-        } else {
-          recordBulkOpStart(membershipID);
-
-          // Perform the bulk op
-          r.run();
-          // set to true in case another thread is waiting at sync
-          opSyncObj.setStatus(true);
-          recordedBulkOps.remove(membershipID);
-        }
+        recordBulkOpStart(membershipID, eventID);
+        // Perform the bulk op
+        r.run();
-   * Called when a bulkOp is started on the local region. Used to clear event tracker state from the
-   * last bulkOp.
+   * Called when a new bulkOp is started on the local region. Used to clear event tracker state from
+   * the last bulkOp.
-  public void recordBulkOpStart(ThreadIdentifier tid) {
+  public void recordBulkOpStart(ThreadIdentifier tid, EventID eventID) {
-    this.recordedBulkOpVersionTags.remove(tid);
+    EventSeqnoHolder evh = recordedEvents.get(tid);
+    if (evh == null) {
+      return;
+    }
+    synchronized (evh) {
+      // only remove it when a new bulk op occurs
+      if (eventID.getSequenceID() > evh.lastSeqno) {
+        this.recordedBulkOpVersionTags.remove(tid);
+      }
+    }
-   * A status tracker for each bulk operation (putAll or removeAll) from originators specified by
-   * membershipID and threadID in the cache processed is true means the bulk op is processed by one
-   * thread no need to redo it by other threads.
-   * 
-   * @since GemFire 5.7
-   */
-  static class BulkOpProcessed {
-    /** whether the op is processed */
-    private boolean processed;
-
-    /**
-     * creates a new instance to save status of a bulk op
-     * 
-     * @param status true if the op has been processed
-     */
-    BulkOpProcessed(boolean status) {
-      this.processed = status;
-    }
-
-    /**
-     * setter method to change the status
-     * 
-     * @param status true if the op has been processed
-     */
-    void setStatus(boolean status) {
-      this.processed = status;
-    }
-
-    /**
-     * getter method to peek the current status
-     * 
-     * @return current status
-     */
-    boolean getStatus() {
-      return this.processed;
-    }
-
-    @Override
-    public String toString() {
-      return "BULKOP(" + this.processed + ")";
-    }
-  }
-
-  /**

UPD74 MOV25 INS44 UPD43 INS60 INS19 INS43 INS42 INS60 INS25 INS51 UPD66 UPD42 UPD74 UPD43 MOV43 INS59 INS8 INS27 UPD66 UPD66 INS42 INS43 INS59 INS27 INS8 INS42 INS8 UPD43 INS32 UPD42 MOV42 INS33 INS21 MOV25 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS41 INS25 UPD42 INS32 INS42 INS42 INS7 INS8 INS42 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS32 MOV21 MOV21 INS32 INS40 MOV21 MOV42 MOV42 MOV42 MOV14 INS42 INS42 UPD43 INS42 UPD42 DEL66 DEL66 DEL42 DEL65 DEL66 DEL40 DEL40 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL27 DEL41 DEL8 DEL31 DEL55