GEODE-5464: Generify DistributionManager and related classes (#2174)

GEODE-5464: Generify DistributionManager and related classes

* Augment various collections to use generics
* Inline some iterator loops that were trivially "foreach" loops
* remove unused code
* Inline some redundant local variables
* make some methods more private
* change some tests to use `InternalDistributedMember` instead of
  `DistributedMember`.
* Make ThrottlingMemLinkedQueueWithDMStats generic and use atomic.
  - The previous synchronization looked quite wrong.
-import java.io.Serializable;
-import java.util.NoSuchElementException;
-    this.viewMembers = new ArrayList<InternalDistributedMember>(allIds);
+    this.viewMembers = new ArrayList<>(allIds);
-  /*
-   * static { // Make the id a little unique String host; try { host =
-   * InetAddress.getLocalHost().getCanonicalHostName(); MemberAttributes.setDefaults(65535,
-   * org.apache.geode.internal.OSProcess.getId(), DistributionManager.LONER_DM_TYPE,
-   * MemberAttributes.parseRoles(system.getConfig().getRoles())); id = new
-   * InternalDistributedMember(host, 65535); // noise value for port number
-   *
-   * } catch (UnknownHostException ex) { throw new InternalError(LocalizedStrings.
-   * LonerDistributionManager_CANNOT_RESOLVE_LOCAL_HOST_NAME_TO_AN_IP_ADDRESS.toLocalizedString());
-   * }
-   *
-   * }
-   */
-
-      new ConcurrentHashMap();
+      new ConcurrentHashMap<>();
-  public Set getDistributionManagerIds() {
+  public Set<InternalDistributedMember> getDistributionManagerIds() {
-  public Set getDistributionManagerIdsIncludingAdmin() {
+  public Set<InternalDistributedMember> getDistributionManagerIdsIncludingAdmin() {
-  public Serializable[] getDirectChannels(InternalDistributedMember[] ids) {
-    return ids;
-  }
-
-  public Set getOtherDistributionManagerIds() {
-    return Collections.EMPTY_SET;
+  public Set<InternalDistributedMember> getOtherDistributionManagerIds() {
+    return Collections.emptySet();
-  public Set getOtherNormalDistributionManagerIds() {
-    return Collections.EMPTY_SET;
+  public Set<InternalDistributedMember> getOtherNormalDistributionManagerIds() {
+    return Collections.emptySet();
-  public Set getAllOtherMembers() {
-    return Collections.EMPTY_SET;
+  public Set<InternalDistributedMember> getAllOtherMembers() {
+    return Collections.emptySet();
-  public Set addMembershipListenerAndGetDistributionManagerIds(MembershipListener l) {
+  public Set<InternalDistributedMember> addMembershipListenerAndGetDistributionManagerIds(
+      MembershipListener l) {
-  public Set addAllMembershipListenerAndGetAllIds(MembershipListener l) {
+  public Set<InternalDistributedMember> addAllMembershipListenerAndGetAllIds(MembershipListener l) {
-  public int getDistributionManagerCount() {
-    return 0;
-  }
-
-  public Set putOutgoingUserData(final DistributionMessage message) {
-    if (message.forAll() || message.getRecipients().length == 0) {
-      // do nothing
-      return null;
-    } else {
-      throw new RuntimeException(
-          LocalizedStrings.LonerDistributionManager_LONER_TRIED_TO_SEND_MESSAGE_TO_0
-              .toLocalizedString(message.getRecipientsDescription()));
-    }
-  }
-
-  public Map getChannelMap() {
-    return null;
-  }
-
-  public Map getMemberMap() {
-    return null;
-  }
-
-  public void restartCommunications() {
-
-  }
-
-  public DistributedMember getOldestMember(Collection members) throws NoSuchElementException {
-    if (members.size() == 1) {
-      DistributedMember member = (DistributedMember) members.iterator().next();
-      if (member.equals(viewMembers.get(0))) {
-        return member;
-      }
-    }
-    throw new NoSuchElementException(
-        LocalizedStrings.LonerDistributionManager_MEMBER_NOT_FOUND_IN_MEMBERSHIP_SET
-            .toLocalizedString());
-  }
-
-  public Set getAdminMemberSet() {
-    return Collections.EMPTY_SET;
+  public Set<InternalDistributedMember> getAdminMemberSet() {
+    return Collections.emptySet();
-  public Set putOutgoing(DistributionMessage msg) {
+  public Set<InternalDistributedMember> putOutgoing(DistributionMessage msg) {
-  public void setUnfinishedStartups(Collection s) {}
+  public void setUnfinishedStartups(Collection<InternalDistributedMember> s) {}
-      return Collections.singleton((DistributedMember) getDistributionManagerId());
+      return Collections.singleton(getDistributionManagerId());
-  public Set getNormalDistributionManagerIds() {
+  public Set<InternalDistributedMember> getNormalDistributionManagerIds() {

MOV31 MOV31 INS74 INS74 INS74 INS42 INS74 INS74 INS42 INS8 INS74 INS74 INS74 UPD42 INS8 INS74 INS74 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS41 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS41 MOV43 INS43 INS74 MOV43 INS43 INS74 INS42 MOV42 INS32 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS42 INS42 UPD42 MOV42 INS32 INS42 MOV43 INS43 INS42 MOV43 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD74 MOV32 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL85 DEL5 DEL42 DEL85 DEL5 DEL42 DEL44 DEL42 DEL83 DEL42 DEL40 DEL41 DEL8 DEL31 DEL43 DEL40 DEL42 DEL83 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL22 DEL34 DEL27 DEL27 DEL33 DEL41 DEL8 DEL42 DEL43 DEL40 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL83 DEL42 DEL40 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL34 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL33 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL32 DEL42 DEL41 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL83 DEL42 DEL40 DEL41 DEL8 DEL31 DEL42 DEL43 DEL11