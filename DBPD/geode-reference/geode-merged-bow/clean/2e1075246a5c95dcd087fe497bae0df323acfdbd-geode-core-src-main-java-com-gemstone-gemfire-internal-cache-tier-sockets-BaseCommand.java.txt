Merge branch 'release/1.0.0-incubating.M3'

-import java.io.EOFException;
-import java.io.IOException;
-import java.io.InterruptedIOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.Semaphore;
-import java.util.regex.Pattern;
-
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.CancelException;
-import com.gemstone.gemfire.CopyException;
-import com.gemstone.gemfire.InternalGemFireError;
-import com.gemstone.gemfire.SerializationException;
-import com.gemstone.gemfire.SystemFailure;
-import com.gemstone.gemfire.cache.CacheLoaderException;
-import com.gemstone.gemfire.cache.CacheWriterException;
-import com.gemstone.gemfire.cache.InterestResultPolicy;
-import com.gemstone.gemfire.cache.Region;
-import com.gemstone.gemfire.cache.RegionDestroyedException;
-import com.gemstone.gemfire.cache.TransactionException;
+import com.gemstone.gemfire.*;
+import com.gemstone.gemfire.cache.*;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-import com.gemstone.gemfire.internal.cache.CachedDeserializable;
-import com.gemstone.gemfire.internal.cache.DistributedRegion;
-import com.gemstone.gemfire.internal.cache.EntryEventImpl;
-import com.gemstone.gemfire.internal.cache.EntrySnapshot;
-import com.gemstone.gemfire.internal.cache.EventID;
-import com.gemstone.gemfire.internal.cache.FindVersionTagOperation;
-import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
-import com.gemstone.gemfire.internal.cache.LocalRegion;
+import com.gemstone.gemfire.internal.cache.*;
-import com.gemstone.gemfire.internal.cache.PartitionedRegion;
-import com.gemstone.gemfire.internal.cache.PartitionedRegionHelper;
-import com.gemstone.gemfire.internal.cache.TXManagerImpl;
-import com.gemstone.gemfire.internal.cache.TXStateProxy;
-import com.gemstone.gemfire.internal.cache.Token;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
+import com.gemstone.gemfire.security.NotAuthorizedException;
+
+import org.apache.logging.log4j.Logger;
+
+import java.io.*;
+import java.util.*;
+import java.util.concurrent.Semaphore;
+import java.util.regex.Pattern;
-      .getBoolean("gemfire.gateway.ApplyRetries");
+      .getBoolean(DistributionConfig.GEMFIRE_PREFIX + "gateway.ApplyRetries");
-      .getBoolean("gemfire.bridge.suppressIOExceptionLogging");
+      .getBoolean(DistributionConfig.GEMFIRE_PREFIX + "bridge.suppressIOExceptionLogging");
+          tx.updateProxyServer(txMgr.getMemberId());
-        EntryEventImpl versionHolder = EntryEventImpl.createVersionTagHolder();
+        VersionTagHolder versionHolder = new VersionTagHolder();
-        Object data = region.get(entryKey, null, true, true, true, id, versionHolder, true, false);
+        Object data = region.get(entryKey, null, true, true, true, id, versionHolder, true);
-        EntryEventImpl versionHolder = EntryEventImpl.createVersionTagHolder();
+        VersionTagHolder versionHolder = new VersionTagHolder();
-        data = region.get(key, null, true, true, true, id, versionHolder, true, false);
+        data = region.get(key, null, true, true, true, id, versionHolder, true);
-    EntryEventImpl versionHolder = null;
+    VersionTagHolder versionHolder = null;
-      versionHolder = EntryEventImpl.createVersionTagHolder();
+      versionHolder = new VersionTagHolder();
-      Object value = region.get(key, null, true, true, true, requestingClient, versionHolder, true, false);
+      Object value = region.get(key, null, true, true, true, requestingClient, versionHolder, true);
-            // TODO OFFHEAP: in the future we might want to delay this release
-            // until the "values" VersionedObjectList is released.
-            // But for now "updateValues" copies the off-heap value to the heap.
-          EntryEventImpl versionHolder = EntryEventImpl
-              .createVersionTagHolder();
+          VersionTagHolder versionHolder = new VersionTagHolder();
-              true, false);
+              true);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS27 INS27 UPD43 INS40 INS45 INS40 INS45 UPD42 INS14 UPD43 UPD43 INS43 INS21 UPD42 INS14 UPD42 INS14 INS42 INS32 INS43 INS43 UPD43 INS42 INS42 INS32 INS42 INS42 UPD42 INS14 INS42 INS42 INS43 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL45 DEL45 DEL42 DEL42 DEL32 DEL9 DEL42 DEL42 DEL32 DEL9 DEL42 DEL42 DEL32 DEL9 DEL42 DEL42 DEL32 DEL9