GEODE-8359 (#5371)

GEODE-8359: Code needed protection against the possibility of the null being returned.

There was also a fair amount of inconsistency between files that are very tightly related.

-import org.apache.geode.internal.cache.tier.CachedRegionHelper;
+import org.apache.geode.internal.cache.tier.sockets.CacheClientProxy;
-  public void cmdExecute(final Message clientMessage, final ServerConnection serverConnection,
-      final SecurityService securityService, long start) throws IOException, InterruptedException {
-    Part regionNamePart = null, keyPart = null, numberOfKeysPart = null;
-    String regionName = null;
+  public void cmdExecute(Message clientMessage, ServerConnection serverConnection,
+      SecurityService securityService, long start) throws IOException, InterruptedException {
+    Part regionNamePart, keyPart, numberOfKeysPart;
+    String regionName;
-    List keys = null;
-    CachedRegionHelper crHelper = serverConnection.getCachedRegionHelper();
-    int numberOfKeys = 0, partNumber = 0;
+    List<Object> keys;
+    int numberOfKeys, partNumber;
-    // bserverStats.incLong(readDestroyRequestTimeId,
-    // DistributionStats.getStatTime() - start);
-    // bserverStats.incInt(destroyRequestsId, 1);
-    // start = DistributionStats.getStatTime();
-    // Retrieve the data from the message parts
-    boolean isDurable = false;
+    boolean isDurable;
-    keys = new ArrayList();
+    keys = new ArrayList<>();
-    /*
-     * AcceptorImpl acceptor = servConn.getAcceptor();
-     *
-     * // Check if the Server is running in NotifyBySubscription=true mode. if
-     * (!acceptor.getCacheClientNotifier().getNotifyBySubscription()) { // This should have been
-     * taken care at the client. String err = LocalizedStrings.
-     * RegisterInterest_INTEREST_REGISTRATION_IS_SUPPORTED_ONLY_FOR_SERVERS_WITH_NOTIFYBYSUBSCRIPTION_SET_TO_TRUE
-     * ); writeChunkedErrorResponse(msg,
-     * MessageType.REGISTER_INTEREST_DATA_ERROR, err, servConn); servConn.setAsTrue(RESPONDED);
-     * return; }
-     */
-
-    // key not null
-          serverConnection.getName(), regionName);
-      // writeChunkedErrorResponse(msg,
-      // MessageType.REGISTER_INTEREST_DATA_ERROR, message);
-      // responded = true;
-    } // else { // region not null
+          new Object[] {serverConnection.getName(), regionName});
+    }
-      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();
-      if (authzRequest != null) {
+      AuthorizeRequest authorizeRequest = serverConnection.getAuthzRequest();
+      if (authorizeRequest != null) {
-              authzRequest.registerInterestListAuthorize(regionName, keys, policy);
-          keys = (List) registerContext.getKey();
+              authorizeRequest.registerInterestListAuthorize(regionName, keys, policy);
+          keys = (List<Object>) registerContext.getKey();
-    // Update the statistics and write the reply
-    // bserverStats.incLong(processDestroyTimeId,
-    // DistributionStats.getStatTime() - start);
-    // start = DistributionStats.getStatTime();
-    boolean isPrimary = serverConnection.getAcceptor().getCacheClientNotifier()
-        .getClientProxy(serverConnection.getProxyID()).isPrimary();
+    CacheClientProxy ccp = serverConnection.getAcceptor().getCacheClientNotifier()
+        .getClientProxy(serverConnection.getProxyID());
+
+    if (ccp == null) {
+      IOException ioException = new IOException(
+          "CacheClientProxy for this client is no longer on the server");
+      writeChunkedException(clientMessage, ioException, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
+      return;
+    }
+
+    boolean isPrimary = ccp.isPrimary();
+
-        // If an interrupted exception is thrown , rethrow it
-
-        // otherwise send the exception back to client
-        // logger.debug(getName() + ": Sent chunk (1 of 1) of register interest
-        // response (" + chunkedResponseMsg.getBufferLength() + " bytes) for
-        // region " + regionName + " key " + key);
-      // bserverStats.incLong(writeDestroyResponseTimeId,
-      // DistributionStats.getStatTime() - start);
-      // bserverStats.incInt(destroyResponsesId, 1);
+
-    // } // region not null

MOV26 UPD40 INS25 INS60 INS74 INS43 INS27 INS8 INS39 INS59 MOV43 INS43 UPD42 INS42 UPD42 MOV32 INS42 INS33 INS60 INS21 INS21 INS41 INS42 INS32 UPD42 MOV42 INS74 INS43 INS59 INS32 INS32 INS42 INS42 MOV43 INS3 UPD42 UPD42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS4 INS43 INS45 INS43 INS85 MOV32 INS42 INS42 INS42 UPD42 INS74 MOV43 INS43 INS42 DEL83 DEL83 DEL83 DEL33 DEL33 DEL33 DEL33 DEL42 DEL33 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL34 DEL34 DEL9 DEL42 DEL39 DEL42 DEL32