Merge branch 'develop' into feature/GEODE-17-2

# Conflicts:
#	geode-core/src/test/resources/com/gemstone/gemfire/codeAnalysis/sanctionedSerializables.txt

-import com.gemstone.gemfire.cache.hdfs.HDFSStoreFactory;
-import com.gemstone.gemfire.cache.hdfs.internal.HDFSIntegrationUtil;
-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreCreation;
-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreFactoryImpl;
-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreImpl;
-import com.gemstone.gemfire.cache.hdfs.internal.hoplog.HDFSFlushQueueFunction;
-import com.gemstone.gemfire.cache.hdfs.internal.hoplog.HDFSForceCompactionFunction;
-import com.gemstone.gemfire.cache.hdfs.internal.hoplog.HDFSLastCompactionTimeFunction;
-import com.gemstone.gemfire.cache.hdfs.internal.hoplog.HDFSRegionDirector;
-import com.gemstone.gemfire.cache.hdfs.internal.hoplog.HDFSStoreDirector;
-      FunctionService.registerFunction(new HDFSLastCompactionTimeFunction());
-      FunctionService.registerFunction(new HDFSForceCompactionFunction());
-      FunctionService.registerFunction(new HDFSFlushQueueFunction());
-          closeHDFSStores();
-          
-          closeHDFSStores();
-            HDFSIntegrationUtil.createAndAddAsyncQueue(regionPath, attrs, this);
-            attrs = setEvictionAttributesForLargeRegion(attrs);
-  /**
-   * turn on eviction by default for HDFS regions
-   */
-  @SuppressWarnings("deprecation")
-  public <K, V> RegionAttributes<K, V> setEvictionAttributesForLargeRegion(
-      RegionAttributes<K, V> attrs) {
-    RegionAttributes<K, V> ra = attrs;
-    if (DISABLE_AUTO_EVICTION) {
-      return ra;
-    }
-    if (attrs.getDataPolicy().withHDFS()
-        || attrs.getHDFSStoreName() != null) {
-      // make the region overflow by default
-      EvictionAttributes evictionAttributes = attrs.getEvictionAttributes();
-      boolean hasNoEvictionAttrs = evictionAttributes == null
-          || evictionAttributes.getAlgorithm().isNone();
-      AttributesFactory<K, V> af = new AttributesFactory<K, V>(attrs);
-      String diskStoreName = attrs.getDiskStoreName();
-      // set the local persistent directory to be the same as that for
-      // HDFS store
-      if (attrs.getHDFSStoreName() != null) {
-        HDFSStoreImpl hdfsStore = findHDFSStore(attrs.getHDFSStoreName());
-        if (attrs.getPartitionAttributes().getLocalMaxMemory() != 0 && hdfsStore == null) {
-          // HDFS store expected to be found at this point
-          throw new IllegalStateException(
-              LocalizedStrings.HOPLOG_HDFS_STORE_NOT_FOUND
-                  .toLocalizedString(attrs.getHDFSStoreName()));
-        }
-        // if there is no disk store, use the one configured for hdfs queue
-        if (attrs.getPartitionAttributes().getLocalMaxMemory() != 0 && diskStoreName == null) {
-          diskStoreName = hdfsStore.getDiskStoreName();
-        }
-      }
-      // set LRU heap eviction with overflow to disk for HDFS stores with
-      // local Oplog persistence
-      // set eviction attributes only if not set
-      if (hasNoEvictionAttrs) {
-        if (diskStoreName != null) {
-          af.setDiskStoreName(diskStoreName);
-        }
-        af.setEvictionAttributes(EvictionAttributes.createLRUHeapAttributes(
-            ObjectSizer.DEFAULT, EvictionAction.OVERFLOW_TO_DISK));
-      }
-      ra = af.create();
-    }
-    return ra;
-  }
-
-  public HDFSStoreFactory createHDFSStoreFactory(HDFSStoreCreation creation) {
-    return new HDFSStoreFactoryImpl(this, creation);
-  }
-  public void addHDFSStore(HDFSStoreImpl hsi) {
-    HDFSStoreDirector.getInstance().addHDFSStore(hsi);
-    //TODO:HDFS Add a resource event for hdfs store creation as well 
-    // like the following disk store event
-    //system.handleResourceEvent(ResourceEvent.DISKSTORE_CREATE, dsi);
-  }
-
-  public void removeHDFSStore(HDFSStoreImpl hsi) {
-    //hsi.destroy();
-    HDFSStoreDirector.getInstance().removeHDFSStore(hsi.getName());
-    //TODO:HDFS Add a resource event for hdfs store as well 
-    // like the following disk store event
-    //system.handleResourceEvent(ResourceEvent.DISKSTORE_REMOVE, dsi);
-  }
-
-  public void closeHDFSStores() {
-    HDFSRegionDirector.reset();
-    HDFSStoreDirector.getInstance().closeHDFSStores();
-  }
-
-  
-  public HDFSStoreImpl findHDFSStore(String name) {
-    return HDFSStoreDirector.getInstance().getHDFSStore(name);
-  }
-  
-  public Collection<HDFSStoreImpl> getHDFSStores() {
-    return HDFSStoreDirector.getInstance().getAllHDFSStores();
-  }
-  
-  

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL14 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL52 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL66 DEL65 DEL29 DEL42 DEL45 DEL79 DEL83 DEL42 DEL73 DEL42 DEL73 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL52 DEL42 DEL14 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31