Merge branch 'develop' into feature/GEODE-7049

-import static org.apache.geode.internal.DataSerializableFixedID.FIND_COORDINATOR_REQ;
-import static org.apache.geode.internal.DataSerializableFixedID.FIND_COORDINATOR_RESP;
-import static org.apache.geode.internal.DataSerializableFixedID.JOIN_REQUEST;
-import static org.apache.geode.internal.DataSerializableFixedID.JOIN_RESPONSE;
+import static org.apache.geode.distributed.internal.membership.gms.messages.AbstractGMSMessage.ALL_RECIPIENTS;
+import static org.apache.geode.internal.serialization.DataSerializableFixedID.FIND_COORDINATOR_REQ;
+import static org.apache.geode.internal.serialization.DataSerializableFixedID.FIND_COORDINATOR_RESP;
+import static org.apache.geode.internal.serialization.DataSerializableFixedID.JOIN_REQUEST;
+import static org.apache.geode.internal.serialization.DataSerializableFixedID.JOIN_RESPONSE;
-import java.util.Arrays;
-import org.apache.geode.DataSerializer;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.DurableClientAttributes;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.distributed.internal.DMStats;
-import org.apache.geode.distributed.internal.DistributionMessage;
-import org.apache.geode.distributed.internal.DistributionStats;
-import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.distributed.internal.membership.MemberAttributes;
-import org.apache.geode.distributed.internal.membership.NetView;
-import org.apache.geode.distributed.internal.membership.QuorumChecker;
+import org.apache.geode.distributed.internal.membership.gms.GMSMembershipView;
+import org.apache.geode.distributed.internal.membership.gms.GMSUtil;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfig;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipStatistics;
+import org.apache.geode.distributed.internal.membership.gms.interfaces.GMSMessage;
-import org.apache.geode.internal.HeapDataOutputStream;
-import org.apache.geode.internal.InternalDataSerializer;
-import org.apache.geode.internal.Version;
-import org.apache.geode.internal.VersionedDataInputStream;
-import org.apache.geode.internal.admin.remote.RemoteTransportConfig;
-import org.apache.geode.internal.cache.DirectReplyMessage;
+import org.apache.geode.internal.serialization.BufferDataOutputStream;
+import org.apache.geode.internal.serialization.StaticSerialization;
+import org.apache.geode.internal.serialization.Version;
+import org.apache.geode.internal.serialization.VersionedDataInputStream;
-   * The location (in the product) of the locator Jgroups config file.
+   * The location (in the product) of the non-mcast Jgroups config file.
-  InternalDistributedMember localAddress;
+  GMSMember localAddress;
-  private volatile NetView view;
+  private volatile GMSMembershipView view;
-  protected final Map<DistributedMember, MessageTracker> scheduledMcastSeqnos = new HashMap<>();
+  protected final Map<GMSMember, MessageTracker> scheduledMcastSeqnos = new HashMap<>();
-   * DistributedMember identifiers already used, either in this JGroupsMessenger instance
+   * Member identifiers already used, either in this JGroupsMessenger instance
-  private Set<DistributedMember> usedDistributedMemberIdentifiers = new HashSet<>();
+  private Set<GMSMember> usedMemberIdentifiers = new HashSet<>();
-    RemoteTransportConfig transport = services.getConfig().getTransport();
-    DistributionConfig dc = services.getConfig().getDistributionConfig();
+    MembershipConfig config = services.getConfig();
-    boolean b = dc.getEnableNetworkPartitionDetection();
-    System.setProperty("jgroups.resolve_dns", String.valueOf(!b));
+    boolean enableNetworkPartitionDetection = config.getEnableNetworkPartitionDetection();
+    System.setProperty("jgroups.resolve_dns", String.valueOf(!enableNetworkPartitionDetection));
-    if (transport.isMcastEnabled()) {
+    if (config.isMcastEnabled()) {
-    if (transport.isMcastEnabled()) {
+    if (config.isMcastEnabled()) {
-          String.valueOf(transport.getMcastId().getPort()));
+          String.valueOf(config.getMcastPort()));
-          replaceStrings(properties, "MCAST_ADDRESS", dc.getMcastAddress().getHostAddress());
-      properties = replaceStrings(properties, "MCAST_TTL", String.valueOf(dc.getMcastTtl()));
+          replaceStrings(properties, "MCAST_ADDRESS", config.getMcastAddress().getHostAddress());
+      properties = replaceStrings(properties, "MCAST_TTL", String.valueOf(config.getMcastTtl()));
-          String.valueOf(dc.getMcastSendBufferSize()));
+          String.valueOf(config.getMcastSendBufferSize()));
-          String.valueOf(dc.getMcastRecvBufferSize()));
+          String.valueOf(config.getMcastRecvBufferSize()));
-          String.valueOf(dc.getUdpFragmentSize() - 256));
+          String.valueOf(config.getUdpFragmentSize() - 256));
-    if (transport.isMcastEnabled() || transport.isTcpDisabled()
-        || (dc.getUdpRecvBufferSize() != DistributionConfig.DEFAULT_UDP_RECV_BUFFER_SIZE)) {
+    if (config.isMcastEnabled() || config.isTcpDisabled()
+        || (config.getUdpRecvBufferSize() != DistributionConfig.DEFAULT_UDP_RECV_BUFFER_SIZE)) {
-          replaceStrings(properties, "UDP_RECV_BUFFER_SIZE", "" + dc.getUdpRecvBufferSize());
+          replaceStrings(properties, "UDP_RECV_BUFFER_SIZE", "" + config.getUdpRecvBufferSize());
-    properties = replaceStrings(properties, "UDP_SEND_BUFFER_SIZE", "" + dc.getUdpSendBufferSize());
+    properties =
+        replaceStrings(properties, "UDP_SEND_BUFFER_SIZE", "" + config.getUdpSendBufferSize());
-    String str = transport.getBindAddress();
+    String str = config.getBindAddress();
-      int[] ports = dc.getMembershipPortRange();
+      int[] ports = config.getMembershipPortRange();
-    properties = replaceStrings(properties, "UDP_FRAGMENT_SIZE", "" + dc.getUdpFragmentSize());
+    properties = replaceStrings(properties, "UDP_FRAGMENT_SIZE", "" + config.getUdpFragmentSize());
-        "" + dc.getMcastFlowControl().getByteAllowance());
+        "" + config.getMcastByteAllowance());
-        "" + dc.getMcastFlowControl().getRechargeThreshold());
+        "" + config.getMcastRechargeThreshold());
-        "" + dc.getMcastFlowControl().getRechargeBlockMs());
+        "" + config.getMcastRechargeBlockMs());
-    if (!dc.getSecurityUDPDHAlgo().isEmpty()) {
+    if (!config.getSecurityUDPDHAlgo().isEmpty()) {
-        this.encrypt = new GMSEncrypt(services, dc.getSecurityUDPDHAlgo());
+        this.encrypt = new GMSEncrypt(services, config.getSecurityUDPDHAlgo());
-      Object oldDSMembershipInfo = services.getConfig().getTransport().getOldDSMembershipInfo();
+      Object oldDSMembershipInfo = services.getConfig().getOldDSMembershipInfo();
-        usedDistributedMemberIdentifiers = oldInfo.getMembershipIdentifiers();
+        usedMemberIdentifiers = oldInfo.getMembershipIdentifiers();
-  public boolean isOldMembershipIdentifier(DistributedMember id) {
-    return usedDistributedMemberIdentifiers.contains(id);
+  public boolean isOldMembershipIdentifier(GMSMember id) {
+    return usedMemberIdentifiers.contains(id);
-      usedDistributedMemberIdentifiers.add(localAddress);
+      usedMemberIdentifiers.add(localAddress);
-  public void memberSuspected(InternalDistributedMember initiator,
-      InternalDistributedMember suspect, String reason) {}
+  public void memberSuspected(GMSMember initiator,
+      GMSMember suspect, String reason) {}
-  public void installView(NetView v) {
+  public void installView(GMSMembershipView v) {
-    List<JGAddress> mbrs = new ArrayList<>(v.size());
-    mbrs.addAll(v.getMembers().stream().map(JGAddress::new).collect(Collectors.toList()));
+    List<JGAddress> mbrs = v.getMembers().stream().map(JGAddress::new).collect(Collectors.toList());
-      for (DistributedMember mbr : v.getCrashedMembers()) {
+      for (GMSMember mbr : v.getCrashedMembers()) {
-      for (DistributedMember mbr : v.getShutdownMembers()) {
+      for (GMSMember mbr : v.getShutdownMembers()) {
-    NetView v = this.view;
+    GMSMembershipView v = this.view;
-      List<InternalDistributedMember> members = v.getMembers();
-      InternalDistributedMember recipient = null;
-      for (InternalDistributedMember mbr : members) {
-        GMSMember gmsMbr = ((GMSMember) mbr.getNetMember());
+      List<GMSMember> members = v.getMembers();
+      GMSMember recipient = null;
+      for (GMSMember gmsMbr : members) {
-          recipient = mbr;
+          recipient = gmsMbr;
-    DistributionConfig config = services.getConfig().getDistributionConfig();
-    boolean isLocator = (services.getConfig().getTransport()
-        .getVmKind() == ClusterDistributionManager.LOCATOR_DM_TYPE)
-        || !services.getConfig().getDistributionConfig().getStartLocator().isEmpty();
+    MembershipConfig config = services.getConfig();
+    boolean isLocator = (config
+        .getVmKind() == GMSMember.LOCATOR_DM_TYPE)
+        || !config.getStartLocator().isEmpty();
-    DurableClientAttributes dca = null;
-    if (config.getDurableClientId() != null) {
-      dca = new DurableClientAttributes(config.getDurableClientId(),
-          config.getDurableClientTimeout());
-    }
-    MemberAttributes attr = new MemberAttributes(-1/* dcPort - not known at this time */,
-        OSProcess.getId(), services.getConfig().getTransport().getVmKind(),
-        -1/* view id - not known at this time */, config.getName(),
-        MemberAttributes.parseGroups(config.getRoles(), config.getGroups()), dca);
-    localAddress = new InternalDistributedMember(jgAddress.getInetAddress(), jgAddress.getPort(),
-        config.getEnableNetworkPartitionDetection(), isLocator, attr);
-
-    // add the JGroups logical address to the GMSMember
-    UUID uuid = this.jgAddress;
-    GMSMember gmsMember = (GMSMember) localAddress.getNetMember();
-    gmsMember.setUUID(uuid);
+    String hostname =
+        SocketCreator.resolve_dns ? SocketCreator.getHostName(jgAddress.getInetAddress())
+            : jgAddress.getInetAddress().getHostAddress();
+    GMSMember gmsMember = new GMSMember(jgAddress.getInetAddress(),
+        hostname, jgAddress.getPort(),
+        OSProcess.getId(), (byte) services.getConfig().getVmKind(),
+        -1 /* directport */, -1 /* viewID */, config.getName(),
+        GMSUtil.parseGroups(config.getRoles(), config.getGroups()), config.getDurableClientId(),
+        config.getDurableClientTimeout(),
+        config.getEnableNetworkPartitionDetection(), isLocator,
+        Version.getCurrentVersion().ordinal(),
+        jgAddress.getUUIDMsbs(), jgAddress.getUUIDLsbs());
-        services.getConfig().getDistributionConfig().getEnableNetworkPartitionDetection());
-    logger.info("Established local address {} with net-member {}", localAddress,
-        localAddress.getNetMember());
+        services.getConfig().getEnableNetworkPartitionDetection());
+    localAddress = gmsMember;
+    logger.info("Established local address {}", localAddress);
-  public void getMessageState(InternalDistributedMember target, Map<String, Long> state,
+  public void getMessageState(GMSMember target, Map<String, Long> state,
-  public void waitForMessageState(InternalDistributedMember sender, Map<String, Long> state)
+  public void waitForMessageState(GMSMember sender, Map<String, Long> state)
-    long timeout = services.getConfig().getDistributionConfig().getAckWaitThreshold() * 1000L;
+    long timeout = services.getConfig().getAckWaitThreshold() * 1000L;
-  public Set<InternalDistributedMember> sendUnreliably(DistributionMessage msg) {
+  public Set<GMSMember> sendUnreliably(GMSMessage msg) {
-  public Set<InternalDistributedMember> send(DistributionMessage msg) {
+  public Set<GMSMember> send(GMSMessage msg) {
-  private Set<InternalDistributedMember> send(DistributionMessage msg, boolean reliably) {
+  private Set<GMSMember> send(GMSMessage msg, boolean reliably) {
-    DMStats theStats = services.getStatistics();
-    NetView oldView = this.view;
+    MembershipStatistics theStats = services.getStatistics();
+    GMSMembershipView oldView = this.view;
-    // JGroupsMessenger does not support direct-replies, so register
-    // the message's processor if necessary
-    if ((msg instanceof DirectReplyMessage) && msg.isDirectAck() && msg.getProcessorId() <= 0) {
-      ((DirectReplyMessage) msg).registerProcessor();
-    }
-
-    InternalDistributedMember[] destinations = msg.getRecipients();
+    List<GMSMember> destinations = msg.getRecipients();
-    if (services.getConfig().getTransport().isMcastEnabled()) {
+    if (services.getConfig().isMcastEnabled()) {
-      String recips = useMcast ? "multicast" : Arrays.toString(msg.getRecipients());
+      String recips = useMcast ? "multicast" : destinations.toString();
-      Message jmsg = createJGMessage(msg, local, Version.CURRENT_ORDINAL);
+      Message jmsg =
+          createJGMessage(msg, local, null, Version.getCurrentVersion().ordinal());
-      int len = destinations.length;
+      int len = destinations.size();
-      if (len == 1 && destinations[0] == DistributionMessage.ALL_RECIPIENTS) { // send to all
+      if (len == 1 && destinations.get(0) == ALL_RECIPIENTS) { // send to all
-        NetView v = services.getJoinLeave().getView();
+        GMSMembershipView v = services.getJoinLeave().getView();
-          InternalDistributedMember m = (InternalDistributedMember) v.get(i);
-          calculatedMembers.add((GMSMember) m.getNetMember());
+          GMSMember m = (GMSMember) v.get(i);
+          calculatedMembers.add((GMSMember) m);
-          calculatedMembers.add((GMSMember) destinations[i].getNetMember());
+          calculatedMembers.add((GMSMember) destinations.get(i));
-          Message jmsg = createJGMessage(msg, local, version);
+          Message jmsg = createJGMessage(msg, local, mbr, version);
-    Set<InternalDistributedMember> result = new HashSet<>();
-    NetView newView = this.view;
+    Set<GMSMember> result = new HashSet<>();
+    GMSMembershipView newView = this.view;
-      for (InternalDistributedMember d : destinations) {
+      for (GMSMember d : destinations) {
-  Message createJGMessage(DistributionMessage gfmsg, JGAddress src, short version) {
-    if (gfmsg instanceof DirectReplyMessage) {
-      ((DirectReplyMessage) gfmsg).registerProcessor();
-    }
+  Message createJGMessage(GMSMessage gfmsg, JGAddress src, GMSMember dst, short version) {
+    gfmsg.registerProcessor();
-      HeapDataOutputStream out_stream =
-          new HeapDataOutputStream(Version.fromOrdinalOrCurrent(version));
-      Version.CURRENT.writeOrdinal(out_stream, true);
+      BufferDataOutputStream out_stream =
+          new BufferDataOutputStream(Version.fromOrdinalNoThrow((short) version, false));
+      Version.writeOrdinal(out_stream,
+          Version.getCurrentVersion().ordinal(), true);
-        writeEncryptedMessage(gfmsg, version, out_stream);
+        writeEncryptedMessage(gfmsg, dst, version, out_stream);
-  void writeEncryptedMessage(DistributionMessage gfmsg, short version, HeapDataOutputStream out)
+  void writeEncryptedMessage(GMSMessage gfmsg, GMSMember recipient, short version,
+      BufferDataOutputStream out)
-      InternalDataSerializer.writeDSFIDHeader(gfmsg.getDSFID(), out);
+      services.getSerializer().writeDSFIDHeader(gfmsg.getDSFID(), out);
-      InternalDistributedMember pkMbr = null;
+      GMSMember pkMbr = null;
-
-          pkMbr = gfmsg.getRecipients()[0];
-          requestId = getRequestId(gfmsg, true);
+          pkMbr = recipient;
+          requestId = getRequestId(gfmsg, pkMbr, true);
-          pkMbr = gfmsg.getRecipients()[0];
-          requestId = getRequestId(gfmsg, false);
+          pkMbr = recipient;
+          requestId = getRequestId(gfmsg, pkMbr, false);
-      logger.debug("writeEncryptedMessage gfmsg.getDSFID() = {}  for {} with requestid  {}",
-          gfmsg.getDSFID(), pkMbr, requestId);
+      if (logger.isDebugEnabled()) {
+        logger.debug("writeEncryptedMessage gfmsg.getDSFID() = {} for {} with requestid {}",
+            gfmsg.getDSFID(), pkMbr, requestId);
+      }
-        InternalDataSerializer.writeByteArray(pk, out);
+        StaticSerialization.writeByteArray(pk, out);
-      HeapDataOutputStream out_stream =
-          new HeapDataOutputStream(Version.fromOrdinalOrCurrent(version));
+      BufferDataOutputStream out_stream =
+          new BufferDataOutputStream(Version.fromOrdinalNoThrow((short) version, false));
-      InternalDataSerializer.writeByteArray(messageBytes, out);
+      StaticSerialization.writeByteArray(messageBytes, out);
-  int getRequestId(DistributionMessage gfmsg, boolean add) {
+  int getRequestId(GMSMessage gfmsg, GMSMember destination, boolean add) {
-      addRequestId(requestId, gfmsg.getRecipients()[0]);
+      addRequestId(requestId, destination);
-  byte[] serializeMessage(DistributionMessage gfmsg, HeapDataOutputStream out_stream)
+  byte[] serializeMessage(GMSMessage gfmsg, BufferDataOutputStream out_stream)
-    GMSMember m = (GMSMember) this.localAddress.getNetMember();
-    m.writeEssentialData(out_stream);
-    DataSerializer.writeObject(gfmsg, out_stream);
+    GMSMember m = this.localAddress;
+    m.writeEssentialData(out_stream,
+        services.getSerializer().createSerializationContext(out_stream));
+    services.getSerializer().getObjectSerializer()
+        .writeObject(services.getManager().unwrapMessage(gfmsg), out_stream);
-  void setMessageFlags(DistributionMessage gfmsg, Message msg) {
+  void setMessageFlags(GMSMessage gfmsg, Message msg) {
-    if (gfmsg.getProcessorType() == ClusterDistributionManager.HIGH_PRIORITY_EXECUTOR
-        || gfmsg instanceof HighPriorityDistributionMessage || AlertingAction.isThreadAlerting()) {
+    if (gfmsg.isHighPriority() || AlertingAction.isThreadAlerting()) {
-    if (gfmsg instanceof DistributedCacheOperation.CacheOperationMessage) {
-      // we don't want to see our own cache operation messages
-      msg.setTransientFlag(Message.TransientFlag.DONT_LOOPBACK);
-    }
+    msg.setTransientFlag(Message.TransientFlag.DONT_LOOPBACK);
-      if (ordinal < Version.CURRENT_ORDINAL) {
-        dis = new VersionedDataInputStream(dis, Version.fromOrdinalNoThrow(ordinal, true));
+      if (ordinal < Version.getCurrentVersion().ordinal()) {
+        dis = new VersionedDataInputStream(dis,
+            Version.fromOrdinalNoThrow((short) ordinal, false));
-  void setSender(DistributionMessage dm, GMSMember m, short ordinal) {
-    InternalDistributedMember sender = null;
+  void setSender(GMSMessage dm, GMSMember m, short ordinal) {
+    GMSMember sender = null;
-  DistributionMessage readEncryptedMessage(DataInputStream dis, short ordinal,
+  GMSMessage readEncryptedMessage(DataInputStream dis, short ordinal,
-    int dfsid = InternalDataSerializer.readDSFIDHeader(dis);
+    int dfsid = services.getSerializer().readDSFIDHeader(dis);
-      logger.debug("readEncryptedMessage Reading Request id " + dfsid + " and requestid is "
-          + requestId + " myid " + this.localAddress);
-      InternalDistributedMember pkMbr = null;
+      if (logger.isDebugEnabled()) {
+        logger.debug("readEncryptedMessage Reading Request id " + dfsid + " and requestid is "
+            + requestId + " myid " + this.localAddress);
+      }
+      GMSMember pkMbr = null;
-        pk = InternalDataSerializer.readByteArray(dis);
-        data = InternalDataSerializer.readByteArray(dis);
+        pk = StaticSerialization.readByteArray(dis);
+        data = StaticSerialization.readByteArray(dis);
-        data = InternalDataSerializer.readByteArray(dis);
+        data = StaticSerialization.readByteArray(dis);
-        if (ordinal < Version.CURRENT_ORDINAL) {
-          in = new VersionedDataInputStream(in, Version.fromOrdinalNoThrow(ordinal, true));
+        if (ordinal < Version.getCurrentVersion().ordinal()) {
+          in = new VersionedDataInputStream(in,
+              Version.fromOrdinalNoThrow((short) ordinal, false));
-        DistributionMessage result = deserializeMessage(in, ordinal);
+        GMSMessage result = deserializeMessage(in, ordinal);
-          setPublicKey(pk, result.getSender());
+          setPublicKey(pk, (GMSMember) result.getSender());
-  DistributionMessage deserializeMessage(DataInputStream in, short ordinal)
+  GMSMessage deserializeMessage(DataInputStream in, short ordinal)
-    m.readEssentialData(in);
-    DistributionMessage result = DataSerializer.readObject(in);
+    m.readEssentialData(in, services.getSerializer().createDeserializationContext(in));
+    GMSMessage result = services.getManager()
+        .wrapMessage(services.getSerializer().getObjectDeserializer().readObject(in));
-  void filterOutgoingMessage(DistributionMessage m) {
+  void filterOutgoingMessage(GMSMessage m) {
-          HeapDataOutputStream hdos = new HeapDataOutputStream(500, Version.CURRENT);
+          BufferDataOutputStream hdos = new BufferDataOutputStream(500, Version.CURRENT);
-  void filterIncomingMessage(DistributionMessage m) {
+  void filterIncomingMessage(GMSMessage m) {
-            logger.trace("installing JGroups message digest {}", digest);
+            logger.trace("installing JGroups message digest {} from {}", digest, m);
-  public InternalDistributedMember getMemberID() {
+  public GMSMember getMemberID() {
-  private InternalDistributedMember getMemberFromView(GMSMember jgId, short version) {
+  private GMSMember getMemberFromView(GMSMember jgId, short version) {
-      usedDistributedMemberIdentifiers.add(localAddress);
+      usedMemberIdentifiers.add(localAddress);
-  public QuorumChecker getQuorumChecker() {
-    NetView view = this.view;
+  public GMSQuorumChecker getQuorumChecker() {
+    GMSMembershipView view = this.view;
-            usedDistributedMemberIdentifiers);
+            usedMemberIdentifiers);
-      long startTime = DistributionStats.getStatTime();
+      long startTime = services.getStatistics().startUDPDispatchRequest();
-        DistributionMessage msg = (DistributionMessage) o;
-        assert msg.getSender() != null;
+        GMSMessage msg = services.getManager().wrapMessage(o);
-        if ((services.getConfig().getTransport()
-            .getVmKind() == ClusterDistributionManager.ADMIN_ONLY_DM_TYPE)
+        if ((services.getConfig()
+            .getVmKind() == GMSMember.ADMIN_ONLY_DM_TYPE)
-        long delta = DistributionStats.getStatTime() - startTime;
-        JGroupsMessenger.this.services.getStatistics().incUDPDispatchRequestTime(delta);
+        JGroupsMessenger.this.services.getStatistics().endUDPDispatchRequest(startTime);
-    private void recordScheduledSeqno(DistributedMember member, long seqno) {
+    private void recordScheduledSeqno(GMSMember member, long seqno) {
-    private MessageHandler getMessageHandler(DistributionMessage msg) {
+    private MessageHandler getMessageHandler(GMSMessage msg) {
-  public Set<InternalDistributedMember> send(DistributionMessage msg, NetView alternateView) {
+  public Set<GMSMember> send(GMSMessage msg, GMSMembershipView alternateView) {
-  public byte[] getPublicKey(InternalDistributedMember mbr) {
+  public byte[] getPublicKey(GMSMember mbr) {
-  public void setPublicKey(byte[] publickey, InternalDistributedMember mbr) {
+  public void setPublicKey(byte[] publickey, GMSMember mbr) {
-  private HashMap<Integer, InternalDistributedMember> requestIdVsRecipients = new HashMap<>();
+  private HashMap<Integer, GMSMember> requestIdVsRecipients = new HashMap<>();
-  InternalDistributedMember getRequestedMember(int requestId) {
+  GMSMember getRequestedMember(int requestId) {
-  void addRequestId(int requestId, InternalDistributedMember mbr) {
+  void addRequestId(int requestId, GMSMember mbr) {

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 UPD74 UPD74 MOV21 UPD74 MOV74 UPD74 UPD74 MOV74 INS44 INS44 INS44 UPD43 UPD43 UPD43 UPD43 UPD43 UPD74 UPD74 UPD43 UPD42 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 INS60 INS60 MOV43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS43 INS42 MOV21 UPD43 INS43 INS42 UPD43 UPD43 INS43 INS42 UPD43 UPD43 UPD43 MOV21 UPD43 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD66 UPD42 UPD66 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 MOV43 INS59 INS43 INS59 MOV32 MOV32 INS7 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 INS74 MOV32 UPD74 UPD43 UPD42 INS42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 MOV43 UPD42 INS27 UPD42 MOV43 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 UPD42 MOV32 UPD42 UPD42 MOV42 INS16 UPD42 MOV42 INS42 INS14 UPD42 INS42 INS42 INS42 UPD45 UPD42 UPD42 INS43 INS43 UPD42 UPD43 UPD42 INS42 INS25 MOV22 INS32 INS32 INS32 MOV32 MOV32 INS25 INS32 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD43 INS40 INS32 INS32 MOV43 MOV32 INS42 MOV32 MOV32 INS11 MOV38 MOV38 MOV32 MOV32 MOV32 MOV32 MOV32 MOV42 INS32 INS32 INS32 UPD42 MOV32 INS42 UPD42 MOV42 UPD42 UPD43 UPD43 INS32 INS8 UPD43 INS32 INS42 INS42 INS32 INS42 INS32 INS42 MOV42 UPD42 INS32 INS32 INS8 UPD43 INS32 INS42 INS42 INS32 INS42 INS32 UPD42 INS32 UPD42 UPD42 MOV32 UPD42 UPD43 UPD43 UPD43 MOV42 MOV43 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS39 MOV32 UPD42 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD43 UPD42 INS42 INS32 INS32 UPD42 INS42 INS42 MOV21 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 MOV21 UPD42 UPD43 INS42 INS42 INS42 INS42 INS32 MOV42 MOV42 UPD43 UPD42 INS32 INS42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD40 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS33 INS32 INS42 INS42 INS32 INS42 UPD43 UPD42 UPD43 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD43 INS32 INS42 INS32 UPD42 INS32 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 INS42 INS42 INS34 UPD42 UPD42 UPD42 INS11 INS9 INS42 INS42 INS42 INS42 INS42 UPD45 UPD42 UPD42 UPD42 INS11 INS9 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD43 INS32 INS42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD43 INS39 INS42 INS39 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS11 UPD42 UPD45 INS42 INS42 INS42 MOV32 UPD40 UPD42 UPD42 UPD42 UPD42 INS11 UPD9 INS43 MOV32 UPD42 UPD43 MOV43 INS42 MOV43 INS42 INS39 INS42 INS11 UPD9 INS42 UPD42 INS42 INS42 INS42 INS39 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL36 DEL59 DEL60 DEL32 DEL42 DEL32 DEL42 DEL32 DEL33 DEL59 DEL60 DEL32 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL36 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL21 DEL8 DEL25 DEL43 DEL85 DEL5 DEL42 DEL32 DEL42 DEL42 DEL32 DEL40 DEL40 DEL42 DEL34 DEL2 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL43 DEL62 DEL8 DEL25 DEL42 DEL40 DEL42 DEL42 DEL32 DEL34 DEL2 DEL42 DEL42 DEL32 DEL34 DEL2 DEL42 DEL42 DEL32 DEL34 DEL2 DEL42 DEL32 DEL11 DEL40 DEL27 DEL42 DEL42 DEL43 DEL62 DEL27 DEL27 DEL42 DEL40 DEL43 DEL62 DEL8 DEL25 DEL40 DEL42 DEL42 DEL43 DEL40 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL32 DEL33 DEL27 DEL6 DEL42 DEL32 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL59 DEL60