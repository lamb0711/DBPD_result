Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getDeserializedValue(java.lang.Object, org.apache.geode.internal.cache.LocalRegion, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#getDeserializedValue(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion, boolean)
-  public Object getDeserializedValue(KeyInfo keyInfo,
-                                     LocalRegion localRegion,
-                                     boolean updateStats,
-                                     boolean disableCopyOnRead,
-                                     boolean preferCD,
-                                     EntryEventImpl clientEvent,
-                                     boolean returnTombstones,
-                                     boolean retainResult) {
-    return localRegion.getDeserializedValue(null, keyInfo, updateStats, disableCopyOnRead, preferCD, clientEvent, returnTombstones,
-      retainResult);
+  public Object getDeserializedValue(KeyInfo keyInfo, LocalRegion localRegion, boolean updateStats,
+      boolean disableCopyOnRead, boolean preferCD, EntryEventImpl clientEvent,
+      boolean returnTombstones, boolean retainResult) {
+    return localRegion.getDeserializedValue(null, keyInfo, updateStats, disableCopyOnRead, preferCD,
+        clientEvent, returnTombstones, retainResult);
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#txDestroyExistingEntry(org.apache.geode.internal.cache.EntryEventImpl, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#txDestroyExistingEntry(org.apache.geode.
+   * internal.cache.EntryEventImpl, boolean)
-  public void destroyExistingEntry(EntryEventImpl event, boolean cacheWrite, Object expectedOldValue) {
+  public void destroyExistingEntry(EntryEventImpl event, boolean cacheWrite,
+      Object expectedOldValue) {
-    lr.mapDestroy(event,
-        cacheWrite,
-        false, // isEviction
+    lr.mapDestroy(event, cacheWrite, false, // isEviction
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#txInvalidateExistingEntry(org.apache.geode.internal.cache.EntryEventImpl, boolean, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#txInvalidateExistingEntry(org.apache.geode.
+   * internal.cache.EntryEventImpl, boolean, boolean)
-  public void invalidateExistingEntry(EntryEventImpl event,
-      boolean invokeCallbacks, boolean forceNewEntry) {
+  public void invalidateExistingEntry(EntryEventImpl event, boolean invokeCallbacks,
+      boolean forceNewEntry) {
-      event.getLocalRegion().entries.invalidate(event, invokeCallbacks, forceNewEntry,false);    
+      event.getLocalRegion().entries.invalidate(event, invokeCallbacks, forceNewEntry, false);
-      // a newer event has already been applied to the cache.  this can happen
+      // a newer event has already been applied to the cache. this can happen
-  public void updateEntryVersion(EntryEventImpl event)
-      throws EntryNotFoundException {
+  public void updateEntryVersion(EntryEventImpl event) throws EntryNotFoundException {
-      // a later in time event has already been applied to the cache.  this can happen
+      // a later in time event has already been applied to the cache. this can happen
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#entryCount(org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#entryCount(org.apache.geode.internal.cache.
+   * LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getValueInVM(java.lang.Object, org.apache.geode.internal.cache.LocalRegion, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#getValueInVM(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion, boolean)
-  public Object getValueInVM(KeyInfo keyInfo, LocalRegion localRegion,
-      boolean rememberRead) {
+  public Object getValueInVM(KeyInfo keyInfo, LocalRegion localRegion, boolean rememberRead) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#containsKey(java.lang.Object, org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#containsKey(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#containsValueForKey(java.lang.Object, org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#containsValueForKey(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getEntry(java.lang.Object, org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#getEntry(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#putEntry(org.apache.geode.internal.cache.EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#putEntry(org.apache.geode.internal.cache.
+   * EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long, boolean)
-    return event.getLocalRegion().virtualPut(event, ifNew, ifOld, expectedOldValue, requireOldValue, lastModified, overwriteDestroyed);
+    return event.getLocalRegion().virtualPut(event, ifNew, ifOld, expectedOldValue, requireOldValue,
+        lastModified, overwriteDestroyed);
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#findObject(org.apache.geode.internal.cache.LocalRegion, java.lang.Object, java.lang.Object, boolean, boolean, java.lang.Object)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#findObject(org.apache.geode.internal.cache.
+   * LocalRegion, java.lang.Object, java.lang.Object, boolean, boolean, java.lang.Object)
-  public Object findObject(KeyInfo keyInfo,
-                           LocalRegion r,
-                           boolean isCreate,
-                           boolean generateCallbacks,
-                           Object value,
-                           boolean disableCopyOnRead,
-                           boolean preferCD,
-                           ClientProxyMembershipID requestingClient,
-                           EntryEventImpl clientEvent,
-                           boolean returnTombstones) {
-   return r.nonTxnFindObject(keyInfo, isCreate, generateCallbacks, value, disableCopyOnRead, preferCD, requestingClient, clientEvent, returnTombstones);
+  public Object findObject(KeyInfo keyInfo, LocalRegion r, boolean isCreate,
+      boolean generateCallbacks, Object value, boolean disableCopyOnRead, boolean preferCD,
+      ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent,
+      boolean returnTombstones) {
+    return r.nonTxnFindObject(keyInfo, isCreate, generateCallbacks, value, disableCopyOnRead,
+        preferCD, requestingClient, clientEvent, returnTombstones);
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getEntryForIterator(org.apache.geode.internal.cache.LocalRegion, java.lang.Object, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#getEntryForIterator(org.apache.geode.internal.
+   * cache.LocalRegion, java.lang.Object, boolean)
-  public Region.Entry<?, ?> getEntryForIterator(final KeyInfo keyInfo,
-      final LocalRegion currRgn, boolean rememberReads, boolean allowTombstones) {
-    final AbstractRegionEntry re = (AbstractRegionEntry)keyInfo.getKey();
-    if (re != null && (!re.isDestroyedOrRemoved())
-      ||  (allowTombstones  &&  re.isTombstone()) ) {
+  public Region.Entry<?, ?> getEntryForIterator(final KeyInfo keyInfo, final LocalRegion currRgn,
+      boolean rememberReads, boolean allowTombstones) {
+    final AbstractRegionEntry re = (AbstractRegionEntry) keyInfo.getKey();
+    if (re != null && (!re.isDestroyedOrRemoved()) || (allowTombstones && re.isTombstone())) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getKeyForIterator(java.lang.Object, org.apache.geode.internal.cache.LocalRegion, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#getKeyForIterator(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion, boolean)
-  public Object getKeyForIterator(final KeyInfo keyInfo,
-      final LocalRegion currRgn, boolean rememberReads, boolean allowTombstones) {
-    final AbstractRegionEntry re = (AbstractRegionEntry)keyInfo.getKey();
+  public Object getKeyForIterator(final KeyInfo keyInfo, final LocalRegion currRgn,
+      boolean rememberReads, boolean allowTombstones) {
+    final AbstractRegionEntry re = (AbstractRegionEntry) keyInfo.getKey();
-    if (re != null && (!re.isDestroyedOrRemoved()
-      ||  (allowTombstones  &&  re.isTombstone()) )) {
+    if (re != null && (!re.isDestroyedOrRemoved() || (allowTombstones && re.isTombstone()))) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getAdditionalKeysForIterator(org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#getAdditionalKeysForIterator(org.apache.geode.
+   * internal.cache.LocalRegion)
-   * @see org.apache.geode.internal.cache.InternalDataView#getSerializedValue(org.apache.geode.internal.cache.BucketRegion, java.lang.Object, java.lang.Object)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#getSerializedValue(org.apache.geode.internal.
+   * cache.BucketRegion, java.lang.Object, java.lang.Object)
-  public Object getSerializedValue(LocalRegion localRegion,
-                                   KeyInfo key,
-                                   boolean doNotLockEntry,
-                                   ClientProxyMembershipID requestingClient,
-                                   EntryEventImpl clientEvent,
-                                   boolean returnTombstones) throws DataLocationException {
+  public Object getSerializedValue(LocalRegion localRegion, KeyInfo key, boolean doNotLockEntry,
+      ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent,
+      boolean returnTombstones) throws DataLocationException {
-  public boolean putEntryOnRemote(EntryEventImpl event, boolean ifNew,
-      boolean ifOld, Object expectedOldValue, boolean requireOldValue,
-      long lastModified, boolean overwriteDestroyed)
+  public boolean putEntryOnRemote(EntryEventImpl event, boolean ifNew, boolean ifOld,
+      Object expectedOldValue, boolean requireOldValue, long lastModified,
+      boolean overwriteDestroyed) throws DataLocationException {
+    throw new IllegalStateException();
+  }
+
+  public void destroyOnRemote(EntryEventImpl event, boolean cacheWrite, Object expectedOldValue)
-    throw new IllegalStateException();
-  }
-
-  public void destroyOnRemote(EntryEventImpl event, boolean cacheWrite,
-      Object expectedOldValue) throws DataLocationException {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#invalidateOnRemote(org.apache.geode.internal.cache.EntryEventImpl, boolean, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#invalidateOnRemote(org.apache.geode.internal.
+   * cache.EntryEventImpl, boolean, boolean)
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getEntryOnRemote(java.lang.Object, org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.InternalDataView#getEntryOnRemote(java.lang.Object,
+   * org.apache.geode.internal.cache.LocalRegion)
-  public Entry getEntryOnRemote(KeyInfo key, LocalRegion localRegion, boolean allowTombstones) throws DataLocationException {
+  public Entry getEntryOnRemote(KeyInfo key, LocalRegion localRegion, boolean allowTombstones)
+      throws DataLocationException {
-  public void checkSupportsRegionDestroy()
-      throws UnsupportedOperationInTransactionException {
+  public void checkSupportsRegionDestroy() throws UnsupportedOperationInTransactionException {
-  public void checkSupportsRegionInvalidate()
-      throws UnsupportedOperationInTransactionException {
+  public void checkSupportsRegionInvalidate() throws UnsupportedOperationInTransactionException {
-  public void checkSupportsRegionClear()
-      throws UnsupportedOperationInTransactionException {
+  public void checkSupportsRegionClear() throws UnsupportedOperationInTransactionException {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.InternalDataView#getRegionKeysForIteration(org.apache.geode.internal.cache.LocalRegion)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.InternalDataView#getRegionKeysForIteration(org.apache.geode.
+   * internal.cache.LocalRegion)
-    //return currRegion.getRegionKeysForIteration();
+    // return currRegion.getRegionKeysForIteration();
-  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts,LocalRegion region)
-  {
+  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts,
+      LocalRegion region) {
-  public void postRemoveAll(DistributedRemoveAllOperation op,
-      VersionedObjectList successfulOps, LocalRegion region) {
+  public void postRemoveAll(DistributedRemoveAllOperation op, VersionedObjectList successfulOps,
+      LocalRegion region) {

