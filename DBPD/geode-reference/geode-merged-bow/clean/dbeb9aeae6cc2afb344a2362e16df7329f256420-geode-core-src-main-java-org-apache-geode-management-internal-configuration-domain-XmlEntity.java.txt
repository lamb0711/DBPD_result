Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public XmlEntity() {
-  }
+  public XmlEntity() {}
-   * Construct a new XmlEntity while creating XML from the cache using the
-   * element which has a type and attribute matching those given.
+   * Construct a new XmlEntity while creating XML from the cache using the element which has a type
+   * and attribute matching those given.
-   * @param type
-   *          Type of the XML element to search for. Should be one of the
-   *          constants from the {@link CacheXml} class. For example,
-   *          CacheXml.REGION.
-   * @param key
-   *          Key of the attribute to match, for example, "name" or "id".
-   * @param value
-   *          Value of the attribute to match.
+   * @param type Type of the XML element to search for. Should be one of the constants from the
+   *        {@link CacheXml} class. For example, CacheXml.REGION.
+   * @param key Key of the attribute to match, for example, "name" or "id".
+   * @param value Value of the attribute to match.
-   * Construct a new XmlEntity while creating Xml from the cache using the
-   * element which has attributes matching those given
+   * Construct a new XmlEntity while creating Xml from the cache using the element which has
+   * attributes matching those given
-   * @param parentType
-   *          Parent type of the XML element to search for. Should be one of the
-   *          constants from the {@link CacheXml} class. For example,
-   *          CacheXml.REGION.
+   * @param parentType Parent type of the XML element to search for. Should be one of the constants
+   *        from the {@link CacheXml} class. For example, CacheXml.REGION.
-   * @param parentKey
-   *          Identifier for the parent elements such "name/id"
-   * @param parentValue
-   *          Value of the identifier
-   * @param childType
-   *          Child type of the XML element to search for within the parent .
-   *          Should be one of the constants from the {@link CacheXml} class.
-   *          For example, CacheXml.INDEX.
-   * @param childKey
-   *          Identifier for the child element such as "name/id"
-   * @param childValue
-   *          Value of the child element identifier
+   * @param parentKey Identifier for the parent elements such "name/id"
+   * @param parentValue Value of the identifier
+   * @param childType Child type of the XML element to search for within the parent . Should be one
+   *        of the constants from the {@link CacheXml} class. For example, CacheXml.INDEX.
+   * @param childKey Identifier for the child element such as "name/id"
+   * @param childValue Value of the child element identifier
-  public XmlEntity(final String parentType, final String parentKey, final String parentValue, final String childType, final String childKey,
-      final String childValue) {
+  public XmlEntity(final String parentType, final String parentKey, final String parentValue,
+      final String childType, final String childKey, final String childValue) {
-   * Initialize new instances. Called from
-   * {@link #XmlEntity(String, String, String)} and
+   * Initialize new instances. Called from {@link #XmlEntity(String, String, String)} and
-  
+
-   * Use the CacheXmlGenerator to create XML from the entity associated with the
-   * current cache.
+   * Use the CacheXmlGenerator to create XML from the entity associated with the current cache.
-   * @param xmlDocument
-   *          to extract XML from.
+   * @param xmlDocument to extract XML from.
-    } catch (IOException | SAXException | ParserConfigurationException | XPathExpressionException | TransformerFactoryConfigurationError | TransformerException e) {
+    } catch (IOException | SAXException | ParserConfigurationException | XPathExpressionException
+        | TransformerFactoryConfigurationError | TransformerException e) {
-   * @param document
-   *          to extract XML from.
+   * @param document to extract XML from.
-   * @throws XPathExpressionException 
-   * @throws TransformerException 
-   * @throws TransformerFactoryConfigurationError 
+   * @throws XPathExpressionException
+   * @throws TransformerException
+   * @throws TransformerFactoryConfigurationError
-  private final String loadXmlDefinition(final Document document) throws XPathExpressionException, TransformerFactoryConfigurationError, TransformerException {
+  private final String loadXmlDefinition(final Document document)
+      throws XPathExpressionException, TransformerFactoryConfigurationError, TransformerException {
-      //Create an XPathContext here
+      // Create an XPathContext here
-    logger.warn("No XML definition could be found with name={} and attributes={}", type, attributes);
+    logger.warn("No XML definition could be found with name={} and attributes={}", type,
+        attributes);
-   * @param attributes
-   *          Attributes of the element that should match, for example "name" or
-   *          "id" and the value they should equal.  This list may be empty.
+   * @param attributes Attributes of the element that should match, for example "name" or "id" and
+   *        the value they should equal. This list may be empty.
-  private String createQueryString(final String prefix, final String element, final Map<String, String> attributes) {
+  private String createQueryString(final String prefix, final String element,
+      final Map<String, String> attributes) {
-      //queryStringBuilder.append("@").append(attrEntry.getKey()).append("=\"").append(attrEntry.getValue()).append("\"");
-      queryStringBuilder.append("@").append(attrEntry.getKey()).append("='").append(attrEntry.getValue()).append("'");
+      // queryStringBuilder.append("@").append(attrEntry.getKey()).append("=\"").append(attrEntry.getValue()).append("\"");
+      queryStringBuilder.append("@").append(attrEntry.getKey()).append("='")
+          .append(attrEntry.getValue()).append("'");
-        //queryStringBuilder.append(" and @").append(attrEntry.getKey()).append("=\"").append(attrEntry.getValue()).append("\"");
-        queryStringBuilder.append(" and @").append(attrEntry.getKey()).append("='").append(attrEntry.getValue()).append("'");
+        // queryStringBuilder.append(" and
+        // @").append(attrEntry.getKey()).append("=\"").append(attrEntry.getValue()).append("\"");
+        queryStringBuilder.append(" and @").append(attrEntry.getKey()).append("='")
+            .append(attrEntry.getValue()).append("'");
-  
+
-  
+
-   * @param key
-   *          Key of the attribute whose while will be returned.
+   * @param key Key of the attribute whose while will be returned.
-   * A convenience method to get a name or id attributes from the list of
-   * attributes if one of them has been set.  Name takes precedence.
+   * A convenience method to get a name or id attributes from the list of attributes if one of them
+   * has been set. Name takes precedence.
-    
+
-   * Gets the namespace for the element. Defaults to {@link CacheXml#GEODE_NAMESPACE}
-   * if not set.
+   * Gets the namespace for the element. Defaults to {@link CacheXml#GEODE_NAMESPACE} if not set.
-   * Gets the prefix for the element. Defaults to {@link CacheXml#PREFIX} if not
-   * set.
+   * Gets the prefix for the element. Defaults to {@link CacheXml#PREFIX} if not set.
-    return "XmlEntity [namespace=" + namespace + ", type=" + this.type + ", attributes=" + this.attributes + ", xmlDefinition=" + this.xmlDefinition + "]";
+    return "XmlEntity [namespace=" + namespace + ", type=" + this.type + ", attributes="
+        + this.attributes + ", xmlDefinition=" + this.xmlDefinition + "]";
-   * Builder for {@link XmlEntity}. Default values are as described in
-   * {@link XmlEntity}.
+   * Builder for {@link XmlEntity}. Default values are as described in {@link XmlEntity}.
-     * Produce an {@link XmlEntity} with the supplied values. Builder is reset
-     * after {@link #build()} is called. Subsequent calls will produce a new
-     * {@link XmlEntity}.
+     * Produce an {@link XmlEntity} with the supplied values. Builder is reset after
+     * {@link #build()} is called. Subsequent calls will produce a new {@link XmlEntity}.
-        xmlEntity.init();
-        
-        final XmlEntity built = xmlEntity;
-        xmlEntity = new XmlEntity();
-        
-        return built;
+      xmlEntity.init();
+
+      final XmlEntity built = xmlEntity;
+      xmlEntity = new XmlEntity();
+
+      return built;
-     * Sets the type or element name value as returned by
-     * {@link XmlEntity#getType()}
+     * Sets the type or element name value as returned by {@link XmlEntity#getType()}
-     * @param type
-     *          Name of element type.
+     * @param type Name of element type.
-     * Sets the element prefix and namespace as returned by
-     * {@link XmlEntity#getPrefix()} and {@link XmlEntity#getNamespace()}
-     * respectively. Defaults are {@link CacheXml#PREFIX} and
+     * Sets the element prefix and namespace as returned by {@link XmlEntity#getPrefix()} and
+     * {@link XmlEntity#getNamespace()} respectively. Defaults are {@link CacheXml#PREFIX} and
-     * @param prefix
-     *          Prefix of element
-     * @param namespace
-     *          Namespace of element
+     * @param prefix Prefix of element
+     * @param namespace Namespace of element
-     * Adds an attribute for the given <code>name</code> and <code>value</code>
-     * to the attributes map returned by {@link XmlEntity#getAttributes()} or
-     * {@link XmlEntity#getAttribute(String)}.
+     * Adds an attribute for the given <code>name</code> and <code>value</code> to the attributes
+     * map returned by {@link XmlEntity#getAttributes()} or {@link XmlEntity#getAttribute(String)}.
-     * @param name
-     *          Name of attribute to set.
-     * @param value
-     *          Value of attribute to set.
+     * @param name Name of attribute to set.
+     * @param value Value of attribute to set.
-     * @param attributes
-     *          {@link Map} to use.
+     * @param attributes {@link Map} to use.
-     * Sets a config xml document source to get the entity XML Definition from
-     * as returned by {@link XmlEntity#getXmlDefinition()}. Defaults to current
-     * active configuration for {@link Cache}.
+     * Sets a config xml document source to get the entity XML Definition from as returned by
+     * {@link XmlEntity#getXmlDefinition()}. Defaults to current active configuration for
+     * {@link Cache}.
-     * @param xmlDocument
-     *          Config XML document.
+     * @param xmlDocument Config XML document.
-     * Sets a config xml document source to get the entity XML Definition from
-     * as returned by {@link XmlEntity#getXmlDefinition()}. Defaults to current
-     * active configuration for {@link Cache}.
+     * Sets a config xml document source to get the entity XML Definition from as returned by
+     * {@link XmlEntity#getXmlDefinition()}. Defaults to current active configuration for
+     * {@link Cache}.
-     * @param document
-     *          Config XML {@link Document}.
+     * @param document Config XML {@link Document}.
-     * @throws TransformerException 
-     * @throws TransformerFactoryConfigurationError 
-     * @throws XPathExpressionException 
+     * @throws TransformerException
+     * @throws TransformerFactoryConfigurationError
+     * @throws XPathExpressionException
-    public XmlEntityBuilder withConfig(final Document document) throws XPathExpressionException, TransformerFactoryConfigurationError, TransformerException {
+    public XmlEntityBuilder withConfig(final Document document) throws XPathExpressionException,
+        TransformerFactoryConfigurationError, TransformerException {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66