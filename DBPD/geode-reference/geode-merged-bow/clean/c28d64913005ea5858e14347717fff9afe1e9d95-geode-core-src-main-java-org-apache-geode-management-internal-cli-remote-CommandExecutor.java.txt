Merge branch 'release/1.4.0'

-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.geode.SystemFailure;
+import org.apache.geode.management.internal.cli.exceptions.EntityNotFoundException;
+import org.apache.geode.management.internal.cli.exceptions.UserErrorException;
+  // used by the product
+    return execute(null, parseResult);
+  }
+
+  // used by the GfshParserRule to pass in a mock command
+  public Object execute(Object command, ParseResult parseResult) {
-      Object result = invokeCommand(parseResult);
+      Object result = invokeCommand(command, parseResult);
-    } catch (NotAuthorizedException e) {
+    }
+
+    // for Authorization Exception, we need to throw them for higher level code to catch
+    catch (NotAuthorizedException e) {
-    } catch (Exception e) {
+    }
+
+    // for these exceptions, needs to create a UserErrorResult (still reported as error by gfsh)
+    // no need to log since this is a user error
+    catch (UserErrorException | IllegalStateException | IllegalArgumentException e) {
+      return ResultBuilder.createUserErrorResult(e.getMessage());
+    }
+
+    // if entity not found, depending on the thrower's intention, report either as success or error
+    // no need to log since this is a user error
+    catch (EntityNotFoundException e) {
+      if (e.isStatusOK()) {
+        return ResultBuilder.createInfoResult("Skipping: " + e.getMessage());
+      } else {
+        return ResultBuilder.createUserErrorResult(e.getMessage());
+      }
+    }
+
+    // all other exceptions, log it and build an error result.
+    catch (Exception e) {
-      return ResultBuilder.createGemFireErrorResult("Error while processing command <" + parseResult
-          + "> Reason : " + ExceptionUtils.getStackTrace(e));
+      return ResultBuilder.createGemFireErrorResult(
+          "Error while processing command <" + parseResult + "> Reason : " + e.getMessage());
+    }
+
+    // for errors more lower-level than Exception, just throw them.
+    catch (VirtualMachineError e) {
+      SystemFailure.initiateFailure(e);
+      throw e;
+    } catch (Throwable t) {
+      SystemFailure.checkFailure();
+      throw t;
-  protected Object invokeCommand(ParseResult parseResult) {
-    return ReflectionUtils.invokeMethod(parseResult.getMethod(), parseResult.getInstance(),
+  protected Object invokeCommand(Object command, ParseResult parseResult) {
+    // if no command instance is passed in, use the one in the parseResult
+    if (command == null) {
+      command = parseResult.getInstance();
+    }
+    return ReflectionUtils.invokeMethod(parseResult.getMethod(), command,
-

MOV26 INS26 INS26 INS40 INS40 UPD40 INS31 INS83 INS43 INS42 INS44 INS8 INS44 INS44 INS42 INS43 INS42 INS41 MOV43 INS42 INS43 INS42 INS25 INS42 INS32 INS12 INS12 INS12 INS12 INS42 INS27 INS8 INS42 INS33 INS42 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS33 INS21 INS42 INS43 INS84 INS42 INS41 INS43 INS42 INS25 INS43 INS42 INS21 INS53 INS43 INS42 INS21 INS53 INS7 INS42 INS43 INS43 INS43 INS32 INS42 INS32 INS8 INS8 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS32 UPD42 UPD42 INS45 INS32 INS42 INS42 INS42 INS42 DEL42