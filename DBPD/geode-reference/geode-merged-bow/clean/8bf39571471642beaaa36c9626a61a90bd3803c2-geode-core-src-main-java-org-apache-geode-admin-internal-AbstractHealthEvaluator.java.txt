Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The abstract superclass of all GemFire health evaluators.
- * Basically, this class specifies what the health evaluators need and
- * what they should do.
+ * The abstract superclass of all GemFire health evaluators. Basically, this class specifies what
+ * the health evaluators need and what they should do.
- * Note that evaluators never reside in the administration VM, they
- * only in member VMs.  They are not <code>Serializable</code> and
- * aren't meant to be.
+ * Note that evaluators never reside in the administration VM, they only in member VMs. They are not
+ * <code>Serializable</code> and aren't meant to be.
- * */
-public abstract class AbstractHealthEvaluator  {
+ */
+public abstract class AbstractHealthEvaluator {
-  
-  /** The number of times this evaluator has been evaluated.  Certain
-   * checks are not made the first time an evaluation occurs.  */
+
+  /**
+   * The number of times this evaluator has been evaluated. Certain checks are not made the first
+   * time an evaluation occurs.
+   */
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * <code>GemFireHealthConfig</code> and
-   * <code>DistributionManager</code>.  
+   * <code>GemFireHealthConfig</code> and <code>DistributionManager</code>.
-   * Originally, this method took an
-   * <code>InternalDistributedSystem</code>, but we found there were
-   * race conditions during initialization.  Namely, that a
-   * <code>DistributionMessage</code> can be processed before the
-   * <code>InternalDistributedSystem</code>'s
-   * <code>DistributionManager</code> is set.
+   * Originally, this method took an <code>InternalDistributedSystem</code>, but we found there were
+   * race conditions during initialization. Namely, that a <code>DistributionMessage</code> can be
+   * processed before the <code>InternalDistributedSystem</code>'s <code>DistributionManager</code>
+   * is set.
-  protected AbstractHealthEvaluator(GemFireHealthConfig config,
-                                    DM dm)
-  {
+  protected AbstractHealthEvaluator(GemFireHealthConfig config, DM dm) {
-  /////////////////////  Instance Methods  /////////////////////
+  ///////////////////// Instance Methods /////////////////////
-   * Evaluates the health of a component of a GemFire distributed
-   * system. 
+   * Evaluates the health of a component of a GemFire distributed system.
-   * @param status
-   *        A list of {@link AbstractHealthEvaluator.HealthStatus
-   *        HealthStatus} objects that is populated when ill health is
-   *        detected.
+   * @param status A list of {@link AbstractHealthEvaluator.HealthStatus HealthStatus} objects that
+   *        is populated when ill health is detected.
-   * Checks the health of a component of a GemFire distributed
-   * system. 
+   * Checks the health of a component of a GemFire distributed system.
-   * A factory method that creates a {@link
-   * AbstractHealthEvaluator.HealthStatus HealthStats} with
+   * A factory method that creates a {@link AbstractHealthEvaluator.HealthStatus HealthStats} with
-    logger.info(LocalizedMessage.create(LocalizedStrings.AbstractHealthEvaluator_OKAY_HEALTH__0, diagnosis));
+    logger.info(LocalizedMessage.create(LocalizedStrings.AbstractHealthEvaluator_OKAY_HEALTH__0,
+        diagnosis));
-   * A factory method that creates a {@link
-   * AbstractHealthEvaluator.HealthStatus HealthStats} with
+   * A factory method that creates a {@link AbstractHealthEvaluator.HealthStatus HealthStats} with
-    logger.info(LocalizedMessage.create(LocalizedStrings.AbstractHealthEvaluator_POOR_HEALTH__0, diagnosis));
+    logger.info(LocalizedMessage.create(LocalizedStrings.AbstractHealthEvaluator_POOR_HEALTH__0,
+        diagnosis));
-   * Returns a <code>String</code> describing the component whose
-   * health is evaluated by this evaluator.
+   * Returns a <code>String</code> describing the component whose health is evaluated by this
+   * evaluator.
-  ///////////////////////  Inner Classes  //////////////////////
+  /////////////////////// Inner Classes //////////////////////
-  public class HealthStatus  {
+  public class HealthStatus {
-    //////////////////////  Constructors  //////////////////////
+    ////////////////////// Constructors //////////////////////
-     * Creates a new <code>HealthStatus</code> with the give
-     * <code>health</code> code and <code>dianosis</code> message.
+     * Creates a new <code>HealthStatus</code> with the give <code>health</code> code and
+     * <code>dianosis</code> message.
-      this.diagnosis =
-        "[" + AbstractHealthEvaluator.this.getDescription() + "] " +
-        diagnosis;
+      this.diagnosis = "[" + AbstractHealthEvaluator.this.getDescription() + "] " + diagnosis;
-    /////////////////////  Instance Methods  /////////////////////
+    ///////////////////// Instance Methods /////////////////////
-     * Returns the diagnosis prepended with a description of the
-     * component that is ill.
+     * Returns the diagnosis prepended with a description of the component that is ill.

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66