Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Total number of completed function.execute() calls (aka invocations of a
-   * individual function)Name of the function executions cimpleted statistic
+   * Total number of completed function.execute() calls (aka invocations of a individual
+   * function)Name of the function executions cimpleted statistic
-   * Total time consumed for all completed invocations of a individual function. Name of the function
-   * executions completed processing time statistic
+   * Total time consumed for all completed invocations of a individual function. Name of the
+   * function executions completed processing time statistic
-  private static final String FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME = "functionExecutionsCompletedProcessingTime";
+  private static final String FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME =
+      "functionExecutionsCompletedProcessingTime";
-   * A guage indicating the number of currently running invocations Name of the
-   * function executions running statistic
+   * A guage indicating the number of currently running invocations Name of the function executions
+   * running statistic
-   * Total number of results sent to the ResultCollector 
-   * Name of the results returned statistic
+   * Total number of results sent to the ResultCollector Name of the results returned statistic
-   * Total number of FunctionService...execute() calls Name of the total
-   * function executions call statistic
+   * Total number of FunctionService...execute() calls Name of the total function executions call
+   * statistic
-   * Total time consumed for all completed execute() calls where hasResult()
-   * returns true. Name of the function executions calls having hasResult=true
-   * time statistic
+   * Total time consumed for all completed execute() calls where hasResult() returns true. Name of
+   * the function executions calls having hasResult=true time statistic
-  private static final String FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME = "functionExecutionsHasResultCompletedProcessingTime";
+  private static final String FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME =
+      "functionExecutionsHasResultCompletedProcessingTime";
-   * A gauge indicating the number of currently active execute() calls for
-   * functions where hasResult() returns true. Name of the function execution
-   * time statistic
+   * A gauge indicating the number of currently active execute() calls for functions where
+   * hasResult() returns true. Name of the function execution time statistic
-  private static final String FUNCTION_EXECUTIONS_HASRESULT_RUNNING = "functionExecutionsHasResultRunning";
-  
-  
+  private static final String FUNCTION_EXECUTIONS_HASRESULT_RUNNING =
+      "functionExecutionsHasResultRunning";
+
+
-   * Total number of results sent to the ResultCollector 
-   * Name of the results returned statistic
+   * Total number of results sent to the ResultCollector Name of the results returned statistic
-  
+
-   * Total number of Exceptions Occured while executing function 
-   * Name of the functionExecution exceptions statistic
+   * Total number of Exceptions Occured while executing function Name of the functionExecution
+   * exceptions statistic
-  
-//  /**
-//   * Total number of bytes received before invoking the function 
-//   * Name of the functionExecution bytes received statistic
-//   */
-//  private static final String BYTES_RECEIVED = "bytesReceived";
-//  
-//  /**
-//   * Total number of bytes serialized for the result of the function
-//   * Name of the bytes serialized statistic
-//   */
-//  private static final String BYTES_SERIALIZED = "bytesSerialized";
-  
+
+  // /**
+  // * Total number of bytes received before invoking the function
+  // * Name of the functionExecution bytes received statistic
+  // */
+  // private static final String BYTES_RECEIVED = "bytesReceived";
+  //
+  // /**
+  // * Total number of bytes serialized for the result of the function
+  // * Name of the bytes serialized statistic
+  // */
+  // private static final String BYTES_SERIALIZED = "bytesSerialized";
+
-  
+
-  
+
-  
-//  /** Id of the RESULTS_RECEIVED statistic */
-//  private static final int _bytesReceived;
-//  
-//  /** Id of the FUNCTION_EXECUTIONS_EXCEPTIONS statistic */
-//  private static final int _bytesSerialized;
-  
+
+  // /** Id of the RESULTS_RECEIVED statistic */
+  // private static final int _bytesReceived;
+  //
+  // /** Id of the FUNCTION_EXECUTIONS_EXCEPTIONS statistic */
+  // private static final int _bytesSerialized;
+
-    
+
-    
+
-    _type = f
-        .createType(
-            statName,
-            statDescription,
-            new StatisticDescriptor[] {
-                f
-                    .createIntCounter(
-                        FUNCTION_EXECUTIONS_COMPLETED,
-                        "Total number of completed function.execute() calls for given function",
-                        "operations"),
+    _type = f.createType(statName, statDescription,
+        new StatisticDescriptor[] {f.createIntCounter(FUNCTION_EXECUTIONS_COMPLETED,
+            "Total number of completed function.execute() calls for given function", "operations"),
-                f
-                    .createLongCounter(
-                        FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME,
-                        "Total time consumed for all completed invocations of the given function",
-                        "nanoseconds"),
+            f.createLongCounter(FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME,
+                "Total time consumed for all completed invocations of the given function",
+                "nanoseconds"),
-                f
-                    .createIntGauge(
-                        FUNCTION_EXECUTIONS_RUNNING,
-                        "number of currently running invocations of the given function",
-                        "operations"),
+            f.createIntGauge(FUNCTION_EXECUTIONS_RUNNING,
+                "number of currently running invocations of the given function", "operations"),
-                f.createIntCounter(RESULTS_SENT_TO_RESULTCOLLECTOR,
-                    "Total number of results sent to the ResultCollector",
-                    "operations"),
+            f.createIntCounter(RESULTS_SENT_TO_RESULTCOLLECTOR,
+                "Total number of results sent to the ResultCollector", "operations"),
-                f
-                    .createIntCounter(
-                        RESULTS_RECEIVED,
-                        "Total number of results received and passed to the ResultCollector",
-                        "operations"),
+            f.createIntCounter(RESULTS_RECEIVED,
+                "Total number of results received and passed to the ResultCollector", "operations"),
-                f
-                    .createIntCounter(
-                        FUNCTION_EXECUTION_CALLS,
-                        "Total number of FunctionService.execute() calls for given function",
-                        "operations"),
+            f.createIntCounter(FUNCTION_EXECUTION_CALLS,
+                "Total number of FunctionService.execute() calls for given function", "operations"),
-                f
-                    .createLongCounter(
-                        FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME,
-                        "Total time consumed for all completed given function.execute() calls where hasResult() returns true.",
-                        "nanoseconds"),
+            f.createLongCounter(FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME,
+                "Total time consumed for all completed given function.execute() calls where hasResult() returns true.",
+                "nanoseconds"),
-                f
-                    .createIntGauge(
-                        FUNCTION_EXECUTIONS_HASRESULT_RUNNING,
-                        "A gauge indicating the number of currently active execute() calls for functions where hasResult() returns true.",
-                        "operations"),
+            f.createIntGauge(FUNCTION_EXECUTIONS_HASRESULT_RUNNING,
+                "A gauge indicating the number of currently active execute() calls for functions where hasResult() returns true.",
+                "operations"),
-                f
-                    .createIntCounter(
-                        FUNCTION_EXECUTION_EXCEPTIONS,
-                        "Total number of Exceptions Occured while executing function",
-                        "operations"),
+            f.createIntCounter(FUNCTION_EXECUTION_EXCEPTIONS,
+                "Total number of Exceptions Occured while executing function", "operations"),
-//                f
-//                    .createLongCounter(
-//                        BYTES_RECEIVED,
-//                        "Total number of bytes received before invoking the function",
-//                        "Bytes"),
-//                f
-//                    .createLongCounter(
-//                        BYTES_SERIALIZED,
-//                        "Total number of bytes serialized for the result of the function",
-//                        "Bytes"),
-                        });
+        // f
+        // .createLongCounter(
+        // BYTES_RECEIVED,
+        // "Total number of bytes received before invoking the function",
+        // "Bytes"),
+        // f
+        // .createLongCounter(
+        // BYTES_SERIALIZED,
+        // "Total number of bytes serialized for the result of the function",
+        // "Bytes"),
+        });
-    _functionExecutionsCompletedId = _type
-        .nameToId(FUNCTION_EXECUTIONS_COMPLETED);
-    _functionExecutionsCompletedProcessingTimeId = _type
-        .nameToId(FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME);
+    _functionExecutionsCompletedId = _type.nameToId(FUNCTION_EXECUTIONS_COMPLETED);
+    _functionExecutionsCompletedProcessingTimeId =
+        _type.nameToId(FUNCTION_EXECUTIONS_COMPLETED_PROCESSING_TIME);
-    _functionExecutionsHasResultCompletedProcessingTimeId = _type
-        .nameToId(FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME);
-    _functionExecutionsHasResultRunningId = _type
-        .nameToId(FUNCTION_EXECUTIONS_HASRESULT_RUNNING);
+    _functionExecutionsHasResultCompletedProcessingTimeId =
+        _type.nameToId(FUNCTION_EXECUTIONS_HASRESULT_COMPLETED_PROCESSING_TIME);
+    _functionExecutionsHasResultRunningId = _type.nameToId(FUNCTION_EXECUTIONS_HASRESULT_RUNNING);
-//    _bytesReceived = _type.nameToId(BYTES_RECEIVED);
-//    _bytesSerialized = _type.nameToId(BYTES_SERIALIZED);
+    // _bytesReceived = _type.nameToId(BYTES_RECEIVED);
+    // _bytesSerialized = _type.nameToId(BYTES_SERIALIZED);
-  
-  /** This is an instance of the FunctionStats when the statsDisabled = true;*/
+
+  /** This is an instance of the FunctionStats when the statsDisabled = true; */
-  
+
-  
+
-   * @param factory
-   *          The <code>StatisticsFactory</code> which creates the
-   *          <code>Statistics</code> instance
-   * @param name
-   *          The name of the <code>Statistics</code>
+   * @param factory The <code>StatisticsFactory</code> which creates the <code>Statistics</code>
+   *        instance
+   * @param name The name of the <code>Statistics</code>
-    this._stats = factory.createAtomicStatistics(_type,name);
-    aggregateStats = ((InternalDistributedSystem)factory).getFunctionServiceStats();
+    this._stats = factory.createAtomicStatistics(_type, name);
+    aggregateStats = ((InternalDistributedSystem) factory).getFunctionServiceStats();
-  
+
-   * Returns the current value of the "Total number of completed
-   * function.execute() calls" stat.
+   * Returns the current value of the "Total number of completed function.execute() calls" stat.
-   * Returns the current value of the "Total time consumed for all completed
-   * invocations" stat.
+   * Returns the current value of the "Total time consumed for all completed invocations" stat.
-   * @return the current value of the "functionExecutionCompleteProcessingTime"
-   *         stat
+   * @return the current value of the "functionExecutionCompleteProcessingTime" stat
-   * Returns the current value of the "number of currently running invocations"
-   * stat.
+   * Returns the current value of the "number of currently running invocations" stat.
-   * Returns the current value of the "Total number of results sent to the
-   * ResultCollector" stat.
+   * Returns the current value of the "Total number of results sent to the ResultCollector" stat.
-  
+
-   * Returns the current value of the "Total number of results received and passed to ResultCollector" stat.
+   * Returns the current value of the "Total number of results received and passed to
+   * ResultCollector" stat.
-   * Returns the current value of the "Total number of
-   * FunctionService...execute() calls" stat.
+   * Returns the current value of the "Total number of FunctionService...execute() calls" stat.
-   * Returns the current value of the "Total time consumed for all completed
-   * execute() calls where hasResult() returns true" stat.
+   * Returns the current value of the "Total time consumed for all completed execute() calls where
+   * hasResult() returns true" stat.
-   * @return the current value of the
-   *         "functionExecutionHasResultCompleteProcessingTime" stat
+   * @return the current value of the "functionExecutionHasResultCompleteProcessingTime" stat
-    return this._stats
-        .getInt(_functionExecutionsHasResultCompletedProcessingTimeId);
+    return this._stats.getInt(_functionExecutionsHasResultCompletedProcessingTimeId);
-   * Returns the current value of the "A gauge indicating the number of
-   * currently active execute() calls for functions where hasResult() returns
-   * true" stat.
+   * Returns the current value of the "A gauge indicating the number of currently active execute()
+   * calls for functions where hasResult() returns true" stat.
-   * Returns the current value of the "Total number of Exceptions Occured while executing function" stat.
+   * Returns the current value of the "Total number of Exceptions Occured while executing function"
+   * stat.
-  
+
+
-   * Increments the "_functionExecutionCallsId" and
-   * "_functionExecutionsRunningId" stats and
-   * "_functionExecutionHasResultRunningId" in case of function.hasResult =
-   * true..
+   * Increments the "_functionExecutionCallsId" and "_functionExecutionsRunningId" stats and
+   * "_functionExecutionHasResultRunningId" in case of function.hasResult = true..
-   * Increments the "functionExecutionsCompleted" and
-   * "functionExecutionCompleteProcessingTime" stats.
+   * Increments the "functionExecutionsCompleted" and "functionExecutionCompleteProcessingTime"
+   * stats.
-   * @param start
-   *          The start of the functionExecution (which is decremented from the
-   *          current time to determine the function Execution processing time).
-   * @param haveResult
-   *          haveResult=true then update the
-   *          _functionExecutionHasResultRunningId and
-   *          _functionExecutionHasResultCompleteProcessingTimeId
+   * @param start The start of the functionExecution (which is decremented from the current time to
+   *        determine the function Execution processing time).
+   * @param haveResult haveResult=true then update the _functionExecutionHasResultRunningId and
+   *        _functionExecutionHasResultCompleteProcessingTimeId
-  public void endFunctionExecution(long start,boolean haveResult) {
+  public void endFunctionExecution(long start, boolean haveResult) {
-    //Decrement function Executions running.
+    // Decrement function Executions running.
-    
+
-    
-    if(haveResult){
-      //Decrement function Executions with haveResult = true running.
+
+    if (haveResult) {
+      // Decrement function Executions with haveResult = true running.
-      
+
-  
+
-   * Increments the "_functionExecutionException" and decrements "_functionExecutionsRunningId" and decrement "_functionExecutionHasResultRunningId"
+   * Increments the "_functionExecutionException" and decrements "_functionExecutionsRunningId" and
+   * decrement "_functionExecutionHasResultRunningId"
-    //Decrement function Executions running.
-     this._stats.incInt(_functionExecutionsRunningId, -1);
-     
-     //Increment number of function excution exceptions 
-     this._stats.incInt(_functionExecutionExceptions, 1);
-     
-     if(haveResult){
-       //Decrement function Executions with haveResult = true running.
-       this._stats.incInt(_functionExecutionsHasResultRunningId, -1);
-     }
-     aggregateStats.endFunctionExecutionWithException(haveResult);
-   }
-  
+    // Decrement function Executions running.
+    this._stats.incInt(_functionExecutionsRunningId, -1);
+
+    // Increment number of function excution exceptions
+    this._stats.incInt(_functionExecutionExceptions, 1);
+
+    if (haveResult) {
+      // Decrement function Executions with haveResult = true running.
+      this._stats.incInt(_functionExecutionsHasResultRunningId, -1);
+    }
+    aggregateStats.endFunctionExecutionWithException(haveResult);
+  }
+
-   * @param functionID
-   *          represents the function for which we are returning the function Stats
-   * @param ds
-   *          represents the Distributed System       
+   * @param functionID represents the function for which we are returning the function Stats
+   * @param ds represents the Distributed System

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66