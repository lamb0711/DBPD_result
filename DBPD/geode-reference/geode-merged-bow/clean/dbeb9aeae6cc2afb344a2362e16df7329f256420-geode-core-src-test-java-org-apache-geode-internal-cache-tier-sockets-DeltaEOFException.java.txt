Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Faulty delta implementation, raising EndOfFile exception as
- * fromDelta reads more fields then wrote by toDelta
+ * Faulty delta implementation, raising EndOfFile exception as fromDelta reads more fields then
+ * wrote by toDelta
+ * 
-  
+
-      GemFireCacheImpl.getInstance().getLogger().fine(
-          "Applying delta on " + this.toString());
+      GemFireCacheImpl.getInstance().getLogger().fine("Applying delta on " + this.toString());
-          GemFireCacheImpl.getInstance().getLogger().fine(
-              " Applied delta on DeltaImpl's field 'intVal' = " + this.intVal);
+          GemFireCacheImpl.getInstance().getLogger()
+              .fine(" Applied delta on DeltaImpl's field 'intVal' = " + this.intVal);
-          GemFireCacheImpl.getInstance().getLogger().fine(
-              " Applied delta on DeltaImpl's field 'bigObj' = {"
-                  + this.bigObj[0] + " " + this.bigObj[1] + "}");
+          GemFireCacheImpl.getInstance().getLogger()
+              .fine(" Applied delta on DeltaImpl's field 'bigObj' = {" + this.bigObj[0] + " "
+                  + this.bigObj[1] + "}");
-   /* we are reading addition field here. Its is done
-    intentionly to produce faulty fromDelta implementation*/
+      /*
+       * we are reading addition field here. Its is done intentionly to produce faulty fromDelta
+       * implementation
+       */
-      
-      GemFireCacheImpl.getInstance().getLogger().fine(
-          " Reading extra DeltaObj's field 'byte' ");
-    }
-    catch (IOException ioe) {
-      GemFireCacheImpl.getInstance().getLogger().warning(
-          "DeltaObj.fromDelta(): " + ioe);
+
+      GemFireCacheImpl.getInstance().getLogger().fine(" Reading extra DeltaObj's field 'byte' ");
+    } catch (IOException ioe) {
+      GemFireCacheImpl.getInstance().getLogger().warning("DeltaObj.fromDelta(): " + ioe);
-    }
-    catch (IllegalArgumentException iae) {
-      GemFireCacheImpl.getInstance().getLogger().warning(
-          "DeltaObj.fromDelta(): " + iae);
+    } catch (IllegalArgumentException iae) {
+      GemFireCacheImpl.getInstance().getLogger().warning("DeltaObj.fromDelta(): " + iae);
-      GemFireCacheImpl.getInstance().getLogger().fine(
-          "Extracting delta from " + this.toString());
+      GemFireCacheImpl.getInstance().getLogger().fine("Extracting delta from " + this.toString());
-        GemFireCacheImpl.getInstance().getLogger().fine(
-            " Extracted delta from DeltaObj's field 'intVal' = " + this.intVal);
+        GemFireCacheImpl.getInstance().getLogger()
+            .fine(" Extracted delta from DeltaObj's field 'intVal' = " + this.intVal);
-        GemFireCacheImpl.getInstance().getLogger().fine(
-            " Extracted delta from DeltaObj's field 'bigObj' = {"
-                + this.bigObj[0] + " " + this.bigObj[1] + "}");
+        GemFireCacheImpl.getInstance().getLogger()
+            .fine(" Extracted delta from DeltaObj's field 'bigObj' = {" + this.bigObj[0] + " "
+                + this.bigObj[1] + "}");
-        throw new IllegalArgumentException(
-            "DeltaImpl.toDelta(): Unknown field code, " + deltaBits);
+        throw new IllegalArgumentException("DeltaImpl.toDelta(): Unknown field code, " + deltaBits);
-    }
-    catch (IOException ioe) {
-      GemFireCacheImpl.getInstance().getLogger().warning(
-          "DeltaObj.toDelta(): " + ioe);
+    } catch (IOException ioe) {
+      GemFireCacheImpl.getInstance().getLogger().warning("DeltaObj.toDelta(): " + ioe);
-    }
-    catch (IllegalArgumentException iae) {
-      GemFireCacheImpl.getInstance().getLogger().warning(
-          "DeltaObj.toDelta(): " + iae);
+    } catch (IllegalArgumentException iae) {
+      GemFireCacheImpl.getInstance().getLogger().warning("DeltaObj.toDelta(): " + iae);

UPD66 UPD66