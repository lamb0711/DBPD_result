GEODE-5255: check all colocated partitioned regions are ready before â€¦ (#1998)

* GEODE-5255: check all colocated partitioned regions are ready before creating any buckets.


+  private enum ReplyType {
+    INITIALIZING, SUCCESS, FAIL;
+  }
+
-  private ManageBackupBucketMessage(InternalDistributedMember recipient, int regionId,
+  ManageBackupBucketMessage(InternalDistributedMember recipient, int regionId,
-  protected boolean operateOnPartitionedRegion(ClusterDistributionManager dm, PartitionedRegion r,
-      long startTime) {
+  protected boolean operateOnPartitionedRegion(ClusterDistributionManager dm,
+      PartitionedRegion partitionedRegion, long startTime) {
-          r.getFullPath());
+          partitionedRegion.getFullPath());
-    // This is to ensure that initialization is complete before bucket creation request is
-    // serviced. BUGFIX for 35888
-    if (!r.isInitialized()) {
+    partitionedRegion.checkReadiness(); // Don't allow closed PartitionedRegions that have
+                                        // datastores to host buckets
+    PartitionedRegionDataStore prDs = partitionedRegion.getDataStore();
+
+    // This is to ensure that initialization is complete for all colocated regions
+    // before bucket creation request is serviced. BUGFIX for 35888
+    // GEODE-5255
+    boolean isReady = prDs.isPartitionedRegionReady(partitionedRegion, bucketId);
+    if (!isReady) {
-      ManageBackupBucketReplyMessage.sendStillInitializing(getSender(), getProcessorId(), dm);
+      sendManageBackupBucketReplyMessage(dm, partitionedRegion, startTime, ReplyType.INITIALIZING);
-    r.checkReadiness(); // Don't allow closed PartitionedRegions that have datastores to host
-                        // buckets
-    PartitionedRegionDataStore prDs = r.getDataStore();
-    r.getPrStats().endPartitionMessagesProcessing(startTime);
-    if (managingBucket) {
-      ManageBackupBucketReplyMessage.sendAcceptance(getSender(), getProcessorId(), dm);
-    } else {
-      ManageBackupBucketReplyMessage.sendRefusal(getSender(), getProcessorId(), dm);
-    }
+    sendManageBackupBucketReplyMessage(dm, partitionedRegion, startTime,
+        managingBucket ? ReplyType.SUCCESS : ReplyType.FAIL);
+  private void sendManageBackupBucketReplyMessage(ClusterDistributionManager dm,
+      PartitionedRegion partitionedRegion, long startTime, ReplyType type) {
+    partitionedRegion.getPrStats().endPartitionMessagesProcessing(startTime);
+    switch (type) {
+      case INITIALIZING:
+        ManageBackupBucketReplyMessage.sendStillInitializing(getSender(), getProcessorId(), dm);
+        break;
+      case FAIL:
+        ManageBackupBucketReplyMessage.sendRefusal(getSender(), getProcessorId(), dm);
+        break;
+      case SUCCESS:
+        ManageBackupBucketReplyMessage.sendAcceptance(getSender(), getProcessorId(), dm);
+        break;
+      default:
+        throw new RuntimeException("unreachable");
+    }
+  }
+
+
+    boolean isAcceptedBucket() {
+      return acceptedBucket;
+    }
+
+    boolean isNotYetInitialized() {
+      return notYetInitialized;
+    }
+

INS71 INS31 INS83 INS42 INS72 INS72 INS72 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS31 INS31 INS42 INS42 INS42 UPD42 INS60 INS25 INS21 INS43 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS21 INS50 INS39 INS42 INS8 INS39 INS42 INS8 INS39 INS59 INS38 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS49 MOV21 INS10 INS49 MOV21 INS10 INS49 MOV21 INS10 INS49 INS53 INS41 INS41 UPD42 INS42 INS32 INS42 MOV21 MOV41 INS42 INS42 INS42 INS42 INS16 INS32 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS43 INS45 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 INS42 UPD42 DEL83 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL32 DEL42 DEL8 DEL8 DEL25