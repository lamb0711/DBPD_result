Merge branch 'release/1.5.0'

+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
-import sun.misc.ObjectInputFilter;
+import org.apache.geode.GemFireConfigException;
+import org.apache.geode.InternalGemFireError;
+/**
+ * ObjectInputStreamFilterWrapper isolates InternalDataSerializer from the JDK's
+ * ObjectInputFilter class, which is absent in builds of java8 prior to 121 and
+ * is sun.misc.ObjectInputFilter in later builds but is java.io.ObjectInputFilter
+ * in java9.
+ * <p>
+ * This class uses reflection and dynamic proxies to find the class and create a
+ * serialization filter. Once java8 is retired and no longer supported by Geode the
+ * use of reflection should be removed ObjectInputFilter can be directly used by
+ * InternalDataSerializer.
+ */
-  private final ObjectInputFilter serializationFilter;
+
+  private boolean usingJava8;
+  private Object serializationFilter;
+
+  private Class configClass; // ObjectInputFilter$Config
+  private Method setObjectInputFilterMethod; // method on ObjectInputFilter$Config or
+                                             // ObjectInputStream
+  private Method createFilterMethod; // method on ObjectInputFilter$Config
+
+  private Class filterClass; // ObjectInputFilter
+  private Object ALLOWED; // field on ObjectInputFilter
+  private Object REJECTED; // field on ObjectInputFilter
+  private Method checkInputMethod; // method on ObjectInputFilter
+
+  private Class filterInfoClass; // ObjectInputFilter$FilterInfo
+  private Method serialClassMethod; // method on ObjectInputFilter$FilterInfo
-    final ObjectInputFilter userFilter =
-        ObjectInputFilter.Config.createFilter(serializationFilterSpec);
-    serializationFilter = filterInfo -> {
-      if (filterInfo.serialClass() == null) {
-        return userFilter.checkInput(filterInfo);
-      }
+    // try java8 - this will not throw an exception if ObjectInputFilter can't be found
+    if (createJava8Filter(serializationFilterSpec, sanctionedClasses)) {
+      return;
+    }
-      String className = filterInfo.serialClass().getName();
-      if (filterInfo.serialClass().isArray()) {
-        className = filterInfo.serialClass().getComponentType().getName();
-      }
-      if (sanctionedClasses.contains(className)) {
-        return ObjectInputFilter.Status.ALLOWED;
-        // return ObjectInputFilter.Status.UNDECIDED;
-      } else {
-        ObjectInputFilter.Status status = userFilter.checkInput(filterInfo);
-        if (status == ObjectInputFilter.Status.REJECTED) {
-          logger.fatal("Serialization filter is rejecting class {}", className, new Exception(""));
-        }
-        return status;
-      }
-    };
-
+    // try java9 - this throws an exception if it fails to create the filter
+    createJava9Filter(serializationFilterSpec, sanctionedClasses);
-    ObjectInputFilter.Config.setObjectInputFilter(objectInputStream, serializationFilter);
+    try {
+      if (usingJava8) {
+        setObjectInputFilterMethod.invoke(configClass, objectInputStream, serializationFilter);
+      } else {
+        setObjectInputFilterMethod.invoke(objectInputStream, serializationFilter);
+      }
+    } catch (IllegalAccessException | InvocationTargetException e) {
+      throw new InternalGemFireError("Unable to filter serialization", e);
+    }
+
+  /**
+   * java8 has sun.misc.ObjectInputFilter and uses ObjectInputFilter$Config.setObjectInputFilter()
+   */
+  private boolean createJava8Filter(String serializationFilterSpec,
+      Collection<String> sanctionedClasses) {
+    ClassPathLoader classPathLoader = ClassPathLoader.getLatest();
+    try {
+
+      filterInfoClass = classPathLoader.forName("sun.misc.ObjectInputFilter$FilterInfo");
+      serialClassMethod = filterInfoClass.getDeclaredMethod("serialClass");
+
+      filterClass = classPathLoader.forName("sun.misc.ObjectInputFilter");
+      checkInputMethod = filterClass.getDeclaredMethod("checkInput", filterInfoClass);
+
+      Class statusClass = classPathLoader.forName("sun.misc.ObjectInputFilter$Status");
+      ALLOWED = statusClass.getEnumConstants()[1];
+      REJECTED = statusClass.getEnumConstants()[2];
+      if (!ALLOWED.toString().equals("ALLOWED") || !REJECTED.toString().equals("REJECTED")) {
+        throw new GemFireConfigException(
+            "ObjectInputFilter$Status enumeration in this JDK is not as expected");
+      }
+
+      configClass = classPathLoader.forName("sun.misc.ObjectInputFilter$Config");
+      setObjectInputFilterMethod = configClass.getDeclaredMethod("setObjectInputFilter",
+          ObjectInputStream.class, filterClass);
+      createFilterMethod = configClass.getDeclaredMethod("createFilter", String.class);
+
+      serializationFilter = createSerializationFilter(serializationFilterSpec, sanctionedClasses);
+      usingJava8 = true;
+
+    } catch (ClassNotFoundException | InvocationTargetException | IllegalAccessException
+        | NoSuchMethodException e) {
+      if (filterInfoClass != null) {
+        throw new GemFireConfigException(
+            "A serialization filter has been specified but Geode was unable to configure a filter",
+            e);
+      }
+      return false;
+    }
+
+    return true;
+  }
+
+  /** java9 has java.io.ObjectInputFilter and uses ObjectInputStream.setObjectInputFilter() */
+  private void createJava9Filter(String serializationFilterSpec,
+      Collection<String> sanctionedClasses) {
+    try {
+      ClassPathLoader classPathLoader = ClassPathLoader.getLatest();
+
+      filterInfoClass = classPathLoader.forName("java.io.ObjectInputFilter$FilterInfo");
+      serialClassMethod = filterInfoClass.getDeclaredMethod("serialClass");
+
+
+      filterClass = classPathLoader.forName("java.io.ObjectInputFilter");
+      checkInputMethod = filterClass.getDeclaredMethod("checkInput", filterInfoClass);
+
+      Class statusClass = classPathLoader.forName("java.io.ObjectInputFilter$Status");
+      ALLOWED = statusClass.getEnumConstants()[1];
+      REJECTED = statusClass.getEnumConstants()[2];
+      if (!ALLOWED.toString().equals("ALLOWED") || !REJECTED.toString().equals("REJECTED")) {
+        throw new GemFireConfigException(
+            "ObjectInputFilter$Status enumeration in this JDK is not as expected");
+      }
+
+      configClass = classPathLoader.forName("java.io.ObjectInputFilter$Config");
+      setObjectInputFilterMethod =
+          ObjectInputStream.class.getDeclaredMethod("setObjectInputFilter", filterClass);
+      createFilterMethod = configClass.getDeclaredMethod("createFilter", String.class);
+
+      serializationFilter = createSerializationFilter(serializationFilterSpec, sanctionedClasses);
+
+    } catch (ClassNotFoundException | InvocationTargetException | IllegalAccessException
+        | NoSuchMethodException e) {
+      throw new GemFireConfigException(
+          "A serialization filter has been specified but Geode was unable to configure a filter",
+          e);
+    }
+  }
+
+
+  private Object createSerializationFilter(String serializationFilterSpec,
+      Collection<String> sanctionedClasses)
+      throws InvocationTargetException, IllegalAccessException {
+
+    /*
+     * create a user filter with the serialization whitelist/blacklist. This will be wrapped
+     * by a filter that white-lists sanctioned classes
+     */
+    Object userFilter = createFilterMethod.invoke(null, serializationFilterSpec);
+
+    InvocationHandler handler = (proxy, method, args) -> {
+      switch (method.getName()) {
+        case "checkInput":
+          Object filterInfo = args[0];
+          Class serialClass = (Class) serialClassMethod.invoke(filterInfo);
+          if (serialClass == null) { // no class to check, so nothing to white-list
+            return checkInputMethod.invoke(userFilter, filterInfo);
+          }
+          String className = serialClass.getName();
+          if (serialClass.isArray()) {
+            className = serialClass.getComponentType().getName();
+          }
+          if (sanctionedClasses.contains(className)) {
+            return ALLOWED;
+          } else {
+            Object status = checkInputMethod.invoke(userFilter, filterInfo);
+            if (status == REJECTED) {
+              logger.fatal("Serialization filter is rejecting class {}", className,
+                  new Exception(""));
+            }
+            return status;
+          }
+        default:
+          throw new UnsupportedOperationException(
+              "ObjectInputFilter." + method.getName() + " is not implemented");
+      }
+    };
+
+    ClassPathLoader classPathLoader = ClassPathLoader.getLatest();
+    return Proxy.newProxyInstance(classPathLoader.asClassLoader(), new Class[] {filterClass},
+        handler);
+
+  }
+
+

MOV26 INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS29 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS65 MOV83 INS39 INS59 UPD83 MOV83 UPD43 MOV43 MOV59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS43 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 MOV21 INS54 INS65 INS43 INS42 INS74 INS42 INS60 INS54 INS41 INS65 INS43 INS42 INS74 INS42 INS54 INS42 INS43 INS42 INS74 INS42 INS42 INS42 INS60 INS60 INS60 INS41 INS32 MOV8 INS32 INS8 INS12 INS66 INS42 INS43 INS43 INS43 INS59 INS8 INS12 INS9 INS66 INS42 INS43 INS43 INS8 INS12 INS42 INS43 INS43 INS43 INS59 INS43 INS59 INS43 INS59 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS60 INS21 INS21 INS21 INS21 INS60 INS21 INS21 INS25 INS21 INS21 INS21 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS86 INS42 INS42 INS32 INS42 INS42 INS32 INS3 INS42 INS42 INS8 INS8 INS84 INS42 INS53 INS42 INS42 INS7 INS7 INS7 INS7 INS43 INS59 INS7 INS7 INS27 INS8 INS7 INS7 INS7 INS7 INS7 INS84 INS42 INS25 INS41 INS43 INS59 INS7 INS7 INS7 INS7 INS43 INS59 INS7 INS7 INS27 INS8 INS7 INS7 INS7 INS7 INS84 INS42 INS53 INS42 INS42 INS33 INS42 INS59 INS59 INS59 INS8 INS42 INS42 INS42 INS42 INS5 INS4 MOV21 INS21 INS43 INS43 INS14 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS2 INS42 INS2 INS38 INS38 INS53 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS9 INS43 INS43 INS43 INS43 INS27 INS8 INS9 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS2 INS42 INS2 INS38 INS38 INS53 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS43 INS43 INS43 INS14 INS42 INS42 INS42 INS50 INS43 INS85 INS42 INS32 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS34 INS32 INS34 INS32 INS32 INS14 INS42 INS42 INS45 INS42 INS42 INS45 INS57 INS42 INS42 INS42 INS45 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS32 INS34 INS32 INS34 INS32 INS32 INS14 INS42 INS42 INS45 INS57 INS42 INS45 INS42 INS42 INS42 INS45 INS57 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS32 INS49 INS60 INS60 INS25 INS60 INS25 MOV25 INS49 INS53 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS43 INS45 INS43 MOV43 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS43 INS45 INS43 INS43 INS42 INS42 INS42 INS45 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS32 INS8 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS42 INS42 INS11 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS42 INS21 INS43 INS27 INS42 INS42 INS34 INS43 INS32 INS32 INS42 INS42 INS7 INS42 UPD43 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL23 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL83 DEL42 DEL43 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL59 DEL42 DEL32 DEL33 DEL27 DEL25 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL8 DEL25 DEL8 DEL86 DEL7 DEL21 DEL40 DEL8 DEL40 DEL40 DEL42 DEL40