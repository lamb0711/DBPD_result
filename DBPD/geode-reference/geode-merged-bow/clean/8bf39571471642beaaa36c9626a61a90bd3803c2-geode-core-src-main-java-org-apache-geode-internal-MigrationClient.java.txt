Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * MigrationClient is used to retrieve all of the data for a region from
- * a MigrationServer.  First start a MigrationServer using one version of
- * GemFire, then connect to it using a MigrationClient with another version
- * of GemFire.
+ * MigrationClient is used to retrieve all of the data for a region from a MigrationServer. First
+ * start a MigrationServer using one version of GemFire, then connect to it using a MigrationClient
+ * with another version of GemFire.
- *<p>
- * The region should be defined in the cache-xml file, and must also be
- * defined in the server's cache-xml file.
- *<p> 
- * Typically, the cache-xml file will be exactly the same as the one used
- * by the MigrationServer with different disk-dirs settings.  When Region 
- * entries are transfered from the server to the client, they are then 
- * stored in new files in these directories.
+ * The region should be defined in the cache-xml file, and must also be defined in the server's
+ * cache-xml file.
+ * <p>
+ * <p>
+ * Typically, the cache-xml file will be exactly the same as the one used by the MigrationServer
+ * with different disk-dirs settings. When Region entries are transfered from the server to the
+ * client, they are then stored in new files in these directories.
-  
+
-  protected static final int CODE_ENTRY = MigrationServer.CODE_ENTRY; /* serialized key, serialized value */
+  protected static final int CODE_ENTRY =
+      MigrationServer.CODE_ENTRY; /* serialized key, serialized value */
-  
+
-    
-    if (args.length > argIdx+1) {
+
+    if (args.length > argIdx + 1) {
-      System.err.println("MigrationClient regionName [cache-xml-file] [server-port] [server-address]");
+      System.err
+          .println("MigrationClient regionName [cache-xml-file] [server-port] [server-address]");
-    
+
-  
-  
+
+
-   * Create a MigrationClient to be used with a DistributedSystem and Cache
-   * that are created using GemFire APIs
+   * Create a MigrationClient to be used with a DistributedSystem and Cache that are created using
+   * GemFire APIs
+   * 
-      throw new IllegalArgumentException("Error - bind address cannot be resolved: '" + bindAddressName + "'");
+      throw new IllegalArgumentException(
+          "Error - bind address cannot be resolved: '" + bindAddressName + "'");
-  
+
-   * Create a distributed system.  If this method is not invoked before running
-   * the MigrationServer, an existing distributed system must exist for the
-   * server to use.
+   * Create a distributed system. If this method is not invoked before running the MigrationServer,
+   * an existing distributed system must exist for the server to use.
-    // if no discovery information has been explicitly given, use a loner ds 
+    // if no discovery information has been explicitly given, use a loner ds
-  
-  
+
+
+   * 
-  
+
-  }  
+  }
-        case -1:
-          throw new IOException("Server socket was closed while receiving entries");
-        case CODE_COMPLETED:
-          done = true;
-          break;
-        case CODE_ERROR:
-          String errorString = this.dis.readUTF();
-          System.err.println("Server responded with error: '" + errorString + "'");
-          throw new IOException(errorString);
-        case CODE_ENTRY:
-          Object key = (new ObjectInputStream(server.getInputStream())).readObject();
-          Object value = (new ObjectInputStream(server.getInputStream())).readObject();
-          if (VERBOSE) {
-            System.out.println("received " + key);
-          }
-          region.put(key, value);
-          break;
+          case -1:
+            throw new IOException("Server socket was closed while receiving entries");
+          case CODE_COMPLETED:
+            done = true;
+            break;
+          case CODE_ERROR:
+            String errorString = this.dis.readUTF();
+            System.err.println("Server responded with error: '" + errorString + "'");
+            throw new IOException(errorString);
+          case CODE_ENTRY:
+            Object key = (new ObjectInputStream(server.getInputStream())).readObject();
+            Object value = (new ObjectInputStream(server.getInputStream())).readObject();
+            if (VERBOSE) {
+              System.out.println("received " + key);
+            }
+            region.put(key, value);
+            break;
-  
-  
+
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66