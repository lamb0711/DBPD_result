Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private TransactionManagerImpl tm = TransactionManagerImpl
-      .getTransactionManager();
+  private TransactionManagerImpl tm = TransactionManagerImpl.getTransactionManager();
-  public TransactionImpl() {
-  }
+  public TransactionImpl() {}
-   * Calls the commit() of the TransactionManager that owns the current
-   * Transaction
+   * Calls the commit() of the TransactionManager that owns the current Transaction
-   * @throws RollbackException - Thrown to indicate that the transaction has
-   *             been rolled back rather than committed.
-   * @throws HeuristicMixedException - Thrown to indicate that a heuristic
-   *             decision was made and that some relevant updates have been
-   *             committed while others have been rolled back.
-   * @throws HeuristicRollbackException - Thrown to indicate that a heuristic
-   *             decision was made and that all relevant updates have been
-   *             rolled back.
-   * @throws java.lang.SecurityException - Thrown to indicate that the thread
-   *             is not allowed to commit the transaction.
-   * @throws java.lang.IllegalStateException - Thrown if the current thread is
-   *             not associated with a transaction.
-   * @throws SystemException - Thrown if the transaction manager encounters an
-   *             unexpected error condition.
+   * @throws RollbackException - Thrown to indicate that the transaction has been rolled back rather
+   *         than committed.
+   * @throws HeuristicMixedException - Thrown to indicate that a heuristic decision was made and
+   *         that some relevant updates have been committed while others have been rolled back.
+   * @throws HeuristicRollbackException - Thrown to indicate that a heuristic decision was made and
+   *         that all relevant updates have been rolled back.
+   * @throws java.lang.SecurityException - Thrown to indicate that the thread is not allowed to
+   *         commit the transaction.
+   * @throws java.lang.IllegalStateException - Thrown if the current thread is not associated with a
+   *         transaction.
+   * @throws SystemException - Thrown if the transaction manager encounters an unexpected error
+   *         condition.
-   * Calls the rollback() of the TransactionManager that owns the current
-   * Transaction
+   * Calls the rollback() of the TransactionManager that owns the current Transaction
-   * @throws java.lang.SecurityException - Thrown to indicate that the thread
-   *             is not allowed to commit the transaction.
-   * @throws java.lang.IllegalStateException - Thrown if the current thread is
-   *             not associated with a transaction.
-   * @throws SystemException - Thrown if the transaction manager encounters an
-   *             unexpected error condition.
+   * @throws java.lang.SecurityException - Thrown to indicate that the thread is not allowed to
+   *         commit the transaction.
+   * @throws java.lang.IllegalStateException - Thrown if the current thread is not associated with a
+   *         transaction.
+   * @throws SystemException - Thrown if the transaction manager encounters an unexpected error
+   *         condition.
-   * Sets the status of the Global Transaction associated with this transaction
-   * to be RollBack only
+   * Sets the status of the Global Transaction associated with this transaction to be RollBack only
-      String exception = LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_SETROLLBACKONLY_NO_GLOBAL_TRANSACTION_EXISTS.toLocalizedString();
+      String exception =
+          LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_SETROLLBACKONLY_NO_GLOBAL_TRANSACTION_EXISTS
+              .toLocalizedString();
-      if (writer.fineEnabled()) writer.fine(exception);
+      if (writer.fineEnabled())
+        writer.fine(exception);
-   * Get the status of the Global Transaction associated with this local
-   * transaction
+   * Get the status of the Global Transaction associated with this local transaction
-    String exception = LocalizedStrings.TransactionImpl_SETTRANSACTIONTIMEOUT_IS_NOT_SUPPORTED.toLocalizedString(); 
+    String exception =
+        LocalizedStrings.TransactionImpl_SETTRANSACTIONTIMEOUT_IS_NOT_SUPPORTED.toLocalizedString();
-    if (writer.fineEnabled()) writer.fine(exception);
+    if (writer.fineEnabled())
+      writer.fine(exception);
-   * Enlist the XAResource specified to the Global Transaction associated with
-   * this transaction.
+   * Enlist the XAResource specified to the Global Transaction associated with this transaction.
-   * @throws SystemException Thrown if the transaction manager encounters an
-   *             unexpected error condition.
-   * @throws IllegalStateException Thrown if the transaction in the target
-   *             object is in the prepared state or the transaction is
-   *             inactive.
-   * @throws RollbackException Thrown to indicate that the transaction has been
-   *             marked for rollback only.
+   * @throws SystemException Thrown if the transaction manager encounters an unexpected error
+   *         condition.
+   * @throws IllegalStateException Thrown if the transaction in the target object is in the prepared
+   *         state or the transaction is inactive.
+   * @throws RollbackException Thrown to indicate that the transaction has been marked for rollback
+   *         only.
-  public boolean enlistResource(XAResource xaRes) throws RollbackException,
-      IllegalStateException, SystemException {
+  public boolean enlistResource(XAResource xaRes)
+      throws RollbackException, IllegalStateException, SystemException {
-      String exception = LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_ENLISTRESOURCE_NO_GLOBAL_TRANSACTION_EXISTS.toLocalizedString();
+      String exception =
+          LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_ENLISTRESOURCE_NO_GLOBAL_TRANSACTION_EXISTS
+              .toLocalizedString();
-      if (writer.fineEnabled()) writer.fine(exception);
+      if (writer.fineEnabled())
+        writer.fine(exception);
-   * Disassociate the resource specified from the global transaction.
-   * associated with this transaction
+   * Disassociate the resource specified from the global transaction. associated with this
+   * transaction
-   * @throws SystemException Thrown if the transaction manager encounters an
-   *             unexpected error condition.
-   * @throws IllegalStateException Thrown if the transaction in the target
-   *             object is not active.
+   * @throws SystemException Thrown if the transaction manager encounters an unexpected error
+   *         condition.
+   * @throws IllegalStateException Thrown if the transaction in the target object is not active.
-   * @see javax.transaction.Transaction#delistResource(javax.transaction.xa.XAResource,
-   *      int)
+   * @see javax.transaction.Transaction#delistResource(javax.transaction.xa.XAResource, int)
-      String exception = LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_DELISTRESOURCE_NO_GLOBAL_TRANSACTION_EXISTS.toLocalizedString();
+      String exception =
+          LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_DELISTRESOURCE_NO_GLOBAL_TRANSACTION_EXISTS
+              .toLocalizedString();
-      if (writer.fineEnabled()) writer.fine(exception);
+      if (writer.fineEnabled())
+        writer.fine(exception);
-   * Register the Synchronizations by adding the synchronization object to a
-   * list of synchronizations
+   * Register the Synchronizations by adding the synchronization object to a list of
+   * synchronizations
-   * @param synchronisation Synchronization the Synchronization which needs to
-   *            be registered
+   * @param synchronisation Synchronization the Synchronization which needs to be registered
-        throw new SystemException(LocalizedStrings.TransactionImpl_TRANSACTIONIMPLREGISTERSYNCHRONIZATIONSYNCHRONIZATION_IS_NULL.toLocalizedString());
+      throw new SystemException(
+          LocalizedStrings.TransactionImpl_TRANSACTIONIMPLREGISTERSYNCHRONIZATIONSYNCHRONIZATION_IS_NULL
+              .toLocalizedString());
-      throw new SystemException(LocalizedStrings.TransactionManagerImpl_NO_TRANSACTION_PRESENT.toLocalizedString());
+      throw new SystemException(
+          LocalizedStrings.TransactionManagerImpl_NO_TRANSACTION_PRESENT.toLocalizedString());
-        String exception = LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_REGISTERSYNCHRONIZATION_SYNCHRONIZATION_CANNOT_BE_REGISTERED_BECAUSE_THE_TRANSACTION_HAS_BEEN_MARKED_FOR_ROLLBACK.toLocalizedString();
+        String exception =
+            LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_REGISTERSYNCHRONIZATION_SYNCHRONIZATION_CANNOT_BE_REGISTERED_BECAUSE_THE_TRANSACTION_HAS_BEEN_MARKED_FOR_ROLLBACK
+                .toLocalizedString();
-        if (writer.fineEnabled()) writer.fine(exception);
+        if (writer.fineEnabled())
+          writer.fine(exception);
-        String exception = LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_REGISTERSYNCHRONIZATION_SYNCHRONIZATION_CANNOT_BE_REGISTERED_ON_A_TRANSACTION_WHICH_IS_NOT_ACTIVE.toLocalizedString();
+        String exception =
+            LocalizedStrings.TransactionImpl_TRANSACTIONIMPL_REGISTERSYNCHRONIZATION_SYNCHRONIZATION_CANNOT_BE_REGISTERED_ON_A_TRANSACTION_WHICH_IS_NOT_ACTIVE
+                .toLocalizedString();
-        if (writer.fineEnabled()) writer.fine(exception);
+        if (writer.fineEnabled())
+          writer.fine(exception);
-   * Iterate over the list of Synchronizations to complete all the methods to
-   * be performed before completion
+   * Iterate over the list of Synchronizations to complete all the methods to be performed before
+   * completion
-   * Iterate over the list of Synchronizations to complete all the methods to
-   * be performed after completion
+   * Iterate over the list of Synchronizations to complete all the methods to be performed after
+   * completion
-   * @param status int The status of the Global transaction associated with the
-   *            transaction
+   * @param status int The status of the Global transaction associated with the transaction
-  //This method is to be used only for test validation
+  // This method is to be used only for test validation

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66