Merge branch 'release/1.4.0'

-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.util.HashSet;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
-import org.apache.commons.lang.StringUtils;
+import org.apache.geode.cache.execute.Function;
+import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.management.cli.CliMetaData;
+import org.apache.geode.management.ManagementService;
+import org.apache.geode.management.internal.cli.CliUtil;
+import org.apache.geode.management.internal.cli.exceptions.EntityNotFoundException;
+import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
-import org.apache.geode.management.internal.cli.util.MemberNotFoundException;
+import org.apache.geode.management.internal.configuration.domain.XmlEntity;
+ * this provides wrapper around the static methods in CliUtils for easy mock of the commands
- * @see org.apache.geode.cache.Cache
- * @see org.apache.geode.cache.execute.FunctionService
- * @see org.apache.geode.distributed.DistributedMember
- * @see org.apache.geode.management.internal.cli.shell.Gfsh
- * @see org.springframework.shell.core.CommandMarker
+ * this class should not have much implementation of its own other then those tested in
+ * GfshCommandJUnitTest
-  default String convertDefaultValue(final String from, final String to) {
-    return CliMetaData.ANNOTATION_DEFAULT_VALUE.equals(from) ? to : from;
-  }
-
-  default String toString(final Boolean condition, final String trueValue,
-      final String falseValue) {
-    return Boolean.TRUE.equals(condition) ? StringUtils.defaultIfBlank(trueValue, "true")
-        : StringUtils.defaultIfBlank(falseValue, "false");
-  }
-
-  default String toString(final Throwable t, final boolean printStackTrace) {
-    String message = t.getMessage();
-
-    if (printStackTrace) {
-      StringWriter writer = new StringWriter();
-      t.printStackTrace(new PrintWriter(writer));
-      message = writer.toString();
-    }
-
-    return message;
-  }
+  static final String EXPERIMENTAL = "(Experimental) ";
+  default XmlEntity findXmlEntity(List<CliFunctionResult> functionResults) {
+    return functionResults.stream().filter(CliFunctionResult::isSuccessful)
+        .map(CliFunctionResult::getXmlEntity).filter(Objects::nonNull).findFirst().orElse(null);
+  }
+
-
-  @SuppressWarnings("deprecated")
-  default DistributedMember getMember(final InternalCache cache, final String memberName) {
-    for (final DistributedMember member : getMembers(cache)) {
-      if (memberName.equalsIgnoreCase(member.getName())
-          || memberName.equalsIgnoreCase(member.getId())) {
-        return member;
-      }
-    }
+  /**
+   * this either returns a non-null member or throw an exception if member is not found.
+   */
+  default DistributedMember getMember(final String memberName) {
+    DistributedMember member = findMember(memberName);
-    throw new MemberNotFoundException(
-        CliStrings.format(CliStrings.MEMBER_NOT_FOUND_ERROR_MESSAGE, memberName));
+    if (member == null) {
+      throw new EntityNotFoundException(
+          CliStrings.format(CliStrings.MEMBER_NOT_FOUND_ERROR_MESSAGE, memberName));
+    }
+    return member;
-   * Gets all members in the GemFire distributed system/cache.
-   *
-   * @param cache the GemFire cache.
-   * @return all members in the GemFire distributed system/cache.
-   * @see org.apache.geode.management.internal.cli.CliUtil#getAllMembers(org.apache.geode.internal.cache.InternalCache)
-   * @deprecated use CliUtil.getAllMembers(org.apache.geode.cache.Cache) instead
+   * this will return the member found or null if no member with that name
-  @Deprecated
-  default Set<DistributedMember> getMembers(final InternalCache cache) {
-    Set<DistributedMember> members = new HashSet<>(cache.getMembers());
-    members.add(cache.getDistributedSystem().getDistributedMember());
-    return members;
+  default DistributedMember findMember(final String memberName) {
+    return CliUtil.getDistributedMemberByNameOrId(memberName);
+  }
+
+  /**
+   * Gets all members in the GemFire distributed system/cache, including locators
+   */
+  default Set<DistributedMember> getAllMembers(final InternalCache cache) {
+    return CliUtil.getAllMembers(cache);
+  }
+
+  /**
+   * Get All members, excluding locators
+   */
+  default Set<DistributedMember> getAllNormalMembers(InternalCache cache) {
+    return CliUtil.getAllNormalMembers(cache);
+  /**
+   * if no members matches these names, an empty set would return
+   */
+  default Set<DistributedMember> findMembers(String[] groups, String[] members) {
+    return CliUtil.findMembers(groups, members);
+  }
+
+  /**
+   * if no members matches these names, a UserErrorException will be thrown
+   */
+  default Set<DistributedMember> getMembers(String[] groups, String[] members) {
+    Set<DistributedMember> matchingMembers = findMembers(groups, members);
+    if (matchingMembers.size() == 0) {
+      throw new EntityNotFoundException(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    }
+    return matchingMembers;
+  }
+
+  /**
+   * if no members matches these names, an empty set would return
+   */
+  default Set<DistributedMember> findMembersIncludingLocators(String[] groups, String[] members) {
+    return CliUtil.findMembersIncludingLocators(groups, members);
+  }
+
+  /**
+   * if no members matches these names, a UserErrorException will be thrown
+   */
+  default Set<DistributedMember> getMembersIncludingLocators(String[] groups, String[] members) {
+    Set<DistributedMember> matchingMembers = findMembersIncludingLocators(groups, members);
+    if (matchingMembers.size() == 0) {
+      throw new EntityNotFoundException(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+    }
+    return matchingMembers;
+  }
+
+  default ManagementService getManagementService() {
+    return ManagementService.getExistingManagementService(getCache());
+  }
+
+  default Set<DistributedMember> findMembersForRegion(InternalCache cache, String regionPath) {
+    return CliUtil.getRegionAssociatedMembers(regionPath, cache, true);
+  }
+
+  default ResultCollector<?, ?> executeFunction(Function function, Object args,
+      final Set<DistributedMember> targetMembers) {
+    return CliUtil.executeFunction(function, args, targetMembers);
+  }
+
+  default ResultCollector<?, ?> executeFunction(Function function, Object args,
+      final DistributedMember targetMember) {
+    return executeFunction(function, args, Collections.singleton(targetMember));
+  }
+
+  default List<CliFunctionResult> executeAndGetFunctionResult(Function function, Object args,
+      Set<DistributedMember> targetMembers) {
+    ResultCollector rc = executeFunction(function, args, targetMembers);
+    return CliFunctionResult.cleanResults((List<?>) rc.getResult());
+  }
+
+  default Set<DistributedMember> findAnyMembersForRegion(InternalCache cache, String regionPath) {
+    return CliUtil.getRegionAssociatedMembers(regionPath, cache, false);
+  }
+
+  default Set<DistributedMember> findMembersWithAsyncEventQueue(String queueId) {
+    return CliUtil.getMembersWithAsyncEventQueue(getCache(), queueId);
+  }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS55 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS29 MOV79 MOV83 MOV42 MOV43 INS23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 INS31 INS31 INS31 INS31 MOV31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD65 MOV65 INS83 INS83 MOV43 INS59 INS43 INS42 INS29 MOV83 MOV43 INS42 MOV44 INS8 INS29 INS83 INS43 INS42 MOV44 INS8 INS29 INS83 INS74 INS42 MOV44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS29 MOV83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 MOV74 INS42 INS44 MOV44 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 MOV83 INS74 INS42 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS44 MOV44 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS8 MOV83 INS74 UPD42 MOV42 MOV44 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS66 INS66 INS66 INS66 INS42 INS45 INS42 INS74 INS42 INS65 INS60 INS25 MOV41 INS65 UPD42 MOV42 INS43 UPD42 INS41 INS65 INS43 INS43 INS41 INS65 INS43 INS43 INS43 INS42 INS41 INS65 INS43 INS43 INS5 INS42 INS5 INS42 INS41 INS65 INS5 UPD42 MOV42 INS5 UPD42 MOV60 INS25 INS41 INS65 INS43 INS43 INS5 INS42 INS5 INS42 INS41 INS65 INS43 INS43 INS5 INS42 INS5 INS42 INS60 INS25 MOV41 INS42 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS41 INS43 INS76 INS76 INS43 INS42 INS43 INS42 INS83 INS74 INS42 INS41 INS43 INS76 INS76 INS43 INS42 INS43 INS42 UPD42 INS41 INS43 INS43 INS43 INS42 INS43 INS42 INS74 INS42 INS60 INS41 INS43 INS43 INS43 INS42 INS41 UPD43 MOV43 INS43 INS43 INS42 INS41 INS43 INS43 INS32 INS66 INS43 INS59 INS27 INS8 INS66 INS42 INS32 INS66 INS42 INS42 INS32 INS66 INS42 INS42 INS42 INS32 INS66 INS42 INS42 MOV43 INS85 MOV43 INS85 INS32 INS66 MOV43 INS85 MOV43 INS85 MOV74 INS27 INS8 INS42 INS66 INS42 UPD42 MOV42 MOV43 INS85 MOV43 INS85 INS32 INS66 INS42 INS42 MOV43 INS85 INS43 INS85 INS74 INS59 INS27 INS8 UPD42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS59 INS32 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS33 MOV53 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 INS32 INS34 INS53 INS42 INS42 INS42 INS42 UPD42 MOV42 INS43 INS43 INS42 INS32 INS32 INS34 INS53 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 MOV42 INS9 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS9 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 MOV42 INS32 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS14 INS42 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS14 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS74 INS32 UPD42 INS32 INS42 INS90 UPD43 INS43 INS40 INS43 INS40 INS43 INS76 INS42 INS42 INS32 INS42 INS90 INS42 INS42 UPD42 INS42 INS42 INS42 INS32 INS42 INS90 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 DEL40 DEL42 DEL83 DEL42 DEL44 DEL83 DEL42 DEL40 DEL32 DEL42 DEL42 DEL16 DEL83 DEL39 DEL83 DEL42 DEL66 DEL65 DEL40 DEL65 DEL40 DEL65 DEL40 DEL65 DEL40 DEL65 DEL29 DEL42 DEL83 DEL43 DEL42 DEL44 DEL83 DEL42 DEL44 DEL40 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL45 DEL32 DEL16 DEL41 DEL8 DEL31 DEL42 DEL83 DEL42 DEL43 DEL44 DEL42 DEL43 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL45 DEL79 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL27 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL40 DEL42 DEL40 DEL43 DEL69 DEL68 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL42 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL55