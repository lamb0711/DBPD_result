Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A thread that monitors the health of the distributed system.  It is
- * kind of like a {@link
- * org.apache.geode.distributed.internal.HealthMonitorImpl}.  In
- * order to get it to place nice with the rest of the health
- * monitoring APIs, this class pretends that it is a
- * <code>GemFireVM</code>.  Kind of hokey, but it beats a bunch of
- * special-case code.
+ * A thread that monitors the health of the distributed system. It is kind of like a
+ * {@link org.apache.geode.distributed.internal.HealthMonitorImpl}. In order to get it to place nice
+ * with the rest of the health monitoring APIs, this class pretends that it is a
+ * <code>GemFireVM</code>. Kind of hokey, but it beats a bunch of special-case code.
- * */
+ */
-  
+
-  /** The most recent <code>OKAY_HEALTH</code> diagnoses of the
-   * GemFire system */
+  /**
+   * The most recent <code>OKAY_HEALTH</code> diagnoses of the GemFire system
+   */
-  /** The most recent <code>POOR_HEALTH</code> diagnoses of the
-   * GemFire system */
+  /**
+   * The most recent <code>POOR_HEALTH</code> diagnoses of the GemFire system
+   */
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * Creates a new <code>DistributedSystemHealthMonitor</code> that
-   * evaluates the health of the distributed system against the given
-   * thresholds once every <code>interval</code> seconds.
+   * Creates a new <code>DistributedSystemHealthMonitor</code> that evaluates the health of the
+   * distributed system against the given thresholds once every <code>interval</code> seconds.
-   * @param eval
-   *        Used to evaluate the health of the distributed system
-   * @param healthImpl
-   *        Receives callbacks when the health of the distributed
-   *        system changes
-   * @param interval
-   *        How often the health is checked
+   * @param eval Used to evaluate the health of the distributed system
+   * @param healthImpl Receives callbacks when the health of the distributed system changes
+   * @param interval How often the health is checked
-                                 GemFireHealthImpl healthImpl,
-                                 int interval) {
+      GemFireHealthImpl healthImpl, int interval) {
-    ThreadGroup group =
-      LoggingThreadGroup.createThreadGroup(LocalizedStrings.DistributedSystemHealthMonitor_HEALTH_MONITORS.toLocalizedString(), logger);
-    String name = LocalizedStrings.DistributedSystemHealthMonitor_HEALTH_MONITOR_FOR_0.toLocalizedString(eval.getDescription());
+    ThreadGroup group = LoggingThreadGroup.createThreadGroup(
+        LocalizedStrings.DistributedSystemHealthMonitor_HEALTH_MONITORS.toLocalizedString(),
+        logger);
+    String name = LocalizedStrings.DistributedSystemHealthMonitor_HEALTH_MONITOR_FOR_0
+        .toLocalizedString(eval.getDescription());
-   * Does the work of monitoring the health of the distributed
-   * system. 
+   * Does the work of monitoring the health of the distributed system.
-      logger.debug("Monitoring health of {} every {} seconds", this.eval.getDescription(), interval);
+      logger.debug("Monitoring health of {} every {} seconds", this.eval.getDescription(),
+          interval);
-        for (Iterator iter = status.iterator(); iter.hasNext(); ) {
+        for (Iterator iter = status.iterator(); iter.hasNext();) {
-            (AbstractHealthEvaluator.HealthStatus) iter.next();
+              (AbstractHealthEvaluator.HealthStatus) iter.next();
-        
+
-        
+
-  void start(){
+  void start() {
-      } 
-      catch (InterruptedException ex) {
+      } catch (InterruptedException ex) {
-        logger.warn(LocalizedMessage.create(LocalizedStrings.DistributedSystemHealthMonitor_INTERRUPTED_WHILE_STOPPING_HEALTH_MONITOR_THREAD), ex);
+        logger.warn(
+            LocalizedMessage.create(
+                LocalizedStrings.DistributedSystemHealthMonitor_INTERRUPTED_WHILE_STOPPING_HEALTH_MONITOR_THREAD),
+            ex);
-  //////////////////////  GemFireVM Methods  //////////////////////
+  ////////////////////// GemFireVM Methods //////////////////////
-      throw new org.apache.geode.InternalGemFireException(LocalizedStrings.DistributedSystemHealthMonitor_COULD_NOT_GET_LOCALHOST.toLocalizedString());
+      throw new org.apache.geode.InternalGemFireException(
+          LocalizedStrings.DistributedSystemHealthMonitor_COULD_NOT_GET_LOCALHOST
+              .toLocalizedString());
-  
+
-//    return getId().toString();
+    // return getId().toString();
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public java.io.File getGemFireDir() {
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public java.io.File getGeodeHomeDir() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  
+
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public Properties getLicenseInfo(){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public Properties getLicenseInfo() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public StatResource[] getStats(String statisticsTypeName){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public StatResource[] getStats(String statisticsTypeName) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public StatResource[] getAllStats(){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  }
-   
-  public DLockInfo[] getDistributedLockInfo(){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public StatResource[] getAllStats() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public void addStatListener(StatListener observer,
-                              StatResource observedResource,
-                              Stat observedStat){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public DLockInfo[] getDistributedLockInfo() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  
-  public void removeStatListener(StatListener observer){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  }  
-  public void addHealthListener(HealthListener observer,
-                                GemFireHealthConfig cfg){
-
+  public void addStatListener(StatListener observer, StatResource observedResource,
+      Stat observedStat) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  
-  public void removeHealthListener(){
+
+  public void removeStatListener(StatListener observer) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  }
+
+  public void addHealthListener(HealthListener observer, GemFireHealthConfig cfg) {
-  public void resetHealthStatus(){
+  public void removeHealthListener() {
+
+  }
+
+  public void resetHealthStatus() {
-  public String[] getHealthDiagnosis(GemFireHealth.Health healthCode){
+  public String[] getHealthDiagnosis(GemFireHealth.Health healthCode) {
-  public Config getConfig(){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public Config getConfig() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public void setConfig(Config cfg){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public void setConfig(Config cfg) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public GfManagerAgent getManagerAgent(){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  }
-  
-  public String[] getSystemLogs(){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public GfManagerAgent getManagerAgent() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public void setInspectionClasspath(String classpath){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public String[] getSystemLogs() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  
-  public String getInspectionClasspath(){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+
+  public void setInspectionClasspath(String classpath) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  
-  public Region[] getRootRegions(){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+
+  public String getInspectionClasspath() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  }
+
+  public Region[] getRootRegions() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public Region createVMRootRegion(CacheInfo c, String name,
-                                   RegionAttributes attrs) {
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public Region createVMRootRegion(CacheInfo c, String name, RegionAttributes attrs) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public Region createSubregion(CacheInfo c, String parentPath,
-                                String name, RegionAttributes attrs) {
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public Region createSubregion(CacheInfo c, String parentPath, String name,
+      RegionAttributes attrs) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public int getCacheInspectionMode(){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public int getCacheInspectionMode() {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public void takeRegionSnapshot(String regionName, int snapshotId){
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public void takeRegionSnapshot(String regionName, int snapshotId) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public AdminBridgeServer addCacheServer(CacheInfo cache)
-    throws AdminException {
+  public AdminBridgeServer addCacheServer(CacheInfo cache) throws AdminException {
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public AdminBridgeServer getBridgeInfo(CacheInfo cache, 
-                                         int id)
-    throws AdminException {
+  public AdminBridgeServer getBridgeInfo(CacheInfo cache, int id) throws AdminException {
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public AdminBridgeServer startBridgeServer(CacheInfo cache,
-                                             AdminBridgeServer bridge)
-    throws AdminException {
+  public AdminBridgeServer startBridgeServer(CacheInfo cache, AdminBridgeServer bridge)
+      throws AdminException {
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-  public AdminBridgeServer stopBridgeServer(CacheInfo cache,
-                                            AdminBridgeServer bridge)
-    throws AdminException {
+  public AdminBridgeServer stopBridgeServer(CacheInfo cache, AdminBridgeServer bridge)
+      throws AdminException {
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-   * This operation is not supported for this object. Will throw 
-   * UnsupportedOperationException if invoked.
+   * This operation is not supported for this object. Will throw UnsupportedOperationException if
+   * invoked.
-  public void setAlertsManager(StatAlertDefinition[] alertDefs, 
-      long refreshInterval, boolean setRemotely) {
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public void setAlertsManager(StatAlertDefinition[] alertDefs, long refreshInterval,
+      boolean setRemotely) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-   * This operation is not supported for this object. Will throw 
-   * UnsupportedOperationException if invoked.
+   * This operation is not supported for this object. Will throw UnsupportedOperationException if
+   * invoked.
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
-   * This operation is not supported for this object. Will throw 
-   * UnsupportedOperationException if invoked.
+   * This operation is not supported for this object. Will throw UnsupportedOperationException if
+   * invoked.
-  public void updateAlertDefinitions(StatAlertDefinition[] alertDefs,
-      int actionCode) {
-    throw new UnsupportedOperationException(LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());
+  public void updateAlertDefinitions(StatAlertDefinition[] alertDefs, int actionCode) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.DistributedSystemHealthMonitor_NOT_A_REAL_GEMFIREVM.toLocalizedString());

UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66