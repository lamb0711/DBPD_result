GEODE-6861: separate static config object from runtime info in the Clâ€¦ (#3754)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>

* use ConfigRealizer to retrieve the runtime information for configuration on each member
* list result would return a List of Response object which has a configuration object and a list runtime objects
* use existing object for runtime member info and move them to geode-management module.

+import java.io.IOException;
-import org.apache.geode.cache.CacheClosedException;
-import org.apache.geode.management.internal.cli.domain.CacheServerInfo;
-import org.apache.geode.management.internal.cli.domain.MemberInformation;
+import org.apache.geode.management.runtime.CacheServerInfo;
+import org.apache.geode.management.runtime.MemberInformation;
-      MemberInformation memberInfo = new MemberInformation();
-
-      memberInfo.setName(member.getName());
-      memberInfo.setId(member.getId());
-      memberInfo.setHost(member.getHost());
-      memberInfo.setProcessId(member.getProcessId());
-
-      SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(config,
-          SecurableCommunicationChannel.WEB);
-      memberInfo.setWebSSL(sslConfig.isEnabled());
-      memberInfo.setSecured(StringUtils.isNotBlank(config.getSecurityManager()));
-      memberInfo.setGroups(config.getGroups());
-      memberInfo.setLogFilePath(config.getLogFile().getCanonicalPath());
-      memberInfo.setStatArchiveFilePath(config.getStatisticArchiveFile().getCanonicalPath());
-      memberInfo.setWorkingDirPath(System.getProperty("user.dir"));
-      memberInfo.setCacheXmlFilePath(config.getCacheXmlFile().getCanonicalPath());
-      memberInfo.setLocators(config.getLocators());
-      memberInfo.setServerBindAddress(config.getServerBindAddress());
-      memberInfo.setOffHeapMemorySize(config.getOffHeapMemorySize());
-      memberInfo.setHttpServicePort(config.getHttpServicePort());
-      memberInfo.setHttpServiceBindAddress(config.getHttpServiceBindAddress());
-
-      MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();
-      MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage();
-      memberInfo.setHeapUsage(bytesToMeg(memUsage.getUsed()));
-      memberInfo.setMaxHeapSize(bytesToMeg(memUsage.getMax()));
-      memberInfo.setInitHeapSize(bytesToMeg(memUsage.getInit()));
-      memberInfo.setHostedRegions(CliUtil.getAllRegionNames(cache));
-
-      List<CacheServer> csList = cache.getCacheServers();
-
-      // A member is a server only if it has a cacheserver
-      if (csList != null && !csList.isEmpty()) {
-        memberInfo.setServer(true);
-        Iterator<CacheServer> iters = csList.iterator();
-        while (iters.hasNext()) {
-          CacheServer cs = iters.next();
-
-          CacheServerInfo cacheServerInfo = new CacheServerInfo(cs);
-          memberInfo.addCacheServerInfo(cacheServerInfo);
-        }
-        Map<ClientProxyMembershipID, CacheClientStatus> allConnectedClients =
-            InternalClientMembership.getStatusForAllClientsIgnoreSubscriptionStatus();
-        Iterator<ClientProxyMembershipID> it = allConnectedClients.keySet().iterator();
-        int numConnections = 0;
-
-        while (it.hasNext()) {
-          CacheClientStatus status = allConnectedClients.get(it.next());
-          numConnections = numConnections + status.getNumberOfConnections();
-        }
-        memberInfo.setClientCount(numConnections);
-
-        ServerLauncher.ServerState state = ServerLauncher.getServerState();
-        if (state != null) {
-          memberInfo.setStatus(state.getStatus().getDescription());
-        }
-      } else {
-        memberInfo.setServer(false);
-        InternalLocator locator = InternalLocator.getLocator();
-        if (locator != null) {
-          memberInfo.setLocatorPort(locator.getPort());
-        }
-
-        LocatorLauncher.LocatorState state = LocatorLauncher.getLocatorState();
-        if (state != null) {
-          memberInfo.setStatus(state.getStatus().getDescription());
-        }
-      }
+      MemberInformation memberInfo = getMemberInformation(cache, config, member);
-    } catch (CacheClosedException e) {
-      functionContext.getResultSender().sendException(e);
+  public MemberInformation getMemberInformation(Cache cache, DistributionConfig config,
+      DistributedMember member) throws IOException {
+    MemberInformation memberInfo = new MemberInformation();
+
+    memberInfo.setName(member.getName());
+    memberInfo.setId(member.getId());
+    memberInfo.setHost(member.getHost());
+    memberInfo.setProcessId(member.getProcessId());
+
+    SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(config,
+        SecurableCommunicationChannel.WEB);
+    memberInfo.setWebSSL(sslConfig.isEnabled());
+    memberInfo.setSecured(StringUtils.isNotBlank(config.getSecurityManager()));
+    memberInfo.setGroups(config.getGroups());
+    memberInfo.setLogFilePath(config.getLogFile().getCanonicalPath());
+    memberInfo.setStatArchiveFilePath(config.getStatisticArchiveFile().getCanonicalPath());
+    memberInfo.setWorkingDirPath(System.getProperty("user.dir"));
+    memberInfo.setCacheXmlFilePath(config.getCacheXmlFile().getCanonicalPath());
+    memberInfo.setLocators(config.getLocators());
+    memberInfo.setServerBindAddress(config.getServerBindAddress());
+    memberInfo.setOffHeapMemorySize(config.getOffHeapMemorySize());
+    memberInfo.setHttpServicePort(config.getHttpServicePort());
+    memberInfo.setHttpServiceBindAddress(config.getHttpServiceBindAddress());
+
+    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();
+    MemoryUsage memUsage = memoryMXBean.getHeapMemoryUsage();
+    memberInfo.setHeapUsage(bytesToMeg(memUsage.getUsed()));
+    memberInfo.setMaxHeapSize(bytesToMeg(memUsage.getMax()));
+    memberInfo.setInitHeapSize(bytesToMeg(memUsage.getInit()));
+    memberInfo.setHostedRegions(CliUtil.getAllRegionNames(cache));
+
+    List<CacheServer> csList = cache.getCacheServers();
+
+    // A member is a server only if it has a cacheserver
+    if (csList != null && !csList.isEmpty()) {
+      memberInfo.setServer(true);
+      Iterator<CacheServer> iters = csList.iterator();
+      while (iters.hasNext()) {
+        CacheServer cs = iters.next();
+        CacheServerInfo cacheServerInfo = new CacheServerInfo();
+        cacheServerInfo.setBindAddress(cs.getBindAddress());
+        cacheServerInfo.setPort(cs.getPort());
+        cacheServerInfo.setRunning(cs.isRunning());
+        cacheServerInfo.setMaxConnections(cs.getMaxConnections());
+        cacheServerInfo.setMaxThreads(cs.getMaxThreads());
+        memberInfo.addCacheServerInfo(cacheServerInfo);
+      }
+      Map<ClientProxyMembershipID, CacheClientStatus> allConnectedClients =
+          InternalClientMembership.getStatusForAllClientsIgnoreSubscriptionStatus();
+      Iterator<ClientProxyMembershipID> it = allConnectedClients.keySet().iterator();
+      int numConnections = 0;
+
+      while (it.hasNext()) {
+        CacheClientStatus status = allConnectedClients.get(it.next());
+        numConnections = numConnections + status.getNumberOfConnections();
+      }
+      memberInfo.setClientCount(numConnections);
+
+      ServerLauncher.ServerState state = ServerLauncher.getServerState();
+      if (state != null) {
+        memberInfo.setStatus(state.getStatus().getDescription());
+      }
+    } else {
+      memberInfo.setServer(false);
+      InternalLocator locator = InternalLocator.getLocator();
+      if (locator != null) {
+        memberInfo.setLocatorPort(locator.getPort());
+      }
+
+      LocatorLauncher.LocatorState state = LocatorLauncher.getLocatorState();
+      if (state != null) {
+        memberInfo.setStatus(state.getStatus().getDescription());
+      }
+    }
+    return memberInfo;
+  }

MOV26 UPD40 UPD40 UPD40 INS31 MOV78 INS83 INS39 INS42 MOV44 INS8 INS43 INS42 INS44 INS44 INS44 INS43 MOV8 INS54 INS42 UPD43 MOV43 UPD42 MOV42 INS43 INS42 INS43 INS42 INS42 INS41 INS8 MOV12 UPD42 INS42 INS42 INS42 MOV60 MOV60 MOV60 MOV60 INS60 MOV21 INS43 INS59 INS42 INS42 INS32 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 MOV43 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8