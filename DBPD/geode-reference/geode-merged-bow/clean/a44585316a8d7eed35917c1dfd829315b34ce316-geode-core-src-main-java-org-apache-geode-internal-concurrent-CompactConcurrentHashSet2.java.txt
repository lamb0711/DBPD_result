GEODE-2929: remove superfluous uses of final from internal classes

-    public final K getKey() {
+    public K getKey() {
-    public final int hashCode() {
+    public int hashCode() {
-    public final String toString() {
+    public String toString() {
-    public final boolean equals(Object o) {
+    public boolean equals(Object o) {
-  static final int spread(int h) {
+  static int spread(int h) {
-  private static final int tableSizeFor(int c) {
+  private static int tableSizeFor(int c) {
-  static final <K> Node<K> tabAt(Node<K>[] tab, int i) {
+  static <K> Node<K> tabAt(Node<K>[] tab, int i) {
-  static final <K> boolean casTabAt(Node<K>[] tab, int i, Node<K> c, Node<K> v) {
+  static <K> boolean casTabAt(Node<K>[] tab, int i, Node<K> c, Node<K> v) {
-  static final <K> void setTabAt(Node<K>[] tab, int i, Node<K> v) {
+  static <K> void setTabAt(Node<K>[] tab, int i, Node<K> v) {
-  final boolean putKey(V key, boolean onlyIfAbsent) {
+  boolean putKey(V key, boolean onlyIfAbsent) {
-  final boolean removeNode(Object key) {
+  boolean removeNode(Object key) {
-  static final class ForwardingNode<K> extends Node<K> {
+  static class ForwardingNode<K> extends Node<K> {
-  static final class ReservationNode<K> extends Node<K> {
+  static class ReservationNode<K> extends Node<K> {
-  static final int resizeStamp(int n) {
+  static int resizeStamp(int n) {
-  private final Node<V>[] initTable() {
+  private Node<V>[] initTable() {
-  private final void addCount(long x, int check) {
+  private void addCount(long x, int check) {
-  final Node<V>[] helpTransfer(Node<V>[] tab, Node<V> f) {
+  Node<V>[] helpTransfer(Node<V>[] tab, Node<V> f) {
-  private final void tryPresize(int size) {
+  private void tryPresize(int size) {
-  private final void transfer(Node<V>[] tab, Node<V>[] nextTab) {
+  private void transfer(Node<V>[] tab, Node<V>[] nextTab) {
-  private final void treeifyBin(Node<V>[] tab, int index) {
+  private void treeifyBin(Node<V>[] tab, int index) {
-  static final class TreeNode<K> extends Node<K> {
+  static class TreeNode<K> extends Node<K> {
-    final TreeNode<K> findTreeNode(int h, Object k, Class<?> kc) {
+    TreeNode<K> findTreeNode(int h, Object k, Class<?> kc) {
-  static final class TreeBin<K> extends Node<K> {
+  static class TreeBin<K> extends Node<K> {
-    private final void lockRoot() {
+    private void lockRoot() {
-    private final void unlockRoot() {
+    private void unlockRoot() {
-    private final void contendedLock() {
+    private void contendedLock() {
-    final Node<K> find(int h, Object k) {
+    Node<K> find(int h, Object k) {
-    final TreeNode<K> putTreeVal(int h, K k) {
+    TreeNode<K> putTreeVal(int h, K k) {
-    final boolean removeTreeNode(TreeNode<K> p) {
+    boolean removeTreeNode(TreeNode<K> p) {
-  static final class TableStack<K> {
+  static class TableStack<K> {
-    final Node<K> advance() {
+    Node<K> advance() {
-    public final boolean hasNext() {
+    public boolean hasNext() {
-    public final boolean hasMoreElements() {
+    public boolean hasMoreElements() {
-    public final void remove() {
+    public void remove() {
-  static final class KeyIterator<K> extends BaseIterator<K> implements Iterator<K>, Enumeration<K> {
+  static class KeyIterator<K> extends BaseIterator<K> implements Iterator<K>, Enumeration<K> {
-    public final K next() {
+    public K next() {
-    public final K nextElement() {
+    public K nextElement() {
-  static final class CounterCell {
+  static class CounterCell {
-  static final class CounterHashCode {
+  static class CounterHashCode {
-  final long sumCount() {
+  long sumCount() {
-  private final void fullAddCount(long x, CounterHashCode hc, boolean wasUncontended) {
+  private void fullAddCount(long x, CounterHashCode hc, boolean wasUncontended) {

MOV31 UPD42 UPD42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83