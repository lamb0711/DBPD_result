Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  private  String[] fieldNames;
-  private  ObjectType[] fieldTypes;
+  private String[] fieldNames;
+  private ObjectType[] fieldTypes;
-  
+
-  public  StructTypeImpl() { 
-  }
-  
+  public StructTypeImpl() {}
+
-  
-  public StructTypeImpl(String[] fieldNames, String[] indexAlternativeFieldNames, ObjectType[] fieldTypes) {
+
+  public StructTypeImpl(String[] fieldNames, String[] indexAlternativeFieldNames,
+      ObjectType[] fieldTypes) {
-  
+
-      throw new IllegalArgumentException(LocalizedStrings.StructTypeImpl_FIELDNAMES_MUST_NOT_BE_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.StructTypeImpl_FIELDNAMES_MUST_NOT_BE_NULL.toLocalizedString());
-    this.fieldTypes = fieldTypes == null ?
-                      new ObjectType[this.fieldNames.length] : fieldTypes;
+    this.fieldTypes = fieldTypes == null ? new ObjectType[this.fieldNames.length] : fieldTypes;
-  
-  
+
+
-  
+
-  
+
-    throw new IllegalArgumentException(LocalizedStrings.StructTypeImpl_FIELDNAME_0_NOT_FOUND.toLocalizedString(fieldName));
+    throw new IllegalArgumentException(
+        LocalizedStrings.StructTypeImpl_FIELDNAME_0_NOT_FOUND.toLocalizedString(fieldName));
-  
+
-    if (!(obj instanceof StructTypeImpl)) return false;
-    StructTypeImpl t = (StructTypeImpl)obj;
-    return  (Arrays.equals(this.fieldNames, t.getFieldNames()) || Arrays.equals(this.indexAlternativeFieldNames, t.getFieldNames())) &&
-            Arrays.equals(getFieldTypes(), t.getFieldTypes());
+    if (!(obj instanceof StructTypeImpl))
+      return false;
+    StructTypeImpl t = (StructTypeImpl) obj;
+    return (Arrays.equals(this.fieldNames, t.getFieldNames())
+        || Arrays.equals(this.indexAlternativeFieldNames, t.getFieldNames()))
+        && Arrays.equals(getFieldTypes(), t.getFieldTypes());
-  
+
-  
+
-  public String toString(){
+  public String toString() {
-    for(int i=0; i < fieldNames.length; i++){
-      if (i > 0) sb.append(',');
+    for (int i = 0; i < fieldNames.length; i++) {
+      if (i > 0)
+        sb.append(',');
-  public boolean isCollectionType() { return false; }
-  @Override
-  public boolean isMapType() { return false; }
-  @Override
-  public boolean isStructType() { return true; }
-  
+  public boolean isCollectionType() {
+    return false;
+  }
-  // Static Utilities 
+  @Override
+  public boolean isMapType() {
+    return false;
+  }
+
+  @Override
+  public boolean isStructType() {
+    return true;
+  }
+
+
+  // Static Utilities
-    if (s instanceof StructImpl) { 
-      return (StructTypeImpl)s.getStructType();
+    if (s instanceof StructImpl) {
+      return (StructTypeImpl) s.getStructType();
-  
+
-    this.fieldNames = DataSerializer.readStringArray(in);    
-    this.fieldTypes = (ObjectType[])DataSerializer.readObjectArray(in);
+    this.fieldNames = DataSerializer.readStringArray(in);
+    this.fieldTypes = (ObjectType[]) DataSerializer.readObjectArray(in);
-    DataSerializer.writeObjectArray(fieldTypes, out);    
-  }  
-  
+    DataSerializer.writeObjectArray(fieldTypes, out);
+  }
+

