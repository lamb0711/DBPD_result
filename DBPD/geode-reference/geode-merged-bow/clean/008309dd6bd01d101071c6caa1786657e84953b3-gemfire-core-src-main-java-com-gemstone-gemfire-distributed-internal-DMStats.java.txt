Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-   * begin a unicast datagram write operation.  Use the result of this operation
-   * when calling endUcastWrite
+   * increments
+   * the number of unicast writes performed and the number of bytes written
-  public long startUcastWrite();
-  /**
-   * record the end of a unicast datagram write operation and increment
-   * the number of writes performed and the number of bytes written
-   * @since 5.0
-   */
-  public void endUcastWrite(long start, int bytesWritten);
+  public void incUcastWriteBytes(int bytesWritten);
-  public void incUcastReadBytes(long amount);
+  public void incUcastReadBytes(int amount);
-   * begin a multicast write operation.  Use the result of this operation
-   * when calling endMcastWrite
-   * @since 5.0
+   * increment the number of multicast datagrams sent and
+   * the number of multicast bytes transmitted
-  public long startMcastWrite();
-  /**
-   * record the end of a multicast datagram write operation
-   * @since 5.0
-   */
-  public void endMcastWrite(long start, int bytesWritten);
+  public void incMcastWriteBytes(int bytesWritten);
-  public void incMcastReadBytes(long amount);
+  public void incMcastReadBytes(int amount);
+  public int getMcastReads();
-   * increment the number of unicast UDP retransmissions sent to
+   * increment the number of unicast UDP retransmission requests received from
-   * start a period of suspension of message transmission while we
-   * wait for acknowledgement of unicast messages this process has
-   * transmitted to other processes.  This returns a timestamp to be
-   * used when calling endUcastFlush()
-   * @since 5.0
-   */
-  public long startUcastFlush();
-  
-  /**
-   * end a period of suspension of message transmission while waiting
-   * for acknowledgment of unicast messages
-   * @since 5.0
-   */
-  public void endUcastFlush(long start);
-  
-  /**
-   * increment the number of flow control requests sent to other processes
-   */
-  public void incFlowControlRequests();
-  
-  /**
-   * increment the number of flow control responses sent to other processes
-   */
-  public void incFlowControlResponses();
-  
-  /**
-   * start a period of suspension of message transmission while waiting
-   * for flow-control recharge from another process.  This returns a
-   * timestamp to be used when calling endFlowControlWait();
-   * @since 5.0
-   */
-  public long startFlowControlWait();
-  
-  /**
-   * end a period of suspension of message transmission while waiting for
-   * flow-control recharge from another process.
-   */
-  public void endFlowControlWait(long start);
-
-  /**
-   * start a period of suspension of message transmission based on throttle
-   * request from another process.  
-   * This returns a timestamp to be used when calling endFlowControlWait();
-   * @since 5.0
-   */
-  public long startFlowControlThrottleWait();
-  
-  /**
-   * end a period of suspension of message transmission based on throttle 
-   * request from another process.
-   */
-  public void endFlowControlThrottleWait(long start);
-
-  /**
-   * this statistic measures travel of messages up the jgroups stack
-   * for tuning purposes
-   */
-  public void incJgUNICASTdataReceived(long value);
-
-  public void incjgDownTime(long value);
-  public void incjgUpTime(long value);
-  public void incjChannelUpTime(long value);
-
-  public void setJgQueuedMessagesSize(long value);
-  
-  public void setJgSTABLEreceivedMessagesSize(long value);
-  public void setJgSTABLEsentMessagesSize(long value);
-  
-  public void incJgSTABLEsuspendTime(long value);
-  public void incJgSTABLEmessages(long value);
-  public void incJgSTABLEmessagesSent(long value);
-  public void incJgSTABILITYmessages(long value);
-  
-  public void incJgFCsendBlocks(long value);
-  public void incJgFCautoRequests(long value);
-  public void incJgFCreplenish(long value);
-  public void incJgFCresumes(long value);
-  public void incJgFCsentCredits(long value);
-  public void incJgFCsentThrottleRequests(long value);
-  
-  public void setJgUNICASTreceivedMessagesSize(long amount);
-  public void setJgUNICASTsentMessagesSize(long amount);
-  public void setJgUNICASTsentHighPriorityMessagesSize(long amount);
-
-  /** increment the number of javagroups fragmentations performed */
-  public void incJgFragmentationsPerformed();
-  
-  /** increment the number of fragments created during javagroups fragmentation */
-  public void incJgFragmentsCreated(long value);
-  
-  /**
-  public void incJgNAKACKwaits(long value);
-
+  
+  //Stats for GMSHealthMonitor
+  public long getHeartbeatRequestsSent();
+  
+  public void incHeartbeatRequestsSent();
+  
+  public long getHeartbeatRequestsReceived();
+  
+  public void incHeartbeatRequestsReceived();
+  
+  public long getHeartbeatsSent();
+  
+  public void incHeartbeatsSent();
+
+  public long getHeartbeatsReceived();
+  
+  public void incHeartbeatsReceived();
+  
+
+  public long getSuspectsSent();
+  
+  public void incSuspectsSent();
+
+  public long getSuspectsReceived();
+  
+  public void incSuspectsReceived();
+  
+  
+  public long getFinalCheckRequestsSent();
+  
+  public void incFinalCheckRequestsSent();
+  
+  public long getFinalCheckRequestsReceived();
+  
+  public void incFinalCheckRequestsReceived();
+  
+  public long getFinalCheckResponsesSent();
+  
+  public void incFinalCheckResponsesSent();
+  
+  public long getFinalCheckResponsesReceived();
+  
+  public void incFinalCheckResponsesReceived();
+  
+  
+  public long getTcpFinalCheckRequestsSent();
+  
+  public void incTcpFinalCheckRequestsSent();
+
+  public long getTcpFinalCheckRequestsReceived();
+  
+  public void incTcpFinalCheckRequestsReceived();
+  
+  public long getTcpFinalCheckResponsesSent();
+  
+  public void incTcpFinalCheckResponsesSent();
+
+  public long getTcpFinalCheckResponsesReceived();
+  
+  public void incTcpFinalCheckResponsesReceived();
+
+  
+  public long getUdpFinalCheckRequestsSent();
+  
+  public void incUdpFinalCheckRequestsSent();
+  
+//  UDP final check is implemented using HeartbeatRequestMessage and HeartbeatMessage
+//  So the following code is commented out.
+  
+//  public long getUdpFinalCheckRequestsReceived();
+//  
+//  public void incUdpFinalCheckRequestsReceived();
+//  
+//  public long getUdpFinalCheckResponsesSent();
+//  
+//  public void incUdpFinalCheckResponsesSent();
+
+  public long getUdpFinalCheckResponsesReceived();
+  
+  public void incUdpFinalCheckResponsesReceived();

MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 INS31 INS31 UPD42 MOV44 UPD39 UPD42 MOV44 MOV29 UPD42 UPD39 UPD42 UPD42 INS42 UPD39 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 MOV83 MOV39 UPD42 MOV42 INS83 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 INS39 INS42 UPD42 MOV65 UPD39 UPD39 UPD42 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL31 DEL66 DEL65 DEL39 DEL42 DEL44 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL39 DEL42 DEL44 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL66 DEL65 DEL29 DEL42 DEL39 DEL42 DEL44 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL66 DEL65 DEL29 DEL42 DEL39 DEL42 DEL44 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL39 DEL42 DEL44 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44