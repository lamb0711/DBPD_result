Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-/** An OutputStream that wraps to a ByteBuffer
+/**
+ * An OutputStream that wraps to a ByteBuffer
+ * 
+
-      this.buffer.put((byte)(b & 0xff));
-    }
-    catch (BufferOverflowException e) {
+      this.buffer.put((byte) (b & 0xff));
+    } catch (BufferOverflowException e) {
-      this.buffer.put((byte)(b & 0xff));
+      this.buffer.put((byte) (b & 0xff));
-      this.buffer.put((byte)(b & 0xff));
+      this.buffer.put((byte) (b & 0xff));
-    //System.out.println("buffer.capacity=" + buffer.capacity() + " expand amt = " + amount);
-    //System.out.println("reallocating buffer size to " + newcap);
+    // System.out.println("buffer.capacity=" + buffer.capacity() + " expand amt = " + amount);
+    // System.out.println("reallocating buffer size to " + newcap);
-      //System.out.println("writing len="+len + " cap=" + buffer.capacity() + " pos="+buffer.position());
-      //Thread.dumpStack();
+      // System.out.println("writing len="+len + " cap=" + buffer.capacity() + "
+      // pos="+buffer.position());
+      // Thread.dumpStack();
-    }
-    catch (BufferOverflowException e) {
-      expand(len - (buffer.capacity()-buffer.position()));
+    } catch (BufferOverflowException e) {
+      expand(len - (buffer.capacity() - buffer.position()));
-    }
-    catch (BufferUnderflowException e) {
-      expand(len - (buffer.capacity()-buffer.position()));
+    } catch (BufferUnderflowException e) {
+      expand(len - (buffer.capacity() - buffer.position()));
-  
+
-  /** gets the content ByteBuffer, ready for reading.  The stream should
-      not be written to past this point until it has been reset. */
+  /**
+   * gets the content ByteBuffer, ready for reading. The stream should not be written to past this
+   * point until it has been reset.
+   */
-  /** Gets a duplicate of the current content buffer.
+  /**
+   * Gets a duplicate of the current content buffer.

UPD66 UPD66