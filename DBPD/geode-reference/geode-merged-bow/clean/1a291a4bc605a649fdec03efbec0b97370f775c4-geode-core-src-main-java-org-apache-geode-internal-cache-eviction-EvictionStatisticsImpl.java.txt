GEODE-3622: Implement new algorithm for eviction (#1017)

* GEODE-3622: Implement new algorithm for eviction

  * Old algorithm is still used by default. Use "-Dgeode.EvictionScanAsync=true"
    to enable the new algorithm. Note that the new algorithm is still experimental
    and is subject to change. The new algorithm uses asynchronous sorting of the
    LRU list to prevent a long synchronous sort when the first item is evicted.
  * Moved region entries into their own package
  * Organized eviction code into new eviction package
  * General refactoring of eviction classes

-
-package org.apache.geode.internal.cache.lru;
+package org.apache.geode.internal.cache.eviction;
-import org.apache.geode.StatisticsType;
-/**
- * Statistics for both the LocalLRUClockHand. Note that all its instance fields are
- * <code>final</code>. Thus, we do not need to worry about refreshing an instance when it resides in
- * shared memory.
- */
-public class LRUStatistics {
+class EvictionStatisticsImpl implements InternalEvictionStatistics {
-  protected int limitId;
+  private final int limitId;
+
-  protected int destroysLimitId;
-  protected int counterId;
-  /** entries that have been evicted from the LRU list */
-  protected int evictionsId;
-  /** entries that have been destroyed, but not yet evicted from the LRU list */
-  protected int destroysId;
-  protected int evaluationsId;
-  protected int greedyReturnsId;
+  private final int destroysLimitId;
+  private final int counterId;
-  // Note: the following atomics have been added so that the LRU code
+  /** entries that have been evicted from the LRU list */
+  private final int evictionsId;
+
+  /** entries that have been destroyed, but not yet evicted from the LRU list */
+  private final int destroysId;
+  private final int evaluationsId;
+  private final int greedyReturnsId;
+
+  // Note: the following atomics have been added so that the eviction code
-  ///////////////////////// Constructors /////////////////////////
-
-  /**
-   * Constructor for the LRUStatistics object
-   *
-   * @param name Description of the Parameter
-   */
-  public LRUStatistics(StatisticsFactory factory, String name, EnableLRU helper) {
+  public EvictionStatisticsImpl(StatisticsFactory factory, String name, EvictionController helper) {
-    if (!helper.getEvictionAlgorithm().isLRUHeap()) {
+    if (helper.getEvictionAlgorithm().isLRUHeap()) {
+      limitId = 0;
+    } else {
-  public LRUStatistics(StatisticsFactory factory, String name, StatisticsType statisticsType) {
-    stats = factory.createAtomicStatistics(statisticsType, name);
-    limitId = 0;
-    destroysLimitId = 0;
-    counterId = 0;
-    evictionsId = 0;
-    destroysId = 0;
-    this.evaluationsId = 0;
-    this.greedyReturnsId = 0;
+  @Override
+  public void incEvictions() {
+    this.evictions.getAndAdd(1);
+    stats.incLong(evictionsId, 1);
-  public void close() {
-    stats.close();
-  }
-
-  /** common counter for different lru types */
+  /** common counter for different eviction types */
+  @Override
-  /** limit */
+  @Override
+  public long getLimit() {
+    return this.limit.get();
+  }
+
+  @Override
+  public void updateCounter(long delta) {
+    if (delta != 0) {
+      this.counter.getAndAdd(delta);
+      stats.incLong(counterId, delta);
+    }
+  }
+
+  @Override
+  public long getEvictions() {
+    return this.evictions.get();
+  }
+
+  @Override
+  public Statistics getStats() {
+    return this.stats;
+  }
+
+  @Override
+  public void incDestroys() {
+    this.destroys.getAndAdd(1);
+    stats.incLong(destroysId, 1);
+  }
+
+  @Override
+  public void close() {
+    stats.close();
+  }
+
+  @Override
+  @Override
-  public long getLimit() {
-    return this.limit.get();
-  }
-
+  @Override
-  public void updateCounter(long delta) {
-    if (delta != 0) {
-      this.counter.getAndAdd(delta);
-      stats.incLong(counterId, delta);
-    }
-  }
-
+  @Override
-  // public void setCounter(long newValue) {
-  // long oldValue = this.counter.get();
-  // if (oldValue != newValue) {
-  // this.counter.set(oldValue+newValue);
-  // stats.setLong(counterId, newValue);
-  // }
-  // }
-  //
+  @Override
-  public void incEvictions() {
-    this.evictions.getAndAdd(1);
-    stats.incLong(evictionsId, 1);
-  }
-
+  @Override
-  public long getEvictions() {
-    return this.evictions.get();
-  }
-
-  public void resetDestroys() {
-    if (this.destroys.get() != 0) {
-      this.destroys.set(0);
-      stats.setLong(destroysId, 0);
-    }
-  }
-
-  public void incDestroys() {
-    this.destroys.getAndAdd(1);
-    stats.incLong(destroysId, 1);
-  }
-
+  @Override
-  public void incEvaluations(long numEvals) {
-    stats.incLong(evaluationsId, numEvals);
+  @Override
+  public void incEvaluations(long evaluations) {
+    stats.incLong(evaluationsId, evaluations);
-  public void incGreedyReturns(long numEvals) {
-    stats.incLong(greedyReturnsId, numEvals);
+  @Override
+  public void incGreedyReturns(long greedyReturns) {
+    stats.incLong(greedyReturnsId, greedyReturns);
-
-
-  public Statistics getStats() {
-    return this.stats;
-  }
-

MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD40 INS42 INS43 INS31 INS42 UPD83 INS83 UPD83 INS83 UPD83 INS83 UPD83 INS83 UPD83 INS83 UPD83 INS83 UPD83 INS83 UPD42 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 MOV83 MOV39 MOV42 MOV44 MOV8 INS78 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 MOV32 INS8 UPD66 MOV21 UPD42 UPD42 DEL40 DEL26 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL38 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL52 DEL42 DEL22 DEL34 DEL7 DEL21 DEL52 DEL42 DEL22 DEL34 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL34 DEL27 DEL52 DEL42 DEL22 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL31