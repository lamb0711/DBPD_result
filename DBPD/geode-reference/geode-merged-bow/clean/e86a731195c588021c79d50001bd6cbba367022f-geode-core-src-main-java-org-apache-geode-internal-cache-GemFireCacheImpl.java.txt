Merge branch 'release/1.3.0'

+import org.apache.geode.cache.query.internal.InternalQueryService;
+import org.apache.geode.cache.query.internal.MethodInvocationAuthorizer;
+import org.apache.geode.cache.query.internal.RestrictedMethodInvocationAuthorizer;
+import org.apache.geode.internal.cache.event.EventTrackerExpiryTask;
+import org.apache.geode.internal.cache.wan.GatewaySenderQueueEntrySynchronizationListener;
+import org.apache.geode.internal.security.SecurityServiceFactory;
-import org.apache.geode.cache.client.internal.ConnectionImpl;
-import org.apache.geode.internal.cache.persistence.BackupManager;
+import org.apache.geode.internal.config.ClusterConfigurationNotAvailableException;
-import org.apache.geode.internal.process.ClusterConfigurationNotAvailableException;
+  private volatile ConfigurationResponse configurationResponse;
+
-  private final EventTracker.ExpiryTask recordedEventSweeper;
+  private final EventTrackerExpiryTask recordedEventSweeper;
-  private final SecurityService securityService = SecurityService.getSecurityService();
+  private final SecurityService securityService;
+
+  private final Set<RegionEntrySynchronizationListener> synchronizationListeners =
+      new ConcurrentHashSet<>();
-  public static GemFireCacheImpl createClient(DistributedSystem system, PoolFactory pf,
+  public static GemFireCacheImpl createClient(InternalDistributedSystem system, PoolFactory pf,
-  public static GemFireCacheImpl create(DistributedSystem system, CacheConfig cacheConfig) {
+  public static GemFireCacheImpl create(InternalDistributedSystem system, CacheConfig cacheConfig) {
-  static GemFireCacheImpl createWithAsyncEventListeners(DistributedSystem system,
+  static GemFireCacheImpl createWithAsyncEventListeners(InternalDistributedSystem system,
-  public static Cache create(DistributedSystem system, boolean existingOk,
+  public static Cache create(InternalDistributedSystem system, boolean existingOk,
-  private static GemFireCacheImpl basicCreate(DistributedSystem system, boolean existingOk,
+  private static GemFireCacheImpl basicCreate(InternalDistributedSystem system, boolean existingOk,
+          system.setCache(instance);
+        } else {
+          system.setCache(instance);
-  private GemFireCacheImpl(boolean isClient, PoolFactory pf, DistributedSystem system,
+  private GemFireCacheImpl(boolean isClient, PoolFactory pf, InternalDistributedSystem system,
-      this.system = (InternalDistributedSystem) system;
+      this.system = system;
+
+      this.configurationResponse = requestSharedConfiguration();
+
+      // apply the cluster's properties configuration and initialize security using that
+      // configuration
+      ClusterConfigurationLoader.applyClusterPropertiesConfiguration(this.configurationResponse,
+          this.system.getConfig());
+
+      this.securityService =
+          SecurityServiceFactory.create(this.system.getConfig().getSecurityProps(), cacheConfig);
+      this.system.setSecurityService(this.securityService);
+
-      this.recordedEventSweeper = EventTracker.startTrackerServices(this);
+      this.recordedEventSweeper = createEventTrackerExpiryTask();
+
+      addRegionEntrySynchronizationListener(new GatewaySenderQueueEntrySynchronizationListener());
+  /**
+   * Initialize the EventTracker's timer task. This is stored for tracking and shutdown purposes
+   */
+  private EventTrackerExpiryTask createEventTrackerExpiryTask() {
+    long lifetimeInMillis =
+        Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "messageTrackingTimeout",
+            PoolFactory.DEFAULT_SUBSCRIPTION_MESSAGE_TRACKING_TIMEOUT / 3);
+    EventTrackerExpiryTask task = new EventTrackerExpiryTask(lifetimeInMillis);
+    getCCPTimer().scheduleAtFixedRate(task, lifetimeInMillis, lifetimeInMillis);
+    return task;
+  }
+
+  @Override
+  public SecurityService getSecurityService() {
+    return this.securityService;
+  }
+
-  private void deployJarsReceivedFromClusterConfiguration(ConfigurationResponse response) {
-    try {
-      ClusterConfigurationLoader.deployJarsReceivedFromClusterConfiguration(this, response);
-    } catch (IOException | ClassNotFoundException e) {
-      throw new GemFireConfigException(
-          LocalizedStrings.GemFireCache_EXCEPTION_OCCURRED_WHILE_DEPLOYING_JARS_FROM_SHARED_CONDFIGURATION
-              .toLocalizedString(),
-          e);
-    }
-  }
-
+    // set ClassPathLoader and then deploy cluster config jars
-    // request and check cluster configuration
-    ConfigurationResponse configurationResponse = requestSharedConfiguration();
-    deployJarsReceivedFromClusterConfiguration(configurationResponse);
-
-    // apply the cluster's properties configuration and initialize security using that configuration
-    ClusterConfigurationLoader.applyClusterPropertiesConfiguration(this, configurationResponse,
-        this.system.getConfig());
-
-    // first initialize the security service using the security properties
-    this.securityService.initSecurity(this.system.getConfig().getSecurityProps());
-    // secondly if cacheConfig has a securityManager, use that instead
-    if (this.cacheConfig.getSecurityManager() != null) {
-      this.securityService.setSecurityManager(this.cacheConfig.getSecurityManager());
-    }
-    // if cacheConfig has a postProcessor, use that instead
-    if (this.cacheConfig.getPostProcessor() != null) {
-      this.securityService.setPostProcessor(this.cacheConfig.getPostProcessor());
+    try {
+      ClusterConfigurationLoader.deployJarsReceivedFromClusterConfiguration(this,
+          this.configurationResponse);
+    } catch (IOException | ClassNotFoundException e) {
+      throw new GemFireConfigException(
+          LocalizedStrings.GemFireCache_EXCEPTION_OCCURRED_WHILE_DEPLOYING_JARS_FROM_SHARED_CONDFIGURATION
+              .toLocalizedString(),
+          e);
-      if (configurationResponse == null) {
+      if (this.configurationResponse == null) {
-      ClusterConfigurationLoader.applyClusterXmlConfiguration(this, configurationResponse,
+      ClusterConfigurationLoader.applyClusterXmlConfiguration(this, this.configurationResponse,
+        this.configurationResponse = null;
+  @Override
-
-        EventTracker.stopTrackerServices(this);
+        getEventTrackerTask().cancel();
-        stopDiskStoreTaskPool();
-  /**
-   * Used to guard access to compactorPool and set to true when cache is shutdown.
-   */
-  private final AtomicBoolean diskStoreTaskSync = new AtomicBoolean(false);
-
-  /**
-   * Lazily initialized. TODO: this is always null
-   */
-  private ThreadPoolExecutor diskStoreTaskPool = null;
-
-  private void stopDiskStoreTaskPool() {
-    synchronized (this.diskStoreTaskSync) {
-      this.diskStoreTaskSync.set(true);
-      // All the regions have already been closed
-      // so this pool shouldn't be doing anything.
-      if (this.diskStoreTaskPool != null) {
-        List<Runnable> listOfRunnables = this.diskStoreTaskPool.shutdownNow();
-        for (Runnable runnable : listOfRunnables) {
-          // TODO: fix this for-loop and the one in DiskStoreImpl
-          if (listOfRunnables instanceof DiskStoreTask) {
-            ((DiskStoreTask) listOfRunnables).taskCancelled();
-          }
-        }
-      }
-    }
-  }
-
-  public EventTracker.ExpiryTask getEventTrackerTask() {
+  public EventTrackerExpiryTask getEventTrackerTask() {
+  @SuppressWarnings("unchecked")
+  @Override
+  public boolean hasPersistentRegion() {
+    synchronized (this.rootRegions) {
+      for (LocalRegion region : this.rootRegions.values()) {
+        if (region.getDataPolicy().withPersistence()) {
+          return true;
+        }
+        for (LocalRegion subRegion : (Set<LocalRegion>) region.basicSubregions(true)) {
+          if (subRegion.getDataPolicy().withPersistence()) {
+            return true;
+          }
+        }
+      }
+      return false;
+    }
+  }
+
-  public QueryService getQueryService() {
+  public InternalQueryService getQueryService() {
-    return defaultPool.getQueryService();
+    return (InternalQueryService) defaultPool.getQueryService();
-    manager.start();
+    manager.validateRequestingAdmin();
+
+  public void addRegionEntrySynchronizationListener(RegionEntrySynchronizationListener listener) {
+    this.synchronizationListeners.add(listener);
+  }
+
+  public void removeRegionEntrySynchronizationListener(
+      RegionEntrySynchronizationListener listener) {
+    this.synchronizationListeners.remove(listener);
+  }
+
+  public void invokeRegionEntrySynchronizationListenersAfterSynchronization(
+      InternalDistributedMember sender, LocalRegion region,
+      List<InitialImageOperation.Entry> entriesToSynchronize) {
+    for (RegionEntrySynchronizationListener listener : this.synchronizationListeners) {
+      try {
+        listener.afterSynchronization(sender, region, entriesToSynchronize);
+      } catch (Throwable t) {
+        logger.warn(LocalizedMessage.create(
+            LocalizedStrings.GemFireCacheImpl_CAUGHT_EXCEPTION_SYNCHRONIZING_EVENTS,
+            new Object[] {sender, region.getFullPath(), entriesToSynchronize}), t);
+      }
+    }
+  }

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 MOV23 MOV23 INS40 UPD40 INS40 UPD40 INS40 INS40 UPD40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 UPD83 MOV43 UPD43 INS83 INS83 MOV43 INS59 INS74 INS29 INS83 INS43 INS42 INS8 INS78 UPD83 MOV83 INS43 INS42 INS8 INS78 UPD43 INS79 INS78 INS83 UPD39 MOV39 UPD42 MOV42 INS8 UPD43 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 UPD42 INS42 INS42 INS43 INS43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 MOV43 MOV65 UPD42 MOV42 INS60 INS60 INS21 INS41 INS42 INS42 INS41 MOV54 INS42 INS42 INS42 INS45 INS42 INS51 UPD42 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS42 INS43 INS42 UPD74 MOV74 INS42 MOV70 UPD42 MOV42 INS42 INS74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD66 INS39 INS59 INS43 INS59 INS32 INS42 MOV22 MOV22 INS8 INS11 INS42 INS32 INS42 INS32 INS42 INS42 UPD43 INS22 INS43 INS21 INS21 INS21 INS21 INS21 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 UPD42 INS70 INS41 INS43 MOV32 UPD42 INS22 INS42 INS42 MOV22 UPD42 MOV42 INS42 INS40 UPD43 UPD42 INS52 INS42 INS54 UPD42 MOV42 INS7 INS32 INS7 INS32 INS32 INS42 INS42 INS27 INS27 INS43 INS42 INS42 INS44 INS32 INS8 INS9 INS42 MOV52 UPD42 MOV42 UPD42 UPD42 INS8 INS12 INS42 INS22 MOV32 INS42 INS42 INS22 MOV32 MOV22 INS32 INS22 INS42 MOV22 INS42 INS14 INS40 INS45 INS40 INS34 INS42 INS22 INS22 INS22 INS21 INS43 INS42 MOV22 INS42 INS25 INS70 INS21 INS44 INS8 INS8 INS52 INS42 INS52 INS42 INS42 INS42 MOV32 INS42 INS52 INS42 UPD42 INS43 INS52 INS42 INS52 INS42 INS52 INS42 INS7 INS42 UPD42 INS32 INS8 INS44 INS11 INS8 INS32 INS43 INS42 MOV21 INS21 INS21 INS42 INS22 INS33 INS32 UPD42 INS32 INS42 INS41 INS43 INS42 INS74 INS32 INS25 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 INS52 INS42 UPD42 MOV42 INS42 INS42 INS9 INS42 INS43 INS43 INS42 INS42 MOV9 INS32 INS8 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS41 INS42 INS42 INS40 INS3 INS42 INS42 INS9 INS5 INS4 INS43 INS85 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 DEL42 DEL42 DEL32 DEL40 DEL66 DEL65 DEL29 DEL43 DEL43 DEL9 DEL42 DEL43 DEL42 DEL11 DEL42 DEL52 DEL83 DEL39 DEL42 DEL42 DEL44 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL33 DEL27 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL32 DEL33 DEL27 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL52 DEL42 DEL32 DEL21 DEL29 DEL83 DEL43 DEL42 DEL33 DEL59 DEL23 DEL42 DEL32 DEL21 DEL22 DEL33 DEL27 DEL42 DEL32 DEL59 DEL60 DEL8 DEL25 DEL8 DEL51 DEL8 DEL31 DEL40 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL43 DEL62 DEL8 DEL25