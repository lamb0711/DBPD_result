Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static final String EXE_PREFIX_FOR_EXTERNAL_HELP = org.apache.geode.management.internal.cli.shell.Gfsh.GFSH_APP_NAME + " ";
-  public static final String HELP__COMMAND_AVAILABLE      = "Available";
-  public static final String HELP__COMMAND_NOTAVAILABLE   = "Not Available";
+  public static final String EXE_PREFIX_FOR_EXTERNAL_HELP =
+      org.apache.geode.management.internal.cli.shell.Gfsh.GFSH_APP_NAME + " ";
+  public static final String HELP__COMMAND_AVAILABLE = "Available";
+  public static final String HELP__COMMAND_NOTAVAILABLE = "Not Available";
-  private static final String NAME_NAME         = "NAME";
-  private static final String SYNONYMS_NAME     = "SYNONYMS";
-  private static final String SYNOPSIS_NAME     = "SYNOPSIS";
-  private static final String SYNTAX_NAME       = "SYNTAX";
-  private static final String ARGUMENTS_NAME    = "ARGUMENTS";
-  private static final String OPTIONS_NAME      = "PARAMETERS";
+  private static final String NAME_NAME = "NAME";
+  private static final String SYNONYMS_NAME = "SYNONYMS";
+  private static final String SYNOPSIS_NAME = "SYNOPSIS";
+  private static final String SYNTAX_NAME = "SYNTAX";
+  private static final String ARGUMENTS_NAME = "ARGUMENTS";
+  private static final String OPTIONS_NAME = "PARAMETERS";
-  private static final String REQUIRED_SUB_NAME     = "Required: ";
+  private static final String REQUIRED_SUB_NAME = "Required: ";
-  private static final String SYNONYMS_SUB_NAME     = "Synonyms: ";
-  private static final String SPECIFIEDDEFAULTVALUE_SUB_NAME = "Default (if the parameter is specified without value): ";
-  private static final String UNSPECIFIEDDEFAULTVALUE_VALUE_SUB_NAME = "Default (if the parameter is not specified): ";
+  private static final String SYNONYMS_SUB_NAME = "Synonyms: ";
+  private static final String SPECIFIEDDEFAULTVALUE_SUB_NAME =
+      "Default (if the parameter is specified without value): ";
+  private static final String UNSPECIFIEDDEFAULTVALUE_VALUE_SUB_NAME =
+      "Default (if the parameter is not specified): ";
-  private static final String TRUE_TOKEN  = "true";
+  private static final String TRUE_TOKEN = "true";
-  
-  
+
+
-    
-    
-    
+
+
+
-    if (commandTarget.getCommandHelp() != null
-        && !commandTarget.getCommandHelp().equals("")) {
+    if (commandTarget.getCommandHelp() != null && !commandTarget.getCommandHelp().equals("")) {
-        buffer.append(" " + SyntaxConstants.LONG_OPTION_SPECIFIER
-            + option.getLongOption());
-//      String temp = SyntaxConstants.OPTION_VALUE_SPECIFIER + VALUE_TOKEN + "("
-//      + SyntaxConstants.OPTION_VALUE_SEPARATOR + VALUE_TOKEN + ")*";
+        buffer.append(" " + SyntaxConstants.LONG_OPTION_SPECIFIER + option.getLongOption());
+        // String temp = SyntaxConstants.OPTION_VALUE_SPECIFIER + VALUE_TOKEN + "("
+        // + SyntaxConstants.OPTION_VALUE_SEPARATOR + VALUE_TOKEN + ")*";
-//  
+        //
-      buffer.append(" " + "[" + SyntaxConstants.LONG_OPTION_SPECIFIER
-          + option.getLongOption());
-//    String temp = SyntaxConstants.OPTION_VALUE_SPECIFIER + VALUE_TOKEN + "("
-//    + SyntaxConstants.OPTION_VALUE_SEPARATOR + VALUE_TOKEN + ")*";
+      buffer.append(" " + "[" + SyntaxConstants.LONG_OPTION_SPECIFIER + option.getLongOption());
+      // String temp = SyntaxConstants.OPTION_VALUE_SPECIFIER + VALUE_TOKEN + "("
+      // + SyntaxConstants.OPTION_VALUE_SEPARATOR + VALUE_TOKEN + ")*";
-//
+      //
-            + ((argument.getHelp() != null && !argument.getHelp().equals("")) ? ":"
-                + argument.getHelp()
-                : "")));
+            + ((argument.getHelp() != null && !argument.getHelp().equals(""))
+                ? ":" + argument.getHelp() : "")));
-        rows.add(row(option.getLongOption()
-            + ((option.getHelp() != null && !option.getHelp().equals("")) ? ":"
-                + option.getHelp() : "")));
+        rows.add(
+            row(option.getLongOption() + ((option.getHelp() != null && !option.getHelp().equals(""))
+                ? ":" + option.getHelp() : "")));
-    for(int i=0;i<blocks.size();i++){
+    for (int i = 0; i < blocks.size(); i++) {
-  
+
-   * @param commandTarget
-   *          command specific target to use to generate help
-   * @param withinShell
-   *          if <code>true</code> includes availabilty & doesn't include
-   *          application name
+   * @param commandTarget command specific target to use to generate help
+   * @param withinShell if <code>true</code> includes availabilty & doesn't include application name
-    
-    
+
+
-    if (commandTarget.getCommandHelp() != null
-        && !commandTarget.getCommandHelp().equals("")) {
+    if (commandTarget.getCommandHelp() != null && !commandTarget.getCommandHelp().equals("")) {
-    
-    
+
+
-    }    
-    appendArguments(buffer,commandTarget);
-    appendOptions(buffer,commandTarget);
+    }
+    appendArguments(buffer, commandTarget);
+    appendOptions(buffer, commandTarget);
-    
-    
+
+
-        DataNode argumentNode = new DataNode(argument.getArgumentName(),
-            new ArrayList<DataNode>());
+        DataNode argumentNode = new DataNode(argument.getArgumentName(), new ArrayList<DataNode>());
-            .addChild(new DataNode(((argument.getHelp() != null && !argument
-                .getHelp().equals("")) ? argument.getHelp() : ""), null));
-        argumentNode.addChild(new DataNode(REQUIRED_SUB_NAME+((argument.isRequired()) ? TRUE_TOKEN
-            : FALSE_TOKEN), null));
+            .addChild(new DataNode(((argument.getHelp() != null && !argument.getHelp().equals(""))
+                ? argument.getHelp() : ""), null));
+        argumentNode.addChild(new DataNode(
+            REQUIRED_SUB_NAME + ((argument.isRequired()) ? TRUE_TOKEN : FALSE_TOKEN), null));
-          argumentNode.addChild(new DataNode(DEFAULTVALUE_SUB_NAME
-              + argument.getUnspecifiedDefaultValue(), null));
+          argumentNode.addChild(
+              new DataNode(DEFAULTVALUE_SUB_NAME + argument.getUnspecifiedDefaultValue(), null));
-    
+
-      Collection<CommandMode> comModes = modes.getCommandModes(commandTarget
-          .getCommandName());
+      Collection<CommandMode> comModes = modes.getCommandModes(commandTarget.getCommandName());
-          
+
-          if(!cmd.name.equals("default"))
+          if (!cmd.name.equals("default"))
-          
+
-                optionalOptions.add(option);              
-            }            
+                optionalOptions.add(option);
+            }
-          
+
-        //modesDN.addChild(new DataNode("No command modes found", null));
-        //root.addChild(modesDN);
+        // modesDN.addChild(new DataNode("No command modes found", null));
+        // root.addChild(modesDN);
-      
+
-    } finally{
-      
+    } finally {
+
-    
+
-        DataNode optionNode = new DataNode(option.getLongOption(),
-            new ArrayList<DataNode>());
-        optionNode.addChild(new DataNode(((option.getHelp() != null && !option
-            .getHelp().equals("")) ? option.getHelp() : ""), null));
+        DataNode optionNode = new DataNode(option.getLongOption(), new ArrayList<DataNode>());
+        optionNode.addChild(new DataNode(
+            ((option.getHelp() != null && !option.getHelp().equals("")) ? option.getHelp() : ""),
+            null));
-          optionNode.addChild(new DataNode(SYNONYMS_SUB_NAME + builder.toString(),
-              null));
+          optionNode.addChild(new DataNode(SYNONYMS_SUB_NAME + builder.toString(), null));
-        optionNode.addChild(new DataNode(REQUIRED_SUB_NAME+((option.isRequired()) ? TRUE_TOKEN
-            : FALSE_TOKEN), null));
-        if (option.getSpecifiedDefaultValue() != null 
-        && !option.getSpecifiedDefaultValue().equals("")) {
-          optionNode.addChild(new DataNode(SPECIFIEDDEFAULTVALUE_SUB_NAME
-              + option.getSpecifiedDefaultValue(), null));
+        optionNode.addChild(new DataNode(
+            REQUIRED_SUB_NAME + ((option.isRequired()) ? TRUE_TOKEN : FALSE_TOKEN), null));
+        if (option.getSpecifiedDefaultValue() != null
+            && !option.getSpecifiedDefaultValue().equals("")) {
+          optionNode.addChild(new DataNode(
+              SPECIFIEDDEFAULTVALUE_SUB_NAME + option.getSpecifiedDefaultValue(), null));
-        if (option.getUnspecifiedDefaultValue() != null 
-        && !option.getUnspecifiedDefaultValue().equals("")) {
-          optionNode.addChild(new DataNode(UNSPECIFIEDDEFAULTVALUE_VALUE_SUB_NAME
-              + option.getUnspecifiedDefaultValue(), null));
+        if (option.getUnspecifiedDefaultValue() != null
+            && !option.getUnspecifiedDefaultValue().equals("")) {
+          optionNode.addChild(new DataNode(
+              UNSPECIFIEDDEFAULTVALUE_VALUE_SUB_NAME + option.getUnspecifiedDefaultValue(), null));
-  
+
-    for(Option option : commandTarget.getOptionParser().getOptions()){
-      if(option.getLongOption().equals(opt))
+    for (Option option : commandTarget.getOptionParser().getOptions()) {
+      if (option.getLongOption().equals(opt))
-  private static void appendOptions(StringBuffer buffer,
-      CommandTarget commandTarget) {
+  private static void appendOptions(StringBuffer buffer, CommandTarget commandTarget) {
-        appendRequiredOption(buffer,option);
+        appendRequiredOption(buffer, option);
-    }    
-  }
-  
-  private static void appendRequiredOption(StringBuffer buffer, Option option){
-    buffer.append(" " + SyntaxConstants.LONG_OPTION_SPECIFIER
-        + option.getLongOption());
-    String temp = buildOptionHelpText(option);
-    if (option.getSpecifiedDefaultValue() != null
-        && !option.getSpecifiedDefaultValue().equals("")) {
-      buffer.append("(").append(temp).append(")?");
-    } else {
-      buffer.append(temp);
-  
-  private static void appendOption(StringBuffer buffer, Option option){
-    buffer.append(" " + "[" + SyntaxConstants.LONG_OPTION_SPECIFIER
-        + option.getLongOption());
-    String temp = buildOptionHelpText(option);
-    if (option.getSpecifiedDefaultValue() != null
-        && !option.getSpecifiedDefaultValue().equals("")) {
-      buffer.append("(").append(temp).append(")?");
-    } else {
-      buffer.append(temp);
-    }
-    buffer.append("]");  
-  }
-  private static void appendArguments(StringBuffer buffer,
-      CommandTarget commandTarget) {
+  private static void appendRequiredOption(StringBuffer buffer, Option option) {
+    buffer.append(" " + SyntaxConstants.LONG_OPTION_SPECIFIER + option.getLongOption());
+    String temp = buildOptionHelpText(option);
+    if (option.getSpecifiedDefaultValue() != null
+        && !option.getSpecifiedDefaultValue().equals("")) {
+      buffer.append("(").append(temp).append(")?");
+    } else {
+      buffer.append(temp);
+    }
+  }
+
+  private static void appendOption(StringBuffer buffer, Option option) {
+    buffer.append(" " + "[" + SyntaxConstants.LONG_OPTION_SPECIFIER + option.getLongOption());
+    String temp = buildOptionHelpText(option);
+    if (option.getSpecifiedDefaultValue() != null
+        && !option.getSpecifiedDefaultValue().equals("")) {
+      buffer.append("(").append(temp).append(")?");
+    } else {
+      buffer.append(temp);
+    }
+    buffer.append("]");
+  }
+
+  private static void appendArguments(StringBuffer buffer, CommandTarget commandTarget) {
-      String temp = SyntaxConstants.OPTION_VALUE_SPECIFIER + VALUE_FIELD;
-      if( (option.getValueSeparator() != null &&
-    	 !CliMetaData.ANNOTATION_NULL_VALUE.equals(option.getValueSeparator()) &&
-        !option.getValueSeparator().equals("")) || isCollectionOrArrayType(option.getDataType())) {
-    	  temp += "(" + option.getValueSeparator() + VALUE_FIELD + ")*";
-      }
-      return temp;
+    String temp = SyntaxConstants.OPTION_VALUE_SPECIFIER + VALUE_FIELD;
+    if ((option.getValueSeparator() != null
+        && !CliMetaData.ANNOTATION_NULL_VALUE.equals(option.getValueSeparator())
+        && !option.getValueSeparator().equals(""))
+        || isCollectionOrArrayType(option.getDataType())) {
+      temp += "(" + option.getValueSeparator() + VALUE_FIELD + ")*";
+    }
+    return temp;
-    return typeToCheck != null && (typeToCheck.isArray() || Collection.class.isAssignableFrom(typeToCheck));
+    return typeToCheck != null
+        && (typeToCheck.isArray() || Collection.class.isAssignableFrom(typeToCheck));

UPD66 UPD66 DEL66