Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-                              Class<?> requiredInterfaceToLoad,
-                              boolean onlyInstantiable) throws ClassNotFoundException, IOException {
-    
-    Set<Class<?>> classSet  = new HashSet<Class<?>>();
-    Class<?>      classes[] = getClasses(commandPackageName);
+      Class<?> requiredInterfaceToLoad, boolean onlyInstantiable)
+      throws ClassNotFoundException, IOException {
+
+    Set<Class<?>> classSet = new HashSet<Class<?>>();
+    Class<?> classes[] = getClasses(commandPackageName);
-    
+
-  
+
-    
-    boolean isInstantiable = !Modifier.isAbstract(modifiers) && 
-                             !Modifier.isInterface(modifiers) && 
-                             Modifier.isPublic(modifiers); 
-    
+
+    boolean isInstantiable = !Modifier.isAbstract(modifiers) && !Modifier.isInterface(modifiers)
+        && Modifier.isPublic(modifiers);
+
-    if(requiredInterface.isAssignableFrom(typeToCheck)){
+    if (requiredInterface.isAssignableFrom(typeToCheck)) {
-    }else{
+    } else {
-    
+
-      
+
-          if (File.separatorChar == '/') {//whether Unix or Windows system
+          if (File.separatorChar == '/') {// whether Unix or Windows system
-            // Local Path:   file:/G:/where/java/spring/spring-shell/1.0.0/spring-shell-1.0.0.RELEASE.jar
-            // Network Path: file://stinger.pune.gemstone.com/shared/where/java/spring/spring-shell/1.0.0/spring-shell-1.0.0.RELEASE.jar
+            // Local Path:
+            // file:/G:/where/java/spring/spring-shell/1.0.0/spring-shell-1.0.0.RELEASE.jar
+            // Network Path:
+            // file://stinger.pune.gemstone.com/shared/where/java/spring/spring-shell/1.0.0/spring-shell-1.0.0.RELEASE.jar
-            // If the path still starts with a "/", then it's a network path. 
-            // Hence, add one "/". 
+            // If the path still starts with a "/", then it's a network path.
+            // Hence, add one "/".
-    
+
-    File   file  = null;
+    File file = null;
-      if (file.isDirectory()) {//sub-package
+      if (file.isDirectory()) {// sub-package
-        //remove .class from the file name
-        String classSimpleName = file.getName().substring(0, file.getName().length() - CLASSFILE_EXTENSION.length());
+        // remove .class from the file name
+        String classSimpleName =
+            file.getName().substring(0, file.getName().length() - CLASSFILE_EXTENSION.length());
-  
+
-   * @param jarPath
-   *          The absolute or relative jar path.
-   * @param packageName
-   *          The package name.
+   * @param jarPath The absolute or relative jar path.
+   * @param packageName The package name.
-   * @throws ClassNotFoundException
-   *           Thrown if unable to load a class
-   * @throws IOException
-   *           Thrown if error occurs while reading the jar file
+   * @throws ClassNotFoundException Thrown if unable to load a class
+   * @throws IOException Thrown if error occurs while reading the jar file
-  public static Class<?>[] getClasses(String jarPath, String packageName) 
+  public static Class<?>[] getClasses(String jarPath, String packageName)
-    
+
-    Class<?> classes[]  = new Class[classNames.length];
+    Class<?> classes[] = new Class[classNames.length];
-      String className = (String)classNames[i];
+      String className = (String) classNames[i];
-   * Returns all names of classes that are defined in the specified jar and
-   * package name.
+   * Returns all names of classes that are defined in the specified jar and package name.
-   * @param jarPath
-   *          The absolute or relative jar path.
-   * @param packageName
-   *          The package name.
-   * @return Returns all names of classes that are defined in the specified jar
-   *         and package name.
-   * @throws IOException
-   *           Thrown if error occurs while reading the jar file
+   * @param jarPath The absolute or relative jar path.
+   * @param packageName The package name.
+   * @return Returns all names of classes that are defined in the specified jar and package name.
+   * @throws IOException Thrown if error occurs while reading the jar file
-  public static String[] getClassNames(String jarPath, String packageName) 
-      throws IOException {
+  public static String[] getClassNames(String jarPath, String packageName) throws IOException {
-    
+
-    //Path is absolute on Unix if it starts with '/' 
-    //or path contains colon on Windows 
-    if (jarPath.startsWith("/") || (jarPath.indexOf(':') >= 0 && File.separatorChar == '\\' )) {
+    // Path is absolute on Unix if it starts with '/'
+    // or path contains colon on Windows
+    if (jarPath.startsWith("/") || (jarPath.indexOf(':') >= 0 && File.separatorChar == '\\')) {
-    
+
-    return (String[])classNames.toArray(new String[0]);
+    return (String[]) classNames.toArray(new String[0]);
-      return !pathToCheck.contains(TESTS_CODE_INDICATOR) && pathToCheck.endsWith(CLASSFILE_EXTENSION);
+      return !pathToCheck.contains(TESTS_CODE_INDICATOR)
+          && pathToCheck.endsWith(CLASSFILE_EXTENSION);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66