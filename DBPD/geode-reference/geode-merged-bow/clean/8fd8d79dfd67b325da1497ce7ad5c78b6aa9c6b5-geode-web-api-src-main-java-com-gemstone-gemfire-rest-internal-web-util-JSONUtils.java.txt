Revert "GEODE-1570: upgrade spring libraries and fix tests"

This reverts commit 906c211ab1f6bacbd29a6d21d8186bb0787173f9.

-import java.io.OutputStream;
+import java.util.Map;
-import org.json.JSONException;
-import org.springframework.util.Assert;
-
+import com.gemstone.gemfire.cache.query.internal.StructImpl;
+import org.json.JSONException;
+
+import org.springframework.hateoas.Link;
+import org.springframework.util.Assert;
-        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
+        .createGenerator(outputStream, JsonEncoding.UTF8));
+  public static String formulateJsonForListCall(Map<String, Link> LinksByName, String keyName, String fieldName) {
+    HeapDataOutputStream outputStream = new HeapDataOutputStream(com.gemstone.gemfire.internal.Version.CURRENT);
+
+    try {
+      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
+        .createGenerator(outputStream, JsonEncoding.UTF8));
+      JsonWriter.writeListAsJson(generator, LinksByName, keyName, fieldName);
+      generator.close();
+      return new String(outputStream.toByteArray());
+    } catch (IOException e) {
+      throw new RuntimeException(e.getMessage());
+    } finally {
+      outputStream.close();
+    }
+  }
+
-        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
+        .createGenerator(outputStream, JsonEncoding.UTF8));
-        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
+        .createGenerator(outputStream, JsonEncoding.UTF8));
+  public static String formulateJsonForGetOnKey(Object value) throws JSONException {
+    HeapDataOutputStream outputStream = new HeapDataOutputStream(com.gemstone.gemfire.internal.Version.CURRENT);
+
+    try {
+      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
+        .createGenerator(outputStream, JsonEncoding.UTF8));
+      JsonWriter.writeValueAsJson(generator, value, "GET_ON_KEY_RESPONSE");
+      generator.close();
+      return new String(outputStream.toByteArray());
+    } catch (IOException e) {
+      throw new RuntimeException(e.getMessage());
+    } finally {
+      outputStream.close();
+    }
+  }
+
+  public static String formulateJsonForGetOnMultipleKey(Collection<Object> collection, String regionName) throws JSONException {
+    HeapDataOutputStream outputStream = new HeapDataOutputStream(com.gemstone.gemfire.internal.Version.CURRENT);
+
+    try {
+      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
+        .createGenerator(outputStream, JsonEncoding.UTF8));
+      generator.writeStartObject();
+      generator.writeFieldName(regionName);
+      JsonWriter.writeCollectionAsJson(generator, collection);
+      generator.writeEndObject();
+      generator.close();
+      return new String(outputStream.toByteArray());
+    } catch (IOException e) {
+      throw new RuntimeException(e.getMessage());
+    } finally {
+      outputStream.close();
+    }
+  }
+
-        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
+        .createGenerator(outputStream, JsonEncoding.UTF8));
-        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
+        .createGenerator(outputStream, JsonEncoding.UTF8));
-        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
+        .createGenerator(outputStream, JsonEncoding.UTF8));
+  public static String convertMapToJson(Map<?, ?> map) throws JSONException {
+    HeapDataOutputStream outputStream = new HeapDataOutputStream(com.gemstone.gemfire.internal.Version.CURRENT);
+
+    try {
+      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
+        .createGenerator(outputStream, JsonEncoding.UTF8));
+      JsonWriter.writeMapAsJson(generator, map, null);
+      generator.close();
+      return new String(outputStream.toByteArray());
+    } catch (IOException e) {
+      throw new RuntimeException(e.getMessage());
+    } finally {
+      outputStream.close();
+    }
+  }
+
+  public static String convertStructToJson(StructImpl structSet) throws JSONException {
+    HeapDataOutputStream outputStream = new HeapDataOutputStream(com.gemstone.gemfire.internal.Version.CURRENT);
+
+    try {
+      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
+        .createGenerator(outputStream, JsonEncoding.UTF8));
+      JsonWriter.writeStructAsJson(generator, structSet);
+      generator.close();
+      return new String(outputStream.toByteArray());
+    } catch (IOException e) {
+      throw new RuntimeException(e.getMessage());
+    } finally {
+      outputStream.close();
+    }
+  }
+

MOV26 MOV26 MOV26 INS26 INS26 MOV31 UPD40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 MOV43 INS8 INS42 INS44 INS43 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS83 INS43 INS42 INS44 INS43 INS8 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS60 INS54 INS42 INS43 INS42 INS60 INS54 INS43 INS42 INS42 INS42 INS74 INS42 INS42 INS60 INS54 INS42 INS74 INS42 INS42 INS60 INS54 INS42 INS43 INS42 INS42 INS60 INS54 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS8 INS12 INS8 INS42 INS43 INS59 INS8 INS12 INS8 INS42 INS43 INS43 INS43 INS59 INS8 INS12 INS8 INS43 INS76 INS76 INS43 INS59 INS8 INS12 INS8 INS42 INS43 INS59 INS8 INS12 INS8 INS42 INS42 INS42 INS42 INS42 INS14 MOV60 INS21 INS21 INS41 INS44 INS8 INS21 INS60 INS42 INS42 INS14 MOV60 INS21 MOV21 MOV41 INS44 INS8 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS60 INS42 INS42 INS42 INS42 INS14 INS60 MOV21 INS21 INS41 INS44 INS8 INS21 INS42 INS42 INS42 INS14 INS60 INS21 INS21 INS41 INS44 INS8 INS21 INS42 INS42 INS14 INS60 INS21 INS21 INS41 INS44 INS8 INS21 INS43 INS40 INS32 INS32 INS14 INS43 INS42 INS53 INS32 INS43 INS59 INS43 INS40 INS32 INS43 INS42 INS53 INS32 INS32 INS32 INS32 INS32 INS32 INS14 INS43 INS59 INS43 INS40 INS43 INS59 INS32 INS14 INS43 INS42 INS53 INS32 INS43 INS40 INS43 INS59 INS32 INS32 INS14 INS43 INS42 INS53 INS32 INS43 INS40 INS43 INS59 INS32 INS32 INS14 INS43 INS42 INS53 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL11