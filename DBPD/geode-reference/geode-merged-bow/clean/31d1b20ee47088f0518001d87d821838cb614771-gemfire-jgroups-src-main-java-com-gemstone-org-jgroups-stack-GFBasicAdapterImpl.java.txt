Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import java.net.Inet4Address;
+import java.net.Inet6Address;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.util.Enumeration;
+import java.util.HashSet;
+import java.util.Set;
+import com.gemstone.org.jgroups.spi.GFBasicAdapter;
+import com.gemstone.org.jgroups.util.ExternalStrings;
+
+  private static boolean useIPv6Addresses = !Boolean.getBoolean("java.net.preferIPv4Stack") &&
+      Boolean.getBoolean("java.net.preferIPv6Addresses");
+  
+  static InetAddress localHost;
+  
+  // This static block avoids problems with poorly configured
+  // /etc/hosts files, such as
+  //   127.0.0.1 localhost
+  //   127.0.1.1 ubuntu
+  static {
+    InetAddress lh = null;
+    try {
+      lh = InetAddress.getLocalHost();
+      if (lh.isLoopbackAddress()) {
+        InetAddress ipv4Fallback = null;
+        InetAddress ipv6Fallback = null;
+        // try to find a non-loopback address
+        Set myInterfaces = getMyAddresses();
+        boolean preferIPv6 = useIPv6Addresses;
+        String lhName = null;
+        for (Iterator<InetAddress> it = myInterfaces.iterator(); lhName == null && it.hasNext(); ) {
+          InetAddress addr = it.next();
+          if (addr.isLoopbackAddress() || addr.isAnyLocalAddress()) {
+            break;
+          }
+          boolean ipv6 = addr instanceof Inet6Address;
+          boolean ipv4 = addr instanceof Inet4Address;
+          if ( (preferIPv6 && ipv6)
+              || (!preferIPv6 && ipv4) ) {
+            String addrName = addr.getCanonicalHostName();
+            if (lh.isLoopbackAddress()) {
+              lh = addr;
+              lhName = addrName;
+            } else if (addrName != null) {
+              lh = addr;
+              lhName = addrName;
+            }
+          } else {
+            if (preferIPv6 && ipv4 && ipv4Fallback == null) {
+              ipv4Fallback = addr;
+            } else if (!preferIPv6 && ipv6 && ipv6Fallback == null) {
+              ipv6Fallback = addr;
+            }
+          }
+        }
+        // vanilla Ubuntu installations will have a usable IPv6 address when
+        // running as a guest OS on an IPv6-enabled machine.  We also look for
+        // the alternative IPv4 configuration.
+        if (lh.isLoopbackAddress()) {
+          if (ipv4Fallback != null) {
+            lh = ipv4Fallback;
+            useIPv6Addresses = false;
+          } else if (ipv6Fallback != null) {
+            lh = ipv6Fallback;
+            useIPv6Addresses = true;
+          }
+        }
+      }
+    } catch (UnknownHostException e) {
+    }
+    localHost = lh;
+  }
+  
+  private static Set<InetAddress> getMyAddresses() {
+    Set<InetAddress> result = new HashSet<InetAddress>();
+    Set<InetAddress> locals = new HashSet<InetAddress>();
+    Enumeration<NetworkInterface> interfaces;
+    try {
+      interfaces = NetworkInterface.getNetworkInterfaces();
+    } catch (SocketException e) {
+      throw new IllegalArgumentException("Unable to examine network interfaces", e);
+    }
+    while (interfaces.hasMoreElements()) {
+      NetworkInterface face = interfaces.nextElement();
+      boolean faceIsUp = false;
+      try {
+        faceIsUp = face.isUp();
+      } catch (SocketException e) {
+        GemFireTracer.getLog(GFBasicAdapterImpl.class).info(ExternalStrings.ONE_ARG,
+            new Object[]{"Failed to check if network interface is up. Skipping " + face}, e);
+      }
+      if (faceIsUp) {
+        Enumeration<InetAddress> addrs = face.getInetAddresses();
+        while (addrs.hasMoreElements()) {
+          InetAddress addr = addrs.nextElement();
+          if (addr.isLoopbackAddress() || addr.isAnyLocalAddress() 
+              /*|| (!useLinkLocalAddresses && addr.isLinkLocalAddress())*/) {
+            locals.add(addr);
+          } else {
+            result.add(addr);
+          }
+        } // while
+      }
+    } // while
+    // fix for bug #42427 - allow product to run on a standalone box by using
+    // local addresses if there are no non-local addresses available
+    if (result.size() == 0) {
+      return locals;
+    } else {
+      return result;
+    }
+  }
+
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS28 INS31 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS8 INS83 INS83 INS74 INS42 INS8 INS42 INS27 INS42 INS42 INS60 INS54 INS21 INS43 INS43 INS60 INS60 INS60 INS54 INS61 INS25 INS38 INS32 INS43 INS59 INS8 INS12 INS7 INS42 INS42 INS74 INS59 INS74 INS59 INS74 INS59 INS8 INS12 INS32 INS8 INS27 INS8 INS8 INS32 INS42 INS42 INS45 INS42 INS42 INS33 INS21 INS25 INS44 INS8 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS21 INS44 INS8 INS42 INS42 INS60 INS60 INS54 INS25 INS32 INS34 INS41 INS41 INS42 INS42 INS45 INS7 INS32 INS8 INS43 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS7 INS43 INS42 INS53 INS43 INS59 INS39 INS59 INS8 INS12 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS24 INS25 INS42 INS43 INS43 INS43 INS43 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS9 INS21 INS44 INS8 INS60 INS61 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS39 INS59 INS43 INS59 INS58 INS27 INS8 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS7 INS43 INS42 INS21 INS74 INS59 INS32 INS8 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 INS74 INS59 INS27 INS32 INS60 INS25 INS60 INS60 INS25 INS42 INS42 INS25 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS43 INS43 INS42 INS32 INS42 INS33 INS42 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS27 INS8 INS8 INS27 INS8 INS25 INS42 INS42 INS32 INS42 INS40 INS3 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS10 INS42 INS62 INS42 INS62 INS36 INS36 INS60 INS25 INS25 INS42 INS33 INS21 INS21 INS27 INS8 INS42 INS42 INS57 INS5 INS4 INS42 INS42 INS32 INS32 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS27 INS27 INS43 INS59 INS32 INS8 INS25 INS27 INS8 INS25 INS7 INS7 INS42 INS33 INS21 INS21 INS43 INS43 INS85 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS27 INS8 INS42 INS42 INS27 INS21 INS27 INS8 INS42 INS42 INS42 INS9 INS7 INS7 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS33 INS21 INS21 INS42 INS33 INS7 INS38 INS42 INS27 INS21 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS42 INS33 INS7 INS42 INS42 INS42 INS42 INS42 INS42