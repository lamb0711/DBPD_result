GEODE-8089: change redis set ops to use functions (#5058)

* scard now uses function
* sismember now uses function
* srandmember now uses a function
* spop now uses a function
* sscan now uses a function
-import java.util.ArrayList;
-import java.util.Collection;
+
-import java.util.Set;
-import org.apache.geode.cache.Region;
-    Region<ByteArrayWrapper, RedisSet> region = getRegion(context);
-    Set<ByteArrayWrapper> set = RedisSet.members(region, key);
-
-    if (set == null) {
-      command.setResponse(
-          Coder.getScanResponse(context.getByteBufAllocator(), new ArrayList<String>()));
-      return;
-    }
-    @SuppressWarnings("unchecked")
-    List<ByteArrayWrapper> returnList =
-        (List<ByteArrayWrapper>) getIteration(new ArrayList<>(set), matchPattern,
-            count, cursor);
-
+    RedisSetCommands redisSetCommands =
+        new RedisSetCommandsFunctionExecutor(context.getRegionProvider().getSetRegion());
+    List<Object> returnList = redisSetCommands.sscan(key, matchPattern, count, cursor);
-
-  private Region<ByteArrayWrapper, RedisSet> getRegion(
-      ExecutionHandlerContext context) {
-    return context.getRegionProvider().getSetRegion();
-  }
-
-  @SuppressWarnings("unchecked")
-  @Override
-  protected List<?> getIteration(Collection<?> list, Pattern matchPattern, int count, int cursor) {
-    List<Object> returnList = new ArrayList<>();
-    int size = list.size();
-    int beforeCursor = 0;
-    int numElements = 0;
-    int i = -1;
-    for (ByteArrayWrapper value : (Collection<ByteArrayWrapper>) list) {
-      String key = Coder.bytesToString(value.toBytes());
-      i++;
-      if (beforeCursor < cursor) {
-        beforeCursor++;
-        continue;
-      } else if (numElements < count) {
-        if (matchPattern != null) {
-          if (matchPattern.matcher(key).matches()) {
-            returnList.add(value);
-            numElements++;
-          }
-        } else {
-          returnList.add(value);
-          numElements++;
-        }
-      } else {
-        break;
-      }
-    }
-
-    if (i == size - 1) {
-      returnList.add(0, String.valueOf(0));
-    } else {
-      returnList.add(0, String.valueOf(i));
-    }
-    return returnList;
-  }

INS60 INS43 INS59 UPD74 UPD42 MOV42 UPD42 MOV42 INS14 MOV43 INS32 INS43 MOV32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV32 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL32 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL42 DEL14 DEL32 DEL11 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL41 DEL8 DEL31 DEL42 DEL45 DEL79 DEL42 DEL78 DEL83 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL11 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL37 DEL21 DEL42 DEL42 DEL27 DEL42 DEL37 DEL21 DEL18 DEL8 DEL42 DEL42 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL37 DEL21 DEL8 DEL25 DEL8 DEL10 DEL8 DEL25 DEL25 DEL8 DEL70 DEL42 DEL42 DEL34 DEL27 DEL27 DEL42 DEL42 DEL34 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL34 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31