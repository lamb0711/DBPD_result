Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import org.apache.geode.cache.query.*;
+import org.apache.geode.cache.query.AmbiguousNameException;
+import org.apache.geode.cache.query.FunctionDomainException;
+import org.apache.geode.cache.query.NameResolutionException;
+import org.apache.geode.cache.query.QueryInvalidException;
+import org.apache.geode.cache.query.QueryInvocationTargetException;
+import org.apache.geode.cache.query.TypeMismatchException;
-  public final static int SINGLECONDNEVALUATOR= -13;
+  public final static int SINGLECONDNEVALUATOR = -13;
-  public static  final int INDEX_RESULT_THRESHOLD_DEFAULT = 100;
-  public static final String INDX_THRESHOLD_PROP_STR = DistributionConfig.GEMFIRE_PREFIX + "Query.INDEX_THRESHOLD_SIZE";
+  public static final int INDEX_RESULT_THRESHOLD_DEFAULT = 100;
+  public static final String INDX_THRESHOLD_PROP_STR =
+      DistributionConfig.GEMFIRE_PREFIX + "Query.INDEX_THRESHOLD_SIZE";
-  public static final int indexThresholdSize = Integer.getInteger(INDX_THRESHOLD_PROP_STR, INDEX_RESULT_THRESHOLD_DEFAULT).intValue();
+  public static final int indexThresholdSize =
+      Integer.getInteger(INDX_THRESHOLD_PROP_STR, INDEX_RESULT_THRESHOLD_DEFAULT).intValue();
-  public static final String PREF_INDEX_COND = "preferred_index_condition"; 
-  public static final String QUERY_INDEX_HINTS = "query_index_hints";  
+  public static final String PREF_INDEX_COND = "preferred_index_condition";
+  public static final String QUERY_INDEX_HINTS = "query_index_hints";
-    
+
-    public void generateCanonicalizedExpression(StringBuffer clauseBuffer,
-        ExecutionContext context) throws AmbiguousNameException,
-        TypeMismatchException, NameResolutionException {
-      throw new QueryInvalidException
-      ("* cannot be used with index operator. To use as key for map lookup, " +
-      		"it should be enclosed in ' '");
+    public void generateCanonicalizedExpression(StringBuffer clauseBuffer, ExecutionContext context)
+        throws AmbiguousNameException, TypeMismatchException, NameResolutionException {
+      throw new QueryInvalidException(
+          "* cannot be used with index operator. To use as key for map lookup, "
+              + "it should be enclosed in ' '");
-    
+
-      throw new QueryInvalidException
-      ("* cannot be used with index operator. To use as key for map lookup, " +
-                "it should be enclosed in ' '");
+      throw new QueryInvalidException(
+          "* cannot be used with index operator. To use as key for map lookup, "
+              + "it should be enclosed in ' '");
-    
-    public int getType()
-    {
+
+    public int getType() {
+
-  public Object evaluate(ExecutionContext context)
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException;
+  public Object evaluate(ExecutionContext context) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException;
-  public PlanInfo getPlanInfo(ExecutionContext context)
-      throws FunctionDomainException, TypeMismatchException,
-      NameResolutionException, QueryInvocationTargetException;
+  public PlanInfo getPlanInfo(ExecutionContext context) throws FunctionDomainException,
+      TypeMismatchException, NameResolutionException, QueryInvocationTargetException;
-  public boolean isDependentOnIterator(RuntimeIterator itr,
-      ExecutionContext context);
+  public boolean isDependentOnIterator(RuntimeIterator itr, ExecutionContext context);
-  //  public boolean visit(QVisitor visitor);
-  //Asif :Function for generating from clause
-  public void generateCanonicalizedExpression(StringBuffer clauseBuffer,
-      ExecutionContext context) throws AmbiguousNameException,
-      TypeMismatchException, NameResolutionException;
+  // public boolean visit(QVisitor visitor);
+  // Asif :Function for generating from clause
+  public void generateCanonicalizedExpression(StringBuffer clauseBuffer, ExecutionContext context)
+      throws AmbiguousNameException, TypeMismatchException, NameResolutionException;
-   * Populates the Set passed with  the name of the Region which, if any ,  will be the bottommost
-   * object (CompiledRegion). The default implemenation is provided  in the AbstractCompiledValue
-   * & overridden in the CompiledSelect as it can contain multiple iterators 
+   * Populates the Set passed with the name of the Region which, if any , will be the bottommost
+   * object (CompiledRegion). The default implementation is provided in the AbstractCompiledValue &
+   * overridden in the CompiledSelect as it can contain multiple iterators
-  
+
-  
+
-  
+
-  
+
-  
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 UPD66 UPD66 UPD66