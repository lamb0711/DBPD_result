Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The contract for a sorted map that maps the pair (index key, regionKey) to
- * an optional value. 
+ * The contract for a sorted map that maps the pair (index key, regionKey) to an optional value.
- * All read API take INDEX keys, and return REGION keys. So for example
- * keyIterator takes a range of index keys and returns the associated
- * region keys.
+ * All read API take INDEX keys, and return REGION keys. So for example keyIterator takes a range of
+ * index keys and returns the associated region keys.
- * This class is threadsafe. Iterators will reflect all entries added to
- * the map up until the time that the iterator was obtained. After that they
- * may or may not reflect modifications to the map while the iteration is in progress.
- * They will guarantee that entries will be returned in the correct order.
+ * This class is threadsafe. Iterators will reflect all entries added to the map up until the time
+ * that the iterator was obtained. After that they may or may not reflect modifications to the map
+ * while the iteration is in progress. They will guarantee that entries will be returned in the
+ * correct order.
- * TODO - is the user required to filter out NULL index keys, or should
- * we provide separate NULL iterators.
+ * TODO - is the user required to filter out NULL index keys, or should we provide separate NULL
+ * iterators.
- * TODO - Do we need getKey, getValue, 
+ * TODO - Do we need getKey, getValue,
-   * Add an entry to the map. If the same indexKey, regionKey pair
-   * exists in the map is it replaced with the new value.
+   * Add an entry to the map. If the same indexKey, regionKey pair exists in the map is it replaced
+   * with the new value.
+   * 
+   * 
-   * This method has no effect if the indexKey, regionKey does not exist
-   * in the map.
+   *        This method has no effect if the indexKey, regionKey does not exist in the map.
-  
+
-   * Return all of the IndexEntries in the range between start and end. 
-   * If end < start, this will return a descending iterator going from end
-   * to start. 
+   * Return all of the IndexEntries in the range between start and end. If end < start, this will
+   * return a descending iterator going from end to start.
-  CloseableIterator<IndexEntry> iterator(Object start, boolean startInclusive, 
-      Object end, boolean endInclusive);
-  
+  CloseableIterator<IndexEntry> iterator(Object start, boolean startInclusive, Object end,
+      boolean endInclusive);
+
-  
+
-  
+
-  CloseableIterator<IndexEntry> descendingIterator(Object end, 
-      boolean endInclusive);
-  
+  CloseableIterator<IndexEntry> descendingIterator(Object end, boolean endInclusive);
+
-  CloseableIterator<CachedDeserializable> keyIterator(Object start, 
-      boolean startInclusive, Object end, boolean endInclusive);
-  
+  CloseableIterator<CachedDeserializable> keyIterator(Object start, boolean startInclusive,
+      Object end, boolean endInclusive);
+
-  CloseableIterator<CachedDeserializable> keyIterator(Object start, 
-      boolean startInclusive);
-  
+  CloseableIterator<CachedDeserializable> keyIterator(Object start, boolean startInclusive);
+
-  
+
-   * Return all of the region keys from the end to the head of the map, in
-   * descending order.
+   * Return all of the region keys from the end to the head of the map, in descending order.
-  CloseableIterator<CachedDeserializable> descendingKeyIterator(Object end, 
-      boolean endInclusive);
-  
+  CloseableIterator<CachedDeserializable> descendingKeyIterator(Object end, boolean endInclusive);
+
-   * Return all of the region keys in the map, in
-   * descending order.
+   * Return all of the region keys in the map, in descending order.
-   * Return the estimate of the size of the map in the given range,
-   * inclusive.
+   * Return the estimate of the size of the map in the given range, inclusive.
-   * Return an estimate of the size of the map from the given key to get end
-   * of the map
+   * Return an estimate of the size of the map from the given key to get end of the map
-   * Return an estimate of the size of the map from the beginning to the
-   * given key
+   * Return an estimate of the size of the map from the beginning to the given key
-  
+
-   * Destroy the index map and remove all data from disk. Once a map is
-   * destroyed, it will not be recovered.
+   * Destroy the index map and remove all data from disk. Once a map is destroyed, it will not be
+   * recovered.
+   * 
+
+
-  
-  
+
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66