Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import com.gemstone.gemfire.cache.util.BridgeWriter;
- * <li>DynamicRegionFactories in non-client VMs must not be configured with a BridgeWriter.
+ * <li>DynamicRegionFactories in non-client VMs must not be configured with a pool.
- * However the products BridgeLoader, BridgeWriter, and all LRUAlgorithm instances will
+ * However the products LRUAlgorithm instances will
-      final boolean isClient = this.config.getBridgeWriter() != null || this.config.getPoolName()!=null;
+      final boolean isClient = this.config.getPoolName()!=null;
-          // BRIDGE CLIENT
-          } else {
-            BridgeWriter bw = this.config.getBridgeWriter();
-            if (!bw.hasEstablishCallbackConnection()) {
-              throw new IllegalStateException(LocalizedStrings.DynamicRegionFactory_THE_CLIENT_POOL_OF_A_DYNAMICREGIONFACTORY_MUST_BE_CONFIGURED_WITH_ESTABLISHCALLBACKCONNECTION_SET_TO_TRUE.toLocalizedString());
-            }
-            af.setCacheWriter(bw);
-   * <li>bridgeWriter: <code>null</code>
+   * <li>poolName: <code>null</code>
-    /** The {@link BridgeWriter} to be used by the factory to communicate with
-     * the factory in its server.
-     * Client factories must configure a BridgeWriter for their factory
-     * and it must be configured to establish a callback connection.
-     */
-    public final BridgeWriter bridgeWriter;
-     * The ${link Pool} to be used by the factory to communicate with 
-     * the server-side factory. Client factories may use this instead of a BridgeWriter 
+     * The ${link Pool} to be used by a client factory to communicate with 
+     * the server-side factory.
-      this(null, null, !DISABLE_PERSIST_BACKUP);
+      this(null, null, !DISABLE_PERSIST_BACKUP, !DISABLE_REGISTER_INTEREST);
-    /**
-     * Creates a configuration with the given attributes and defaults for other attributes.
-     * @deprecated use a pool name instead of a bridge writer
-     */
-    @Deprecated
-    public Config(File diskDir, BridgeWriter bridgeWriter) {
-      this(diskDir, bridgeWriter, !DISABLE_PERSIST_BACKUP);
-    }
-    
-    /**
-     * Creates a configuration with the given attributes and defaults for other attributes.
-     * @deprecated use a pool name instead of a bridge writer
-     */
-    @Deprecated
-    public Config(File diskDir, BridgeWriter bridgeWriter, boolean persistBackup) {
-      this(diskDir, bridgeWriter, persistBackup, !DISABLE_REGISTER_INTEREST);
-    }
-    
-    
-    
-    /**
-     * Creates a configuration with the given attributes
-     * @deprecated use a pool name instead of a bridge writer
-     */
-    @Deprecated
-    public Config(
-      File diskDir,
-      BridgeWriter bridgeWriter,
-      boolean persistBackup,
-      boolean registerInterest)
-    {
-      this.registerInterest = registerInterest;
-      this.persistBackup = persistBackup;
-      this.diskDir = diskDir;
-      this.bridgeWriter = bridgeWriter;
-      this.poolName = null;
-    }
-    
+     * Creates a configuration with defaults and the given diskDir and poolName.
+     */
+    public Config(File diskDir, String poolName) {
+      this(diskDir, poolName, !DISABLE_PERSIST_BACKUP, !DISABLE_REGISTER_INTEREST);
+    }
+    /**
-      this.bridgeWriter = null;
+    }
+
+    @Override
+    public int hashCode() {
+      final int prime = 31;
+      int result = 1;
+      result = prime * result + ((diskDir == null) ? 0 : diskDir.hashCode());
+      result = prime * result + (persistBackup ? 1231 : 1237);
+      result = prime * result + ((poolName == null) ? 0 : poolName.hashCode());
+      result = prime * result + (registerInterest ? 1231 : 1237);
+      return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+      if (this == obj)
+        return true;
+      if (obj == null)
+        return false;
+      if (getClass() != obj.getClass())
+        return false;
+      Config other = (Config) obj;
+      if (diskDir == null) {
+        if (other.diskDir != null)
+          return false;
+      } else if (!diskDir.equals(other.diskDir))
+        return false;
+      if (persistBackup != other.persistBackup)
+        return false;
+      if (poolName == null) {
+        if (other.poolName != null)
+          return false;
+      } else if (!poolName.equals(other.poolName))
+        return false;
+      if (registerInterest != other.registerInterest)
+        return false;
+      return true;
-    /**
-     * Returns the {@link BridgeWriter} associated with the dynamic region factory.
-     * Returns null if there is no cache writer for dynamic regions.
-     * A cache writer will only exist if this is a client and the cache writer connects to a server.
-     */
-    public BridgeWriter getBridgeWriter() {
-      return this.bridgeWriter;
-    }
-      this.bridgeWriter = conf.bridgeWriter;
-    // will already have been created) and the event is not a bridge event
+    // will already have been created) and the event is not a client event
-      return getCache().getBridgeServers().size() > 0;
+      return getCache().getCacheServers().size() > 0;
-      return getCache().getBridgeServers().size() > 0;
+      return getCache().getCacheServers().size() > 0;

MOV31 INS31 UPD66 UPD66 MOV44 MOV78 MOV83 INS39 INS42 INS8 INS78 INS39 INS42 INS44 UPD66 UPD43 UPD42 UPD42 INS60 INS60 MOV21 MOV21 MOV21 MOV21 INS41 INS42 INS43 INS42 INS25 INS25 INS25 INS60 INS25 INS25 INS25 INS25 INS41 UPD66 UPD66 MOV38 INS38 UPD66 UPD42 UPD42 MOV38 MOV38 INS83 INS39 INS59 INS39 INS59 INS42 UPD42 MOV42 INS27 INS41 INS27 INS41 INS27 INS41 INS43 INS59 INS27 INS8 INS25 INS27 INS41 INS27 INS8 INS25 INS27 INS41 INS9 INS42 INS42 INS34 INS42 INS34 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS52 INS42 INS9 INS42 INS33 INS9 INS32 INS32 INS9 INS42 INS42 INS11 INS42 INS33 INS25 INS38 INS41 INS42 INS40 INS9 INS42 INS33 INS25 INS38 INS41 INS42 INS40 INS9 MOV27 INS27 INS36 INS27 INS36 INS27 INS36 INS27 INS36 INS42 INS42 INS42 INS43 INS42 INS27 INS41 INS32 INS9 INS27 INS41 INS32 INS9 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS40 INS33 INS9 INS42 INS42 INS40 INS40 INS33 INS9 INS42 INS42 INS40 UPD42 UPD42 INS36 INS34 INS32 INS42 INS34 INS34 INS36 INS34 INS32 INS42 INS34 INS34 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS33 INS42 INS33 DEL40 DEL26 DEL52 DEL42 DEL22 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL42 DEL78 DEL42 DEL43 DEL42 DEL44 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL17 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21