GEODE-6756: rework type and regionAttributes setter/getter (#3578)

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

* make type a required attribute for RegionConfig
* Do the type to attributes mapping in the RegionConfigValidator for the ultimate attributes validation.
+import org.apache.geode.cache.configuration.EnumActionDestroyOverflow;
+import org.apache.geode.cache.configuration.RegionAttributesDataPolicy;
+import org.apache.geode.cache.configuration.RegionAttributesScope;
+import org.apache.geode.cache.configuration.RegionAttributesType;
-    RegionNameValidation.validate(config.getName());
-
-      RegionType defaultRegion = RegionType.PARTITION;
-      config.setType(defaultRegion);
-    } else {
-      String type = config.getType();
-      // validate if the type is a valid RegionType. Only types defined in RegionType are supported
-      // by management v2 api.
-      try {
-        RegionType.valueOf(type);
-
-      } catch (IllegalArgumentException e) {
-        throw new IllegalArgumentException(
-            String.format("Type %s is not supported in Management V2 API.", type));
-      }
-
-      // additional authorization
-      if (config.getRegionAttributes().getDataPolicy().isPersistent()) {
-        cache.getSecurityService()
-            .authorize(ResourcePermission.Resource.CLUSTER, ResourcePermission.Operation.WRITE,
-                ResourcePermission.Target.DISK);
-      }
+      throw new IllegalArgumentException("Type of the region has to be specified.");
+    // validate if the type is a valid RegionType. Only types defined in RegionType are supported
+    // by management v2 api.
+    try {
+      RegionType.valueOf(config.getType());
+
+    } catch (IllegalArgumentException e) {
+      throw new IllegalArgumentException(
+          String.format("Type %s is not supported in Management V2 API.", config.getType()));
+    }
+
+    RegionNameValidation.validate(config.getName());
+
+    setShortcutAttributes(config);
+
+    // additional authorization
+    if (config.getRegionAttributes().getDataPolicy().isPersistent()) {
+      cache.getSecurityService()
+          .authorize(ResourcePermission.Resource.CLUSTER, ResourcePermission.Operation.WRITE,
+              ResourcePermission.Target.DISK);
+    }
+  public static void setShortcutAttributes(RegionConfig config) {
+    String type = config.getType();
+    RegionAttributesType regionAttributes;
+
+    if (config.getRegionAttributes() == null) {
+      regionAttributes = new RegionAttributesType();
+      config.setRegionAttributes(regionAttributes);
+    }
+
+    regionAttributes = config.getRegionAttributes();
+    switch (type) {
+      case "PARTITION": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
+        break;
+      }
+      case "REPLICATE": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.REPLICATE, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
+        break;
+      }
+      case "PARTITION_REDUNDANT": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
+        checkAndSetRedundancyCopy("1", regionAttributes);
+        break;
+      }
+      case "PARTITION_PERSISTENT": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION, regionAttributes);
+        break;
+      }
+      case "PARTITION_REDUNDANT_PERSISTENT": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION, regionAttributes);
+        checkAndSetRedundancyCopy("1", regionAttributes);
+        break;
+      }
+      case "PARTITION_OVERFLOW": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
+        break;
+      }
+      case "PARTITION_REDUNDANT_OVERFLOW": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
+        checkAndSetRedundancyCopy("1", regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
+        break;
+      }
+      case "PARTITION_PERSISTENT_OVERFLOW": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION, regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
+        break;
+      }
+      case "PARTITION_REDUNDANT_PERSISTENT_OVERFLOW": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION, regionAttributes);
+        checkAndSetRedundancyCopy("1", regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
+        break;
+      }
+      case "PARTITION_HEAP_LRU": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.LOCAL_DESTROY, regionAttributes);
+        break;
+
+      }
+      case "PARTITION_REDUNDANT_HEAP_LRU": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
+        checkAndSetRedundancyCopy("1", regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.LOCAL_DESTROY, regionAttributes);
+        break;
+      }
+
+      case "REPLICATE_PERSISTENT": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
+        break;
+      }
+      case "REPLICATE_OVERFLOW": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.REPLICATE, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
+        break;
+
+      }
+      case "REPLICATE_PERSISTENT_OVERFLOW": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
+        break;
+      }
+      case "REPLICATE_HEAP_LRU": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PRELOADED, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
+        regionAttributes.setInterestPolicy("all");
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.LOCAL_DESTROY, regionAttributes);
+        break;
+      }
+      case "LOCAL": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.NORMAL, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
+        break;
+      }
+      case "LOCAL_PERSISTENT": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
+        break;
+      }
+      case "LOCAL_HEAP_LRU": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.NORMAL, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.LOCAL_DESTROY, regionAttributes);
+        break;
+      }
+      case "LOCAL_OVERFLOW": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.NORMAL, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
+        break;
+      }
+      case "LOCAL_PERSISTENT_OVERFLOW": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.LOCAL, regionAttributes);
+        checkAndSetEvictionAction(EnumActionDestroyOverflow.OVERFLOW_TO_DISK, regionAttributes);
+        break;
+      }
+      case "PARTITION_PROXY": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
+        checkAndSetLocalMaxMemory("0", regionAttributes);
+        break;
+      }
+      case "PARTITION_PROXY_REDUNDANT": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.PARTITION, regionAttributes);
+        checkAndSetLocalMaxMemory("0", regionAttributes);
+        checkAndSetRedundancyCopy("1", regionAttributes);
+        break;
+      }
+      case "REPLICATE_PROXY": {
+        checkAndSetDataPolicy(RegionAttributesDataPolicy.EMPTY, regionAttributes);
+        checkAndSetScope(RegionAttributesScope.DISTRIBUTED_ACK, regionAttributes);
+        break;
+      }
+      default:
+        throw new IllegalArgumentException("invalid type " + type);
+    }
+  }
+
+  private static void checkAndSetLocalMaxMemory(String maxMemory,
+      RegionAttributesType regionAttributes) {
+    if (regionAttributes.getPartitionAttributes() == null
+        || regionAttributes.getPartitionAttributes().getLocalMaxMemory() == null) {
+      regionAttributes.setLocalMaxMemory(maxMemory);
+    }
+    String existing = regionAttributes.getPartitionAttributes().getLocalMaxMemory();
+    if (!existing.equals(maxMemory)) {
+      throw new IllegalArgumentException("Invalid local max memory: " + existing);
+    }
+  }
+
+  private static void checkAndSetEvictionAction(EnumActionDestroyOverflow evictionAction,
+      RegionAttributesType regionAttributes) {
+    if (regionAttributes.getEvictionAttributes() == null
+        || regionAttributes.getEvictionAttributes().getLruHeapPercentage() == null
+        || regionAttributes.getEvictionAttributes().getLruHeapPercentage().getAction() == null) {
+      regionAttributes.setLruHeapPercentageEvictionAction(evictionAction);
+    }
+
+    EnumActionDestroyOverflow existing =
+        regionAttributes.getEvictionAttributes().getLruHeapPercentage().getAction();
+    if (existing != evictionAction) {
+      throw new IllegalArgumentException("Conflicting eviction action " + existing.toString());
+    }
+  }
+
+  private static void checkAndSetScope(RegionAttributesScope scope,
+      RegionAttributesType regionAttributes) {
+    RegionAttributesScope existing = regionAttributes.getScope();
+    if (existing == null) {
+      regionAttributes.setScope(scope);
+    } else if (existing != scope) {
+      throw new IllegalArgumentException("Conflicting scope " + existing.toString());
+    }
+  }
+
+  private static void checkAndSetDataPolicy(RegionAttributesDataPolicy policy,
+      RegionAttributesType regionAttributes) {
+    RegionAttributesDataPolicy existing = regionAttributes.getDataPolicy();
+    if (existing == null) {
+      regionAttributes.setDataPolicy(policy);
+    } else if (existing != policy) {
+      throw new IllegalArgumentException("Conflicting data policy "
+          + existing.toString());
+    }
+  }
+
+  // need to do this if user already set the redundant copy in the RegionAttributeType
+  private static void checkAndSetRedundancyCopy(String copies,
+      RegionAttributesType regionAttributes) {
+    if (regionAttributes.getPartitionAttributes() == null
+        || regionAttributes.getPartitionAttributes().getRedundantCopies() == null) {
+      regionAttributes.setRedundantCopy(copies);
+    }
+    RegionAttributesType.PartitionAttributes partitionAttributes =
+        regionAttributes.getPartitionAttributes();
+    if ("0".equals(partitionAttributes.getRedundantCopies())) {
+      throw new IllegalArgumentException(
+          "Conflicting redundant copy when region type is REDUNDANT");
+    }
+  }
+
+

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS25 MOV54 INS21 MOV25 INS43 INS42 MOV60 INS60 INS25 INS21 INS50 INS43 INS42 INS43 INS42 INS25 INS60 INS25 INS43 INS42 INS43 INS42 INS25 INS60 INS25 INS43 INS42 INS43 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS60 INS25 INS43 INS42 INS43 INS42 INS25 INS60 INS25 MOV27 MOV8 INS32 INS42 INS43 INS59 INS27 INS8 INS7 INS42 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS53 INS42 INS42 INS27 INS8 INS43 INS59 INS38 INS8 INS42 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS43 INS59 INS27 INS8 INS25 INS42 INS42 INS27 INS8 INS43 INS59 INS32 INS8 INS53 INS42 INS42 INS42 INS42 INS32 INS33 INS21 INS21 INS42 INS32 INS45 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS14 INS27 INS27 INS21 INS42 INS42 INS32 INS32 INS53 INS27 INS27 INS21 INS42 INS42 INS32 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS33 INS21 INS27 INS8 INS42 INS42 INS32 INS42 INS33 INS21 INS27 INS8 INS27 INS27 INS21 INS40 INS42 INS32 INS45 INS42 INS32 INS53 INS14 INS42 INS42 INS7 INS32 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS27 INS32 INS33 INS32 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS14 INS27 INS27 INS32 INS33 INS32 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS53 INS32 INS33 INS32 INS33 INS32 INS42 INS42 INS42 INS42 INS14 INS43 INS45 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS45 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS32 INS33 INS32 INS33 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS27 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS45 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS43 INS27 INS43 INS27 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS45 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25