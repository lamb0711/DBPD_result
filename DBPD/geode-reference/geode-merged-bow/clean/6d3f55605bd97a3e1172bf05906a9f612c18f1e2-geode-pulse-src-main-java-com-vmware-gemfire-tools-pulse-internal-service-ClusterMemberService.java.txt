GEODE-907: Converted core functionality to use jackson

+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ArrayNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONException;
-import com.vmware.gemfire.tools.pulse.internal.json.JSONObject;
+  private final ObjectMapper mapper = new ObjectMapper();
+
-  public JSONObject execute(final HttpServletRequest request) throws Exception {
+  public ObjectNode tempExecute(final HttpServletRequest request) throws Exception {
-    JSONObject responseJSON = new JSONObject();
+    ObjectNode responseJSON = mapper.createObjectNode();
-    List<JSONObject> memberListJson = new ArrayList<JSONObject>();
-    try {
-      for (Cluster.Member clusterMember : clusterMembersList) {
-        JSONObject memberJSON = new JSONObject();
-        // getting members detail
-        memberJSON.put("gemfireVersion", clusterMember.getGemfireVersion());
-        memberJSON.put("memberId", clusterMember.getId());
-        memberJSON.put("name", clusterMember.getName());
-        memberJSON.put("host", clusterMember.getHost());
-        memberJSON.put("hostnameForClients", clusterMember.getHostnameForClients());
+    ArrayNode memberListJson = mapper.createArrayNode();
+    for (Cluster.Member clusterMember : clusterMembersList) {
+      ObjectNode memberJSON = mapper.createObjectNode();
+      // getting members detail
+      memberJSON.put("gemfireVersion", clusterMember.getGemfireVersion());
+      memberJSON.put("memberId", clusterMember.getId());
+      memberJSON.put("name", clusterMember.getName());
+      memberJSON.put("host", clusterMember.getHost());
-        List<String> serverGroups = clusterMember.getServerGroups();
-        if(serverGroups.size() == 0){
-          serverGroups = new ArrayList<String>();
-          serverGroups.add(PulseConstants.DEFAULT_SERVER_GROUP);
-        }
-        memberJSON.put("serverGroups", serverGroups);
-        
-        List<String> redundancyZones = clusterMember.getRedundancyZones();
-        if(redundancyZones.size() == 0){
-          redundancyZones = new ArrayList<String>();
-          redundancyZones.add(PulseConstants.DEFAULT_REDUNDANCY_ZONE);
-        }
-        memberJSON.put("redundancyZones", redundancyZones);
-
-        DecimalFormat df2 = new DecimalFormat(
-            PulseConstants.DECIMAL_FORMAT_PATTERN);
-
-        long usedHeapSize = cluster.getUsedHeapSize();
-        long currentHeap = clusterMember.getCurrentHeapSize();
-        if (usedHeapSize > 0) {
-          float heapUsage = ((float) currentHeap / (float) usedHeapSize) * 100;
-          memberJSON
-              .put(this.HEAP_USAGE, Double.valueOf(df2.format(heapUsage)));
-        } else {
-          memberJSON.put(this.HEAP_USAGE, 0);
-        }
-        Float currentCPUUsage = clusterMember.getCpuUsage();
-
-        memberJSON.put("cpuUsage", Float.valueOf(df2.format(currentCPUUsage)));
-        memberJSON.put("currentHeapUsage", clusterMember.getCurrentHeapSize());
-        memberJSON.put("isManager", clusterMember.isManager());
-        memberJSON.put("uptime",
-            TimeUtils.convertTimeSecondsToHMS(clusterMember.getUptime()));
-        memberJSON.put("loadAvg", clusterMember.getLoadAverage());
-        memberJSON.put("sockets", clusterMember.getTotalFileDescriptorOpen());
-        memberJSON.put("threads", clusterMember.getNumThreads());
-
-        // Number of member clients
-        if (PulseController.getPulseProductSupport().equalsIgnoreCase(
-            PulseConstants.PRODUCT_NAME_SQLFIRE)){
-          memberJSON.put("clients", clusterMember.getNumSqlfireClients());
-        }else{
-          memberJSON.put("clients", clusterMember.getMemberClientsHMap().size());
-        }
-        memberJSON.put("queues", clusterMember.getQueueBacklog());
-
-        memberListJson.add(memberJSON);
+      List<String> serverGroups = clusterMember.getServerGroups();
+      if(serverGroups.size() == 0){
+        serverGroups = new ArrayList<>();
+        serverGroups.add(PulseConstants.DEFAULT_SERVER_GROUP);
-      // clucter's Members
-      responseJSON.put("members", memberListJson);
-      // Send json response
-      return responseJSON;
-    } catch (JSONException e) {
-      throw new Exception(e);
+
+      memberJSON.put("serverGroups", mapper.valueToTree(serverGroups));
+
+      List<String> redundancyZones = clusterMember.getRedundancyZones();
+      if(redundancyZones.size() == 0){
+        redundancyZones = new ArrayList<String>();
+        redundancyZones.add(PulseConstants.DEFAULT_REDUNDANCY_ZONE);
+      }
+      memberJSON.put("redundancyZones", mapper.valueToTree(redundancyZones));
+
+      DecimalFormat df2 = new DecimalFormat(
+          PulseConstants.DECIMAL_FORMAT_PATTERN);
+
+      long usedHeapSize = cluster.getUsedHeapSize();
+      long currentHeap = clusterMember.getCurrentHeapSize();
+      if (usedHeapSize > 0) {
+        float heapUsage = ((float) currentHeap / (float) usedHeapSize) * 100;
+        memberJSON
+            .put(this.HEAP_USAGE, Double.valueOf(df2.format(heapUsage)));
+      } else {
+        memberJSON.put(this.HEAP_USAGE, 0);
+      }
+      Float currentCPUUsage = clusterMember.getCpuUsage();
+
+      memberJSON.put("cpuUsage", Float.valueOf(df2.format(currentCPUUsage)));
+      memberJSON.put("currentHeapUsage", clusterMember.getCurrentHeapSize());
+      memberJSON.put("isManager", clusterMember.isManager());
+      memberJSON.put("uptime",
+          TimeUtils.convertTimeSecondsToHMS(clusterMember.getUptime()));
+      memberJSON.put("loadAvg", clusterMember.getLoadAverage());
+      memberJSON.put("sockets", clusterMember.getTotalFileDescriptorOpen());
+      memberJSON.put("threads", clusterMember.getNumThreads());
+
+      // Number of member clients
+      if (PulseController.getPulseProductSupport().equalsIgnoreCase(
+          PulseConstants.PRODUCT_NAME_SQLFIRE)){
+        memberJSON.put("clients", clusterMember.getNumSqlfireClients());
+      }else{
+        memberJSON.put("clients", clusterMember.getMemberClientsHMap().size());
+      }
+      memberJSON.put("queues", clusterMember.getQueueBacklog());
+
+      memberListJson.add(memberJSON);
+    // cluster's Members
+    responseJSON.put("members", memberListJson);
+    // Send json response
+    return responseJSON;

MOV26 MOV26 INS26 UPD40 INS40 UPD40 INS23 INS83 INS83 INS43 INS59 UPD43 UPD42 MOV8 INS42 INS42 INS14 UPD42 MOV60 INS60 MOV60 INS60 INS43 INS43 INS59 INS43 INS59 MOV21 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS42 INS42 INS42 INS42 UPD43 INS32 UPD42 INS32 UPD45 MOV42 MOV42 UPD45 MOV45 INS32 INS42 INS42 UPD42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD74 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL32 DEL21 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8