GEODE-269 : Resolving conflicts with develop.

-import org.apache.geode.annotations.Experimental;
+import org.apache.geode.CancelException;
+import org.apache.geode.cache.CacheClosedException;
+import org.apache.geode.cache.execute.FunctionException;
+import org.apache.geode.cache.lucene.internal.LuceneQueryImpl;
+import org.apache.geode.cache.persistence.PartitionOfflineException;
+import org.apache.geode.internal.cache.PrimaryBucketException;
-@Experimental
-   * 
+   *
+   * @return Collection of Apache Geode region keys that satisfy the Lucene query.
+   * @throws CacheClosedException if the cache was closed while the Lucene query was being executed.
+   * @throws FunctionException if the function execution mechanism encounters an error while
+   *         executing the Lucene query.
+   * @throws PartitionOfflineException if the node containing the buckets required to execute the
+   *         Lucene query goes offline.
+   * @throws CancelException if a cancel is in progress while the Lucene query was being executed.
-   * 
+   *
+   * @return a Collection of Apache Geode region values that satisfy the Lucene query.
+   * @throws CacheClosedException if the cache was closed while the Lucene query was being executed.
+   * @throws FunctionException if the function execution mechanism encounters an error while
+   *         executing the Lucene query.
+   * @throws PartitionOfflineException if the node containing the buckets required to execute the
+   *         Lucene query goes offline.
+   * @throws CancelException if a cancel is in progress while the Lucene query was being executed.
+   * @return a List of LuceneResultStruct that match the Lucene query
+   * @throws CacheClosedException if the cache was closed while the Lucene query was being executed.
+   * @throws FunctionException if the function execution mechanism encounters an error while
+   *         executing the Lucene query.
+   * @throws PartitionOfflineException if the node containing the buckets required to execute the
+   *         Lucene query goes offline.
+   * @throws CancelException if a cancel is in progress while the Lucene query was being executed.
+   * @return a PageableLuceneQuery that can be used to fetch one page of result at a time.
+   * @throws CacheClosedException if the cache was closed while the Lucene query was being executed.
+   * @throws FunctionException if the function execution mechanism encounters an error while
+   *         executing the Lucene query.
+   * @throws PartitionOfflineException if the node containing the buckets required to execute the
+   *         Lucene query goes offline.
+   * @throws CancelException if a cancel is in progress while the Lucene query was being executed.
-   * Get page size setting of current query.
+   * Gets the page size setting of current query. This page size is set while creating
+   * {@link LuceneQueryImpl} object
+   *
+   * @return int value representing the page size of the current query
-   * Get limit size setting of current query.
+   * Get limit size setting of current query. This value is the maximum number of results that can
+   * be returned by the Lucene query. This value is set while creating the {@link LuceneQueryImpl}
+   * object
+   *
+   * @return int value representing the limit of the current query

INS26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS40 INS40 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 UPD66 INS65 INS66 INS66 UPD66 INS66 INS65 INS66 INS66 INS42 INS42 DEL42 DEL78