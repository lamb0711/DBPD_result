Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <code>DynamicRegionListener</code> is an interface that can be
- * implemented to handle dynamic region-related events.
-
- * The methods on a <code>DynamicRegionListener</code> are invoked synchronously.
- * If the listener method takes a long time to execute then it will cause the
- * operation that caused it to be invoked to take a long time.
+ * <code>DynamicRegionListener</code> is an interface that can be implemented to handle dynamic
+ * region-related events.
+ * 
+ * The methods on a <code>DynamicRegionListener</code> are invoked synchronously. If the listener
+ * method takes a long time to execute then it will cause the operation that caused it to be invoked
+ * to take a long time.
- * Note: It is possible to receive duplicate create events when the DynamicRegionFactory
- * goes active due to Cache creation.
+ * Note: It is possible to receive duplicate create events when the DynamicRegionFactory goes active
+ * due to Cache creation.
-   * Handles the 'before region creation' event of a dynamic region. This method
-   * is invoked before the dynamic region is created in the local VM.
+   * Handles the 'before region creation' event of a dynamic region. This method is invoked before
+   * the dynamic region is created in the local VM.
-   * Handles the 'after region creation' event of a dynamic region. This method
-   * is invoked after the dynamic region is created in the local VM.
+   * Handles the 'after region creation' event of a dynamic region. This method is invoked after the
+   * dynamic region is created in the local VM.
-  public void afterRegionCreate(RegionEvent<?,?> event);
+  public void afterRegionCreate(RegionEvent<?, ?> event);
-   * Handles the 'before region destroyed' event of a dynamic region. This method
-   * is invoked before the dynamic region is destroyed in the local VM.
+   * Handles the 'before region destroyed' event of a dynamic region. This method is invoked before
+   * the dynamic region is destroyed in the local VM.
-  public void beforeRegionDestroy(RegionEvent<?,?> event);
+  public void beforeRegionDestroy(RegionEvent<?, ?> event);
-   * Handles the 'after region destroyed' event of a dynamic region. This method
-   * is invoked after the dynamic region is destroyed in the local VM.
+   * Handles the 'after region destroyed' event of a dynamic region. This method is invoked after
+   * the dynamic region is destroyed in the local VM.
-  public void afterRegionDestroy(RegionEvent<?,?> event);
+  public void afterRegionDestroy(RegionEvent<?, ?> event);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66