Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

+import com.gemstone.gemfire.cache.CustomEvictionAttributes;
+  private String hdfsStoreName;
+  private boolean hdfsWriteOnly = false;
+  /**
+   * True if usage of off-heap memory is enabled for this region.
+   * @since 9.0
+   */
+  private boolean offHeap;
+
+	this.hdfsStoreName = attrs.getHDFSStoreName();
+    
+    this.offHeap = attrs.getOffHeap();
+ 	if (! equal(this.hdfsStoreName, other.getHDFSStoreName())) {
+      //TODO:HDFS write a new exception string
+      throw new RuntimeException(" HDFS Store name does not match");
+    }
+    if (this.offHeap != other.getOffHeap()) {
+      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENABLE_OFF_HEAP_MEMORY_IS_NOT_THE_SAME.toLocalizedString());
+    }
+    if (!hasHDFSStoreName()) {
+      if (parentIsUserSpecified) {
+        if (parentWithHas.hasHDFSStoreName()) {
+          setHDFSStoreName(parent.getHDFSStoreName());
+        }
+      } else {
+        setHDFSStoreName(parent.getHDFSStoreName());
+      }
+    }
+    if (!hasHDFSWriteOnly()) {
+      if (parentIsUserSpecified) {
+        if (parentWithHas.hasHDFSWriteOnly()) {
+          setHDFSWriteOnly(parent.getHDFSWriteOnly());
+        }
+      } else {
+        setHDFSWriteOnly(parent.getHDFSWriteOnly());
+      }
+    }
-  
-  
+
+  /**
+   * {@inheritDoc}
+   */
+  @Override
+  public CustomEvictionAttributes getCustomEvictionAttributes() {
+    // TODO: HDFS: no support for configuring this from XML yet
+    return null;
+  }
+
+  public void setOffHeap(boolean offHeap) {
+    this.offHeap = offHeap;
+    setHasOffHeap(true);
+  }
+  
+  public boolean getOffHeap() {
+    return this.offHeap;
+  }
+  
+  public String getHDFSStoreName() {
+    return this.hdfsStoreName;
+  }
+  public void setHDFSStoreName(String hdfsStoreName) {
+    //TODO:HDFS : throw an exception if a disk store is already configured
+    // and vice versa
+    this.hdfsStoreName = hdfsStoreName;
+    setHasHDFSStoreName(true);
+  }
+  public void setHDFSWriteOnly(boolean writeOnly) {
+    this.hdfsWriteOnly= writeOnly;
+    setHasHDFSWriteOnly(true);
+  }
+  public boolean getHDFSWriteOnly() {
+    return hdfsWriteOnly;
+  }

INS26 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS29 INS78 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS9 INS65 INS65 INS42 INS21 INS21 INS25 INS25 INS25 INS25 INS65 INS42 INS42 INS41 INS39 INS42 INS21 INS21 INS41 INS42 INS41 INS43 INS42 INS21 INS21 INS39 INS42 INS21 INS21 INS41 INS66 INS66 INS7 INS7 INS38 INS8 INS27 INS8 INS38 INS8 INS38 INS8 INS65 INS33 INS7 INS32 INS22 INS22 INS42 INS7 INS32 INS7 INS32 INS42 INS22 INS32 INS22 INS32 INS32 INS53 INS22 INS32 INS53 INS32 INS25 INS32 INS25 INS22 INS42 INS42 INS9 INS52 INS42 INS52 INS42 INS22 INS42 INS42 INS9 INS22 INS42 INS42 INS9 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS22 INS32 INS14 INS52 INS42 INS42 INS42 INS14 INS42 INS42 INS8 INS8 INS42 INS42 INS8 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS43 INS45 INS43 INS32 INS25 INS21 INS25 INS21 INS42 INS42 INS40 INS42 INS32 INS8 INS32 INS32 INS8 INS32 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS21 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42