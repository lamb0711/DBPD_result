Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Constant for lightweight cache inspection. Entry values will be returned
-   * as Strings.
+   * Constant for lightweight cache inspection. Entry values will be returned as Strings.
-   * Constant for logical cache inspection. Entry values will be returned as
-   * a tree of {@link EntryValueNode}s, with each node containing its logical elements.
+   * Constant for logical cache inspection. Entry values will be returned as a tree of
+   * {@link EntryValueNode}s, with each node containing its logical elements.
-   * Constant for physical cache inspection. Entry values will be returned as
-   * a tree of {@link EntryValueNode}s, with each node containing its declared fields.
+   * Constant for physical cache inspection. Entry values will be returned as a tree of
+   * {@link EntryValueNode}s, with each node containing its declared fields.
-    
+
-   * Returns the product directory (the value of GEMFIRE env variable)
+   * Returns the product directory (the value of GEODE_HOME env variable)
-  public java.io.File getGemFireDir();
-  
+  public java.io.File getGeodeHomeDir();
+
+   * 
-   
+
-   * Adds a {@link StatListener} for the given resource and attribute.
-   * Changes in value will be streamed back from the vm.
+   * Adds a {@link StatListener} for the given resource and attribute. Changes in value will be
+   * streamed back from the vm.
-  public void addStatListener(StatListener observer,
-                              StatResource observedResource,
-                              Stat observedStat);
-  
+  public void addStatListener(StatListener observer, StatResource observedResource,
+      Stat observedStat);
+
-  public void removeStatListener(StatListener observer);  
+  public void removeStatListener(StatListener observer);
-   * Adds a {@link HealthListener} with the given configuration to the vm.
-   * If a health listener has already been added it will be removed
-   * and a new one added.
+   * Adds a {@link HealthListener} with the given configuration to the vm. If a health listener has
+   * already been added it will be removed and a new one added.
+   * 
-  public void addHealthListener(HealthListener observer,
-                                GemFireHealthConfig cfg);
-  
+  public void addHealthListener(HealthListener observer, GemFireHealthConfig cfg);
+
+   * 
+   * 
-   * Returns detailed information explaining the current health
-   * status.  Each array element is a different cause for the current
-   * status.  An empty array will be returned if the current status is
-   * "good".
+   * Returns detailed information explaining the current health status. Each array element is a
+   * different cause for the current status. An empty array will be returned if the current status
+   * is "good".
-   * @param healthCode
-   *        The current health status
+   * @param healthCode The current health status
-   * Returns the runtime {@link org.apache.geode.admin.GemFireMemberStatus} from the vm
-   * The idea is this snapshot is similar to stats that represent the current state of a 
-   * running VM. However, this is a bit higher level than a stat 
+   * Returns the runtime {@link org.apache.geode.admin.GemFireMemberStatus} from the vm The idea is
+   * this snapshot is similar to stats that represent the current state of a running VM. However,
+   * this is a bit higher level than a stat
+   * 
-  
+
-   * Returns the runtime {@link org.apache.geode.admin.RegionSubRegionSnapshot} from the vm
-   * The idea is this snapshot is quickly salvageable to present a cache's region's info 
+   * Returns the runtime {@link org.apache.geode.admin.RegionSubRegionSnapshot} from the vm The idea
+   * is this snapshot is quickly salvageable to present a cache's region's info
+   * 
-  
+
-   * Sets the runtime configurable parameters in the gemfire vm's
-   * {@link Config} 
+   * Sets the runtime configurable parameters in the gemfire vm's {@link Config}
-  
+
-   * Returns the the main log and the tail of the currently active child log,
-   * or just the tail of the main log if child logging is disabled.
+   * Returns the the main log and the tail of the currently active child log, or just the tail of
+   * the main log if child logging is disabled.
-   * Sets the additional classpath settings to be used in the remote vm
-   * when processing admin messages from the console. It can be changed
-   * in between messages.
+   * Sets the additional classpath settings to be used in the remote vm when processing admin
+   * messages from the console. It can be changed in between messages.
-  
+
-  
+
-   * Returns the root cache region or null if the root
-   * region hasn't been created.
+   * Returns the root cache region or null if the root region hasn't been created.
+
-   * Return the existing region (or subregion) with the specified
-   * path that already exists or is already mapped into the cache.
-   * Whether or not the path starts with a forward slash it is interpreted as a
-   * full path starting at a root.
-   * Does not cause a shared region to be mapped into the cache.
+   * Return the existing region (or subregion) with the specified path that already exists or is
+   * already mapped into the cache. Whether or not the path starts with a forward slash it is
+   * interpreted as a full path starting at a root. Does not cause a shared region to be mapped into
+   * the cache.
-   * Creates a new root VM region with the given name and attributes
-   * in this remote VM.  Information about the region is returned.
+   * Creates a new root VM region with the given name and attributes in this remote VM. Information
+   * about the region is returned.
-   * @throws AdminException
-   *         If an error occurs while creating the region
+   * @throws AdminException If an error occurs while creating the region
-  public Region createVMRootRegion(CacheInfo c, String name,
-                                   RegionAttributes attrs)
-    throws AdminException;
+  public Region createVMRootRegion(CacheInfo c, String name, RegionAttributes attrs)
+      throws AdminException;
-   * Creates a new root VM region with the given name and attributes
-   * in this remote VM.  Information about the region is returned.
+   * Creates a new root VM region with the given name and attributes in this remote VM. Information
+   * about the region is returned.
-   * @throws AdminException
-   *         If an error occurs while creating the region
+   * @throws AdminException If an error occurs while creating the region
-  public Region createSubregion(CacheInfo c, String parentPath,
-                                String name, RegionAttributes attrs)
-    throws AdminException;
+  public Region createSubregion(CacheInfo c, String parentPath, String name, RegionAttributes attrs)
+      throws AdminException;
+   * 
-   * Returns one of these constants {@link #LIGHTWEIGHT_CACHE_VALUE},
-   * {@link #LOGICAL_CACHE_VALUE}, or {@link #PHYSICAL_CACHE_VALUE}.
+   * Returns one of these constants {@link #LIGHTWEIGHT_CACHE_VALUE}, {@link #LOGICAL_CACHE_VALUE},
+   * or {@link #PHYSICAL_CACHE_VALUE}.
-   * Causes a snapshot of the given region to be taken. Results are streamed back
-   * to any SnapshotListeners registered with this <code>GemFireVM</code>'s
-   * parent {@link GfManagerAgent}.
-   * @param regionName  the region to snapshot
+   * Causes a snapshot of the given region to be taken. Results are streamed back to any
+   * SnapshotListeners registered with this <code>GemFireVM</code>'s parent {@link GfManagerAgent}.
+   * 
+   * @param regionName the region to snapshot
-//   /**
-//    * Clears any results of a snapshot request still waiting to be streamed back
-//    */
-//   public void flushSnapshots();  
-  
-  
+  // /**
+  // * Clears any results of a snapshot request still waiting to be streamed back
+  // */
+  // public void flushSnapshots();
+
+
-   * Returns the name given to the {@link org.apache.geode.GemFireConnection}
-   * of this process
+   * Returns the name given to the {@link org.apache.geode.GemFireConnection} of this process
-  //public String getName();
-  
-//   /**
-//    * Returns true if a cache has been created.
-//    */
-//   public boolean hasCache();
+  // public String getName();
+
+  // /**
+  // * Returns true if a cache has been created.
+  // */
+  // public boolean hasCache();
-   * The distribution ID if this VM. Its used to identify this VM
-   * by members if this VM's distributed system.
+   * The distribution ID if this VM. Its used to identify this VM by members if this VM's
+   * distributed system.
-   * Returns information on this vm's cache.
-   * If the vm does not have a cache then <code>null</code> is returned.
+   * Returns information on this vm's cache. If the vm does not have a cache then <code>null</code>
+   * is returned.
-   * Sets the lockTimeout configuration value for the given cache and
-   * then returns the current info for that cache.
+   * Sets the lockTimeout configuration value for the given cache and then returns the current info
+   * for that cache.
-  public CacheInfo setCacheLockTimeout(CacheInfo c, int v)
-    throws AdminException ;
+  public CacheInfo setCacheLockTimeout(CacheInfo c, int v) throws AdminException;
+
-   * Sets the lockLease configuration value for the given cache and
-   * then returns the current info for that cache.
+   * Sets the lockLease configuration value for the given cache and then returns the current info
+   * for that cache.
-  public CacheInfo setCacheLockLease(CacheInfo c, int v)
-    throws AdminException;
+  public CacheInfo setCacheLockLease(CacheInfo c, int v) throws AdminException;
+
-   * Sets the searchTimeout configuration value for the given cache and
-   * then returns the current info for that cache.
+   * Sets the searchTimeout configuration value for the given cache and then returns the current
+   * info for that cache.
-  public CacheInfo setCacheSearchTimeout(CacheInfo c, int v)
-    throws AdminException;
+  public CacheInfo setCacheSearchTimeout(CacheInfo c, int v) throws AdminException;
-  public AdminBridgeServer addCacheServer(CacheInfo cache)
-    throws AdminException;
+  public AdminBridgeServer addCacheServer(CacheInfo cache) throws AdminException;
-   * @param id
-   *        The unique {@link AdminBridgeServer#getId id} of the
-   *        bridge server
+   * @param id The unique {@link AdminBridgeServer#getId id} of the bridge server
-  public AdminBridgeServer getBridgeInfo(CacheInfo cache, 
-                                         int id)
-    throws AdminException;
+  public AdminBridgeServer getBridgeInfo(CacheInfo cache, int id) throws AdminException;
-  public AdminBridgeServer startBridgeServer(CacheInfo cache,
-                                             AdminBridgeServer bridge)
-    throws AdminException;
+  public AdminBridgeServer startBridgeServer(CacheInfo cache, AdminBridgeServer bridge)
+      throws AdminException;
-  public AdminBridgeServer stopBridgeServer(CacheInfo cache,
-                                            AdminBridgeServer bridge)
-    throws AdminException;
-  
+  public AdminBridgeServer stopBridgeServer(CacheInfo cache, AdminBridgeServer bridge)
+      throws AdminException;
+
-   * This method should be used to set the Alerts Manager for the member agent. 
-   * Stat Alerts Aggregator would use this method to set stat Alerts Manager 
-   * with the available alert definitions and the refresh interval set for 
-   * each member joining the distributed system. 
+   * This method should be used to set the Alerts Manager for the member agent. Stat Alerts
+   * Aggregator would use this method to set stat Alerts Manager with the available alert
+   * definitions and the refresh interval set for each member joining the distributed system.
-  public void setAlertsManager(StatAlertDefinition[] alertDefs, long refreshInterval, boolean setRemotely);
-  
+  public void setAlertsManager(StatAlertDefinition[] alertDefs, long refreshInterval,
+      boolean setRemotely);
+
-   * This method would be used to set refresh interval for the GemFireVM. This 
-   * method would mostly be called on each member after initial set up whenever 
-   * the refresh interval is changed.
+   * This method would be used to set refresh interval for the GemFireVM. This method would mostly
+   * be called on each member after initial set up whenever the refresh interval is changed.
-  
+
-   * This method would be used to set Sta Alert Definitions for the GemFireVM. 
-   * This method would mostly be called on each member after initial set up 
-   * whenever one or more Stat Alert Definitions get added/updated/removed.
+   * This method would be used to set Sta Alert Definitions for the GemFireVM. This method would
+   * mostly be called on each member after initial set up whenever one or more Stat Alert
+   * Definitions get added/updated/removed.
-   * @param actionCode one of UpdateAlertDefinitionRequest.ADD_ALERT_DEFINITION, 
-   *                   UpdateAlertDefinitionRequestUPDATE_ALERT_DEFINITION, 
-   *                   UpdateAlertDefinitionRequest.REMOVE_ALERT_DEFINITION
-   *                   
+   * @param actionCode one of UpdateAlertDefinitionRequest.ADD_ALERT_DEFINITION,
+   *        UpdateAlertDefinitionRequestUPDATE_ALERT_DEFINITION,
+   *        UpdateAlertDefinitionRequest.REMOVE_ALERT_DEFINITION
+   * 

UPD42 MOV43 MOV43 MOV43 MOV43 MOV66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66