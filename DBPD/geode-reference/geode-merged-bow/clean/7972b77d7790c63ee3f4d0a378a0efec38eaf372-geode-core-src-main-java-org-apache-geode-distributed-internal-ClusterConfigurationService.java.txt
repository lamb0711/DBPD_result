GEODE-4029: Deployed jars may not be correct when multiple locators aâ€¦ (#1103)

* GEODE-4029: Deployed jars may not be correct when multiple locators are in use

* GEODE-4029: Review updates

+import java.util.ArrayList;
-import java.util.Objects;
+
+        String memberId = cache.getMyId().getId();
+
-        configRegion.put(group, configurationCopy);
+        configRegion.put(group, configurationCopy, memberId);
+
+        for (String jarRemoved : jarNames) {
+          File jar = this.getPathToJarOnThisLocator(group, jarRemoved).toFile();
+          if (jar.exists()) {
+            try {
+              FileUtils.forceDelete(jar);
+            } catch (IOException e) {
+              logger.error(
+                  "Exception occurred while attempting to delete a jar from the filesystem: {}",
+                  jarRemoved, e);
+            }
+          }
+        }
+
-  // used in the cluster config change listener when jarnames are changed in the internal region
+  // Only used when a locator is initially starting up
-    Set<DistributedMember> locators =
-        new HashSet<>(dm.getAllHostedLocatorsWithSharedConfiguration().keySet());
+    List<DistributedMember> locators =
+        new ArrayList<>(dm.getAllHostedLocatorsWithSharedConfiguration().keySet());
-    byte[] jarBytes = locators.stream()
-        .map((DistributedMember locator) -> downloadJarFromLocator(locator, groupName, jarName))
-        .filter(Objects::nonNull).findFirst().orElseThrow(() -> new IllegalStateException(
-            "No locators have a deployed jar named " + jarName + " in " + groupName));
+    if (locators.isEmpty()) {
+      throw new IllegalStateException(
+          "Request to download jar " + jarName + " but no other locators are present");
+    }
+
+    byte[] jarBytes = downloadJar(locators.get(0), groupName, jarName);
+  // used in the cluster config change listener when jarnames are changed in the internal region
+  public void downloadJarFromLocator(String groupName, String jarName,
+      DistributedMember sourceLocator) throws IllegalStateException, IOException {
+    logger.info("Downloading jar {} from locator {}", jarName, sourceLocator.getName());
+
+    createConfigDirIfNecessary(groupName);
+
+    byte[] jarBytes = downloadJar(sourceLocator, groupName, jarName);
+
+    if (jarBytes == null) {
+      throw new IllegalStateException("Could not download jar " + jarName + " in " + groupName
+          + " from " + sourceLocator.getName());
+    }
+
+    File jarToWrite = getPathToJarOnThisLocator(groupName, jarName).toFile();
+    FileUtils.writeByteArrayToFile(jarToWrite, jarBytes);
+  }
+
+  private byte[] downloadJar(DistributedMember locator, String groupName, String jarName) {
+    ResultCollector<byte[], List<byte[]>> rc =
+        (ResultCollector<byte[], List<byte[]>>) CliUtil.executeFunction(new UploadJarFunction(),
+            new Object[] {groupName, jarName}, Collections.singleton(locator));
+
+    List<byte[]> result = rc.getResult();
+
+    // we should only get one byte[] back in the list
+    return result.get(0);
+  }
+
-      clusterRegion.putAll(sharedConfiguration);
+
+      String memberId = cache.getMyId().getId();
+      clusterRegion.putAll(sharedConfiguration, memberId);
-  private byte[] downloadJarFromLocator(DistributedMember locator, String groupName,
-      String jarName) {
-    ResultCollector<byte[], List<byte[]>> rc =
-        (ResultCollector<byte[], List<byte[]>>) CliUtil.executeFunction(new UploadJarFunction(),
-            new Object[] {groupName, jarName}, Collections.singleton(locator));
-
-    List<byte[]> result = rc.getResult();
-
-    // we should only get one byte[] back in the list
-    return result.stream().filter(Objects::nonNull).findFirst().orElse(null);
-  }
-

MOV26 MOV31 UPD40 INS31 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 UPD42 INS25 INS60 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS21 INS60 INS25 INS60 INS21 UPD74 INS32 INS8 MOV5 INS59 INS42 INS42 INS42 INS32 INS32 INS5 INS59 INS27 INS8 INS43 INS59 INS32 INS32 UPD43 MOV42 UPD42 MOV42 INS53 INS42 INS32 INS42 INS42 INS45 INS42 INS32 INS42 INS42 INS39 INS85 INS42 INS32 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS34 INS60 UPD42 UPD74 INS14 UPD42 MOV42 INS32 MOV42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS43 INS59 INS60 INS70 UPD43 MOV43 INS27 UPD42 MOV42 INS42 INS34 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS44 INS42 INS8 UPD42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS60 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS54 INS32 INS42 INS8 INS12 INS52 INS42 INS42 INS42 INS21 INS44 INS8 INS32 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL44 DEL32 DEL86 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL14 DEL86 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL32 DEL42 DEL33 DEL32