Merge branch 'release/1.0.0-incubating.M3'

-import java.util.Arrays;
-import java.util.LinkedHashSet;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
+import org.apache.lucene.analysis.miscellaneous.PerFieldAnalyzerWrapper;
-  private Map<String, Analyzer> fieldFieldAnalyzerMap;
+  private Map<String, Analyzer> fieldAnalyzers;
-  public Map<String, Analyzer> getFieldFieldAnalyzerMap() {
-    return fieldFieldAnalyzerMap;
-  }
-
-  public void setFieldFieldAnalyzerMap(
-      Map<String, Analyzer> fieldFieldAnalyzerMap) {
-    this.fieldFieldAnalyzerMap = fieldFieldAnalyzerMap;
+  public void setFieldAnalyzers(
+      Map<String, Analyzer> fieldAnalyzers) {
+    this.fieldAnalyzers = fieldAnalyzers;
-  public Map<String, Analyzer> getFieldAnalyzerMap() {
-    return this.fieldFieldAnalyzerMap;
+  public Map<String, Analyzer> getFieldAnalyzers() {
+    if (this.fieldAnalyzers == null) {
+      this.fieldAnalyzers = new HashMap<>();
+    }
+    return this.fieldAnalyzers;
-  public void onCreate(Extensible<Region<?, ?>> source,
-      Extensible<Region<?, ?>> target) {
-    target.getExtensionPoint().addExtension(this);
-    Cache cache = target.getExtensionPoint().getTarget().getCache();
+  public void beforeCreate(Extensible<Region<?, ?>> source, Cache cache) {
-    Region region = target.getExtensionPoint().getTarget();
-    String aeqId = LuceneServiceImpl.getUniqueIndexName(getName(), getRegionPath());
-    //Here, it is safe to add the aeq with the mutator, because onCreate is
-    //fired in a special place before the region is initialized.
-    //TODO - this may only work for PRs. We need to intercept the attributes
-    //before the region is created with a RegionListener.
-    region.getAttributesMutator().addAsyncEventQueueId(aeqId);
-    service.afterDataRegionCreated(getName(), new StandardAnalyzer(), getRegionPath(), getFieldNames());
+    Analyzer analyzer = this.fieldAnalyzers == null
+        ? new StandardAnalyzer()
+        : new PerFieldAnalyzerWrapper(new StandardAnalyzer(), this.fieldAnalyzers);
+    service.createIndex(getName(), getRegionPath(), analyzer, this.fieldAnalyzers, getFieldNames());
-  public void addField(String name) {
+  @Override
+  public void onCreate(Extensible<Region<?, ?>> source, Extensible<Region<?, ?>> target) {}
+
+  protected void addField(String name) {
+  protected void addFieldAndAnalyzer(String name, Analyzer analyzer) {
+    this.fieldNames.add(name);
+    getFieldAnalyzers().put(name, analyzer);
+  }
+
-    
+  }
+
+  @Override
+  public boolean waitUntilFlushed(int maxWaitInMillisecond) {
+    return true;

MOV26 MOV31 UPD40 UPD40 INS31 INS31 INS31 UPD42 MOV78 MOV83 MOV74 INS42 INS8 UPD42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 MOV44 INS8 UPD83 INS83 INS39 INS42 INS44 INS44 MOV8 INS78 INS39 UPD42 INS44 UPD42 UPD42 INS25 INS41 MOV43 INS42 MOV60 MOV60 MOV21 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS39 INS42 INS27 INS8 INS22 UPD43 INS43 INS74 MOV42 MOV42 INS32 INS32 INS9 UPD42 INS22 INS33 INS21 INS52 INS42 UPD42 UPD42 INS16 UPD42 INS42 INS22 INS42 INS43 INS76 INS76 INS22 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 INS52 INS42 INS7 INS27 INS14 INS14 INS52 INS42 INS42 INS52 INS42 INS42 INS22 INS14 INS22 INS33 INS43 INS43 MOV14 INS22 INS52 INS42 INS74 INS52 INS42 INS42 INS42 INS52 INS42 UPD43 MOV43 UPD42 DEL40 DEL26 DEL40 DEL26 DEL43 DEL43 DEL74 DEL42 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL52 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL41 DEL52 DEL42 DEL22