Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class determines whether or not a given port is available and
- * can also provide a randomly selected available port.
+ * This class determines whether or not a given port is available and can also provide a randomly
+ * selected available port.
-  public static final int AVAILABLE_PORTS_UPPER_BOUND = 29999;//30000/tcp is spoolfax
+  public static final int AVAILABLE_PORTS_UPPER_BOUND = 29999;// 30000/tcp is spoolfax
-  ///////////////////////  Static Methods  ///////////////////////
-  
+  /////////////////////// Static Methods ///////////////////////
+
-   * see if there is a gemfire system property that establishes a
-   * default address for the given protocol, and return it
+   * see if there is a gemfire system property that establishes a default address for the given
+   * protocol, and return it
-      }
-      else if (protocol == MULTICAST) {
+      } else if (protocol == MULTICAST) {
-    }
-    catch (UnknownHostException e) {
+    } catch (UnknownHostException e) {
-   * Returns whether or not the given port on the local host is
-   * available (that is, unused).
+   * Returns whether or not the given port on the local host is available (that is, unused).
-   * @param port
-   *        The port to check
-   * @param protocol
-   *        The protocol to check (either {@link #SOCKET} or {@link
-   *        #MULTICAST}). 
+   * @param port The port to check
+   * @param protocol The protocol to check (either {@link #SOCKET} or {@link #MULTICAST}).
-   * @throws IllegalArgumentException
-   *         <code>protocol</code> is unknown
+   * @throws IllegalArgumentException <code>protocol</code> is unknown
-  
-  
+
+
-   * Returns whether or not the given port on the local host is
-   * available (that is, unused).
+   * Returns whether or not the given port on the local host is available (that is, unused).
-   * @param port
-   *        The port to check
-   * @param protocol
-   *        The protocol to check (either {@link #SOCKET} or {@link
-   *        #MULTICAST}). 
+   * @param port The port to check
+   * @param protocol The protocol to check (either {@link #SOCKET} or {@link #MULTICAST}).
-   * @throws IllegalArgumentException
-   *         <code>protocol</code> is unknown
+   * @throws IllegalArgumentException <code>protocol</code> is unknown
-      if(addr == null) {
+      if (addr == null) {
-    
+
-        buffer[0] = (byte)'p';
-        buffer[1] = (byte)'i';
-        buffer[2] = (byte)'n';
-        buffer[3] = (byte)'g';
-        InetAddress mcid = addr==null? DistributionConfig.DEFAULT_MCAST_ADDRESS : addr;
-        SocketAddress mcaddr = new InetSocketAddress(
-          mcid, port);
+        buffer[0] = (byte) 'p';
+        buffer[1] = (byte) 'i';
+        buffer[2] = (byte) 'n';
+        buffer[3] = (byte) 'g';
+        InetAddress mcid = addr == null ? DistributionConfig.DEFAULT_MCAST_ADDRESS : addr;
+        SocketAddress mcaddr = new InetSocketAddress(mcid, port);
-          packet.getData();  // make sure there's data, but no need to process it
+          packet.getData(); // make sure there's data, but no need to process it
-        }
-        catch (SocketTimeoutException ste) {
-          //System.out.println("socket read timed out");
+        } catch (SocketTimeoutException ste) {
+          // System.out.println("socket read timed out");
-        }
-        catch (Exception e) {
+        } catch (Exception e) {
-      }
-      catch (java.io.IOException ioe) {
+      } catch (java.io.IOException ioe) {
-          throw new RuntimeException(LocalizedStrings.AvailablePort_NETWORK_IS_UNREACHABLE.toLocalizedString(), ioe);
+          throw new RuntimeException(
+              LocalizedStrings.AvailablePort_NETWORK_IS_UNREACHABLE.toLocalizedString(), ioe);
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-      }
-      finally {
+      } finally {
-          }
-          catch (Exception e) {
+          } catch (Exception e) {
-      }  
+      }
-      throw new IllegalArgumentException(LocalizedStrings.AvailablePort_UNKNOWN_PROTOCOL_0.toLocalizedString(Integer.valueOf(protocol)));
+      throw new IllegalArgumentException(LocalizedStrings.AvailablePort_UNKNOWN_PROTOCOL_0
+          .toLocalizedString(Integer.valueOf(protocol)));
-      if(addr == null) {
+      if (addr == null) {
-      throw new IllegalArgumentException(LocalizedStrings.AvailablePort_UNKNOWN_PROTOCOL_0.toLocalizedString(Integer.valueOf(protocol)));
+      throw new IllegalArgumentException(LocalizedStrings.AvailablePort_UNKNOWN_PROTOCOL_0
+          .toLocalizedString(Integer.valueOf(protocol)));
+
-      //(new Exception("Opening server socket on " + port)).printStackTrace();
+      // (new Exception("Opening server socket on " + port)).printStackTrace();
-      }
-      else {
+      } else {
-    }
-    catch (java.io.IOException ioe) {
+    } catch (java.io.IOException ioe) {
-      //ioe.printStackTrace();
-      if(addr instanceof Inet6Address) {
+      // ioe.printStackTrace();
+      if (addr instanceof Inet6Address) {
-          //Hack, early Sun 1.5 versions (like Hitachi's JVM) cannot handle IPv6
-          //link local addresses. Cannot trust InetAddress.isLinkLocalAddress()
-          //see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6558853
-          //By returning true we ignore these interfaces and potentially say a 
-          //port is not in use when it really is.
+          // Hack, early Sun 1.5 versions (like Hitachi's JVM) cannot handle IPv6
+          // link local addresses. Cannot trust InetAddress.isLinkLocalAddress()
+          // see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6558853
+          // By returning true we ignore these interfaces and potentially say a
+          // port is not in use when it really is.
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
+   * 
+
-    //First check to see if we can bind to the wildcard address.
-    if(!testOneInterface(null, port)) {
+    // First check to see if we can bind to the wildcard address.
+    if (!testOneInterface(null, port)) {
-    
-    //Now check all of the addresses for all of the addresses
-    //on this system. On some systems (solaris, aix) binding
-    //to the wildcard address will successfully bind to only some
-    //of the interfaces if other interfaces are in use. We want to
-    //make sure this port is completely free.
+
+    // Now check all of the addresses for all of the addresses
+    // on this system. On some systems (solaris, aix) binding
+    // to the wildcard address will successfully bind to only some
+    // of the interfaces if other interfaces are in use. We want to
+    // make sure this port is completely free.
-    //Note that we still need the check of the wildcard address, above,
-    //because on some systems (aix) we can still bind to specific addresses
-    //if someone else has bound to the wildcard address.
+    // Note that we still need the check of the wildcard address, above,
+    // because on some systems (aix) we can still bind to specific addresses
+    // if someone else has bound to the wildcard address.
-    while(en.hasMoreElements()) {
+    while (en.hasMoreElements()) {
-      while(en2.hasMoreElements()) {
+      while (en2.hasMoreElements()) {
-        if(!available) {
+        if (!available) {
-   * Returns a randomly selected available port in the range 5001 to
-   * 32767.
+   * Returns a randomly selected available port in the range 5001 to 32767.
-   * @param protocol
-   *        The protocol to check (either {@link #SOCKET} or {@link
-   *        #MULTICAST}). 
+   * @param protocol The protocol to check (either {@link #SOCKET} or {@link #MULTICAST}).
-   * @throws IllegalArgumentException
-   *         <code>protocol</code> is unknown
+   * @throws IllegalArgumentException <code>protocol</code> is unknown
+
-  
+
-   * @param protocol
-   *        The protocol to check (either {@link #SOCKET} or {@link
-   *        #MULTICAST}). 
+   * @param protocol The protocol to check (either {@link #SOCKET} or {@link #MULTICAST}).
-   * @throws IllegalArgumentException
-   *         <code>protocol</code> is unknown
+   * @throws IllegalArgumentException <code>protocol</code> is unknown
-  }  
-  
-  /**
-   * Returns a randomly selected available port in the range 5001 to
-   * 32767 that satisfies a modulus
-   *
-   * @param protocol
-   *        The protocol to check (either {@link #SOCKET} or {@link
-   *        #MULTICAST}). 
-   *
-   * @throws IllegalArgumentException
-   *         <code>protocol</code> is unknown
-   */
-  public static int getRandomAvailablePortWithMod(int protocol,int mod) {
-    return getRandomAvailablePortWithMod(protocol, getAddress(protocol),mod);
-  
-  
+
-   * Returns a randomly selected available port in the range 5001 to
-   * 32767.
+   * Returns a randomly selected available port in the range 5001 to 32767 that satisfies a modulus
-   * @param protocol
-   *        The protocol to check (either {@link #SOCKET} or {@link
-   *        #MULTICAST}). 
+   * @param protocol The protocol to check (either {@link #SOCKET} or {@link #MULTICAST}).
+   *
+   * @throws IllegalArgumentException <code>protocol</code> is unknown
+   */
+  public static int getRandomAvailablePortWithMod(int protocol, int mod) {
+    return getRandomAvailablePortWithMod(protocol, getAddress(protocol), mod);
+  }
+
+
+  /**
+   * Returns a randomly selected available port in the range 5001 to 32767.
+   *
+   * @param protocol The protocol to check (either {@link #SOCKET} or {@link #MULTICAST}).
-   * @throws IllegalArgumentException
-   *         <code>protocol</code> is unknown
+   * @throws IllegalArgumentException <code>protocol</code> is unknown
-   * Returns a randomly selected available port in the range 5001 to
-   * 32767.
+   * Returns a randomly selected available port in the range 5001 to 32767.
-   * @param protocol
-   *        The protocol to check (either {@link #SOCKET} or {@link
-   *        #MULTICAST}). 
+   * @param protocol The protocol to check (either {@link #SOCKET} or {@link #MULTICAST}).
-   * @throws IllegalArgumentException
-   *         <code>protocol</code> is unknown
+   * @throws IllegalArgumentException <code>protocol</code> is unknown
-  public static int getRandomAvailablePort(int protocol, InetAddress addr, boolean useMembershipPortRange) {
+  public static int getRandomAvailablePort(int protocol, InetAddress addr,
+      boolean useMembershipPortRange) {
-        if ( !(protocol == MULTICAST && port == DistributionConfig.DEFAULT_MCAST_PORT) ){
+        if (!(protocol == MULTICAST && port == DistributionConfig.DEFAULT_MCAST_PORT)) {
+
-  
-  public static Keeper getRandomAvailablePortKeeper(int protocol, InetAddress addr, boolean useMembershipPortRange) {
+
+  public static Keeper getRandomAvailablePortKeeper(int protocol, InetAddress addr,
+      boolean useMembershipPortRange) {
-   * @param protocol
-   *        The protocol to check (either {@link #SOCKET} or {@link
-   *        #MULTICAST}). 
+   * @param protocol The protocol to check (either {@link #SOCKET} or {@link #MULTICAST}).
-   * @throws IllegalArgumentException
-   *         <code>protocol</code> is unknown
+   * @throws IllegalArgumentException <code>protocol</code> is unknown
-  public static int getAvailablePortInRange(int protocol, InetAddress addr,
-      int rangeBase, int rangeTop) {
+  public static int getAvailablePortInRange(int protocol, InetAddress addr, int rangeBase,
+      int rangeTop) {
-   * Returns a randomly selected available port in the range 5001 to
-   * 32767 that satisfies a modulus and the provided protocol
+   * Returns a randomly selected available port in the range 5001 to 32767 that satisfies a modulus
+   * and the provided protocol
-   * @param protocol
-   *        The protocol to check (either {@link #SOCKET} or {@link
-   *        #MULTICAST}). 
+   * @param protocol The protocol to check (either {@link #SOCKET} or {@link #MULTICAST}).
-   * @throws IllegalArgumentException
-   *         <code>protocol</code> is unknown
+   * @throws IllegalArgumentException <code>protocol</code> is unknown
-  public static int getRandomAvailablePortWithMod(int protocol, InetAddress addr,int mod) {
+  public static int getRandomAvailablePortWithMod(int protocol, InetAddress addr, int mod) {
-      if (isPortAvailable(port, protocol, addr) && (port % mod)==0) {
+      if (isPortAvailable(port, protocol, addr) && (port % mod) == 0) {
-  
+
-  
+
-  
+
-    if ( !useMembershipPortRange ) {
+    if (!useMembershipPortRange) {
-    return rand.nextInt(rangeTop-rangeBase) + rangeBase;
+    return rand.nextInt(rangeTop - rangeBase) + rangeBase;
-    return rand.nextInt(rangeTop-rangeBase) + rangeBase;
+    return rand.nextInt(rangeTop - rangeBase) + rangeBase;
-  
+
-    //do "5 times the numberOfPorts" iterations to select a port number. This will ensure that 
-    //each of the ports from given port range get a chance at least once
+    // do "5 times the numberOfPorts" iterations to select a port number. This will ensure that
+    // each of the ports from given port range get a chance at least once
-      int port = rand.nextInt(numberOfPorts + 1) + rangeBase;//add 1 to numberOfPorts so that rangeTop also gets included
+      int port = rand.nextInt(numberOfPorts + 1) + rangeBase;// add 1 to numberOfPorts so that
+                                                             // rangeTop also gets included
-  
+
-   * This class will keep an allocated port allocated until it is used.
-   * This makes the window smaller that can cause bug 46690
+   * This class will keep an allocated port allocated until it is used. This makes the window
+   * smaller that can cause bug 46690
+
-    
+
-    
+
-  ///////////////////////  Main Program  ///////////////////////
+  /////////////////////// Main Program ///////////////////////
-    err.println(LocalizedStrings.AvailablePort_THIS_PROGRAM_EITHER_PRINTS_WHETHER_OR_NOT_A_PORT_IS_AVAILABLE_FOR_A_GIVEN_PROTOCOL_OR_IT_PRINTS_OUT_AN_AVAILABLE_PORT_FOR_A_GIVEN_PROTOCOL.toLocalizedString());
+    err.println(
+        LocalizedStrings.AvailablePort_THIS_PROGRAM_EITHER_PRINTS_WHETHER_OR_NOT_A_PORT_IS_AVAILABLE_FOR_A_GIVEN_PROTOCOL_OR_IT_PRINTS_OUT_AN_AVAILABLE_PORT_FOR_A_GIVEN_PROTOCOL
+            .toLocalizedString());
-      }
-      else if (args[i].equals("addr")) {
+      } else if (args[i].equals("addr")) {
-      }
-      else if (portString == null) {
+      } else if (portString == null) {
-      }
-      else {
+      } else {
-    } else if (protocolString.equalsIgnoreCase("javagroups") ||
-      protocolString.equalsIgnoreCase("jgroups")) {
+    } else if (protocolString.equalsIgnoreCase("javagroups")
+        || protocolString.equalsIgnoreCase("jgroups")) {
-    
+
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-      out.println("\nPort " + port + " is " +
-                  (isPortAvailable(port, protocol, addr) ? "" : "not ") + 
-                  "available for a " + protocolString +
-                  " connection\n");
+      out.println("\nPort " + port + " is " + (isPortAvailable(port, protocol, addr) ? "" : "not ")
+          + "available for a " + protocolString + " connection\n");
-                  + getRandomAvailablePort(protocol, addr) + "\n");
+          + getRandomAvailablePort(protocol, addr) + "\n");

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66