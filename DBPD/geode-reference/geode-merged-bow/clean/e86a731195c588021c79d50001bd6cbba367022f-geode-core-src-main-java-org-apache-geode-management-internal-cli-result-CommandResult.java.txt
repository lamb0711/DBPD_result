Merge branch 'release/1.3.0'

+import java.nio.file.Path;
-// Should this have info about the command String??
+
+  public Path getFileToDownload() {
+    return fileToDownload;
+  }
+
+  private Path fileToDownload;
+
-    this.resultLines = new Vector<String>();
+    this.resultLines = new Vector<>();
+  }
+
+  public CommandResult(Path fileToDownload) {
+    this(new InfoResultData(fileToDownload.toString()));
+    this.fileToDownload = fileToDownload.toAbsolutePath();
+  }
+
+  public boolean hasFileToDownload() {
+    return fileToDownload != null;
-  // TODO -Abhishek - extract this code out in a FormatBuilder or PresentationBuilder??
-            // resultTable.setColumnSeparator(" | ");
-      // TODO - Abhishek. Add stack trace when 'debug' is enabled. Log to LogWrapper always
-  /* private */ void buildObjectResultOutput() {
+  void buildObjectResultOutput() {
-      } /*
-         * else { // GfJsonObject jsonObject =
-         * content.getJSONObject(ObjectResultData.ROOT_OBJECT_ACCESSOR); //
-         * buildObjectSection(resultTable, null, jsonObject, 0); }
-         */
-
+      }
-      // TODO - Abhishek. Add stack trace when 'debug' is enabled. Log to LogWrapper always
-    RowGroup rowGroup = null;
+    RowGroup rowGroup;
-      GfJsonArray jsonArray = object.getJSONArray(CliJsonSerializable.FIELDS_TO_SKIP_ON_UI);;
-      fieldsToSkipOnUI = new ArrayList<String>();
+      GfJsonArray jsonArray = object.getJSONArray(CliJsonSerializable.FIELDS_TO_SKIP_ON_UI);
+      fieldsToSkipOnUI = new ArrayList<>();
-      } catch (GfJsonException e) {
-        /* next check if it's a nested object */}
+      } catch (GfJsonException ignored) {
+      }
-      /* if (nestedCollection != null) */ {
-        for (int i = 0; i < depth; i++) {
-          prefix += " . ";
-        }
+      for (int i = 0; i < depth; i++) {
+        prefix += " . ";
-        Map<String, Integer> columnsMap = new HashMap<String, Integer>();
+        Map<String, Integer> columnsMap = new HashMap<>();
-        GfJsonArray rowsArray = nestedCollection;
-        int numOfRows = rowsArray.size();
+        int numOfRows = nestedCollection.size();
-          GfJsonObject content = rowsArray.getJSONObject(j);
+          GfJsonObject content = nestedCollection.getJSONObject(j);
-            tableFieldsToSkipOnUI = new ArrayList<String>();
+            tableFieldsToSkipOnUI = new ArrayList<>();
-                // skip file data if any //TODO - make response format better
+                // skip file data if any
-              // skip file data if any //TODO - make response format better
+              // skip file data if any
-        // Row newRow = rowGroup.newRow();
-        // String prefix = "";
-        // for (int i = 0; i < depth; i++) {
-        // prefix += " . ";
-        // }
-        // newRow.newLeftCol(prefix+fieldDisplayNames.getString(key)).newLeftCol(field);
-        Object value = field;
-        /*
-         * if (isPrimitiveOrStringOrWrapperArray(value)) { value = Arrays.toString((String[])value);
-         * }
-         */
-        newRow.newLeftCol(value);
+        newRow.newLeftCol(field);
-      } catch (GfJsonException e) {
+      } catch (GfJsonException ignored) {
-  /* private */ void buildComposite() {
+  void buildComposite() {
-    RowGroup rowGroup = null;
+    RowGroup rowGroup;
-      // System.out.println(key +" : " + object);
-        continue;
-        // System.out.println(key+" : "+object);
-  // public static void main(String[] args) {
-  // String[] valuesSeparatedByLines = getValuesSeparatedByLines(CliConstants.LINE_SEPARATOR);
-  // System.out.println(valuesSeparatedByLines +" -- "+valuesSeparatedByLines.length);
-  // }
-
-    String[] values = null;
-    values = valueString.split(GfshParser.LINE_SEPARATOR);
-    return values;
+    return valueString.split(GfshParser.LINE_SEPARATOR);
-        // skip file data if any //TODO - make response format better
+        // skip file data if any
-      headerRow.newCenterCol((String) object);
+      headerRow.newCenterCol(object);
-        // skip file data if any //TODO - make response format better
+        // skip file data if any
-        throw new RuntimeException("No associated files to save .. "); // TODO Abhishek - add i18n
-                                                                       // string
+        throw new RuntimeException("No associated files to save .. ");
-    } catch (DataFormatException e) {
-      throw new RuntimeException(e);
-    } catch (GfJsonException e) {
+    } catch (DataFormatException | GfJsonException e) {
-  public GfJsonObject getContent() throws GfJsonException {
+  public GfJsonObject getContent() {
-  // public String getContentStr() {
-  // return gfJsonObject.getString(ResultData.RESULT_CONTENT);
-  // }
-
+  public void setFileToDownload(Path fileToDownload) {
+    this.fileToDownload = fileToDownload;
+  }

INS26 INS40 INS31 INS23 INS31 INS31 INS31 INS83 INS43 INS42 INS8 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS41 INS42 INS42 INS43 INS42 INS17 INS21 INS41 INS43 INS42 INS21 INS42 INS42 INS14 INS7 INS27 MOV32 INS42 INS7 INS43 INS32 INS22 INS32 INS42 INS33 MOV24 INS22 INS42 UPD74 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS84 INS52 INS42 INS42 MOV43 MOV43 UPD74 UPD42 UPD74 UPD42 UPD42 UPD42 UPD74 UPD42 DEL42 DEL43 DEL33 DEL20 DEL42 DEL43 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL33 DEL18 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL11 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12