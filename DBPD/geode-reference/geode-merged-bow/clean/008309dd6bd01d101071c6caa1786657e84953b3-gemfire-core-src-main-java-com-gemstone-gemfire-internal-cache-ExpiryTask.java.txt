Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import com.gemstone.gemfire.cache.util.BridgeWriterException;
+import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
-  long getExpirationTime() throws EntryNotFoundException {
+  public long getExpirationTime() throws EntryNotFoundException {
-  protected final long getTTLExpirationTime() throws EntryNotFoundException {
+  public final long getTTLExpirationTime() throws EntryNotFoundException {
-  protected final long getIdleExpirationTime() throws EntryNotFoundException {
+  public final long getIdleExpirationTime() throws EntryNotFoundException {
-    waitOnExpirationSuspension();
-    return expire(action, isPending);
+    boolean result = expire(action, isPending);
+    if (result && expiryTaskListener != null) {
+      expiryTaskListener.afterExpire(this);
+    }
+    return result;
+      waitOnExpirationSuspension();
-
-      // @todo grid: do we need to deal with pool exceptions here?
-     } catch (BridgeWriterException ex) {
-       // Some exceptions from the bridge writer should not be logged.
-       Throwable cause = ex.getCause();
-       // BridgeWriterExceptions from the server are wrapped in CacheWriterExceptions
-       if (cause != null && cause instanceof CacheWriterException)
-           cause = cause.getCause();
-       if (cause instanceof RegionDestroyedException ||
-           cause instanceof EntryNotFoundException ||
-           cause instanceof CancelException) {
-         if (logger.isDebugEnabled()) {
-           logger.debug("Exception in expiration task", ex);
-         }
-       } else {
-         logger.fatal(LocalizedMessage.create(LocalizedStrings.ExpiryTask_EXCEPTION_IN_EXPIRATION_TASK), ex);
-       }
+    } finally {
+      if (expiryTaskListener != null) {
+        expiryTaskListener.afterTaskRan(this);
+      }
-      ("[now:" + System.currentTimeMillis() + "]");
+      ("[now:" + calculateNow() + "]");
+    now.set(calculateNow());
+  }
+  
+  private static long calculateNow() {
-      // Do not use cache.cacheTimeMillis here.
-      // Since expiration uses the System timer we need to use its clock.
-      now.set(System.currentTimeMillis());
+      // Use cache.cacheTimeMillis here. See bug 52267.
+      InternalDistributedSystem ids = cache.getDistributedSystem();
+      if (ids != null) {
+        return ids.getClock().cacheTimeMillis();
+      }
+    return 0L;
-      // Do not use cache.cacheTimeMillis here.
-      // Since expiration uses the System timer we need to use its clock.
-      result = System.currentTimeMillis();
+      result = calculateNow();
+  // Should only be set by unit tests
+  public static ExpiryTaskListener expiryTaskListener;
+  
+  /**
+   * Used by tests to determine if events related
+   * to an ExpiryTask have happened.
+   */
+  public interface ExpiryTaskListener {
+    /**
+     * Called after the given expiry task has run.
+     * This means that the time it was originally
+     * scheduled to run has elapsed and the scheduler
+     * has run the task. While running the task it
+     * may decide to expire it or reschedule it.
+     */
+    public void afterTaskRan(ExpiryTask et);
+    /**
+     * Called after the given expiry task has been
+     * rescheduled. afterTaskRan can still be called
+     * on the same task.
+     * In some cases a task is rescheduled without expiring it.
+     * In others it is expired and rescheduled.
+     */
+    public void afterReschedule(ExpiryTask et);
+    /**
+     * Called after the given expiry task has expired.
+     */
+    public void afterExpire(ExpiryTask et);
+    
+  }

UPD40 INS31 INS23 INS55 INS83 UPD83 UPD83 INS8 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS43 INS59 INS29 INS83 INS42 INS31 INS31 INS31 INS60 INS25 MOV21 MOV60 INS25 INS41 INS42 INS42 INS65 INS29 INS83 INS39 INS42 INS44 INS29 INS83 INS39 INS42 INS44 INS29 INS83 INS39 INS42 INS44 INS39 INS59 INS27 INS8 INS42 INS8 MOV27 INS8 INS34 INS66 INS66 INS65 INS43 INS42 INS65 INS43 INS42 INS65 INS43 INS42 INS42 MOV32 INS42 INS27 INS21 MOV21 INS25 INS60 INS25 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS33 INS32 INS27 MOV8 UPD42 INS43 INS59 INS27 INS8 INS42 INS42 INS52 UPD42 MOV42 MOV33 INS42 INS42 INS32 INS42 INS33 INS41 UPD42 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS52 INS32 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL27 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL45 DEL42 DEL42 DEL42 DEL8 DEL25 DEL8 DEL42