GEODE-5971: delete LegacyCommandResult and rename ModelResultModel toâ€¦ (#3497)



+
-import java.io.IOException;
-import java.nio.file.Path;
+import static org.apache.commons.lang3.SystemUtils.LINE_SEPARATOR;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.LinkedHashMap;
+import org.apache.geode.annotations.Immutable;
+import org.apache.geode.annotations.VisibleForTesting;
-import org.apache.geode.management.internal.cli.json.GfJsonObject;
+import org.apache.geode.management.internal.cli.GfshParser;
+import org.apache.geode.management.internal.cli.result.model.AbstractResultModel;
+import org.apache.geode.management.internal.cli.result.model.DataResultModel;
+import org.apache.geode.management.internal.cli.result.model.InfoResultModel;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
+import org.apache.geode.management.internal.cli.result.model.TabularResultModel;
-public interface CommandResult extends Result {
+public class CommandResult implements Result {
+  private ResultModel result;
+  private List<String> commandOutput;
+  private int commandOutputIndex;
+  @Immutable
+  private static final Map<String, List<String>> EMPTY_TABLE_MAP =
+      Collections.unmodifiableMap(new LinkedHashMap<>());
+  @Immutable
+  private static final List<String> EMPTY_LIST = Collections.emptyList();
-  Path getFileToDownload();
-
-  boolean hasFileToDownload();
-
-  @Override
-  Status getStatus();
-
-  void setStatus(Status status);
-
-  Object getResultData();
-
-  @Override
-  void resetToFirstLine();
-
-  @Override
-  boolean hasIncomingFiles();
-
-  int getNumTimesSaved();
-
-  @Override
-  void saveIncomingFiles(String directory) throws IOException;
-
-  @Override
-  boolean hasNextLine();
-
-  @Override
-  String nextLine();
-
-  String toJson();
-
-  String getType();
-
-  String getHeader();
-
-  String getHeader(GfJsonObject gfJsonObject);
-
-  GfJsonObject getContent();
-
-  String getMessageFromContent();
-
-  default String getErrorMessage() {
-    throw new UnsupportedOperationException("This should never be called from LegacyCommandResult");
+  public CommandResult(ResultModel result) {
+    this.result = result;
-  String getValueFromContent(String key);
-
-  List<String> getListFromContent(String key);
-
-  default List<String> getColumnFromTableContent(String column, String sectionId, String tableId) {
-    throw new UnsupportedOperationException("This should never be called from ModelCommandResult");
+  public ResultModel getResultData() {
+    return result;
-  default List<String> getColumnFromTableContent(String column, String tableId) {
-    throw new UnsupportedOperationException("This should never be called from LegacyCommandResult");
-  }
-
-  default Map<String, List<String>> getMapFromTableContent(String sectionId, String tableId) {
-    throw new UnsupportedOperationException("This should never be called from ModelCommandResult");
-  }
-
-  default Map<String, List<String>> getMapFromTableContent(String tableId) {
-    throw new UnsupportedOperationException("This should never be called from LegacyCommandResult");
-  }
-
-  Map<String, String> getMapFromSection(String sectionID);
-
-  String getFooter();
-
-  boolean equals(Object obj);
-
-  int hashCode();
-
-  String toString();
-
-  boolean failedToPersist();
+  public Status getStatus() {
+    return result.getStatus();
+  }
-  void setCommandPersisted(boolean commandPersisted);
+  public void resetToFirstLine() {
+    commandOutputIndex = 0;
+  }
-  void setFileToDownload(Path fileToDownload);
+  @Override
+  public boolean hasNextLine() {
+    if (commandOutput == null) {
+      buildCommandOutput();
+    }
+    return commandOutputIndex < commandOutput.size();
+  }
-  List<String> getTableColumnValues(String columnName);
+  @Override
+  public String nextLine() {
+    if (commandOutput == null) {
+      buildCommandOutput();
+    }
+    return commandOutput.get(commandOutputIndex++);
+  }
-  default List<String> getTableColumnValues(String sectionId, String columnName) {
-    throw new UnsupportedOperationException("This should never be called from LegacyCommandResult");
+  private void buildCommandOutput() {
+    commandOutputIndex = 0;
+    commandOutput = new ArrayList<>();
+    TableBuilder.Table resultTable = TableBuilder.newTable();
+
+    addSpacedRowInTable(resultTable, result.getHeader());
+
+    int index = 0;
+    int sectionSize = result.getContent().size();
+    for (AbstractResultModel section : result.getContent().values()) {
+      index++;
+      if (section instanceof DataResultModel) {
+        buildData(resultTable, (DataResultModel) section);
+      } else if (section instanceof TabularResultModel) {
+        buildTabularCommandOutput(resultTable, (TabularResultModel) section);
+      } else if (section instanceof InfoResultModel) {
+        buildInfoOrErrorCommandOutput(resultTable, (InfoResultModel) section);
+      } else {
+        throw new IllegalArgumentException(
+            "Unable to process output for " + section.getClass().getName());
+      }
+      // only add the spacer in between the sections.
+      if (index < sectionSize) {
+        addSpacedRowInTable(resultTable, LINE_SEPARATOR);
+      }
+    }
+
+    addSpacedRowInTable(resultTable, result.getFooter());
+
+    commandOutput.addAll(resultTable.buildTableList());
+  }
+
+  @VisibleForTesting
+  public Map<String, String> getMapFromSection(String sectionID) {
+    return result.getDataSection(sectionID).getContent();
+  }
+
+  @VisibleForTesting
+  public List<String> getTableColumnValues(String columnName) {
+    List<TabularResultModel> tables = result.getTableSections();
+    if (tables.size() == 0) {
+      return EMPTY_LIST;
+    }
+
+    return tables.get(0).getContent().get(columnName);
+  }
+
+  @VisibleForTesting
+  public Map<String, List<String>> getMapFromTableContent(String tableId) {
+    TabularResultModel table = result.getTableSection(tableId);
+    if (table == null) {
+      return EMPTY_TABLE_MAP;
+    }
+
+    return table.getContent();
+  }
+
+  @VisibleForTesting
+  public List<String> getColumnFromTableContent(String column, String tableId) {
+    TabularResultModel table = result.getTableSection(tableId);
+    if (table == null) {
+      return EMPTY_LIST;
+    }
+
+    return table.getContent().get(column);
+  }
+
+  @VisibleForTesting
+  public List<String> getCommandOutput() {
+    return commandOutput;
+  }
+
+  private void addSpacedRowInTable(TableBuilder.Table resultTable, String row) {
+    if (row != null && !row.isEmpty()) {
+      resultTable.newRow().newLeftCol(row);
+      resultTable.newRow().newLeftCol("");
+    }
+  }
+
+  private void addRowInRowGroup(TableBuilder.RowGroup rowGroup, String row) {
+    if (row != null && !row.isEmpty()) {
+      rowGroup.newRow().newLeftCol(row);
+    }
+  }
+
+  public String getType() {
+    return "model";
+  }
+
+  private void buildTabularCommandOutput(TableBuilder.Table resultTable, TabularResultModel model) {
+    addSpacedRowInTable(resultTable, model.getHeader());
+
+    resultTable.setColumnSeparator("   ");
+    resultTable.setTabularResult(true);
+
+    TableBuilder.RowGroup rowGroup = resultTable.newRowGroup();
+    buildTable(rowGroup, model);
+
+    addSpacedRowInTable(resultTable, model.getFooter());
+  }
+
+  private void buildTable(TableBuilder.RowGroup rowGroup, TabularResultModel model) {
+    TableBuilder.Row headerRow = rowGroup.newRow();
+    rowGroup.setColumnSeparator(" | ");
+    rowGroup.newRowSeparator('-', false);
+
+    Map<String, List<String>> rows = model.getContent();
+    if (!rows.isEmpty()) {
+      // build table header first
+      rows.keySet().forEach(c -> headerRow.newCenterCol(c));
+
+      // each row should have the same number of entries, so just look at the first one
+      int rowCount = rows.values().iterator().next().size();
+      for (int i = 0; i < rowCount; i++) {
+        TableBuilder.Row oneRow = rowGroup.newRow();
+        for (String column : rows.keySet()) {
+          oneRow.newLeftCol(rows.get(column).get(i));
+        }
+      }
+    }
+  }
+
+  private void buildData(TableBuilder.Table resultTable, DataResultModel section) {
+    TableBuilder.RowGroup rowGroup = resultTable.newRowGroup();
+    rowGroup.setColumnSeparator(" : ");
+
+    addRowInRowGroup(rowGroup, section.getHeader());
+
+    // finally process map values
+    for (Map.Entry<String, String> entry : section.getContent().entrySet()) {
+      TableBuilder.Row newRow = rowGroup.newRow();
+      String key = entry.getKey();
+      String value = entry.getValue();
+      String[] values = entry.getValue().split(GfshParser.LINE_SEPARATOR);
+      if (values.length == 1) {
+        newRow.newLeftCol(key).newLeftCol(values[0]);
+      } else {
+        if (values.length != 0) { // possible when object == CliConstants.LINE_SEPARATOR
+          newRow.newLeftCol(key).newLeftCol(values[0]);
+          for (int i = 1; i < values.length; i++) {
+            newRow = rowGroup.newRow();
+            newRow.setColumnSeparator("   ");
+            newRow.newLeftCol("").newLeftCol(values[i]);
+          }
+        } else {
+          newRow.newLeftCol(key).newLeftCol("");
+        }
+      }
+    }
+    addRowInRowGroup(rowGroup, section.getFooter());
+  }
+
+  private void buildInfoOrErrorCommandOutput(TableBuilder.Table resultTable,
+      InfoResultModel model) {
+    TableBuilder.RowGroup rowGroup = resultTable.newRowGroup();
+
+    addRowInRowGroup(rowGroup, model.getHeader());
+
+    model.getContent().forEach(c -> rowGroup.newRow().newLeftCol(c));
+
+    addRowInRowGroup(rowGroup, model.getFooter());
+  }
+
+  public static CommandResult createInfo(String info) {
+    return new CommandResult(new ResultModel().createInfo(info));
+  }
+
+  public static CommandResult createError(String info) {
+    return new CommandResult(new ResultModel().createError(info));

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 UPD40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 MOV74 INS59 INS83 INS39 INS59 INS78 INS83 INS83 INS83 INS74 INS59 INS78 INS83 INS83 INS83 MOV74 INS59 INS83 UPD42 INS8 INS83 UPD43 INS8 MOV78 INS83 MOV43 INS42 INS8 MOV78 INS83 MOV39 MOV42 INS8 MOV78 INS83 MOV39 UPD42 MOV42 INS8 MOV78 INS83 MOV43 INS42 INS8 INS83 MOV39 INS42 INS8 INS78 INS83 INS8 INS78 INS83 MOV74 INS42 MOV44 INS8 INS78 UPD83 MOV74 UPD42 MOV44 INS8 INS78 UPD83 MOV74 MOV44 INS8 INS78 INS83 MOV74 INS42 INS8 UPD83 INS39 UPD42 MOV44 INS8 UPD83 INS39 UPD42 INS44 INS8 INS83 MOV43 UPD42 INS8 INS83 UPD39 UPD42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 MOV39 INS42 INS44 INS44 INS8 INS83 UPD42 INS44 INS8 INS83 INS83 INS43 INS42 MOV44 INS8 UPD83 INS83 INS43 INS42 MOV44 UPD42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS32 UPD43 UPD42 INS21 UPD42 INS41 INS41 INS21 INS25 INS41 INS25 INS41 INS21 INS21 INS60 INS21 INS60 INS60 INS70 INS21 INS21 INS42 INS41 INS42 INS60 INS25 INS41 INS42 INS60 INS25 INS41 INS42 INS60 INS25 INS41 INS42 INS41 INS43 UPD42 UPD42 INS25 UPD43 UPD42 MOV43 INS42 INS25 INS41 INS43 INS42 UPD43 UPD42 INS21 INS21 INS21 INS60 INS21 INS21 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS60 INS25 INS43 INS42 INS43 INS42 INS60 INS21 INS21 INS70 INS21 INS43 INS42 UPD43 UPD42 INS60 INS21 INS21 INS21 INS42 UPD42 INS41 INS42 UPD42 INS41 INS42 INS42 INS43 INS43 INS42 INS42 INS14 INS42 INS42 UPD42 INS7 INS42 INS32 INS7 INS27 INS8 INS27 INS27 INS8 INS32 INS7 INS7 INS43 INS59 INS32 INS39 INS59 INS39 INS59 INS44 INS32 INS8 INS32 INS32 INS32 INS74 INS59 INS27 INS8 INS32 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS27 INS8 INS32 INS42 INS40 INS27 INS8 INS40 INS27 INS8 INS45 INS40 UPD42 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS40 INS42 INS43 INS59 INS32 INS32 MOV74 INS59 INS38 INS8 INS40 INS42 INS43 INS59 INS32 INS32 INS44 INS32 INS8 INS32 INS40 UPD42 INS43 INS59 INS32 INS32 INS32 INS14 INS14 INS42 INS42 INS74 INS22 INS42 INS42 INS42 INS42 INS34 INS42 INS33 INS21 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS37 INS42 INS34 INS42 INS14 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS34 INS42 INS32 INS43 INS42 INS32 INS42 INS21 INS25 INS25 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS43 INS43 INS42 INS32 INS32 INS34 INS41 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS33 INS41 INS32 INS42 INS42 INS27 INS38 INS21 INS21 INS27 INS38 INS21 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS9 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS13 INS9 INS42 INS32 INS32 INS21 INS60 INS24 INS40 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS32 INS74 INS42 INS32 INS42 INS60 INS60 INS60 INS60 INS25 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS86 INS42 INS42 INS32 INS43 INS32 INS43 INS32 INS43 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS74 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS37 INS62 INS8 INS25 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS32 INS32 INS42 INS33 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS42 INS43 MOV43 MOV43 INS42 INS42 INS43 INS59 MOV43 INS59 MOV43 INS59 INS5 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS32 INS42 INS42 UPD42 MOV42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS21 INS62 INS8 INS25 INS42 INS42 INS21 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS86 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS70 INS40 INS40 INS42 INS32 INS42 INS32 INS42 INS32 MOV43 INS85 INS42 INS32 INS40 INS34 INS21 INS25 INS42 INS32 INS42 INS42 INS43 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS43 INS21 INS62 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS59 INS32 INS32 INS42 INS42 INS34 INS43 INS59 MOV44 INS32 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS32 INS27 INS8 INS8 INS42 INS42 INS42 UPD42 INS42 INS42 INS11 UPD42 MOV42 INS32 INS42 INS43 INS21 MOV53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS2 INS40 INS34 INS21 INS24 INS21 INS43 INS42 INS42 INS42 INS11 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 INS32 INS58 INS27 INS37 INS8 INS32 UPD42 MOV42 INS43 INS42 INS42 INS42 INS11 UPD43 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS2 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS21 INS32 INS42 INS45 UPD42 MOV42 INS43 INS42 UPD42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS34 INS7 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 DEL43 DEL42 DEL31 DEL39 DEL42 DEL31 DEL78 DEL42 DEL31 DEL39 DEL42 DEL78 DEL31 DEL42 DEL78 DEL31 DEL39 DEL42 DEL45 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31 DEL39 DEL42 DEL31 DEL42 DEL31 DEL43 DEL42 DEL31 DEL43 DEL42 DEL31 DEL43 DEL42 DEL31 DEL43 DEL42 DEL43 DEL42 DEL44 DEL31 DEL43 DEL42 DEL31 DEL42 DEL31 DEL83 DEL42 DEL8 DEL31 DEL42 DEL31 DEL42 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL39 DEL42 DEL31 DEL42 DEL31 DEL39 DEL42 DEL31 DEL42 DEL78 DEL42 DEL39 DEL42 DEL44 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL14 DEL53