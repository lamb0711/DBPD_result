Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
-  EntriesSet(LocalRegion region, boolean recursive, IteratorType viewType, boolean allowTombstones) {
+
+  EntriesSet(LocalRegion region, boolean recursive, IteratorType viewType,
+      boolean allowTombstones) {
-  
+
-    Object nextElem; 
+    Object nextElem;
-      }
-      else {
+      } else {
-      throw new UnsupportedOperationException(LocalizedStrings
-          .LocalRegion_THIS_ITERATOR_DOES_NOT_SUPPORT_MODIFICATION
+      throw new UnsupportedOperationException(
+          LocalizedStrings.LocalRegion_THIS_ITERATOR_DOES_NOT_SUPPORT_MODIFICATION
-              this.additionalKeysFromView.remove(((AbstractRegionEntry)currKey)
-                  .getKey());
-            }
-            else {
+              this.additionalKeysFromView.remove(((AbstractRegionEntry) currKey).getKey());
+            } else {
-            result = view.getKeyForIterator(this.keyInfo, this.currRgn,
-                rememberReads, allowTombstones);
+            result =
+                view.getKeyForIterator(this.keyInfo, this.currRgn, rememberReads, allowTombstones);
-          }
-          else if (iterType == IteratorType.ENTRIES) {
-            result = view.getEntryForIterator(this.keyInfo, this.currRgn,
-                rememberReads, allowTombstones);
+          } else if (iterType == IteratorType.ENTRIES) {
+            result = view.getEntryForIterator(this.keyInfo, this.currRgn, rememberReads,
+                allowTombstones);
-          }
-          else {
-            Region.Entry re = (Region.Entry) view.getEntryForIterator(this.keyInfo, currRgn, rememberReads, allowTombstones);
+          } else {
+            Region.Entry re = (Region.Entry) view.getEntryForIterator(this.keyInfo, currRgn,
+                rememberReads, allowTombstones);
-                if(keepSerialized){
-                  result = ((NonTXEntry)re).getRawValue(); // OFFHEAP: need to either copy into a cd or figure out when result will be released.
-                } else if (ignoreCopyOnReadForQuery){
-                  result = ((NonTXEntry)re).getValue(true);
+                if (keepSerialized) {
+                  result = ((NonTXEntry) re).getRawValue(); // OFFHEAP: need to either copy into a
+                                                            // cd or figure out when result will be
+                                                            // released.
+                } else if (ignoreCopyOnReadForQuery) {
+                  result = ((NonTXEntry) re).getValue(true);
-        }
-        else if (this.additionalKeysFromView != null) {
+        } else if (this.additionalKeysFromView != null) {
-        }
-        else if (this.regionsIndex < this.numSubRegions) {
+        } else if (this.regionsIndex < this.numSubRegions) {
-        }
-        else {
+        } else {
-      for (Iterator<Object> itr = new EntriesIterator(); itr.hasNext(); itr
-          .next()) {
+      for (Iterator<Object> itr = new EntriesIterator(); itr.hasNext(); itr.next()) {
-    }
-    else if (this.recursive) {
+    } else if (this.recursive) {
-    }
-    else {
+    } else {
-    }
-    else {
+    } else {
-  
-  
+
+
-  
+
-  
+
-  
+

