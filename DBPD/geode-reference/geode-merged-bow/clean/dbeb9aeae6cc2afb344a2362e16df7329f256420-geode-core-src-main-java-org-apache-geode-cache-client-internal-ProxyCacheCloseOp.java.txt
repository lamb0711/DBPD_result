Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    public ProxyCacheCloseOpImpl(ExecutablePool pool, Properties securityProps,
-        boolean keepAlive) {
+    public ProxyCacheCloseOpImpl(ExecutablePool pool, Properties securityProps, boolean keepAlive) {
-        throw new ServerConnectivityException(
-            "Connection error while authenticating user");
+        throw new ServerConnectivityException("Connection error while authenticating user");
-      hdos.writeLong((Long)userId);
+      hdos.writeLong((Long) userId);
-        secureBytes = ((ConnectionImpl)cnx).getHandShake().encryptBytes(
-            hdos.toByteArray());
+        secureBytes = ((ConnectionImpl) cnx).getHandShake().encryptBytes(hdos.toByteArray());
-      }
-      else if (msgType == MessageType.EXCEPTION) {
+      } else if (msgType == MessageType.EXCEPTION) {
-        throw new ServerOperationException(s, (Throwable)part.getObject());
+        throw new ServerOperationException(s, (Throwable) part.getObject());
-      }
-      else if (isErrorResponse(msgType)) {
+      } else if (isErrorResponse(msgType)) {
-      }
-      else {
-        throw new InternalGemFireError("Unexpected message type "
-            + MessageType.getString(msgType));
+      } else {
+        throw new InternalGemFireError("Unexpected message type " + MessageType.getString(msgType));

