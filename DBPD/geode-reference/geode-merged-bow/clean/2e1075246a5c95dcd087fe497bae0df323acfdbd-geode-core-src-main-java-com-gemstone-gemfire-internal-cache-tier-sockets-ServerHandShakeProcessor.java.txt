Merge branch 'release/1.0.0-incubating.M3'

+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+
+import org.apache.shiro.subject.Subject;
-import com.gemstone.gemfire.distributed.internal.DistributionConfig;
-import com.gemstone.gemfire.internal.SocketUtils;
- * @since 5.7
+ * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
-      //Hitesh:for older version we should set this 
+      //Hitesh:for older version we should set this
-       /* Principal principal = handshake.verifyCredentials();
-        connection.setPrincipal(principal);
-         if (principal != null) {
-          if (connection.getSecurityLogger().fineEnabled())
-            securityLogger.fine(connection.getName()
-                + ": successfully verified credentials for proxyID [" + proxyId
-                + "] having principal: " + principal.getName());
-        } else if (socket instanceof SSLSocket) {
-          // Test whether we are using SSL connection in mutual authentication
-          // mode and use its principal.
-          SSLSocket sslSocket = (SSLSocket) socket;
-          SSLSession sslSession = sslSocket.getSession();
-          if (!sslSession.getCipherSuite().equals("SSL_NULL_WITH_NULL_NULL")
-              && sslSocket.getNeedClientAuth()) {
-            try {
-              Certificate[] certs = sslSession.getPeerCertificates();
-              if (certs[0] instanceof X509Certificate) {
-                principal = ((X509Certificate) certs[0])
-                    .getSubjectX500Principal();
-                if (securityLogger.fineEnabled())
-                  securityLogger.fine(connection.getName()
-                      + ": successfully verified credentials for proxyID ["
-                      + proxyId
-                      + "] using SSL mutual authentication with principal: "
-                      + principal.getName());
-              } else {
-                if (securityLogger.warningEnabled())
-                  securityLogger.warning(
-                      LocalizedStrings.ServerHandShakeProcessor_0_UNEXPECTED_CERTIFICATE_TYPE_1_FOR_PROXYID_2,
-                      new Object[] {connection.getName(), certs[0].getType(), proxyId});
-              }
-            } catch (SSLPeerUnverifiedException ex) {
-              // this is the case where client has not verified itself
-              // i.e. not in mutual authentication mode
-              if (securityLogger.errorEnabled())
-                securityLogger.error(
-                    LocalizedStrings.ServerHandShakeProcessor_SSL_EXCEPTION_SHOULD_NOT_HAVE_HAPPENED,
-                    ex);
-              connection.setPrincipal(null);//TODO:hitesh ??
-            }
-          }
-        }
-        */
-
-      Principal principal = ((HandShake)connection.getHandshake()).verifyCredentials();
-      connection.setPrincipal(principal);//TODO:hitesh is this require now ???
-      return getUniqueId(connection, principal);
+      Object principal = ((HandShake)connection.getHandshake()).verifyCredentials();
+
+      long uniqueId;
+      if(principal instanceof Subject){
+        uniqueId = connection.getClientUserAuths(connection.getProxyID()).putSubject((Subject)principal);
+      }
+      else {
+        //this sets principal in map as well....
+        uniqueId = getUniqueId(connection, (Principal)principal);
+        connection.setPrincipal((Principal)principal);//TODO:hitesh is this require now ???
+      }
+      return uniqueId;
-          .getProperty(DistributionConfig.SECURITY_CLIENT_ACCESSOR_NAME);
+          .getProperty(SECURITY_CLIENT_ACCESSOR);
-          .getProperty(DistributionConfig.SECURITY_CLIENT_ACCESSOR_PP_NAME);
+          .getProperty(SECURITY_CLIENT_ACCESSOR_PP);
-                new Object[] {connection.getName(), DistributionConfig.SECURITY_CLIENT_AUTHENTICATOR_NAME, connection.getProxyID()});
+                new Object[] {connection.getName(), SECURITY_CLIENT_AUTHENTICATOR, connection.getProxyID()});
-              new Object[] {connection.getName(), DistributionConfig.SECURITY_CLIENT_AUTHENTICATOR_NAME});
+              new Object[] {connection.getName(), SECURITY_CLIENT_AUTHENTICATOR});
-      InputStream is = SocketUtils.getInputStream(socket);//socket.getInputStream();
+      InputStream is = socket.getInputStream();

MOV26 MOV26 UPD40 UPD40 UPD66 UPD66 INS60 INS25 INS41 INS43 INS39 INS59 INS62 INS8 INS8 INS42 MOV43 MOV43 INS42 INS42 INS42 INS43 MOV21 INS21 INS21 INS25 MOV25 INS42 INS7 INS7 INS32 INS42 INS42 MOV27 INS8 UPD42 INS42 INS32 INS42 INS32 INS42 INS42 INS11 INS25 INS32 INS42 INS11 MOV42 MOV42 INS11 INS43 INS42 MOV32 INS8 MOV42 INS42 INS32 INS43 INS42 MOV43 INS42 INS42 INS21 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS40 INS3 UPD40 MOV5 INS4 MOV32 INS42 MOV32 INS42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL40 DEL40 DEL40 DEL42 DEL42 DEL40 DEL40 DEL4 DEL3 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42