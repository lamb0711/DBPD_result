Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Sent to a locator to request it to find (and possibly start)
- * a jmx manager for us. It returns a JmxManagerLocatorResponse.
+ * Sent to a locator to request it to find (and possibly start) a jmx manager for us. It returns a
+ * JmxManagerLocatorResponse.
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  }
-  public void toData(DataOutput out) throws IOException {
-  }
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {}
+
+  public void toData(DataOutput out) throws IOException {}
-  
+
-   * Send a request to the specified locator asking it to find (and start if
-   * needed) a jmx manager. A jmx manager will only be started
+   * Send a request to the specified locator asking it to find (and start if needed) a jmx manager.
+   * A jmx manager will only be started
-   * @param locatorHost
-   *          the name of the host the locator is on
-   * @param locatorPort
-   *          the port the locator is listening on
-   * @param msTimeout
-   *          how long in milliseconds to wait for a response from the locator
-   * @param sslConfigProps
-   *          Map carrying SSL configuration that can be used by SocketCreator
+   * @param locatorHost the name of the host the locator is on
+   * @param locatorPort the port the locator is listening on
+   * @param msTimeout how long in milliseconds to wait for a response from the locator
+   * @param sslConfigProps Map carrying SSL configuration that can be used by SocketCreator
-   * @throws IOException
-   *           if we can not connect to the locator, timeout waiting for a
-   *           response, or have trouble communicating with it.
+   * @throws IOException if we can not connect to the locator, timeout waiting for a response, or
+   *         have trouble communicating with it.
-  public static JmxManagerLocatorResponse send(String locatorHost, int locatorPort, int msTimeout, Map<String, String> sslConfigProps)
-    throws IOException
-  {
+  public static JmxManagerLocatorResponse send(String locatorHost, int locatorPort, int msTimeout,
+      Map<String, String> sslConfigProps) throws IOException {
-      Object responseFromServer = client.requestToServer(networkAddress, locatorPort, SINGLETON, msTimeout);
+      Object responseFromServer =
+          client.requestToServer(networkAddress, locatorPort, SINGLETON, msTimeout);
-    }
-    catch (ClassNotFoundException unexpected) {
+    } catch (ClassNotFoundException unexpected) {
-    }
-    catch (ClassCastException unexpected) {
+    } catch (ClassCastException unexpected) {
-      // JmxManagerLocatorResponse when the Locator is using SSL & the request 
-      // didn't use SSL -> this causes ClassCastException. Not sure how to make 
+      // JmxManagerLocatorResponse when the Locator is using SSL & the request
+      // didn't use SSL -> this causes ClassCastException. Not sure how to make
-    }
-    finally {
+    } finally {
-  public static JmxManagerLocatorResponse send(String locatorHost, int locatorPort, int msTimeout) throws IOException {
+  public static JmxManagerLocatorResponse send(String locatorHost, int locatorPort, int msTimeout)
+      throws IOException {
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66