Merge branch 'develop' into feature/GEODE-53

-import com.gemstone.gemfire.distributed.internal.*;
-import com.gemstone.gemfire.internal.*;
-import com.gemstone.gemfire.internal.admin.*;
-import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Properties;
+import java.util.Set;
-import java.util.*;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.internal.Assert;
+import com.gemstone.gemfire.internal.admin.SSLConfig;
+import com.gemstone.gemfire.internal.admin.TransportConfig;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-  private final boolean mcastDiscovery;
+  private int vmKind = -1;
-  
-  public RemoteTransportConfig(int port) {
-    this(port, null);
-  }
-  
-  /**
-   * Constructs a simple transport config that specifies just a port.
-   * The port must be the one a DistributionLocator is listening
-   * to on the local host. 
-   */
-  public RemoteTransportConfig(int port, String bindAddress) {
-    if (bindAddress == null) {
-      this.bindAddress = DistributionConfig.DEFAULT_BIND_ADDRESS;
-    } else {
-      this.bindAddress = bindAddress;
-    }
-    this.sslConfig = new SSLConfig();
-    this.mcastEnabled = false;
-    this.mcastDiscovery = false;
-    this.tcpDisabled = false;
-    this.disableAutoReconnect = false;
-    this.mcastId = null;
-    this.ids = Collections.singleton(new DistributionLocatorId(port, bindAddress));
-    this.membershipPortRange = 
-       getMembershipPortRangeString(DistributionConfig.DEFAULT_MEMBERSHIP_PORT_RANGE);
-  }
-  public RemoteTransportConfig(DistributionConfig config) {
+  public RemoteTransportConfig(DistributionConfig config, int vmKind) {
+    this.vmKind = vmKind;
-      if (!this.mcastEnabled) {
-        // loner system
-        this.mcastDiscovery = false;
-        this.ids = Collections.EMPTY_SET;
-      }
-      else {
-        // multicast discovery
-        this.mcastDiscovery = true;
-        this.ids = Collections.singleton(this.mcastId);
-      }
+      // loner system
+      this.ids = Collections.EMPTY_SET;
-      // locator-based discovery
-      this.mcastDiscovery = false;
-
-    boolean isMcastDiscovery, 
-    int tcpPort)
+    int tcpPort, int vmKind)
-    this.mcastDiscovery = isMcastDiscovery;
+    this.vmKind = vmKind;
-  /**
-   * Returns true if config picked multicast.
-   * Returns false if config picked locators.
-   */
-  public boolean isMcastDiscovery() {
-    return this.mcastDiscovery;
-  }
+  public int getVmKind() {
+    return this.vmKind;
+  }
+  
-//System.out.println("RemoteTransportConfig.mcastEnabled=" + this.mcastEnabled);
-//System.out.println("RemoteTransportConfig.mcastDiscovery=" + this.mcastDiscovery);
-//Thread.currentThread().dumpStack();
-    if (!this.mcastDiscovery) {
-      // Create locator string
-      StringBuffer locators = new StringBuffer();
-      for (Iterator iter = this.ids.iterator(); iter.hasNext(); ) {
-        DistributionLocatorId locator =
+    // Create locator string
+    StringBuffer locators = new StringBuffer();
+    for (Iterator iter = this.ids.iterator(); iter.hasNext(); ) {
+      DistributionLocatorId locator =
-        if (!locator.isMcastId()) {
-          String baddr = locator.getBindAddress();
-          if (baddr != null && baddr.trim().length() > 0) {
-            locators.append(baddr);
-          }
-          else {
-            locators.append(locator.getHost().getCanonicalHostName());
-          }
-          locators.append("[");
-          locators.append(locator.getPort());
-          locators.append("]");
+      if (!locator.isMcastId()) {
+        String baddr = locator.getBindAddress();
+        if (baddr != null && baddr.trim().length() > 0) {
+          locators.append(baddr);
+        }
+        else {
+          locators.append(locator.getHost().getCanonicalHostName());
+        }
+        locators.append("[");
+        locators.append(locator.getPort());
+        locators.append("]");
-          if (iter.hasNext()) {
-            locators.append(",");
-          }
+        if (iter.hasNext()) {
+          locators.append(",");
-
-      props.setProperty(DistributionConfig.LOCATORS_NAME,
-                        locators.toString());
+
+    props.setProperty(DistributionConfig.LOCATORS_NAME,
+        locators.toString());
+
-        && (this.mcastDiscovery == other.mcastDiscovery)
-    return this.ids.hashCode() + (isMcastDiscovery() ? 1 : 0);
+    return this.ids.hashCode();

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 MOV44 UPD39 INS44 MOV21 INS39 INS42 MOV8 UPD42 INS38 INS39 INS42 INS21 UPD39 UPD42 INS41 MOV60 MOV21 MOV25 MOV25 MOV25 MOV21 MOV21 MOV21 MOV41 INS34 INS7 MOV8 INS22 MOV32 INS22 INS42 INS41 UPD42 MOV52 UPD42 MOV42 INS52 INS42 UPD42 DEL83 DEL83 DEL42 DEL39 DEL42 DEL44 DEL42 DEL33 DEL17 DEL8 DEL31 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL38 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL8 DEL25 DEL41 DEL8 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL43 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL22 DEL33 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL40 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL38 DEL25 DEL8 DEL52 DEL42 DEL22 DEL40 DEL27 DEL36 DEL42 DEL32 DEL34 DEL34 DEL16 DEL36 DEL27