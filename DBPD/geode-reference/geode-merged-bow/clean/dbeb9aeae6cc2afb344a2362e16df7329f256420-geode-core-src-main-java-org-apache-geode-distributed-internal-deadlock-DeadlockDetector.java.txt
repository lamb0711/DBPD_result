Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.ObjectStreamClass;
- * {@link #collectAllDependencies(Serializable)} will find all dependencies
- * between threads and locks in the current VM.
+ * {@link #collectAllDependencies(Serializable)} will find all dependencies between threads and
+ * locks in the current VM.
- * To use this class, collect dependencies in each VM you want to analyze, and
- * add them to an instance of a {@link DeadlockDetector} using the
- * {@link #addDependencies(Set)} method. The {@link #findDeadlock()} method will
- * analyze the dependencies to find any deadlocks.
+ * To use this class, collect dependencies in each VM you want to analyze, and add them to an
+ * instance of a {@link DeadlockDetector} using the {@link #addDependencies(Set)} method. The
+ * {@link #findDeadlock()} method will analyze the dependencies to find any deadlocks.
- * This class uses Java 1.6 management APIs on {@link ThreadMXBean}, so it will
- * not find any deadlocks in 1.5 VM. It also uses the
- * {@link DependencyMonitorManager} framework to collect dependencies that are
- * not reported by the VM - such as the association between message senders and
- * processors in different VMs.
+ * This class uses Java 1.6 management APIs on {@link ThreadMXBean}, so it will not find any
+ * deadlocks in 1.5 VM. It also uses the {@link DependencyMonitorManager} framework to collect
+ * dependencies that are not reported by the VM - such as the association between message senders
+ * and processors in different VMs.
- * This class also has a main() method that can read serialized DependencyGraphs
- * from multiple JVMs, merge them and perform various analysis on them.
+ * This class also has a main() method that can read serialized DependencyGraphs from multiple JVMs,
+ * merge them and perform various analysis on them.
-   * Add a set of dependencies to the dependency graph to
-   * be analyzed.
+   * Add a set of dependencies to the dependency graph to be analyzed.
-   * Finds the first deadlock in the list of dependencies, or null if there are
-   * no deadlocks in the set of dependencies.
+   * Finds the first deadlock in the list of dependencies, or null if there are no deadlocks in the
+   * set of dependencies.
-   * @return a linked list of dependencies which shows the circular
-   *         dependencies. The List will be of the form Dependency(A,B),
-   *         Dependency(B,C), Dependency(C, A).
+   * @return a linked list of dependencies which shows the circular dependencies. The List will be
+   *         of the form Dependency(A,B), Dependency(B,C), Dependency(C, A).
-   * Collect all of the dependencies that exist between threads in this VM,
-   * using java management beans and the {@link DependencyMonitor}.
+   * Collect all of the dependencies that exist between threads in this VM, using java management
+   * beans and the {@link DependencyMonitor}.
-   * @param locality a name tag to stick on entities to help associate them with
-   * this JVM and distinguish them from entities from other jvms
+   * @param locality a name tag to stick on entities to help associate them with this JVM and
+   *        distinguish them from entities from other jvms
-   * @return All of the dependencies between threads and locks or other resources
-   *         on this VM.
+   * @return All of the dependencies between threads and locks or other resources on this VM.
-        Dependency dependency = new Dependency(new LocalLockInfo(locality,
-            monitor), new LocalThread(locality, info));
+        Dependency dependency =
+            new Dependency(new LocalLockInfo(locality, monitor), new LocalThread(locality, info));
-        Dependency dependency = new Dependency(
-            new LocalLockInfo(locality, sync), new LocalThread(locality, info));
+        Dependency dependency =
+            new Dependency(new LocalLockInfo(locality, sync), new LocalThread(locality, info));
-    Set<Dependency> monitoredDependencies = collectFromDependencyMonitor(bean,
-        locality, threadInfos);
+    Set<Dependency> monitoredDependencies =
+        collectFromDependencyMonitor(bean, locality, threadInfos);
-  
+
-    
+
-    
+
-      
+
-      } else if (lastDepender.equals(depender)){
+      } else if (lastDepender.equals(depender)) {
-      
-      String also = seenDependers.contains(depender)? " also" : "";
+
+      String also = seenDependers.contains(depender) ? " also" : "";
-      
+
-        text.append(dependerString).append(" is").append(also).append(" waiting on ").append(dependsOn).append("\n");
+        text.append(dependerString).append(" is").append(also).append(" waiting on ")
+            .append(dependsOn).append("\n");
-        text.append(dependerString).append(" is").append(also).append(" waiting for ").append(dependsOn).append("\n");
+        text.append(dependerString).append(" is").append(also).append(" waiting for ")
+            .append(dependsOn).append("\n");
-      text.append(threadInfo.getLocatility())
-          .append(":")
-          .append(threadInfo.getThreadStack())
+      text.append(threadInfo.getLocatility()).append(":").append(threadInfo.getThreadStack())
-  
-  
+
+
-   * attempts to sort the given dependencies according to their contents
-   * so that dependents come after dependers.
-   * @param dependencies
-   * TODO this method needs more work
+   * attempts to sort the given dependencies according to their contents so that dependents come
+   * after dependers.
+   * 
+   * @param dependencies TODO this method needs more work
-    for (Dependency dep: dependencies) {
+    for (Dependency dep : dependencies) {
-      for (int i=0; i<result.size(); i++) {
+      for (int i = 0; i < result.size(); i++) {
-   * Get an object suitable for querying the findDependencies method for a given
-   * thread.
+   * Get an object suitable for querying the findDependencies method for a given thread.
-  public static ThreadReference getThreadReference(String locality,
-      Thread thread) {
+  public static ThreadReference getThreadReference(String locality, Thread thread) {
-  
-  private static Set<Dependency> collectFromDependencyMonitor(
-      ThreadMXBean bean, Serializable locality,
-      Map<Long, ThreadInfo> threadInfos) {
+
+  private static Set<Dependency> collectFromDependencyMonitor(ThreadMXBean bean,
+      Serializable locality, Map<Long, ThreadInfo> threadInfos) {
-    Set<Dependency<Serializable, Thread>> heldResources = DependencyMonitorManager
-        .getHeldResources();
+    Set<Dependency<Serializable, Thread>> heldResources =
+        DependencyMonitorManager.getHeldResources();
-      if(info != null) {
+      if (info != null) {
-    
-    Set<Dependency<Thread, Serializable>> blockedThreads = DependencyMonitorManager
-    .getBlockedThreads();
+
+    Set<Dependency<Thread, Serializable>> blockedThreads =
+        DependencyMonitorManager.getBlockedThreads();
-  
+
-    if (mainArgs.length < startingAt+1) {
+    if (mainArgs.length < startingAt + 1) {
-    
+
-    
-    for (int i=startingAt; i<mainArgs.length; i++) {
+
+    for (int i = startingAt; i < mainArgs.length; i++) {
-    
+
-  
+
-    ObjectInputStream ois = new ObjectInputStream(new BufferedInputStream(new FileInputStream(file)));
+    ObjectInputStream ois =
+        new DDObjectInputStream(new BufferedInputStream(new FileInputStream(file)));
-  
-  
+
+  private static class DDObjectInputStream extends ObjectInputStream {
+
+    /**
+     * Creates a new <code>DDObjectInputStream</code> that delegates its behavior to a given
+     * <code>InputStream</code>.
+     */
+    public DDObjectInputStream(InputStream stream) throws IOException {
+      super(stream);
+    }
+
+    @Override
+    protected Class resolveClass(ObjectStreamClass desc)
+        throws IOException, ClassNotFoundException {
+
+      String className = desc.getName();
+      if (className.startsWith("com.gemstone.gemfire")) {
+        className = "org.apache.geode" + className.substring("com.gemstone.gemfire".length());
+      }
+      try {
+        Class clazz = Class.forName(className);
+        return clazz;
+      } catch (ClassNotFoundException ex) {
+        return super.resolveClass(desc);
+      }
+    }
+  }
+
-    System.out.println("findImpasse - looks for either a deadlock or the longest call chain in the graph");
+    System.out.println(
+        "findImpasse - looks for either a deadlock or the longest call chain in the graph");
-    System.out.println("findObject - finds the given object (thread, lock, message) by name/partial name and finds all call chains leading to that object");
+    System.out.println(
+        "findObject - finds the given object (thread, lock, message) by name/partial name and finds all call chains leading to that object");
-    
+
-    case "print":
-      graph = loadGraphs(1, args);
-      System.out.println(prettyFormat(graph));
-      break;
-    case "findCycle":
-      graph = loadGraphs(1, args);
-      List<Dependency> cycle = graph.findCycle();
-      if (cycle == null) {
-        System.out.println("no deadlock found");
-      } else {
-        System.out.println("deadlocked threads: \n" + cycle);
-      }
-      break;
-    case "findImpasse":
-      graph = loadGraphs(1, args);
-      graph = graph.findLongestCallChain();
-      if (graph == null) {
-        System.out.println("no long call chain could be found!");
-      } else {
-        System.out.println("longest call chain: \n" + prettyFormat(graph));
-      }
-      break;
-    case "findObject":
-      graph = loadGraphs(2, args);
-      List<DependencyGraph> graphs = graph.findDependenciesWith(args[1]);
-      if (graphs.isEmpty()) {
-        System.out.println("thread not found! Try using the print command to see all threads and locate the name of the one you're interested in?");
-      } else {
-        int numGraphs = graphs.size();
-        int i=0;
-        System.out.println("findObject \"" + args[1]+"\"\n\n");
-        for (DependencyGraph g: graphs) {
-          i += 1;
-          System.out.println("graph " + i + " of " + numGraphs + ":");
-          System.out.println(prettyFormat(sortDependencies(g.getEdges())));
-          if (i < numGraphs) {
-            System.out.println("\n\n\n");
+      case "print":
+        graph = loadGraphs(1, args);
+        System.out.println(prettyFormat(graph));
+        break;
+      case "findCycle":
+        graph = loadGraphs(1, args);
+        List<Dependency> cycle = graph.findCycle();
+        if (cycle == null) {
+          System.out.println("no deadlock found");
+        } else {
+          System.out.println("deadlocked threads: \n" + cycle);
+        }
+        break;
+      case "findImpasse":
+        graph = loadGraphs(1, args);
+        graph = graph.findLongestCallChain();
+        if (graph == null) {
+          System.out.println("no long call chain could be found!");
+        } else {
+          System.out.println("longest call chain: \n" + prettyFormat(graph));
+        }
+        break;
+      case "findObject":
+        graph = loadGraphs(2, args);
+        List<DependencyGraph> graphs = graph.findDependenciesWith(args[1]);
+        if (graphs.isEmpty()) {
+          System.out.println(
+              "thread not found! Try using the print command to see all threads and locate the name of the one you're interested in?");
+        } else {
+          int numGraphs = graphs.size();
+          int i = 0;
+          System.out.println("findObject \"" + args[1] + "\"\n\n");
+          for (DependencyGraph g : graphs) {
+            i += 1;
+            System.out.println("graph " + i + " of " + numGraphs + ":");
+            System.out.println(prettyFormat(sortDependencies(g.getEdges())));
+            if (i < numGraphs) {
+              System.out.println("\n\n\n");
+            }
-      }
-      break;
-    default:
-      printHelp();
-      break;
+        break;
+      default:
+        printHelp();
+        break;
-    
+
-  
+

INS26 INS26 INS26 INS40 INS40 INS40 INS55 INS83 INS83 INS42 MOV43 INS31 INS31 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS29 INS83 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS44 INS43 INS43 INS8 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV43 INS65 INS43 INS42 INS42 INS46 INS42 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS54 INS66 INS66 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS8 INS12 INS43 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS60 INS41 INS44 INS8 INS42 INS42 INS42 INS7 INS43 INS59 INS42 INS43 INS42 INS41 INS42 INS27 INS42 INS42 INS32 INS42 INS48 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 DEL66 DEL66 DEL66 DEL66 DEL66