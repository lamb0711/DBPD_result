GEODE-4961: Allowing custom serialization formats with the protobuf protocol

Adding a new ValueSerializer interface that users can implement to
control the serialization format of data sent using the protobuf
protocol.

ValueSerializers are registered on the server side using the java
ServiceLoader mechanism. They are selected by the client using a new
valueFormat field in the handshake.

Renamed AuthenticationRequest to HandshakeRequest. Credentials
and valueFormat are all sent as part of a single HandshakeRequest.

Renamed the connection states to make them a little easier to
understand, and removed some duplicate states.

The new states are RequireVersion, RequireAuthentication,
AcceptMessages, InvalidSecurity, and TerminateConnection



+import java.util.Properties;
+
-import org.apache.geode.internal.protocol.protobuf.v1.authentication.Authorizer;
-import org.apache.geode.internal.protocol.protobuf.v1.state.ProtobufConnectionStateProcessor;
+import org.apache.geode.internal.protocol.protobuf.v1.state.ConnectionState;
+import org.apache.geode.internal.protocol.protobuf.v1.state.RequireVersion;
+import org.apache.geode.internal.protocol.serialization.NoOpCustomValueSerializer;
+import org.apache.geode.internal.security.SecurityService;
+import org.apache.geode.protocol.serialization.ValueSerializer;
-  protected ProtobufConnectionStateProcessor protobufConnectionStateProcessor;
+  protected final SecurityService securityService;
+  protected ConnectionState connectionState;
+  public ProtobufSerializationService serializationService =
+      new ProtobufSerializationService(new NoOpCustomValueSerializer());
-  public MessageExecutionContext(ClientStatistics statistics,
-      ProtobufConnectionStateProcessor protobufConnectionStateProcessor) {
+  public MessageExecutionContext(ClientStatistics statistics, SecurityService securityService) {
+    this.securityService = securityService;
-    this.protobufConnectionStateProcessor = protobufConnectionStateProcessor;
+    this.connectionState = new RequireVersion(securityService);
-  public ProtobufConnectionStateProcessor getConnectionStateProcessor() {
-    return protobufConnectionStateProcessor;
+  public ConnectionState getConnectionState() {
+    return connectionState;
+  }
+
+  public ProtobufSerializationService getSerializationService() {
+    return serializationService;
-  public void setConnectionStateProcessor(
-      ProtobufConnectionStateProcessor protobufConnectionStateProcessor) {
-    this.protobufConnectionStateProcessor = protobufConnectionStateProcessor;
+  public void setState(ConnectionState connectionState) {
+    this.connectionState = connectionState;
-  public abstract void setAuthorizer(Authorizer authorizer);
+  public abstract void authenticate(Properties properties);
+
+  public abstract void setValueSerializer(ValueSerializer valueSerializer);

MOV26 INS26 INS26 INS26 INS26 INS40 UPD40 UPD40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 UPD43 INS83 INS43 INS59 UPD43 UPD42 INS83 INS43 INS42 INS8 UPD42 INS83 INS83 INS39 INS42 INS44 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS14 UPD43 UPD42 INS21 UPD42 INS42 INS41 UPD43 UPD42 INS43 INS42 UPD43 UPD42 INS43 INS14 UPD42 INS7 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS43 INS22 INS42 INS14 UPD42 INS42 INS52 INS42 UPD42 INS43 INS42 UPD42 INS42 DEL42