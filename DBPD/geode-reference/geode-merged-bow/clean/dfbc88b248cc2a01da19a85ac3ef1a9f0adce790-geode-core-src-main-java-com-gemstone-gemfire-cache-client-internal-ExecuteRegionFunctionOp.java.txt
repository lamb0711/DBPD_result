Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/AbstractDistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfigImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalLocator.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/StartupMessage.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/SystemAdmin.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/CacheServerStats.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/i18n/LocalizedStrings.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatHelper.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/HostStatSampler.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/statistics/StatArchiveWriter.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/internal/DistributionConfigJUnitTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/GemFireStatSamplerIntegrationTest.java
#	geode-core/src/test/java/com/gemstone/gemfire/internal/statistics/SimpleStatSamplerIntegrationTest.java

+import com.gemstone.gemfire.cache.CacheClosedException;
+import com.gemstone.gemfire.cache.execute.FunctionInvocationTargetException;
+import com.gemstone.gemfire.internal.cache.execute.BucketMovedException;
+      
-    private final boolean executeOnBucketSet;
-    /**
-     * @param removedNodes TODO
-     * @throws com.gemstone.gemfire.SerializationException if serialization fails
-     */
+    private final boolean executeOnBucketSet;
+    
+    private final boolean isHA;
+
+    private FunctionException functionException;
+
+      this.isHA = function.isHA();
+      this.isHA = isHA;
+      this.isHA = op.isHA;
+            boolean throwServerOp = false;
+              
+              // if the function is HA throw exceptions
+              // if nonHA collect these exceptions and wait till you get last chunk
+                  addFunctionException((FunctionException) result);
-                executeFunctionResponseMsg.clear();
-                throw ex;
+                else{
+                  addFunctionException((FunctionException) result);
+                }
-                String s = "While performing a remote " + getOpName();
-                executeFunctionResponseMsg.clear();
-                throw new ServerOperationException(s, (Throwable)result);
+                Throwable t = (Throwable)result;
+                  if (this.functionException == null) {
+                    if(result instanceof BucketMovedException){
+                      FunctionInvocationTargetException fite;
+                      if(isHA){
+                        fite = new InternalFunctionInvocationTargetException(
+                                              ((BucketMovedException)result).getMessage());
+                      }else {
+                        fite = new FunctionInvocationTargetException(
+                            ((BucketMovedException)result).getMessage());
+                      }
+                      this.functionException =  new FunctionException(fite);
+                      this.functionException.addException(fite);
+                    }
+                    else if (result instanceof CacheClosedException) {
+                      FunctionInvocationTargetException fite;
+                      if(isHA) {
+                        fite = new InternalFunctionInvocationTargetException(((CacheClosedException)result).getMessage());
+                      }
+                      else{
+                        fite = new FunctionInvocationTargetException(((CacheClosedException)result).getMessage());
+                      }
+                      if (resultResponse instanceof ArrayList) {
+                        DistributedMember memberID = (DistributedMember) ((ArrayList) resultResponse)
+                            .get(1);
+                        this.failedNodes.add(memberID.getId());
+                      }                   
+                      this.functionException = new FunctionException(fite);
+                      this.functionException.addException(fite);
+                    }
+                    else {
+                      throwServerOp = true;
+                      this.functionException = new FunctionException(t);
+                      this.functionException.addException(t);
+                    }
+                  } else {
+                    this.functionException.addException(t);
+                  }
+
+
+            if (isHA && throwServerOp) {
+              String s = "While performing a remote " + getOpName();
+              throw new ServerOperationException(s, this.functionException);
+            }
+
+            // add all the exceptions here.
+            if (this.functionException != null) {
+              throw this.functionException;
+            }
-              executeFunctionResponseMsg.clear();
-              executeFunctionResponseMsg.clear();
-            executeFunctionResponseMsg.clear();
+    private void addFunctionException(final FunctionException result) {
+      if (this.functionException == null) {
+        this.functionException = result;
+      }
+      this.functionException.addException(result);
+    }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS21 INS21 INS21 INS83 INS43 INS42 INS25 INS21 INS7 INS7 INS7 INS42 INS27 INS8 INS32 INS22 INS32 INS22 INS42 INS22 INS40 INS22 INS33 INS21 INS22 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS60 INS25 INS25 INS10 INS52 INS42 INS7 INS52 INS42 INS39 INS59 INS27 MOV8 INS27 INS8 INS22 INS42 INS42 INS9 INS42 INS42 INS22 INS33 INS53 INS52 INS42 INS25 INS52 INS42 INS22 MOV62 INS8 MOV8 INS22 INS52 INS42 INS60 INS25 INS52 INS42 INS8 INS43 INS59 INS27 INS8 INS8 INS21 INS21 INS42 INS42 MOV11 INS22 INS33 INS25 INS21 INS32 INS32 INS52 INS42 INS62 INS8 INS25 INS32 INS42 INS11 INS42 INS11 INS42 INS43 INS60 INS25 INS21 INS21 INS62 INS8 INS8 INS22 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS43 INS59 INS42 INS8 INS8 INS7 INS32 INS42 INS43 INS60 INS25 INS25 INS21 INS21 INS21 INS21 INS21 INS52 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS22 INS14 INS22 INS42 INS42 INS42 INS43 INS59 INS42 INS8 INS8 INS62 INS8 INS7 INS32 INS7 INS7 INS32 INS7 INS7 INS52 INS42 INS43 INS42 INS52 INS42 INS42 INS42 INS21 INS21 INS42 INS43 INS60 INS21 INS22 INS14 INS22 INS42 INS42 INS42 INS9 INS22 INS14 INS22 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS7 INS7 INS42 INS43 INS59 INS32 INS52 INS42 INS43 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS52 INS42 INS43 INS32 INS43 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS11 INS22 INS42 INS32 INS42 INS42 INS42 INS36 INS42 INS42 INS36 INS42 INS43 INS32 INS43 INS32 INS43 INS32 INS52 INS42 INS42 INS42 INS11 INS11 INS42 INS36 INS42 INS42 INS36 INS42 INS42 INS36 INS42 INS34 INS43 INS42 INS43 INS42 INS11 INS11 INS11 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 DEL42 DEL66 DEL65 DEL40 DEL66 DEL65 DEL29 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL10 DEL42 DEL42 DEL32 DEL21