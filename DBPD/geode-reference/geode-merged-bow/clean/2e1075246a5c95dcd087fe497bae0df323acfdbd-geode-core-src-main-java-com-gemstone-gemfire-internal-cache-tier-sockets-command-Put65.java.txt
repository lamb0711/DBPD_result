Merge branch 'release/1.0.0-incubating.M3'

- * 
+ *
-import com.gemstone.gemfire.internal.cache.EntryEventImpl;
+import com.gemstone.gemfire.internal.cache.EventIDHolder;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
- * @since 6.5 
+ * @since GemFire 6.5
-      throws IOException, InterruptedException {
+    throws IOException, InterruptedException {
-      }
-      catch (InterruptedException ugh) {
+      } catch (InterruptedException ugh) {
-      }
-      finally {
+      } finally {
-      operation = (Operation)msg.getPart(idx++).getObject();
+      operation = (Operation) msg.getPart(idx++).getObject();
-      isDelta = ((Boolean)msg.getPart(idx).getObject()).booleanValue();
+      isDelta = ((Boolean) msg.getPart(idx).getObject()).booleanValue();
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-    
+
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      logger.debug("{}: Received {}put request ({} bytes) from {} for region {} key {} txId {} posdup: {}", servConn.getName(), (isDelta ? " delta " : " "), msg.getPayloadLength(), servConn.getSocketString(), regionName, key, msg.getTransactionId(), msg.isRetry());
+      logger.debug("{}: Received {}put request ({} bytes) from {} for region {} key {} txId {} posdup: {}", servConn.getName(), (isDelta ? " delta " : " "), msg
+        .getPayloadLength(), servConn.getSocketString(), regionName, key, msg.getTransactionId(), msg.isRetry());
-      writeErrorResponse(msg, MessageType.PUT_DATA_ERROR,
-          errMessage.toString(), servConn);
+      writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
+      return;
-    else {
-      LocalRegion region = (LocalRegion)crHelper.getRegion(regionName);
-      if (region == null) {
-        String reason = " was not found during put request";
-        writeRegionDestroyedEx(msg, regionName, reason, servConn);
-        servConn.setAsTrue(RESPONDED);
+
+    LocalRegion region = (LocalRegion) crHelper.getRegion(regionName);
+    if (region == null) {
+      String reason = " was not found during put request";
+      writeRegionDestroyedEx(msg, regionName, reason, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    if (valuePart.isNull() && operation != Operation.PUT_IF_ABSENT && region.containsKey(key)) {
+      // Invalid to 'put' a null value in an existing key
+      String putMsg = " Attempted to put a null value for existing key " + key;
+      if (isDebugEnabled) {
+        logger.debug("{}:{}", servConn.getName(), putMsg);
-      else if (valuePart.isNull() && operation != Operation.PUT_IF_ABSENT && region.containsKey(key)) {
-        // Invalid to 'put' a null value in an existing key
-        String putMsg = " Attempted to put a null value for existing key "
-            + key;
-        if (isDebugEnabled) {
-          logger.debug("{}:{}", servConn.getName(), putMsg);
+      errMessage.append(putMsg);
+      writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    GeodeSecurityUtil.authorizeRegionWrite(regionName, key.toString());
+
+    ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart.getSerializedForm());
+    long threadId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+    long sequenceId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+
+    EventIDHolder clientEvent = new EventIDHolder(new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId));
+
+    Breadcrumbs.setEventId(clientEvent.getEventId());
+
+    // msg.isRetry might be set by v7.0 and later clients
+    if (msg.isRetry()) {
+      //          if (logger.isDebugEnabled()) {
+      //            logger.debug("DEBUG: encountered isRetry in Put65");
+      //          }
+      clientEvent.setPossibleDuplicate(true);
+      if (region.getAttributes().getConcurrencyChecksEnabled()) {
+        // recover the version tag from other servers
+        clientEvent.setRegion(region);
+        if (!recoverVersionTagForRetriedOperation(clientEvent)) {
+          clientEvent.setPossibleDuplicate(false); // no-one has seen this event
-        errMessage.append(putMsg);
-        writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage
-            .toString(), servConn);
-        servConn.setAsTrue(RESPONDED);
-      else {
-        // try {
-        // this.eventId = (EventID)eventPart.getObject();
-        ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart
-            .getSerializedForm());
-        long threadId = EventID
-            .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-        long sequenceId = EventID
-            .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+    }
-        EntryEventImpl clientEvent = new EntryEventImpl(
-            new EventID(servConn.getEventMemberIDByteArray(),
-              threadId, sequenceId));
-        
-        Breadcrumbs.setEventId(clientEvent.getEventId());
+    boolean result = false;
+    boolean sendOldValue = false;
+    boolean oldValueIsObject = true;
+    Object oldValue = null;
-        // msg.isRetry might be set by v7.0 and later clients
-        if (msg.isRetry()) {
-//          if (logger.isDebugEnabled()) {
-//            logger.debug("DEBUG: encountered isRetry in Put65");
-//          }
-          clientEvent.setPossibleDuplicate(true);
-          if (region.getAttributes().getConcurrencyChecksEnabled()) {
-            // recover the version tag from other servers
-            clientEvent.setRegion(region);
-            if (!recoverVersionTagForRetriedOperation(clientEvent)) {
-              clientEvent.setPossibleDuplicate(false); // no-one has seen this event
-            }
-          }
+    try {
+      Object value = null;
+      if (!isDelta) {
+        value = valuePart.getSerializedForm();
+      }
+      boolean isObject = valuePart.isObject();
+      boolean isMetaRegion = region.isUsedForMetaRegion();
+      msg.setMetaRegion(isMetaRegion);
+      AuthorizeRequest authzRequest = null;
+      if (!isMetaRegion) {
+        authzRequest = servConn.getAuthzRequest();
+      }
+      if (authzRequest != null) {
+        // TODO SW: This is to handle DynamicRegionFactory create
+        // calls. Rework this when the semantics of DynamicRegionFactory are
+        // cleaned up.
+        if (DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {
+          authzRequest.createRegionAuthorize((String) key);
-        
-        boolean result = false;
-        boolean sendOldValue = false;
-        boolean oldValueIsObject = true;
-        Object oldValue = null;
+        // Allow PUT operations on meta regions (bug #38961)
+        else {
+          PutOperationContext putContext = authzRequest.putAuthorize(regionName, key, value, isObject, callbackArg);
+          value = putContext.getValue();
+          isObject = putContext.isObject();
+          callbackArg = putContext.getCallbackArg();
+        }
+      }
+      if (isDebugEnabled) {
+        logger.debug("processing put65 with operation={}", operation);
+      }
-        try {
-          Object value = null;
-          if (!isDelta) {
-            value = valuePart.getSerializedForm();
+      // If the value is 1 byte and the byte represents null,
+      // attempt to create the entry. This test needs to be
+      // moved to DataSerializer or DataSerializer.NULL needs
+      // to be publicly accessible.
+      if (operation == Operation.PUT_IF_ABSENT) {
+        //            try {
+        if (msg.isRetry() && clientEvent.getVersionTag() != null) {
+          // bug #46590 the operation was successful the last time since it
+          // was applied to the cache, so return success and the recovered
+          // version tag
+          if (isDebugEnabled) {
+            logger.debug("putIfAbsent operation was successful last time with version {}", clientEvent.getVersionTag());
-          boolean isObject = valuePart.isObject();
-          boolean isMetaRegion = region.isUsedForMetaRegion();
-          msg.setMetaRegion(isMetaRegion);
-          AuthorizeRequest authzRequest = null;
-          if (!isMetaRegion) {
-            authzRequest = servConn.getAuthzRequest();
+          // invoke basicBridgePutIfAbsent anyway to ensure that the event is distributed to all
+          // servers - bug #51664
+          region.basicBridgePutIfAbsent(key, value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
+          oldValue = null;
+        } else {
+          oldValue = region.basicBridgePutIfAbsent(key, value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
+        }
+        sendOldValue = true;
+        oldValueIsObject = true;
+        Version clientVersion = servConn.getClientVersion();
+        if (oldValue instanceof CachedDeserializable) {
+          oldValue = ((CachedDeserializable) oldValue).getSerializedValue();
+        } else if (oldValue instanceof byte[]) {
+          oldValueIsObject = false;
+        } else if ((oldValue instanceof Token) && clientVersion.compareTo(Version.GFE_651) <= 0) {
+          // older clients don't know that Token is now a DSFID class, so we
+          // put the token in a serialized form they can consume
+          HeapDataOutputStream str = new HeapDataOutputStream(Version.CURRENT);
+          DataOutput dstr = new DataOutputStream(str);
+          InternalDataSerializer.writeSerializableObject(oldValue, dstr);
+          oldValue = str.toByteArray();
+        }
+        result = true;
+        //            } catch (Exception e) {
+        //              writeException(msg, e, false, servConn);
+        //              servConn.setAsTrue(RESPONDED);
+        //              return;
+        //            }
+
+      } else if (operation == Operation.REPLACE) {
+        //            try {
+        if (requireOldValue) { // <V> replace(<K>, <V>)
+          if (msg.isRetry() && clientEvent.isConcurrencyConflict() && clientEvent.getVersionTag() != null) {
+            if (isDebugEnabled) {
+              logger.debug("replace(k,v) operation was successful last time with version {}", clientEvent.getVersionTag());
+            }
-          if (authzRequest != null) {
-            // TODO SW: This is to handle DynamicRegionFactory create
-            // calls. Rework this when the semantics of DynamicRegionFactory are
-            // cleaned up.
-            if (DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {
-              authzRequest.createRegionAuthorize((String)key);
-            }
-            // Allow PUT operations on meta regions (bug #38961)
-            else {
-              PutOperationContext putContext = authzRequest.putAuthorize(
-                  regionName, key, value, isObject, callbackArg);
-              value = putContext.getValue();
-              isObject = putContext.isObject();
-              callbackArg = putContext.getCallbackArg();
-            }
+          oldValue = region.basicBridgeReplace(key, value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
+          sendOldValue = !clientEvent.isConcurrencyConflict();
+          oldValueIsObject = true;
+          Version clientVersion = servConn.getClientVersion();
+          if (oldValue instanceof CachedDeserializable) {
+            oldValue = ((CachedDeserializable) oldValue).getSerializedValue();
+          } else if (oldValue instanceof byte[]) {
+            oldValueIsObject = false;
+          } else if ((oldValue instanceof Token) && clientVersion.compareTo(Version.GFE_651) <= 0) {
+            // older clients don't know that Token is now a DSFID class, so we
+            // put the token in a serialized form they can consume
+            HeapDataOutputStream str = new HeapDataOutputStream(Version.CURRENT);
+            DataOutput dstr = new DataOutputStream(str);
+            InternalDataSerializer.writeSerializableObject(oldValue, dstr);
+            oldValue = str.toByteArray();
-            logger.debug("processing put65 with operation={}", operation);
+            logger.debug("returning {} from replace(K,V)", oldValue);
-          // If the value is 1 byte and the byte represents null,
-          // attempt to create the entry. This test needs to be
-          // moved to DataSerializer or DataSerializer.NULL needs
-          // to be publicly accessible.
-          if (operation == Operation.PUT_IF_ABSENT) {
-//            try {
-            if (msg.isRetry() && clientEvent.getVersionTag() != null) {
-              // bug #46590 the operation was successful the last time since it
-              // was applied to the cache, so return success and the recovered
-              // version tag
-              if (isDebugEnabled) {
-                logger.debug("putIfAbsent operation was successful last time with version {}", clientEvent.getVersionTag());
-              }
-              // invoke basicBridgePutIfAbsent anyway to ensure that the event is distributed to all
-              // servers - bug #51664
-              region.basicBridgePutIfAbsent(key, value, isObject,
-                  callbackArg, servConn.getProxyID(), true, clientEvent);
-              oldValue = null;
-            } else {
-              oldValue = region.basicBridgePutIfAbsent(key, value, isObject,
-                callbackArg, servConn.getProxyID(), true, clientEvent);
-            }
-            sendOldValue = true;
-            oldValueIsObject = true;
-            Version clientVersion = servConn.getClientVersion();
-            if (oldValue instanceof CachedDeserializable) {
-              oldValue = ((CachedDeserializable)oldValue).getSerializedValue();
-            } else if (oldValue instanceof byte[]) {
-              oldValueIsObject = false;
-            } else if ((oldValue instanceof Token)
-                && clientVersion.compareTo(Version.GFE_651) <= 0) {
-              // older clients don't know that Token is now a DSFID class, so we
-              // put the token in a serialized form they can consume
-              HeapDataOutputStream str = new HeapDataOutputStream(Version.CURRENT);
-              DataOutput dstr = new DataOutputStream(str);
-              InternalDataSerializer.writeSerializableObject(oldValue, dstr);
-              oldValue = str.toByteArray();
-            }
-            result = true;
-//            } catch (Exception e) {
-//              writeException(msg, e, false, servConn);
-//              servConn.setAsTrue(RESPONDED);
-//              return;
-//            }
-            
-          } else if (operation == Operation.REPLACE) {
-//            try {
-              if (requireOldValue) { // <V> replace(<K>, <V>)
-                if (msg.isRetry() && clientEvent.isConcurrencyConflict()
-                    && clientEvent.getVersionTag() != null) {
-                  if (isDebugEnabled) {
-                    logger.debug("replace(k,v) operation was successful last time with version {}", clientEvent.getVersionTag());
-                  }
-                }
-                oldValue = region.basicBridgeReplace(key, value, isObject,
-                  callbackArg, servConn.getProxyID(), true, clientEvent);
-                sendOldValue = !clientEvent.isConcurrencyConflict();
-                oldValueIsObject = true;
-                Version clientVersion = servConn.getClientVersion();
-                if (oldValue instanceof CachedDeserializable) {
-                  oldValue = ((CachedDeserializable)oldValue).getSerializedValue();
-                } else if (oldValue instanceof byte[]) {
-                  oldValueIsObject = false;
-                } else if ((oldValue instanceof Token)
-                    && clientVersion.compareTo(Version.GFE_651) <= 0) {
-                  // older clients don't know that Token is now a DSFID class, so we
-                  // put the token in a serialized form they can consume
-                  HeapDataOutputStream str = new HeapDataOutputStream(Version.CURRENT);
-                  DataOutput dstr = new DataOutputStream(str);
-                  InternalDataSerializer.writeSerializableObject(oldValue, dstr);
-                  oldValue = str.toByteArray();
-                }
-                if (isDebugEnabled) {
-                  logger.debug("returning {} from replace(K,V)", oldValue);
-                }
-                result = true;
-              } else { // boolean replace(<K>, <V>, <V>) {
-                boolean didPut;
-                didPut = region.basicBridgeReplace(key, expectedOldValue,
-                    value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
-                if (msg.isRetry() && clientEvent.getVersionTag() != null) {
-                  if (isDebugEnabled) {
-                    logger.debug("replace(k,v,v) operation was successful last time with version {}", clientEvent.getVersionTag());
-                  }
-                  didPut = true;
-                }
-                sendOldValue = true;
-                oldValueIsObject = true;
-                oldValue = didPut? Boolean.TRUE : Boolean.FALSE;
-                if (isDebugEnabled) {
-                  logger.debug("returning {} from replace(K,V,V)", oldValue);
-                }
-                result = true;
-              }
-//            } catch (Exception e) {
-//              writeException(msg, e, false, servConn);
-//              servConn.setAsTrue(RESPONDED);
-//              return;
-//            }
-            
-          } else if (value == null && !isDelta) {
-            // Create the null entry. Since the value is null, the value of the
-            // isObject
-            // the true after null doesn't matter and is not used.
-            result = region.basicBridgeCreate(key, null, true, callbackArg,
-                servConn.getProxyID(), true, clientEvent, false);
-            if (msg.isRetry() && clientEvent.isConcurrencyConflict()
-                && clientEvent.getVersionTag() != null) {
-              result = true;
-              if (isDebugEnabled) {
-                logger.debug("create(k,null) operation was successful last time with version {}", clientEvent.getVersionTag());
-              }
-            }
-          }
-          else {
-            // Put the entry
-            byte[] delta = null;
-            if (isDelta) {
-              delta = valuePart.getSerializedForm();              
-            }
-            TXManagerImpl txMgr = (TXManagerImpl)servConn.getCache().getCacheTransactionManager();
-            // bug 43068 - use create() if in a transaction and op is CREATE
-            if (txMgr.getTXState() != null && operation.isCreate()) {
-              result = region.basicBridgeCreate(key, (byte[])value, isObject, callbackArg,
-                  servConn.getProxyID(), true, clientEvent, true);
-            } else {
-              result = region.basicBridgePut(key, value, delta, isObject,
-                callbackArg, servConn.getProxyID(), true, clientEvent, servConn
-                    .isSqlFabricSystem());
-            }
-            if (msg.isRetry() && clientEvent.isConcurrencyConflict()
-                && clientEvent.getVersionTag() != null) {
-              if (isDebugEnabled) {
-                logger.debug("put(k,v) operation was successful last time with version {}", clientEvent.getVersionTag());
-              }
-              result = true;
-            }
-          }
-          if (result) {
-            servConn.setModificationInfo(true, regionName, key);
-          }
-          else {
-            String message = servConn.getName()
-                + ": Failed to put entry for region " + regionName
-                + " key " + key + " value " + valuePart;
+          result = true;
+        } else { // boolean replace(<K>, <V>, <V>) {
+          boolean didPut;
+          didPut = region.basicBridgeReplace(key, expectedOldValue, value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
+          if (msg.isRetry() && clientEvent.getVersionTag() != null) {
-              logger.debug(message);
+              logger.debug("replace(k,v,v) operation was successful last time with version {}", clientEvent.getVersionTag());
-            throw new Exception(message);
+            didPut = true;
+          sendOldValue = true;
+          oldValueIsObject = true;
+          oldValue = didPut ? Boolean.TRUE : Boolean.FALSE;
+          if (isDebugEnabled) {
+            logger.debug("returning {} from replace(K,V,V)", oldValue);
+          }
+          result = true;
-        catch (RegionDestroyedException rde) {
-          writeException(msg, rde, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          return;
-        }
-        catch (ResourceException re) {
-          writeException(msg, re, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          return;
-        }
-        catch (InvalidDeltaException ide) {
-          logger.info(LocalizedMessage.create(LocalizedStrings.UpdateOperation_ERROR_APPLYING_DELTA_FOR_KEY_0_OF_REGION_1,new Object[] { key, regionName }));
-          writeException(msg, MessageType.PUT_DELTA_ERROR, ide, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          region.getCachePerfStats().incDeltaFullValuesRequested();
-          return;
-        }
-        catch (Exception ce) {
-          // If an interrupted exception is thrown , rethrow it
-          checkForInterrupt(servConn, ce);
+        //            } catch (Exception e) {
+        //              writeException(msg, e, false, servConn);
+        //              servConn.setAsTrue(RESPONDED);
+        //              return;
+        //            }
-          // If an exception occurs during the put, preserve the connection
-          writeException(msg, ce, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          if (ce instanceof GemFireSecurityException) {
-            // Fine logging for security exceptions since these are already
-            // logged by the security logger
-            if (isDebugEnabled) {
-              logger.debug("{}: Unexpected Security exception", servConn.getName(), ce);
-            }
-          }
-          else if (isDebugEnabled) {
-            logger.debug("{}: Unexpected Exception", servConn.getName(), ce);
-          }
-          return;
-        }
-        finally {
-          long oldStart = start;
-          start = DistributionStats.getStatTime();
-          stats.incProcessPutTime(start - oldStart);
-        }
-
-        // Increment statistics and write the reply
-        if (region instanceof PartitionedRegion) {
-          PartitionedRegion pr = (PartitionedRegion)region;
-          if (pr.isNetworkHop().byteValue() != (byte)0) {
-            writeReplyWithRefreshMetadata(msg, servConn, pr, sendOldValue, oldValueIsObject, 
-                oldValue, pr.isNetworkHop().byteValue(), clientEvent.getVersionTag());
-            pr.setIsNetworkHop((byte)0);
-            pr.setMetadataVersion(Byte.valueOf((byte)0));
-          }
-          else {
-            writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue, clientEvent.getVersionTag());
+      } else if (value == null && !isDelta) {
+        // Create the null entry. Since the value is null, the value of the
+        // isObject
+        // the true after null doesn't matter and is not used.
+        result = region.basicBridgeCreate(key, null, true, callbackArg, servConn.getProxyID(), true, clientEvent, false);
+        if (msg.isRetry() && clientEvent.isConcurrencyConflict() && clientEvent.getVersionTag() != null) {
+          result = true;
+          if (isDebugEnabled) {
+            logger.debug("create(k,null) operation was successful last time with version {}", clientEvent.getVersionTag());
-        else {
-          writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue, clientEvent.getVersionTag());
+      } else {
+        // Put the entry
+        byte[] delta = null;
+        if (isDelta) {
+          delta = valuePart.getSerializedForm();
-        servConn.setAsTrue(RESPONDED);
-        if (isDebugEnabled) {
-          logger.debug("{}: Sent put response back to {} for region {} key {} value {}", servConn.getName(), servConn.getSocketString(), regionName, key, valuePart);
+        TXManagerImpl txMgr = (TXManagerImpl) servConn.getCache().getCacheTransactionManager();
+        // bug 43068 - use create() if in a transaction and op is CREATE
+        if (txMgr.getTXState() != null && operation.isCreate()) {
+          result = region.basicBridgeCreate(key, (byte[]) value, isObject, callbackArg, servConn.getProxyID(), true, clientEvent, true);
+        } else {
+          result = region.basicBridgePut(key, value, delta, isObject, callbackArg, servConn.getProxyID(), true, clientEvent);
-        stats.incWritePutResponseTime(DistributionStats.getStatTime() - start);
+        if (msg.isRetry() && clientEvent.isConcurrencyConflict() && clientEvent.getVersionTag() != null) {
+          if (isDebugEnabled) {
+            logger.debug("put(k,v) operation was successful last time with version {}", clientEvent.getVersionTag());
+          }
+          result = true;
+        }
+      if (result) {
+        servConn.setModificationInfo(true, regionName, key);
+      } else {
+        String message = servConn.getName() + ": Failed to put entry for region " + regionName + " key " + key + " value " + valuePart;
+        if (isDebugEnabled) {
+          logger.debug(message);
+        }
+        throw new Exception(message);
+      }
+    } catch (RegionDestroyedException rde) {
+      writeException(msg, rde, false, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    } catch (ResourceException re) {
+      writeException(msg, re, false, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    } catch (InvalidDeltaException ide) {
+      logger.info(LocalizedMessage.create(LocalizedStrings.UpdateOperation_ERROR_APPLYING_DELTA_FOR_KEY_0_OF_REGION_1, new Object[] {
+        key,
+        regionName
+      }));
+      writeException(msg, MessageType.PUT_DELTA_ERROR, ide, false, servConn);
+      servConn.setAsTrue(RESPONDED);
+      region.getCachePerfStats().incDeltaFullValuesRequested();
+      return;
+    } catch (Exception ce) {
+      // If an interrupted exception is thrown , rethrow it
+      checkForInterrupt(servConn, ce);
+
+      // If an exception occurs during the put, preserve the connection
+      writeException(msg, ce, false, servConn);
+      servConn.setAsTrue(RESPONDED);
+      if (ce instanceof GemFireSecurityException) {
+        // Fine logging for security exceptions since these are already
+        // logged by the security logger
+        if (isDebugEnabled) {
+          logger.debug("{}: Unexpected Security exception", servConn.getName(), ce);
+        }
+      } else if (isDebugEnabled) {
+        logger.debug("{}: Unexpected Exception", servConn.getName(), ce);
+      }
+      return;
+    } finally {
+      long oldStart = start;
+      start = DistributionStats.getStatTime();
+      stats.incProcessPutTime(start - oldStart);
+    // Increment statistics and write the reply
+    if (region instanceof PartitionedRegion) {
+      PartitionedRegion pr = (PartitionedRegion) region;
+      if (pr.isNetworkHop().byteValue() != (byte) 0) {
+        writeReplyWithRefreshMetadata(msg, servConn, pr, sendOldValue, oldValueIsObject, oldValue, pr.isNetworkHop()
+                                                                                                     .byteValue(), clientEvent
+          .getVersionTag());
+        pr.setIsNetworkHop((byte) 0);
+        pr.setMetadataVersion(Byte.valueOf((byte) 0));
+      } else {
+        writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue, clientEvent.getVersionTag());
+      }
+    } else {
+      writeReply(msg, servConn, sendOldValue, oldValueIsObject, oldValue, clientEvent.getVersionTag());
+    }
+    servConn.setAsTrue(RESPONDED);
+    if (isDebugEnabled) {
+      logger.debug("{}: Sent put response back to {} for region {} key {} value {}", servConn.getName(), servConn.getSocketString(), regionName, key, valuePart);
+    }
+    stats.incWritePutResponseTime(DistributionStats.getStatTime() - start);
+
+
-  protected void writeReply(Message origMsg, ServerConnection servConn,
-      boolean sendOldValue, boolean oldValueIsObject, Object oldValue,
-      VersionTag tag)
-  throws IOException {
+
+  protected void writeReply(Message origMsg,
+                            ServerConnection servConn,
+                            boolean sendOldValue,
+                            boolean oldValueIsObject,
+                            Object oldValue,
+                            VersionTag tag) throws IOException {
-    replyMsg.setNumberOfParts(sendOldValue? 3 : 1);
+    replyMsg.setNumberOfParts(sendOldValue ? 3 : 1);
-      replyMsg.addIntPart(oldValueIsObject?1:0);
+      replyMsg.addIntPart(oldValueIsObject ? 1 : 0);
+
-      ServerConnection servConn, PartitionedRegion pr,
-      boolean sendOldValue, boolean oldValueIsObject, Object oldValue, byte nwHopType,
-      VersionTag tag)
-  throws IOException {
+                                               ServerConnection servConn,
+                                               PartitionedRegion pr,
+                                               boolean sendOldValue,
+                                               boolean oldValueIsObject,
+                                               Object oldValue,
+                                               byte nwHopType,
+                                               VersionTag tag) throws IOException {
-    replyMsg.setNumberOfParts(sendOldValue? 3 : 1);
+    replyMsg.setNumberOfParts(sendOldValue ? 3 : 1);
-    replyMsg.addBytesPart(new byte[]{pr.getMetadataVersion().byteValue(), nwHopType});
+    replyMsg.addBytesPart(new byte[] { pr.getMetadataVersion().byteValue(), nwHopType });
-      replyMsg.addIntPart(oldValueIsObject?1:0);
+      replyMsg.addIntPart(oldValueIsObject ? 1 : 0);
-      logger.trace("{}: rpl with REFRESH_METADAT tx: {} parts={}", servConn.getName(), origMsg.getTransactionId(), replyMsg.getNumberOfParts());
+      logger.trace("{}: rpl with REFRESH_METADAT tx: {} parts={}", servConn.getName(), origMsg.getTransactionId(), replyMsg
+        .getNumberOfParts());

MOV26 INS26 UPD40 INS40 MOV8 UPD66 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV25 MOV21 MOV8 MOV60 MOV21 MOV60 MOV54 MOV60 MOV60 MOV60 MOV60 MOV25 MOV21 MOV54 MOV21 MOV21 MOV25 MOV21 MOV54 MOV60 MOV25 INS25 MOV60 INS25 INS25 INS21 MOV27 MOV8 MOV27 MOV8 MOV27 MOV8 INS32 UPD43 INS41 INS41 INS41 INS42 INS42 INS42 INS32 UPD42 INS42 INS42 UPD43 UPD42 DEL42 DEL42 DEL32 DEL25 DEL25 DEL8 DEL25 DEL8