Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Represents {@link DiskStoreAttributes} that are created declaratively.
- * Notice that it implements the {@link DiskStore} interface so
- * that this class must be updated when {@link DiskStore} is
- * modified.  This class is public for testing purposes.
+ * Represents {@link DiskStoreAttributes} that are created declaratively. Notice that it implements
+ * the {@link DiskStore} interface so that this class must be updated when {@link DiskStore} is
+ * modified. This class is public for testing purposes.
-public class DiskStoreAttributesCreation extends UserSpecifiedDiskStoreAttributes  implements Serializable {
-
-  /** An <code>AttributesFactory</code> for creating default
-   * <code>RegionAttribute</code>s */
-//  private static final DiskStoreFactory defaultFactory = new DiskStoreFactoryImpl();
+public class DiskStoreAttributesCreation extends UserSpecifiedDiskStoreAttributes
+    implements Serializable {
-   * Creates a new <code>DiskStoreCreation</code> with the
-   * default region attributes.
+   * An <code>AttributesFactory</code> for creating default <code>RegionAttribute</code>s
-  public DiskStoreAttributesCreation() {
-  }
+  // private static final DiskStoreFactory defaultFactory = new DiskStoreFactoryImpl();
-   * Creates a new <code>DiskStoreAttributesCreation</code> with the
-   * given disk store attributes.
-   * NOTE: Currently attrs will not be an instance of DiskStoreAttributesCreation.
-   *  If it could be then this code should be changed to use attrs' hasXXX methods
-   *  to initialize the has booleans when defaults is false.
+   * Creates a new <code>DiskStoreCreation</code> with the default region attributes.
+   */
+  public DiskStoreAttributesCreation() {}
+
+  /**
+   * Creates a new <code>DiskStoreAttributesCreation</code> with the given disk store attributes.
+   * NOTE: Currently attrs will not be an instance of DiskStoreAttributesCreation. If it could be
+   * then this code should be changed to use attrs' hasXXX methods to initialize the has booleans
+   * when defaults is false.
+   * 
-    
+
-      // Selectively set has* fields to true, propagating those non-default 
+      // Selectively set has* fields to true, propagating those non-default
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-   * Returns whether or not two objects are {@linkplain Object#equals
-   * equals} taking <code>null</code> into account.
+   * Returns whether or not two objects are {@linkplain Object#equals equals} taking
+   * <code>null</code> into account.
-      if (array1[i] != array2[i]) { return false; }
+      if (array1[i] != array2[i]) {
+        return false;
+      }
-  
-  
+
+
-      if (array1[i] != array2[i]) { return false; }
+      if (array1[i] != array2[i]) {
+        return false;
+      }
-  
+
-   * Returns whether or not two <code>File</code> arrays specify the
-   * same files.
+   * Returns whether or not two <code>File</code> arrays specify the same files.
-        if (equal(array1[i].getAbsoluteFile(),
-                  array2[j].getAbsoluteFile())) {
+        if (equal(array1[i].getAbsoluteFile(), array2[j].getAbsoluteFile())) {
-   * Returns whether or not this <code>DiskStoreCreation</code>
-   * is equivalent to another <code>DiskStore</code>.
+   * Returns whether or not this <code>DiskStoreCreation</code> is equivalent to another
+   * <code>DiskStore</code>.
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_AUTOCOMPACT_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[] {name, this.autoCompact, other.getAutoCompact()}));
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_AUTOCOMPACT_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2
+              .toLocalizedString(new Object[] {name, this.autoCompact, other.getAutoCompact()}));
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_COMPACTIONTHRESHOLD_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[] {name, this.compactionThreshold, other.getCompactionThreshold()}));
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_COMPACTIONTHRESHOLD_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2
+              .toLocalizedString(
+                  new Object[] {name, this.compactionThreshold, other.getCompactionThreshold()}));
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_ALLOWFORCECOMPACTION_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[] {name, this.allowForceCompaction, other.getAllowForceCompaction()}));
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_ALLOWFORCECOMPACTION_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2
+              .toLocalizedString(
+                  new Object[] {name, this.allowForceCompaction, other.getAllowForceCompaction()}));
-    if (this.maxOplogSizeInBytes != other.getMaxOplogSize()*1024*1024) {
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_MAXOPLOGSIZE_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[] {name, this.maxOplogSizeInBytes/1024/1024, other.getMaxOplogSize()}));
+    if (this.maxOplogSizeInBytes != other.getMaxOplogSize() * 1024 * 1024) {
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_MAXOPLOGSIZE_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2
+              .toLocalizedString(new Object[] {name, this.maxOplogSizeInBytes / 1024 / 1024,
+                  other.getMaxOplogSize()}));
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_TIMEINTERVAL_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[] {name, this.timeInterval, other.getTimeInterval()}));
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_TIMEINTERVAL_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2
+              .toLocalizedString(new Object[] {name, this.timeInterval, other.getTimeInterval()}));
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_WRITEBUFFERSIZE_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[] {name, this.writeBufferSize, other.getWriteBufferSize()}));
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_WRITEBUFFERSIZE_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2
+              .toLocalizedString(
+                  new Object[] {name, this.writeBufferSize, other.getWriteBufferSize()}));
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_QUEUESIZE_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2.toLocalizedString(new Object[] {name, this.queueSize, other.getQueueSize()}));
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_QUEUESIZE_OF_0_IS_NOT_THE_SAME_THIS_1_OTHER_2
+              .toLocalizedString(new Object[] {name, this.queueSize, other.getQueueSize()}));
-    if (! equal(this.diskDirs, other.getDiskDirs())) {
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_DISK_DIRS_OF_0_ARE_NOT_THE_SAME.toLocalizedString(name));
+    if (!equal(this.diskDirs, other.getDiskDirs())) {
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_DISK_DIRS_OF_0_ARE_NOT_THE_SAME
+              .toLocalizedString(name));
-    if (! equal(this.diskDirSizes, other.getDiskDirSizes())) {
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_DISK_DIR_SIZES_OF_0_ARE_NOT_THE_SAME.toLocalizedString(name));
+    if (!equal(this.diskDirSizes, other.getDiskDirSizes())) {
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_DISK_DIR_SIZES_OF_0_ARE_NOT_THE_SAME
+              .toLocalizedString(name));
-    if (! equal(getDiskUsageWarningPercentage(), other.getDiskUsageWarningPercentage())) {
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_DISK_USAGE_WARN_ARE_NOT_THE_SAME.toLocalizedString(name));
+    if (!equal(getDiskUsageWarningPercentage(), other.getDiskUsageWarningPercentage())) {
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_DISK_USAGE_WARN_ARE_NOT_THE_SAME
+              .toLocalizedString(name));
-    if (! equal(getDiskUsageCriticalPercentage(), other.getDiskUsageCriticalPercentage())) {
-      throw new RuntimeException(LocalizedStrings.DiskStoreAttributesCreation_DISK_USAGE_CRITICAL_ARE_NOT_THE_SAME.toLocalizedString(name));
+    if (!equal(getDiskUsageCriticalPercentage(), other.getDiskUsageCriticalPercentage())) {
+      throw new RuntimeException(
+          LocalizedStrings.DiskStoreAttributesCreation_DISK_USAGE_CRITICAL_ARE_NOT_THE_SAME
+              .toLocalizedString(name));
-  
+
-  
+
-    this.maxOplogSizeInBytes = maxOplogSize *1024*1024;
+    this.maxOplogSizeInBytes = maxOplogSize * 1024 * 1024;
-  
+
-  
+
-  
+
-  
-  public void setDiskDirs(File[] diskDirs)
-  {
+
+  public void setDiskDirs(File[] diskDirs) {
-    if(sizes.length != this.diskDirs.length) {
-      throw new IllegalArgumentException(LocalizedStrings.DiskStoreAttributesCreation_NUMBER_OF_DISKSIZES_IS_0_WHICH_IS_NOT_EQUAL_TO_NUMBER_OF_DISK_DIRS_WHICH_IS_1.toLocalizedString(new Object[] {Integer.valueOf(sizes.length), Integer.valueOf(diskDirs.length)}));
+    if (sizes.length != this.diskDirs.length) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskStoreAttributesCreation_NUMBER_OF_DISKSIZES_IS_0_WHICH_IS_NOT_EQUAL_TO_NUMBER_OF_DISK_DIRS_WHICH_IS_1
+              .toLocalizedString(
+                  new Object[] {Integer.valueOf(sizes.length), Integer.valueOf(diskDirs.length)}));
-  
+
-  private void checkIfDirectoriesExist(File[] disk_dirs)
-  {
-//    for (int i=0; i < disk_dirs.length; i++) {
-//      if (! disk_dirs[i].isDirectory()) {
-////        throw new IllegalArgumentException(LocalizedStrings.DiskStoreAttributesCreation_0_WAS_NOT_AN_EXISTING_DIRECTORY_FOR_DISKSTORE_1.toLocalizedString(new Object[] {disk_dirs[i], name}));
-//        if (!diskDirs[i].mkdirs()) {
-//          throw new RuntimeException("Cannot create directory" + diskDirs[i].getAbsolutePath() + "Num disk dirs to be created : " + disk_dirs.length + " Dir Name " + disk_dirs[i].getName());
-//        } 
-//      }
-//    }
+  private void checkIfDirectoriesExist(File[] disk_dirs) {
+    // for (int i=0; i < disk_dirs.length; i++) {
+    // if (! disk_dirs[i].isDirectory()) {
+    //// throw new
+    // IllegalArgumentException(LocalizedStrings.DiskStoreAttributesCreation_0_WAS_NOT_AN_EXISTING_DIRECTORY_FOR_DISKSTORE_1.toLocalizedString(new
+    // Object[] {disk_dirs[i], name}));
+    // if (!diskDirs[i].mkdirs()) {
+    // throw new RuntimeException("Cannot create directory" + diskDirs[i].getAbsolutePath() + "Num
+    // disk dirs to be created : " + disk_dirs.length + " Dir Name " + disk_dirs[i].getName());
+    // }
+    // }
+    // }
- 
- private void verifyNonNegativeDirSize(int[] sizes){
-   for(int i=0; i< sizes.length; i++){
-     if(sizes[i]<0){
-       throw new IllegalArgumentException(LocalizedStrings.DiskStoreAttributesCreation_DIR_SIZE_CANNOT_BE_NEGATIVE_0_FOR_DISKSTORE_1.toLocalizedString(new Object[] {Integer.valueOf(sizes[i]), name}));
-     }
-   }
- }
+
+  private void verifyNonNegativeDirSize(int[] sizes) {
+    for (int i = 0; i < sizes.length; i++) {
+      if (sizes[i] < 0) {
+        throw new IllegalArgumentException(
+            LocalizedStrings.DiskStoreAttributesCreation_DIR_SIZE_CANNOT_BE_NEGATIVE_0_FOR_DISKSTORE_1
+                .toLocalizedString(new Object[] {Integer.valueOf(sizes[i]), name}));
+      }
+    }
+  }

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66