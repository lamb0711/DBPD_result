GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)

* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier

Initial refactor: removal of NetMember, MemberAttributes and other classes that subordinated GMS
identifiers.  Repurposing GMSMember as a data packet to hold information required in a membership
identifer.

* fixing failing tests

* fixing failing unit tests

* picking up a change that IntelliJ didn't auto-save & fixing serializables test

* fixing problems with durable client ids

these identifiers morph after the client's membership identifier has been formed
so the member ID needs to be updated before serializing it

* fixing merge error

* updating sanctionedDataSerializables

* fixing lgtm complaint

* removing unnecessary serialization/deserialization methods in GMSUtil

* remove methods no longer needed for serializing an object with a different DSFID

* fixing serializables test

-import org.apache.geode.distributed.internal.membership.gms.GMSMember;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberIdentifier;
-  private GMSMember localAddress;
+  private MemberIdentifier localAddress;
-  private final Set<GMSMember> removedMembers = new HashSet<>();
+  private final Set<MemberIdentifier> removedMembers = new HashSet<>();
-  private final Set<GMSMember> leftMembers = new HashSet<>();
+  private final Set<MemberIdentifier> leftMembers = new HashSet<>();
-    Set<GMSMember> alreadyTried = new HashSet<>();
-    Set<GMSMember> registrants = new HashSet<>();
-    GMSMember possibleCoordinator;
+    Set<MemberIdentifier> alreadyTried = new HashSet<>();
+    Set<MemberIdentifier> registrants = new HashSet<>();
+    MemberIdentifier possibleCoordinator;
-    GMSMember coord = state.possibleCoordinator;
+    MemberIdentifier coord = state.possibleCoordinator;
-          GMSMember coord = v.getCoordinator();
+          MemberIdentifier coord = v.getCoordinator();
-  public boolean isMemberLeaving(GMSMember mbr) {
+  public boolean isMemberLeaving(MemberIdentifier mbr) {
-    GMSMember mbr = incomingRequest.getMemberID();
+    MemberIdentifier mbr = incomingRequest.getMemberID();
-      GMSMember coordinator = check.getCoordinator();
+      MemberIdentifier coordinator = check.getCoordinator();
-    GMSMember mbr = incomingRequest.getMemberID();
+    MemberIdentifier mbr = incomingRequest.getMemberID();
-  private void becomeCoordinator(GMSMember oldCoordinator) {
+  private void becomeCoordinator(MemberIdentifier oldCoordinator) {
-  private GMSMembershipView copyCurrentViewAndAddMyAddress(GMSMember oldCoordinator) {
+  private GMSMembershipView copyCurrentViewAndAddMyAddress(MemberIdentifier oldCoordinator) {
-    Set<GMSMember> leaving = new HashSet<>();
-    Set<GMSMember> removals;
+    Set<MemberIdentifier> leaving = new HashSet<>();
+    Set<MemberIdentifier> removals;
-      List<GMSMember> mbrs = new ArrayList<>(currentView.getMembers());
+      List<MemberIdentifier> mbrs = new ArrayList<>(currentView.getMembers());
-  private void sendRemoveMessages(List<GMSMember> removals, List<String> reasons,
-      Set<GMSMember> oldIds) {
+  private void sendRemoveMessages(List<MemberIdentifier> removals, List<String> reasons,
+      Set<MemberIdentifier> oldIds) {
-    for (GMSMember mbr : removals) {
+    for (MemberIdentifier mbr : removals) {
-  boolean prepareView(GMSMembershipView view, List<GMSMember> newMembers)
+  boolean prepareView(GMSMembershipView view, List<MemberIdentifier> newMembers)
-  void sendView(GMSMembershipView view, List<GMSMember> newMembers)
+  void sendView(GMSMembershipView view, List<MemberIdentifier> newMembers)
-    List<GMSMember> recips = new ArrayList<>(view.getMembers());
+    List<MemberIdentifier> recips = new ArrayList<>(view.getMembers());
-    List<GMSMember> responders = recips;
+    List<MemberIdentifier> responders = recips;
-    Set<GMSMember> pendingLeaves = getPendingRequestIDs(LEAVE_REQUEST_MESSAGE);
-    Set<GMSMember> pendingRemovals = getPendingRequestIDs(REMOVE_MEMBER_REQUEST);
+    Set<MemberIdentifier> pendingLeaves = getPendingRequestIDs(LEAVE_REQUEST_MESSAGE);
+    Set<MemberIdentifier> pendingRemovals = getPendingRequestIDs(REMOVE_MEMBER_REQUEST);
-      Set<GMSMember> failedToRespond = viewReplyProcessor.waitForResponses();
+      Set<MemberIdentifier> failedToRespond = viewReplyProcessor.waitForResponses();
-      GMSMember conflictingViewSender =
+      MemberIdentifier conflictingViewSender =
-      for (GMSMember mbr : view.getMembers()) {
+      for (MemberIdentifier mbr : view.getMembers()) {
-      for (GMSMember mbr : view.getMembers()) {
+      for (MemberIdentifier mbr : view.getMembers()) {
-        for (GMSMember mbr : view.getMembers()) {
+        for (MemberIdentifier mbr : view.getMembers()) {
-            GMSMember me = this.localAddress;
-            me.setBirthViewId(birthViewId);
+            MemberIdentifier me = this.localAddress;
+            me.setVmViewId(birthViewId);
-    Set<GMSMember> possibleCoordinators = new HashSet<GMSMember>();
-    Set<GMSMember> coordinatorsWithView = new HashSet<GMSMember>();
+    Set<MemberIdentifier> possibleCoordinators = new HashSet<MemberIdentifier>();
+    Set<MemberIdentifier> coordinatorsWithView = new HashSet<MemberIdentifier>();
-            GMSMember responseCoordinator = response.getCoordinator();
+            MemberIdentifier responseCoordinator = response.getCoordinator();
-    Iterator<GMSMember> it = possibleCoordinators.iterator();
+    Iterator<MemberIdentifier> it = possibleCoordinators.iterator();
-      GMSMember oldest = it.next();
+      MemberIdentifier oldest = it.next();
-        GMSMember candidate = it.next();
-        if (oldest.compareTo(candidate) > 0) {
+        MemberIdentifier candidate = it.next();
+        if (services.getMemberFactory().getComparator().compare(oldest, candidate) > 0) {
-    GMSMember coord = null;
+    MemberIdentifier coord = null;
-      GMSMember mbr = it.next();
+      MemberIdentifier mbr = it.next();
-          if (coordIsNoob && (coord == null || coord.compareTo(mbr) > 0)) {
+          if (coordIsNoob && (coord == null
+              || services.getMemberFactory().getComparator().compare(coord, mbr) > 0)) {
-    List<GMSMember> recipients = new ArrayList(v.getMembers());
+    List<MemberIdentifier> recipients = new ArrayList(v.getMembers());
-        for (GMSMember mbr : recipients) {
-          List<GMSMember> r = new ArrayList<>();
+        for (MemberIdentifier mbr : recipients) {
+          List<MemberIdentifier> r = new ArrayList<>();
-    GMSMember bestGuessCoordinator = null;
+    MemberIdentifier bestGuessCoordinator = null;
-      GMSMember suggestedCoordinator = resp.getCoordinator();
+      MemberIdentifier suggestedCoordinator = resp.getCoordinator();
-              || bestGuessCoordinator.compareTo(suggestedCoordinator, false) > 0)) {
+              || bestGuessCoordinator.getMemberData()
+                  .compareTo(suggestedCoordinator.getMemberData(), false) > 0)) {
-  public GMSMember getMemberID() {
+  public MemberIdentifier getMemberID() {
-        for (GMSMember mbr : newView.getMembers()) {
+        for (MemberIdentifier mbr : newView.getMembers()) {
-            GMSMember me = (GMSMember) this.localAddress;
-            me.setBirthViewId(birthViewId);
+            MemberIdentifier me = this.localAddress;
+            me.setVmViewId(birthViewId);
-          Set<GMSMember> crashes = newView.getActualCrashedMembers(currentView);
+          Set<MemberIdentifier> crashes = newView.getActualCrashedMembers(currentView);
-  private void removeMembersFromCollectionIfNotInView(Collection<GMSMember> members,
+  private void removeMembersFromCollectionIfNotInView(Collection<MemberIdentifier> members,
-    Iterator<GMSMember> iterator = members.iterator();
+    Iterator<MemberIdentifier> iterator = members.iterator();
-    List<GMSMember> recipients = new ArrayList<>(view.getMembers());
+    List<MemberIdentifier> recipients = new ArrayList<>(view.getMembers());
-  public void setLocalAddress(GMSMember address) {
+  public void setLocalAddress(MemberIdentifier address) {
-    GMSMember mbr = (GMSMember) this.localAddress;
+    MemberIdentifier mbr = (MemberIdentifier) this.localAddress;
-          || localAddress.getVmKind() == GMSMember.LOCATOR_DM_TYPE) {
+          || localAddress.getMemberData().getVmKind() == MemberIdentifier.LOCATOR_DM_TYPE) {
-  public void memberSuspected(GMSMember initiator,
-      GMSMember suspect, String reason) {
+  public void memberSuspected(MemberIdentifier initiator,
+      MemberIdentifier suspect, String reason) {
-          List<GMSMember> coords =
+          List<MemberIdentifier> coords =
-  public void remove(GMSMember m, String reason) {
+  public void remove(MemberIdentifier m, String reason) {
-      Set<GMSMember> filter = new HashSet<>();
+      Set<MemberIdentifier> filter = new HashSet<>();
-  public void memberShutdown(GMSMember mbr, String reason) {
+  public void memberShutdown(MemberIdentifier mbr, String reason) {
-  boolean checkIfAvailable(GMSMember fmbr) {
+  boolean checkIfAvailable(MemberIdentifier fmbr) {
-  private GMSMember getMemId(GMSMember jgId,
-      List<GMSMember> members) {
-    for (GMSMember m : members) {
+  private MemberIdentifier getMemId(MemberIdentifier jgId,
+      List<MemberIdentifier> members) {
+    for (MemberIdentifier m : members) {
-  public GMSMember getMemberID(GMSMember member) {
+  public MemberIdentifier getMemberID(MemberIdentifier member) {
-    GMSMember ret = null;
+    MemberIdentifier ret = null;
-  Set<GMSMember> getPendingRequestIDs(int theDSFID) {
-    Set<GMSMember> result = new HashSet<>();
+  Set<MemberIdentifier> getPendingRequestIDs(int theDSFID) {
+    Set<MemberIdentifier> result = new HashSet<>();
-    final Set<GMSMember> notRepliedYet = new HashSet<>();
+    final Set<MemberIdentifier> notRepliedYet = new HashSet<>();
-    GMSMember conflictingViewSender;
+    MemberIdentifier conflictingViewSender;
-    final Set<GMSMember> pendingRemovals = new HashSet<>();
+    final Set<MemberIdentifier> pendingRemovals = new HashSet<>();
-    synchronized void initialize(int viewId, Set<GMSMember> recips) {
+    synchronized void initialize(int viewId, Set<MemberIdentifier> recips) {
-    synchronized void processPendingRequests(Set<GMSMember> pendingLeaves,
-        Set<GMSMember> pendingRemovals) {
+    synchronized void processPendingRequests(Set<MemberIdentifier> pendingLeaves,
+        Set<MemberIdentifier> pendingRemovals) {
-      for (GMSMember mbr : pendingLeaves) {
+      for (MemberIdentifier mbr : pendingLeaves) {
-      for (GMSMember mbr : pendingRemovals) {
+      for (MemberIdentifier mbr : pendingRemovals) {
-    synchronized void memberSuspected(GMSMember suspect) {
+    synchronized void memberSuspected(MemberIdentifier suspect) {
-    synchronized void processLeaveRequest(GMSMember mbr) {
+    synchronized void processLeaveRequest(MemberIdentifier mbr) {
-    synchronized void processRemoveRequest(GMSMember mbr) {
+    synchronized void processRemoveRequest(MemberIdentifier mbr) {
-    synchronized void processViewResponse(int viewId, GMSMember sender,
+    synchronized void processViewResponse(int viewId, MemberIdentifier sender,
-    private void stopWaitingFor(GMSMember mbr) {
+    private void stopWaitingFor(MemberIdentifier mbr) {
-    Set<GMSMember> waitForResponses() throws InterruptedException {
-      Set<GMSMember> result;
+    Set<MemberIdentifier> waitForResponses() throws InterruptedException {
+      Set<MemberIdentifier> result;
-    GMSMember getConflictingViewSender() {
+    MemberIdentifier getConflictingViewSender() {
-    synchronized Set<GMSMember> getUnresponsiveMembers() {
+    synchronized Set<MemberIdentifier> getUnresponsiveMembers() {
-        List<GMSMember> recips =
+        List<MemberIdentifier> recips =
-    List<GMSMember> initialJoins = Collections.emptyList();
+    List<MemberIdentifier> initialJoins = Collections.emptyList();
-    Set<GMSMember> initialLeaving;
+    Set<MemberIdentifier> initialLeaving;
-    Set<GMSMember> initialRemovals;
+    Set<MemberIdentifier> initialRemovals;
-    synchronized void setInitialView(GMSMembershipView newView, List<GMSMember> newMembers,
-        Set<GMSMember> leaving, Set<GMSMember> removals) {
+    synchronized void setInitialView(GMSMembershipView newView, List<MemberIdentifier> newMembers,
+        Set<MemberIdentifier> leaving, Set<MemberIdentifier> removals) {
-            List<GMSMember> iJoins;
-            Set<GMSMember> iLeaves;
-            Set<GMSMember> iRemoves;
+            List<MemberIdentifier> iJoins;
+            Set<MemberIdentifier> iLeaves;
+            Set<MemberIdentifier> iRemoves;
-    private void markViewCreatorForShutdown(GMSMember viewCreator) {
+    private void markViewCreatorForShutdown(MemberIdentifier viewCreator) {
-        List<GMSMember> newMembers;
+        List<MemberIdentifier> newMembers;
-        for (GMSMember newMember : newMembers) {
+        for (MemberIdentifier newMember : newMembers) {
-      List<GMSMember> joinReqs = new ArrayList<>(10);
-      Map<GMSMember, Integer> joinPorts = new HashMap<>(10);
-      Set<GMSMember> leaveReqs = new HashSet<>(10);
-      List<GMSMember> removalReqs = new ArrayList<>(10);
+      List<MemberIdentifier> joinReqs = new ArrayList<>(10);
+      Map<MemberIdentifier, Integer> joinPorts = new HashMap<>(10);
+      Set<MemberIdentifier> leaveReqs = new HashSet<>(10);
+      List<MemberIdentifier> removalReqs = new ArrayList<>(10);
-      List<GMSMember> oldMembers;
+      List<MemberIdentifier> oldMembers;
-      Set<GMSMember> oldIDs = new HashSet<>();
+      Set<MemberIdentifier> oldIDs = new HashSet<>();
-        GMSMember mbr;
+        MemberIdentifier mbr;
-            GMSMember mbr = ((RemoveMemberMessage) msg).getMemberID();
+            MemberIdentifier mbr = ((RemoveMemberMessage) msg).getMemberID();
-      for (GMSMember mbr : oldIDs) {
+      for (MemberIdentifier mbr : oldIDs) {
-        List<GMSMember> mbrs;
+        List<MemberIdentifier> mbrs;
-          mbrs = new ArrayList<GMSMember>();
+          mbrs = new ArrayList<MemberIdentifier>();
-          mbrs = new ArrayList<GMSMember>(oldMembers);
+          mbrs = new ArrayList<MemberIdentifier>(oldMembers);
-            new HashSet<GMSMember>(removalReqs));
-        for (GMSMember mbr : joinReqs) {
+            new HashSet<MemberIdentifier>(removalReqs));
+        for (MemberIdentifier mbr : joinReqs) {
-      for (GMSMember mbr : joinReqs) {
+      for (MemberIdentifier mbr : joinReqs) {
-    void prepareAndSendView(GMSMembershipView newView, List<GMSMember> joinReqs,
-        Set<GMSMember> leaveReqs, Set<GMSMember> removalReqs)
+    void prepareAndSendView(GMSMembershipView newView, List<MemberIdentifier> joinReqs,
+        Set<MemberIdentifier> leaveReqs, Set<MemberIdentifier> removalReqs)
-          Set<GMSMember> crashes = newView.getActualCrashedMembers(currentView);
+          Set<MemberIdentifier> crashes = newView.getActualCrashedMembers(currentView);
-        Set<GMSMember> unresponsive = prepareProcessor.getUnresponsiveMembers();
+        Set<MemberIdentifier> unresponsive = prepareProcessor.getUnresponsiveMembers();
-        List<GMSMember> failures =
+        List<MemberIdentifier> failures =
-            if (localAddress.getVmKind() != ClusterDistributionManager.LOCATOR_DM_TYPE
-                && conflictingView.getCreator()
+            if (localAddress.getMemberData()
+                .getVmKind() != ClusterDistributionManager.LOCATOR_DM_TYPE
+                && conflictingView.getCreator().getMemberData()
-            failures.addAll((Set<GMSMember>) (Set<?>) conflictingView.getCrashedMembers());
+            failures.addAll((Set<MemberIdentifier>) (Set<?>) conflictingView.getCrashedMembers());
-            List<GMSMember> newMembers = conflictingView.getNewMembers();
+            List<MemberIdentifier> newMembers = conflictingView.getNewMembers();
-              for (GMSMember mbr : newMembers) {
+              for (MemberIdentifier mbr : newMembers) {
-          List<GMSMember> newMembers = new ArrayList<>(newView.getMembers());
+          List<MemberIdentifier> newMembers = new ArrayList<>(newView.getMembers());
-          for (GMSMember mbr : newView.getMembers()) {
+          for (MemberIdentifier mbr : newView.getMembers()) {
-    private void removeHealthyMembers(final Set<GMSMember> suspects)
+    private void removeHealthyMembers(final Set<MemberIdentifier> suspects)
-      List<Callable<GMSMember>> checkers =
+      List<Callable<MemberIdentifier>> checkers =
-      Set<GMSMember> newRemovals = new HashSet<>();
-      Set<GMSMember> newLeaves = new HashSet<>();
+      Set<MemberIdentifier> newRemovals = new HashSet<>();
+      Set<MemberIdentifier> newLeaves = new HashSet<>();
-      for (GMSMember mbr : suspects) {
+      for (MemberIdentifier mbr : suspects) {
-        checkers.add(new Callable<GMSMember>() {
+        checkers.add(new Callable<MemberIdentifier>() {
-          public GMSMember call() throws Exception {
+          public MemberIdentifier call() throws Exception {
-    protected void filterMembers(Collection<GMSMember> mbrs,
-        Set<GMSMember> matchingMembers, short requestType) {
-      Set<GMSMember> requests = getPendingRequestIDs(requestType);
+    protected void filterMembers(Collection<MemberIdentifier> mbrs,
+        Set<MemberIdentifier> matchingMembers, short requestType) {
+      Set<MemberIdentifier> requests = getPendingRequestIDs(requestType);
-        Iterator<GMSMember> itr = requests.iterator();
+        Iterator<MemberIdentifier> itr = requests.iterator();
-          GMSMember memberID = itr.next();
+          MemberIdentifier memberID = itr.next();

MOV26 UPD40 UPD43 UPD74 UPD74 UPD43 UPD43 UPD43 UPD74 MOV74 MOV44 MOV44 MOV44 UPD42 UPD43 UPD43 UPD74 UPD74 UPD43 UPD43 UPD43 UPD43 UPD74 UPD74 UPD74 UPD74 UPD42 UPD74 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD74 UPD42 UPD43 UPD43 UPD74 UPD43 UPD74 UPD74 MOV74 UPD43 UPD74 UPD74 INS74 UPD74 MOV74 UPD42 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 UPD74 UPD74 UPD43 UPD43 UPD43 UPD43 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD43 UPD74 UPD43 UPD43 UPD74 UPD74 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD74 MOV74 UPD43 UPD42 UPD43 UPD74 UPD74 UPD42 UPD74 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 MOV43 INS43 UPD43 UPD74 UPD74 UPD42 UPD74 UPD42 UPD43 UPD74 UPD74 UPD42 UPD74 UPD42 UPD74 MOV74 UPD74 UPD74 MOV74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 MOV74 UPD42 UPD42 INS42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD43 UPD43 UPD43 UPD43 UPD74 INS74 UPD74 MOV74 UPD43 UPD43 UPD74 MOV74 UPD43 UPD42 UPD42 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD43 UPD42 UPD74 UPD42 UPD74 UPD42 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 MOV8 UPD43 UPD42 UPD42 UPD42 UPD42 UPD74 MOV43 INS43 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD74 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD74 UPD42 UPD74 UPD74 UPD43 INS42 UPD42 UPD42 UPD42 UPD74 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD40 UPD42 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 MOV21 UPD43 UPD43 UPD43 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 INS32 UPD42 MOV60 UPD42 UPD42 UPD42 UPD42 UPD42 UPD74 UPD42 UPD42 UPD74 UPD74 UPD42 UPD43 UPD43 UPD42 INS32 UPD42 INS42 UPD42 UPD74 UPD42 UPD74 MOV42 INS42 UPD74 UPD74 UPD43 UPD43 UPD43 UPD43 UPD42 UPD42 INS32 INS42 UPD43 UPD43 UPD43 UPD74 UPD74 MOV59 UPD74 MOV59 UPD74 UPD74 INS42 UPD43 UPD42 UPD74 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 MOV42 INS42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 INS22 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD74 UPD42 MOV52 MOV42 INS32 MOV32 INS42 UPD43 UPD43 INS32 UPD42 INS42 INS32 INS32 MOV42 INS42 UPD42 UPD42 UPD42 INS32 INS42 MOV42 INS42 MOV42 INS42 UPD42 MOV42 INS42 DEL42 DEL43 DEL22 DEL11 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74