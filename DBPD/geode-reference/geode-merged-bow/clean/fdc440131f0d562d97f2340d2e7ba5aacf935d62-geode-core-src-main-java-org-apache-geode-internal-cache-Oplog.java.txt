GEODE-8029: Allow OplogEntryIdSet to Overflow (#5329)

Do not delete drf files during member startup as that should be only
done by the compactor thread. Instead, allow the OplogEntryIdSet to
grow over the default capacity and log a warning message instructing
the user to manually compact the disk-stores.

- Added unit tests.
- Replaced usages of 'junit.Assert' by 'assertj'.
- Modified DiskStoreImpl.deadRecordCount to return long instead of int.
- Added internal overflow implementation to the OplogEntryIdSet so it can
  grow above the default limit.
+        // I don't think the drf needs to be opened. It is only used during recovery.
+        // At some point the compacter may identify that it can be deleted.
-
-        // The drf file needs to be deleted (see GEODE-8029).
-        // If compaction is not enabled, or if the compaction-threshold is never reached, there
-        // will be orphaned drf files that are not automatically deleted (unless a manual
-        // compaction is executed), in which case a later recovery might fail when the amount of
-        // deleted records is too high (805306401).
-        setHasDeletes(false);
-        deleteDRF();
-

DEL42 DEL9 DEL32 DEL21 DEL42 DEL32 DEL21