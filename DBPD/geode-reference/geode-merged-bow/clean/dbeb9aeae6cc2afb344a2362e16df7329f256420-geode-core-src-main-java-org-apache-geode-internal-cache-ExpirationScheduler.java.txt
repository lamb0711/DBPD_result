Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * ExpirationScheduler uses a single instance of java.util.Timer (and
- * therefore a single thread) per VM to schedule and execute region and 
- * entry expiration tasks.
+ * ExpirationScheduler uses a single instance of java.util.Timer (and therefore a single thread) per
+ * VM to schedule and execute region and entry expiration tasks.
-public class ExpirationScheduler
-  {
+public class ExpirationScheduler {
-    private static final int MAX_PENDING_CANCELS = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "MAX_PENDING_CANCELS", 10000).intValue();
+  private static final int MAX_PENDING_CANCELS = Integer
+      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "MAX_PENDING_CANCELS", 10000).intValue();
-  
+
+
-   * Called when we have cancelled a scheduled timer task.
-   * Do work, if possible to fix bug 37574.
+   * Called when we have cancelled a scheduled timer task. Do work, if possible to fix bug 37574.
-//        int purgedCancels = CFactory.timerPurge(this.timer);
+        // int purgedCancels = CFactory.timerPurge(this.timer);
-//         // take the diff between the number of actual cancels we purged
-//         // "purgedCancels" and the number we said we would purge "pc".
-//         int diff = purgedCancels - pc;
+        // // take the diff between the number of actual cancels we purged
+        // // "purgedCancels" and the number we said we would purge "pc".
+        // int diff = purgedCancels - pc;
-  
+
-      if(logger.isTraceEnabled()) {
-        logger.trace(LocalizedMessage.create(LocalizedStrings.ExpirationScheduler_SCHEDULING__0__TO_FIRE_IN__1__MS, new Object[] {task, Long.valueOf(task.getExpiryMillis())}));
+      if (logger.isTraceEnabled()) {
+        logger.trace(LocalizedMessage.create(
+            LocalizedStrings.ExpirationScheduler_SCHEDULING__0__TO_FIRE_IN__1__MS,
+            new Object[] {task, Long.valueOf(task.getExpiryMillis())}));
-    }
-    catch (EntryNotFoundException e) {
+    } catch (EntryNotFoundException e) {
-    }
-    catch (IllegalStateException e) {
+    } catch (IllegalStateException e) {
-  
+

UPD66 UPD66 UPD66 DEL66 DEL66