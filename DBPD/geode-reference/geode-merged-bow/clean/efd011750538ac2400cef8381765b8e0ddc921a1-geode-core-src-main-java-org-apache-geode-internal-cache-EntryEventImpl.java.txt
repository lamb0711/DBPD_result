Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/incubator-geode into develop

-    return OffHeapHelper.getHeapForm(OffHeapHelper.copyIfNeeded(basicGetNewValue()));
+    Object result = basicGetNewValue();
+    if (mayHaveOffHeapReferences()) {
+      result = OffHeapHelper.copyIfNeeded(result);
+    }
+    return result;
-    if (this.offHeapOk) {
-      OffHeapHelper.releaseAndTrackOwner(this.newValue, this);
-    }
-    if (isOffHeapReference(v)) {
-      ReferenceCountHelper.setReferenceCountOwner(this);
-      if (!((StoredObject) v).retain()) {
-        ReferenceCountHelper.setReferenceCountOwner(null);
-        this.newValue = null;
-        return;
+    if (mayHaveOffHeapReferences()) {
+      if (this.offHeapOk) {
+        OffHeapHelper.releaseAndTrackOwner(this.newValue, this);
-      ReferenceCountHelper.setReferenceCountOwner(null);
+      if (StoredObject.isOffHeapReference(v)) {
+        ReferenceCountHelper.setReferenceCountOwner(this);
+        if (!((StoredObject) v).retain()) {
+          ReferenceCountHelper.setReferenceCountOwner(null);
+          this.newValue = null;
+          return;
+        }
+        ReferenceCountHelper.setReferenceCountOwner(null);
+      }
-  /**
-   * Returns true if this event has a reference to an off-heap new or old value.
-   */
-  public boolean hasOffHeapValue() {
-    return isOffHeapReference(this.newValue) || isOffHeapReference(this.oldValue);
-  }
-  private static boolean isOffHeapReference(Object ref) {
-    return (ref instanceof StoredObject) && ((StoredObject)ref).hasRefCount();
+  private boolean isOffHeapReference(Object ref) {
+    return mayHaveOffHeapReferences() && StoredObject.isOffHeapReference(ref);
-    if (this.offHeapOk) {
+    if (this.offHeapOk && mayHaveOffHeapReferences()) {
-    return OffHeapHelper.getHeapForm(OffHeapHelper.copyIfNeeded(basicGetOldValue()));
+    Object result = basicGetOldValue();
+    if (mayHaveOffHeapReferences()) {
+      result = OffHeapHelper.copyIfNeeded(result);
+    }
+    return result;
-    if (result instanceof StoredObject) {
+    if (mayHaveOffHeapReferences() && result instanceof StoredObject) {
-    if (result instanceof StoredObject) {
+    if (mayHaveOffHeapReferences() && result instanceof StoredObject) {
-  private static StoredObject convertToStoredObject(final Object tmp) {
+  private StoredObject convertToStoredObject(final Object tmp) {
+    if (!mayHaveOffHeapReferences()) {
+      return null;
+    }
-      tx.setPendingValue(OffHeapHelper.copyIfNeeded(v));
+      Object pv = v;
+      if (mayHaveOffHeapReferences()) {
+        pv = OffHeapHelper.copyIfNeeded(v);
+      }
+      tx.setPendingValue(pv);
-        OffHeapHelper.releaseWithNoTracking(v);
+        if (mayHaveOffHeapReferences()) {
+          OffHeapHelper.releaseWithNoTracking(v);
+        }
-      if (isOffHeapReference(cd)) {
+      if (event.isOffHeapReference(cd)) {
+    if (!mayHaveOffHeapReferences()) {
+      return;
+    }
+  /**
+   * Return true if this EntryEvent may have off-heap references.
+   */
+  private boolean mayHaveOffHeapReferences() {
+    LocalRegion lr = this.region;
+    if (lr != null) {
+      return lr.getOffHeap();
+    }
+    // if region field is null it is possible that we have off-heap values
+    return true;
+  }
+
-      throw new IllegalStateException("This event does not support off-heap values");
+      throw new IllegalStateException("This event already has off-heap values");
+    if (!mayHaveOffHeapReferences()) {
+      this.offHeapOk = false;
+      return;
+    }
-      if (isOffHeapReference(ov)) {
+      if (StoredObject.isOffHeapReference(ov)) {
-      if (isOffHeapReference(nv)) {
+      if (StoredObject.isOffHeapReference(nv)) {
-      if (isOffHeapReference(this.newValue) || isOffHeapReference(this.oldValue)) {
+      if (StoredObject.isOffHeapReference(this.newValue) || StoredObject.isOffHeapReference(this.oldValue)) {

MOV31 MOV31 MOV31 UPD83 UPD42 MOV44 MOV29 UPD83 UPD83 MOV43 UPD42 INS29 UPD83 INS39 UPD42 INS60 INS25 INS41 INS25 INS60 INS25 INS41 INS25 INS25 INS65 INS60 INS25 INS41 INS25 INS43 INS59 INS32 INS8 INS42 INS32 INS8 UPD27 INS27 INS43 INS59 INS32 INS8 INS42 INS27 INS27 INS38 INS8 INS8 INS38 INS8 INS66 INS43 INS59 INS27 INS8 INS9 INS38 INS8 INS42 INS42 MOV32 UPD42 MOV42 INS21 INS42 MOV25 MOV25 MOV22 INS32 UPD42 MOV42 INS42 INS32 INS42 INS21 INS32 MOV62 INS32 MOV62 INS32 INS41 INS60 INS25 INS21 INS32 INS41 INS42 INS42 INS22 INS42 INS33 INS41 INS32 INS21 INS41 INS7 UPD42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS33 INS43 INS59 INS32 MOV8 INS32 INS8 INS42 INS42 INS52 INS42 INS32 INS42 INS7 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS25 INS42 UPD42 MOV42 UPD45 INS22 INS9 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS7 INS32 MOV8 INS52 INS42 INS42 INS42 INS42 MOV32 INS42 DEL42 DEL32 DEL32 DEL41 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL39 DEL42 DEL43 DEL62 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL32 DEL27 DEL41 DEL83 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL41