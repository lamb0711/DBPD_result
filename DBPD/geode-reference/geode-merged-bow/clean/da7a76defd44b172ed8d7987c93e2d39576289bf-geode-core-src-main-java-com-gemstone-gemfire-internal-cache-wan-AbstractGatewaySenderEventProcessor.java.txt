Merge branch 'develop' into feature/GEODE-17-2

-import com.gemstone.gemfire.cache.client.internal.Connection;
-import com.gemstone.gemfire.cache.client.internal.pooling.ConnectionDestroyedException;
-import com.gemstone.gemfire.internal.Version;
+
+  /**
+   * The batchSize is the batch size being used by this processor. By default, it is the
+   * configured batch size of the GatewaySender. It may be automatically reduced if a
+   * MessageTooLargeException occurs.
+   */
+  private int batchSize;
+    this.batchSize = sender.getBatchSize();
+  protected int getBatchSize() {
+    return this.batchSize;
+  }
+
+  protected void setBatchSize(int batchSize) {
+    int currentBatchSize = this.batchSize;
+    if (batchSize <= 0) {
+      this.batchSize = 1;
+      logger.warn(LocalizedMessage.create(
+          LocalizedStrings.AbstractGatewaySenderEventProcessor_ATTEMPT_TO_SET_BATCH_SIZE_FAILED, new Object[] { currentBatchSize, batchSize }));
+    } else {
+      this.batchSize = batchSize;
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.AbstractGatewaySenderEventProcessor_SET_BATCH_SIZE, new Object[] { currentBatchSize, this.batchSize }));
+    }
+  }
+
-    final int batchSize = sender.getBatchSize();
-          logger.debug("Attempting to peek a batch of {} events", batchSize);
+          logger.debug("Attempting to peek a batch of {} events", this.batchSize);
-            events = this.queue.peek(batchSize, batchTimeInterval);
+            events = this.queue.peek(this.batchSize, batchTimeInterval);
+
+          // If the exception has been set and its cause is an IllegalStateExcetption,
+          // remove all events whose serialized value is no longer available
+          if (this.exception != null && this.exception.getCause() != null
+              && this.exception.getCause() instanceof IllegalStateException) {
+            for (Iterator<GatewaySenderEventImpl> i = filteredList.iterator(); i.hasNext();) {
+              GatewaySenderEventImpl event = i.next();
+              if (event.isSerializedValueNotAvailable()) {
+                i.remove();
+              }
+            }
+            this.exception = null;
+          }
+
+          // Filter the events

INS23 INS31 INS31 INS29 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS65 INS42 INS21 INS41 INS39 INS42 INS60 INS25 INS66 INS66 INS66 INS7 INS22 INS39 INS59 INS27 INS8 INS8 INS22 MOV32 INS52 INS42 INS42 INS22 INS42 INS34 INS21 INS21 INS21 INS21 INS52 INS42 INS52 INS42 INS7 INS32 INS7 INS32 INS22 INS34 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS40 INS3 INS52 INS42 INS42 INS42 INS40 INS3 INS5 INS4 INS5 INS4 INS25 INS43 INS85 INS42 INS42 INS43 INS85 INS42 INS22 INS27 INS8 INS42 INS42 INS52 INS42 INS22 INS27 INS62 INS24 INS21 INS52 INS42 INS27 INS27 INS32 INS43 INS58 INS32 INS8 INS7 INS22 INS33 INS32 INS33 INS22 INS42 INS42 INS74 INS59 INS42 INS42 INS60 INS25 INS22 INS33 INS22 INS52 INS42 INS22 INS42 INS52 INS42 INS43 INS43 INS42 INS32 INS43 INS59 INS32 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42