Geode 7424 create index (#4458)

co-authored-by: Jinmei Liao <jliao@pivotal.io>

+import static org.apache.geode.management.configuration.Index.INDEXES;
-import org.apache.geode.management.runtime.RuntimeInfo;
+import org.apache.geode.management.runtime.IndexInfo;
-  public static final String INDEXES = "/indexes";
-  public ClusterManagementListResult<Index, RuntimeInfo> listIndex(
+  public ClusterManagementListResult<Index, IndexInfo> listIndex(
-  public ClusterManagementListResult<Index, RuntimeInfo> listAllIndex(
+  public ClusterManagementListResult<Index, IndexInfo> listAllIndex(
-  public ClusterManagementGetResult<Index, RuntimeInfo> getIndex(
+  public ClusterManagementGetResult<Index, IndexInfo> getIndex(
+
+  @ApiOperation(value = "create index")
+  @ApiResponses({
+      @ApiResponse(code = 400, message = "Bad request."),
+      @ApiResponse(code = 409, message = "Index already exists."),
+      @ApiResponse(code = 500, message = "Internal error.")})
+  @PreAuthorize("@securityService.authorize('CLUSTER', 'MANAGE', 'QUERY')")
+  @PostMapping(INDEXES)
+  public ResponseEntity<ClusterManagementResult> createIndex(
+      @RequestBody Index indexConfig) {
+    ClusterManagementResult result =
+        clusterManagementService.create(indexConfig);
+    return new ResponseEntity<>(result,
+        HttpStatus.CREATED);
+  }
+
+  @ApiOperation(value = "create region index")
+  @ApiResponses({
+      @ApiResponse(code = 400, message = "Bad request."),
+      @ApiResponse(code = 409, message = "Index already exists."),
+      @ApiResponse(code = 500, message = "Internal error.")})
+  @PreAuthorize("@securityService.authorize('CLUSTER', 'MANAGE', 'QUERY')")
+  @PostMapping(REGION_CONFIG_ENDPOINT + "/{regionName}" + INDEXES)
+  public ResponseEntity<ClusterManagementResult> createIndexOnRegion(
+      @RequestBody Index indexConfig, @PathVariable String regionName) {
+    if (indexConfig.getRegionName() == null) {
+      indexConfig.setRegionPath(regionName);
+    } else if (!regionName.equals(indexConfig.getRegionName())) {
+      throw new IllegalArgumentException(
+          "Region name in path must match Region name in configuration");
+    }
+    ClusterManagementResult result =
+        clusterManagementService.create(indexConfig);
+    return new ResponseEntity<>(result,
+        HttpStatus.CREATED);
+  }

INS26 INS40 UPD40 INS31 INS31 UPD74 UPD74 UPD74 INS77 INS79 INS79 INS79 INS83 INS74 INS42 INS44 INS8 INS77 INS79 INS79 INS79 INS83 INS74 INS42 INS44 INS44 INS8 UPD43 UPD43 UPD43 INS42 INS80 INS42 INS4 INS42 INS45 INS42 INS42 INS43 INS43 INS78 INS43 INS42 INS60 INS41 INS42 INS80 INS42 INS4 INS42 INS45 INS42 INS27 INS43 INS43 INS78 INS43 INS42 INS78 INS43 INS42 INS25 INS60 INS41 UPD42 UPD42 UPD42 INS42 INS45 INS77 INS77 INS77 INS42 INS42 INS42 INS42 INS43 INS59 INS14 INS42 INS45 INS77 INS77 INS77 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS27 INS8 INS25 INS43 INS59 INS14 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS42 INS32 INS74 INS42 INS40 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS80 INS80 INS32 INS33 INS21 INS38 INS8 INS42 INS42 INS32 INS74 INS42 INS40 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS42 INS32 INS32 INS53 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS43 INS45 INS42 DEL83 DEL83 DEL83 DEL43 DEL42 DEL45 DEL59 DEL23