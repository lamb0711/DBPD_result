GEODE-4893: Improve reloading the cluster configuration on existing vanilla servers


+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.distributed.ClusterConfigurationService;
-    InternalLocator locator = InternalLocator.getLocator();
+    InternalClusterConfigurationService sc =
+        (InternalClusterConfigurationService) getConfigurationService();
-    if (!locator.isSharedConfigurationRunning()) {
-      ErrorResultData errorData = ResultBuilder.createErrorResultData();
-      errorData.addLine(CliStrings.SHARED_CONFIGURATION_NOT_STARTED);
-      return ResultBuilder.buildResult(errorData);
+    if (sc == null) {
+      return ResultBuilder.createGemFireErrorResult(CliStrings.SHARED_CONFIGURATION_NOT_STARTED);
-    Set<String> regionsWithData = servers.stream().map(this::getRegionNamesOnServer)
-        .flatMap(Collection::stream).collect(toSet());
+    // check if running servers are vanilla servers
+    if (servers.size() > 0) {
+      Set<String> groupNames = sc.getConfigurationRegion().keySet();
+      for (String groupName : groupNames) {
+        CacheConfig cacheConfig = sc.getCacheConfig(groupName);
+        if (cacheConfig.getRegion().size() > 0 || cacheConfig.getAsyncEventQueue().size() > 0
+            || cacheConfig.getDiskStore().size() > 0
+            || cacheConfig.getCustomCacheElements().size() > 0
+            || cacheConfig.getJndiBindings().size() > 0 || cacheConfig.getGatewayReceiver() != null
+            || cacheConfig.getGatewaySender().size() > 0) {
+          return ResultBuilder.createGemFireErrorResult(
+              "Running servers have existing cluster configuration applied already.");
+        }
+      }
-    if (!regionsWithData.isEmpty()) {
-      return ResultBuilder
-          .createGemFireErrorResult("Cannot import cluster configuration with existing regions: "
-              + regionsWithData.stream().collect(joining(",")));
+      // further checks in case any servers has regions not defined by the cluster configuration to
+      // avoid data loss.
+      Set<String> serverRegionNames = servers.stream().map(this::getRegionNamesOnServer)
+          .flatMap(Collection::stream).collect(toSet());
+
+      if (!serverRegionNames.isEmpty()) {
+        return ResultBuilder
+            .createGemFireErrorResult("Cannot import cluster configuration with existing regions: "
+                + serverRegionNames.stream().collect(joining(",")));
+      }
-    InternalClusterConfigurationService sc = locator.getSharedConfiguration();
-
-    Set<CliFunctionResult> functionResults =
-        servers.stream().map(this::reCreateCache).collect(toSet());
+    if (servers.size() > 0) {
+      List<CliFunctionResult> functionResults =
+          executeAndGetFunctionResult(new RecreateCacheFunction(), null, servers);
-    for (CliFunctionResult functionResult : functionResults) {
-      if (functionResult.isSuccessful()) {
-        infoData.addLine("Successfully applied the imported cluster configuration on "
-            + functionResult.getMemberIdOrName());
-      } else {
-        infoData.addLine("Failed to apply the imported cluster configuration on "
-            + functionResult.getMemberIdOrName() + " due to " + functionResult.getMessage());
+      for (CliFunctionResult functionResult : functionResults) {
+        if (functionResult.isSuccessful()) {
+          infoData.addLine("Successfully applied the imported cluster configuration on "
+              + functionResult.getMemberIdOrName());
+        } else {
+          infoData.addLine("Failed to apply the imported cluster configuration on "
+              + functionResult.getMemberIdOrName() + " due to " + functionResult.getMessage());
+        }
-  private CliFunctionResult reCreateCache(DistributedMember server) {
-    ResultCollector rc = executeFunction(new RecreateCacheFunction(), null, server);
-    List<CliFunctionResult> results = (List<CliFunctionResult>) rc.getResult();
-
-    return results.get(0);
-  }
-

INS26 INS26 INS40 INS40 INS25 INS25 INS25 UPD43 INS27 INS8 INS27 INS8 INS27 INS8 UPD42 UPD42 INS11 INS42 INS33 INS41 INS32 INS34 INS60 INS70 MOV60 MOV25 INS32 INS34 MOV60 MOV70 MOV43 INS32 INS32 INS42 INS42 INS74 INS59 INS44 INS42 INS8 UPD42 MOV42 UPD42 MOV42 MOV74 UPD42 MOV42 INS42 INS42 INS40 INS43 INS43 INS42 INS32 INS43 INS42 MOV60 INS25 UPD42 MOV43 INS42 INS42 INS32 INS42 INS42 UPD43 INS27 INS8 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV14 INS33 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS27 INS27 MOV41 UPD42 UPD42 INS42 INS27 INS27 INS32 INS34 INS27 INS27 INS32 INS33 INS32 INS42 UPD42 INS45 INS27 INS27 INS32 INS34 INS42 INS42 INS42 INS42 UPD42 INS27 INS27 INS32 INS34 INS32 INS42 INS27 INS27 INS32 INS34 INS32 INS42 INS42 INS42 INS32 INS34 INS32 INS34 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 DEL42 DEL32 DEL32 DEL38 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL52 DEL42 DEL90 DEL32 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL33 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL41 DEL8 DEL31