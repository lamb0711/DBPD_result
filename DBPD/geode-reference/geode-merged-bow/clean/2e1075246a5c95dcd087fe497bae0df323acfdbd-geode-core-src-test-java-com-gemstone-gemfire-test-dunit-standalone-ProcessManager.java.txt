Merge branch 'release/1.0.0-incubating.M3'

-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.PrintStream;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.distributed.internal.InternalLocator;
+import com.gemstone.gemfire.internal.FileUtil;
+import org.apache.commons.io.FileUtils;
+
+import java.io.*;
+import java.util.ArrayList;
-import org.apache.commons.io.FileUtils;
-
-import com.gemstone.gemfire.internal.FileUtil;
-import com.gemstone.gemfire.internal.logging.LogService;
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
-  
-  public void launchVMs() throws IOException, NotBoundException {
-    log4jConfig = LogService.findLog4jConfigInCurrentDir();
-  }
-    if(processes.containsKey(vmNum)) {
+    if (processes.containsKey(vmNum)) {
-    
+
-    } catch(IOException e) {
+    } catch (IOException e) {
-      System.err.println("Unable to delete " + workingDir + ". Currently contains " 
-                          + Arrays.asList(workingDir.list()));
+      System.err.println("Unable to delete " + workingDir + ". Currently contains "
+          + Arrays.asList(workingDir.list()));
-    
+
-  
+
-    for(ProcessHolder process : processes.values()) {
-      if(process != null) {
+    for (ProcessHolder process : processes.values()) {
+      if (process != null) {
-  
+
-    for(ProcessHolder process : processes.values()) {
-      if(process != null && process.isAlive()) {
+    for (ProcessHolder process : processes.values()) {
+      if (process != null && process.isAlive()) {
-  
+
-    if(!processes.containsKey(vmNum)) {
+    if (!processes.containsKey(vmNum)) {
-   
+
-        String vmName = (vmNum==-2)? "[locator]" : "[vm_"+vmNum+"]";
+        String vmName = (vmNum == -2) ? "[locator]" : "[vm_" + vmNum + "]";
-          while(line != null) {
+          while (line != null) {
-        } catch(Exception e) {
-          if(!holder.isKilled()) {
+        } catch (Exception e) {
+          if (!holder.isKilled()) {
-    String cmd = System.getProperty( "java.home" ) + File.separator + "bin" + File.separator + "java";
+    String cmd = System.getProperty("java.home") + File.separator + "bin" + File.separator + "java";
+    ArrayList<String> cmds = new ArrayList<String>();
+    cmds.add(cmd);
+    cmds.add("-classpath");
+    cmds.add(classPath);
+    cmds.add("-D" + DUnitLauncher.RMI_PORT_PARAM + "=" + namingPort);
+    cmds.add("-D" + DUnitLauncher.VM_NUM_PARAM + "=" + vmNum);
+    cmds.add("-D" + DUnitLauncher.WORKSPACE_DIR_PARAM + "=" + new File(".").getAbsolutePath());
+    if (vmNum >= 0) { // let the locator print a banner
+      cmds.add("-D" + InternalLocator.INHIBIT_DM_BANNER + "=true");
+    }
+    cmds.add("-D"+LOG_LEVEL+"=" + DUnitLauncher.logLevel);
+    if (DUnitLauncher.LOG4J != null) {
+      cmds.add("-Dlog4j.configurationFile=" + DUnitLauncher.LOG4J);
+    }
+    cmds.add("-Djava.library.path=" + System.getProperty("java.library.path"));
+    cmds.add("-Xrunjdwp:transport=dt_socket,server=y,suspend=" + jdkSuspend + jdkDebug);
+    cmds.add("-XX:+HeapDumpOnOutOfMemoryError");
+    cmds.add("-Xmx512m");
+    cmds.add("-D" + DistributionConfig.GEMFIRE_PREFIX + "DEFAULT_MAX_OPLOG_SIZE=10");
+    cmds.add("-D" + DistributionConfig.GEMFIRE_PREFIX + "disallowMcastDefaults=true");
+    cmds.add("-ea");
+    cmds.add("-XX:+PrintGC");
+    cmds.add("-XX:+PrintGCDetails");
+    cmds.add("-XX:+PrintGCTimeStamps");
+    cmds.add(agent);
+    cmds.add(ChildVM.class.getName());
+    String[] rst = new String[cmds.size()];
+    cmds.toArray(rst);
-    return new String[] {
-      cmd, "-classpath", classPath,
-      "-D" + DUnitLauncher.RMI_PORT_PARAM + "=" + namingPort,
-      "-D" + DUnitLauncher.VM_NUM_PARAM + "=" + vmNum,
-      "-D" + DUnitLauncher.WORKSPACE_DIR_PARAM + "=" + new File(".").getAbsolutePath(),
-      "-DlogLevel=" + DUnitLauncher.LOG_LEVEL,
-      "-Djava.library.path=" + System.getProperty("java.library.path"),
-      "-Xrunjdwp:transport=dt_socket,server=y,suspend=" + jdkSuspend + jdkDebug,
-      "-XX:+HeapDumpOnOutOfMemoryError",
-      "-Xmx512m",
-      "-Dgemfire.DEFAULT_MAX_OPLOG_SIZE=10",
-      "-Dgemfire.disallowMcastDefaults=true",
-      "-ea",
-        "-XX:+PrintGC", "-XX:+PrintGCDetails","-XX:+PrintGCTimeStamps",
-      agent,
-      ChildVM.class.getName()
-    };
+    return rst;
-  
+
-      for(String arg: runtimeBean.getInputArguments()) {
-        if(arg.contains("-javaagent:")) {
+      for (String arg : runtimeBean.getInputArguments()) {
+        if (arg.contains("-javaagent:")) {
-    
+
-  
+
-    while(pendingVMs > 0) {
+    while (pendingVMs > 0) {
-      if(remaining <= 0) {
+      if (remaining <= 0) {
-    
+
-  
+
-    
+
-      
+
-    
+

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS25 INS21 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS21 INS41 INS74 INS59 INS32 INS32 INS32 INS32 INS32 INS32 INS27 INS8 INS32 INS27 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV5 INS59 INS32 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 MOV27 INS42 INS42 MOV27 INS42 INS42 MOV27 INS42 INS34 INS21 INS42 INS42 INS27 INS40 INS33 INS21 INS42 INS42 MOV27 INS42 INS42 MOV27 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS45 INS42 INS45 INS40 INS32 INS45 INS40 INS45 INS45 INS40 INS45 INS5 INS32 INS43 INS43 INS42 INS42 INS27 INS42 INS42 INS27 INS43 INS85 INS42 INS42 INS42 INS42 INS45 INS40 INS45 UPD45 MOV45 UPD40 MOV40 INS42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL45 DEL42 DEL27 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL42 DEL4 DEL3 DEL41