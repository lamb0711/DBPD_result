Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public void aggregate(FederationComponent newComp,
-      FederationComponent oldComp) {
+  public void aggregate(FederationComponent newComp, FederationComponent oldComp) {
-    Map<String, Object> newState = (newComp != null ? newComp.getObjectState()
-        : null);
+    Map<String, Object> newState = (newComp != null ? newComp.getObjectState() : null);
-        for (Map.Entry<String, Class<?>> typeEntry: typeMap.entrySet()) {
+        for (Map.Entry<String, Class<?>> typeEntry : typeMap.entrySet()) {
-                oldVal =  new Integer(0);
+                oldVal = new Integer(0);
-            if(oldVal != null){
+            if (oldVal != null) {
-        if(logger.fineEnabled()){
-          logger.fine("Exception while processing attribute " + attribute);
-          logger.fine(e);
-        }
+      if (logger.fineEnabled()) {
+        logger.fine("Exception while processing attribute " + attribute);
+        logger.fine(e);
+      }
-  public void decLong(String attributeName,Long oldVal) {
+  public void decLong(String attributeName, Long oldVal) {
-  public void decInt(String attributeName,Integer oldVal) {
+  public void decInt(String attributeName, Integer oldVal) {
-  public void decFloat(String attributeName,Float oldVal) {
+  public void decFloat(String attributeName, Float oldVal) {
-  public void decDouble(String attributeName,Double oldVal) {
+  public void decDouble(String attributeName, Double oldVal) {

