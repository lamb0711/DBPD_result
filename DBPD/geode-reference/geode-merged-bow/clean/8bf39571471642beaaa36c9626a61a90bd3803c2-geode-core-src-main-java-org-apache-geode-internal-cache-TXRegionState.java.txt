Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-/** TXRegionState is the entity that tracks all the changes a transaction
- * has made to a region.
+/**
+ * TXRegionState is the entity that tracks all the changes a transaction has made to a region.
-  
+
-   * For Distributed Tx
-   * Created during precommit, to apply changes on secondaries/replicates from coordinator.
+   * For Distributed Tx Created during precommit, to apply changes on secondaries/replicates from
+   * coordinator.
-  public TXRegionState(LocalRegion r,TXState txState) 
-  {
-    if (r.getPersistBackup() && !r.isMetaRegionWithTransactions() && !TXManagerImpl.ALLOW_PERSISTENT_TRANSACTIONS) {
-      throw new UnsupportedOperationException(LocalizedStrings.TXRegionState_OPERATIONS_ON_PERSISTBACKUP_REGIONS_ARE_NOT_ALLOWED_BECAUSE_THIS_THREAD_HAS_AN_ACTIVE_TRANSACTION.toLocalizedString());
+  public TXRegionState(LocalRegion r, TXState txState) {
+    if (r.getPersistBackup() && !r.isMetaRegionWithTransactions()
+        && !TXManagerImpl.ALLOW_PERSISTENT_TRANSACTIONS) {
+      throw new UnsupportedOperationException(
+          LocalizedStrings.TXRegionState_OPERATIONS_ON_PERSISTBACKUP_REGIONS_ARE_NOT_ALLOWED_BECAUSE_THIS_THREAD_HAS_AN_ACTIVE_TRANSACTION
+              .toLocalizedString());
-      throw new UnsupportedOperationException(LocalizedStrings.TXRegionState_OPERATIONS_ON_GLOBAL_REGIONS_ARE_NOT_ALLOWED_BECAUSE_THIS_THREAD_HAS_AN_ACTIVE_TRANSACTION.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.TXRegionState_OPERATIONS_ON_GLOBAL_REGIONS_ARE_NOT_ALLOWED_BECAUSE_THIS_THREAD_HAS_AN_ACTIVE_TRANSACTION
+              .toLocalizedString());
-//      throw new UnsupportedOperationException(LocalizedStrings.TXRegionState_OPERATIONS_ON_REGION_WITH_CLIENT_POOL_ARE_NOT_ALLOWED_BECAUSE_THIS_THREAD_HAS_AN_ACTIVE_TRANSACTION.toLocalizedString());
+      // throw new
+      // UnsupportedOperationException(LocalizedStrings.TXRegionState_OPERATIONS_ON_REGION_WITH_CLIENT_POOL_ARE_NOT_ALLOWED_BECAUSE_THIS_THREAD_HAS_AN_ACTIVE_TRANSACTION.toLocalizedString());
-  
+
-  
+
-  
-  
+
+
+
-  public TXEntryState createReadEntry(LocalRegion r, Object entryKey, RegionEntry re, Object vId, Object pendingValue) {
+
+  public TXEntryState createReadEntry(LocalRegion r, Object entryKey, RegionEntry re, Object vId,
+      Object pendingValue) {
-      isDistributed = cache.getTxManager().getTXState().isDistTx(); 
-    }
-    else {
+      isDistributed = cache.getTxManager().getTXState().isDistTx();
+    } else {
-    TXEntryState result = cache.getTXEntryStateFactory().createEntry(re, vId, pendingValue, entryKey, this, isDistributed);
+    TXEntryState result = cache.getTXEntryStateFactory().createEntry(re, vId, pendingValue,
+        entryKey, this, isDistributed);
-//   public void rmEntry(Object entryKey, TXState txState, LocalRegion r) {
-//     rmEntryUserAttr(entryKey);
-//     TXEntryState e = (TXEntryState)this.entryMods.remove(entryKey);
-//     if (e != null) {
-//       e.cleanup(r);
-//     }
-//     if (this.uaMods == null && this.entryMods.size() == 0) {
-//       txState.rmRegion(r);
-//     }
-//   }
+  // public void rmEntry(Object entryKey, TXState txState, LocalRegion r) {
+  // rmEntryUserAttr(entryKey);
+  // TXEntryState e = (TXEntryState)this.entryMods.remove(entryKey);
+  // if (e != null) {
+  // e.cleanup(r);
+  // }
+  // if (this.uaMods == null && this.entryMods.size() == 0) {
+  // txState.rmRegion(r);
+  // }
+  // }
-      result = (TXEntryUserAttrState)this.uaMods.get(entryKey);
+      result = (TXEntryUserAttrState) this.uaMods.get(entryKey);
+
-    TXEntryUserAttrState result = (TXEntryUserAttrState)this.uaMods.get(entryKey);
+    TXEntryUserAttrState result = (TXEntryUserAttrState) this.uaMods.get(entryKey);
+
-   * Returns the total number of modifications made by this transaction
-   * to this region's entry count. The result will have a +1 for every
-   * create and a -1 for every destroy.
+   * Returns the total number of modifications made by this transaction to this region's entry
+   * count. The result will have a +1 for every create and a -1 for every destroy.
-      TXEntryState es = (TXEntryState)it.next();
+      TXEntryState es = (TXEntryState) it.next();
-  
+
-   * @param ret the HashSet to fill in with key objects 
+   * 
+   * @param ret the HashSet to fill in with key objects
+
-      this.txState.logger.debug("TXRegionState.createLockRequest 1 "
-          + r.getClass().getSimpleName() + " region-state=" + this);
+      this.txState.logger.debug("TXRegionState.createLockRequest 1 " + r.getClass().getSimpleName()
+          + " region-state=" + this);
-      DistributedRegion dr = (DistributedRegion)r;
+      DistributedRegion dr = (DistributedRegion) r;
-    //Bypass D-lock for Pr TX
+    // Bypass D-lock for Pr TX
-      //BucketRegion br = (BucketRegion)r;
-      //if (br.getRedundancyLevel() < 2) {
-        byPassDLock = true;
-      //}
+      // BucketRegion br = (BucketRegion)r;
+      // if (br.getRedundancyLevel() < 2) {
+      byPassDLock = true;
+      // }
-    if (this.uaMods != null
-        || (!distributedTX && this.entryMods.size() > 0)) {
+    if (this.uaMods != null || (!distributedTX && this.entryMods.size() > 0)) {
+
-   * Returns a set of entry keys that this tx needs to request
-   * a lock for at commit time.
+   * Returns a set of entry keys that this tx needs to request a lock for at commit time.
+   * 
-      Map.Entry me = (Map.Entry)it.next();
-      TXEntryState txes = (TXEntryState)me.getValue();
+      Map.Entry me = (Map.Entry) it.next();
+      TXEntryState txes = (TXEntryState) me.getValue();
-    
+
-        Map.Entry me = (Map.Entry)it.next();
+        Map.Entry me = (Map.Entry) it.next();
-        TXEntryState txes = (TXEntryState)me.getValue();
+        TXEntryState txes = (TXEntryState) me.getValue();
-        Map.Entry me = (Map.Entry)it.next();
+        Map.Entry me = (Map.Entry) it.next();
-        TXEntryUserAttrState txes = (TXEntryUserAttrState)me.getValue();
+        TXEntryUserAttrState txes = (TXEntryUserAttrState) me.getValue();
-   * For each entry that is not dirty (all we did was read it)
-   * decrement its refcount (so it can be evicted as we apply our writes)
-   * and remove it from entryMods (so we don't keep iterating over it
-   * and se we don't try to clean it up again later).
+   * For each entry that is not dirty (all we did was read it) decrement its refcount (so it can be
+   * evicted as we apply our writes) and remove it from entryMods (so we don't keep iterating over
+   * it and se we don't try to clean it up again later).
-        Map.Entry me = (Map.Entry)it.next();
-        //Object eKey = me.getKey();
-        TXEntryState txes = (TXEntryState)me.getValue();
+        Map.Entry me = (Map.Entry) it.next();
+        // Object eKey = me.getKey();
+        TXEntryState txes = (TXEntryState) me.getValue();
-  
+
-        
+
-        
+
-        
+
-          Map.Entry me = (Map.Entry)it.next();
+          Map.Entry me = (Map.Entry) it.next();
-          TXEntryState txes = (TXEntryState)me.getValue();
-          txes.buildMessage(r, eKey, msg,this.otherMembers);
-          if(txes.getFilterRoutingInfo()!=null) {
+          TXEntryState txes = (TXEntryState) me.getValue();
+          txes.buildMessage(r, eKey, msg, this.otherMembers);
+          if (txes.getFilterRoutingInfo() != null) {
-          if(txes.getAdjunctRecipients()!=null) {
+          if (txes.getAdjunctRecipients() != null) {
-          
-        }
-        
-        
-        if (!newMemberSet.equals(this.otherMembers)) { 
-          // r.getCache().getLogger().info("DEBUG: participants list has changed! bug 32999."); 
+        }
+
+
+
+        if (!newMemberSet.equals(this.otherMembers)) {
+          // r.getCache().getLogger().info("DEBUG: participants list has changed! bug 32999.");
-        
+
-    }
-    catch (RegionDestroyedException ex) {
+    } catch (RegionDestroyedException ex) {
-    }
-    catch (CancelException ex) {
+    } catch (CancelException ex) {
-        
+
-        
+
-          Map.Entry me = (Map.Entry)it.next();
+          Map.Entry me = (Map.Entry) it.next();
-          TXEntryState txes = (TXEntryState)me.getValue();
-          txes.buildMessage(r, eKey, msg,this.otherMembers);
-          if(txes.getFilterRoutingInfo()!=null) {
+          TXEntryState txes = (TXEntryState) me.getValue();
+          txes.buildMessage(r, eKey, msg, this.otherMembers);
+          if (txes.getFilterRoutingInfo() != null) {
-          if(txes.getAdjunctRecipients()!=null) {
-            
+          if (txes.getAdjunctRecipients() != null) {
+
-            newMemberSet.addAll(adjunctRecipients);  
+            newMemberSet.addAll(adjunctRecipients);
-        
-        
-        if (!newMemberSet.equals(this.otherMembers)) 
-        { 
-          // r.getCache().getLogger().info("DEBUG: participants list has changed! bug 32999."); 
+
+
+        if (!newMemberSet.equals(this.otherMembers)) {
+          // r.getCache().getLogger().info("DEBUG: participants list has changed! bug 32999.");
-        
+
-    }
-    catch (RegionDestroyedException ex) {
+    } catch (RegionDestroyedException ex) {
-    }
-    catch (CancelException ex) {
+    } catch (CancelException ex) {
-  
+
-          Map.Entry me = (Map.Entry)it.next();
+          Map.Entry me = (Map.Entry) it.next();
-          TXEntryState txes = (TXEntryState)me.getValue();
-          txes.buildCompleteMessage(r, eKey, msg,this.otherMembers);
+          TXEntryState txes = (TXEntryState) me.getValue();
+          txes.buildCompleteMessage(r, eKey, msg, this.otherMembers);
-    }
-    catch (RegionDestroyedException ex) {
+    } catch (RegionDestroyedException ex) {
-    }
-    catch (CancelException ex) {
+    } catch (CancelException ex) {
-  
-  
+
+
-    } 
-    catch (CancelException ex) {
+    } catch (CancelException ex) {
+
-            Map.Entry me = (Map.Entry)it.next();
+            Map.Entry me = (Map.Entry) it.next();
-            TXEntryUserAttrState txes = (TXEntryUserAttrState)me.getValue();
+            TXEntryUserAttrState txes = (TXEntryUserAttrState) me.getValue();
-    } 
-    catch (CancelException ex) {
+    } catch (CancelException ex) {
-        Map.Entry me = (Map.Entry)it.next();
+        Map.Entry me = (Map.Entry) it.next();
-        TXEntryState txes = (TXEntryState)me.getValue();
+        TXEntryState txes = (TXEntryState) me.getValue();
-   * Put all the entries this region knows about into the given "entries" list
-   * as instances of TXEntryStateWithRegionAndKey.
+   * Put all the entries this region knows about into the given "entries" list as instances of
+   * TXEntryStateWithRegionAndKey.
-  void getEntries(ArrayList/*<TXEntryStateWithRegionAndKey>*/ entries, LocalRegion r) {
+  void getEntries(ArrayList/* <TXEntryStateWithRegionAndKey> */ entries, LocalRegion r) {
-      Map.Entry me = (Map.Entry)it.next();
+      Map.Entry me = (Map.Entry) it.next();
-      TXEntryState txes = (TXEntryState)me.getValue();
+      TXEntryState txes = (TXEntryState) me.getValue();
-    if (this.cleanedUp) return;
+    if (this.cleanedUp)
+      return;
-      TXEntryState es = (TXEntryState)it.next();
+      TXEntryState es = (TXEntryState) it.next();
+
-      Map.Entry me = (Map.Entry)it.next();
-      TXEntryState txes = (TXEntryState)me.getValue();
+      Map.Entry me = (Map.Entry) it.next();
+      TXEntryState txes = (TXEntryState) me.getValue();
-  
+
-    for (TXEntryState e: this.entryMods.values()) {
+    for (TXEntryState e : this.entryMods.values()) {
-  
+
-   * @param createdDuringCommit
-   *          the createdDuringCommit to set
+   * @param createdDuringCommit the createdDuringCommit to set
-  
-  public boolean populateDistTxEntryStateList(
-      ArrayList<DistTxThinEntryState> entryStateList) {
+
+  public boolean populateDistTxEntryStateList(ArrayList<DistTxThinEntryState> entryStateList) {
-            logger.debug("TXRegionState.populateDistTxEntryStateList Added "
-                + thinEntryState + " for key=" + mKey + " ,op="
-                + txes.opToString() + " ,region=" + regionFullPath);
+            logger.debug("TXRegionState.populateDistTxEntryStateList Added " + thinEntryState
+                + " for key=" + mKey + " ,op=" + txes.opToString() + " ,region=" + regionFullPath);
-      logger
-          .debug("TXRegionState.populateDistTxEntryStateList Got exception for region "
-              + regionFullPath);
+      logger.debug(
+          "TXRegionState.populateDistTxEntryStateList Got exception for region " + regionFullPath);
-  
-  public void setDistTxEntryStates(
-      ArrayList<DistTxThinEntryState> entryEventList) {
+
+  public void setDistTxEntryStates(ArrayList<DistTxThinEntryState> entryEventList) {
-      throw new UnsupportedOperationInTransactionException(
-          LocalizedStrings.DISTTX_TX_EXPECTED.toLocalizedString(
-              "entry size of " + entryModsSize + " for region "
-                  + regionFullPath, entryEventListSize));
+      throw new UnsupportedOperationInTransactionException(LocalizedStrings.DISTTX_TX_EXPECTED
+          .toLocalizedString("entry size of " + entryModsSize + " for region " + regionFullPath,
+              entryEventListSize));
-        logger.debug("TxRegionState.setDistTxEntryStates Added "
-            + thinEntryState + " for key=" + mKey + " ,op=" + txes.opToString()
-            + " ,region=" + regionFullPath);
+        logger.debug("TxRegionState.setDistTxEntryStates Added " + thinEntryState + " for key="
+            + mKey + " ,op=" + txes.opToString() + " ,region=" + regionFullPath);
-}
+}

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66