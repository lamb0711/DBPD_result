Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Interface for accessing extended features of a ConcurrentMap used for
- * the entries of a Region.
+ * Interface for accessing extended features of a ConcurrentMap used for the entries of a Region.
-  
+
-   * Parameter object used to facilitate construction of an EntriesMap.
-   * Modification of fields after the map is constructed has no effect.
+   * Parameter object used to facilitate construction of an EntriesMap. Modification of fields after
+   * the map is constructed has no effect.
-    /** The initial capacity. The implementation
-     * performs internal sizing to accommodate this many elements. */
-//    int initialCapacity = 16;
-    
+    /**
+     * The initial capacity. The implementation performs internal sizing to accommodate this many
+     * elements.
+     */
+    // int initialCapacity = 16;
+
-//    float loadFactor = 0.75f;
-    
-    /** the estimated number of concurrently
-     * updating threads. The implementation performs internal sizing
-     * to try to accommodate this many threads. */
-//    int concurrencyLevel = 16;
-    
+    // float loadFactor = 0.75f;
+
+    /**
+     * the estimated number of concurrently updating threads. The implementation performs internal
+     * sizing to try to accommodate this many threads.
+     */
+    // int concurrencyLevel = 16;
+
-//    boolean statisticsEnabled = false;
-    
+    // boolean statisticsEnabled = false;
+
-//    boolean lru = false;
+    // boolean lru = false;
-   * Returns the internal entry object to which the specified key is mapped in
-   * this table. For internal use only.
-   * This entry may be cloned at any time that the write lock is not
-   * acquired.
+   * Returns the internal entry object to which the specified key is mapped in this table. For
+   * internal use only. This entry may be cloned at any time that the write lock is not acquired.
-   * @param   key   a key in the table.
-   * @return  the entry to which the key is mapped in this table;
-   *          <tt>null</tt> if the key is not mapped to any value in
-   *          this table.
-   * @throws  NullPointerException  if the key is
-   *               <tt>null</tt>.
+   * @param key a key in the table.
+   * @return the entry to which the key is mapped in this table; <tt>null</tt> if the key is not
+   *         mapped to any value in this table.
+   * @throws NullPointerException if the key is <tt>null</tt>.
-  
-  
+
+
-  
+
- 
+
-   * @return the value or EntryEvent.NOT_AVAILABLE token if it's not in
-   * the VM or null if the entry doesn't exist.
+   * 
+   * @return the value or EntryEvent.NOT_AVAILABLE token if it's not in the VM or null if the entry
+   *         doesn't exist.
- 
+
-   * Returns the value of an entry as it resides on disk.  For
-   * testing purposes only.
+   * Returns the value of an entry as it resides on disk. For testing purposes only.
-  public Object getValueOnDisk(Object key)
-    throws EntryNotFoundException;    
+  public Object getValueOnDisk(Object key) throws EntryNotFoundException;
-   * Fill in value, and isSerialized fields
-   * in this entry object (used for getInitialImage and sync recovered)
-   * Also sets the lastModified time in cacheTime.
-   * Only called for DistributedRegions.
+   * Fill in value, and isSerialized fields in this entry object (used for getInitialImage and sync
+   * recovered) Also sets the lastModified time in cacheTime. Only called for DistributedRegions.
-  public boolean fillInValue(InitialImageOperation.Entry entry, DM mgr);       
+  public boolean fillInValue(InitialImageOperation.Entry entry, DM mgr);
-  
+
-   * Interface for an Entry returned by the getEntry method.
-   * Note that an entry obtained from an entrySet() does not implement
-   * this interface, but is a Map.Entry.
+   * Interface for an Entry returned by the getEntry method. Note that an entry obtained from an
+   * entrySet() does not implement this interface, but is a Map.Entry.
-   * SYNCHRONIZATION Rules:
-   * Any method that calls a method on an Entry that modifies fields
-   * in the entry must be protected by the writeSynchronized method
-   * BEFORE the entry is obtained to prevent it
-   * from being cloned in the map while you have a reference.
+   * SYNCHRONIZATION Rules: Any method that calls a method on an Entry that modifies fields in the
+   * entry must be protected by the writeSynchronized method BEFORE the entry is obtained to prevent
+   * it from being cloned in the map while you have a reference.
-    
+
-    
-    /** Gets the value for this entry. For DiskRegions, faults in value
-     *  and returns it
-     *  @param map the map this entry came from
+
+    /**
+     * Gets the value for this entry. For DiskRegions, faults in value and returns it
+     * 
+     * @param map the map this entry came from
-    
+
-    
+
-    
+
-    
+
-    
+
-    throws InternalStatisticsDisabledException;
+        throws InternalStatisticsDisabledException;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66