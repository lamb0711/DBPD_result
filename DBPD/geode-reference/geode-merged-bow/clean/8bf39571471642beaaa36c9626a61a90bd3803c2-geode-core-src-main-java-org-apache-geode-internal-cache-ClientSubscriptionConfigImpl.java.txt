Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-  
+
-   *  To get client subscription
+   * To get client subscription
-  
+
-  
+
-  
-  public ClientSubscriptionConfigImpl(){
+
+  public ClientSubscriptionConfigImpl() {
+
-   * Returns the capacity of the client client queue.
-   * will be in MB for eviction-policy mem else
+   * Returns the capacity of the client client queue. will be in MB for eviction-policy mem else
+   * 
-  public int getCapacity(){
-    return this.haQueueCapacity ;
+  public int getCapacity() {
+    return this.haQueueCapacity;
+
-   * Sets the capacity of the client client queue.
-   * will be in MB for eviction-policy mem else
-   * number of entries
+   * Sets the capacity of the client client queue. will be in MB for eviction-policy mem else number
+   * of entries
+   * 
-  public void setCapacity(int capacity){
+  public void setCapacity(int capacity) {
+
-   * Returns the eviction policy that is executed when capacity of the client client queue is reached.
+   * Returns the eviction policy that is executed when capacity of the client client queue is
+   * reached.
+   * 
-  public String getEvictionPolicy(){
-    return this.haEvictionPolicy ;
+  public String getEvictionPolicy() {
+    return this.haEvictionPolicy;
+
+   * 
-  public void setEvictionPolicy(String policy){
+  public void setEvictionPolicy(String policy) {
-   * Sets the overflow directory for a client client queue 
+   * Sets the overflow directory for a client client queue
+   * 
-   * @deprecated as of prPersistSprint2 
+   * @deprecated as of prPersistSprint2
-      throw new IllegalStateException(LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
-          .toLocalizedString(new Object[] {"setOverflowDirectory", this.getDiskStoreName()}));
+      throw new IllegalStateException(
+          LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
+              .toLocalizedString(new Object[] {"setOverflowDirectory", this.getDiskStoreName()}));
-   * Answers the overflow directory for a client queue's
-   * overflowed client queue entries.
-   * @return the overflow directory for a client queue's
-   * overflowed entries
+   * Answers the overflow directory for a client queue's overflowed client queue entries.
+   * 
+   * @return the overflow directory for a client queue's overflowed entries
-   * @deprecated as of prPersistSprint2 
+   * @deprecated as of prPersistSprint2
-      throw new IllegalStateException(LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
-          .toLocalizedString(new Object[] {"getOverflowDirectory", this.getDiskStoreName()}));
+      throw new IllegalStateException(
+          LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
+              .toLocalizedString(new Object[] {"getOverflowDirectory", this.getDiskStoreName()}));
-  
+
-    String str = " Eviction policy "
-        + this.getEvictionPolicy() + " capacity "
-        + this.getCapacity();
+    String str = " Eviction policy " + this.getEvictionPolicy() + " capacity " + this.getCapacity();
+
+   * 
+
-   * Sets the disk store name for overflow  
-   * @param diskStoreName 
+   * Sets the disk store name for overflow
+   * 
+   * @param diskStoreName
-      throw new IllegalStateException(LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
-          .toLocalizedString(new Object[] {"setDiskStoreName", this.getDiskStoreName()}));
+      throw new IllegalStateException(
+          LocalizedStrings.DiskStore_Deprecated_API_0_Cannot_Mix_With_DiskStore_1
+              .toLocalizedString(new Object[] {"setDiskStoreName", this.getDiskStoreName()}));
-  
-  public boolean hasOverflowDirectory()
-  {
+
+  public boolean hasOverflowDirectory() {
-  private void setHasOverflowDirectory(boolean hasOverflowDirectory)
-  {
+
+  private void setHasOverflowDirectory(boolean hasOverflowDirectory) {
-  
-  /*public boolean equals(ClientSubscriptionConfig other) {
-    if (other != null && other.getEvictionPolicy() != null
-        && other.getOverflowDirectory() != null) {
-      if ((this.getEvictionPolicy() == other.getEvictionPolicy())
-          && (this.getOverflowDirectory() == other.getOverflowDirectory())
-          && (this.getCapacity() == this.getCapacity()))
-        return true;
-    }
-    return false;
-  }*/
+
+  /*
+   * public boolean equals(ClientSubscriptionConfig other) { if (other != null &&
+   * other.getEvictionPolicy() != null && other.getOverflowDirectory() != null) { if
+   * ((this.getEvictionPolicy() == other.getEvictionPolicy()) && (this.getOverflowDirectory() ==
+   * other.getOverflowDirectory()) && (this.getCapacity() == this.getCapacity())) return true; }
+   * return false; }
+   */

UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66