Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <code>Invoke</code> provides static utility methods that allow a
- * <code>DistributedTest</code> to invoke a <code>SerializableRunnable</code>
- * or <code>SerializableCallable</code> in a remote test <code>VM</code>.
+ * <code>Invoke</code> provides static utility methods that allow a <code>DistributedTest</code> to
+ * invoke a <code>SerializableRunnable</code> or <code>SerializableCallable</code> in a remote test
+ * <code>VM</code>.
- * These methods can be used directly: <code>Invoke.invokeInEveryVM(...)</code>, 
- * however, they are intended to be referenced through static import:
+ * These methods can be used directly: <code>Invoke.invokeInEveryVM(...)</code>, however, they are
+ * intended to be referenced through static import:
-  protected Invoke() {
-  }
-  
+  protected Invoke() {}
+
-   * Invokes a <code>SerializableRunnable</code> in every VM that
-   * DUnit knows about.
+   * Invokes a <code>SerializableRunnable</code> in every VM that DUnit knows about.
-      for (int vmIndex = 0; vmIndex < host.getVMCount(); vmIndex++) {
-        VM vm = host.getVM(vmIndex);
-        if (name!=null)
+      for (VM vm : host.getAllVMs()) {
+        if (name != null)
-   * @deprecated Please use {@link #invokeInEveryVM(SerializableRunnableIF)} or another non-deprecated method in <code>Invoke</code> instead.
+   * @deprecated Please use {@link #invokeInEveryVM(SerializableRunnableIF)} or another
+   *             non-deprecated method in <code>Invoke</code> instead.
-  
-      for (int vmIndex = 0; vmIndex < host.getVMCount(); vmIndex++) {
-        VM vm = host.getVM(vmIndex);
+
+      for (VM vm : host.getAllVMs()) {
-   * @deprecated Please use {@link #invokeInEveryVM(SerializableRunnableIF)} or another non-deprecated method in <code>Invoke</code> instead.
+   * @deprecated Please use {@link #invokeInEveryVM(SerializableRunnableIF)} or another
+   *             non-deprecated method in <code>Invoke</code> instead.
-  public static void invokeInEveryVM(final Class<?> targetClass, final String targetMethod, final Object[] methodArgs) {
+  public static void invokeInEveryVM(final Class<?> targetClass, final String targetMethod,
+      final Object[] methodArgs) {
-  
-      for (int vmIndex = 0; vmIndex < host.getVMCount(); vmIndex++) {
-        VM vm = host.getVM(vmIndex);
+
+      for (VM vm : host.getAllVMs()) {
-   * Invokes a <code>SerializableCallable</code> in every VM that
-   * DUnit knows about.
+   * Invokes a <code>SerializableCallable</code> in every VM that DUnit knows about.
-  public static <T> Map<VM, T> invokeInEveryVM(String name, final SerializableCallableIF<T> callable) {
+  public static <T> Map<VM, T> invokeInEveryVM(String name,
+      final SerializableCallableIF<T> callable) {
-      for (int v = 0; v < host.getVMCount(); v++) {
-        VM vm = host.getVM(v);
-        if(name != null)
+      for (VM vm : host.getAllVMs()) {
+        if (name != null)
-   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with {@link #invokeInEveryVM(SerializableCallableIF)} instead.
+   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with
+   *             {@link #invokeInEveryVM(SerializableCallableIF)} instead.
-   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with {@link #invokeInEveryVM(SerializableCallableIF)} instead.
+   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with
+   *             {@link #invokeInEveryVM(SerializableCallableIF)} instead.
-  public static void invokeRepeatingIfNecessary(final VM vm, final RepeatableRunnable runnable, final long repeatTimeoutMs) {
+  public static void invokeRepeatingIfNecessary(final VM vm, final RepeatableRunnable runnable,
+      final long repeatTimeoutMs) {
-   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with {@link #invokeInEveryVM(SerializableCallableIF)} instead.
+   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with
+   *             {@link #invokeInEveryVM(SerializableCallableIF)} instead.
-   * Invokes a <code>SerializableRunnable</code> in every VM that
-   * DUnit knows about.  If <code>run()</code> throws an assertion failure, 
-   * its execution is repeated, until no assertion failure occurs or
-   * <code>repeatTimeoutMs</code> milliseconds have passed.
+   * Invokes a <code>SerializableRunnable</code> in every VM that DUnit knows about. If
+   * <code>run()</code> throws an assertion failure, its execution is repeated, until no assertion
+   * failure occurs or <code>repeatTimeoutMs</code> milliseconds have passed.
-   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with {@link #invokeInEveryVM(SerializableCallableIF)} instead.
+   * @deprecated Please use {@link com.jayway.awaitility.Awaitility} with
+   *             {@link #invokeInEveryVM(SerializableCallableIF)} instead.
-  public static void invokeInEveryVMRepeatingIfNecessary(final RepeatableRunnable runnable, final long repeatTimeoutMs) {
+  public static void invokeInEveryVMRepeatingIfNecessary(final RepeatableRunnable runnable,
+      final long repeatTimeoutMs) {
-  
+

MOV8 INS29 MOV29 MOV29 MOV29 UPD66 UPD66 UPD66 UPD66 UPD66 MOV60 MOV41 INS65 INS65 UPD66 INS66 UPD66 INS66 UPD66 UPD66 MOV58 MOV27 MOV37 INS8 INS66 MOV65 INS66 MOV65 INS66 UPD66 UPD66 INS66 INS66 INS66 UPD66 INS70 INS70 INS70 MOV60 INS70 INS44 INS32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 INS44 INS32 MOV8 MOV43 INS42 MOV42 UPD42 MOV42 MOV43 INS42 MOV42 UPD42 MOV42 MOV43 INS42 MOV42 UPD42 MOV42 MOV43 INS42 MOV42 UPD42 MOV42 DEL66 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL66 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL24 DEL8 DEL66 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL66 DEL65 DEL29