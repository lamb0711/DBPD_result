Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A <code>ListenerIdMap</code> maps ints to an <code>Object</code>.
- * This is an optimization because using a {@link java.util.HashMap}
- * for this purposed proved to be too slow because of all of the
+ * A <code>ListenerIdMap</code> maps ints to an <code>Object</code>. This is an optimization because
+ * using a {@link java.util.HashMap} for this purposed proved to be too slow because of all of the
-  /** Once the number of mappings in the map exceeds the threshold,
-   * the map is rehased.  The threshold is the capacity *
-   * loadFactor.
+  /**
+   * Once the number of mappings in the map exceeds the threshold, the map is rehased. The threshold
+   * is the capacity * loadFactor.
-  ////////////////////  Constructors  ////////////////////
+  //////////////////// Constructors ////////////////////
-   * Creates a new, empty map with the given initial capacity (number
-   * of buckets) and load factor.
+   * Creates a new, empty map with the given initial capacity (number of buckets) and load factor.
-      throw new IllegalArgumentException(LocalizedStrings.ListenerIdMap_ILLEGAL_INITIAL_CAPACITY_0.toLocalizedString(Integer.valueOf(initialCapacity)));
+      throw new IllegalArgumentException(LocalizedStrings.ListenerIdMap_ILLEGAL_INITIAL_CAPACITY_0
+          .toLocalizedString(Integer.valueOf(initialCapacity)));
-      throw new IllegalArgumentException(LocalizedStrings.ListenerIdMap_ILLEGAL_LOAD_FACTOR_0.toLocalizedString(new Float(loadFactor)));
+      throw new IllegalArgumentException(LocalizedStrings.ListenerIdMap_ILLEGAL_LOAD_FACTOR_0
+          .toLocalizedString(new Float(loadFactor)));
-    if (initialCapacity==0) {
+    if (initialCapacity == 0) {
-    threshold = (int)(initialCapacity * loadFactor);
+    threshold = (int) (initialCapacity * loadFactor);
-   * Creates a new, empty map with the default initial capacity (11
-   * buckets) and load factor (0.75).
+   * Creates a new, empty map with the default initial capacity (11 buckets) and load factor (0.75).
-  ////////////////////  Instance Methods  ////////////////////
+  //////////////////// Instance Methods ////////////////////
-   * Returns <code>true</code> if this map contains a mapping for the
-   * given key.
+   * Returns <code>true</code> if this map contains a mapping for the given key.
-   * @throws IllegalArgumentException
-   *         <code>key</code> is less than zero
+   * @throws IllegalArgumentException <code>key</code> is less than zero
-   * Returns the object to which the given key is mapped.  If no
-   * object is mapped to the given key, <code>null</code> is returned.
+   * Returns the object to which the given key is mapped. If no object is mapped to the given key,
+   * <code>null</code> is returned.
-   * @throws IllegalArgumentException
-   *         <code>key</code> is less than zero
+   * @throws IllegalArgumentException <code>key</code> is less than zero
- 
+
-   * Rehashes this map into a new map with a large number of buckets.
-   * It is called when the number of entries in the map exceeds the
-   * capacity and load factor.
+   * Rehashes this map into a new map with a large number of buckets. It is called when the number
+   * of entries in the map exceeds the capacity and load factor.
-    threshold = (int)(newCapacity * loadFactor);
+    threshold = (int) (newCapacity * loadFactor);
-    for (int i = oldCapacity ; i-- > 0 ;) {
-      for (Entry old = oldMap[i] ; old != null ; ) {
+    for (int i = oldCapacity; i-- > 0;) {
+      for (Entry old = oldMap[i]; old != null;) {
-   * Creates a mapping between the given key (object id) and an
-   * object.  Returns the previous value, or <code>null</code> if
-   * there was none.
+   * Creates a mapping between the given key (object id) and an object. Returns the previous value,
+   * or <code>null</code> if there was none.
-   * @throws IllegalArgumentException
-   *         <code>key</code> is less than zero
+   * @throws IllegalArgumentException <code>key</code> is less than zero
-   * Removes the mapping for the given key.  Returns the object to
-   * which the key was mapped, or <code>null</code> otherwise.
+   * Removes the mapping for the given key. Returns the object to which the key was mapped, or
+   * <code>null</code> otherwise.
-    for (Entry e = table[bucket], prev = null; e != null;
-         prev = e, e = e.next) {
+    for (Entry e = table[bucket], prev = null; e != null; prev = e, e = e.next) {
-   * Returns an iterator over the {@link Entry}s of this map.  Note
-   * that this iterator is <b>not</b> fail-fast.  That is, it is the
-   * user's responsibility to ensure that the map does not change
+   * Returns an iterator over the {@link Entry}s of this map. Note that this iterator is <b>not</b>
+   * fail-fast. That is, it is the user's responsibility to ensure that the map does not change
-  ///////////////////////  Inner Classes  ///////////////////////
+  /////////////////////// Inner Classes ///////////////////////
+
-   * A class for iterating over the contents of an
-   * <code>ObjIdMap</code> 
-   */ 
+   * A class for iterating over the contents of an <code>ObjIdMap</code>
+   */
-    ////////////////////  Instance Methods  ////////////////////
+    //////////////////// Instance Methods ////////////////////
-     * Returns the next Entry to visit.  Will return <code>null</code>
-     * after we have iterated through all of the entries.
+     * Returns the next Entry to visit. Will return <code>null</code> after we have iterated through
+     * all of the entries.

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66