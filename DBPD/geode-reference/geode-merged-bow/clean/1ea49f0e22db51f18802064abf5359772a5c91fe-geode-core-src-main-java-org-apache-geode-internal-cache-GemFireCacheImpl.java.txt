GEODE-7186: Move HttpService implementation into its own module (#4040)

- For maven/gradle consumption, this component becomes an optional
  dependency.
- The CacheService.init() method now returns a boolean indicating
  whether the given service was initialized or not.
- Services are now created before cache creation resourcce events are
  emitted.
-import org.apache.geode.cache.internal.HttpService;
-import org.apache.geode.internal.net.SSLConfigurationFactory;
-import org.apache.geode.internal.security.SecurableCommunicationChannel;
-  private Optional<HttpService> httpService = Optional.ofNullable(null);
-
-      if (!this.isClient) {
-        if (systemConfig.getHttpServicePort() == 0) {
-          logger.info("HttpService is disabled with http-serivce-port = 0");
-          httpService = Optional.empty();
-        } else {
-          try {
-            httpService =
-                Optional.of(new InternalHttpService(systemConfig.getHttpServiceBindAddress(),
-                    systemConfig.getHttpServicePort(), SSLConfigurationFactory
-                        .getSSLConfigForComponent(systemConfig,
-                            SecurableCommunicationChannel.WEB)));
-          } catch (Throwable ex) {
-            logger.warn("Could not enable HttpService: {}", ex.getMessage());
-          }
-        }
-      }
-  public Optional<HttpService> getHttpService() {
-    return httpService;
-  }
-
-  @Override
-    // this starts up the ManagementService, register and federate the internal beans
+    initializeServices();
+
+    // This starts up the ManagementService, registers and federates the internal beans. Since it
+    // may be starting up web services, it relies on the prior step which would have started the
+    // HttpService.
-    initializeServices();
+    // Resource events, generated for started services. These events may depend on the prior
+    // CACHE_CREATE event which is why they are split out separately.
+    handleResourceEventsForCacheServices();
-      service.init(this);
-      services.put(service.getInterface(), service);
+      try {
+        if (service.init(this)) {
+          services.put(service.getInterface(), service);
+          logger.info("Initialized cache service {}", service.getClass().getName());
+        }
+      } catch (Exception ex) {
+        logger.warn("Cache service " + service.getClass().getName() + " failed to initialize", ex);
+      }
+    }
+  }
+
+  private void handleResourceEventsForCacheServices() {
+    for (CacheService service : services.values()) {
-      logger.info("Initialized cache service {}", service.getClass().getName());
-          httpService.ifPresent(HttpService::stop);
-
+  public <T extends CacheService> Optional<T> getOptionalService(Class<T> clazz) {
+    return Optional.ofNullable(getService(clazz));
+  }
+
+  @Override

MOV31 INS31 MOV21 INS83 INS39 INS42 INS8 INS73 UPD74 UPD42 INS44 INS21 INS70 INS42 INS43 UPD43 INS74 INS42 INS32 INS8 INS44 INS32 INS8 INS42 UPD42 INS43 INS43 INS32 INS42 INS54 INS43 INS42 UPD42 MOV42 UPD42 MOV42 MOV21 INS42 INS42 INS42 INS42 INS32 MOV8 INS12 UPD42 MOV42 INS42 INS42 INS25 INS44 INS8 MOV32 INS8 INS43 INS42 INS21 MOV21 MOV21 INS42 INS32 INS42 INS42 INS27 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL43 DEL74 DEL42 DEL33 DEL32 DEL59 DEL23 DEL52 DEL42 DEL22 DEL38 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL40 DEL32 DEL14 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL21 DEL42 DEL42 DEL42 DEL42 DEL90 DEL32 DEL21 DEL42