GEODE-6515: refactor ConnectionManagerImpl (#3304)

Refactors the ConnectionManagerImpl to a non-locking implementation to allow gets to scale with more threads. The previous implementation locked around all logic for getting, creating, or returning a connection to the pool, which resulted in a high degree of contention for that lock.

Additionally, much of the logic for accounting for the number of total connections, and the dequeue of available connections have been extracted to ConnectionAccounting and AvailableConnectionManager respectively. This was done in order to add unit and concurrent tests for that logic.

* Refactor ConnectionManagerImpl to a non-locking implementation
* add unit tests for ConnectionManagerImpl
* update ConnectionManagerImpl Javadocs
* extract ConnectionAccounting from ConnectionManagerImpl
* add unit test for ConnectionAccounting
* add concurrency tests for ConnectionAccounting
* extract AvailableConnectionManager from ConnectionManagerImpl
* add unit tests for AvailableConnectionManager
* add concurrency tests for AvailableConnectionManager
* add unit test for ConcurrentTestRunner
* add javadocs to AvailableConnectionManager and improved the method names
* activate returns false if the connection has been destroyed instead of throwing ConnectionDestroyedException
* start background prefill if under the minimum number of connections in ConnectionManagerImpl#borrowConnection when create fails
* add generic <ServerLocation> to Set in ConnectionManagerImpl
* Correct invalidateServer logic in ConnectionManagerImpl
* make NOT_WAITING private in ConnectionManagerImpl
* made createLifetimeReplacementConnection private since it is only
used by ConnectionMap

Signed-off-by: Helena Bales <hbales@pivotal.io>
Signed-off-by: Jacob Barrett <jbarrett@pivotal.io>
Signed-off-by: Darrel Schneider <dschneider@pivotal.io>

-  public void internalDestroy() {
+  /**
+   * @return true if internal connection was destroyed by this call; false if already destroyed
+   */
+  public boolean internalDestroy() {
+    boolean result = false;
+        result = true;
+    return result;
-  public void activate() {
+  /**
+   * @return true if connection activated, false if could not be activated because it is destroyed
+   */
+  public boolean activate() {
-      getConnection(); // it checks if we are destroyed
+      if (isDestroyed() || shouldDestroy()) {
+        return false;
+      }
-      if (shouldDestroy()) {
-        throw new ConnectionDestroyedException();
-      }
+      return true;

INS29 UPD39 INS29 UPD39 INS65 INS60 INS41 INS65 INS66 INS39 INS59 INS42 INS66 INS42 INS9 INS25 INS41 INS27 MOV8 INS9 INS21 INS32 MOV32 INS41 INS7 UPD42 MOV42 INS9 INS42 INS9 DEL42 DEL43 DEL14 DEL53 DEL32 DEL21 DEL25