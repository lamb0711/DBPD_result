GEODE-5041: Adding post processing to the new protocol


+import org.apache.geode.internal.protocol.protobuf.security.NoSecurity;
+import org.apache.geode.internal.protocol.protobuf.security.NotLoggedInSecurity;
+import org.apache.geode.internal.protocol.protobuf.security.SecureCache;
+import org.apache.geode.internal.protocol.protobuf.security.SecureLocator;
+import org.apache.geode.internal.protocol.protobuf.security.SecureLocatorImpl;
+import org.apache.geode.internal.protocol.protobuf.security.Security;
+import org.apache.geode.internal.protocol.protobuf.security.ShiroSecurity;
-import org.apache.geode.internal.protocol.protobuf.v1.authentication.Authorizer;
-import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingCache;
-import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingLocator;
-import org.apache.geode.internal.protocol.protobuf.v1.authentication.AuthorizingLocatorImpl;
-import org.apache.geode.internal.protocol.protobuf.v1.authentication.NoSecurityAuthorizer;
-import org.apache.geode.internal.protocol.protobuf.v1.authentication.NotLoggedInAuthorizer;
-import org.apache.geode.internal.protocol.protobuf.v1.authentication.ShiroAuthorizer;
-  private AuthorizingLocator authorizingLocator;
+  private SecureLocator secureLocator;
-    Authorizer authorizer = securityService.isIntegratedSecurity() ? new NotLoggedInAuthorizer()
-        : new NoSecurityAuthorizer();
-    this.authorizingLocator = new AuthorizingLocatorImpl(locator, authorizer);
+    Security security =
+        securityService.isIntegratedSecurity() ? new NotLoggedInSecurity() : new NoSecurity();
+    this.secureLocator = new SecureLocatorImpl(locator, security);
-  public AuthorizingCache getAuthorizingCache() throws InvalidExecutionContextException {
+  public SecureCache getSecureCache() throws InvalidExecutionContextException {
-  public AuthorizingLocator getAuthorizingLocator() throws InvalidExecutionContextException {
-    return authorizingLocator;
+  public SecureLocator getSecureLocator() throws InvalidExecutionContextException {
+    return secureLocator;
-    this.authorizingLocator =
-        new AuthorizingLocatorImpl(locator, new ShiroAuthorizer(securityService, subject));
+    this.secureLocator =
+        new SecureLocatorImpl(locator, new ShiroSecurity(securityService, subject));

MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42