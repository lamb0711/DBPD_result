Merge branch 'release/1.5.0'

+import org.apache.geode.management.internal.cli.shell.OperationInvoker;
-      @CliOption(key = {CliStrings.CONNECT__URL},
-          unspecifiedDefaultValue = CliStrings.CONNECT__DEFAULT_BASE_URL,
-          help = CliStrings.CONNECT__URL__HELP) String url,
+      @CliOption(key = {CliStrings.CONNECT__URL}, help = CliStrings.CONNECT__URL__HELP) String url,
+    if (StringUtils.startsWith(url, "https")) {
+      useSsl = true;
+    }
+
-    if (useHttp) {
+    if (StringUtils.isNotEmpty(url)) {
-    return result;
+    OperationInvoker invoker = gfsh.getOperationInvoker();
+    if (invoker == null || !invoker.isConnected()) {
+      return result;
+    }
+
+    String gfshVersion = gfsh.getVersion();
+    String remoteVersion = null;
+    try {
+      remoteVersion = invoker.getRemoteVersion();
+      if (remoteVersion.equalsIgnoreCase(gfshVersion)) {
+        return result;
+      }
+    } catch (Exception e) {
+      gfsh.logInfo("failed to get the the remote version.", e);
+    }
+
+    // will reach here only when remoteVersion is not available or does not match
+    invoker.stop();
+    if (remoteVersion == null) {
+      return ResultBuilder.createUserErrorResult(
+          String.format("Cannot use a %s gfsh client to connect to this cluster.", gfshVersion));
+    } else {
+      return ResultBuilder.createUserErrorResult(String.format(
+          "Cannot use a %s gfsh client to connect to a %s cluster.", gfshVersion, remoteVersion));
+    }
-      LogWrapper.getInstance()
+      LogWrapper.getInstance(CliUtil.getCacheIfExists(this::getCache))
-    } finally {
-      Gfsh.redirectInternalJavaLoggers();
-      LogWrapper.getInstance().info(CliStrings.format(CliStrings.CONNECT__MSG__SUCCESS,
-          jmxHostPortToConnect.toString(false)));
+      LogWrapper.getInstance(CliUtil.getCacheIfExists(this::getCache)).info(CliStrings
+          .format(CliStrings.CONNECT__MSG__SUCCESS, jmxHostPortToConnect.toString(false)));
-    } finally {
-      Gfsh.redirectInternalJavaLoggers();
-    LogWrapper.getInstance().severe(errorMessage, e);
+    LogWrapper.getInstance(CliUtil.getCacheIfExists(this::getCache)).severe(errorMessage, e);

INS26 INS40 INS25 INS60 INS25 INS60 INS60 INS54 INS21 INS25 INS32 INS8 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS45 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS38 MOV41 INS42 INS42 INS32 INS42 INS42 INS33 INS21 INS25 INS44 INS8 INS42 INS42 INS42 INS33 INS41 INS41 INS7 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS7 INS32 INS8 INS43 INS42 INS21 INS32 INS32 INS32 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS41 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS90 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS32 INS32 INS52 INS42 INS42 INS42 INS90 INS42 INS42 INS90 INS52 INS42 INS52 INS42 DEL42 DEL40 DEL80 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8