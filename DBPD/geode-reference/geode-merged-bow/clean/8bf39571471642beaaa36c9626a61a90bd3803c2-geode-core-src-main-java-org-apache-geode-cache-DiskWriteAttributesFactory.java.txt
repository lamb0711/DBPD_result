Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public final class DiskWriteAttributesFactory implements java.io.Serializable
-{
+public final class DiskWriteAttributesFactory implements java.io.Serializable {
-   * <code>DiskWriteAttributes</code> thus created will have following
-   * behaviour.
+   * <code>DiskWriteAttributes</code> thus created will have following behaviour.
-   * Creates a new instance of DiskWriteAttributesFactory Factory ready to
-   * create a <code>DiskWriteAttributes</code> with the same settings as those
-   * in the specified <code>DiskWriteAttributes</code>.
+   * Creates a new instance of DiskWriteAttributesFactory Factory ready to create a
+   * <code>DiskWriteAttributes</code> with the same settings as those in the specified
+   * <code>DiskWriteAttributes</code>.
-   * @param dwa
-   *          the <code>DiskWriteAttributes</code> used to initialize this
-   *          DiskWriteAttributesFactory
+   * @param dwa the <code>DiskWriteAttributes</code> used to initialize this
+   *        DiskWriteAttributesFactory
-    this.props.setProperty(CacheXml.BYTES_THRESHOLD,
-        String.valueOf(dwa.getBytesThreshold()));
+    this.props.setProperty(CacheXml.BYTES_THRESHOLD, String.valueOf(dwa.getBytesThreshold()));
-    this.props.setProperty(CacheXml.MAX_OPLOG_SIZE,
-        String.valueOf(maxOplogSizeInBytes));
-    this.props.setProperty(CacheXml.ROLL_OPLOG,
-                           String.valueOf(dwa.isRollOplogs()));
-    this.props.setProperty(DiskWriteAttributesImpl.SYNCHRONOUS_PROPERTY, String
-        .valueOf(dwa.isSynchronous()));
+    this.props.setProperty(CacheXml.MAX_OPLOG_SIZE, String.valueOf(maxOplogSizeInBytes));
+    this.props.setProperty(CacheXml.ROLL_OPLOG, String.valueOf(dwa.isRollOplogs()));
+    this.props.setProperty(DiskWriteAttributesImpl.SYNCHRONOUS_PROPERTY,
+        String.valueOf(dwa.isSynchronous()));
-      this.props.setProperty(CacheXml.TIME_INTERVAL,
-          String.valueOf(dwa.getTimeInterval()));
+      this.props.setProperty(CacheXml.TIME_INTERVAL, String.valueOf(dwa.getTimeInterval()));
-   * @param isSynchronous
-   *          boolean if true indicates synchronous writes
+   * @param isSynchronous boolean if true indicates synchronous writes
-  public void setSynchronous(boolean isSynchronous)
-  {
-    this.props.setProperty(DiskWriteAttributesImpl.SYNCHRONOUS_PROPERTY, String
-        .valueOf(isSynchronous));
+  public void setSynchronous(boolean isSynchronous) {
+    this.props.setProperty(DiskWriteAttributesImpl.SYNCHRONOUS_PROPERTY,
+        String.valueOf(isSynchronous));
-   * @param rollingEnabled true if oplogs are to be compacted automatically;
-   *   false if no compaction.
+   * @param rollingEnabled true if oplogs are to be compacted automatically; false if no compaction.
-  public void setRollOplogs(boolean rollingEnabled)
-  {
+  public void setRollOplogs(boolean rollingEnabled) {
-   * Sets the threshold at which an oplog will become compactable. While
-   * the percentage of live records in the oplog exceeds
-   * this threshold the oplog will not be compacted.
-   * Once the percentage of live is less than or equal to the threshold
-   * the oplog can be compacted.
-   * The lower the threshold the longer the compactor will wait before compacting an oplog.
-   * The threshold is a percentage in the range 0..100.
-   * The default is 50%.
-   * <P>Examples:
-   * A threshold of 100 causes any oplog that is no longer being written to
-   * to be compactable.
-   * A threshold of 0 causes only oplogs that have no live records to be compactable
-   * in which case the compact can simply remove the oplog file.
-   * A threshold of 50 causes an oplog to become compactable when half of its
-   * live records become dead.
+   * Sets the threshold at which an oplog will become compactable. While the percentage of live
+   * records in the oplog exceeds this threshold the oplog will not be compacted. Once the
+   * percentage of live is less than or equal to the threshold the oplog can be compacted. The lower
+   * the threshold the longer the compactor will wait before compacting an oplog. The threshold is a
+   * percentage in the range 0..100. The default is 50%.
+   * <P>
+   * Examples: A threshold of 100 causes any oplog that is no longer being written to to be
+   * compactable. A threshold of 0 causes only oplogs that have no live records to be compactable in
+   * which case the compact can simply remove the oplog file. A threshold of 50 causes an oplog to
+   * become compactable when half of its live records become dead.
+   * 
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_POSITIVE_NUMBER_AND_THE_VALUE_GIVEN_1_IS_NOT_ACCEPTABLE.toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD, Integer.valueOf(compactionThreshold)}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_POSITIVE_NUMBER_AND_THE_VALUE_GIVEN_1_IS_NOT_ACCEPTABLE
+              .toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD,
+                  Integer.valueOf(compactionThreshold)}));
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_LESS_THAN_2_BUT_WAS_1.toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD, Integer.valueOf(compactionThreshold), Integer.valueOf(100)}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesImpl_0_HAS_TO_BE_LESS_THAN_2_BUT_WAS_1
+              .toLocalizedString(new Object[] {CacheXml.COMPACTION_THRESHOLD,
+                  Integer.valueOf(compactionThreshold), Integer.valueOf(100)}));
-    this.props.setProperty(CacheXml.COMPACTION_THRESHOLD,
-                           String.valueOf(compactionThreshold));
+    this.props.setProperty(CacheXml.COMPACTION_THRESHOLD, String.valueOf(compactionThreshold));
-  
+
-   * Sets the maximum oplog size in bytes. When the active oplog size hits
-   * the maximum a new oplog will be created.
-   * <P>Note that this method sets the same attribute as {@link #setMaxOplogSize}.
-   * The last set of the attribute determines its value.
+   * Sets the maximum oplog size in bytes. When the active oplog size hits the maximum a new oplog
+   * will be created.
+   * <P>
+   * Note that this method sets the same attribute as {@link #setMaxOplogSize}. The last set of the
+   * attribute determines its value.
+   * 
-   * @throws IllegalArgumentException
-   *           if the value specified is a negative number
+   * @throws IllegalArgumentException if the value specified is a negative number
-  public void setMaxOplogSizeInBytes(long maxOplogSize)
-  {
-	
+  public void setMaxOplogSizeInBytes(long maxOplogSize) {
+
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_MAXIMUM_OPLOG_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE.toLocalizedString(Long.valueOf(maxOplogSize)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_MAXIMUM_OPLOG_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE
+              .toLocalizedString(Long.valueOf(maxOplogSize)));
-    this.props.setProperty(CacheXml.MAX_OPLOG_SIZE,
-        String.valueOf(maxOplogSize));
+    this.props.setProperty(CacheXml.MAX_OPLOG_SIZE, String.valueOf(maxOplogSize));
-   * Sets the maximum oplog size in megabytes. When the active oplog size hits
-   * the maximum a new oplog will be created.
-   * <P>Note that this method sets the same attribute as {@link #setMaxOplogSizeInBytes}.
-   * The last set of the attribute determines its value.
+   * Sets the maximum oplog size in megabytes. When the active oplog size hits the maximum a new
+   * oplog will be created.
+   * <P>
+   * Note that this method sets the same attribute as {@link #setMaxOplogSizeInBytes}. The last set
+   * of the attribute determines its value.
+   * 
-   * @throws IllegalArgumentException
-   *           if the value specified is a negative number
+   * @throws IllegalArgumentException if the value specified is a negative number
-  public void setMaxOplogSize(int maxOplogSize)
-  {
+  public void setMaxOplogSize(int maxOplogSize) {
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_MAXIMUM_OPLOG_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE.toLocalizedString(Integer.valueOf(maxOplogSize)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_MAXIMUM_OPLOG_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE
+              .toLocalizedString(Integer.valueOf(maxOplogSize)));
-    this.props.setProperty(CacheXml.MAX_OPLOG_SIZE, String
-        .valueOf(maxOplogSizeInBytes));
+    this.props.setProperty(CacheXml.MAX_OPLOG_SIZE, String.valueOf(maxOplogSizeInBytes));
-   * Takes an int which is supposed to be in megabytes
-   * and converts it to a long. This conversion takes into
-   * account that multiplication can lead to Integer.MAX_VALUE being
-   * exceeded
+   * Takes an int which is supposed to be in megabytes and converts it to a long. This conversion
+   * takes into account that multiplication can lead to Integer.MAX_VALUE being exceeded
+   * 
-  private long convertToBytes(int megaBytes)
-  {
+  private long convertToBytes(int megaBytes) {
-  
+
-   * Sets the number of milliseconds that can elapse before unwritten data is
-   * written to disk. It has significance only in case of asynchronous mode of
-   * writing.
+   * Sets the number of milliseconds that can elapse before unwritten data is written to disk. It
+   * has significance only in case of asynchronous mode of writing.
-   * @param timeInterval
-   *          Time interval in milliseconds
-   * @throws IllegalArgumentException
-   *           if the value specified is a negative number
+   * @param timeInterval Time interval in milliseconds
+   * @throws IllegalArgumentException if the value specified is a negative number
-  public void setTimeInterval(long timeInterval)
-  {
+  public void setTimeInterval(long timeInterval) {
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_TIME_INTERVAL_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE.toLocalizedString(Long.valueOf(timeInterval)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_TIME_INTERVAL_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE
+              .toLocalizedString(Long.valueOf(timeInterval)));
-    this.props.setProperty(CacheXml.TIME_INTERVAL,
-        String.valueOf(timeInterval));
+    this.props.setProperty(CacheXml.TIME_INTERVAL, String.valueOf(timeInterval));
-   * Sets the number of unwritten bytes of data that can be enqueued before
-   * being written to disk. It has significance only in case of asynchronous mode
-   * of writing.
+   * Sets the number of unwritten bytes of data that can be enqueued before being written to disk.
+   * It has significance only in case of asynchronous mode of writing.
-   * @param bytesThreshold the maximum number of bytes to enqueue before async data
-   *                       is flushed.
-   * @throws IllegalArgumentException
-   *           if the value specified is a negative number
+   * @param bytesThreshold the maximum number of bytes to enqueue before async data is flushed.
+   * @throws IllegalArgumentException if the value specified is a negative number
-  public void setBytesThreshold(long bytesThreshold)
-  {
+  public void setBytesThreshold(long bytesThreshold) {
-      throw new IllegalArgumentException(LocalizedStrings.DiskWriteAttributesFactory_QUEUE_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE.toLocalizedString(Long.valueOf(bytesThreshold)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DiskWriteAttributesFactory_QUEUE_SIZE_SPECIFIED_HAS_TO_BE_A_NONNEGATIVE_NUMBER_AND_THE_VALUE_GIVEN_0_IS_NOT_ACCEPTABLE
+              .toLocalizedString(Long.valueOf(bytesThreshold)));
-    this.props.setProperty(CacheXml.BYTES_THRESHOLD,
-        String.valueOf(bytesThreshold));
+    this.props.setProperty(CacheXml.BYTES_THRESHOLD, String.valueOf(bytesThreshold));
-   * @throws IllegalStateException
-   *           if the current settings has compaction enabled with maximum Oplog
-   *           Size specified as infinite ( represented by 0 ) *
+   * @throws IllegalStateException if the current settings has compaction enabled with maximum Oplog
+   *         Size specified as infinite ( represented by 0 ) *
-  public DiskWriteAttributes create()
-  {
+  public DiskWriteAttributes create() {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66