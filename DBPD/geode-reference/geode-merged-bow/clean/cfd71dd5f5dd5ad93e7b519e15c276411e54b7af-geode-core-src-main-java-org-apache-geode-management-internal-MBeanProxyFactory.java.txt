GEODE-6682: Create unit tests for MBeanProxyInvocationHandler (#4213)

Create MBeanProxyInvocationHandlerTest

Cleanup related management classes:
* MBeanProxyInvocationHandler
* MXBeanProxyInvocationHandler
* OpenTypeUtil
* OpenTypeConverter
-import java.beans.IntrospectionException;
+import org.apache.geode.annotations.VisibleForTesting;
+ * <p>
+ * <p>
-  private MBeanProxyInfoRepository proxyRepo;
+  private final MBeanProxyInfoRepository proxyRepo;
+  private final MBeanJMXAdapter jmxAdapter;
+  private final SystemManagementService service;
-
-  /**
-   * Interface between GemFire federation layer and Java JMX layer
-   */
-  private MBeanJMXAdapter jmxAdapter;
-
-  private SystemManagementService service;
-
-  /**
-   * @param jmxAdapter adapter to interface between JMX and GemFire
-   * @param service management service
-   */
-
-    this.proxyRepo = new MBeanProxyInfoRepository();
+    proxyRepo = new MBeanProxyInfoRepository();
-   *
-   * @param member {@link org.apache.geode.distributed.DistributedMember}
-   * @param objectName {@link javax.management.ObjectName} of the Bean
-   * @param monitoringRegion monitoring region containing the proxies
-  public void createProxy(DistributedMember member, ObjectName objectName,
-      Region<String, Object> monitoringRegion, Object newVal) {
-
+  void createProxy(DistributedMember member, ObjectName objectName,
+      Region<String, Object> monitoringRegion, Object newValue) {
-      FederationComponent federationComponent = (FederationComponent) newVal;
-      String interfaceClassName = federationComponent.getMBeanInterfaceClass();
+      FederationComponent federation = (FederationComponent) newValue;
+      String interfaceClassName = federation.getMBeanInterfaceClass();
-      Object object = MBeanProxyInvocationHandler.newProxyInstance(member, monitoringRegion,
-          objectName, federationComponent, interfaceClass);
+      Object proxy = MBeanProxyInvocationHandler.newProxyInstance(member, monitoringRegion,
+          objectName, federation, interfaceClass);
-      jmxAdapter.registerMBeanProxy(object, objectName);
+      jmxAdapter.registerMBeanProxy(proxy, objectName);
-      ProxyInfo proxyInfo = new ProxyInfo(interfaceClass, object, objectName);
+      ProxyInfo proxyInfo = new ProxyInfo(interfaceClass, proxy, objectName);
-      service.afterCreateProxy(objectName, interfaceClass, object, (FederationComponent) newVal);
+      service.afterCreateProxy(objectName, interfaceClass, proxy, (FederationComponent) newValue);
-    } catch (ClassNotFoundException | IntrospectionException e) {
+    } catch (ClassNotFoundException e) {
-
+   * <p>
-   *
-   * @param member {@link org.apache.geode.distributed.DistributedMember}
-   * @param monitoringRegion monitoring region containing the proxies
-  public void createAllProxies(DistributedMember member, Region<String, Object> monitoringRegion) {
-
+  void createAllProxies(DistributedMember member, Region<String, Object> monitoringRegion) {
-
-      ObjectName objectName = null;
-        objectName = ObjectName.getInstance(mbean.getKey());
+        ObjectName objectName = ObjectName.getInstance(mbean.getKey());
+
-          logger.debug("Creating proxy for ObjectName: " + objectName.toString());
+          logger.debug("Creating proxy for ObjectName {}", objectName);
-        logger.warn("Create Proxy failed for {} with exception {}", objectName, e.getMessage(), e);
+        logger.warn("Create Proxy failed for {} with exception {}", mbean.getKey(), e.getMessage(),
+            e);
-
-   *
-   * @param member {@link org.apache.geode.distributed.DistributedMember}
-   * @param monitoringRegion monitoring region containing the proxies
-  public void removeAllProxies(DistributedMember member, Region<String, Object> monitoringRegion) {
-
+  void removeAllProxies(DistributedMember member, Region<String, Object> monitoringRegion) {
-      Object val;
-        key = entry.getKey();// MBean Name in String format.
-        val = entry.getValue(); // Federation Component
+        // MBean Name in String format.
+        key = entry.getKey();
+        // Federation Component
+        Object federation = entry.getValue();
-        removeProxy(member, mbeanName, val);
+        removeProxy(member, mbeanName, federation);
-   *
-   * @param member {@link org.apache.geode.distributed.DistributedMember}
-   * @param objectName {@link javax.management.ObjectName} of the Bean
-  public void removeProxy(DistributedMember member, ObjectName objectName, Object oldVal) {
-
+  void removeProxy(DistributedMember member, ObjectName objectName, Object oldValue) {
-        logger.debug("Removing proxy for ObjectName: {}", objectName);
+        logger.debug("Removing proxy for ObjectName {}", objectName);
-            proxyInfo.getProxyInstance(), (FederationComponent) oldVal);
+            proxyInfo.getProxyInstance(), (FederationComponent) oldValue);
-        logger.debug("Removed proxy for ObjectName: {}", objectName);
+        logger.debug("Removed proxy for ObjectName {}", objectName);
-  public void updateProxy(ObjectName objectName, ProxyInfo proxyInfo, Object newObject,
-      Object oldObject) {
+  void updateProxy(ObjectName objectName, ProxyInfo proxyInfo, Object newObject, Object oldObject) {
-   * Find a particular proxy instance for a {@link javax.management.ObjectName} ,
-   * {@link org.apache.geode.distributed.DistributedMember} and interface class If the proxy
-   * interface does not implement the given interface class a {@link java.lang.ClassCastException}.
-   * will be thrown
+   * Find a particular proxy instance for a {@link ObjectName}, {@link DistributedMember} and
+   * interface class If the proxy interface does not implement the given interface class a
+   * {@link ClassCastException} will be thrown.
-   * @param objectName {@link javax.management.ObjectName} of the MBean
+   * @param objectName {@link ObjectName} of the MBean
+   *
-  public <T> T findProxy(ObjectName objectName, Class<T> interfaceClass) {
-
+  <T> T findProxy(ObjectName objectName, Class<T> interfaceClass) {
-
-
-  public ProxyInfo findProxyInfo(ObjectName objectName) {
+  ProxyInfo findProxyInfo(ObjectName objectName) {
-   * Find a set of proxies given a {@link org.apache.geode.distributed.DistributedMember}
+   * Find a set of proxies given a {@link DistributedMember}.
-   * @param member {@link org.apache.geode.distributed.DistributedMember}
-   * @return a set of {@link javax.management.ObjectName}
+   * @param member {@link DistributedMember}
+   *
+   * @return a set of {@link ObjectName}
-
-
-   * @param objectName {@link javax.management.ObjectName} of the MBean
+   * @param objectName {@link ObjectName} of the MBean
-  public long getLastUpdateTime(ObjectName objectName) {
-
-    ProxyInterface proxyObj = findProxy(objectName, ProxyInterface.class);
-
-    return proxyObj.getLastRefreshedTime();
-
+  long getLastUpdateTime(ObjectName objectName) {
+    ProxyInterface proxyInterface = findProxy(objectName, ProxyInterface.class);
+    return proxyInterface.getLastRefreshedTime();
+  @VisibleForTesting
-

MOV26 UPD40 INS83 INS83 INS83 MOV21 INS78 INS66 INS66 MOV43 UPD42 MOV43 UPD42 INS42 INS66 UPD66 UPD66 UPD66 UPD66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV43 MOV43 MOV43 MOV43 MOV32 MOV32 UPD42 UPD42 UPD42 UPD42 INS60 INS60 MOV43 UPD42 UPD42 UPD42 MOV43 UPD42 UPD42 MOV43 INS59 MOV43 INS59 INS42 MOV32 INS42 MOV32 UPD42 UPD45 UPD45 INS32 UPD42 INS45 MOV42 UPD42 MOV42 INS42 DEL66 DEL65 DEL29 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL52 DEL42 DEL22 DEL42 DEL66 DEL40 DEL65 DEL65 DEL42 DEL66 DEL40 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL83 DEL42 DEL43 DEL84 DEL42 DEL66 DEL40 DEL65 DEL65 DEL42 DEL66 DEL65 DEL83 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL45 DEL42 DEL32 DEL27 DEL42 DEL66 DEL40 DEL65 DEL65 DEL42 DEL66 DEL65 DEL83 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL66 DEL40 DEL65 DEL65 DEL42 DEL66 DEL40 DEL65 DEL66 DEL65 DEL83 DEL83 DEL40 DEL40 DEL40 DEL66 DEL40 DEL83 DEL83 DEL40 DEL40 DEL40 DEL40 DEL83