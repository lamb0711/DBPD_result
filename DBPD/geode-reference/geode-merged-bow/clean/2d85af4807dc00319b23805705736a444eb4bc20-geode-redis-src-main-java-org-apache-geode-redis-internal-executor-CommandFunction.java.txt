GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

-import org.apache.geode.redis.internal.RegionProvider;
-  private RegionProvider regionProvider;
-  public static void register(RegionProvider regionProvider) {
+  public static void register() {
-    FunctionService.registerFunction(new CommandFunction(stripedExecutor, regionProvider));
+    FunctionService.registerFunction(new CommandFunction(stripedExecutor));
-  public CommandFunction(StripedExecutor stripedExecutor,
-      RegionProvider regionProvider) {
+  public CommandFunction(StripedExecutor stripedExecutor) {
-    this.regionProvider = regionProvider;
+      case DEL:
+        callable = () -> new RedisKeyInRegion(localRegion).del(key);
+        break;
+      case EXISTS:
+        callable = () -> new RedisKeyInRegion(localRegion).exists(key);
+        break;
+      case TYPE:
+        callable = () -> new RedisKeyInRegion(localRegion).type(key);
+        break;
+      case PEXPIREAT: {
+        long timestamp = (long) args[1];
+        callable =
+            () -> new RedisKeyInRegion(localRegion).pexpireat(key, timestamp);
+        break;
+      }
+      case PERSIST:
+        callable = () -> new RedisKeyInRegion(localRegion).persist(key);
+        break;
+      case PTTL:
+        callable = () -> new RedisKeyInRegion(localRegion).pttl(key);
+        break;
+      case GETSET: {
+        ByteArrayWrapper value = (ByteArrayWrapper) args[1];
+        callable = () -> new RedisStringInRegion(localRegion).getset(key, value);
+        break;
+      }
+      case INCR:
+        callable = () -> new RedisStringInRegion(localRegion).incr(key);
+        break;
+      case DECR:
+        callable = () -> new RedisStringInRegion(localRegion).decr(key);
+        break;
+      case INCRBY: {
+        long increment = (long) args[1];
+        callable = () -> new RedisStringInRegion(localRegion).incrby(key, increment);
+        break;
+      }
+      case DECRBY: {
+        long decrement = (long) args[1];
+        callable = () -> new RedisStringInRegion(localRegion).decrby(key, decrement);
+        break;
+      }
-      case DEL:
-        callable = () -> new RedisKeyInRegion(localRegion, regionProvider).del(key);
-        break;
-      case EXISTS:
-        callable = () -> new RedisKeyInRegion(localRegion, regionProvider).exists(key);
-        break;

MOV49 MOV21 MOV10 MOV49 MOV21 MOV10 MOV10 MOV49 INS21 INS21 INS49 INS21 INS49 INS8 INS10 INS49 INS10 INS49 INS8 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS8 INS49 INS8 INS10 INS10 INS49 INS7 INS7 INS42 INS7 INS42 INS60 INS21 INS10 INS42 INS42 INS42 INS60 INS21 INS10 INS42 INS7 INS42 INS7 INS42 INS60 INS21 INS10 INS42 INS60 INS21 INS10 INS42 INS86 INS42 INS86 INS42 INS86 INS39 INS59 INS7 INS43 INS59 INS7 INS42 INS86 INS42 INS86 INS39 INS59 INS7 INS39 INS59 INS7 INS32 INS32 INS32 INS42 INS11 INS42 INS86 INS42 INS42 INS11 INS42 INS86 INS32 INS32 INS42 INS11 INS42 INS86 INS42 INS11 INS42 INS86 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS39 INS2 INS32 UPD42 UPD42 INS43 INS2 INS32 INS14 INS42 INS42 INS14 INS42 INS42 INS39 INS2 INS32 INS39 INS2 INS32 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS34 INS14 INS42 INS42 INS42 INS42 INS42 INS34 INS14 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS34 INS14 INS42 INS42 INS42 INS42 INS34 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL10