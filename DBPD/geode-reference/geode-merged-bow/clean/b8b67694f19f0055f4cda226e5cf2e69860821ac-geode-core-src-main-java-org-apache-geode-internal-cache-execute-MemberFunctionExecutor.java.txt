Merge branch 'develop' into feature/GEODE-7049

-import java.util.Iterator;
-  protected InternalDistributedSystem ds;
+  protected InternalDistributedSystem distributedSystem;
-  protected Set members;
+  protected Set<InternalDistributedMember> members;
-  public MemberFunctionExecutor(DistributedSystem s) {
-    this.ds = (InternalDistributedSystem) s;
-    this.members = this.ds.getDistributionManager().getNormalDistributionManagerIds();
+  MemberFunctionExecutor(DistributedSystem distributedSystem) {
+    this(distributedSystem, ((InternalDistributedSystem) distributedSystem).getDistributionManager()
+        .getNormalDistributionManagerIds());
-  public MemberFunctionExecutor(DistributedSystem s, DistributedMember m) {
-    this.ds = (InternalDistributedSystem) s;
-    this.members = Collections.singleton(m);
+  MemberFunctionExecutor(DistributedSystem distributedSystem, DistributedMember distributedMember) {
+    this(distributedSystem, Collections.singleton((InternalDistributedMember) distributedMember));
-  public MemberFunctionExecutor(DistributedSystem s, Set m) {
-    this.ds = (InternalDistributedSystem) s;
-    this.members = m;
+  MemberFunctionExecutor(DistributedSystem distributedSystem,
+      Set<? extends DistributedMember> members) {
+    this.distributedSystem = (InternalDistributedSystem) distributedSystem;
+    this.members = (Set<InternalDistributedMember>) members;
-  public MemberFunctionExecutor(DistributedSystem s, Set m,
+  public MemberFunctionExecutor(DistributedSystem distributedSystem,
+      Set<? extends DistributedMember> members,
-    this(s, m);
+    this(distributedSystem, members);
-    this.ds = memFunctionExecutor.ds;
-    this.members = new HashSet();
-    this.members.addAll(memFunctionExecutor.members);
-    this.sender = memFunctionExecutor.sender;
+    distributedSystem = memFunctionExecutor.distributedSystem;
+    members = new HashSet<>(memFunctionExecutor.members);
+    sender = memFunctionExecutor.sender;
-    this.memberMappedArg = argument;
-    this.isMemberMappedArgument = true;
+    memberMappedArg = argument;
+    isMemberMappedArgument = true;
-    this.rc = rs;
+    rc = rs;
-    this.args = arguments;
+    args = arguments;
-  @SuppressWarnings("unchecked")
-    final DistributionManager dm = this.ds.getDistributionManager();
-    final Set dest = new HashSet(this.members);
+    final DistributionManager dm = distributedSystem.getDistributionManager();
+    final Set<InternalDistributedMember> dest = new HashSet<>(members);
-        this.ds.getDistributionManager().getDistributionManagerId();
+        distributedSystem.getDistributionManager().getDistributionManagerId();
-        isTx = cache.getTxManager().getTXState() == null ? false : true;
+        isTx = cache.getTxManager().getTXState() != null;
-      HashMap<InternalDistributedMember, Object> memberArgs =
-          new HashMap<InternalDistributedMember, Object>();
-      Iterator<DistributedMember> iter = dest.iterator();
-      while (iter.hasNext()) {
-        InternalDistributedMember recip = (InternalDistributedMember) iter.next();
-        memberArgs.put(recip, getArgumentsForMember(recip.getId()));
+      HashMap<InternalDistributedMember, Object> memberArgs = new HashMap<>();
+      for (InternalDistributedMember distributedMember : dest) {
+        memberArgs.put(distributedMember, getArgumentsForMember(distributedMember.getId()));
-      MemberFunctionResultWaiter resultReceiver = new MemberFunctionResultWaiter(this.ds, localRC,
-          function, memberArgs, dest, resultSender);
+      MemberFunctionResultWaiter resultReceiver =
+          new MemberFunctionResultWaiter(distributedSystem, localRC,
+              function, memberArgs, dest, resultSender);
-      ResultCollector reply = resultReceiver.getFunctionResultFrom(dest, function, this);
-      return reply;
+      return resultReceiver.getFunctionResultFrom(dest, function, this);
-  public void validateExecution(final Function function, final Set dest) {
+  public void validateExecution(final Function function,
+      final Set<? extends DistributedMember> dest) {
-        DistributedMember funcTarget = (DistributedMember) dest.iterator().next();
+        DistributedMember funcTarget = dest.iterator().next();
-  public boolean isMemberMappedArgument() {
-    return this.isMemberMappedArgument;
-  }
-
-  @Override
-      return this.args;
+      return args;
-      return this.memberMappedArg.getArgumentsForMember(memberId);
+      return memberMappedArg.getArgumentsForMember(memberId);
-    return this.memberMappedArg;
+    return memberMappedArg;
-    return this.sender;
+    return sender;

MOV31 INS74 MOV44 INS44 UPD42 MOV43 INS43 UPD42 INS17 UPD42 UPD42 INS17 UPD42 INS74 INS42 UPD42 INS74 UPD42 MOV17 MOV17 MOV17 INS74 INS42 INS42 INS32 INS42 INS32 INS43 INS76 MOV43 INS76 UPD42 UPD42 INS74 MOV43 INS76 INS42 INS42 MOV32 MOV42 INS42 INS42 MOV11 INS42 INS43 INS11 MOV43 INS42 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS43 INS70 MOV43 INS36 INS42 INS42 UPD42 UPD42 INS74 INS42 INS74 INS40 INS42 INS42 INS74 INS42 INS44 INS42 INS8 MOV43 MOV32 INS42 MOV11 MOV43 INS43 MOV43 MOV43 INS42 MOV43 INS42 MOV21 INS42 UPD42 INS42 UPD74 MOV43 INS42 MOV43 INS27 UPD42 MOV32 MOV32 MOV33 UPD42 DEL40 DEL26 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL32 DEL7 DEL21 DEL83 DEL42 DEL44 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL42 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL40 DEL32 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL45 DEL79 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL27 DEL9 DEL9 DEL16 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL8 DEL61 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL11 DEL42 DEL78 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22