Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * StatArchiveFormat defines constants related to the statistic archive
- * file format.
+ * StatArchiveFormat defines constants related to the statistic archive file format.
-   * ARCHIVE_VERSION identifies the format of the contents of the archive.
-   * It should be changed any time an incompatible change is made.
-   * Its current value is <code>3</code>.
+   * ARCHIVE_VERSION identifies the format of the contents of the archive. It should be changed any
+   * time an incompatible change is made. Its current value is <code>3</code>.
-   * <li> Changed from 2 to 3 with addition of <code>RESOURCE_INSTANCE_INITIALIZE_TOKEN</code>
-   * <li> Changed from 3 to 4 with addition of largerBetter boolean in statistic descriptor
+   * <li>Changed from 2 to 3 with addition of <code>RESOURCE_INSTANCE_INITIALIZE_TOKEN</code>
+   * <li>Changed from 3 to 4 with addition of largerBetter boolean in statistic descriptor
-  public static final byte ARCHIVE_VERSION=4;
+  public static final byte ARCHIVE_VERSION = 4;
-  public static final byte SAMPLE_TOKEN=0;
+  public static final byte SAMPLE_TOKEN = 0;
-  public static final byte RESOURCE_TYPE_TOKEN=1;
+  public static final byte RESOURCE_TYPE_TOKEN = 1;
-  public static final byte RESOURCE_INSTANCE_CREATE_TOKEN=2;
+  public static final byte RESOURCE_INSTANCE_CREATE_TOKEN = 2;
-   * Token notes that a previous resource instance no longer exists
-   * and thus will have any more samples of its statistic values taken.
+   * Token notes that a previous resource instance no longer exists and thus will have any more
+   * samples of its statistic values taken.
-  public static final byte RESOURCE_INSTANCE_DELETE_TOKEN=3;
+  public static final byte RESOURCE_INSTANCE_DELETE_TOKEN = 3;
-  public static final byte RESOURCE_INSTANCE_INITIALIZE_TOKEN=4;
+  public static final byte RESOURCE_INSTANCE_INITIALIZE_TOKEN = 4;
-   * Token defines a new archive and provides some global information
-   * about the environment the archive was created in.
+   * Token defines a new archive and provides some global information about the environment the
+   * archive was created in.
-  public static final byte HEADER_TOKEN=77;
+  public static final byte HEADER_TOKEN = 77;
-  public static final int ILLEGAL_RESOURCE_INST_ID=-1;
+  public static final int ILLEGAL_RESOURCE_INST_ID = -1;
-   * The maximum value a resource inst id can have and still be stored
-   * in the archive as an unsigned byte.
+   * The maximum value a resource inst id can have and still be stored in the archive as an unsigned
+   * byte.
-  public static final int MAX_BYTE_RESOURCE_INST_ID=252;
+  public static final int MAX_BYTE_RESOURCE_INST_ID = 252;
-   * Used to say that the next two bytes contain the resource inst id
-   * as an unsigned short.
+   * Used to say that the next two bytes contain the resource inst id as an unsigned short.
-  public static final int SHORT_RESOURCE_INST_ID_TOKEN=253;
+  public static final int SHORT_RESOURCE_INST_ID_TOKEN = 253;
-   * Used to say that the next four bytes contain the resource inst id
-   * as an int.
+   * Used to say that the next four bytes contain the resource inst id as an int.
-  public static final int INT_RESOURCE_INST_ID_TOKEN=254;
+  public static final int INT_RESOURCE_INST_ID_TOKEN = 254;
-  public static final int ILLEGAL_RESOURCE_INST_ID_TOKEN=255;
+  public static final int ILLEGAL_RESOURCE_INST_ID_TOKEN = 255;
-   * The maximum value a resource inst id can have and still be stored
-   * in the archive as an unsigned short.
+   * The maximum value a resource inst id can have and still be stored in the archive as an unsigned
+   * short.
-  public static final int MAX_SHORT_RESOURCE_INST_ID=65535;
+  public static final int MAX_SHORT_RESOURCE_INST_ID = 65535;
-  public static final int ILLEGAL_STAT_OFFSET=255;
+  public static final int ILLEGAL_STAT_OFFSET = 255;
-   * The maximum value a timestamp can have and still be stored
-   * in the archive as an unsigned short.
+   * The maximum value a timestamp can have and still be stored in the archive as an unsigned short.
-  public static final int MAX_SHORT_TIMESTAMP=65534;
+  public static final int MAX_SHORT_TIMESTAMP = 65534;
-  public static final int INT_TIMESTAMP_TOKEN=65535;
+  public static final int INT_TIMESTAMP_TOKEN = 65535;
-   * The maximum value a compact value can have and still be stored
-   * in the archive as one byte.
+   * The maximum value a compact value can have and still be stored in the archive as one byte.
-  public static final int MAX_1BYTE_COMPACT_VALUE=Byte.MAX_VALUE;
+  public static final int MAX_1BYTE_COMPACT_VALUE = Byte.MAX_VALUE;
-   * The minimum value a compact value can have and still be stored
-   * in the archive as one byte.
+   * The minimum value a compact value can have and still be stored in the archive as one byte.
-  public static final int MIN_1BYTE_COMPACT_VALUE=Byte.MIN_VALUE+7;
+  public static final int MIN_1BYTE_COMPACT_VALUE = Byte.MIN_VALUE + 7;
-   * The maximum value a compact value can have and still be stored
-   * in the archive as two bytes.
+   * The maximum value a compact value can have and still be stored in the archive as two bytes.
-  public static final int MAX_2BYTE_COMPACT_VALUE=Short.MAX_VALUE;
+  public static final int MAX_2BYTE_COMPACT_VALUE = Short.MAX_VALUE;
-   * The minimum value a compact value can have and still be stored
-   * in the archive as two bytes.
+   * The minimum value a compact value can have and still be stored in the archive as two bytes.
-  public static final int MIN_2BYTE_COMPACT_VALUE=Short.MIN_VALUE;
+  public static final int MIN_2BYTE_COMPACT_VALUE = Short.MIN_VALUE;
-  public static final int COMPACT_VALUE_2_TOKEN=Byte.MIN_VALUE;
+  public static final int COMPACT_VALUE_2_TOKEN = Byte.MIN_VALUE;
-  public static final int COMPACT_VALUE_3_TOKEN=Byte.MIN_VALUE+1;
+  public static final int COMPACT_VALUE_3_TOKEN = Byte.MIN_VALUE + 1;
-  public static final int COMPACT_VALUE_4_TOKEN=Byte.MIN_VALUE+2;
+  public static final int COMPACT_VALUE_4_TOKEN = Byte.MIN_VALUE + 2;
-  public static final int COMPACT_VALUE_5_TOKEN=Byte.MIN_VALUE+3;
+  public static final int COMPACT_VALUE_5_TOKEN = Byte.MIN_VALUE + 3;
-  public static final int COMPACT_VALUE_6_TOKEN=Byte.MIN_VALUE+4;
+  public static final int COMPACT_VALUE_6_TOKEN = Byte.MIN_VALUE + 4;
-  public static final int COMPACT_VALUE_7_TOKEN=Byte.MIN_VALUE+5;
+  public static final int COMPACT_VALUE_7_TOKEN = Byte.MIN_VALUE + 5;
-  public static final int COMPACT_VALUE_8_TOKEN=Byte.MIN_VALUE+6;
+  public static final int COMPACT_VALUE_8_TOKEN = Byte.MIN_VALUE + 6;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66