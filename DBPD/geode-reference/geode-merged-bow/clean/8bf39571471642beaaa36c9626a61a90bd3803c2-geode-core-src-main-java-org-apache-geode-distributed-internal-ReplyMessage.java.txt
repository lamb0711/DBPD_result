Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A message that acknowledges that an operation completed
- * successfully, or threw a CacheException.  Note that even though
- * this message has a <code>processorId</code>, it is not a {@link
- * MessageWithReply} because it is sent in <b>reply</b> to another
- * message. 
+ * A message that acknowledges that an operation completed successfully, or threw a CacheException.
+ * Note that even though this message has a <code>processorId</code>, it is not a
+ * {@link MessageWithReply} because it is sent in <b>reply</b> to another message.
-public class ReplyMessage extends HighPriorityDistributionMessage  {
+public class ReplyMessage extends HighPriorityDistributionMessage {
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-    
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  @Override  
+  @Override
-  
+
-  public static void send(InternalDistributedMember recipient, int processorId, 
-                          ReplyException exception,
-                          ReplySender dm) {
+  public static void send(InternalDistributedMember recipient, int processorId,
+      ReplyException exception, ReplySender dm) {
-  
+
-  public static void send(InternalDistributedMember recipient, int processorId, 
-                          ReplyException exception,
-                          ReplySender dm,
-                          boolean internal) 
-  {
+  public static void send(InternalDistributedMember recipient, int processorId,
+      ReplyException exception, ReplySender dm, boolean internal) {
-      if (exception.getCause() != null && (exception.getCause() instanceof EntryNotFoundException)) {
+      if (exception.getCause() != null
+          && (exception.getCause() instanceof EntryNotFoundException)) {
-      } else if (exception.getCause() != null && (exception.getCause() instanceof ConcurrentCacheModificationException)) {
+      } else if (exception.getCause() != null
+          && (exception.getCause() instanceof ConcurrentCacheModificationException)) {
-  
+
-  public static void send(InternalDistributedMember recipient, int processorId, 
-                          Object returnValue,
-                          ReplySender dm) 
-  {
+  public static void send(InternalDistributedMember recipient, int processorId, Object returnValue,
+      ReplySender dm) {
-  public static void send(InternalDistributedMember recipient, int processorId, 
-                          ReplyException exception,
-                          ReplySender dm,
-                          boolean ignored,
-                          boolean closed, 
-                          boolean sendViaJGroups) {
+  public static void send(InternalDistributedMember recipient, int processorId,
+      ReplyException exception, ReplySender dm, boolean ignored, boolean closed,
+      boolean sendViaJGroups) {
-  
-  public static void send(InternalDistributedMember recipient, int processorId, 
-                          ReplyException exception,
-                          ReplySender dm,
-                          boolean ignored,
-                          boolean closed, 
-                          boolean sendViaJGroups,
-                          boolean internal) {
+
+  public static void send(InternalDistributedMember recipient, int processorId,
+      ReplyException exception, ReplySender dm, boolean ignored, boolean closed,
+      boolean sendViaJGroups, boolean internal) {
-      }
-      else if (exception != null) {
-        if (exception.getCause() != null && (exception.getCause() instanceof EntryNotFoundException)) {
+      } else if (exception != null) {
+        if (exception.getCause() != null
+            && (exception.getCause() instanceof EntryNotFoundException)) {
-        } else if (exception.getCause() != null && (exception.getCause() instanceof ConcurrentCacheModificationException)) {
+        } else if (exception.getCause() != null
+            && (exception.getCause() instanceof ConcurrentCacheModificationException)) {
-      }
-      else if (ignored) {
+      } else if (ignored) {
-    
+
-  
-  
-  
+
+
+
-   * Processes this message.  This method is invoked by the receiver
-   * of the message if the message is not direct ack. If the message
-   * is a direct ack, the process(dm, ReplyProcessor) method is invoked instead.
+   * Processes this message. This method is invoked by the receiver of the message if the message is
+   * not direct ack. If the message is a direct ack, the process(dm, ReplyProcessor) method is
+   * invoked instead.
+   * 
-  @Override  
+  @Override
+
-        dm.getStats().incReplyMessageTime(DistributionStats.getStatTime()-startTime);
+        dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);
-  
+
-   * @param dm 
+   * @param dm
-    if (processor == null) return;
+    if (processor == null)
+      return;
-  
+
-      ReplyException exception = (ReplyException)this.returnValue;
+      ReplyException exception = (ReplyException) this.returnValue;
-  
+
-  
+
-  //////////////////////  Utility Methods  //////////////////////
+  ////////////////////// Utility Methods //////////////////////
-  
+
-  
+
-  public static final byte INTERNAL_FLAG = (byte)0x80;
+  public static final byte INTERNAL_FLAG = (byte) 0x80;
-  @Override  
+  @Override
-    
+
-  @Override  
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  @Override
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.ignored = testFlag(status,IGNORED_FLAG);
-    this.closed = testFlag(status,CLOSED_FLAG);
-    if (testFlag(status,PROCESSOR_ID_FLAG)) {
+    this.ignored = testFlag(status, IGNORED_FLAG);
+    this.closed = testFlag(status, CLOSED_FLAG);
+    if (testFlag(status, PROCESSOR_ID_FLAG)) {
-    if (testFlag(status,EXCEPTION_FLAG)) {
+    if (testFlag(status, EXCEPTION_FLAG)) {
-    } else if (testFlag(status,OBJECT_FLAG)) {
+    } else if (testFlag(status, OBJECT_FLAG)) {
-    this.internal = testFlag(status,INTERNAL_FLAG);
+    this.internal = testFlag(status, INTERNAL_FLAG);
-      sb.append(" with exception ");
-      sb.append(ex);
-    }
+        sb.append(" with exception ");
+        sb.append(ex);
+      }
-  
+
-  @Override  
+  @Override

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66