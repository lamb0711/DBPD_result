Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/geode into develop

* 'develop' of https://git-wip-us.apache.org/repos/asf/geode: (57 commits)
  GEODE-2551 Fix code issues found by AppChecker
  Revert "GEODE-1887: Now Size api goes through ServerProxy when cache is of type client and DataPolicy is Empty."
  GEODE-2538: Don't deserialize values on the server when getting results
  GEODE-2461: remove json4s-ast_2.10 as explicit dependency
  GEODE-2547: Interest registration no longer causes a CacheLoader to be invoked
  GEODE-2526: Enhance log statement to include ResourceTypeName
  GEODE-880 Remove unused classes
  GEODE-2460: update dependency versions
  GEODE-1995: Removed ReliableMessageQueue, ReliableMessageQueueFactory, ReliableMessageQueueFactoryImpl and it's usage in the code from GemfireCacheImpl and DistributedRegion.
  GEODE-2550 Improve README and BUILDING
  GEODE-2538: Don't invoke a cache loader when fetching values for a lucene query
  GEODE-2404: Added support for destroying lucene indexes
  GEODE-2545: NPE during lucene query execution when cache is closing or region is destroyed
  GEODE-2515: Disabling BaseLineAndCompareQueryPerfJUnitTest
  GEODE-2142: Removing JSON licence stuff from NOTICE files
  GEODE-2142: removing tests so run precheckin
  GEODE-2142: final compiling build
  GEODE-2142: cyclical dependency in gradle build
  GEODE-2142: spotless
  GEODE-2142: Refactoring of tests to work with new JSONObject class. Changing file export to use Base64 encoding.
  ...

-import org.apache.geode.cache.execute.Execution;
-import org.apache.geode.cache.execute.FunctionAdapter;
-import org.apache.geode.cache.execute.FunctionInvocationTargetException;
-import org.apache.geode.cache.execute.ResultCollector;
-import org.apache.geode.cache.lucene.internal.cli.functions.LuceneCreateIndexFunction;
-import org.apache.geode.cache.lucene.internal.cli.functions.LuceneDescribeIndexFunction;
-import org.apache.geode.cache.lucene.internal.cli.functions.LuceneListIndexFunction;
-import org.apache.geode.cache.lucene.internal.cli.functions.LuceneSearchIndexFunction;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.execute.*;
+import org.apache.geode.cache.lucene.internal.cli.functions.*;
+import org.apache.geode.internal.lang.StringUtils;
+  private static final LuceneDestroyIndexFunction destroyIndexFunction =
+      new LuceneDestroyIndexFunction();
+  @CliCommand(value = LuceneCliStrings.LUCENE_DESTROY_INDEX,
+      help = LuceneCliStrings.LUCENE_DESTROY_INDEX__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ)
+  public Result destroyIndex(
+      @CliOption(key = LuceneCliStrings.LUCENE__INDEX_NAME, mandatory = false,
+          help = LuceneCliStrings.LUCENE_DESTROY_INDEX__NAME__HELP) final String indexName,
+
+      @CliOption(key = LuceneCliStrings.LUCENE__REGION_PATH, mandatory = true,
+          optionContext = ConverterHint.REGIONPATH,
+          help = LuceneCliStrings.LUCENE_DESTROY_INDEX__REGION_HELP) final String regionPath) {
+    if (StringUtils.isBlank(regionPath) || regionPath.equals(Region.SEPARATOR)) {
+      return ResultBuilder.createInfoResult(
+          CliStrings.format(LuceneCliStrings.LUCENE_DESTROY_INDEX__MSG__REGION_CANNOT_BE_EMPTY));
+    }
+
+    if (StringUtils.isEmpty(indexName)) {
+      return ResultBuilder.createInfoResult(
+          CliStrings.format(LuceneCliStrings.LUCENE_DESTROY_INDEX__MSG__INDEX_CANNOT_BE_EMPTY));
+    }
+
+    this.securityService.authorizeRegionManage(regionPath);
+
+    Result result = null;
+    try {
+      LuceneIndexInfo indexInfo = new LuceneIndexInfo(indexName, regionPath);
+      ResultCollector<?, ?> rc = executeFunction(destroyIndexFunction, indexInfo, false);
+      List<CliFunctionResult> functionResults = (List<CliFunctionResult>) rc.getResult();
+      CliFunctionResult cliFunctionResult = functionResults.get(0);
+
+      final TabularResultData tabularResult = ResultBuilder.createTabularResultData();
+      tabularResult.accumulate("Member", cliFunctionResult.getMemberIdOrName());
+      if (cliFunctionResult.isSuccessful()) {
+        tabularResult.accumulate("Status",
+            indexName == null
+                ? CliStrings.format(
+                    LuceneCliStrings.LUCENE_DESTROY_INDEX__MSG__SUCCESSFULLY_DESTROYED_INDEXES_FOR_REGION_0,
+                    new Object[] {regionPath})
+                : CliStrings.format(
+                    LuceneCliStrings.LUCENE_DESTROY_INDEX__MSG__SUCCESSFULLY_DESTROYED_INDEX_0_FOR_REGION_1,
+                    new Object[] {indexName, regionPath}));
+      } else {
+        tabularResult.accumulate("Status", "Failed: " + cliFunctionResult.getMessage());
+      }
+      result = ResultBuilder.buildResult(tabularResult);
+      if (cliFunctionResult.isSuccessful()) {
+        persistClusterConfiguration(result, () -> {
+          // Update the xml entity (region entity) to remove the async event id(s) and index(es)
+          getSharedConfiguration().addXmlEntity((XmlEntity) cliFunctionResult.getXmlEntity(), null);
+        });
+      }
+    } catch (FunctionInvocationTargetException ignore) {
+      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
+          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_DESTROY_INDEX));
+    } catch (VirtualMachineError e) {
+      SystemFailure.initiateFailure(e);
+      throw e;
+    } catch (IllegalArgumentException e) {
+      result = ResultBuilder.createInfoResult(e.getMessage());
+    } catch (Throwable t) {
+      SystemFailure.checkFailure();
+      getCache().getLogger().warning(LuceneCliStrings.LUCENE_DESTROY_INDEX__EXCEPTION_MESSAGE, t);
+      result = ResultBuilder.createGemFireErrorResult(t.getMessage());
+    }
+    return result;
+  }
+
-    final Set<DistributedMember> targetMembers;
+    ResultCollector<?, ?> results = null;
-      targetMembers =
-          CliUtil.getMembersForeRegionViaFunction(getCache(), indexInfo.getRegionPath(), true);
-      if (targetMembers.isEmpty()) {
-        throw new IllegalArgumentException("Region not found.");
-      }
+      results = executeFunction(function, indexInfo, true);
-      targetMembers = CliUtil.findMembersOrThrow(groups, null);
+      Set<DistributedMember> targetMembers = CliUtil.findMembersOrThrow(groups, null);
+      results = CliUtil.executeFunction(function, indexInfo, targetMembers);
-    return CliUtil.executeFunction(function, indexInfo, targetMembers);
+    return results;
-    final Set<DistributedMember> targetMembers =
-        CliUtil.getMembersForeRegionViaFunction(getCache(), queryInfo.getRegionPath(), false);
-    if (targetMembers.isEmpty())
-      throw new IllegalArgumentException("Region not found.");
-    return CliUtil.executeFunction(searchIndexFunction, queryInfo, targetMembers);
+    return executeFunction(searchIndexFunction, queryInfo, false);
+  }
+
+  protected ResultCollector<?, ?> executeFunction(Function function,
+      LuceneFunctionSerializable functionArguments, boolean returnAllMembers) {
+    Set<DistributedMember> targetMembers = CliUtil.getMembersForeRegionViaFunction(getCache(),
+        functionArguments.getRegionPath(), returnAllMembers);
+    if (targetMembers.isEmpty()) {
+      throw new IllegalArgumentException(CliStrings.format(
+          LuceneCliStrings.LUCENE_DESTROY_INDEX__MSG__COULDNOT_FIND_MEMBERS_FOR_REGION_0,
+          new Object[] {functionArguments.getRegionPath()}));
+    }
+    return CliUtil.executeFunction(function, functionArguments, targetMembers);

MOV26 UPD40 UPD40 UPD40 UPD40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS77 INS77 INS77 INS83 INS43 INS42 INS44 INS44 INS8 INS83 MOV74 INS42 MOV44 MOV43 INS8 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS14 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS77 INS83 INS43 INS42 INS77 INS83 INS43 INS42 INS25 INS25 INS21 INS60 INS54 INS41 INS41 INS43 INS76 INS76 INS43 INS42 INS43 INS42 INS39 INS42 INS60 MOV25 MOV41 INS43 INS42 INS40 INS42 INS40 INS42 INS9 INS42 INS4 INS42 INS40 INS42 INS40 INS42 INS80 INS80 INS80 INS42 INS42 INS80 INS80 INS80 INS80 INS42 INS27 INS8 INS32 INS8 INS32 INS43 INS59 INS8 INS12 INS12 INS12 INS12 INS42 INS74 INS8 INS8 INS42 INS32 INS42 INS42 INS42 MOV74 MOV59 INS8 INS42 INS40 INS40 INS42 INS40 INS42 INS9 INS42 INS40 INS42 INS40 INS42 INS9 INS42 INS40 INS42 INS40 INS32 INS32 INS41 INS42 INS42 INS42 INS41 INS22 INS42 INS42 INS42 INS42 INS33 INS60 INS60 INS60 INS60 INS60 INS21 INS25 INS21 INS25 INS44 INS8 INS44 INS8 INS44 INS8 INS44 INS8 INS43 INS76 INS76 UPD42 INS33 MOV21 INS60 MOV21 INS42 INS42 INS42 INS9 INS53 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS52 INS42 INS43 INS59 INS74 INS59 UPD74 MOV74 INS59 INS43 INS59 INS83 INS43 INS59 INS32 INS32 INS8 INS8 INS7 INS32 INS8 INS43 INS42 INS21 INS43 INS42 INS21 INS53 MOV43 INS42 INS21 INS43 INS42 INS21 INS21 INS21 INS42 INS74 INS59 INS42 MOV14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS76 INS76 INS42 INS32 UPD43 UPD43 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS21 INS21 INS42 INS32 INS42 INS42 INS21 INS42 INS7 INS42 INS32 INS42 INS7 INS42 INS32 INS32 INS7 UPD42 INS43 INS43 INS42 MOV32 UPD42 MOV32 UPD42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 UPD42 INS74 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS40 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS40 INS3 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS45 INS16 INS42 INS42 INS45 INS27 INS42 INS42 INS86 INS42 INS42 INS32 INS42 INS42 INS32 MOV32 INS42 INS42 INS42 INS32 INS5 INS4 INS42 INS42 INS27 INS32 INS32 INS45 INS32 INS8 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS43 INS85 INS32 INS42 INS33 INS42 INS42 INS40 INS3 INS42 INS42 INS40 INS3 INS42 INS42 INS21 INS42 INS42 INS42 INS5 INS4 INS5 INS4 INS32 INS43 INS85 INS42 INS43 INS85 INS42 INS42 INS32 INS42 INS11 INS33 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL8 DEL9 DEL45 DEL53 DEL83 DEL42 DEL83 DEL60 DEL8 DEL31