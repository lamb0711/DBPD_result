Merge branch 'release/1.4.0'

+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+import java.util.TimerTask;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.logging.log4j.Logger;
-
-import java.io.IOException;
-import java.net.InetSocketAddress;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
-import java.util.TimerTask;
-import java.util.concurrent.Callable;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.Future;
-import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.atomic.AtomicInteger;
-  /**
-   * a flag to mark a coordinator's viewCreator for shutdown
-   */
-  private boolean markViewCreatorForShutdown = false;
-
-    logger.info("received join request from {}", incomingRequest.getMemberID());
+    logger.info("Received a join request from {}", incomingRequest.getMemberID());
-    logger.info("Received a join request from " + incomingRequest.getSender());
+  }
+  private void sendDHKeys() {
+    if (isCoordinator
+        && !services.getConfig().getDistributionConfig().getSecurityUDPDHAlgo().isEmpty()) {
+      synchronized (viewRequests) {
+        for (DistributionMessage request : viewRequests) {
+          if (request instanceof JoinRequestMessage) {
+
+            services.getMessenger().initClusterKey();
+            JoinRequestMessage jreq = (JoinRequestMessage) request;
+            // this will inform about cluster-secret key, as we have authenticated at this point
+            JoinResponseMessage response = new JoinResponseMessage(jreq.getSender(),
+                services.getMessenger().getClusterSecretKey(), jreq.getRequestId());
+            services.getMessenger().send(response);
+          }
+        }
+      }
+    }
+    sendDHKeys();
-        markViewCreatorForShutdown = true;
+        getViewCreator().markViewCreatorForShutdown();
+  boolean checkIfAvailable(InternalDistributedMember fmbr) {
+    // return the member id if it fails health checks
+    logger.info("checking state of member " + fmbr);
+    if (services.getHealthMonitor().checkIfAvailable(fmbr,
+        "Member failed to acknowledge a membership view", false)) {
+      logger.info("member " + fmbr + " passed availability check");
+      return true;
+    }
+    logger.info("member " + fmbr + " failed availability check");
+    return false;
+  }
+
+  private InternalDistributedMember getMemId(NetMember jgId,
+      List<InternalDistributedMember> members) {
+    for (InternalDistributedMember m : members) {
+      if (((GMSMember) m.getNetMember()).equals(jgId)) {
+        return m;
+      }
+    }
+    return null;
+  }
+
+  @Override
+  public InternalDistributedMember getMemberID(NetMember jgId) {
+    NetView v = currentView;
+    InternalDistributedMember ret = null;
+    if (v != null) {
+      ret = getMemId(jgId, v.getMembers());
+    }
+
+    if (ret == null) {
+      v = preparedView;
+      if (v != null) {
+        ret = getMemId(jgId, v.getMembers());
+      }
+    }
+
+    if (ret == null) {
+      return new InternalDistributedMember(jgId);
+    }
+
+    return ret;
+  }
+
+    private boolean markViewCreatorForShutdown = false; // see GEODE-870
+
-      shutdown = true;
+      setShutdownFlag();
-            shutdown = true;
+            setShutdownFlag();
-          shutdown = true;
+          setShutdownFlag();
-          shutdown = true;
+          setShutdownFlag();
+     * marks this ViewCreator as being shut down. It may be some short amount of time before the
+     * ViewCreator thread exits.
+     */
+    private void setShutdownFlag() {
+      shutdown = true;
+    }
+
+    /**
+     * This allows GMSJoinLeave to tell the ViewCreator to shut down after finishing its current
+     * task. See GEODE-870.
+     */
+    private void markViewCreatorForShutdown() {
+      this.markViewCreatorForShutdown = true;
+    }
+
+    /**
-                shutdown = true;
+                setShutdownFlag();
-              shutdown = true;
+              setShutdownFlag();
-              shutdown = true;
+              setShutdownFlag();
-        shutdown = true;
+        setShutdownFlag();
-     * 
+     *
-     * 
+     *
-          shutdown = true;
+          setShutdownFlag();
-              shutdown = true;
+              setShutdownFlag();
-        shutdown = true;
+        setShutdownFlag();
-        shutdown = true;
+        setShutdownFlag();
-    boolean getTestFlageForRemovalRequest() {
+    boolean getTestFlagForRemovalRequest() {
+
-  boolean checkIfAvailable(InternalDistributedMember fmbr) {
-    // return the member id if it fails health checks
-    logger.info("checking state of member " + fmbr);
-    if (services.getHealthMonitor().checkIfAvailable(fmbr,
-        "Member failed to acknowledge a membership view", false)) {
-      logger.info("member " + fmbr + " passed availability check");
-      return true;
-    }
-    logger.info("member " + fmbr + " failed availability check");
-    return false;
-  }
-
-  private InternalDistributedMember getMemId(NetMember jgId,
-      List<InternalDistributedMember> members) {
-    for (InternalDistributedMember m : members) {
-      if (((GMSMember) m.getNetMember()).equals(jgId)) {
-        return m;
-      }
-    }
-    return null;
-  }
-
-  @Override
-  public InternalDistributedMember getMemberID(NetMember jgId) {
-    NetView v = currentView;
-    InternalDistributedMember ret = null;
-    if (v != null) {
-      ret = getMemId(jgId, v.getMembers());
-    }
-
-    if (ret == null) {
-      v = preparedView;
-      if (v != null) {
-        ret = getMemId(jgId, v.getMembers());
-      }
-    }
-
-    if (ret == null) {
-      return new InternalDistributedMember(jgId);
-    }
-
-    return ret;
-  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 MOV31 MOV31 INS31 INS83 INS39 INS42 INS8 MOV23 INS31 INS31 INS25 INS21 INS29 INS83 INS39 INS42 MOV8 INS29 INS83 INS39 INS42 INS8 UPD42 INS27 INS8 INS32 INS65 INS65 INS21 UPD45 INS42 INS38 INS51 INS42 INS32 INS66 INS66 INS66 INS66 INS7 INS32 INS42 INS8 INS42 INS22 INS9 INS32 INS42 INS70 INS12 INS52 INS42 INS32 INS32 INS32 INS32 INS42 INS44 INS42 INS8 INS32 INS8 MOV44 INS8 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS25 INS32 INS42 MOV21 INS54 INS21 INS32 INS42 INS42 INS42 INS62 INS8 INS42 MOV8 MOV12 INS32 INS32 INS42 INS42 INS43 INS21 INS60 INS60 INS21 MOV44 INS42 INS42 MOV12 MOV12 INS42 INS32 INS43 INS59 INS43 INS59 INS32 MOV44 MOV8 INS32 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS32 INS42 INS42 INS32 MOV51 INS32 INS42 INS42 INS43 INS42 INS43 INS32 INS32 INS32 INS42 INS42 INS42 INS12 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 MOV44 INS8 INS42 INS42 INS42 INS42 INS21 INS32 INS42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL9 DEL7 DEL66 DEL65 DEL29 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL54 DEL8 DEL12 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7