Squashed commit of the following:

commit 70a76592a58379bdd9b53433877b64831fc7432e
Author: Bruce Schuchardt <bschuchardt@pivotal.io>
Date:   Tue Jan 9 08:37:45 2018 -0800

    GEODE-3588 2 restarts of Locator results in split brain

    removed thread dump in new test

commit 89bf34c39f3df4ed7b16d6c9a256e2d26b9d2267
Author: Bruce Schuchardt <bschuchardt@pivotal.io>
Date:   Mon Jan 8 15:57:09 2018 -0800

    GEODE-3588 2 restarts of Locator results in split brain

    Udo's fix for GEODE-870 added a new boolean instance variable to
    GMSJoinLeave to tell its ViewCreator thread to shut down.  This works
    but the state was never being reset after its first use.  This caused
    Subsequent ViewCreator threads to shut down immediately.  The only
    way to fix this condition without a patch is to restart the coordinator node.

    The patch moves this boolean variable to the ViewCreator thread so that
    it is automatically reset when a new ViewCreator is instantiated.

    I also did a little code cleanup, moving GMSJoinLeave methods from the
    end of the file to where its other methods are located and adding
    a setShutdownFlag() method during debugging so I could isolate what
    was happening.

Sarge reviewed the changes for me so this closes #1255

(cherry picked from commit 3cf7caab3c3726dfb47e12a900240e377e035594)

-  /**
-   * a flag to mark a coordinator's viewCreator for shutdown
-   */
-  private boolean markViewCreatorForShutdown = false;
-
-    logger.info("received join request from {}", incomingRequest.getMemberID());
+    logger.info("Received a join request from {}", incomingRequest.getMemberID());
-    logger.info("Received a join request from " + incomingRequest.getSender());
-        markViewCreatorForShutdown = true;
+        getViewCreator().markViewCreatorForShutdown();
+  boolean checkIfAvailable(InternalDistributedMember fmbr) {
+    // return the member id if it fails health checks
+    logger.info("checking state of member " + fmbr);
+    if (services.getHealthMonitor().checkIfAvailable(fmbr,
+        "Member failed to acknowledge a membership view", false)) {
+      logger.info("member " + fmbr + " passed availability check");
+      return true;
+    }
+    logger.info("member " + fmbr + " failed availability check");
+    return false;
+  }
+
+  private InternalDistributedMember getMemId(NetMember jgId,
+      List<InternalDistributedMember> members) {
+    for (InternalDistributedMember m : members) {
+      if (((GMSMember) m.getNetMember()).equals(jgId)) {
+        return m;
+      }
+    }
+    return null;
+  }
+
+  @Override
+  public InternalDistributedMember getMemberID(NetMember jgId) {
+    NetView v = currentView;
+    InternalDistributedMember ret = null;
+    if (v != null) {
+      ret = getMemId(jgId, v.getMembers());
+    }
+
+    if (ret == null) {
+      v = preparedView;
+      if (v != null) {
+        ret = getMemId(jgId, v.getMembers());
+      }
+    }
+
+    if (ret == null) {
+      return new InternalDistributedMember(jgId);
+    }
+
+    return ret;
+  }
+
+    private boolean markViewCreatorForShutdown = false; // see GEODE-870
+
-      shutdown = true;
+      setShutdownFlag();
-            shutdown = true;
+            setShutdownFlag();
-          shutdown = true;
+          setShutdownFlag();
-          shutdown = true;
+          setShutdownFlag();
+     * marks this ViewCreator as being shut down. It may be some short amount of time before the
+     * ViewCreator thread exits.
+     */
+    private void setShutdownFlag() {
+      shutdown = true;
+    }
+
+    /**
+     * This allows GMSJoinLeave to tell the ViewCreator to shut down after finishing its current
+     * task. See GEODE-870.
+     */
+    private void markViewCreatorForShutdown() {
+      this.markViewCreatorForShutdown = true;
+    }
+
+    /**
-                shutdown = true;
+                setShutdownFlag();
-              shutdown = true;
+              setShutdownFlag();
-              shutdown = true;
+              setShutdownFlag();
-        shutdown = true;
+        setShutdownFlag();
-          shutdown = true;
+          setShutdownFlag();
-              shutdown = true;
+              setShutdownFlag();
-        shutdown = true;
+        setShutdownFlag();
-        shutdown = true;
+        setShutdownFlag();
-    boolean getTestFlageForRemovalRequest() {
+    boolean getTestFlagForRemovalRequest() {
+
-  boolean checkIfAvailable(InternalDistributedMember fmbr) {
-    // return the member id if it fails health checks
-    logger.info("checking state of member " + fmbr);
-    if (services.getHealthMonitor().checkIfAvailable(fmbr,
-        "Member failed to acknowledge a membership view", false)) {
-      logger.info("member " + fmbr + " passed availability check");
-      return true;
-    }
-    logger.info("member " + fmbr + " failed availability check");
-    return false;
-  }
-
-  private InternalDistributedMember getMemId(NetMember jgId,
-      List<InternalDistributedMember> members) {
-    for (InternalDistributedMember m : members) {
-      if (((GMSMember) m.getNetMember()).equals(jgId)) {
-        return m;
-      }
-    }
-    return null;
-  }
-
-  @Override
-  public InternalDistributedMember getMemberID(NetMember jgId) {
-    NetView v = currentView;
-    InternalDistributedMember ret = null;
-    if (v != null) {
-      ret = getMemId(jgId, v.getMembers());
-    }
-
-    if (ret == null) {
-      v = preparedView;
-      if (v != null) {
-        ret = getMemId(jgId, v.getMembers());
-      }
-    }
-
-    if (ret == null) {
-      return new InternalDistributedMember(jgId);
-    }
-
-    return ret;
-  }

MOV31 MOV31 MOV31 MOV23 INS31 INS31 INS29 INS83 INS39 INS42 MOV8 INS29 INS83 INS39 INS42 INS8 UPD42 INS65 INS65 INS21 UPD45 INS32 INS66 INS66 INS66 INS66 INS7 INS42 INS22 INS9 INS52 INS42 INS32 INS32 INS32 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS21 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL9 DEL7 DEL66 DEL65 DEL29 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7 DEL42 DEL9 DEL7