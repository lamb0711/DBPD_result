GEODE-3513: Removing the use of native sessions session caching

In the session module for generic app servers, we were asking the
application server for a 'native' session and then wrapping it on our
own GemfireHttpSession. However, we were not cleaning up that native
session, which means that in PROXY mode we were leaving these sessions
on the client with them being useful.

The GemfireHttpSession now no longer wraps a native session. We are
still temporarily creating a native session because it is the only way
for us to get the session timeout value that was configured in web.xml,
but the native session is immediately invalidated.

Adding and extending cargo session tests to test how sessions are being
cleaned up from the clients and the server.

This closes #740

+import javax.servlet.ServletContext;
-   * @param nativeSession
-  public HttpSession wrapSession(HttpSession nativeSession);
-
-  /**
-   * Get the wrapped (GemFire) session from a native session id. This method would typically be used
-   * from within session/http event listeners which receive the original session id.
-   *
-   * @param nativeId
-   * @return the wrapped GemFire session which maps the native session
-   */
-  public HttpSession getWrappingSession(String nativeId);
+  public HttpSession wrapSession(ServletContext context, int maxInactiveInterval);
-   * Destroy the session associated with a given native session
-   *
-   * @param id the id of the native session
-   * @return the corresponding Gemfire session which wrapped the native session and was destroyed.
-   */
-  public String destroyNativeSession(String id);
-
-  /**

INS26 INS40 INS31 MOV29 MOV83 MOV43 MOV42 MOV44 MOV44 UPD43 UPD42 INS39 UPD42 UPD42 DEL42 DEL65 DEL42 DEL43 DEL31 DEL66 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31