GEODE-5970: remove field-mapping from jdbc:mapping (#2766)


-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Objects;
-import javax.xml.bind.annotation.XmlElement;
- *       &lt;sequence>
- *         &lt;element name="field-mapping" maxOccurs="unbounded" minOccurs="0">
- *           &lt;complexType>
- *             &lt;simpleContent>
- *               &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>string">
- *                 &lt;attribute name="field-name" type="{http://www.w3.org/2001/XMLSchema}string" />
- *                 &lt;attribute name="column-name" type="{http://www.w3.org/2001/XMLSchema}string" />
- *               &lt;/extension>
- *             &lt;/simpleContent>
- *           &lt;/complexType>
- *         &lt;/element>
- *       &lt;/sequence>
-@XmlType(name = "", propOrder = {"fieldMapping"})
+@XmlType(name = "")
-  @XmlElement(name = "field-mapping", namespace = "http://geode.apache.org/schema/jdbc")
-  protected List<FieldMapping> fieldMapping;
-  @XmlTransient
-  protected boolean fieldMappingModified = false;
-  public void setFieldMapping(String[] mappings) {
-    if (mappings != null) {
-      this.fieldMapping =
-          Arrays.stream(mappings).filter(Objects::nonNull).filter(s -> !s.isEmpty()).map(s -> {
-            String[] keyValuePair = s.split(MAPPINGS_DELIMITER);
-            validateParam(keyValuePair, s);
-            return new FieldMapping(keyValuePair[0],
-                keyValuePair[1]);
-          }).collect(Collectors.toList());
-      fieldMappingModified = true;
-    }
-  }
-
-  private void validateParam(String[] paramKeyValue, String mapping) {
-    // paramKeyValue is produced by split which will never give us
-    // an empty second element
-    if (paramKeyValue.length != 2 || paramKeyValue[0].isEmpty()) {
-      throw new IllegalArgumentException("Field to column mapping '" + mapping
-          + "' is not of the form 'Field" + MAPPINGS_DELIMITER + "Column'");
-    }
-  }
-
-  public boolean isFieldMappingModified() {
-    return fieldMappingModified;
-  }
-
-  public List<FieldMapping> getFieldMapping() {
-    if (fieldMapping == null) {
-      fieldMapping = new ArrayList<>();
-    }
-    return fieldMapping;
-  }
-
-    FieldMapping configured = getFieldMapping().stream()
-        .filter(m -> m.getFieldName().equals(fieldName)).findAny().orElse(null);
-    if (configured != null) {
-      return configured.getColumnName();
-    }
-
-
-    FieldMapping configured = getFieldMapping().stream()
-        .filter(m -> m.getColumnName().equals(columnName)).findAny().orElse(null);
-
-    if (configured != null) {
-      return configured.getFieldName();
-    }
-
-    if (fieldMapping != null ? !fieldMapping.equals(that.fieldMapping)
-        : that.fieldMapping != null) {
-      return false;
-    }
-
-  @XmlAccessorType(XmlAccessType.FIELD)
-  public static class FieldMapping implements Serializable {
-    @XmlAttribute(name = "field-name")
-    protected String fieldName;
-    @XmlAttribute(name = "column-name")
-    protected String columnName;
-
-    public FieldMapping() {}
-
-    public FieldMapping(String fieldName, String columnName) {
-      this.fieldName = fieldName;
-      this.columnName = columnName;
-    }
-
-    /**
-     * Gets the value of the fieldName property.
-     *
-     * possible object is
-     * {@link String }
-     *
-     */
-    public String getFieldName() {
-      return fieldName;
-    }
-
-    /**
-     * Sets the value of the fieldName property.
-     *
-     * allowed object is
-     * {@link String }
-     *
-     */
-    public void setFieldName(String value) {
-      this.fieldName = value;
-    }
-
-    /**
-     * Gets the value of the columnName property.
-     *
-     * possible object is
-     * {@link String }
-     *
-     */
-    public String getColumnName() {
-      return columnName;
-    }
-
-    /**
-     * Sets the value of the columnName property.
-     *
-     * allowed object is
-     * {@link String }
-     *
-     */
-    public void setColumnName(String value) {
-      this.columnName = value;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-      if (this == o)
-        return true;
-      if (o == null || getClass() != o.getClass())
-        return false;
-      FieldMapping that = (FieldMapping) o;
-      return Objects.equals(fieldName, that.fieldName)
-          && Objects.equals(columnName, that.columnName);
-    }
-
-    @Override
-    public int hashCode() {
-      int result = fieldName != null ? fieldName.hashCode() : 0;
-      result = 31 * result + (columnName != null ? columnName.hashCode() : 0);
-
-      return result;
-    }
-  }

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL45 DEL4 DEL80 DEL42 DEL42 DEL45 DEL80 DEL42 DEL45 DEL80 DEL77 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL38 DEL86 DEL32 DEL42 DEL42 DEL59 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL34 DEL2 DEL42 DEL34 DEL2 DEL14 DEL41 DEL8 DEL86 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL34 DEL27 DEL42 DEL34 DEL2 DEL42 DEL32 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL86 DEL32 DEL42 DEL32 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL86 DEL32 DEL42 DEL32 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL38 DEL40 DEL33 DEL27 DEL16 DEL9 DEL41 DEL8 DEL25 DEL42 DEL40 DEL79 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL45 DEL80 DEL77 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL45 DEL80 DEL77 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL42 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL42 DEL66 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL66 DEL42 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL42 DEL66 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL27 DEL9 DEL41 DEL25 DEL42 DEL33 DEL27 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL9 DEL41 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL40 DEL32 DEL27 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL16 DEL59 DEL60 DEL42 DEL34 DEL42 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL55