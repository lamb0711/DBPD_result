Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  
+
+
-  
+
-   * @param srcFile  the validated source file, must not be <code>null</code>
-   * @param destFile  the validated destination file, must not be <code>null</code>
+   * @param srcFile the validated source file, must not be <code>null</code>
+   * @param destFile the validated destination file, must not be <code>null</code>
-      if (destFile.exists() && destFile.isDirectory()) {
-          throw new IOException("Destination '" + destFile + "' exists but is a directory");
-      }
+    if (destFile.exists() && destFile.isDirectory()) {
+      throw new IOException("Destination '" + destFile + "' exists but is a directory");
+    }
-      FileInputStream input = new FileInputStream(srcFile);
+    FileInputStream input = new FileInputStream(srcFile);
+    try {
+      FileOutputStream output = new FileOutputStream(destFile);
-          FileOutputStream output = new FileOutputStream(destFile);
-          try {
-              copy(input, output);
-          } finally {
-              close(output);
-          }
+        copy(input, output);
-          close(input);
+        close(output);
+    } finally {
+      close(input);
+    }
-      if (srcFile.length() != destFile.length()) {
-          throw new IOException("Failed to copy full contents from '" +
-                  srcFile + "' to '" + destFile + "'");
-      }
-      destFile.setLastModified(srcFile.lastModified());
+    if (srcFile.length() != destFile.length()) {
+      throw new IOException(
+          "Failed to copy full contents from '" + srcFile + "' to '" + destFile + "'");
+    }
+    destFile.setLastModified(srcFile.lastModified());
-  
+
-   * Copy bytes from an <code>InputStream</code> to an
-   * <code>OutputStream</code>.
+   * Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.
-   * @param input  the <code>InputStream</code> to read from
-   * @param output  the <code>OutputStream</code> to write to
+   * @param input the <code>InputStream</code> to read from
+   * @param output the <code>OutputStream</code> to write to
-      byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
-      long count = 0;
-      int n = 0;
-      while (-1 != (n = input.read(buffer))) {
-          output.write(buffer, 0, n);
-          count += n;
-      }
-      if (count > Integer.MAX_VALUE) {
-          return -1;
-      }
-      return (int) count;
+    byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
+    long count = 0;
+    int n = 0;
+    while (-1 != (n = input.read(buffer))) {
+      output.write(buffer, 0, n);
+      count += n;
+    }
+    if (count > Integer.MAX_VALUE) {
+      return -1;
+    }
+    return (int) count;
-  
+
-   * @param input  the InputStream to close, may be null or already closed
+   * 
+   * @param input the InputStream to close, may be null or already closed
-      try {
-          if (input != null) {
-              input.close();
-          }
-      } catch (IOException ioe) {
-          // ignore
+    try {
+      if (input != null) {
+        input.close();
+    } catch (IOException ioe) {
+      // ignore
+    }
-   * @param output  the OutputStream to close, may be null or already closed
+   * 
+   * @param output the OutputStream to close, may be null or already closed
-      try {
-          if (output != null) {
-              output.close();
-          }
-      } catch (IOException ioe) {
-          // ignore
+    try {
+      if (output != null) {
+        output.close();
+    } catch (IOException ioe) {
+      // ignore
+    }
-  
+
+   * 
-      if (file == null) {
-          return false;
-      }
-      try {
-          return file.delete();
-      } catch (Exception e) {
-      	e.printStackTrace();
-          return false;
-      }
+    if (file == null) {
+      return false;
+    }
+    try {
+      return file.delete();
+    } catch (Exception e) {
+      e.printStackTrace();
+      return false;
+    }
-  public static boolean renameAggressively(File oldFile,File newFile) {
+  public static boolean renameAggressively(File oldFile, File newFile) {
-    if(!renameOK) {
+    if (!renameOK) {
-        LogFileUtils.copyFile( oldFile, newFile.getAbsoluteFile() );
-        long timeStop = System.currentTimeMillis()+600000;
+        LogFileUtils.copyFile(oldFile, newFile.getAbsoluteFile());
+        long timeStop = System.currentTimeMillis() + 600000;
-        if(noDelete) {
+        if (noDelete) {
-            RandomAccessFile raf = new RandomAccessFile(oldFile,"rws");
+            RandomAccessFile raf = new RandomAccessFile(oldFile, "rws");
-          } catch(Exception e) {
-	    // ignore this
+          } catch (Exception e) {
+            // ignore this
-        if(noDelete) {
+        if (noDelete) {
-         renameOK = false;
+          renameOK = false;
-      } catch(IOException e) {
+      } catch (IOException e) {
-    }  
+    }

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66