Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * GemFireBasicDataSource extends AbstractDataSource. This is a datasource class
- * which provides connections. fromthe databse without any pooling.
+ * GemFireBasicDataSource extends AbstractDataSource. This is a datasource class which provides
+ * connections. fromthe databse without any pooling.
-public class GemFireBasicDataSource extends AbstractDataSource  {
+public class GemFireBasicDataSource extends AbstractDataSource {
-  
+
-   * Place holder for abstract method 
-   * isWrapperFor(java.lang.Class) in java.sql.Wrapper
-   * required by jdk 1.6
+   * Place holder for abstract method isWrapperFor(java.lang.Class) in java.sql.Wrapper required by
+   * jdk 1.6
-   * @param iface - a Class defining an interface. 
-   * @throws SQLException 
+   * @param iface - a Class defining an interface.
+   * @throws SQLException
-   public boolean isWrapperFor(Class iface) throws SQLException {
-     return true;
-   }
+  public boolean isWrapperFor(Class iface) throws SQLException {
+    return true;
+  }
-   * Place holder for abstract method 
-   * java.lang Object unwrap(java.lang.Class) in java.sql.Wrapper
+   * Place holder for abstract method java.lang Object unwrap(java.lang.Class) in java.sql.Wrapper
-   public Object unwrap(Class iface)  throws SQLException { 
-     return iface;
-   }
+  public Object unwrap(Class iface) throws SQLException {
+    return iface;
+  }
-   * @param configs The ConfiguredDataSourceProperties containing the datasource
-   *          properties.
+   * @param configs The ConfiguredDataSourceProperties containing the datasource properties.
-  public GemFireBasicDataSource(ConfiguredDataSourceProperties configs)
-      throws SQLException {
+  public GemFireBasicDataSource(ConfiguredDataSourceProperties configs) throws SQLException {
-   * Implementation of datasource interface function. This method is used to get
-   * the connection from the database. Default user name and password will be
-   * used.
+   * Implementation of datasource interface function. This method is used to get the connection from
+   * the database. Default user name and password will be used.
-    //Asif : In case the user is requesting the
-    //connection without username & password
-    //we should just return the desired connection
+    // Asif : In case the user is requesting the
+    // connection without username & password
+    // we should just return the desired connection
-        if (driverObject == null) loadDriver();
+        if (driverObject == null)
+          loadDriver();
-    }
-    else {
-      StringId exception = LocalizedStrings.GemFireBasicDataSource_GEMFIREBASICDATASOURCE_GETCONNECTION_URL_FOR_THE_DATASOURCE_NOT_AVAILABLE;
+    } else {
+      StringId exception =
+          LocalizedStrings.GemFireBasicDataSource_GEMFIREBASICDATASOURCE_GETCONNECTION_URL_FOR_THE_DATASOURCE_NOT_AVAILABLE;
-   * Implementation of datasource function. This method is used to get the
-   * connection. The specified user name and passowrd will be used.
+   * Implementation of datasource function. This method is used to get the connection. The specified
+   * user name and passowrd will be used.
-  public Connection getConnection(String clUsername, String clPassword)
-      throws SQLException {
-    //First Autheticate the user
+  public Connection getConnection(String clUsername, String clPassword) throws SQLException {
+    // First Autheticate the user
-    }
-    catch (Exception ex) {
-      StringId msg = LocalizedStrings.GemFireBasicDataSource_AN_EXCEPTION_WAS_CAUGHT_WHILE_TRYING_TO_LOAD_THE_DRIVER;
+    } catch (Exception ex) {
+      StringId msg =
+          LocalizedStrings.GemFireBasicDataSource_AN_EXCEPTION_WAS_CAUGHT_WHILE_TRYING_TO_LOAD_THE_DRIVER;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66