GEODE-1571: added security for query and destroy region

- * 
+ *
+import java.io.IOException;
+import java.nio.ByteBuffer;
+
+import com.gemstone.gemfire.cache.operations.RegionDestroyOperationContext;
+import com.gemstone.gemfire.distributed.DistributedSystemDisconnectedException;
+import com.gemstone.gemfire.distributed.internal.DistributionStats;
-import com.gemstone.gemfire.internal.cache.tier.sockets.*;
+import com.gemstone.gemfire.internal.cache.tier.sockets.BaseCommand;
+import com.gemstone.gemfire.internal.cache.tier.sockets.CacheServerStats;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Message;
+import com.gemstone.gemfire.internal.cache.tier.sockets.Part;
+import com.gemstone.gemfire.internal.cache.tier.sockets.ServerConnection;
-import com.gemstone.gemfire.cache.operations.RegionDestroyOperationContext;
-import com.gemstone.gemfire.distributed.DistributedSystemDisconnectedException;
-import com.gemstone.gemfire.distributed.internal.DistributionStats;
-
-import java.io.IOException;
-import java.nio.ByteBuffer;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
-      throws IOException, InterruptedException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException, InterruptedException {
-//    callbackArgPart = null; (redundant assignment)
+    //    callbackArgPart = null; (redundant assignment)
-      }
-      catch (DistributedSystemDisconnectedException se) {
+      } catch (DistributedSystemDisconnectedException se) {
-          logger.debug("{} ignoring message of type {} from client {} because shutdown occurred during message processing.", servConn.getName(), MessageType.getString(msg.getMessageType()), servConn.getProxyID());
+          logger.debug("{} ignoring message of type {} from client {} because shutdown occurred during message processing.", servConn
+            .getName(), MessageType.getString(msg.getMessageType()), servConn.getProxyID());
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-      logger.debug("{}: Received destroy region request ({} bytes) from {} for region {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
+      logger.debug("{}: Received destroy region request ({} bytes) from {} for region {}", servConn.getName(), msg.getPayloadLength(), servConn
+        .getSocketString(), regionName);
-      logger.warn(LocalizedMessage.create(LocalizedStrings.DestroyRegion_0_THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REGION_REQUEST_IS_NULL, servConn.getName()));
-      errMessage
-          .append(LocalizedStrings.DestroyRegion__THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REGION_REQUEST_IS_NULL.toLocalizedString());
+      logger.warn(LocalizedMessage.create(LocalizedStrings.DestroyRegion_0_THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REGION_REQUEST_IS_NULL, servConn
+        .getName()));
+      errMessage.append(LocalizedStrings.DestroyRegion__THE_INPUT_REGION_NAME_FOR_THE_DESTROY_REGION_REQUEST_IS_NULL.toLocalizedString());
-      writeErrorResponse(msg, MessageType.DESTROY_REGION_DATA_ERROR, errMessage
-          .toString(), servConn);
+      writeErrorResponse(msg, MessageType.DESTROY_REGION_DATA_ERROR, errMessage.toString(), servConn);
+      return;
-    else {
-      LocalRegion region = (LocalRegion)crHelper.getRegion(regionName);
-      if (region == null) {
-        String reason = LocalizedStrings.DestroyRegion_REGION_WAS_NOT_FOUND_DURING_DESTROY_REGION_REQUEST.toLocalizedString();
-        writeRegionDestroyedEx(msg, regionName, reason, servConn);
-        servConn.setAsTrue(RESPONDED);
+
+    LocalRegion region = (LocalRegion) crHelper.getRegion(regionName);
+    if (region == null) {
+      String reason = LocalizedStrings.DestroyRegion_REGION_WAS_NOT_FOUND_DURING_DESTROY_REGION_REQUEST.toLocalizedString();
+      writeRegionDestroyedEx(msg, regionName, reason, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+    }
+
+    // user needs to have data:manage on all regions in order to destory a particular region
+    GeodeSecurityUtil.authorizeDataManage();
+
+    // Destroy the region
+    ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart.getSerializedForm());
+    long threadId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+    long sequenceId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+    EventID eventId = new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId);
+
+    try {
+      AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+      if (authzRequest != null) {
+        RegionDestroyOperationContext destroyContext = authzRequest.destroyRegionAuthorize(regionName, callbackArg);
+        callbackArg = destroyContext.getCallbackArg();
-      else {
-        // Destroy the region
-        ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart
-            .getSerializedForm());
-        long threadId = EventID
-            .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-        long sequenceId = EventID
-            .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-        EventID eventId = new EventID(servConn.getEventMemberIDByteArray(),
-            threadId, sequenceId);
-
-        try {
-          AuthorizeRequest authzRequest = servConn.getAuthzRequest();
-          if (authzRequest != null) {
-            RegionDestroyOperationContext destroyContext = authzRequest
-                .destroyRegionAuthorize(regionName, callbackArg);
-            callbackArg = destroyContext.getCallbackArg();
-          }
-          // region.destroyRegion(callbackArg);
-          region.basicBridgeDestroyRegion(callbackArg, servConn.getProxyID(),
-              true /* boolean from cache Client */, eventId);
-        }
-        catch (DistributedSystemDisconnectedException e) {
-          // FIXME better exception hierarchy would avoid this check
-          if (servConn.getCachedRegionHelper().getCache().getCancelCriterion().cancelInProgress() != null) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("{} ignoring message of type {} from client {} because shutdown occurred during message processing.", servConn.getName(), MessageType.getString(msg.getMessageType()), servConn.getProxyID());
-            }
-            servConn.setFlagProcessMessagesAsFalse();
-          }
-          else {
-            writeException(msg, e, false, servConn);
-            servConn.setAsTrue(RESPONDED);
-          }
-          return;
-        }
-        catch (Exception e) {
-          // If an interrupted exception is thrown , rethrow it
-          checkForInterrupt(servConn, e);
-
-          // Otherwise, write an exception message and continue
-          writeException(msg, e, false, servConn);
-          servConn.setAsTrue(RESPONDED);
-          return;
-        }
-
-        // Update the statistics and write the reply
-        {
-          long oldStart = start;
-          start = DistributionStats.getStatTime();
-          stats.incProcessDestroyRegionTime(start - oldStart);
-        }
-        writeReply(msg, servConn);
-        servConn.setAsTrue(RESPONDED);
+      // region.destroyRegion(callbackArg);
+      region.basicBridgeDestroyRegion(callbackArg, servConn.getProxyID(), true /* boolean from cache Client */, eventId);
+    } catch (DistributedSystemDisconnectedException e) {
+      // FIXME better exception hierarchy would avoid this check
+      if (servConn.getCachedRegionHelper().getCache().getCancelCriterion().cancelInProgress() != null) {
-          logger.debug("{}: Sent destroy region response for region {}", servConn.getName(), regionName);
+          logger.debug("{} ignoring message of type {} from client {} because shutdown occurred during message processing.", servConn
+            .getName(), MessageType.getString(msg.getMessageType()), servConn.getProxyID());
-        stats.incWriteDestroyRegionResponseTime(DistributionStats.getStatTime()
-            - start);
+        servConn.setFlagProcessMessagesAsFalse();
+      } else {
+        writeException(msg, e, false, servConn);
+        servConn.setAsTrue(RESPONDED);
+      return;
+    } catch (Exception e) {
+      // If an interrupted exception is thrown , rethrow it
+      checkForInterrupt(servConn, e);
+
+      // Otherwise, write an exception message and continue
+      writeException(msg, e, false, servConn);
+      servConn.setAsTrue(RESPONDED);
+      return;
+
+    // Update the statistics and write the reply
+    {
+      long oldStart = start;
+      start = DistributionStats.getStatTime();
+      stats.incProcessDestroyRegionTime(start - oldStart);
+    }
+    writeReply(msg, servConn);
+    servConn.setAsTrue(RESPONDED);
+    if (logger.isDebugEnabled()) {
+      logger.debug("{}: Sent destroy region response for region {}", servConn.getName(), regionName);
+    }
+    stats.incWriteDestroyRegionResponseTime(DistributionStats.getStatTime() - start);

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 INS40 INS40 MOV8 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV21 MOV8 MOV21 MOV21 MOV25 MOV21 MOV25 INS25 MOV60 INS25 INS21 MOV27 MOV8 MOV27 MOV8 INS32 INS41 INS41 INS42 INS42 DEL25 DEL8 DEL25 DEL8