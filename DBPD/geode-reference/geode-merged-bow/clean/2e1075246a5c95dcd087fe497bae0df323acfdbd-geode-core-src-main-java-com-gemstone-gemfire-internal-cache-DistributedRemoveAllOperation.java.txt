Merge branch 'release/1.0.0-incubating.M3'

+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
- * @since 8.1
+ * @since GemFire 8.1
-  protected final RemoveAllEntryData[] removeAllData;
+  /**
+   * Release is called by freeOffHeapResources.
+   */
+  @Retained protected final RemoveAllEntryData[] removeAllData;
+      @Unretained
-        EntryEventImpl ev = getEventForPosition(position);
+        @Unretained EntryEventImpl ev = getEventForPosition(position);
+  @Unretained
-    EntryEventImpl ev = EntryEventImpl.create(
+    // owned by this.removeAllData once entry.event = ev is done
+    @Retained EntryEventImpl ev = EntryEventImpl.create(
-    public final void toData(final DataOutput out, 
-        final boolean requiresRegionContext) throws IOException {
+    public final void toData(final DataOutput out) throws IOException {
-      EntryEventImpl ev = getEventForPosition(i);
+      @Unretained EntryEventImpl ev = getEventForPosition(i);
+    @Retained
-      EntryEventImpl event = EntryEventImpl.create(
+      @Retained EntryEventImpl event = EntryEventImpl.create(
-    public void doEntryRemove(RemoveAllEntryData entry, DistributedRegion rgn,
-        boolean requiresRegionContext) {
-      EntryEventImpl ev = RemoveAllMessage.createEntryEvent(entry, getSender(), 
-          this.context, rgn,
-          requiresRegionContext, this.possibleDuplicate,
+    public void doEntryRemove(RemoveAllEntryData entry, DistributedRegion rgn) {
+      @Released EntryEventImpl ev = RemoveAllMessage.createEntryEvent(entry, getSender(), 
+          this.context, rgn, this.possibleDuplicate,
-     * @param requiresRegionContext
+    @Retained
-        DistributedRegion rgn, boolean requiresRegionContext, 
+        DistributedRegion rgn,
-      if (requiresRegionContext) {
-        ((KeyWithRegionContext)key).setRegionContext(rgn);
-      }
-      EntryEventImpl ev = EntryEventImpl.create(rgn, entry.getOp(),
+      @Retained EntryEventImpl ev = EntryEventImpl.create(rgn, entry.getOp(),
-          final boolean requiresRegionContext = rgn.keyRequiresRegionContext();
-            doEntryRemove(removeAllData[i], rgn, requiresRegionContext);
+            doEntryRemove(removeAllData[i], rgn);
-        // get the "keyRequiresRegionContext" flag from first element assuming
-        // all key objects to be uniform
-        final boolean requiresRegionContext =
-          (this.removeAllData[0].key instanceof KeyWithRegionContext);
-          this.removeAllData[i].toData(out, requiresRegionContext);
+          this.removeAllData[i].toData(out);

INS26 INS26 INS26 INS40 INS40 INS40 INS29 INS78 INS78 UPD66 INS65 INS42 INS42 INS78 INS78 INS66 INS78 INS42 INS42 INS42 INS78 INS78 INS78 INS78 INS42 INS42 INS42 INS78 INS42 INS42 INS78 INS42 DEL83 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL65 DEL39 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL34 DEL2 DEL42 DEL22 DEL42 DEL43 DEL62 DEL36 DEL59 DEL60 DEL42