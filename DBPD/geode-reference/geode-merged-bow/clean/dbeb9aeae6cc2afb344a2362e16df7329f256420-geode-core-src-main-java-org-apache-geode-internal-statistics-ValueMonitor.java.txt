Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The following code is an example of how to find an existing Statistics 
- * instance and define a ValueMonitor listener for notifications of any stat 
- * sample containing updates to any stats in the instance being monitored:
+ * The following code is an example of how to find an existing Statistics instance and define a
+ * ValueMonitor listener for notifications of any stat sample containing updates to any stats in the
+ * instance being monitored:
+ * 
-    StatisticsFactory factory = InternalDistributedSystem.getAnyInstance();
-    Statistics[] statistics = f.findStatisticsByTextId("statSampler");
-    if (statistics.length == 1) {
-      ValueMonitor monitor = new ValueMonitor().addStatistics(statistics[0]);
-        
-      monitor.addListener(new StatisticsListener() {
-        public void handleNotification(StatisticsNotification notify) {
-          System.out.println("One or more statSampler stats changed at " 
-              + notify.getTimeStamp());
-          for (StatisticId statId : notify) {
-            System.out.println("\t" 
-                + statId.getStatisticDescriptor().getName() 
-                + " = " + notify.getValue(statId));
-          }
-        }
-      };
-    }
+ * StatisticsFactory factory = InternalDistributedSystem.getAnyInstance(); Statistics[] statistics =
+ * f.findStatisticsByTextId("statSampler"); if (statistics.length == 1) { ValueMonitor monitor = new
+ * ValueMonitor().addStatistics(statistics[0]);
+ * 
+ * monitor.addListener(new StatisticsListener() { public void
+ * handleNotification(StatisticsNotification notify) { System.out.println("One or more statSampler
+ * stats changed at " + notify.getTimeStamp()); for (StatisticId statId : notify) {
+ * System.out.println("\t" + statId.getStatisticDescriptor().getName() + " = " +
+ * notify.getValue(statId)); } } }; }
-public final class ValueMonitor extends StatisticsMonitor {
-  
+public class ValueMonitor extends StatisticsMonitor {
+
-  
-  private final CopyOnWriteHashSet<Statistics> statistics = new CopyOnWriteHashSet<Statistics>();
-  
+
+  private final CopyOnWriteHashSet<Statistics> statistics = new CopyOnWriteHashSet<>();
+
-  public ValueMonitor addStatistic(StatisticId statId) {
+  public ValueMonitor addStatistic(final StatisticId statId) {
-  
+
-  public ValueMonitor removeStatistic(StatisticId statId) {
+  public ValueMonitor removeStatistic(final StatisticId statId) {
-  
-  public ValueMonitor addStatistics(Statistics statistics) {
+
+  public ValueMonitor addStatistics(final Statistics statistics) {
-  
-  public ValueMonitor removeStatistics(Statistics statistics) {
+
+  public ValueMonitor removeStatistics(final Statistics statistics) {
-  protected void monitor(long millisTimeStamp, List<ResourceInstance> resourceInstances) {
+  protected void monitor(final long millisTimeStamp,
+      final List<ResourceInstance> resourceInstances) {
-  
-  protected void monitorStatistics(long millisTimeStamp, List<ResourceInstance> resourceInstances) {
+
+  protected void monitorStatistics(final long millisTimeStamp,
+      final List<ResourceInstance> resourceInstances) {
-      Map<StatisticId, Number> stats = new HashMap<StatisticId, Number>();
+      Map<StatisticId, Number> stats = new HashMap<>();
-            StatisticDescriptorImpl sdi = (StatisticDescriptorImpl)sds[idx];
+            StatisticDescriptorImpl sdi = (StatisticDescriptorImpl) sds[idx];

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 UPD74 UPD74 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL83 DEL42 DEL43 DEL42 DEL43