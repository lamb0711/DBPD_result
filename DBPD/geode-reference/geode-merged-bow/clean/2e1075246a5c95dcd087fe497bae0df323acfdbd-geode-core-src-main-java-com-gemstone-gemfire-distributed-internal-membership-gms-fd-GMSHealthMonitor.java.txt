Merge branch 'release/1.0.0-incubating.M3'

+import static com.sun.corba.se.impl.naming.cosnaming.NamingUtils.debug;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Timer;
-import java.util.TimerTask;
+import java.util.*;
-    public void setTimeStamp(long timeStamp) {
+    public void setTime(long timeStamp) {
-        boolean debug = logger.isDebugEnabled();
-        if (debug) {
-          if (playingDead) {
-            logger.debug("simulating sick member in health check");
-          } else if (vmViewId == myVmViewId
-            && uuidLSBs == myUUID.getLeastSignificantBits()
-            && uuidMSBs == myUUID.getMostSignificantBits()) {
-            logger.debug("UUID matches my own - sending OK reply");
-          } else {
-            logger.debug("GMSHealthMonitor my UUID is {},{} received is {},{}.  My viewID is {} received is {}",
-              Long.toHexString(myUUID.getMostSignificantBits()),
-              Long.toHexString(myUUID.getLeastSignificantBits()),
-              Long.toHexString(uuidMSBs), Long.toHexString(uuidLSBs),
-              myVmViewId, vmViewId);
-          }
-        }
-        if (!playingDead
-            && uuidLSBs == myUUID.getLeastSignificantBits()
-            && uuidMSBs == myUUID.getMostSignificantBits()
-            && vmViewId == myVmViewId) {
+        if (playingDead) {
+          logger.debug("HealthMonitor: simulating sick member in health check");
+        } else if (uuidLSBs == myUUID.getLeastSignificantBits()
+                   && uuidMSBs == myUUID.getMostSignificantBits()
+                   && vmViewId == myVmViewId) {
+          logger.debug("HealthMonitor: sending OK reply");
-          if (debug) {
-            logger.debug("GMSHealthMonitor server socket replied OK.");
+          logger.debug("HealthMonitor: server replied OK.");
+        } else {
+          if (logger.isDebugEnabled()) {
+            logger.debug("HealthMonitor: sending ERROR reply - my UUID is {},{} received is {},{}.  My viewID is {} received is {}", 
+              Long.toHexString(myUUID.getMostSignificantBits()),
+              Long.toHexString(myUUID.getLeastSignificantBits()), 
+              Long.toHexString(uuidMSBs),
+              Long.toHexString(uuidLSBs),
+              myVmViewId, vmViewId);
-        }
-        else {
-          if (debug) {
-            logger.debug("GMSHealthMonitor server socket replied ERROR.");
-          }
+          logger.debug("HealthMonitor: server replied ERROR.");
-    if (cTS != null) {
-      cTS.setTimeStamp(timeStamp);
+    if (cTS != null && cTS.getTime() < timeStamp) {
+      cTS.setTime(timeStamp);
-        // TODO GemFire used the tcp/ip connection but this is using heartbeats
-
-   * @param member
-   * @return
-    final Response pingResp = new Response();
-    if(waitForResponse) {
+    Response pingResp = null;
+    if (waitForResponse) {
+      pingResp = new Response();
+    } else {
+      hrm.clearRequestId();
-              ts.setTimeStamp(System.currentTimeMillis());
+              ts.setTime(System.currentTimeMillis());
-    } 
+    }
+    catch (IllegalStateException e) {
+      if (!isStopping) {
+        logger.trace("Unexpected exception", e);
+      }
+    }
-        clientSocket.shutdownOutput();
-        logger.debug("Connected - reading response from suspect member {}", suspectMember);
+        logger.debug("Connected to suspect member - reading response");
-        logger.debug("Received {}", (b == OK ? "OK" : (b == ERROR ? "ERROR" : b)), suspectMember);
+        if (logger.isDebugEnabled()) {
+          logger.debug("Received {}", (b == OK ? "OK" : (b == ERROR ? "ERROR" : "unknown response: " + b)));
+        }
-            ts.setTimeStamp(System.currentTimeMillis());
+            ts.setTime(System.currentTimeMillis());
-      serverSocket = SocketCreator.getDefaultInstance().createServerSocketUsingPortRange(socketAddress, 50/*backlog*/, true/*isBindAddress*/, false/*useNIO*/, 65536/*tcpBufferSize*/, portRange);
+      serverSocket = SocketCreator.getDefaultInstance().createServerSocketUsingPortRange(socketAddress, 50/*backlog*/, 
+        true/*isBindAddress*/, false/*useNIO*/, 65536/*tcpBufferSize*/, portRange, false);
-   * @param initiateRemoval
-        GMSHealthMonitor.this.doCheckMember(mbr, false);
-        pinged = GMSHealthMonitor.this.doTCPCheckMember(mbr, port);
+        doCheckMember(mbr, false);
+        pinged = doTCPCheckMember(mbr, port);
-//  TODO this needs some rethinking - we need the guys near the
-//  front of the membership view who aren't preferred for coordinator
-//  to see the suspect message.
-//    if (v.size() > 20) {
-//      HashSet<InternalDistributedMember> filter = new HashSet<InternalDistributedMember>();
-//      for (int i = 0; i < requests.size(); i++) {
-//        filter.add(requests.get(i).getSuspectMember());
-//      }
-//      recipients = currentView.getPreferredCoordinators(filter, services.getJoinLeave().getMemberID(), 5);
-//    } else {
+    if (currentView.size() > 4) {
+      HashSet<InternalDistributedMember> filter = new HashSet<InternalDistributedMember>();
+      for (Enumeration<InternalDistributedMember> e = suspectedMemberInView.keys(); e.hasMoreElements();) {
+        filter.add(e.nextElement());
+      }
+      for (int i = 0; i < requests.size(); i++) {
+        filter.add(requests.get(i).getSuspectMember());
+      }
+      recipients = currentView.getPreferredCoordinators(filter, services.getJoinLeave().getMemberID(), 5);
+    } else {
-//    }
+    }

MOV26 UPD40 UPD40 UPD42 INS25 INS27 INS8 INS12 INS27 INS8 INS8 MOV27 INS27 INS33 INS21 INS21 INS44 INS8 INS32 INS34 INS60 INS24 INS24 INS21 MOV21 INS32 INS42 INS7 INS32 INS43 INS42 INS25 MOV21 INS42 INS42 INS74 INS59 INS58 INS32 INS8 INS58 INS27 INS37 INS8 INS7 INS42 INS8 MOV25 INS42 INS42 UPD42 INS42 MOV14 INS42 INS42 INS42 INS38 INS8 INS25 INS43 INS43 INS42 INS14 INS74 INS59 INS42 INS42 INS21 INS39 INS59 INS42 INS32 INS42 INS21 INS42 INS32 INS21 MOV27 INS8 INS42 INS21 INS32 INS8 INS9 INS42 INS42 INS74 INS43 INS43 INS42 INS32 INS32 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS34 INS32 MOV27 MOV27 INS21 MOV21 MOV21 MOV21 MOV21 MOV21 INS21 MOV25 MOV21 MOV21 MOV21 MOV21 MOV21 INS32 UPD42 UPD42 INS45 MOV42 UPD42 MOV42 MOV21 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS45 INS32 INS32 MOV32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 UPD42 MOV32 INS42 INS42 INS45 INS42 INS42 INS45 UPD45 INS42 INS42 INS42 UPD45 UPD42 INS27 UPD42 INS45 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL8 DEL42 DEL38 DEL42 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL27 DEL27 DEL27 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL65 DEL65 DEL83 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL65 DEL42 DEL52 DEL42 DEL52