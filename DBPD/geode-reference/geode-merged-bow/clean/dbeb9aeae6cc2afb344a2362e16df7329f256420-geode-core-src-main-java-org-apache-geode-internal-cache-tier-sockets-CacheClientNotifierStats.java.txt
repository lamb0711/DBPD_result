Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * GemFire statistics about a {@link CacheClientNotifier}. These statistics 
- * are related to cache server client notifications.
+ * GemFire statistics about a {@link CacheClientNotifier}. These statistics are related to cache
+ * server client notifications.
-  ////////////////////  Statistic "Id" Fields  ////////////////////
+  //////////////////// Statistic "Id" Fields ////////////////////
-  private static final String EVENTS_ENQUEUED_WHILE_CLIENT_AWAY_COUNT = "eventsEnqueuedWhileClientAwayCount";
+  private static final String EVENTS_ENQUEUED_WHILE_CLIENT_AWAY_COUNT =
+      "eventsEnqueuedWhileClientAwayCount";
-  
+
-  
+
- 
+
-    _type = f.createType(statName, statName,
-       new StatisticDescriptor[] {
-            f.createIntCounter
-            (EVENTS,
-       	     "Number of events processed by the cache client notifier.",
-       	     "operations"),
-       	     
-            f.createLongCounter
-            (EVENT_PROCESSING_TIME,
-        	 "Total time spent by the cache client notifier processing events.",
-        	 "nanoseconds"),
-        	 
-            f.createIntCounter
-            (CLIENT_REGISTRATIONS,
-        	 "Number of clients that have registered for updates.",
-        	 "operations"),
-        	 
-            f.createLongCounter
-            (CLIENT_REGISTRATION_TIME,
-         	 "Total time spent doing client registrations.",
-         	 "nanoseconds"),
-           
-            f.createIntGauge
-            ("clientHealthMonitorRegister",
-             "Number of client Register.",
-             "registered"),
-           
-            f.createIntGauge
-            ("clientHealthMonitorUnRegister",
-             "Number of client UnRegister.",
-             "unregistered"),
-               
-            f.createIntCounter
-            (DURABLE_RECONNECTION_COUNT,
-             "Number of times the same durable client connects to the server",
-             "operations"),
+    _type = f.createType(statName, statName, new StatisticDescriptor[] {f.createIntCounter(EVENTS,
+        "Number of events processed by the cache client notifier.", "operations"),
-            f.createIntCounter
-            (QUEUE_DROPPED_COUNT,
-             "Number of times client queue for a particular durable client is dropped",
-             "operations"),
-  
-            f.createIntCounter
-            (EVENTS_ENQUEUED_WHILE_CLIENT_AWAY_COUNT,
-             "Number of events enqueued in queue for a durable client ", 
-             "operations"),
+        f.createLongCounter(EVENT_PROCESSING_TIME,
+            "Total time spent by the cache client notifier processing events.", "nanoseconds"),
-            f.createLongCounter
-            (CQ_PROCESSING_TIME,
-             "Total time spent by the cache client notifier processing cqs.",
-             "nanoseconds"),
+        f.createIntCounter(CLIENT_REGISTRATIONS,
+            "Number of clients that have registered for updates.", "operations"),
-            f.createLongGauge
-            (COMPILED_QUERY_COUNT,
-             "Number of compiled queries maintained.",
-             "maintained"),
+        f.createLongCounter(CLIENT_REGISTRATION_TIME,
+            "Total time spent doing client registrations.", "nanoseconds"),
-            f.createLongCounter
-            (COMPILED_QUERY_USED_COUNT,
-             "Number of times compiled queries are used.",
-             "used"),
+        f.createIntGauge("clientHealthMonitorRegister", "Number of client Register.", "registered"),
-       });
+        f.createIntGauge("clientHealthMonitorUnRegister", "Number of client UnRegister.",
+            "unregistered"),
+
+        f.createIntCounter(DURABLE_RECONNECTION_COUNT,
+            "Number of times the same durable client connects to the server", "operations"),
+
+        f.createIntCounter(QUEUE_DROPPED_COUNT,
+            "Number of times client queue for a particular durable client is dropped",
+            "operations"),
+
+        f.createIntCounter(EVENTS_ENQUEUED_WHILE_CLIENT_AWAY_COUNT,
+            "Number of events enqueued in queue for a durable client ", "operations"),
+
+        f.createLongCounter(CQ_PROCESSING_TIME,
+            "Total time spent by the cache client notifier processing cqs.", "nanoseconds"),
+
+        f.createLongGauge(COMPILED_QUERY_COUNT, "Number of compiled queries maintained.",
+            "maintained"),
+
+        f.createLongCounter(COMPILED_QUERY_USED_COUNT, "Number of times compiled queries are used.",
+            "used"),
+
+    });
-    
+
-    
+
-    
+
-  //////////////////////  Instance Fields  //////////////////////
+  ////////////////////// Instance Fields //////////////////////
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-   * Creates a new <code>CacheClientNotifierStats</code>. 
+   * Creates a new <code>CacheClientNotifierStats</code>.
-  /////////////////////  Instance Methods  /////////////////////
+  ///////////////////// Instance Methods /////////////////////
-  public long startTime()
-  {
+  public long startTime() {
-  public void endEvent(long start)
-  {
+  public void endEvent(long start) {
-      long elapsed = ts-start;
+      long elapsed = ts - start;
-  public void endClientRegistration(long start)
-  {
+  public void endClientRegistration(long start) {
-      long elapsed = ts-start;
+      long elapsed = ts - start;
-  public void endCqProcessing(long start)
-  {
+  public void endCqProcessing(long start) {
-  
+
-  
+
-  }  
-  
+  }
+
-  }  
-  
+  }
+
-  }  
-  
+  }
+
-  }  
+  }
-  }  
+  }

UPD66 UPD66 UPD66