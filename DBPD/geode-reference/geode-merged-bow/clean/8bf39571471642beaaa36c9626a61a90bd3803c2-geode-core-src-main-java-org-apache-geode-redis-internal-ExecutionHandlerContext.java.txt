Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class extends {@link ChannelInboundHandlerAdapter} from Netty and it is
- * the last part of the channel pipeline. The {@link ByteToCommandDecoder} forwards a
- * {@link Command} to this class which executes it and sends the result back to the
- * client. Additionally, all exception handling is done by this class. 
+ * This class extends {@link ChannelInboundHandlerAdapter} from Netty and it is the last part of the
+ * channel pipeline. The {@link ByteToCommandDecoder} forwards a {@link Command} to this class which
+ * executes it and sends the result back to the client. Additionally, all exception handling is done
+ * by this class.
- * Besides being part of Netty's pipeline, this class also serves as a context to the
- * execution of a command. It abstracts transactions, provides access to the {@link RegionProvider}
- * and anything else an executing {@link Command} may need.
+ * Besides being part of Netty's pipeline, this class also serves as a context to the execution of a
+ * command. It abstracts transactions, provides access to the {@link RegionProvider} and anything
+ * else an executing {@link Command} may need.
-  private static final int MAXIMUM_NUM_RETRIES = (1000*60)/WAIT_REGION_DSTRYD_MILLIS; // 60 seconds total
+  private static final int MAXIMUM_NUM_RETRIES = (1000 * 60) / WAIT_REGION_DSTRYD_MILLIS; // 60
+                                                                                          // seconds
+                                                                                          // total
-   * Default constructor for execution contexts. 
+   * Default constructor for execution contexts.
-   * @param server Instance of the server it is attached to, only used so that any execution can initiate a shutdwon
+   * @param server Instance of the server it is attached to, only used so that any execution can
+   *        initiate a shutdwon
-  public ExecutionHandlerContext(Channel ch, Cache cache, RegionProvider regionProvider, GeodeRedisServer server, byte[] pwd) {
+  public ExecutionHandlerContext(Channel ch, Cache cache, RegionProvider regionProvider,
+      GeodeRedisServer server, byte[] pwd) {
-    this.needChannelFlush  = new AtomicBoolean(false);
+    this.needChannelFlush = new AtomicBoolean(false);
-    ByteBuf response; 
+    ByteBuf response;
-    else if (cause instanceof DecoderException && cause.getCause() instanceof RedisCommandParserException)
-      response = Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.PARSING_EXCEPTION_MESSAGE);
+    else if (cause instanceof DecoderException
+        && cause.getCause() instanceof RedisCommandParserException)
+      response =
+          Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.PARSING_EXCEPTION_MESSAGE);
-      response = Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.ERROR_REGION_CREATION);
+      response =
+          Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.ERROR_REGION_CREATION);
-      response = Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.SERVER_ERROR_SHUTDOWN);
+      response =
+          Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.SERVER_ERROR_SHUTDOWN);
-        executeWithoutTransaction(exec, command); 
+        executeWithoutTransaction(exec, command);
-        writeToChannel(Coder.getSimpleStringResponse(this.byteBufAllocator, RedisConstants.COMMAND_QUEUED));
+        writeToChannel(
+            Coder.getSimpleStringResponse(this.byteBufAllocator, RedisConstants.COMMAND_QUEUED));
-   * Private helper method to execute a command without a transaction, done for
-   * special exception handling neatness
+   * Private helper method to execute a command without a transaction, done for special exception
+   * handling neatness
-        if (e instanceof RegionDestroyedException || e instanceof RegionNotFoundException || e.getCause() instanceof QueryInvocationTargetException)
+        if (e instanceof RegionDestroyedException || e instanceof RegionNotFoundException
+            || e.getCause() instanceof QueryInvocationTargetException)
-  private void executeWithTransaction(ChannelHandlerContext ctx, final Executor exec, Command command) throws Exception {
+  private void executeWithTransaction(ChannelHandlerContext ctx, final Executor exec,
+      Command command) throws Exception {
-    } catch(UnsupportedOperationInTransactionException e) {
-      command.setResponse(Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.ERROR_UNSUPPORTED_OPERATION_IN_TRANSACTION));
+    } catch (UnsupportedOperationInTransactionException e) {
+      command.setResponse(Coder.getErrorResponse(this.byteBufAllocator,
+          RedisConstants.ERROR_UNSUPPORTED_OPERATION_IN_TRANSACTION));
-      command.setResponse(Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.ERROR_TRANSACTION_EXCEPTION));
+      command.setResponse(Coder.getErrorResponse(this.byteBufAllocator,
+          RedisConstants.ERROR_TRANSACTION_EXCEPTION));
-   * {@link ByteBuf} allocator for this context. All executors
-   * must use this pooled allocator as opposed to having unpooled buffers
-   * for maximum performance
+   * {@link ByteBuf} allocator for this context. All executors must use this pooled allocator as
+   * opposed to having unpooled buffers for maximum performance
+   * 
+   * 
+   * 
-  public Channel getChannel() {
-    return this.channel;
-  }
+   *         public Channel getChannel() { return this.channel; }
-   * Get the authentication password, this will be same server wide.
-   * It is exposed here as opposed to {@link GeodeRedisServer}.
+   * Get the authentication password, this will be same server wide. It is exposed here as opposed
+   * to {@link GeodeRedisServer}.
+   * 
+   * 

UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66