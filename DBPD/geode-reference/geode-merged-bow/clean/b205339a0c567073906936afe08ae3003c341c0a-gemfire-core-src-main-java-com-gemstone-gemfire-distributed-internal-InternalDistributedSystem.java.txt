Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.LinuxProcFsStatistics;
+import com.gemstone.gemfire.internal.cache.BridgeServerImpl;
+import com.gemstone.gemfire.internal.cache.xmlcache.BridgeServerCreation;
+import com.gemstone.gemfire.internal.offheap.MemoryAllocator;
+import com.gemstone.gemfire.internal.offheap.OffHeapStorage;
+  public static final CreationStackGenerator DEFAULT_CREATION_STACK_GENERATOR = new CreationStackGenerator() {
+    @Override
+    public Throwable generateCreationStack(final DistributionConfig config) {
+      return null;
+    }
+  };
+
-  public static final AtomicReference<CreationStackGenerator> TEST_CREATION_STACK_GENERATOR = new AtomicReference<CreationStackGenerator>(
-      new CreationStackGenerator() {
-        @Override
-        public Throwable generateCreationStack(final DistributionConfig config) {
-          return null;
-        }
-      });
-  
+  public static final AtomicReference<CreationStackGenerator> TEST_CREATION_STACK_GENERATOR = new AtomicReference<CreationStackGenerator>(DEFAULT_CREATION_STACK_GENERATOR);
+  private MemoryAllocator offHeapStore = null;
+  
+  public MemoryAllocator getOffHeapStore() {
+    return this.offHeapStore;
+  }
+  
+    final long offHeapMemorySize = OffHeapStorage.parseOffHeapMemorySize(getConfig().getOffHeapMemorySize());
+
+    this.offHeapStore = OffHeapStorage.createOffHeapStorage(getLogWriter(), this, offHeapMemorySize, this);
+    
+    // Note: this can only happen on a linux system
+    if (getConfig().getLockMemory()) {
+      // This calculation is not exact, but seems fairly close.  So far we have
+      // not loaded much into the heap and the current RSS usage is already 
+      // included the available memory calculation.
+      long avail = LinuxProcFsStatistics.getAvailableMemory(logger);
+      long size = offHeapMemorySize + Runtime.getRuntime().totalMemory();
+      if (avail < size) {
+        if (GemFireCacheImpl.ALLOW_MEMORY_LOCK_WHEN_OVERCOMMITTED) {
+          logger.warn(LocalizedMessage.create(LocalizedStrings.InternalDistributedSystem_MEMORY_OVERCOMMIT_WARN, size - avail));
+        } else {
+          throw new IllegalStateException(LocalizedStrings.InternalDistributedSystem_MEMORY_OVERCOMMIT.toLocalizedString(avail, size));
+        }
+      }
+      
+      logger.info("Locking memory. This may take a while...");
+      GemFireCacheImpl.lockMemory();
+      logger.info("Finished locking memory.");
+    }
+
+        if (getOffHeapStore() != null) {
+          getOffHeapStore().close();
+        }
+      } finally {
+      try {
+      }
+    List<BridgeServerCreation> cacheServerCreation = null;
+    
+        cacheServerCreation = cache.getCacheConfig().getCacheServerCreation();
-        logger.info(LocalizedMessage.create(LocalizedStrings.DISTRIBUTED_SYSTEM_RECONNECTING, new Object[]{reconnectAttemptCounter}));
+        logger.info("Disconnecting old DistributedSystem to prepare for a reconnect attempt");
+            if (cacheServerCreation != null) {
+              for (BridgeServerCreation bridge: cacheServerCreation) {
+                BridgeServerImpl impl = (BridgeServerImpl)cache.addCacheServer();
+                impl.configureFrom(bridge);
+                try {
+                  if (!impl.isRunning()) {
+                    impl.start();
+                  }
+                } catch (IOException ex) {
+                  throw new GemFireIOException(
+                      LocalizedStrings.CacheCreation_WHILE_STARTING_BRIDGE_SERVER_0
+                          .toLocalizedString(impl), ex);
+                }
+              }
+            }

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS43 INS83 INS83 INS83 MOV74 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS42 UPD42 MOV14 INS42 INS14 INS42 INS42 INS33 INS42 INS41 INS60 MOV74 INS42 INS22 MOV51 MOV51 INS8 INS74 INS59 INS52 INS42 INS60 INS21 INS25 INS54 INS43 INS43 INS42 INS33 INS83 INS39 INS59 INS7 INS32 INS8 INS8 MOV8 INS42 INS42 INS42 INS32 INS22 INS32 INS32 INS42 INS60 INS60 INS25 INS21 INS21 INS21 INS25 INS21 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS32 INS52 INS42 INS52 INS42 INS39 INS59 INS39 INS59 INS27 INS8 INS32 INS32 INS32 INS27 INS8 INS7 INS32 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS25 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS32 INS33 INS21 INS42 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS8 INS8 INS42 INS32 INS32 INS42 INS32 INS42 INS21 INS53 INS32 INS42 INS42 INS42 INS25 INS42 INS42 INS32 INS14 INS42 INS27 INS8 INS42 INS42 INS32 INS43 INS32 INS42 INS33 INS70 INS42 INS42 INS40 INS27 INS42 INS40 INS42 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS43 INS42 INS60 INS21 INS54 INS42 INS43 INS59 INS32 INS8 INS12 INS42 INS42 INS11 INS42 INS42 INS42 INS25 INS44 INS8 INS43 INS32 INS38 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS32 INS21 INS42 INS14 INS42 INS42 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 DEL14 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL32