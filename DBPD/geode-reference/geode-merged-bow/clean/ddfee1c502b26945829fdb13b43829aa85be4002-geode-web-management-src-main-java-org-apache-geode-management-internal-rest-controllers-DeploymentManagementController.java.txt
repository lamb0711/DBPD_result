GEODE-7421:  deploy jar by REST API/JAVA API for Management

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Path;
+
+import io.swagger.annotations.ApiResponse;
+import io.swagger.annotations.ApiResponses;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.multipart.MultipartFile;
+import org.apache.geode.management.api.ClusterManagementRealizationResult;
+import org.apache.geode.management.api.ClusterManagementResult;
+import org.apache.geode.management.configuration.HasFile;
+import org.apache.geode.management.internal.beans.FileUploader;
+  @Autowired
+  private Jackson2ObjectMapperFactoryBean objectMapper;
+
-      deployment.setJarFileName(id);
+      deployment.setFileName(id);
-      deployment.setJarFileName(id);
+      deployment.setFileName(id);
+
+  @ApiOperation(value = "deploy")
+  @ApiResponses({
+      @ApiResponse(code = 400, message = "Bad request."),
+      @ApiResponse(code = 409, message = "Index already exists."),
+      @ApiResponse(code = 500, message = "Internal error.")})
+  @PreAuthorize("@securityService.authorize('CLUSTER', 'MANAGE', 'DEPLOY')")
+  // @PostMapping(Deployment.DEPLOYMENT_ENDPOINT)
+  @PostMapping(value = Deployment.DEPLOYMENT_ENDPOINT,
+      consumes = {"multipart/form-data", "application/json"})
+  public ResponseEntity<ClusterManagementResult> deploy(
+      @RequestParam(HasFile.FILE_PARAM) MultipartFile file,
+      @RequestParam(HasFile.CONFIG_PARAM) String json) throws IOException {
+    // save the file to the staging area
+    if (file == null) {
+      throw new IllegalArgumentException("No file uploaded");
+    }
+    Path tempDir = FileUploader.createSecuredTempDirectory("uploaded-");
+    File dest = new File(tempDir.toFile(), file.getOriginalFilename());
+    Deployment deployment = objectMapper.getObject().readValue(json, Deployment.class);
+    file.transferTo(dest);
+    deployment.setFile(dest);
+    ClusterManagementRealizationResult realizationResult =
+        clusterManagementService.create(deployment);
+    return new ResponseEntity<>(realizationResult, HttpStatus.CREATED);
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS78 INS83 INS43 INS59 INS77 INS79 INS79 INS77 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS42 INS42 INS42 INS42 INS80 INS42 INS4 INS42 INS45 INS42 INS80 INS80 INS43 INS43 INS79 INS43 INS42 INS79 INS43 INS42 INS42 INS25 INS60 INS60 INS60 INS21 INS21 INS60 INS41 MOV32 MOV32 INS42 INS45 INS77 INS77 INS77 INS42 INS40 INS42 INS4 INS42 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS14 INS42 INS80 INS80 INS42 INS80 INS80 INS42 INS80 INS80 INS45 INS45 INS42 INS33 INS53 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS74 INS42 INS40 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS42 INS34 INS42 INS45 INS14 INS42 INS42 INS45 INS43 INS32 INS32 INS32 INS42 INS42 INS57 INS42 INS42 INS42 INS43 UPD42 UPD42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42