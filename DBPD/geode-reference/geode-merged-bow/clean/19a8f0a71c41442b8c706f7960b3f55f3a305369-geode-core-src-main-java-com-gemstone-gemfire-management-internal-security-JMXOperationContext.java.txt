GEODE-17: WIP adding JMX security

+import com.gemstone.gemfire.internal.logging.LogService;
+import com.gemstone.gemfire.management.AsyncEventQueueMXBean;
+import com.gemstone.gemfire.management.CacheServerMXBean;
+import com.gemstone.gemfire.management.DiskStoreMXBean;
+import com.gemstone.gemfire.management.DistributedLockServiceMXBean;
+import com.gemstone.gemfire.management.DistributedRegionMXBean;
+import com.gemstone.gemfire.management.GatewayReceiverMXBean;
+import com.gemstone.gemfire.management.GatewaySenderMXBean;
+import com.gemstone.gemfire.management.LocatorMXBean;
+import com.gemstone.gemfire.management.LockServiceMXBean;
+import com.gemstone.gemfire.management.ManagerMXBean;
+import com.gemstone.gemfire.management.MemberMXBean;
+import com.gemstone.gemfire.management.RegionMXBean;
+import static com.gemstone.gemfire.management.internal.security.ResourceConstants.*;
-
+/**
+ * It describes current JMX MBean Method call and its parameters.
+ * OpCode returned by JMXOperationContext is retrieved from ResourceOperation annotation
+ * on the target methodName
+ *
+ * @author tushark
+ * @since 9.0
+ *
+ */
-	
-	private static Map<String,ResourceOperationCode> cacheDSResourceOps = null;
-	private static Map<String,ResourceOperationCode> cacheMemberResourceOps = null;
-	private static Map<String,ResourceOperationCode> cacheRegionResourceOps = null;
-	private static Map<String,ResourceOperationCode> cacheDiskStoreResourceOps = null;
+  private ObjectName name;
+  private String methodName;
+
+  private static Map<Class<?>,Map<String,ResourceOperationCode>> cachedResourceOpsMapping = new HashMap<Class<?>,Map<String,ResourceOperationCode>>();
+  private static Map<String,ResourceOperationCode> distributedSystemMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> diskStoreMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> cacheServerMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> gatewayReceiverMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> gatewaySenderMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> lockServiceMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> managerMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> memberMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> regionMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> locatorMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> distributedLockServiceMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> distributedRegionMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> asyncEventQueueMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+  private static Map<String,ResourceOperationCode> accessControlMXBeanResourceOps = new HashMap<String,ResourceOperationCode>();
+
-		//cache all resource annotations
+
+    cachedResourceOpsMapping.put(DistributedSystemMXBean.class, distributedSystemMXBeanResourceOps);
+    cachedResourceOpsMapping.put(DiskStoreMXBean.class, diskStoreMXBeanResourceOps);
+    cachedResourceOpsMapping.put(CacheServerMXBean.class, cacheServerMXBeanResourceOps);
+    cachedResourceOpsMapping.put(GatewayReceiverMXBean.class, gatewayReceiverMXBeanResourceOps);
+    cachedResourceOpsMapping.put(GatewaySenderMXBean.class, gatewaySenderMXBeanResourceOps);
+    cachedResourceOpsMapping.put(LockServiceMXBean.class, lockServiceMXBeanResourceOps);
+    cachedResourceOpsMapping.put(ManagerMXBean.class, managerMXBeanResourceOps);
+    cachedResourceOpsMapping.put(MemberMXBean.class, memberMXBeanResourceOps);
+    cachedResourceOpsMapping.put(RegionMXBean.class, regionMXBeanResourceOps);
+    cachedResourceOpsMapping.put(LocatorMXBean.class, locatorMXBeanResourceOps);
+    cachedResourceOpsMapping.put(DistributedLockServiceMXBean.class, distributedLockServiceMXBeanResourceOps);
+    cachedResourceOpsMapping.put(DistributedRegionMXBean.class, distributedRegionMXBeanResourceOps);
+    cachedResourceOpsMapping.put(AsyncEventQueueMXBean.class, asyncEventQueueMXBeanResourceOps);
+    cachedResourceOpsMapping.put(AccessControlMXBean.class, accessControlMXBeanResourceOps);
+
-			Class[] klassList = ClasspathScanLoadHelper.getClasses("com.gemstone.gemfire.management");
-			for(Class klass : klassList) {
+      Class<?>[] klassList = ClasspathScanLoadHelper.getClasses(MANAGEMENT_PACKAGE);
+      for(Class<?> klass : klassList) {
-						//ResourceOperation op = method.getDeclaredAnnotations();(ResourceOperation.class);
-					//TODO : Log all cached operations
-	private static void cache(Class klass, String name, ResourceOperation op) {
+  private static void cache(Class<?> klass, String name, ResourceOperation op) {
-		if(code==null){
-			if(name.startsWith("list") || name.startsWith("fetch") || name.startsWith("view")
-					|| name.startsWith("show")){
+    if(code==null && isGetterSetter(name)){
-			} else if (name.startsWith("get")){
-				code = ResourceOperationCode.READ_DS;
-			} else if (name.startsWith("is")){
-				code = ResourceOperationCode.READ_DS;
-			} else if (name.startsWith("set")){
-				code = ResourceOperationCode.SET_DS;
-			}
+
-		/*
-		System.out.println("Klass " + klass + " mname : " + name);
-		if (code != null)
-			System.out.println("ResourceOperation code=" + code);
-		else
-			System.out.println("ResourceOperation is null");*/
-		
-		Resource targetedResource = null;
-		
-		if(op!=null){
-			targetedResource = op.resource();
-		} else {
-			if(klass.equals(DistributedSystemMXBean.class)) {
-				targetedResource = Resource.DISTRIBUTED_SYSTEM;
-			}
-			//TODO : Add other resource and mbeans
-		}
-		
-		/* Comment for timebeing to avoid falling for other methods
-		if(!isGetterSetter(name) && code==null){
-			throw new GemFireConfigException(
-					"Error while configuring authorization for jmx. No authorization defined for " 
+    if (code == null && cachedResourceOpsMapping.keySet().contains(klass) && !isGetterSetter(name)) {
+      throw new GemFireConfigException("Error while configuring authorization for jmx. No opCode defined for "
-		}*/
-		if(targetedResource!=null) {
-			switch (targetedResource) {
-			case DISTRIBUTED_SYSTEM:
-				if (code != null){
-					if(cacheDSResourceOps==null)
-						cacheDSResourceOps = new HashMap<String,ResourceOperationCode>();
-					cacheDSResourceOps.put(name, code);
-				break;
+
+    final Map<String,ResourceOperationCode> resourceOpsMap = cachedResourceOpsMapping.get(klass);
+    if(resourceOpsMap==null) {
+      if (cachedResourceOpsMapping.keySet().contains(klass))
+        throw new GemFireConfigException("Unknown MBean " + klass.getCanonicalName());
+      else {
+        LogService.getLogger().warn("Unsecured mbean " + klass);
+    else {
+      resourceOpsMap.put(name, code);
+    }
-	private static boolean isGetterSetter(String name) {
-		if(name.startsWith("is") || name.startsWith("get") ||  name.startsWith("set") ||  name.startsWith("fetch")
-			||  name.startsWith("list") ||  name.startsWith("view") ||  name.startsWith("show") ) 
+  public static boolean isGetterSetter(String name) {
+    if(name.startsWith(GETTER_IS) || name.startsWith(GETTER_GET) ||  name.startsWith(GETTER_FETCH)
+      ||  name.startsWith(GETTER_LIST) ||  name.startsWith(GETTER_VIEW) ||  name.startsWith(GETTER_SHOW) ||  name.startsWith(GETTER_HAS))
-		if(name.equals(MBeanJMXAdapter.getDistributedSystemName())){
-			resourceCode = cacheDSResourceOps.get(methodName);
+    Class<?> klass = getMbeanClass(name);
+    Map<String,ResourceOperationCode> resourceOpsMap = cachedResourceOpsMapping.get(klass);
+    resourceCode = resourceOpsMap.get(methodName);
+    this.methodName = methodName;
+    this.name = name;
+
+    //If getAttr is not found try for isAttr ie. boolean getter
+    if(resourceCode==null) {
+      if(this.methodName.startsWith(GET_PREFIX)) {
+        String methodNameBooleanGetter = GET_IS_PREFIX + this.methodName.substring(GET_PREFIX.length());
+        if(resourceOpsMap.containsKey(methodNameBooleanGetter)){
+          resourceCode = resourceOpsMap.get(methodNameBooleanGetter);
+          this.methodName = methodNameBooleanGetter;
+        }
+    //If resourceCode is still null most likely its wrong method name so just allow it pass
+    if(resourceCode==null) {
+      resourceCode = ResourceOperationCode.LIST_DS;
+    }
+  }
+
+
+
+
+  private Class<?> getMbeanClass(ObjectName name) {
+    if (name.equals(MBeanJMXAdapter.getDistributedSystemName()))
+      return DistributedSystemMXBean.class;
+    else {
+      String service = name.getKeyProperty(MBEAN_KEY_SERVICE);
+      String mbeanType = name.getKeyProperty(MBEAN_KEY_TYPE);
+
+      if (MBEAN_TYPE_DISTRIBUTED.equals(mbeanType)) {
+        if (MBEAN_SERVICE_SYSTEM.equals(service)) {
+          return DistributedSystemMXBean.class;
+        } else if (MBEAN_SERVICE_REGION.equals(service)) {
+          return DistributedRegionMXBean.class;
+        } else if (MBEAN_SERVICE_LOCKSERVICE.equals(service)) {
+          return DistributedLockServiceMXBean.class;
+        } else {
+          throw new RuntimeException("Unknown mbean type " + name);
+        }
+      } else if (MBEAN_TYPE_MEMBER.equals(mbeanType)) {
+        if (service == null) {
+          return MemberMXBean.class;
+        } else {
+          if (MBEAN_SERVICE_MANAGER.equals(service)) {
+            return ManagerMXBean.class;
+          } else if (MBEAN_SERVICE_CACHESERVER.equals(service)) {
+            return CacheServerMXBean.class;
+          } else if (MBEAN_SERVICE_REGION.equals(service)) {
+            return RegionMXBean.class;
+          } else if (MBEAN_SERVICE_LOCKSERVICE.equals(service)) {
+            return LockServiceMXBean.class;
+          } else if (MBEAN_SERVICE_DISKSTORE.equals(service)) {
+            return DiskStoreMXBean.class;
+          } else if (MBEAN_SERVICE_GATEWAY_RECEIVER.equals(service)) {
+            return GatewayReceiverMXBean.class;
+          } else if (MBEAN_SERVICE_GATEWAY_SENDER.equals(service)) {
+            return GatewaySenderMXBean.class;
+          } else if (MBEAN_SERVICE_ASYNCEVENTQUEUE.equals(service)) {
+            return AsyncEventQueueMXBean.class;
+          } else if (MBEAN_SERVICE_LOCATOR.equals(service)) {
+            return LocatorMXBean.class;
+          } else {
+            throw new RuntimeException("Unknown mbean type " + name);
+          }
+        }
+      } else {
+        throw new RuntimeException("Unknown mbean type " + name);
+      }
+    }
+  }
-	public static Map<String, ResourceOperationCode> getCacheDSResourceOps() {
-		return cacheDSResourceOps;
+  public String toString(){
+    return "JMXOpCtx(on="+name+",method="+methodName+")";
-	public static void setCacheDSResourceOps(
-			Map<String, ResourceOperationCode> cacheDSResourceOps) {
-		JMXOperationContext.cacheDSResourceOps = cacheDSResourceOps;
-	
-
-}

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS29 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS65 INS65 INS65 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS83 INS83 MOV74 INS59 INS83 INS83 MOV74 INS59 INS74 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS74 INS74 INS74 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS83 MOV74 INS59 UPD83 INS8 UPD83 INS74 UPD42 INS44 INS8 INS43 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS43 INS74 MOV74 INS42 INS14 INS42 INS14 INS42 INS14 INS43 INS43 INS43 UPD42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 UPD42 INS14 INS43 INS43 INS43 UPD42 INS14 INS43 INS43 INS43 UPD42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 INS14 INS43 INS43 INS43 INS42 MOV14 INS42 INS14 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS74 INS25 INS25 INS60 INS25 MOV21 INS60 INS60 INS21 INS21 INS21 INS25 INS25 INS43 INS76 INS43 INS42 INS25 INS42 INS41 INS42 MOV43 INS76 INS74 INS74 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS76 INS27 MOV8 INS27 INS8 INS83 INS74 MOV59 UPD27 MOV27 INS8 INS8 INS74 INS59 MOV74 INS59 INS7 INS7 INS7 INS27 INS8 INS27 INS8 INS42 INS42 MOV32 INS41 INS8 INS27 INS43 INS74 MOV74 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 MOV57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS57 INS42 MOV42 MOV27 MOV32 INS27 INS38 INS53 INS43 INS43 INS43 INS42 INS32 UPD42 INS25 MOV21 INS43 INS76 INS42 INS32 INS42 INS32 INS42 INS32 INS22 INS42 INS22 INS42 INS42 INS33 INS25 INS42 INS33 INS21 INS57 INS60 INS60 INS25 INS45 INS42 INS45 INS42 INS45 INS42 MOV43 INS76 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 UPD5 INS42 INS27 INS32 INS32 INS14 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS53 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS32 INS8 INS7 INS43 INS43 INS59 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS74 INS42 INS33 INS32 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 INS43 INS27 INS32 UPD42 MOV42 MOV42 INS14 INS21 UPD42 INS22 INS42 INS42 INS60 MOV25 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS25 INS32 INS8 INS8 MOV43 INS76 INS42 INS43 INS76 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS32 INS45 INS42 INS42 UPD42 MOV42 INS43 INS27 INS32 INS52 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS25 INS42 INS42 INS42 INS25 INS53 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS32 INS32 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS27 INS8 INS8 INS14 INS42 INS42 INS42 INS42 INS45 UPD42 MOV42 INS42 INS32 INS7 INS57 INS42 INS42 INS42 INS41 INS32 INS8 INS8 INS42 INS33 INS41 INS25 INS43 INS27 INS22 INS42 INS32 INS22 INS42 INS43 INS57 INS42 INS42 INS42 INS41 INS53 INS57 INS32 INS8 INS25 INS42 INS45 INS42 INS52 INS42 INS42 INS42 UPD42 UPD42 INS52 INS42 INS42 INS43 INS57 INS14 INS43 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS43 INS43 INS27 INS42 INS57 INS42 INS42 INS42 MOV41 INS32 INS8 INS25 INS42 INS42 INS45 INS42 INS43 INS57 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS43 INS57 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS43 INS57 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS43 INS57 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS43 INS57 INS42 INS42 INS42 INS41 INS32 INS8 INS25 INS42 INS43 INS57 INS42 INS42 INS42 INS41 INS32 INS8 INS8 INS42 INS43 INS57 INS42 INS42 INS42 INS41 INS53 INS42 INS43 INS57 INS14 INS42 INS43 INS43 INS27 INS42 INS42 INS45 INS42 DEL33 DEL33 DEL33 DEL33 DEL45 DEL42 DEL45 DEL42 DEL33 DEL42 DEL42 DEL45 DEL32 DEL45 DEL32 DEL45 DEL32 DEL27 DEL42 DEL45 DEL32 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL45 DEL32 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL8 DEL25 DEL43 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL32 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL49 DEL42 DEL33 DEL27 DEL33 DEL27 DEL42 DEL7 DEL21 DEL25 DEL8 DEL25 DEL10 DEL50 DEL8 DEL25 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL8 DEL83 DEL42 DEL8 DEL83 DEL39 DEL42 DEL42 DEL44 DEL40 DEL42 DEL7 DEL21