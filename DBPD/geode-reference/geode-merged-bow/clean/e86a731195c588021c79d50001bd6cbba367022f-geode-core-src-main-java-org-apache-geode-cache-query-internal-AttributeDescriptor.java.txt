Merge branch 'release/1.3.0'

-import org.apache.geode.cache.EntryDestroyedException;
-import org.apache.geode.cache.query.NameNotFoundException;
-import org.apache.geode.cache.query.QueryInvocationTargetException;
-import org.apache.geode.cache.query.QueryService;
-import org.apache.geode.cache.query.types.ObjectType;
-import org.apache.geode.internal.cache.Token;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.pdx.JSONFormatter;
-import org.apache.geode.pdx.PdxInstance;
-import org.apache.geode.pdx.PdxSerializationException;
-import org.apache.geode.pdx.internal.FieldNotFoundInPdxVersion;
-import org.apache.geode.pdx.internal.PdxInstanceImpl;
-
+import org.apache.geode.cache.EntryDestroyedException;
+import org.apache.geode.cache.query.NameNotFoundException;
+import org.apache.geode.cache.query.QueryInvocationTargetException;
+import org.apache.geode.cache.query.QueryService;
+import org.apache.geode.internal.cache.Token;
+import org.apache.geode.internal.i18n.LocalizedStrings;
+import org.apache.geode.pdx.JSONFormatter;
+import org.apache.geode.pdx.PdxInstance;
+import org.apache.geode.pdx.PdxSerializationException;
+import org.apache.geode.pdx.internal.FieldNotFoundInPdxVersion;
+import org.apache.geode.pdx.internal.PdxInstanceImpl;
+
+  private final MethodInvocationAuthorizer _methodInvocationAuthorizer;
-  private static final ConcurrentMap _cache = new ConcurrentHashMap();
+  private static final ConcurrentMap<List, Member> _localCache = new ConcurrentHashMap();
-  public AttributeDescriptor(String name) {
+  public AttributeDescriptor(MethodInvocationAuthorizer methodInvocationAuthorizer, String name) {
+    _methodInvocationAuthorizer = methodInvocationAuthorizer;
+          _methodInvocationAuthorizer.authorizeMethodInvocation((Method) m, target);
-
-  Member getReadMember(ObjectType targetType) throws NameNotFoundException {
-    return getReadMember(targetType.resolveClass());
-  }
-
+
-    Member m = (Member) _cache.get(key);
-    if (m != null)
-      return m;
+    Member m = _localCache.computeIfAbsent(key, k -> {
+      Member member = getReadField(targetClass);
+      return member == null ? getReadMethod(targetClass) : member;
+    });
-    m = getReadField(targetClass);
-    if (m == null)
-      m = getReadMethod(targetClass);
-    if (m != null)
-      _cache.putIfAbsent(key, m);
-    else
+    if (m == null) {
+    }
+
-
+    // Check for a getter method for this _name
+
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS23 INS83 INS83 INS43 INS59 INS74 INS44 UPD42 MOV42 INS42 MOV43 INS43 MOV43 UPD42 INS43 INS42 INS21 INS60 INS42 INS42 INS42 INS7 MOV43 INS59 MOV27 INS8 INS42 INS42 MOV42 INS32 MOV53 UPD42 MOV42 UPD42 MOV42 MOV42 INS86 INS59 INS8 INS42 INS60 INS41 INS21 MOV43 INS59 INS16 INS32 INS42 MOV32 INS27 MOV32 INS42 INS42 INS42 INS11 INS42 UPD42 MOV42 MOV33 INS43 INS42 INS42 DEL40 DEL26 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL32 DEL11 DEL59 DEL60 DEL27 DEL42 DEL41 DEL25 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21