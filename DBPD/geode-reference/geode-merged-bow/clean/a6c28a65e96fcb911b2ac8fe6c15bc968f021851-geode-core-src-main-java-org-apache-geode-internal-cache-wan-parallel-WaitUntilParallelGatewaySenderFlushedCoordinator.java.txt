GEODE-2400: use a function to implement waitUntilFlushed, then accessor and client
can have this feature.

-import org.apache.geode.DataSerializer;
-import org.apache.geode.cache.Cache;
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.util.Set;
-    boolean remoteResult = true, localResult = true;
+    boolean localResult = true;
+    if (pr == null) {
+      sender.getCancelCriterion().checkCancelInProgress(null);
+    }
-    // Send message to remote buckets
-    if (this.initiator) {
-      remoteResult = false;
-      try {
-        remoteResult = waitUntilFlushedOnRemoteMembers(pr);
-      } catch (Throwable t) {
-        exceptionToThrow = t;
-      }
-      if (logger.isDebugEnabled()) {
-        logger.debug("WaitUntilParallelGatewaySenderFlushedCoordinator: Processed remote result="
-            + remoteResult + "; exceptionToThrow=" + exceptionToThrow);
-      }
-    }
-
-            + (remoteResult && localResult));
+            + (localResult));
-      return remoteResult && localResult;
+      return localResult;
-  protected boolean waitUntilFlushedOnRemoteMembers(PartitionedRegion pr) throws Throwable {
-    boolean result = true;
-    DM dm = this.sender.getDistributionManager();
-    Set<InternalDistributedMember> recipients = pr.getRegionAdvisor().adviseDataStore();
-    if (!recipients.isEmpty()) {
-      if (logger.isDebugEnabled()) {
-        logger.debug(
-            "WaitUntilParallelGatewaySenderFlushedCoordinator: About to send message recipients="
-                + recipients);
-      }
-      WaitUntilGatewaySenderFlushedReplyProcessor processor =
-          new WaitUntilGatewaySenderFlushedReplyProcessor(dm, recipients);
-      WaitUntilGatewaySenderFlushedMessage message = new WaitUntilGatewaySenderFlushedMessage(
-          recipients, processor.getProcessorId(), this.sender.getId(), this.timeout, this.unit);
-      dm.putOutgoing(message);
-      if (logger.isDebugEnabled()) {
-        logger.debug("WaitUntilParallelGatewaySenderFlushedCoordinator: Sent message recipients="
-            + recipients);
-      }
-      try {
-        processor.waitForReplies();
-        result = processor.getCombinedResult();
-      } catch (ReplyException e) {
-        if (logger.isDebugEnabled()) {
-          logger.debug("WaitUntilParallelGatewaySenderFlushedCoordinator: Caught e=" + e
-              + "; cause=" + e.getCause());
-        }
-        throw e.getCause();
-      } catch (InterruptedException e) {
-        dm.getCancelCriterion().checkCancelInProgress(e);
-        Thread.currentThread().interrupt();
-        result = false;
-      }
-    }
-    return result;
-  }
-
-  public static class WaitUntilGatewaySenderFlushedMessage extends PooledDistributionMessage
-      implements MessageWithReply {
-
-    private int processorId;
-
-    private String gatewaySenderId;
-
-    private long timeout;
-
-    private TimeUnit unit;
-
-    /* For serialization */
-    public WaitUntilGatewaySenderFlushedMessage() {}
-
-    protected WaitUntilGatewaySenderFlushedMessage(Collection recipients, int processorId,
-        String gatewaySenderId, long timeout, TimeUnit unit) {
-      super();
-      setRecipients(recipients);
-      this.processorId = processorId;
-      this.gatewaySenderId = gatewaySenderId;
-      this.timeout = timeout;
-      this.unit = unit;
-    }
-
-    @Override
-    protected void process(DistributionManager dm) {
-      boolean result = false;
-      ReplyException replyException = null;
-      try {
-        if (logger.isDebugEnabled()) {
-          logger.debug("WaitUntilGatewaySenderFlushedMessage: Processing gatewaySenderId="
-              + this.gatewaySenderId + "; timeout=" + this.timeout + "; unit=" + this.unit);
-        }
-        Cache cache = GemFireCacheImpl.getInstance();
-        if (cache != null) {
-          AbstractGatewaySender sender =
-              (AbstractGatewaySender) cache.getGatewaySender(this.gatewaySenderId);
-          if (sender != null) {
-            try {
-              WaitUntilParallelGatewaySenderFlushedCoordinator coordinator =
-                  new WaitUntilParallelGatewaySenderFlushedCoordinator(sender, this.timeout,
-                      this.unit, false);
-              result = coordinator.waitUntilFlushed();
-            } catch (Throwable e) {
-              replyException = new ReplyException(e);
-            }
-          }
-        }
-      } finally {
-        ReplyMessage replyMsg = new ReplyMessage();
-        replyMsg.setRecipient(getSender());
-        replyMsg.setProcessorId(this.processorId);
-        if (replyException == null) {
-          replyMsg.setReturnValue(result);
-        } else {
-          replyMsg.setException(replyException);
-        }
-        if (logger.isDebugEnabled()) {
-          logger.debug("WaitUntilGatewaySenderFlushedMessage: Sending reply returnValue="
-              + replyMsg.getReturnValue() + "; exception=" + replyMsg.getException());
-        }
-        dm.putOutgoing(replyMsg);
-      }
-    }
-
-    @Override
-    public int getDSFID() {
-      return WAIT_UNTIL_GATEWAY_SENDER_FLUSHED_MESSAGE;
-    }
-
-    @Override
-    public void toData(DataOutput out) throws IOException {
-      super.toData(out);
-      out.writeInt(this.processorId);
-      DataSerializer.writeString(this.gatewaySenderId, out);
-      out.writeLong(this.timeout);
-      DataSerializer.writeEnum(this.unit, out);
-    }
-
-    @Override
-    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      super.fromData(in);
-      this.processorId = in.readInt();
-      this.gatewaySenderId = DataSerializer.readString(in);
-      this.timeout = in.readLong();
-      this.unit = DataSerializer.readEnum(TimeUnit.class, in);
-    }
-  }

MOV83 INS42 MOV25 INS27 MOV8 INS42 INS33 MOV32 INS42 INS32 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL42 DEL9 DEL59 DEL45 DEL42 DEL45 DEL42 DEL27 DEL52 DEL42 DEL22 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL54 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL46 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL45 DEL52 DEL42 DEL22 DEL45 DEL52 DEL42 DEL22 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL9 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL48 DEL21 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL48 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL55