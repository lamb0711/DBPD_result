GEODE-4372: clean up RemoteOperationMessage classes (#1338)


* throw RemoteOperationException instead of ForceReattemptException when cache is closing. All ForceReattemptException throwing by RemoteOperationMessage has been removed.

* now uses SERIAL_EXECUTOR for all RemoteOperationMessages.
Previously most of these messages where processed in the partitioned message
thread pool even though most all of these messages where not partitioned.
It is possible that RemotePutAll and RemoteRemoveAll will have some trouble
being SERIAL_EXECUTOR.

* added comments for all RemoteOperationMessages describing what
they are used for

* Improved RemoteOperationMessageTest

* added a BucketTXRegionStub to calculate bucket region size on a stub.

* removed GemFireCacheImpl.getInstance call

* added RemoteOperationResponse unit test

* renamed handleAsUnexpected to handleCause

* renamed waitForCacheException to waitForRemoteResponse

* moved RemoteOperation classes to tx package


- * as a "public static final byte". Make sure and update the "unused" comments to no longer mention
- * your new id. If implementing a class used only for tests then there is no need to consume a fixed
- * id and you should use {@link #NO_FIXED_ID}. In this case you can skip steps 3 and 4.
+ * as a "byte". Make sure and update the "unused" comments to no longer mention your new id. If
+ * implementing a class used only for tests then there is no need to consume a fixed id and you
+ * should use {@link #NO_FIXED_ID}. In this case you can skip steps 3 and 4.
-   * In DataSerializableFixedId, allocate an ID for the class public static final byte FOO = -54;
+   * In DataSerializableFixedId, allocate an ID for the class byte FOO = -54;
-  short R_REGION_OP_REPLY = -132;
-  short R_REGION_OP = -131;
+  short R_CLEAR_MSG_REPLY = -132;
+  short R_CLEAR_MSG = -131;
-  // public static final byte JGROUPS_VIEW = 1;
+  // byte JGROUPS_VIEW = 1;
-  // public static final byte JGROUPS_JOIN_RESP = 2;
+  // byte JGROUPS_JOIN_RESP = 2;
-  // public static final byte IP_ADDRESS = 70;
+  // byte IP_ADDRESS = 70;

UPD66 UPD66 UPD66 UPD42 UPD42