Merge branch 'release/1.3.0'

-  static Map primTypes;
-  static Map wrapperTypes;
+  private static final Map<String, Class> PRIMITIVE_TYPES = primitiveTypes();
-  static {
-
-    if (primTypes == null) {
-      Map ptMap = new HashMap();
-      ptMap.put(boolean.class.getName(), boolean.class);
-      ptMap.put(char.class.getName(), char.class);
-      ptMap.put(byte.class.getName(), byte.class);
-      ptMap.put(short.class.getName(), short.class);
-      ptMap.put(int.class.getName(), int.class);
-      ptMap.put(long.class.getName(), long.class);
-      ptMap.put(float.class.getName(), float.class);
-      ptMap.put(double.class.getName(), double.class);
-      ptMap.put(void.class.getName(), void.class);
-      // Do this at the end to support multiple threads without synchronizing
-      primTypes = ptMap;
-    }
-
-    if (wrapperTypes == null) {
-      Map wtMap = new HashMap();
-      wtMap.put(boolean.class.getName(), Boolean.class);
-      wtMap.put(char.class.getName(), Character.class);
-      wtMap.put(byte.class.getName(), Byte.class);
-      wtMap.put(short.class.getName(), Short.class);
-      wtMap.put(int.class.getName(), Integer.class);
-      wtMap.put(long.class.getName(), Long.class);
-      wtMap.put(float.class.getName(), Float.class);
-      wtMap.put(double.class.getName(), Double.class);
-      // Do this at the end to support multiple threads without synchronizing
-      wrapperTypes = wtMap;
-    }
+  private static Map primitiveTypes() {
+    Map<String, Class> ptMap = new HashMap<>();
+    ptMap.put(boolean.class.getName(), boolean.class);
+    ptMap.put(char.class.getName(), char.class);
+    ptMap.put(byte.class.getName(), byte.class);
+    ptMap.put(short.class.getName(), short.class);
+    ptMap.put(int.class.getName(), int.class);
+    ptMap.put(long.class.getName(), long.class);
+    ptMap.put(float.class.getName(), float.class);
+    ptMap.put(double.class.getName(), double.class);
+    ptMap.put(void.class.getName(), void.class);
+    return ptMap;
-   * Resolve the method from the given qualified name.
+   * Resolve the method from the given qualified name. Only zero argument methods are supported.
-  public static Method methodFromName(String fullyQualifiedMethodName, Class[] parameterTypes)
+  public static Method methodFromName(String fullyQualifiedMethodName)
-    Class result = ClassPathLoader.getLatest().forName(className);
-    return result.getMethod(methodName, parameterTypes);
-  }
-
-  /**
-   * Resolve the method from the given qualified name. Only zero argument methods are supported.
-   */
-  public static Method methodFromName(String fullyQualifiedMethodName)
-      throws ClassNotFoundException, NoSuchMethodException, SecurityException {
-    return methodFromName(fullyQualifiedMethodName, (Class[]) null);
+    Class<?> result = ClassPathLoader.getLatest().forName(className);
+    return result.getMethod(methodName);
-  public static Class checkForPrimType(String className) {
-
-    return (Class) primTypes.get(className);
-  }
-
-  /**
-   * If the argument className is the name of a primitive type (not including "void"), return the
-   * wrapper class for that type (ex, Boolean.class). Otherwise, return null.
-   */
-  public static Class checkForWrapperType(String className) {
-
-    return (Class) wrapperTypes.get(className);
+  private static Class checkForPrimType(String className) {
+    return PRIMITIVE_TYPES.get(className);

MOV31 INS23 UPD83 MOV83 MOV83 INS83 INS74 INS59 UPD83 MOV43 INS42 MOV8 UPD83 MOV43 INS43 MOV43 INS42 INS32 INS41 MOV42 INS42 INS74 INS42 UPD66 INS74 INS32 MOV43 INS43 MOV43 MOV43 INS76 UPD42 MOV42 MOV42 MOV42 INS42 INS74 MOV43 DEL66 DEL66 DEL65 DEL29 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL59 DEL23 DEL83 DEL42 DEL33 DEL27 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL39 DEL57 DEL42 DEL32 DEL42 DEL43 DEL57 DEL32 DEL21 DEL42 DEL42 DEL39 DEL57 DEL42 DEL32 DEL42 DEL43 DEL57 DEL32 DEL21 DEL42 DEL42 DEL39 DEL57 DEL42 DEL32 DEL42 DEL43 DEL57 DEL32 DEL21 DEL42 DEL42 DEL39 DEL57 DEL42 DEL32 DEL42 DEL43 DEL57 DEL32 DEL21 DEL42 DEL42 DEL39 DEL57 DEL42 DEL32 DEL42 DEL43 DEL57 DEL32 DEL21 DEL42 DEL42 DEL39 DEL57 DEL42 DEL32 DEL42 DEL43 DEL57 DEL32 DEL21 DEL42 DEL42 DEL39 DEL57 DEL42 DEL32 DEL42 DEL43 DEL57 DEL32 DEL21 DEL42 DEL42 DEL39 DEL57 DEL42 DEL32 DEL42 DEL43 DEL57 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL28 DEL85 DEL5 DEL42 DEL44 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL33 DEL11 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL32 DEL11