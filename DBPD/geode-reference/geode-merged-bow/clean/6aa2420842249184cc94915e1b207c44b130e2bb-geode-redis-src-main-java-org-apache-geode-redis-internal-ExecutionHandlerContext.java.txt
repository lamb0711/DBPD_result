Introduce RedisResponse to SET executors (#5114)


+import static org.apache.geode.redis.internal.RedisCommandType.PUBLISH;
+
-  private static final int MAXIMUM_NUM_RETRIES = (1000 * 60) / WAIT_REGION_DSTRYD_MILLIS; // 60
-  // seconds
+  private static final int MAXIMUM_NUM_RETRIES = (1000 * 60) / WAIT_REGION_DSTRYD_MILLIS;
+
+  public ChannelFuture writeToChannel(RedisResponse response) {
+    return channel.writeAndFlush(response.encode(byteBufAllocator), channel.newPromise());
+  }
+
-    ByteBuf response = getExceptionResponse(ctx, cause);
-    writeToChannel(response);
+    writeToChannel(getExceptionResponse(ctx, cause));
-  private ByteBuf getExceptionResponse(ChannelHandlerContext ctx, Throwable cause) {
-    ByteBuf response;
+  private RedisResponse getExceptionResponse(ChannelHandlerContext ctx, Throwable cause) {
+    RedisResponse response;
+
-      response = Coder.getWrongTypeResponse(this.byteBufAllocator, cause.getMessage());
+      response = RedisResponse.wrongType(cause.getMessage());
-      response =
-          Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.PARSING_EXCEPTION_MESSAGE);
+      response = RedisResponse.error(RedisConstants.PARSING_EXCEPTION_MESSAGE);
-      this.logger.error(cause);
-      response =
-          Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.ERROR_REGION_CREATION);
+      logger.error(cause);
+      response = RedisResponse.error(RedisConstants.ERROR_REGION_CREATION);
-      response =
-          Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.SERVER_ERROR_SHUTDOWN);
+      response = RedisResponse.error(RedisConstants.SERVER_ERROR_SHUTDOWN);
-      response = Coder.getErrorResponse(this.byteBufAllocator, cause.getMessage());
+      response = RedisResponse.error(cause.getMessage());
-      response = Coder.getErrorResponse(this.byteBufAllocator, RedisConstants.SERVER_ERROR_MESSAGE);
+      response = RedisResponse.error(RedisConstants.SERVER_ERROR_MESSAGE);
+
+    RedisResponse response;
-        executeWithTransaction(ctx, command);
+        response = executeWithTransaction(ctx, command);
-        executeWithoutTransaction(command);
+        response = executeWithoutTransaction(command);
-        writeToChannel(
-            Coder.getSimpleStringResponse(this.byteBufAllocator, RedisConstants.COMMAND_QUEUED));
-      } else {
-        // PUBLISH responses are always deferred
-        if (command.getCommandType() != RedisCommandType.PUBLISH) {
-          ByteBuf response = command.getResponse();
-          writeToChannel(response);
-        }
+        response = RedisResponse.string(RedisConstants.COMMAND_QUEUED);
-    } else if (command.isOfType(RedisCommandType.QUIT)) {
-      command.execute(this);
-      ByteBuf response = command.getResponse();
-      writeToChannel(response);
-      channelInactive(ctx);
-      command.execute(this);
-      ByteBuf response = command.getResponse();
-      writeToChannel(response);
+      response = command.execute(this);
-      ByteBuf r = Coder.getNoAuthResponse(this.byteBufAllocator, RedisConstants.ERROR_NOT_AUTH);
-      writeToChannel(r);
+      response = RedisResponse.error(RedisConstants.ERROR_NOT_AUTH);
+    }
+
+    // PUBLISH responses are always deferred
+    // TODO: Clean this up once all Executors are using RedisResponse
+    if (response == null && !command.isOfType(PUBLISH)) {
+      writeToChannel(command.getResponse());
+    } else if (response != null) {
+      writeToChannel(response);
+    }
+
+    if (command.isOfType(RedisCommandType.QUIT)) {
+      channelInactive(ctx);
-  private void executeWithoutTransaction(Command command) throws Exception {
+  private RedisResponse executeWithoutTransaction(Command command) throws Exception {
-        command.execute(this);
-        return;
+        return command.execute(this);
-  private void executeWithTransaction(ChannelHandlerContext ctx,
+  private RedisResponse executeWithTransaction(ChannelHandlerContext ctx,
+
+    RedisResponse response;
-      command.execute(this);
+      response = command.execute(this);
-      command.setResponse(Coder.getErrorResponse(this.byteBufAllocator,
-          RedisConstants.ERROR_UNSUPPORTED_OPERATION_IN_TRANSACTION));
+      response = RedisResponse.error(RedisConstants.ERROR_UNSUPPORTED_OPERATION_IN_TRANSACTION);
-      command.setResponse(Coder.getErrorResponse(this.byteBufAllocator,
-          RedisConstants.ERROR_TRANSACTION_EXCEPTION));
+      response = RedisResponse.error(RedisConstants.ERROR_TRANSACTION_EXCEPTION);
-      ByteBuf response = getExceptionResponse(ctx, e);
-      command.setResponse(response);
+      response = getExceptionResponse(ctx, e);
+
+
+    return response;

INS26 INS40 INS31 INS83 INS43 INS42 INS44 INS8 UPD43 INS43 INS43 INS42 INS43 INS42 INS41 UPD42 INS60 INS25 INS25 INS42 INS42 INS60 INS41 INS42 INS32 UPD43 INS43 INS59 MOV25 INS27 INS8 INS25 MOV32 INS8 INS43 INS59 INS42 INS42 INS42 INS32 INS32 MOV32 UPD42 INS42 INS42 INS27 INS38 INS21 INS27 INS8 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV21 INS21 INS42 INS33 INS32 INS32 INS42 INS33 MOV21 INS7 INS7 INS7 INS42 INS42 INS42 INS42 MOV32 INS42 MOV32 INS7 INS7 INS7 UPD42 INS42 INS7 INS7 INS7 INS42 MOV32 INS42 INS32 MOV32 INS42 INS32 INS42 INS32 INS42 MOV32 UPD42 INS42 INS42 INS42 MOV32 INS42 MOV32 INS42 INS32 UPD42 MOV42 INS42 MOV40 UPD42 MOV42 INS42 MOV40 UPD42 MOV42 INS42 MOV40 UPD42 INS42 UPD42 MOV42 INS42 MOV40 UPD42 INS42 UPD42 INS42 UPD42 INS42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL32 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL52 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL8 DEL25 DEL39 DEL21 DEL39 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL32 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32