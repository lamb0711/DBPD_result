GEODE-7799: Distribute rebalance status to other locators (#4692)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Dale Emery <demery@pivotal.io>

+import java.time.Duration;
-import java.util.Map;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.ExecutionException;
-import java.util.concurrent.TimeUnit;
-import org.apache.geode.lang.Identifiable;
+import org.apache.geode.annotations.VisibleForTesting;
- * The policy for expiring completed operations is subject to change, but may be based on age,
- * count, when it was last accessed, or some combination thereof.
+ * Completed operations can expire after 7 days.
+ * Expiration is only checked for when get, list, or recordStart are called.
-  private final ConcurrentMap<String, OperationInstance> history;
+  private final OperationStateStore operationStateStore;
-  public OperationHistoryManager() {
-    this(2, TimeUnit.HOURS);
+  public OperationHistoryManager(
+      OperationStateStore operationStateStore) {
+    this(Duration.ofDays(7), operationStateStore);
-  public OperationHistoryManager(long keepCompleted, TimeUnit timeUnit) {
-    history = new ConcurrentHashMap<>();
-    keepCompletedMillis = timeUnit.toMillis(keepCompleted);
+  public OperationHistoryManager(Duration keepCompleted,
+      OperationStateStore operationStateStore) {
+    keepCompletedMillis = keepCompleted.toMillis();
+    this.operationStateStore = operationStateStore;
-  <A extends ClusterManagementOperation<V>, V extends OperationResult> OperationInstance<A, V> getOperationInstance(
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> OperationState<A, V> get(
-    return (OperationInstance<A, V>) history.get(opId);
+
+    return (OperationState<A, V>) operationStateStore.get(opId);
-  private void expireHistory() {
-    final long expirationDate = now() - keepCompletedMillis;
-    Set<String> expiredKeys =
-        history.entrySet().stream().filter(e -> isExpired(expirationDate, e.getValue()))
-            .map(Map.Entry::getKey).collect(Collectors.toSet());
-    expiredKeys.forEach(history::remove);
+  @VisibleForTesting
+  void expireHistory() {
+    final long expirationTime = now() - keepCompletedMillis;
+    Set<String> expiredKeys = operationStateStore.list()
+        .stream()
+        .filter(operationInstance -> isExpired(expirationTime, operationInstance))
+        .map(OperationState::getId)
+        .collect(Collectors.toSet());
+
+    expiredKeys.forEach(operationStateStore::remove);
-  long now() {
+  private long now() {
-  private static boolean isExpired(long expirationDate, OperationInstance<?, ?> operationInstance) {
-    CompletableFuture<Date> futureOperationEnded = operationInstance.getFutureOperationEnded();
+  private static boolean isExpired(long expirationTime, OperationState<?, ?> operationInstance) {
+    Date operationEnd = operationInstance.getOperationEnd();
-    if (!futureOperationEnded.isDone())
+    if (operationEnd == null) {
-
-    final long endTime;
-    try {
-      endTime = futureOperationEnded.get().getTime();
-    } catch (ExecutionException ignore) {
-      // cannot ever happen because we've already checked isDone above
-      return false;
-    } catch (InterruptedException ignore) {
-      // cannot ever happen because we've already checked isDone above
-      Thread.currentThread().interrupt();
-      return false;
-    return endTime <= expirationDate;
+    return operationEnd.getTime() <= expirationTime;
-   * Stores a new operation in the history and installs a trigger to record the operation end time.
+   * Stores a new operation in the history and returns its unique identifier.
-  public <A extends ClusterManagementOperation<V>, V extends OperationResult> OperationInstance<A, V> save(
-      OperationInstance<A, V> operationInstance) {
-    String opId = operationInstance.getId();
-    CompletableFuture<V> future = operationInstance.getFutureResult();
-
-    future.whenComplete((result, exception) -> operationInstance.setOperationEnded(new Date()));
-
-    history.put(opId, operationInstance);
+  public String recordStart(ClusterManagementOperation<?> op) {
-    return operationInstance;
+    return operationStateStore.recordStart(op);
-  @SuppressWarnings("unchecked")
-  <A extends ClusterManagementOperation<V>, V extends OperationResult> List<OperationInstance<A, V>> listOperationInstances(
+  /**
+   * Records that a previously started operation has ended with the given result or cause.
+   */
+  public void recordEnd(String opId, OperationResult result, Throwable cause) {
+    operationStateStore.recordEnd(opId, result, cause);
+  }
+
+  public <A extends ClusterManagementOperation<V>, V extends OperationResult> List<OperationState<A, V>> list(
-    return history.values().stream().filter(oi -> opType.getClass().isInstance(oi.getOperation()))
-        .map(oi -> (OperationInstance<A, V>) oi).collect(Collectors.toList());
+
+    return operationStateStore.list()
+        .stream()
+        .filter(instance -> opType.getClass().isAssignableFrom(instance.getOperation().getClass()))
+        .map(fi -> (OperationState<A, V>) fi)
+        .collect(Collectors.toList());
-  /**
-   * struct for holding information pertinent to a specific instance of an operation
-   *
-   * all fields are immutable, however note that {@link #setOperationEnded(Date)} completes
-   * {@link #getFutureOperationEnded()}
-   */
-  public static class OperationInstance<A extends ClusterManagementOperation<V>, V extends OperationResult>
-      implements Identifiable<String> {
-    private final CompletableFuture<V> future;
-    private final String opId;
-    private final A operation;
-    private final Date operationStart;
-    private final CompletableFuture<Date> futureOperationEnded;
-    private String operator;
-
-    public OperationInstance(CompletableFuture<V> future, String opId, A operation,
-        Date operationStart) {
-      this.future = future;
-      this.opId = opId;
-      this.operation = operation;
-      this.operationStart = operationStart;
-      this.futureOperationEnded = new CompletableFuture<>();
-    }
-
-    @Override
-    public String getId() {
-      return opId;
-    }
-
-    public CompletableFuture<V> getFutureResult() {
-      return future;
-    }
-
-    public A getOperation() {
-      return operation;
-    }
-
-    public Date getOperationStart() {
-      return operationStart;
-    }
-
-    public CompletableFuture<Date> getFutureOperationEnded() {
-      return futureOperationEnded;
-    }
-
-    public void setOperationEnded(Date operationEnded) {
-      this.futureOperationEnded.complete(operationEnded);
-    }
-
-    public String getOperator() {
-      return operator;
-    }
-
-    public void setOperator(String operator) {
-      this.operator = operator;
-    }
-  }

MOV26 MOV23 UPD40 UPD40 INS31 INS31 INS43 INS44 INS83 UPD74 MOV74 UPD42 INS78 INS83 MOV29 MOV83 MOV43 INS42 INS44 INS8 INS29 INS83 INS39 INS42 MOV44 INS44 INS44 INS8 INS83 UPD74 UPD42 UPD66 UPD66 UPD42 MOV42 UPD42 INS43 INS42 INS43 UPD43 UPD42 UPD43 INS42 UPD42 UPD74 INS41 INS74 INS42 MOV21 INS41 INS65 INS43 INS42 INS43 INS42 MOV21 UPD74 MOV74 INS42 INS32 INS42 INS42 UPD42 UPD42 UPD43 MOV43 INS27 MOV8 INS27 UPD66 MOV43 INS76 INS32 INS66 UPD42 MOV42 INS42 UPD43 INS42 INS42 INS34 UPD42 INS32 INS22 INS42 UPD74 MOV74 UPD42 UPD42 UPD42 INS42 INS33 INS32 UPD42 MOV42 INS42 INS42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 INS42 INS52 INS42 UPD43 UPD42 UPD42 UPD42 UPD42 MOV42 MOV42 UPD42 INS42 UPD42 UPD42 UPD74 MOV74 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 MOV32 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL34 DEL40 DEL39 DEL42 DEL43 DEL74 DEL14 DEL42 DEL42 DEL42 DEL42 DEL32 DEL83 DEL42 DEL32 DEL40 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL38 DEL9 DEL41 DEL83 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL42 DEL27 DEL41 DEL42 DEL42 DEL43 DEL74 DEL73 DEL42 DEL42 DEL43 DEL73 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL59 DEL42 DEL59 DEL42 DEL42 DEL14 DEL32 DEL86 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL66 DEL66 DEL42 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL42 DEL68 DEL65 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL73 DEL42 DEL42 DEL43 DEL73 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL55