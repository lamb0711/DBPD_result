Merge branch 'release/1.0.0-incubating.M1'

- * ========================================================================= 
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved. 
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- * =========================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.cache.DistributedPutAllOperation.PutAllMessage;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl.OldValueImporter;
+import com.gemstone.gemfire.internal.offheap.StoredObject;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
+  
+  /**
+   * @param deserializationPolicy must be one of the following: DESERIALIZATION_POLICY_NONE, DESERIALIZATION_POLICY_EAGER, DESERIALIZATION_POLICY_LAZY.
+   */
+  public static void writeValue(final byte deserializationPolicy, final Object vObj, final byte[] vBytes, final DataOutput out) throws IOException {
+    if (vObj != null) {
+      if (deserializationPolicy == DESERIALIZATION_POLICY_EAGER) {
+        // for DESERIALIZATION_POLICY_EAGER avoid extra byte array serialization
+        DataSerializer.writeObject(vObj, out);
+      } else if (deserializationPolicy == DESERIALIZATION_POLICY_NONE) {
+        // We only have NONE with a vObj when vObj is off-heap and not serialized.
+        StoredObject so = (StoredObject) vObj;
+        assert !so.isSerialized();
+        so.sendAsByteArray(out);
+      } else { // LAZY
+        // TODO OFFHEAP MERGE: cache the oldValue that is serialized here
+        // into the event
+        DataSerializer.writeObjectAsByteArray(vObj, out);
+      }
+    } else {
+      if (deserializationPolicy == DESERIALIZATION_POLICY_EAGER) {
+        // object is already in serialized form in the byte array.
+        // So just write the bytes to the stream.
+        // fromData will call readObject which will deserialize to object form.
+        out.write(vBytes);
+      } else {
+        DataSerializer.writeByteArray(vBytes, out);
+      }
+    }    
+  }
+  // static values for oldValueIsObject
+  public static final byte VALUE_IS_BYTES = 0;
+  public static final byte VALUE_IS_SERIALIZED_OBJECT = 1;
+  public static final byte VALUE_IS_OBJECT = 2;
+
+  /**
+   * Given a VALUE_IS_* constant convert and return the corresponding DESERIALIZATION_POLICY_*.
+   */
+  public static byte valueIsToDeserializationPolicy(boolean oldValueIsSerialized) {
+    if (!oldValueIsSerialized) return DESERIALIZATION_POLICY_NONE;
+    if (CachedDeserializableFactory.preferObject()) return DESERIALIZATION_POLICY_EAGER;
+    return DESERIALIZATION_POLICY_LAZY;
+  }
+
+            useMulticast = false; // bug #45106: can't mcast or the sender of the one-hop op will get it
-          useMulticast = false; // bug #45106: can't mcast or the sender of the one-hop op will get it
-      DirectReplyMessage, ReliableDistributionData {
+      DirectReplyMessage, ReliableDistributionData, OldValueImporter {
+	protected final static short FETCH_FROM_HDFS = 0x200;
+    
+    protected final static short IS_PUT_DML = 0x100;
+
-      Object val = event.getRawOldValue();
-      if (val == Token.NOT_AVAILABLE ||
-          val == Token.REMOVED_PHASE1 ||
-          val == Token.REMOVED_PHASE2 ||
-          val == Token.DESTROYED ||
-          val == Token.TOMBSTONE) {
-        return;
+      {
+        @Unretained Object val = event.getRawOldValue();
+        if (val == null ||
+            val == Token.NOT_AVAILABLE ||
+            val == Token.REMOVED_PHASE1 ||
+            val == Token.REMOVED_PHASE2 ||
+            val == Token.DESTROYED ||
+            val == Token.TOMBSTONE) {
+          return;
+        }
-      if (val instanceof CachedDeserializable) {
-        val = ((CachedDeserializable)val).getValue();
-      }
-      this.oldValue = val;
-      this.hasOldValue = true;
-      this.oldValueIsSerialized = (val instanceof byte[]);
+      event.exportOldValue(this);
+    
+    protected LocalRegion getLocalRegionForProcessing(DistributionManager dm) {
+      Assert.assertTrue(this.regionPath != null, "regionPath was null");
+      GemFireCacheImpl gfc = (GemFireCacheImpl)CacheFactory.getInstance(dm.getSystem());
+      return gfc.getRegionByPathForProcessing(this.regionPath);
+    }
-        Assert.assertTrue(this.regionPath != null, "regionPath was null");
-
-        GemFireCacheImpl gfc = (GemFireCacheImpl)CacheFactory.getInstance(dm
-            .getSystem());
-        final LocalRegion lclRgn = gfc
-            .getRegionByPathForProcessing(this.regionPath);
+        final LocalRegion lclRgn = getLocalRegionForProcessing(dm);
-      if (logger.isDebugEnabled()) {
-        logger.debug("DistributedCacheOperation.basicProcess: {}", this);
+      if (logger.isTraceEnabled()) {
+        logger.trace("DistributedCacheOperation.basicProcess: {}", this);
+        try {
+        } finally {
+          if (event instanceof EntryEventImpl) {
+            ((EntryEventImpl) event).release();
+          }
+        }
-        // below boolean is not strictly required, but this is for compatibility
-        // with SQLFire code which writes as byte here to indicate whether
-        // oldValue is an object, serialized object or byte[]
-        in.readByte();
+        byte b = in.readByte();
+        if (b == 0) {
+          this.oldValueIsSerialized = false;
+        } else if (b == 1) {
+          this.oldValueIsSerialized = true;
+        } else {
+          throw new IllegalStateException("expected 0 or 1");
+        }
-        this.oldValueIsSerialized = true;
+	  if (this instanceof PutAllMessage) {
+        ((PutAllMessage) this).setFetchFromHDFS((extBits & FETCH_FROM_HDFS) != 0);
+        ((PutAllMessage) this).setPutDML((extBits & IS_PUT_DML) != 0);
+      }
-        // below boolean is not strictly required, but this is for compatibility
-        // with SQLFire code which writes as byte here to indicate whether
-        // oldValue is an object, serialized object or byte[]
-        if (this.oldValueIsSerialized) {
-          DataSerializer.writeByteArray((byte[])this.oldValue, out);
+        final byte policy = valueIsToDeserializationPolicy(this.oldValueIsSerialized);
+        final Object vObj;
+        final byte[] vBytes;
+        if (!this.oldValueIsSerialized && this.oldValue instanceof byte[]) {
+          vObj = null;
+          vBytes = (byte[])this.oldValue;
+        } else {
+          vObj = this.oldValue;
+          vBytes = null;
-        else {
-          DataSerializer.writeObjectAsByteArray(this.oldValue, out);
-        }
+        writeValue(policy, vObj, vBytes, out);
+
+    @Override
+    public boolean prefersOldSerialized() {
+      return true;
+    }
+
+    @Override
+    public boolean isUnretainedOldReferenceOk() {
+      return true;
+    }
+
+    @Override
+    public boolean isCachedDeserializableValueOk() {
+      return false;
+    }
+
+    @Override
+    public void importOldObject(Object ov, boolean isSerialized) {
+      this.oldValueIsSerialized = isSerialized;
+      this.oldValue = ov;
+      this.hasOldValue = true;
+    }
+
+    @Override
+    public void importOldBytes(byte[] ov, boolean isSerialized) {
+      this.oldValueIsSerialized = isSerialized;
+      this.oldValue = ov;
+      this.hasOldValue = true;
+    }
+
+    protected final boolean _mayAddToMultipleSerialGateways(DistributionManager dm) {
+      int oldLevel = LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT); 
+      try {
+        LocalRegion lr = getLocalRegionForProcessing(dm);
+        if (lr == null) {
+          return false;
+        }
+        return lr.notifiesMultipleSerialGateways();
+      } catch (RuntimeException ignore) {
+        return false;
+      } finally {
+        LocalRegion.setThreadInitLevelRequirement(oldLevel);
+      }
+    }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS23 INS23 INS23 INS31 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS65 INS83 INS39 INS42 INS83 INS43 INS42 INS83 INS5 INS42 INS83 INS43 INS42 INS42 INS25 INS42 INS34 INS42 INS34 INS42 INS34 INS65 INS39 INS42 INS25 INS25 INS41 INS42 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS8 INS83 MOV43 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS66 INS42 INS39 INS85 INS42 INS27 INS8 INS8 INS66 INS38 INS41 INS32 INS41 INS42 INS42 INS34 INS42 INS34 MOV8 INS21 INS43 INS42 INS41 INS25 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS21 INS21 MOV21 INS42 INS5 INS42 INS39 INS42 INS21 INS21 INS21 INS43 INS42 INS60 INS54 INS42 INS33 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS32 INS42 MOV32 INS8 MOV27 INS8 INS9 INS9 INS9 INS42 INS7 INS7 INS39 INS85 INS7 INS7 INS7 INS42 INS39 INS59 INS8 INS12 INS8 INS27 INS8 INS25 INS27 INS8 INS8 INS78 INS42 INS42 INS52 MOV25 INS60 MOV21 MOV21 UPD42 INS54 INS60 INS25 MOV21 MOV25 INS60 INS60 INS60 INS25 INS21 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS9 INS42 INS32 INS60 INS25 INS41 INS44 INS8 INS21 INS42 INS42 INS21 INS27 INS8 INS8 INS42 INS42 INS21 INS21 INS42 INS83 INS43 INS59 INS8 INS8 INS39 INS59 INS27 INS8 INS25 INS62 INS83 INS39 INS59 INS83 INS43 INS59 INS83 MOV5 INS59 INS27 MOV8 MOV8 INS32 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS40 INS43 INS59 INS27 INS8 INS32 INS43 INS42 INS41 INS32 INS32 INS42 INS42 INS60 INS6 INS21 INS21 INS32 INS32 INS42 INS42 INS32 UPD42 MOV60 MOV25 MOV21 INS25 INS42 MOV32 INS42 INS34 MOV21 INS27 INS8 INS8 INS52 INS43 INS21 INS21 INS42 INS32 INS42 INS42 INS42 INS38 INS62 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS38 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS62 INS8 INS7 INS42 INS34 MOV21 INS53 INS42 INS32 INS32 INS42 INS22 MOV22 MOV22 INS5 INS7 INS7 INS7 INS7 INS42 INS42 INS9 INS42 INS42 INS11 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS43 INS21 MOV22 INS9 INS14 INS36 INS42 INS27 INS36 INS42 INS27 MOV52 MOV42 INS39 INS85 INS42 INS33 INS42 MOV11 INS42 MOV22 INS42 INS33 INS43 INS42 INS42 INS42 MOV21 INS27 MOV27 INS42 INS32 INS52 INS42 INS43 INS45 INS11 INS36 INS34 INS11 INS36 INS34 INS42 INS42 INS33 INS36 INS42 INS42 INS43 INS52 INS27 INS43 INS52 INS27 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21 DEL42 DEL62 DEL36 DEL7 DEL21 DEL83 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL25