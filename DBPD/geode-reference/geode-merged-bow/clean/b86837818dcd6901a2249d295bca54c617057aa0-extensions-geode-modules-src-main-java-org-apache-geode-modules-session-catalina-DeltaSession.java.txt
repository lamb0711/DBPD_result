GEODE-6875: Remove unused & deprecated API usage (#3813)

- Fixed warnings.
- Replaced deprecated API in Http Session.
- Replaced usage of internal API in Http Session.
- Removed unused classes and methods in Http Session.
-import java.util.Iterator;
-import org.apache.juli.logging.Log;
-import org.apache.juli.logging.LogFactory;
-  private final List<DeltaSessionAttributeEvent> eventQueue =
-      new ArrayList<DeltaSessionAttributeEvent>();
+  private final List<DeltaSessionAttributeEvent> eventQueue = new ArrayList<>();
-  private static Field cachedField = null;
-
-  private final Log LOG = LogFactory.getLog(DeltaSession.class.getName());
+  private static Field cachedField;
-  /**
-   * The string manager for this package.
-   */
-  // protected static StringManager STRING_MANAGER =
-  // StringManager.getManager("org.apache.geode.modules.session.catalina");
-        facade = (DeltaSessionFacade) AccessController.doPrivileged(new PrivilegedAction() {
-          @Override
-          public Object run() {
-            return new DeltaSessionFacade(fsession);
-          }
-        });
+        facade = (DeltaSessionFacade) AccessController.doPrivileged(
+            (PrivilegedAction) () -> new DeltaSessionFacade(fsession));
-      SerializablePrincipal sp = null;
+      SerializablePrincipal sp;
-        StringBuilder builder = new StringBuilder();
-        builder.append(this).append(
-            ": Serialized principal contains a byte[] that cannot be deserialized due to the following exception");
-        ((DeltaSessionManager) getManager()).getLogger().warn(builder.toString(), e);
+        String builder = this
+            + ": Serialized principal contains a byte[] that cannot be deserialized due to the following exception";
+        ((DeltaSessionManager) getManager()).getLogger().warn(builder, e);
-  protected Region<String, HttpSession> getOperatingRegion() {
+  private Region<String, HttpSession> getOperatingRegion() {
-  public boolean isCommitEnabled() {
+  private boolean isCommitEnabled() {
-  @SuppressWarnings("unchecked")
-        StringBuilder builder = new StringBuilder();
-        builder.append(this).append(": Attribute named ").append(name).append(
-            " contains a byte[] that cannot be deserialized due to the following exception");
-        ((DeltaSessionManager) getManager()).getLogger().warn(builder.toString(), e);
+        String builder = this + ": Attribute named " + name
+            + " contains a byte[] that cannot be deserialized due to the following exception";
+        ((DeltaSessionManager) getManager()).getLogger().warn(
+            builder, e);
-          List<DeltaSessionAttributeEvent> events = new ArrayList<DeltaSessionAttributeEvent>();
+          List<DeltaSessionAttributeEvent> events = new ArrayList<>();
-    List<DeltaSessionAttributeEvent> events = null;
+    List<DeltaSessionAttributeEvent> events;
-    ConcurrentHashMap map = (ConcurrentHashMap) DataSerializer.readObject(in);
+    ConcurrentHashMap map = DataSerializer.readObject(in);
-  protected Field getAttributesFieldObject() {
+  private Field getAttributesFieldObject() {
-  protected void logError(Exception e) {
+  private void logError(Exception e) {
-    for (Enumeration<String> e = getAttributeNames(); e.hasMoreElements();) {
-      // Don't use this.getAttribute() because we don't want to deserialize
-      // the value.
-      Object value = super.getAttribute(e.nextElement());
+    @SuppressWarnings("unchecked")
+    Enumeration<String> attributeNames = (Enumeration<String>) getAttributeNames();
+    while (attributeNames.hasMoreElements()) {
+      // Don't use this.getAttribute() because we don't want to deserialize the value.
+      Object value = super.getAttribute(attributeNames.nextElement());
-  protected Map<String, byte[]> getSerializedAttributes() {
+  private Map<String, byte[]> getSerializedAttributes() {
-    for (Iterator i = getAttributes().entrySet().iterator(); i.hasNext();) {
-      Map.Entry<String, Object> entry = (Map.Entry<String, Object>) i.next();
+    for (Object o : getAttributes().entrySet()) {
+      Map.Entry<String, Object> entry = (Map.Entry<String, Object>) o;
-      Map map = (Map) field.get(this);
-      return map;
+      return (Map) field.get(this);
-  protected byte[] serialize(Object obj) {
+  private byte[] serialize(Object obj) {
-      StringBuilder builder = new StringBuilder();
-      builder.append(this).append(": Object ").append(obj)
-          .append(" cannot be serialized due to the following exception");
-      ((DeltaSessionManager) getManager()).getLogger().warn(builder.toString(), e);
+      String builder = this + ": Object " + obj
+          + " cannot be serialized due to the following exception";
+      ((DeltaSessionManager) getManager()).getLogger().warn(
+          builder, e);
-    return new StringBuilder().append("DeltaSession[").append("id=").append(getId())
-        .append("; context=").append(this.contextName).append("; sessionRegionName=")
-        .append(this.sessionRegionName).append("; operatingRegionName=")
-        .append(getOperatingRegion() == null ? "unset" : getOperatingRegion().getFullPath())
-        .append("]").toString();
+    return "DeltaSession[" + "id=" + getId()
+        + "; context=" + this.contextName + "; sessionRegionName="
+        + this.sessionRegionName + "; operatingRegionName="
+        + (getOperatingRegion() == null ? "unset" : getOperatingRegion().getFullPath())
+        + "]";

UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS60 INS61 INS70 UPD74 MOV43 MOV79 INS74 INS59 INS32 MOV8 INS44 MOV32 MOV8 INS27 MOV32 INS43 INS43 UPD42 MOV42 INS11 UPD42 MOV42 MOV42 MOV43 INS42 INS27 MOV32 INS45 MOV22 INS45 MOV22 INS45 INS36 INS45 INS42 INS42 MOV74 MOV32 MOV43 MOV74 MOV11 INS60 INS45 INS45 MOV16 UPD43 MOV43 INS59 INS60 INS60 MOV74 INS42 UPD42 MOV42 INS27 MOV42 UPD43 MOV43 INS59 UPD43 MOV43 INS59 UPD42 INS52 INS45 INS42 INS45 UPD42 MOV42 INS27 MOV42 UPD42 MOV42 INS27 MOV42 INS11 INS52 INS45 INS52 INS45 INS42 INS45 MOV43 INS86 UPD74 MOV14 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL33 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL32 DEL59 DEL23 DEL42 DEL78 DEL83 DEL42 DEL41 DEL8 DEL31 DEL1 DEL14 DEL33 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL52 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL52 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL42 DEL43 DEL33 DEL42 DEL43 DEL11 DEL59 DEL58 DEL32 DEL24 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL52 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL42 DEL43 DEL14 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32