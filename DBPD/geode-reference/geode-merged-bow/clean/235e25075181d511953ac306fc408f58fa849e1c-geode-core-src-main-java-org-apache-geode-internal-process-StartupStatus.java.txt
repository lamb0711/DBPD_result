GEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-stores
+import java.util.function.Consumer;
+
-import org.apache.geode.annotations.internal.MakeNotStatic;
-/**
- * Extracted from LogWriterImpl and changed to static.
- */
-  private static final Logger logger = LogService.getLogger();
+  private static final Logger LOGGER = LogService.getLogger();
-  /** protected by static synchronized */
-  @MakeNotStatic
-  private static StartupStatusListener listener;
+  private final Consumer<String> logger;
-  private StartupStatus() {
-    // do nothing
+  public StartupStatus() {
+    this(LOGGER::info);
+  }
+
+  private StartupStatus(Consumer<String> logger) {
+    this.logger = logger;
-   *
-   * @since GemFire 7.0
-  public static synchronized void startup(final String msg, final Object... params) {
-    notNull(msg, "Invalid msgId '" + msg + "' specified");
+  public void startup(String message, Object... params) {
+    notNull(message, "Invalid message '" + message + "' specified");
-    String message = String.format(msg, params);
+    String formattedMessage = String.format(message, params);
+    StartupStatusListener listener = StartupStatusListenerRegistry.getStartupListener();
-      listener.setStatus(message);
+      listener.setStatus(formattedMessage);
-    logger.info(message);
-  }
-
-  public static synchronized void setListener(final StartupStatusListener listener) {
-    StartupStatus.listener = listener;
-  }
-
-  public static synchronized StartupStatusListener getStartupListener() {
-    return StartupStatus.listener;
-  }
-
-  public static synchronized void clearListener() {
-    StartupStatus.listener = null;
+    logger.accept(formattedMessage);

MOV26 UPD40 INS31 UPD83 INS74 INS83 INS42 INS8 INS44 UPD42 INS43 INS43 UPD42 INS17 INS74 INS42 INS21 INS43 INS42 INS60 INS42 UPD42 MOV42 INS90 INS43 MOV43 INS7 INS42 MOV43 INS59 INS42 INS42 INS42 INS22 INS42 UPD42 UPD42 INS42 INS32 UPD42 UPD42 INS52 INS42 UPD45 UPD42 UPD42 INS42 INS42 UPD42 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL42 DEL78 DEL43 DEL66 DEL65 DEL83 DEL83 DEL83 DEL42 DEL83 DEL83 DEL83 DEL83 DEL39 DEL42 DEL83 DEL42 DEL44 DEL40 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL83 DEL83 DEL83 DEL39 DEL42 DEL40 DEL33 DEL7 DEL21 DEL8 DEL31