Merge branch 'release/1.3.0'

+import org.apache.geode.internal.lang.SystemUtils;
+
-  protected Map<String, String> oplogLineMap = new HashMap<String, String>();
+  final Map<String, String> oplogLineMap = new HashMap<>();
-  protected Set<String> oplogFileNames = new HashSet<String>();
+  final Set<String> oplogFileNames = new HashSet<>();
-  protected File backupDir = null;
+  private final File backupDir;
-  public static BackupInspector createInspector(File backupDir) throws IOException {
-    if (isWindows()) {
+  public static BackupInspector createInspector(final File backupDir) throws IOException {
+    if (SystemUtils.isWindows()) {
-  public BackupInspector(File backupDir) throws IOException {
-    this.backupDir = backupDir;
-
+  BackupInspector(final File backupDir) throws IOException {
-    File restoreFile = getRestoreFile(backupDir);
+    this.backupDir = backupDir;
+    File restoreFile = getRestoreFile(backupDir);
-    BufferedReader reader = null;
-
-    try {
-      reader = new BufferedReader(new FileReader(restoreFile));
+    try (BufferedReader reader = new BufferedReader(new FileReader(restoreFile))) {
-    } finally {
-      if (null != reader) {
-        reader.close();
-      }
-   * Searches for the incremental backup marker.
+   * Searches for the incremental backup marker and parses the incremental portion.
-   * @throws IOException
-  private void parseRestoreFile(BufferedReader reader) throws IOException {
+  private void parseRestoreFile(final BufferedReader reader) throws IOException {
-    String line = null;
-    String incrementalMarker = getIncrementalMarker();
+    String line = null;
-      markerFound = line.startsWith(incrementalMarker);
+      markerFound = line.contains(RestoreScript.INCREMENTAL_MARKER_COMMENT);
-   * @return true if the host operating system is windows.
-   */
-  public static boolean isWindows() {
-    return (System.getProperty("os.name").indexOf("Windows") != -1);
-  }
-
-  /**
-  public String getScriptLineForOplogFile(String oplogFileName) {
+  public String getScriptLineForOplogFile(final String oplogFileName) {
-   * @return the incremental marke contained in the backup restore script.
-   */
-  protected abstract String getIncrementalMarker();
-
-  /**
-  public abstract String getCopyToForOplogFile(String oplogFileName);
+  public abstract String getCopyToForOplogFile(final String oplogFileName);
-  public abstract String getCopyFromForOplogFile(String oplogFileName);
+  public abstract String getCopyFromForOplogFile(final String oplogFileName);
-   * @throws IOException
-  protected abstract void parseOplogLines(BufferedReader reader) throws IOException;
-}
-
-
-/**
- * A BackupInspector for the Windows platform(s).
- *
- */
-class WindowsBackupInspector extends BackupInspector {
-  /**
-   * When found indicates that the restore script was produced from an incremental backup.
-   */
-  private static final String INCREMENTAL_MARKER = "rem Incremental backup";
-
-  /**
-   * Restore file for windows platform.
-   */
-  static final String RESTORE_FILE = "restore.bat";
-
-  WindowsBackupInspector(File backupDir) throws IOException {
-    super(backupDir);
-  }
-
-  @Override
-  public String getCopyFromForOplogFile(String oplogFileName) {
-    String copyFrom = null;
-    String line = this.oplogLineMap.get(oplogFileName);
-
-    if (null != line) {
-      String[] parts = line.split("\\s");
-      copyFrom = parts[1].substring(1, parts[1].length() - 1) + File.separator + parts[3];
-    }
-
-    return copyFrom;
-  }
-
-  @Override
-  public String getCopyToForOplogFile(String oplogFileName) {
-    String copyTo = null;
-    String line = this.oplogLineMap.get(oplogFileName);
-
-    if (null != line) {
-      String[] parts = line.split("\\s");
-      copyTo = parts[2].substring(1, parts[2].length() - 1) + File.separator + parts[3];
-    }
-
-    return copyTo;
-  }
-
-  @Override
-  /**
-   * Parses out operation log data from the incremental backup portion of the restore script.
-   * 
-   * @param reader restore file reader.
-   * @throws IOException
-   */
-  protected void parseOplogLines(BufferedReader reader) throws IOException {
-    String line = null;
-
-    int beginIndex, endIndex;
-    String oplogName = "";
-    while (null != (line = reader.readLine())) {
-
-      if (line.startsWith("robocopy")) {
-        beginIndex = line.lastIndexOf("\"") + 2;
-        endIndex = line.indexOf("/njh", beginIndex) - 1;
-        oplogName = line.substring(beginIndex, endIndex);
-        this.oplogFileNames.add(oplogName);
-        this.oplogLineMap.put(oplogName, line);
-      } else if (line.startsWith("IF")) {
-        continue;
-      } else if (line.contains(RestoreScript.EXIT_MARKER)) {
-        break;
-      }
-    }
-  }
-
-  @Override
-  protected String getIncrementalMarker() {
-    return INCREMENTAL_MARKER;
-  }
-
-  @Override
-  protected File getRestoreFile(final File backupDir) {
-    return new File(backupDir, RESTORE_FILE);
-  }
-}
-
-
-/**
- * A BackupInspector for Unix platforms.
- */
-class UnixBackupInspector extends BackupInspector {
-  /**
-   * When found indicates that the restore script was produced from an incremental backup.
-   */
-  private static final String INCREMENTAL_MARKER = "#Incremental backup";
-
-  /**
-   * Restore file for windows platform.
-   */
-  static final String RESTORE_FILE = "restore.sh";
-
-  UnixBackupInspector(File backupDir) throws IOException {
-    super(backupDir);
-  }
-
-  @Override
-  public String getCopyFromForOplogFile(String oplogFileName) {
-    String copyFrom = null;
-    String line = this.oplogLineMap.get(oplogFileName);
-
-    if (null != line) {
-      String[] parts = line.split("\\s");
-      copyFrom = parts[2].substring(1, parts[2].length() - 1);
-    }
-
-    return copyFrom;
-  }
-
-  @Override
-  public String getCopyToForOplogFile(String oplogFileName) {
-    String copyTo = null;
-    String line = this.oplogLineMap.get(oplogFileName);
-
-    if (null != line) {
-      String[] parts = line.split("\\s");
-      copyTo = parts[3].substring(1, parts[3].length() - 1);
-    }
-
-    return copyTo;
-  }
-
-  @Override
-  /**
-   * Parses out operation log data from the incremental backup portion of the restore script.
-   * 
-   * @param reader restore file reader.
-   * @throws IOException
-   */
-  protected void parseOplogLines(BufferedReader reader) throws IOException {
-    String line = null;
-
-    while (null != (line = reader.readLine())) {
-      int beginIndex = line.lastIndexOf(File.separator) + 1;
-      int endIndex = line.length() - 1;
-      String oplogName = line.substring(beginIndex, endIndex);
-      this.oplogFileNames.add(oplogName);
-      this.oplogLineMap.put(oplogName, line);
-    }
-  }
-
-  @Override
-  protected String getIncrementalMarker() {
-    return INCREMENTAL_MARKER;
-  }
-
-  @Override
-  protected File getRestoreFile(final File backupDir) {
-    return new File(backupDir, RESTORE_FILE);
-  }
+  protected abstract void parseOplogLines(final BufferedReader reader) throws IOException;

INS26 INS40 UPD83 UPD83 UPD83 INS83 MOV21 MOV83 MOV43 MOV42 MOV83 MOV43 MOV42 INS83 INS83 MOV43 INS83 MOV43 INS83 INS83 UPD74 UPD74 MOV42 INS58 INS8 UPD66 INS42 MOV43 INS59 MOV21 INS42 MOV14 UPD42 INS40 DEL42 DEL43 DEL33 DEL83 DEL42 DEL33 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL33 DEL42 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL65 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL34 DEL38 DEL27 DEL36 DEL41 DEL8 DEL31 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL31 DEL42 DEL43 DEL42 DEL65 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL46 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL2 DEL42 DEL34 DEL42 DEL34 DEL2 DEL42 DEL32 DEL34 DEL27 DEL32 DEL40 DEL42 DEL34 DEL2 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL2 DEL42 DEL34 DEL42 DEL34 DEL2 DEL42 DEL32 DEL34 DEL27 DEL32 DEL40 DEL42 DEL34 DEL2 DEL27 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL59 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL45 DEL59 DEL60 DEL33 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL27 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL34 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL34 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL18 DEL8 DEL42 DEL42 DEL40 DEL32 DEL10 DEL8 DEL25 DEL25 DEL25 DEL8 DEL61 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL55 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL46 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL2 DEL42 DEL34 DEL42 DEL34 DEL2 DEL42 DEL32 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL2 DEL42 DEL34 DEL42 DEL34 DEL2 DEL42 DEL32 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL33 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL27 DEL39 DEL42 DEL42 DEL42 DEL40 DEL32 DEL34 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL55