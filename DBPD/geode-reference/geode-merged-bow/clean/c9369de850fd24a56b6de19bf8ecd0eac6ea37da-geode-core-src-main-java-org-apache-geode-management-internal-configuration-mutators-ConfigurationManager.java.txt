GEODE-7398:  Ability: show jar deployment info in REST API for Manageâ€¦ (#4374)

Co-authored-by: Darrel Schneider <dschneider@pivotal.io>

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements. See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License. You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.distributed.internal.InternalConfigurationPersistenceService;
- * Defines the behavior to mutate a configuration change into a pre-existing cache config from a
- * locator
- * {@link org.apache.geode.distributed.ConfigurationPersistenceService}. Created with an object of
- * type {@link CacheElement}, which represents the configuration change.
+ * Defines the behavior to mutate a configuration change into a pre-existing cache config
-  /**
-   * specify how to add the config to the existing cache config. Note at this point, the config
-   * should have passed all the validations already.
-   */
-  void add(T config, CacheConfig existing);
-
-  void update(T config, CacheConfig existing);
-
-  void delete(T config, CacheConfig existing);
-
-  List<T> list(T filterConfig, CacheConfig existing);
-
-  T get(String id, CacheConfig existing);
-   * @param incoming the one that's about to be persisted
-   * @param group the group name of the existing cache element
-   * @param existing the existing cache element on another group
-   * @throws IllegalArgumentException if the incoming CacheElement is not compatible with the
-   *         existing
-   *
-   *         Note: incoming and exiting should have the same ID already
+   * specify how to add the config to the existing group of cluster configuration
-  default void checkCompatibility(T incoming, String group, T existing) {};
+  boolean add(InternalConfigurationPersistenceService service, T config, String groupName);
+
+  boolean delete(InternalConfigurationPersistenceService service, T config, String groupName);
+
+  boolean update(InternalConfigurationPersistenceService service, T config, String groupName);
+
+  List<T> list(InternalConfigurationPersistenceService service, T filterConfig, String groupName);

MOV31 UPD40 INS31 INS31 MOV44 MOV29 UPD39 MOV39 MOV42 MOV44 MOV44 MOV44 UPD39 MOV39 MOV42 MOV44 MOV44 MOV44 UPD39 UPD42 MOV44 INS44 UPD66 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 INS43 INS42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 DEL66 DEL40 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL31 DEL39 DEL42 DEL31 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL44 DEL8