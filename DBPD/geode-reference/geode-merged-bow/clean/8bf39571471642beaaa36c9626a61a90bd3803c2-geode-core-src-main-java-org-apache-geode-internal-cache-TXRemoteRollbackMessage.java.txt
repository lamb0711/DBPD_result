Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  public TXRemoteRollbackMessage() {
+
+  public TXRemoteRollbackMessage() {}
+
+  public TXRemoteRollbackMessage(int txUniqId, InternalDistributedMember onBehalfOfClientMember,
+      ReplyProcessor21 processor) {
+    super(txUniqId, onBehalfOfClientMember, processor);
-  public TXRemoteRollbackMessage(int txUniqId,InternalDistributedMember onBehalfOfClientMember, ReplyProcessor21 processor) {
-    super(txUniqId,onBehalfOfClientMember, processor);
-  }
-
-  public static ReliableReplyProcessor21 send(Cache cache,
-      int txUniqId,InternalDistributedMember onBehalfOfClientMember, DistributedMember recipient) {
-    final InternalDistributedSystem system = 
-                    (InternalDistributedSystem)cache.getDistributedSystem();
+  public static ReliableReplyProcessor21 send(Cache cache, int txUniqId,
+      InternalDistributedMember onBehalfOfClientMember, DistributedMember recipient) {
+    final InternalDistributedSystem system =
+        (InternalDistributedSystem) cache.getDistributedSystem();
-    ReliableReplyProcessor21 response = 
-                    new ReliableReplyProcessor21(system, recipients);
-    TXRemoteRollbackMessage msg = new TXRemoteRollbackMessage(txUniqId,onBehalfOfClientMember, response);
+    ReliableReplyProcessor21 response = new ReliableReplyProcessor21(system, recipients);
+    TXRemoteRollbackMessage msg =
+        new TXRemoteRollbackMessage(txUniqId, onBehalfOfClientMember, response);
-  protected boolean operateOnTx(TXId txId,DistributionManager dm) {
+  protected boolean operateOnTx(TXId txId, DistributionManager dm) {
-      throw new CacheClosedException(LocalizedStrings.CacheFactory_A_CACHE_HAS_NOT_YET_BEEN_CREATED.toLocalizedString());
+      throw new CacheClosedException(
+          LocalizedStrings.CacheFactory_A_CACHE_HAS_NOT_YET_BEEN_CREATED.toLocalizedString());

