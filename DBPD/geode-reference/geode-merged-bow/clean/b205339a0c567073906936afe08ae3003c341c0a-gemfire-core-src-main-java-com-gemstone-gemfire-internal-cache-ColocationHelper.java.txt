Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import com.gemstone.gemfire.internal.logging.log4j.LocalizedMessage;
+
+  /** Logging mechanism for debugging */
-  
+   /**
+    * An utility method to retrieve colocated region name of a given partitioned
+    * region without waiting on initialize
+    *
+    * @param partitionedRegion
+    * @return colocated PartitionedRegion
+    * @since cheetah
+    */
+  public static PartitionedRegion getColocatedRegionName(
+      final PartitionedRegion partitionedRegion) {
+    Assert.assertTrue(partitionedRegion != null); // precondition1
+    String colocatedWith = partitionedRegion.getPartitionAttributes().getColocatedWith();
+    if (colocatedWith == null) {
+      // the region is not colocated with any region
+      return null;
+    }
+    PartitionedRegion colocatedPR = partitionedRegion.getColocatedWithRegion();
+    if (colocatedPR != null && !colocatedPR.isLocallyDestroyed
+        && !colocatedPR.isDestroyed()) {
+      return colocatedPR;
+    }
+    Region prRoot = PartitionedRegionHelper.getPRRoot(partitionedRegion
+        .getCache());
+    PartitionRegionConfig prConf = (PartitionRegionConfig)prRoot
+        .get(getRegionIdentifier(colocatedWith));
+    int prID = -1; 
+    try {
+      if (prConf == null) {
+        colocatedPR = getColocatedPR(partitionedRegion, colocatedWith);
+      }
+      else {
+        prID = prConf.getPRId();
+        colocatedPR = PartitionedRegion.getPRFromId(prID);
+        if (colocatedPR == null && prID > 0) {
+          // colocatedPR might have not called registerPartitionedRegion() yet, but since prID is valid,
+          // we are able to get colocatedPR and do colocatedPR.waitOnBucketMetadataInitialization()
+          colocatedPR = getColocatedPR(partitionedRegion, colocatedWith);
+        }
+      }
+    }
+    catch (PRLocallyDestroyedException e) {
+      if (logger.isDebugEnabled()) {
+        logger.debug("PRLocallyDestroyedException : Region with prId=" + prID
+            + " is locally destroyed on this node", e);
+      } 
+    } 
+    return colocatedPR;
+  }
+    private static PartitionedRegion getColocatedPR(
+      final PartitionedRegion partitionedRegion, final String colocatedWith) {
+    logger.info(LocalizedMessage.create(
+        LocalizedStrings.HOPLOG_0_COLOCATE_WITH_REGION_1_NOT_INITIALIZED_YET,
+        new Object[] { partitionedRegion.getFullPath(), colocatedWith }));
+    PartitionedRegion colocatedPR = (PartitionedRegion) partitionedRegion
+        .getCache().getPartitionedRegion(colocatedWith, false);
+    assert colocatedPR != null;
+    return colocatedPR;
+  }
+  // Gemfirexd will skip initialization for PR, so just get region name without waitOnInitialize
+  public static PartitionedRegion getLeaderRegionName(PartitionedRegion prRegion) {
+    PartitionedRegion parentRegion;
+    
+    while((parentRegion = getColocatedRegionName(prRegion)) != null) {
+      prRegion = parentRegion;
+    } 
+      
+    return prRegion;
+  }
+

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS29 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS65 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS21 INS60 INS25 INS60 INS25 INS60 INS60 INS60 INS54 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS21 INS60 INS6 INS41 INS42 INS43 INS42 INS60 INS61 INS41 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS32 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS39 INS59 INS8 INS12 INS42 INS42 INS42 INS32 INS43 INS59 INS27 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS32 INS27 INS38 INS41 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS38 INS25 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS33 INS42 INS42 INS36 INS33 INS21 INS42 INS33 INS32 INS42 INS33 INS42 INS42 INS27 INS38 INS32 INS42 INS42 INS42 INS32 INS43 INS32 INS34 INS27 INS8 INS8 INS43 INS42 INS25 INS42 INS42 INS40 INS3 INS43 INS32 INS7 INS7 INS42 INS42 INS42 INS33 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS25 INS42 INS32 INS8 INS5 INS4 INS42 INS32 INS42 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS7 INS7 INS27 INS8 INS42 INS42 INS21 INS43 INS85 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS27 INS27 INS21 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS34 INS7 INS42 INS42 INS27 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS42