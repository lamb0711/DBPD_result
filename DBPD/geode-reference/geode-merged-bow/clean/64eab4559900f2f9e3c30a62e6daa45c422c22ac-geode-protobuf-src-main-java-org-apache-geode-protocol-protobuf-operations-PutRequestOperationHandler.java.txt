GEODE-3213: Refactor ProtoBuf handler flow. This now closes #646

Signed-off-by: Alexander Murmann <amurmann@pivotal.io>

-import org.apache.geode.protocol.protobuf.*;
-import org.apache.geode.protocol.protobuf.utilities.ProtobufResponseUtilities;
+import org.apache.geode.protocol.protobuf.BasicTypes;
+import org.apache.geode.protocol.protobuf.ClientProtocol;
+import org.apache.geode.protocol.protobuf.Failure;
+import org.apache.geode.protocol.protobuf.RegionAPI;
+import org.apache.geode.protocol.protobuf.Result;
+import org.apache.geode.protocol.protobuf.Success;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-    implements OperationHandler<ClientProtocol.Request, ClientProtocol.Response> {
-  private static Logger logger = LogManager.getLogger();
+    implements OperationHandler<RegionAPI.PutRequest, RegionAPI.PutResponse> {
-  public ClientProtocol.Response process(SerializationService serializationService,
-      ClientProtocol.Request request, Cache cache) {
-    if (request.getRequestAPICase() != ClientProtocol.Request.RequestAPICase.PUTREQUEST) {
-      return ProtobufResponseUtilities
-          .createAndLogErrorResponse("Improperly formatted put request message.", logger, null);
-    }
-    RegionAPI.PutRequest putRequest = request.getPutRequest();
-
-    String regionName = putRequest.getRegionName();
+  public Result<RegionAPI.PutResponse> process(SerializationService serializationService,
+      RegionAPI.PutRequest request, Cache cache) {
+    String regionName = request.getRegionName();
-      return ProtobufResponseUtilities.createAndLogErrorResponse(
-          "Region passed by client did not exist: " + regionName, logger, null);
+      return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
+          .setMessage("Region passed by client did not exist: " + regionName).build());
-      BasicTypes.Entry entry = putRequest.getEntry();
+      BasicTypes.Entry entry = request.getEntry();
-        return ProtobufResponseUtilities.createPutResponse();
+        return Success.of(RegionAPI.PutResponse.newBuilder().build());
-        return ProtobufResponseUtilities
-            .createAndLogErrorResponse("invalid key or value type for region " + regionName
-                + ",passed key: " + entry.getKey().getEncodingType() + " value: "
-                + entry.getValue().getEncodingType(), logger, ex);
+        return Failure.of(ClientProtocol.ErrorResponse.newBuilder()
+            .setMessage("invalid key or value type for region " + regionName + ",passed key: "
+                + entry.getKey().getEncodingType() + " value: "
+                + entry.getValue().getEncodingType())
+            .build());
-      return ProtobufResponseUtilities.createAndLogErrorResponse("encoding not supported ", logger,
-          ex);
+      return Failure
+          .of(ClientProtocol.ErrorResponse.newBuilder().setMessage(ex.getMessage()).build());
-      return ProtobufResponseUtilities
-          .createAndLogErrorResponse("codec error in protobuf deserialization ", logger, ex);
+      return Failure
+          .of(ClientProtocol.ErrorResponse.newBuilder().setMessage(ex.getMessage()).build());

MOV26 MOV26 INS26 INS26 INS40 INS40 UPD40 UPD40 UPD40 UPD40 UPD74 UPD43 UPD43 INS74 UPD40 UPD40 INS43 INS43 MOV43 INS42 UPD40 MOV40 UPD42 UPD42 UPD42 INS32 INS32 INS42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 INS32 INS32 INS42 MOV27 UPD42 UPD42 INS32 INS32 INS32 INS42 INS32 INS42 INS40 UPD42 MOV42 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS40 INS42 MOV32 MOV27 INS42 INS40 UPD42 MOV42 MOV42 INS42 INS40 UPD42 MOV42 MOV42 INS42 INS32 UPD42 INS40 UPD42 MOV42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL43 DEL40 DEL43 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL45 DEL42 DEL33 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL33 DEL42 DEL42 DEL45 DEL45