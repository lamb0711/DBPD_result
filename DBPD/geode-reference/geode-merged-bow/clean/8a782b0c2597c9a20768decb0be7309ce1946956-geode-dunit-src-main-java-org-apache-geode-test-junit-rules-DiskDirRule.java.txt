GEODE-6033: Support dynamic VMs in DistributedDiskDirRule

* Create tests for DiskDirRule and DistributedDiskDirRule.
* Fix a couple minor issues found by testing DiskDirRule.
* Make DistributedDiskDirRule support create and bounce VMs.

-import java.lang.reflect.InvocationTargetException;
-@SuppressWarnings("unused")
+/**
+ * JUnit Rule that overrides the default DiskDirs directory. Internally, TemporaryFolder and
+ * TestName are used by this rule to define the directory locations and names.
+ *
+ * <p>
+ * Using DiskDirRule will produce a unique DiskDir such as:
+ *
+ * <pre>
+ * /var/folders/28/m__9dv1906n60kmz7t71wm680000gn/T/junit2791461987256197453/org.apache.geode.test.junit.rules.DiskDirRuleIntegrationTest_diskDirPathContainsTestClassName-diskDirs
+ * </pre>
+ *
+ * <p>
+ * Example of test using DiskDirRule:
+ *
+ * <pre>
+ * public class PersistentRegionIntegrationTest {
+ *
+ *   {@literal @}Rule
+ *   public DiskDirRule diskDirRule = new DiskDirRule();
+ * </pre>
+ */
-  protected final boolean initializeHelperRules;
-
-    this(new Builder());
+    this(new TemporaryFolder(), new TestName());
-  public DiskDirRule(TemporaryFolder temporaryFolder) {
-    this(new Builder().temporaryFolder(temporaryFolder));
-  }
-
-  public DiskDirRule(TestName testName) {
-    this(new Builder().testName(testName));
-  }
-
-  public DiskDirRule(TemporaryFolder temporaryFolder, TestName testName) {
-    this(new Builder().temporaryFolder(temporaryFolder).testName(testName));
-  }
-
-  public DiskDirRule(Builder builder) {
-    this(builder.initializeHelperRules, builder.temporaryFolder, builder.testName);
-  }
-
-  protected DiskDirRule(boolean initializeHelperRules, TemporaryFolder temporaryFolder,
-      TestName testName) {
-    this.initializeHelperRules = initializeHelperRules;
+  protected DiskDirRule(TemporaryFolder temporaryFolder, TestName testName) {
+  /**
+   * Returns the current default disk dirs value.
+   */
+  public File getDiskDir() {
+    return new File(System.getProperty(GEODE_PREFIX + DEFAULT_DISK_DIRS_PROPERTY));
+  }
+
-    if (initializeHelperRules) {
-      initializeHelperRules(description);
-    }
+    initializeHelperRules(description);
-    File diskDir =
-        temporaryFolder.newFolder(getDiskDirName(getDiskDirName(description.getClassName())));
+    File diskDir = temporaryFolder.newFolder(getDiskDirName(description.getClassName()));
-  protected void initializeHelperRules(Description description) throws Exception {
-    if (temporaryFolder != null) {
-      Method method = TemporaryFolder.class.getDeclaredMethod(BEFORE);
-      method.setAccessible(true);
-      method.invoke(temporaryFolder);
-    }
-
-    if (testName != null) {
-      Method method = TestName.class.getDeclaredMethod(STARTING, Description.class);
-      method.setAccessible(true);
-      method.invoke(testName, description);
-    }
-  }
-
-  protected String getDiskDirName(String testClass) {
-    return testClass + "_" + testName.getMethodName() + "-diskDirs";
-  }
-
-  protected void invokeTemporaryFolderBefore(TemporaryFolder temporaryFolder) {
+  private String getDiskDirName(String testClass) {
+    return testClass + "_" + testName.getMethodName() + "-diskDirs";
+  }
+
+  private void initializeHelperRules(Description description) throws Exception {
-      invoke(TemporaryFolder.class, temporaryFolder, BEFORE);
-    }
-  }
-
-  protected void invokeTestNameBefore(TestName testName) {
-    if (testName != null) {
-      invoke(TestName.class, testName, BEFORE);
-    }
-  }
-
-  protected <V> V invoke(Class<?> targetClass, Object targetInstance, String methodName) {
-    try {
-      Method method = targetClass.getDeclaredMethod(methodName);
+      Method method = TemporaryFolder.class.getDeclaredMethod(BEFORE);
-      return (V) method.invoke(targetInstance);
-    } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
-      throw new Error(e);
-    }
-  }
-
-  /**
-   * Builds an instance of DiskDirRule
-   */
-  public static class Builder {
-    private boolean initializeHelperRules = true;
-    private TemporaryFolder temporaryFolder = new TemporaryFolder();
-    private TestName testName = new TestName();
-
-    public Builder() {
-      // nothing
+      method.invoke(temporaryFolder);
-    /**
-     * Specify false to disable initializing TemporaryFolder and TestName during DiskDirRule
-     * initialization. If this is enabled then do NOT annotate these helper rules in the test or
-     * combine them with RuleChain or RuleList. Default value is true.
-     */
-    public Builder initializeHelperRules(boolean value) {
-      initializeHelperRules = value;
-      return this;
-    }
-
-    public Builder temporaryFolder(TemporaryFolder temporaryFolder) {
-      this.temporaryFolder = temporaryFolder;
-      return this;
-    }
-
-    public Builder testName(TestName testName) {
-      this.testName = testName;
-      return this;
-    }
-
-    public DiskDirRule build() {
-      return new DiskDirRule(this);
+    if (testName != null) {
+      Method method = TestName.class.getDeclaredMethod(STARTING, Description.class);
+      method.setAccessible(true);
+      method.invoke(testName, description);

MOV31 MOV31 INS29 INS31 INS65 MOV44 MOV44 MOV8 INS29 INS83 INS43 UPD42 MOV42 INS8 UPD83 UPD83 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 MOV21 MOV65 UPD42 MOV42 INS41 MOV21 INS66 MOV14 MOV14 UPD66 INS14 INS43 INS32 MOV32 UPD42 MOV42 INS42 INS42 INS27 UPD42 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL45 DEL79 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL43 DEL14 DEL83 DEL42 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL17 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL17 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL17 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL40 DEL40 DEL40 DEL17 DEL8 DEL31 DEL52 DEL41 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL42 DEL8 DEL25 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL29 DEL83 DEL83 DEL42 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL52 DEL14 DEL41 DEL8 DEL31 DEL55