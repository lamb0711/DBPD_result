GEODE-7851: Pulse Oauth Support (#4936)

* GEODE-7851: Pulse Oauth Support

- create an OauthSecurityConfig to configure spring using oauth
- add PULSE as an oauth-enabled-component, and if pulse is set to use
  oauth, set the OauthSecurityConfig as the active security profile
- use pulse.properties in the locator's working dir to externalize pulse
  authentication provider configuration

Co-authored-by: Dale Emery <demery@pivotal.io>
Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.function.BiFunction;
-import javax.servlet.ServletContextEvent;
-import javax.servlet.ServletContextListener;
+import javax.servlet.ServletContext;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.ApplicationEvent;
+import org.springframework.context.ApplicationListener;
+import org.springframework.context.event.ContextClosedEvent;
+import org.springframework.context.event.ContextRefreshedEvent;
+import org.springframework.stereotype.Component;
+import org.springframework.web.context.WebApplicationContext;
- *
-// @WebListener
-public class PulseAppListener implements ServletContextListener {
+@Component
+public class PulseAppListener implements ApplicationListener<ApplicationEvent> {
-  private final BiFunction<String, ResourceBundle, Properties> propertiesFileLoader;
+  private final PropertiesFileLoader propertiesFileLoader;
+  private final PulseController pulseController;
-  public PulseAppListener() {
-    this(Boolean.getBoolean(PulseConstants.SYSTEM_PROPERTY_PULSE_EMBEDDED), Repository.get(),
-        PulseAppListener::loadPropertiesFromFile);
+  @Autowired
+  public PulseAppListener(PulseController pulseController, Repository repository,
+      PropertiesFileLoader propertiesLoader) {
+    this(Boolean.getBoolean(PulseConstants.SYSTEM_PROPERTY_PULSE_EMBEDDED),
+        propertiesLoader, pulseController, repository);
-  public PulseAppListener(boolean isEmbedded, Repository repository,
-      BiFunction<String, ResourceBundle, Properties> propertiesFileLoader) {
+  public PulseAppListener(boolean isEmbedded, PropertiesFileLoader propertiesFileLoader,
+      PulseController pulseController, Repository repository) {
-    this.repository = repository;
-    this.resourceBundle = repository.getResourceBundle();
+    this.pulseController = pulseController;
+    this.repository = repository;
+    resourceBundle = repository.getResourceBundle();
-  public void contextDestroyed(ServletContextEvent event) {
-
-    // Stop all running threads those are created in Pulse
-    // Stop cluster threads
-    repository.removeAllClusters();
-
-    logger.info("{}{}", resourceBundle.getString("LOG_MSG_CONTEXT_DESTROYED"),
-        event.getServletContext().getContextPath());
+  public void onApplicationEvent(ApplicationEvent event) {
+    if (event instanceof ContextRefreshedEvent) {
+      contextInitialized((ContextRefreshedEvent) event);
+    } else if (event instanceof ContextClosedEvent) {
+      contextDestroyed((ContextClosedEvent) event);
+    }
-  @Override
-  public void contextInitialized(ServletContextEvent event) {
+  public void contextInitialized(ContextRefreshedEvent event) {
-    // Load Pulse version details
-          Boolean.valueOf(System.getProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_USESSL_MANAGER)));
+          Boolean.parseBoolean(
+              System.getProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_USESSL_MANAGER)));
-          Boolean.valueOf(System.getProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_USESSL_LOCATOR)));
+          Boolean.parseBoolean(
+              System.getProperty(PulseConstants.SYSTEM_PROPERTY_PULSE_USESSL_LOCATOR)));
+
+      WebApplicationContext applicationContext =
+          (WebApplicationContext) event.getApplicationContext();
+      ServletContext servletContext = applicationContext.getServletContext();
-          event.getServletContext().getAttribute(GEODE_SSLCONFIG_SERVLET_CONTEXT_PARAM);
+          servletContext.getAttribute(GEODE_SSLCONFIG_SERVLET_CONTEXT_PARAM);
-          propertiesFileLoader.apply(PulseConstants.PULSE_PROPERTIES_FILE, resourceBundle);
+          propertiesFileLoader.loadProperties(PulseConstants.PULSE_PROPERTIES_FILE, resourceBundle);
-      repository.setUseSSLManager(Boolean.valueOf(pulseProperties
+      repository.setUseSSLManager(Boolean.parseBoolean(pulseProperties
-      repository.setUseSSLLocator(Boolean.valueOf(pulseProperties
+      repository.setUseSSLLocator(Boolean.parseBoolean(pulseProperties
-          propertiesFileLoader.apply(PulseConstants.PULSE_SECURITY_PROPERTIES_FILE, resourceBundle);
+          propertiesFileLoader
+              .loadProperties(PulseConstants.PULSE_SECURITY_PROPERTIES_FILE, resourceBundle);
-  // Function to load pulse version details from properties file
-  private void loadPulseVersionDetails() {
-    Properties properties =
-        propertiesFileLoader.apply(PulseConstants.PULSE_VERSION_PROPERTIES_FILE, resourceBundle);
-    // Set pulse version details in common object
-    PulseController.pulseVersion
-        .setPulseVersion(properties.getProperty(PulseConstants.PROPERTY_PULSE_VERSION, ""));
-    PulseController.pulseVersion
-        .setPulseBuildId(properties.getProperty(PulseConstants.PROPERTY_BUILD_ID, ""));
-    PulseController.pulseVersion
-        .setPulseBuildDate(properties.getProperty(PulseConstants.PROPERTY_BUILD_DATE, ""));
-    PulseController.pulseVersion
-        .setPulseSourceDate(properties.getProperty(PulseConstants.PROPERTY_SOURCE_DATE, ""));
-    PulseController.pulseVersion.setPulseSourceRevision(
-        properties.getProperty(PulseConstants.PROPERTY_SOURCE_REVISION, ""));
-    PulseController.pulseVersion.setPulseSourceRepository(
-        properties.getProperty(PulseConstants.PROPERTY_SOURCE_REPOSITORY, ""));
-    logger.info(PulseController.pulseVersion.getPulseVersionLogMessage());
+  public void contextDestroyed(ContextClosedEvent event) {
+
+    // Stop all running threads those are created in Pulse
+    // Stop cluster threads
+    repository.removeAllClusters();
+
+    WebApplicationContext applicationContext =
+        (WebApplicationContext) event.getApplicationContext();
+    ServletContext servletContext = applicationContext.getServletContext();
+
+    logger.info("{}{}", resourceBundle.getString("LOG_MSG_CONTEXT_DESTROYED"),
+        servletContext.getContextPath());
-  // Function to load pulse properties from pulse.properties file
-  private static Properties loadPropertiesFromFile(String propertyFile,
-      ResourceBundle resourceBundle) {
-    final Properties properties = new Properties();
-    try (final InputStream stream =
-        Thread.currentThread().getContextClassLoader().getResourceAsStream(propertyFile)) {
-      logger.info(propertyFile + " " + resourceBundle.getString("LOG_MSG_FILE_FOUND"));
-      properties.load(stream);
-    } catch (IOException e) {
-      logger.error(resourceBundle.getString("LOG_MSG_EXCEPTION_LOADING_PROPERTIES_FILE"), e);
-    }
-
-    return properties;
+  private void loadPulseVersionDetails() {
+    Properties properties =
+        propertiesFileLoader
+            .loadProperties(PulseConstants.PULSE_VERSION_PROPERTIES_FILE, resourceBundle);
+    pulseController.getPulseVersion()
+        .setPulseVersion(properties.getProperty(PulseConstants.PROPERTY_PULSE_VERSION, ""));
+    pulseController.getPulseVersion()
+        .setPulseBuildId(properties.getProperty(PulseConstants.PROPERTY_BUILD_ID, ""));
+    pulseController.getPulseVersion()
+        .setPulseBuildDate(properties.getProperty(PulseConstants.PROPERTY_BUILD_DATE, ""));
+    pulseController.getPulseVersion()
+        .setPulseSourceDate(properties.getProperty(PulseConstants.PROPERTY_SOURCE_DATE, ""));
+    pulseController.getPulseVersion().setPulseSourceRevision(
+        properties.getProperty(PulseConstants.PROPERTY_SOURCE_REVISION, ""));
+    pulseController.getPulseVersion().setPulseSourceRepository(
+        properties.getProperty(PulseConstants.PROPERTY_SOURCE_REPOSITORY, ""));
+    logger.info(pulseController.getPulseVersion().getPulseVersionLogMessage());

MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 UPD40 UPD40 UPD40 INS40 UPD40 INS40 INS40 UPD40 INS78 INS74 INS23 INS23 INS31 INS31 INS31 INS42 INS43 INS43 MOV83 MOV83 INS43 MOV59 INS83 INS83 INS43 INS59 INS78 MOV83 MOV42 INS44 INS44 INS44 MOV8 INS44 INS44 MOV21 MOV78 MOV83 MOV39 UPD42 MOV42 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV8 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 UPD42 MOV42 INS21 UPD43 INS25 UPD43 UPD43 UPD42 MOV21 INS60 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS7 UPD42 INS62 INS8 INS25 UPD42 UPD42 UPD43 INS43 INS59 MOV43 INS22 INS42 INS42 INS42 INS43 MOV21 INS62 INS8 INS60 INS60 UPD42 UPD42 INS11 UPD42 MOV42 UPD42 MOV42 INS32 INS45 MOV32 INS32 MOV42 INS32 INS32 INS32 INS32 INS32 INS32 INS52 INS42 INS42 INS42 INS43 INS21 INS43 INS59 INS43 INS59 MOV43 INS43 INS43 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS11 UPD42 MOV42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS11 UPD42 UPD42 INS43 INS32 INS42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS42 INS43 INS42 INS42 INS42 INS42 UPD42 MOV42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL90 DEL43 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL23 DEL31 DEL43 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL44 DEL52 DEL42 DEL22 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL78 DEL8 DEL31 DEL42 DEL32 DEL42 DEL43 DEL83 DEL14 DEL42 DEL45 DEL45 DEL32 DEL27 DEL83 DEL43 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL83 DEL83 DEL43 DEL42 DEL43 DEL42 DEL44 DEL31