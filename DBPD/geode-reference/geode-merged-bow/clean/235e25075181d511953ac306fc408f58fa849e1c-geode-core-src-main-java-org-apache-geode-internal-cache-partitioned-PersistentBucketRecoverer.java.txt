GEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-stores
+  private final StartupStatus startupStatus;
-   *
+    this(prhaRedundancyProvider, proxyBuckets, new StartupStatus());
+  }
+
+  private PersistentBucketRecoverer(PRHARedundancyProvider prhaRedundancyProvider, int proxyBuckets,
+      StartupStatus startupStatus) {
+
+    this.startupStatus = startupStatus;
+
-    List<RegionStatus> allRegions = new ArrayList<RegionStatus>(colocatedRegions.size() + 1);
+    List<RegionStatus> allRegions = new ArrayList<>(colocatedRegions.size() + 1);
-
-    this.membershipChanged = true;
+    membershipChanged = true;
-    this.membershipChanged = true;
+    membershipChanged = true;
-    this.membershipChanged = true;
+    membershipChanged = true;
-        if (this.membershipChanged) {
-          this.membershipChanged = false;
+        if (membershipChanged) {
+          membershipChanged = false;
-      this.thisMember = createPersistentMemberID(region);
+      thisMember = createPersistentMemberID(region);
-      this.bucketRegions = region.getRegionAdvisor().getProxyBucketArray();
+      bucketRegions = region.getRegionAdvisor().getProxyBucketArray();
-      for (ProxyBucketRegion proxyBucket : this.bucketRegions) {
+      for (ProxyBucketRegion proxyBucket : bucketRegions) {
-      for (ProxyBucketRegion proxyBucket : this.bucketRegions) {
+      for (ProxyBucketRegion proxyBucket : bucketRegions) {
-      for (ProxyBucketRegion proxyBucket : this.bucketRegions) {
+      for (ProxyBucketRegion proxyBucket : bucketRegions) {
-      this.loggedDoneMessage = true;
-      StartupStatus.startup(
+      loggedDoneMessage = true;
+      startupStatus.startup(
-              new Object[] {this.region,
-                  TransformUtils.persistentMemberIdToLogEntryTransformer
-                      .transform(this.thisMember)}));
+              region,
+              TransformUtils.persistentMemberIdToLogEntryTransformer.transform(thisMember)));
-        Set<String> membersToWaitForLogEntries = new HashSet<String>();
+        Set<String> membersToWaitForLogEntries = new HashSet<>();
-        StartupStatus.startup(
+        startupStatus.startup(
-                new Object[] {this.region, missingBuckets,
-                    TransformUtils.persistentMemberIdToLogEntryTransformer
-                        .transform(this.thisMember),
-                    membersToWaitForLogEntries}));
+                region, missingBuckets,
+                TransformUtils.persistentMemberIdToLogEntryTransformer.transform(thisMember),
+                membersToWaitForLogEntries));
-        this.loggedDoneMessage = false;
+        loggedDoneMessage = false;
-        Set<String> membersToWaitForLogEntries = new HashSet<String>();
+        Set<String> membersToWaitForLogEntries = new HashSet<>();
-        StartupStatus.startup(
+        startupStatus.startup(
-                new Object[] {this.region, missingBuckets,
-                    TransformUtils.persistentMemberIdToLogEntryTransformer
-                        .transform(this.thisMember),
-                    membersToWaitForLogEntries}));
+                region, missingBuckets,
+                TransformUtils.persistentMemberIdToLogEntryTransformer.transform(thisMember),
+                membersToWaitForLogEntries));
-        this.loggedDoneMessage = false;
+        loggedDoneMessage = false;

INS23 INS31 INS83 INS83 INS43 INS59 MOV29 INS83 INS42 INS44 INS44 INS8 UPD83 INS44 INS42 INS42 INS43 INS42 INS39 INS42 INS17 INS43 INS42 INS21 INS42 INS42 INS42 INS14 INS42 INS7 INS43 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 UPD74 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 MOV40 MOV42 INS42 UPD42 INS42 UPD74 INS42 INS42 INS32 INS42 UPD42 INS42 MOV40 MOV42 INS42 UPD74 INS42 INS42 INS32 INS42 INS42 MOV40 MOV42 INS42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL43 DEL85 DEL5 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL4 DEL3 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL4 DEL3 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL43 DEL85 DEL5 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL4 DEL3 DEL52 DEL42 DEL22