Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  protected static final short FETCH_FROM_HDFS = (SKIP_CALLBACKS << 1);
+  //using the left most bit for IS_PUT_DML, the last available bit
+  protected static final short IS_PUT_DML = (short) (FETCH_FROM_HDFS << 1);
+  /** whether this operation should fetch oldValue from HDFS */
+  private boolean fetchFromHDFS;
+  
+  private boolean isPutDML;
-      boolean posDup, boolean skipCallbacks, Object callbackArg) {
+      boolean posDup, boolean skipCallbacks, Object callbackArg, boolean fetchFromHDFS, boolean isPutDML) {
+    this.fetchFromHDFS = fetchFromHDFS;
+    this.isPutDML = isPutDML; 
+    setTransactionDistributed(r.getCache().getTxManager().isDistributed());
+ 
+    if (this.fetchFromHDFS) s |= FETCH_FROM_HDFS;
+    if (this.isPutDML) s |= IS_PUT_DML;
+    this.fetchFromHDFS = ((s & FETCH_FROM_HDFS) != 0);
+    this.isPutDML = ((s & IS_PUT_DML) != 0);
-    EntryEventImpl ev = new EntryEventImpl(r, 
+    EntryEventImpl ev = EntryEventImpl.create(r, 
+    try {
-      baseEvent = new EntryEventImpl(
+      baseEvent = EntryEventImpl.create(
-            EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);
+            EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks, this.isPutDML);
+            try {
+            // set the fetchFromHDFS flag
+            ev.setFetchFromHDFS(this.fetchFromHDFS);
+            
+            } finally {
+              ev.release();
+            }
-        EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks);
+        EntryEventImpl ev = getEventFromEntry(r, myId, eventSender, i,putAllPRData,notificationOnly,bridgeContext,posDup,skipCallbacks, this.isPutDML);
+        try {
+        } finally {
+          ev.release();
+        }
+    } finally {
+      if (baseEvent != null) baseEvent.release();
+      if (dpao != null) dpao.freeOffHeapResources();
+    }
-      boolean posDup, boolean skipCallbacks) {
+      boolean posDup, boolean skipCallbacks, boolean isPutDML) {
-    //EntryEventImpl ev = new EntryEventImpl(r, 
+    //EntryEventImpl ev = EntryEventImpl.create(r, 
-    EntryEventImpl ev = new EntryEventImpl(r, prd.getOp(), prd.getKey(), prd
+    EntryEventImpl ev = EntryEventImpl.create(r, prd.getOp(), prd.getKey(), prd
+    boolean evReturned = false;
+    try {
+    ev.setPutDML(isPutDML);
+    evReturned = true;
+    } finally {
+      if (!evReturned) {
+        ev.release();
+      }
+    }
+  
+  @Override
+  protected boolean mayAddToMultipleSerialGateways(DistributionManager dm) {
+    return _mayAddToMultipleSerialGateways(dm);
+  }
+  
+  @Override
+  public String toString()
+  {
+    StringBuffer buff = new StringBuffer();
+    String className = getClass().getName();
+//    className.substring(className.lastIndexOf('.', className.lastIndexOf('.') - 1) + 1);  // partition.<foo> more generic version 
+    buff.append(className.substring(className.indexOf(PN_TOKEN) + PN_TOKEN.length())); // partition.<foo>
+    buff.append("(prid="); // make sure this is the first one
+    buff.append(this.regionId);
+    
+    // Append name, if we have it
+    String name = null;
+    try {
+      PartitionedRegion pr = PartitionedRegion.getPRFromId(this.regionId);
+      if (pr != null) {
+        name = pr.getFullPath();
+      }
+    }
+    catch (Exception e) {
+      /* ignored */
+      name = null;
+    }
+    if (name != null) {
+      buff.append(" (name = \"").append(name).append("\")");
+    }
+
+    appendFields(buff);
+    buff.append(" ,distTx=");
+    buff.append(this.isTransactionDistributed);
+    buff.append(" ,putAlldatasize=");
+    buff.append(this.putAllPRDataSize);
+    // [DISTTX] TODO Disable this
+    buff.append(" ,putAlldata=");
+    buff.append(Arrays.toString(this.putAllPRData));
+    buff.append(")");
+    return buff.toString();
+  }

INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS59 INS83 INS39 INS59 INS44 INS44 INS44 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS36 INS42 INS11 INS65 INS42 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS21 INS25 INS25 INS21 INS21 INS54 INS39 INS42 INS60 INS54 INS42 INS43 INS42 INS41 INS42 INS42 INS60 INS60 INS21 INS21 INS21 INS60 INS54 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS41 INS27 INS39 INS36 INS66 INS7 INS7 INS32 INS22 INS21 INS22 INS21 INS7 INS7 MOV43 INS8 INS8 MOV43 INS39 INS59 INS8 INS8 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS43 INS59 INS8 INS12 INS27 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS34 INS27 INS22 INS42 INS22 INS42 INS42 INS32 INS52 INS42 INS7 INS52 INS42 INS7 INS22 INS36 INS22 INS36 INS32 MOV25 MOV60 MOV60 MOV24 MOV25 INS25 INS25 INS32 INS42 INS9 MOV25 MOV21 MOV21 MOV25 MOV21 MOV21 MOV25 MOV25 MOV25 INS21 INS21 MOV41 INS25 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS22 INS42 INS42 INS33 INS60 INS25 INS44 INS8 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS22 INS42 INS42 INS45 INS42 INS42 INS22 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS34 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS27 INS52 INS42 INS27 INS42 INS42 INS42 MOV32 MOV32 MOV32 MOV22 INS9 MOV32 INS9 MOV32 INS27 INS21 INS27 INS21 INS42 INS42 INS42 MOV32 MOV32 MOV32 INS33 INS9 INS42 MOV38 MOV32 INS32 INS7 INS38 INS8 INS43 INS32 INS42 INS42 INS42 INS27 INS52 INS42 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS22 INS32 INS42 INS36 INS34 INS36 INS34 INS42 INS33 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS21 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS7 INS32 INS42 INS45 INS52 INS42 INS42 INS42 INS27 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS7 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS54 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS40 INS33 INS33 MOV22 INS9 INS42 MOV38 INS9 MOV43 INS59 MOV8 INS8 INS42 INS42 INS42 INS32 INS21 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS60 INS54 INS52 INS42 INS42 INS42 MOV43 INS59 MOV8 INS8 INS42 INS32 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS32 INS32 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS22 INS42 INS42 INS52 INS42 DEL42 DEL43 DEL42 DEL9 DEL9 DEL14 DEL42 DEL43 DEL42 DEL40 DEL33 DEL33 DEL9 DEL42 DEL9 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL9 DEL42 DEL14