GEODE-6293: Fix fire & forget functions in gfsh (#3138)

* GEODE-6293: Fix fire & forget functions in gfsh

- Fixed minor warnings.
- Refactored class `UserFunctionExecution`.
- Added unit tests for class `UserFunctionExecution`.
- Class `UserFunctionExecution` now supports the execution of functions
  that don't return any results.
+import static org.apache.geode.management.internal.cli.functions.CliFunctionResult.StatusState.OK;
+import org.apache.geode.cache.query.RegionNotFoundException;
+  private static final long serialVersionUID = 1L;
+  private static Logger logger = LogService.getLogger();
-  private static Logger logger = LogService.getLogger();
-  private static final long serialVersionUID = 1L;
+  @Override
+  public boolean isHA() {
+    return false;
+  }
+
+  @Override
+  public String getId() {
+    return UserFunctionExecution.ID;
+  }
+
+  @Override
+  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
+    return Collections.emptySet();
+  }
+
+  boolean loginRequired(SecurityService securityService) {
+    try {
+      // if the function is executed on a server with jmx-manager that user is already logged into
+      // then we do not need to do login/logout here.
+      Subject subject = securityService.getSubject();
+      return subject == null || !subject.isAuthenticated();
+    } catch (AuthenticationRequiredException e) {
+      return true;
+    }
+  }
+
+  Function<?> loadFunction(String functionId) {
+    return FunctionService.getFunction(functionId);
+  }
+
+  String[] parseArguments(String argumentsString) {
+    if (argumentsString != null && argumentsString.length() > 0) {
+      return argumentsString.split(",");
+    } else {
+      return null;
+    }
+  }
+
+  Set<String> parseFilters(String filterString) {
+    if (filterString != null && filterString.length() > 0) {
+      return Arrays.stream(filterString.split(",")).collect(Collectors.toSet());
+    } else {
+      return new HashSet<>();
+    }
+  }
+
+  ResultCollector parseResultCollector(String resultCollectorName)
+      throws ClassNotFoundException, IllegalAccessException, InstantiationException {
+    if (resultCollectorName != null && resultCollectorName.length() > 0) {
+      return (ResultCollector) ClassPathLoader.getLatest().forName(resultCollectorName)
+          .newInstance();
+    } else {
+      return null;
+    }
+  }
+
+  Execution buildExecution(Cache cache, String onRegion) throws RegionNotFoundException {
+    Execution execution;
+    DistributedMember member = cache.getDistributedSystem().getDistributedMember();
+
+    if (onRegion != null && onRegion.length() > 0) {
+      Region region = cache.getRegion(onRegion);
+
+      if (region == null) {
+        throw new RegionNotFoundException(onRegion);
+      }
+
+      execution = FunctionService.onRegion(region);
+    } else {
+      execution = FunctionService.onMember(member);
+    }
+
+    return execution;
+  }
-    String[] functionArgs = null;
-
-    boolean loginNeeded = false;
-    try {
-      // if the function is executed on a server with jmx-manager that user is already logged into
-      // then we do not need to do login/logout here.
-      Subject subject = securityService.getSubject();
-      loginNeeded = subject == null || !subject.isAuthenticated();
-    } catch (AuthenticationRequiredException e) {
-      loginNeeded = true;
-    }
-      if (loginNeeded) {
+
+      // Authenticate If Needed
+      if (loginRequired(securityService)) {
-      if (argumentsString != null && argumentsString.length() > 0) {
-        functionArgs = argumentsString.split(",");
-      }
-      Set<String> filters = new HashSet<>();
-      ResultCollector resultCollectorInstance = null;
-      if (resultCollectorName != null && resultCollectorName.length() > 0) {
-        resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
-            .forName(resultCollectorName).newInstance();
-      }
-      if (filterString != null && filterString.length() > 0) {
-        filters = Arrays.stream(filterString.split(",")).collect(Collectors.toSet());
-      }
-
-      Function<?> function = FunctionService.getFunction(functionId);
+      // Load User Function
+      Function<?> function = loadFunction(functionId);
-      // security check
+      // Parse Arguments
+      Set<String> filters = parseFilters(filterString);
+      String[] functionArgs = parseArguments(argumentsString);
+      ResultCollector resultCollectorInstance = parseResultCollector(resultCollectorName);
+
+      // Security check
-      Execution execution = null;
-      if (onRegion != null && onRegion.length() > 0) {
-        Region region = cache.getRegion(onRegion);
-        if (region == null) {
-          context.getResultSender().lastResult(
-              new CliFunctionResult(context.getMemberName(), ERROR, onRegion + " does not exist"));
-          return;
-        }
-        execution = FunctionService.onRegion(region);
-      } else {
-        execution = FunctionService.onMember(member);
-      }
-
+      // Build & Configure Execution Context
+      Execution execution = buildExecution(cache, onRegion);
+
-      List<Object> results = (List<Object>) execution.execute(function.getId()).getResult();
-      List<String> resultMessage = new ArrayList<>();
+      // Execute Function and gather results
+      List results = null;
+      List<String> resultMessage = new ArrayList<>();
+
+      ResultCollector rc = execution.execute(function.getId());
+      if (function.hasResult()) {
+        results = (List) rc.getResult();
+      }
-      context.getResultSender().lastResult(new CliFunctionResult(context.getMemberName(),
-          functionSuccess, resultMessage.toString()));
+      context.getResultSender().lastResult(new CliFunctionResult(context.getMemberName(),
+          functionSuccess ? OK : ERROR, resultMessage.toString()));
+    } catch (RegionNotFoundException regionNotFoundException) {
+      context.getResultSender().lastResult(
+          new CliFunctionResult(context.getMemberName(), ERROR, onRegion + " does not exist"));
-          .lastResult(new CliFunctionResult(context.getMemberName(), false,
+          .lastResult(new CliFunctionResult(context.getMemberName(), ERROR,
-          new CliFunctionResult(context.getMemberName(), false, "Exception: " + e.getMessage()));
+          new CliFunctionResult(context.getMemberName(), ERROR, "Exception: " + e.getMessage()));
-
-  @Override
-  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
-    return Collections.emptySet();
-  }
-
-  @Override
-  public String getId() {
-    return UserFunctionExecution.ID;
-  }
-
-  @Override
-  public boolean isHA() {
-    return false;
-  }
-

INS26 INS26 MOV23 MOV23 MOV31 MOV31 MOV31 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS39 INS42 INS44 INS8 MOV74 INS42 INS44 INS8 MOV5 INS42 INS44 INS8 MOV74 INS42 INS44 INS8 MOV43 INS42 INS44 INS43 INS43 INS43 INS8 INS43 INS42 INS44 INS44 INS43 INS8 INS43 INS42 MOV54 INS43 INS42 INS41 INS43 INS42 MOV25 INS43 INS42 MOV25 INS43 INS42 INS42 INS42 INS42 MOV25 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 MOV25 INS41 INS42 INS42 MOV32 INS42 INS8 INS42 INS8 INS42 INS8 INS42 INS42 MOV43 INS59 INS43 INS59 INS42 MOV60 MOV25 MOV60 MOV60 MOV60 INS12 INS41 INS41 INS41 INS41 INS41 INS41 INS41 INS42 INS42 INS42 INS32 INS60 INS60 INS25 INS44 MOV8 MOV27 INS41 MOV32 INS33 MOV32 MOV14 MOV11 INS33 INS32 INS42 INS8 INS32 INS74 INS59 INS74 INS5 INS59 INS43 INS43 MOV43 INS43 INS32 INS8 INS43 INS42 INS9 INS42 INS42 INS53 INS42 INS42 INS43 INS76 INS42 INS32 INS43 INS43 INS32 INS43 INS85 INS42 INS32 INS42 INS32 INS42 UPD42 INS32 UPD42 UPD42 MOV42 UPD42 MOV32 INS42 INS42 INS21 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS16 INS43 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS32 INS42 INS42 DEL42 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL33 DEL43 DEL74 DEL42 DEL43 DEL74 DEL42 DEL32 DEL11 DEL42 DEL41 DEL9 DEL9