Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-/** FlowControlParams are used to represent mcast-flow-control parameters for a
-    DistributedSystem.  Instances of this class are used in DistributionConfig to
-    hold the relevant settings, which are<br>
-    - byteAllowance, the number of bytes that can be transmitted to another process without a recharge<br>
-    - rechargeThreshold, the ratio of (initial byteAllowance)/(current byteAllowance) that causes a process to send a recharge message<br>
-    - rechargeBlockMs, the maximum wait time for a recharge before explicitly asking for a recharge
-    <p>
-    The byteAllowance and rechargeBlockMs settings are used in hashcode calculations,
-    and should not be changed if the hashcode of a FlowControlParams needs to remain invariant.
-    @since GemFire 5.0
-*/
+/**
+ * FlowControlParams are used to represent mcast-flow-control parameters for a DistributedSystem.
+ * Instances of this class are used in DistributionConfig to hold the relevant settings, which
+ * are<br>
+ * - byteAllowance, the number of bytes that can be transmitted to another process without a
+ * recharge<br>
+ * - rechargeThreshold, the ratio of (initial byteAllowance)/(current byteAllowance) that causes a
+ * process to send a recharge message<br>
+ * - rechargeBlockMs, the maximum wait time for a recharge before explicitly asking for a recharge
+ * <p>
+ * The byteAllowance and rechargeBlockMs settings are used in hashcode calculations, and should not
+ * be changed if the hashcode of a FlowControlParams needs to remain invariant.
+ * 
+ * @since GemFire 5.0
+ */
-  
+
-  public FlowControlParams() {
-  }
-  
+  public FlowControlParams() {}
+
-    return (""+byteAllowance+", "+rechargeThreshold+", "+rechargeBlockMs);
-    //return "FlowControlParams(byteAllowance="+byteAllowance
-    //    +", rechargeThreshold="+rechargeThreshold
-    //    +", rechargeBlockMs="+rechargeBlockMs
-    //    +")";
+    return ("" + byteAllowance + ", " + rechargeThreshold + ", " + rechargeBlockMs);
+    // return "FlowControlParams(byteAllowance="+byteAllowance
+    // +", rechargeThreshold="+rechargeThreshold
+    // +", rechargeBlockMs="+rechargeBlockMs
+    // +")";
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-      FlowControlParams other = (FlowControlParams)obj;
+      FlowControlParams other = (FlowControlParams) obj;
-        && (this.rechargeThreshold == other.rechargeThreshold)
-        && (this.rechargeBlockMs == other.rechargeBlockMs);
-    }
-    else {
+          && (this.rechargeThreshold == other.rechargeThreshold)
+          && (this.rechargeBlockMs == other.rechargeBlockMs);
+    } else {
-  
-  
-  
-  
+
+
+
-  
-  
+

UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66