Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import java.io.*;
+// import java.io.*;
-* 
-* A class specialized for executing (via reflection) the receiver/selector
-* pairs found in TestTasks. 
-*
-*/
+ * 
+ * A class specialized for executing (via reflection) the receiver/selector pairs found in
+ * TestTasks.
+ *
+ */
-   // @todo lises add static args method
+  // @todo lises add static args method
-   * Helper method that searches a class (and its superclasses) for a
-   * method with the given name and parameter types.
+   * Helper method that searches a class (and its superclasses) for a method with the given name and
+   * parameter types.
-   * @throws NoSuchMethodException
-   *         If the method cannot be found
+   * @throws NoSuchMethodException If the method cannot be found
-  throws NoSuchMethodException {
+      throws NoSuchMethodException {
-    ArrayList matchingMethods  = new ArrayList();
+    ArrayList matchingMethods = new ArrayList();
-    NEXT_METHOD:
-      for (int i = 0; i < methods.length; i++) {
+      NEXT_METHOD: for (int i = 0; i < methods.length; i++) {
-          if(paramTypes[j] == null) {
-            if(argTypes[j].isPrimitive()) {
-              //this parameter is not ok, the parameter is a primative and the value is null
+          if (paramTypes[j] == null) {
+            if (argTypes[j].isPrimitive()) {
+              // this parameter is not ok, the parameter is a primative and the value is null
-              //this parameter is ok, the argument is an object and the value is null
+              // this parameter is ok, the argument is an object and the value is null
-              if ((argType.equals(boolean.class) &&
-                   paramType.equals(Boolean.class)) ||
-                  (argType.equals(short.class) &&
-                   paramType.equals(Short.class)) ||
-                  (argType.equals(int.class) &&
-                   paramType.equals(Integer.class)) ||
-                  (argType.equals(long.class) &&
-                   paramType.equals(Long.class)) ||
-                  (argType.equals(float.class) &&
-                   paramType.equals(Float.class)) ||
-                  (argType.equals(double.class) &&
-                   paramType.equals(Double.class)) ||
-                  (argType.equals(char.class) &&
-                   paramType.equals(Character.class)) ||
-                  (argType.equals(byte.class) &&
-                   paramType.equals(Byte.class)) ||
-                  false) {
+              if ((argType.equals(boolean.class) && paramType.equals(Boolean.class))
+                  || (argType.equals(short.class) && paramType.equals(Short.class))
+                  || (argType.equals(int.class) && paramType.equals(Integer.class))
+                  || (argType.equals(long.class) && paramType.equals(Long.class))
+                  || (argType.equals(float.class) && paramType.equals(Float.class))
+                  || (argType.equals(double.class) && paramType.equals(Double.class))
+                  || (argType.equals(char.class) && paramType.equals(Character.class))
+                  || (argType.equals(byte.class) && paramType.equals(Byte.class)) || false) {
-      
-      //We want to check to make sure there aren't two
-      //ambiguous methods on the same class. But a subclass
-      //can still override a method on a super class, so we'll stop
-      //if we found a method on the subclass.
-      if(matchingMethods.size() > 0) {
+
+      // We want to check to make sure there aren't two
+      // ambiguous methods on the same class. But a subclass
+      // can still override a method on a super class, so we'll stop
+      // if we found a method on the subclass.
+      if (matchingMethods.size() > 0) {
-    
-    if(matchingMethods.isEmpty()) {
+
+    if (matchingMethods.isEmpty()) {
-    if(matchingMethods.size() > 1) {
+    if (matchingMethods.size() > 1) {
-    }
-    else return (Method) matchingMethods.get(0);
+    } else
+      return (Method) matchingMethods.get(0);
-  *
-  * Send the message "selector" to the class named "receiver".
-  * Return the result, including stack trace (if any).
-  *
-  */
+   *
+   * Send the message "selector" to the class named "receiver". Return the result, including stack
+   * trace (if any).
+   *
+   */
-   * Executes the given static method on the given class with the
-   * given arguments.
+   * Executes the given static method on the given class with the given arguments.
-  public static MethExecutorResult execute(String receiver, 
-                                           String selector, 
-                                           Object[] args) {
+  public static MethExecutorResult execute(String receiver, String selector, Object[] args) {
-        Method theMethod =
-          getMethod(receiverClass, selector, paramTypes);
+        Method theMethod = getMethod(receiverClass, selector, paramTypes);
-        return new MethExecutorResult( res );
+        return new MethExecutorResult(res);
-        if ( targEx == null ) {
-          return new MethExecutorResult( res );
+        if (targEx == null) {
+          return new MethExecutorResult(res);
-    } 
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
-//       String s = "While trying to invoke " + receiver + "." +
-//         selector;
-//       t = new HydraConfigException(s, t);
+    } catch (Throwable t) {
+      // String s = "While trying to invoke " + receiver + "." +
+      // selector;
+      // t = new HydraConfigException(s, t);
-    } 
+    }
-  *
-  * Send the message "selector" to the object "target".
-  * Return the result, including stack trace (if any).
-  *
-  */
+   *
+   * Send the message "selector" to the object "target". Return the result, including stack trace
+   * (if any).
+   *
+   */
-   * Executes the given instance method on the given object with the
-   * given arguments.
+   * Executes the given instance method on the given object with the given arguments.
-  public static MethExecutorResult executeObject(Object target, 
-                                           String selector, 
-                                           Object[] args) {
+  public static MethExecutorResult executeObject(Object target, String selector, Object[] args) {
-        Method theMethod =
-          getMethod(receiverClass, selector, paramTypes);
+        Method theMethod = getMethod(receiverClass, selector, paramTypes);
-        return new MethExecutorResult( res );
+        return new MethExecutorResult(res);
-        if ( targEx == null ) {
-          return new MethExecutorResult( res );
+        if (targEx == null) {
+          return new MethExecutorResult(res);
-    } 
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-    } 
+    }
-  *
-  * Send the message "selector" to an instance of the class named "receiver".
-  * Return the result, including stack trace (if any).
-  *
-  */
-  public static MethExecutorResult executeInstance( String receiver, String selector ) {
+   *
+   * Send the message "selector" to an instance of the class named "receiver". Return the result,
+   * including stack trace (if any).
+   *
+   */
+  public static MethExecutorResult executeInstance(String receiver, String selector) {
-        Method theMethod =
-          getMethod(receiverClass, selector, new Class[0]);
-        res = theMethod.invoke(target, new Object[0] );
-        return new MethExecutorResult( res );
+        Method theMethod = getMethod(receiverClass, selector, new Class[0]);
+        res = theMethod.invoke(target, new Object[0]);
+        return new MethExecutorResult(res);
-        if ( targEx == null ) {
-          return new MethExecutorResult( res );
+        if (targEx == null) {
+          return new MethExecutorResult(res);
-    } 
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-    } 
+    }
-  *
-  * Send the message "selector" to an instance of the class named "receiver".
-  * Return the result, including stack trace (if any).
-  *
-  */
-  public static MethExecutorResult executeInstance( String receiver, String selector,
-                                                    Class[] types, Object[] args ) {
+   *
+   * Send the message "selector" to an instance of the class named "receiver". Return the result,
+   * including stack trace (if any).
+   *
+   */
+  public static MethExecutorResult executeInstance(String receiver, String selector, Class[] types,
+      Object[] args) {
-      Constructor init =
-        receiverClass.getDeclaredConstructor(new Class[0]);
+      Constructor init = receiverClass.getDeclaredConstructor(new Class[0]);
-        res = theMethod.invoke(target, args );
-        return new MethExecutorResult( res );
+        res = theMethod.invoke(target, args);
+        return new MethExecutorResult(res);
-        if ( targEx == null ) {
-          return new MethExecutorResult( res );
+        if (targEx == null) {
+          return new MethExecutorResult(res);
-    } 
-    catch (VirtualMachineError e) {
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-    } 
+    }
-  /** 
-  *
-  * A small program for testing this class.
-  *
-  */
+  /**
+   *
+   * A small program for testing this class.
+   *
+   */
-    return "The result is: " + System.currentTimeMillis(); 
+    return "The result is: " + System.currentTimeMillis();
+
+
-    result = MethExecutor.execute( "hydra.MethExecutor", "testMethod1" );
+    result = MethExecutor.execute("hydra.MethExecutor", "testMethod1");
-    result = MethExecutor.execute( "hydra.MethExecutor", "testMethod2" );
+    result = MethExecutor.execute("hydra.MethExecutor", "testMethod2");

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66