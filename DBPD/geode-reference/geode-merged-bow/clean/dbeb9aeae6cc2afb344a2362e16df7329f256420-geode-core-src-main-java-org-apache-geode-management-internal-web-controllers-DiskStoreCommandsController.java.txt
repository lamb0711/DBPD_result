Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The DiskStoreCommandsController class implements GemFire Management REST API web service endpoints for the
- * Gfsh Disk Store Commands.
+ * The DiskStoreCommandsController class implements GemFire Management REST API web service
+ * endpoints for the Gfsh Disk Store Commands.
+ * 
-  public Callable<ResponseEntity<String>> backupDiskStore(@RequestParam(value = CliStrings.BACKUP_DISK_STORE__DISKDIRS) final String dir,
-                                                          @RequestParam(value = CliStrings.BACKUP_DISK_STORE__BASELINEDIR, required = false) final String baselineDir)
-  {
+  public Callable<ResponseEntity<String>> backupDiskStore(
+      @RequestParam(value = CliStrings.BACKUP_DISK_STORE__DISKDIRS) final String dir,
+      @RequestParam(value = CliStrings.BACKUP_DISK_STORE__BASELINEDIR,
+          required = false) final String baselineDir) {
-  public Callable<ResponseEntity<String>> compactDiskStore(@PathVariable("name") final String diskStoreNameId,
-                                                           @RequestParam(value = CliStrings.COMPACT_DISK_STORE__GROUP, required = false) final String[] groups)
-  {
+  public Callable<ResponseEntity<String>> compactDiskStore(
+      @PathVariable("name") final String diskStoreNameId,
+      @RequestParam(value = CliStrings.COMPACT_DISK_STORE__GROUP,
+          required = false) final String[] groups) {
-      command.addOption(CliStrings.COMPACT_DISK_STORE__GROUP, StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.COMPACT_DISK_STORE__GROUP,
+          StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
-  public String createDiskStore(@RequestParam(CliStrings.CREATE_DISK_STORE__NAME) final String diskStoreNameId,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__DIRECTORY_AND_SIZE) final String[] directoryAndSizes,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__ALLOW_FORCE_COMPACTION, defaultValue = "false") final Boolean allowForceCompaction,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__AUTO_COMPACT, defaultValue = "true") final Boolean autoCompact,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__COMPACTION_THRESHOLD, defaultValue = "50") final Integer compactionThreshold,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__MAX_OPLOG_SIZE, defaultValue = "1024") final Integer maxOplogSize,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__QUEUE_SIZE, defaultValue = "0") final Integer queueSize,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__TIME_INTERVAL, defaultValue = "1000") final Long timeInterval,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__WRITE_BUFFER_SIZE, defaultValue = "32768") final Integer writeBufferSize,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__DISK_USAGE_WARNING_PCT, defaultValue = "90") final Float diskUsageWarningPercentage,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__DISK_USAGE_CRITICAL_PCT, defaultValue = "99") final Integer diskUsageCriticalPercentage,
-                                @RequestParam(value = CliStrings.CREATE_DISK_STORE__GROUP, required = false) final String[] groups)
-  {
+  public String createDiskStore(
+      @RequestParam(CliStrings.CREATE_DISK_STORE__NAME) final String diskStoreNameId,
+      @RequestParam(
+          value = CliStrings.CREATE_DISK_STORE__DIRECTORY_AND_SIZE) final String[] directoryAndSizes,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__ALLOW_FORCE_COMPACTION,
+          defaultValue = "false") final Boolean allowForceCompaction,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__AUTO_COMPACT,
+          defaultValue = "true") final Boolean autoCompact,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__COMPACTION_THRESHOLD,
+          defaultValue = "50") final Integer compactionThreshold,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__MAX_OPLOG_SIZE,
+          defaultValue = "1024") final Integer maxOplogSize,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__QUEUE_SIZE,
+          defaultValue = "0") final Integer queueSize,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__TIME_INTERVAL,
+          defaultValue = "1000") final Long timeInterval,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__WRITE_BUFFER_SIZE,
+          defaultValue = "32768") final Integer writeBufferSize,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__DISK_USAGE_WARNING_PCT,
+          defaultValue = "90") final Float diskUsageWarningPercentage,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__DISK_USAGE_CRITICAL_PCT,
+          defaultValue = "99") final Integer diskUsageCriticalPercentage,
+      @RequestParam(value = CliStrings.CREATE_DISK_STORE__GROUP,
+          required = false) final String[] groups) {
-    command.addOption(CliStrings.CREATE_DISK_STORE__DIRECTORY_AND_SIZE, StringUtils.concat(directoryAndSizes, StringUtils.COMMA_DELIMITER));
-    command.addOption(CliStrings.CREATE_DISK_STORE__ALLOW_FORCE_COMPACTION, String.valueOf(Boolean.TRUE.equals(allowForceCompaction)));
-    command.addOption(CliStrings.CREATE_DISK_STORE__AUTO_COMPACT, String.valueOf(Boolean.TRUE.equals(autoCompact)));
-    command.addOption(CliStrings.CREATE_DISK_STORE__COMPACTION_THRESHOLD, String.valueOf(compactionThreshold));
+    command.addOption(CliStrings.CREATE_DISK_STORE__DIRECTORY_AND_SIZE,
+        StringUtils.concat(directoryAndSizes, StringUtils.COMMA_DELIMITER));
+    command.addOption(CliStrings.CREATE_DISK_STORE__ALLOW_FORCE_COMPACTION,
+        String.valueOf(Boolean.TRUE.equals(allowForceCompaction)));
+    command.addOption(CliStrings.CREATE_DISK_STORE__AUTO_COMPACT,
+        String.valueOf(Boolean.TRUE.equals(autoCompact)));
+    command.addOption(CliStrings.CREATE_DISK_STORE__COMPACTION_THRESHOLD,
+        String.valueOf(compactionThreshold));
-    command.addOption(CliStrings.CREATE_DISK_STORE__WRITE_BUFFER_SIZE, String.valueOf(writeBufferSize));
-    command.addOption(CliStrings.CREATE_DISK_STORE__DISK_USAGE_WARNING_PCT, String.valueOf(diskUsageWarningPercentage));
-    command.addOption(CliStrings.CREATE_DISK_STORE__DISK_USAGE_CRITICAL_PCT, String.valueOf(diskUsageCriticalPercentage));
+    command.addOption(CliStrings.CREATE_DISK_STORE__WRITE_BUFFER_SIZE,
+        String.valueOf(writeBufferSize));
+    command.addOption(CliStrings.CREATE_DISK_STORE__DISK_USAGE_WARNING_PCT,
+        String.valueOf(diskUsageWarningPercentage));
+    command.addOption(CliStrings.CREATE_DISK_STORE__DISK_USAGE_CRITICAL_PCT,
+        String.valueOf(diskUsageCriticalPercentage));
-      command.addOption(CliStrings.CREATE_DISK_STORE__GROUP, StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.CREATE_DISK_STORE__GROUP,
+          StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
-                                  @RequestParam(CliStrings.DESCRIBE_DISK_STORE__MEMBER) final String memberNameId)
-  {
+      @RequestParam(CliStrings.DESCRIBE_DISK_STORE__MEMBER) final String memberNameId) {
-                                 @RequestParam(value = CliStrings.DESTROY_DISK_STORE__GROUP, required = false) final String[] groups)
-  {
+      @RequestParam(value = CliStrings.DESTROY_DISK_STORE__GROUP,
+          required = false) final String[] groups) {
-      command.addOption(CliStrings.DESTROY_DISK_STORE__GROUP, StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));
+      command.addOption(CliStrings.DESTROY_DISK_STORE__GROUP,
+          StringUtils.concat(groups, StringUtils.COMMA_DELIMITER));

UPD66 UPD66