GEODE-4372: clean up RemoteOperationMessage classes (#1338)


* throw RemoteOperationException instead of ForceReattemptException when cache is closing. All ForceReattemptException throwing by RemoteOperationMessage has been removed.

* now uses SERIAL_EXECUTOR for all RemoteOperationMessages.
Previously most of these messages where processed in the partitioned message
thread pool even though most all of these messages where not partitioned.
It is possible that RemotePutAll and RemoteRemoveAll will have some trouble
being SERIAL_EXECUTOR.

* added comments for all RemoteOperationMessages describing what
they are used for

* Improved RemoteOperationMessageTest

* added a BucketTXRegionStub to calculate bucket region size on a stub.

* removed GemFireCacheImpl.getInstance call

* added RemoteOperationResponse unit test

* renamed handleAsUnexpected to handleCause

* renamed waitForCacheException to waitForRemoteResponse

* moved RemoteOperation classes to tx package


-package org.apache.geode.internal.cache.partitioned;
+package org.apache.geode.internal.cache.tx;
-import java.util.ArrayList;
-import java.util.Set;
+import org.apache.geode.distributed.DistributedMember;
+import org.apache.geode.internal.cache.InternalRegion;
-import org.apache.geode.internal.cache.RemoteOperationMessage;
- * This message is used to determine the number of Entries in a Region, or its size.
+ * This message is used by a transaction to determine the size of a region on a remote member.
-  /** query type for Entries */
-  public static final int TYPE_ENTRIES = 0;
-  /** query type for Values */
-  public static final int TYPE_VALUES = 1;
-
-  /** The list of buckets whose size is needed, if null, then all buckets */
-  private ArrayList bucketIds;
-
-  /** the type of query to perform */
-  private int queryType;
-
-   * The message sent to a set of {@link InternalDistributedMember}s to caculate the number of
-   * Entries in each of their buckets
+   * The message sent to a member to get the size of their region
-   * @param recipients members to receive the message
+   * @param recipient member to send the message to
-  private RemoteSizeMessage(Set recipients, String regionPath, ReplyProcessor21 processor,
-      int queryType) {
-    super(recipients, regionPath, processor);
-    this.queryType = queryType;
+  private RemoteSizeMessage(DistributedMember recipient, String regionPath,
+      ReplyProcessor21 processor) {
+    super((InternalDistributedMember) recipient, regionPath, processor);
-  /**
-   * @param in
-   * @throws ClassNotFoundException
-   * @throws IOException
-   */
-   * Sends a PartitionedRegion message for {@link java.util.Map#size()}ignoring any errors on send
+   * Sends a message for {@link java.util.Map#size()} ignoring any errors on send
-   * @param recipients the set of members that the size message is sent to
-   * @param r the Region that contains the bucket
+   * @param distributedMember the set of members that the size message is sent to
+   * @param r the Region to get the size of
-  public static SizeResponse send(Set recipients, LocalRegion r) {
-    return send(recipients, r, TYPE_ENTRIES);
-  }
-
-  /**
-   * sends a message to the given recipients asking for the size of either their primary bucket
-   * entries or the values sets of their primary buckets
-   *
-   * @param recipients recipients of the message
-   * @param r the local PartitionedRegion instance
-   * @param queryType either TYPE_ENTRIES or TYPE_VALUES
-   */
-  public static SizeResponse send(Set recipients, LocalRegion r, int queryType) {
-    Assert.assertTrue(recipients != null, "RemoteSizeMessage NULL recipients set");
-    SizeResponse p = new SizeResponse(r.getSystem(), recipients);
-    RemoteSizeMessage m = new RemoteSizeMessage(recipients, r.getFullPath(), p, queryType);
+  public static SizeResponse send(DistributedMember distributedMember, InternalRegion r) {
+    Assert.assertTrue(distributedMember != null, "RemoteSizeMessage NULL recipients set");
+    SizeResponse p = new SizeResponse(r.getSystem(), distributedMember);
+    RemoteSizeMessage m = new RemoteSizeMessage(distributedMember, r.getFullPath(), p);
-  /**
-   * This message may be sent to nodes before the PartitionedRegion is completely initialized due to
-   * the RegionAdvisor(s) knowing about the existance of a partitioned region at a very early part
-   * of the initialization
-   */
-  @Override
-  protected boolean failIfRegionMissing() {
-    return false;
-  }
-
-  @Override
-  public boolean isSevereAlertCompatible() {
-    // allow forced-disconnect processing for all cache op messages
-    return true;
-  }
-
-
-    int size = 0;
-    if (r != null) { // bug #43372 - NPE returned when bucket not found during tx replay
-      if (logger.isTraceEnabled(LogMarker.DM)) {
-        logger.debug("{} operateOnRegion: {}", getClass().getName(), r.getFullPath());
-      }
-      size = r.size();
-    }
+    int size = r.size();
-    buff.append("; bucketIds=").append(this.bucketIds);
-    if (queryType == TYPE_ENTRIES) {
-      buff.append("; queryType=TYPE_ENTRIES");
-    } else {
-      buff.append("; queryType=TYPE_VALUES");
-    }
-    this.bucketIds = DataSerializer.readArrayList(in);
-    this.queryType = in.readByte();
+    DataSerializer.readArrayList(in); /* read unused data for backwards compatibility */
+    in.readByte(); /* read unused data for backwards compatibility */
-    DataSerializer.writeArrayList(this.bucketIds, out);
-    out.writeByte((byte) queryType);
+    DataSerializer.writeArrayList(null, out);
+    out.writeByte(0);
-    /** Propagated exception from remote node to operation initiator */
-    /**
-     * @param in
-     * @throws ClassNotFoundException
-     * @throws IOException
-     */
-   * A processor to capture the value returned by
-   * {@link org.apache.geode.internal.cache.partitioned.GetMessage.GetReplyMessage}
+   * A processor to capture the value returned by RemoteSizeMessage
-    public SizeResponse(InternalDistributedSystem ds, Set recipients) {
-      super(ds, recipients);
+    public SizeResponse(InternalDistributedSystem ds, DistributedMember recipient) {
+      super(ds, (InternalDistributedMember) recipient);
-    /**
-     * The SizeResponse processor ignores remote exceptions by implmenting this method. Ignoring
-     * remote exceptions is acceptable since the RemoteSizeMessage is sent to all Nodes and all
-     * {@link RemoteSizeMessage.SizeReplyMessage}s are processed for each individual bucket size.
-     * The hope is that any failure due to an exception will be covered by healthy Nodes.
-     */
+    // Note that this causes GEODE-4612 and should be removed

MOV26 MOV26 UPD40 UPD40 UPD40 MOV29 INS8 UPD66 UPD43 UPD42 UPD43 UPD42 UPD43 MOV21 UPD66 UPD42 UPD66 UPD42 INS11 UPD66 UPD66 UPD42 UPD66 UPD42 UPD42 MOV43 MOV32 MOV32 UPD66 UPD43 UPD42 INS43 INS42 MOV32 INS33 INS34 UPD42 INS11 INS42 UPD42 UPD42 MOV43 UPD42 INS43 INS42 INS42 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL65 DEL66 DEL66 DEL39 DEL42 DEL44 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL44 DEL42 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL9 DEL41 DEL8 DEL31 DEL34 DEL42 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL39 DEL42 DEL11 DEL66 DEL65 DEL29 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL40 DEL65 DEL42 DEL66 DEL66 DEL40 DEL65 DEL66 DEL66 DEL65 DEL29