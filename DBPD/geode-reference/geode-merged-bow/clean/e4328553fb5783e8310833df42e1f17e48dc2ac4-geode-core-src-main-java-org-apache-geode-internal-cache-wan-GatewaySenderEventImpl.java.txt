GEODE-7971: Gw sender deliver TX events atomically to Gw receivers (#4928)

* GEODE-7971: Gw sender deliver TX events atomically to Gw receivers

A new flag is added to gateway senders: group-transaction-events.
If set to true, events for the same transaction will not be
spread across different batches, i.e. it is guaranteed that
they will be delivered inside the same batch.

In order to implement this behavior,
the last event for each transaction is marked with a new flag
and the transactionId before it is put in the sender's queue
(new flag added to GatewaySenderEvent). That way, it is possible
for the gateway senders to go through a
batch ready to be sent and verify if the last event for
each transaction is present in the batch.
If not, the gateway sender will traverse the sender queue
to get the missing events for the incomplete transactions
and once they are added to the batch, the batch will be sent.

This feature has the following restrictions:
- The group-transaction-events can only be set on
serial gateway senders with just 1 dispatcher thread
or on parallel gateway senders.
- In order to guarantee that the events of a transaction
are to not spread
across different batches, the regions involved in the
transaction must all have the same senders with the
group-transaction-events flag set to true configured.

* GEODE-7971: small fix in gwSenderFactory + extra info on config error

* GEODE-7971: Add logic for case when batches are redistributed

Also added parameter for retries when not all
events for a transaction can be read from the queue.

* GEODE-7971: Undo changes on cache*.dtd files unneeded

Also changed a couple of timeouts in test cases.

* feature/GEODE-7971: Changes after review

* feature/GEODE-7971: Simplify test JUnit test case

* GEODE-7971: Update create document and refactor test case

* GEODE-7971: Add check in serial gwsender creation with threads>1 and group-trans-events=true.

Also corrected some documentation errors.

* GEODE-7971: Add HA test cases and fix bug in SerialGatewaySenderQueue

* feature/GEODE-7971: Documentation change after review and flaxy test fix

* GEODE-7971: Doc changes after review
+import org.apache.geode.cache.TransactionId;
-
-  protected static final short VERSION = Version.GEODE_1_9_0.ordinal();
+  protected static final short VERSION = Version.getCurrentVersion().ordinal();
+  private boolean isLastEventInTransaction = true;
+  private TransactionId transactionId = null;
+
+
+   * @param isLastEventInTransaction true if the event is the last in the transaction
-      Object substituteValue) throws IOException {
-    this(operation, event, substituteValue, true);
+      Object substituteValue, boolean isLastEventInTransaction) throws IOException {
+    this(operation, event, substituteValue, true, isLastEventInTransaction);
-      Object substituteValue, boolean initialize, int bucketId) throws IOException {
-    this(operation, event, substituteValue, initialize);
+      Object substituteValue, boolean initialize, int bucketId,
+      boolean isLastEventInTransaction) throws IOException {
+    this(operation, event, substituteValue, initialize, isLastEventInTransaction);
-      boolean initialize) throws IOException {
+      boolean initialize, boolean isLastEventInTransaction) throws IOException {
+
+    this.transactionId = event.getTransactionId();
+    this.isLastEventInTransaction = isLastEventInTransaction;
+
+    this.transactionId = offHeapEvent.transactionId;
+    this.isLastEventInTransaction = offHeapEvent.isLastEventInTransaction;
+    toDataPre_GEODE_1_13_0_0(out, context);
+    boolean hasTransaction = this.transactionId != null;
+    DataSerializer.writeBoolean(hasTransaction, out);
+    if (hasTransaction) {
+      DataSerializer.writeBoolean(this.isLastEventInTransaction, out);
+      context.getSerializer().writeObject(this.transactionId, out);
+    }
+  }
+
+  public void toDataPre_GEODE_1_13_0_0(DataOutput out,
+      SerializationContext context) throws IOException {
+    fromDataPre_GEODE_1_13_0_0(in, context);
+    if (version >= Version.GEODE_1_13_0.ordinal()) {
+      boolean hasTransaction = DataSerializer.readBoolean(in);
+      if (hasTransaction) {
+        this.isLastEventInTransaction = DataSerializer.readBoolean(in);
+        this.transactionId = context.getDeserializer().readObject(in);
+      }
+    }
+  }
+
+  public void fromDataPre_GEODE_1_13_0_0(DataInput in, DeserializationContext context)
+      throws IOException, ClassNotFoundException {
-        .append(";bucketId=").append(this.bucketId).append(";isConcurrencyConflict=")
-        .append(this.isConcurrencyConflict).append("]");
+        .append(";bucketId=").append(this.bucketId)
+        .append(";isConcurrencyConflict=").append(this.isConcurrencyConflict)
+        .append(";transactionId=").append(this.transactionId)
+        .append(";isLastEventInTransaction=").append(this.isLastEventInTransaction)
+        .append("]");
+    // - the transactionId because it is is a reference
-    size += 28;
+    // _transactionId reference = 4 bytes
+    size += 32;
-    size += 30;
+    // boolean _hasTransaction = 1 byte
+    // boolean _isLastEventInTransaction = 1 byte
+    size += 32;
+  public boolean isLastEventInTransaction() {
+    return isLastEventInTransaction;
+  }
+
+  public TransactionId getTransactionId() {
+    return transactionId;
+  }
+
-    return new Version[] {Version.GEODE_1_9_0};
+    return new Version[] {Version.GEODE_1_9_0, Version.GEODE_1_13_0};

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS43 INS59 INS44 INS44 INS44 MOV78 INS83 INS39 INS42 INS44 INS44 INS43 INS8 UPD42 MOV78 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 UPD42 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS9 INS42 INS42 INS33 INS65 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS21 INS21 INS21 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS25 INS43 INS42 INS43 INS42 INS42 INS42 INS21 INS25 INS41 INS42 INS41 INS32 INS42 INS66 INS42 INS42 INS7 INS7 INS7 INS7 INS42 INS42 INS32 INS39 INS59 INS32 INS42 INS8 INS42 INS42 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS22 INS32 INS22 INS42 INS22 INS40 INS22 INS40 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS60 INS25 INS32 INS42 INS45 UPD34 UPD34 INS52 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS33 INS32 INS32 INS40 INS42 INS39 INS59 INS42 INS8 INS32 INS42 INS22 INS40 INS52 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS22 INS42 INS42 INS32 INS21 INS21 INS32 INS42 INS45 INS52 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS7 INS7 MOV32 INS42 INS22 INS22 INS32 INS22 INS32 UPD45 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS32 INS42 INS42 INS42 INS42 DEL40