Merge pull request #2421 from balesh2/rename-whitelist-and-blacklist

GEODE-5685: change whitelist and blacklist
-  protected static final HashMap<String, Set> DEFAULT_WHITELIST = createWhiteList();
+  protected static final HashMap<String, Set> DEFAULT_ACCEPTLIST = createAcceptList();
-  private final HashMap<String, Set> whiteListedMethodsToClass;
+  private final HashMap<String, Set> acceptListedMethodsToClass;
-    whiteListedMethodsToClass = DEFAULT_WHITELIST;
+    acceptListedMethodsToClass = DEFAULT_ACCEPTLIST;
-  private static HashMap<String, Set> createWhiteList() {
-    HashMap<String, Set> whiteListMap = new HashMap();
+  private static HashMap<String, Set> createAcceptList() {
+    HashMap<String, Set> acceptListMap = new HashMap();
-    whiteListMap.put("toString", objectCallers);
-    whiteListMap.put("equals", objectCallers);
-    whiteListMap.put("compareTo", objectCallers);
+    acceptListMap.put("toString", objectCallers);
+    acceptListMap.put("equals", objectCallers);
+    acceptListMap.put("compareTo", objectCallers);
-    whiteListMap.put("booleanValue", booleanCallers);
+    acceptListMap.put("booleanValue", booleanCallers);
-    whiteListMap.put("byteValue", numericCallers);
-    whiteListMap.put("intValue", numericCallers);
-    whiteListMap.put("doubleValue", numericCallers);
-    whiteListMap.put("floatValue", numericCallers);
-    whiteListMap.put("longValue", numericCallers);
-    whiteListMap.put("shortValue", numericCallers);
+    acceptListMap.put("byteValue", numericCallers);
+    acceptListMap.put("intValue", numericCallers);
+    acceptListMap.put("doubleValue", numericCallers);
+    acceptListMap.put("floatValue", numericCallers);
+    acceptListMap.put("longValue", numericCallers);
+    acceptListMap.put("shortValue", numericCallers);
-    whiteListMap.put("get", mapCallers);
-    whiteListMap.put("entrySet", mapCallers);
-    whiteListMap.put("keySet", mapCallers);
-    whiteListMap.put("values", mapCallers);
-    whiteListMap.put("getEntries", mapCallers);
-    whiteListMap.put("getValues", mapCallers);
-    whiteListMap.put("containsKey", mapCallers);
+    acceptListMap.put("get", mapCallers);
+    acceptListMap.put("entrySet", mapCallers);
+    acceptListMap.put("keySet", mapCallers);
+    acceptListMap.put("values", mapCallers);
+    acceptListMap.put("getEntries", mapCallers);
+    acceptListMap.put("getValues", mapCallers);
+    acceptListMap.put("containsKey", mapCallers);
-    whiteListMap.put("getKey", mapEntryCallers);
-    whiteListMap.put("getValue", mapEntryCallers);
+    acceptListMap.put("getKey", mapEntryCallers);
+    acceptListMap.put("getValue", mapEntryCallers);
-    whiteListMap.put("after", dateCallers);
-    whiteListMap.put("before", dateCallers);
-    whiteListMap.put("getNanos", dateCallers);
-    whiteListMap.put("getTime", dateCallers);
+    acceptListMap.put("after", dateCallers);
+    acceptListMap.put("before", dateCallers);
+    acceptListMap.put("getNanos", dateCallers);
+    acceptListMap.put("getTime", dateCallers);
-    whiteListMap.put("charAt", stringCallers);
-    whiteListMap.put("codePointAt", stringCallers);
-    whiteListMap.put("codePointBefore", stringCallers);
-    whiteListMap.put("codePointCount", stringCallers);
-    whiteListMap.put("compareToIgnoreCase", stringCallers);
-    whiteListMap.put("concat", stringCallers);
-    whiteListMap.put("contains", stringCallers);
-    whiteListMap.put("contentEquals", stringCallers);
-    whiteListMap.put("endsWith", stringCallers);
-    whiteListMap.put("equalsIgnoreCase", stringCallers);
-    whiteListMap.put("getBytes", stringCallers);
-    whiteListMap.put("hashCode", stringCallers);
-    whiteListMap.put("indexOf", stringCallers);
-    whiteListMap.put("intern", stringCallers);
-    whiteListMap.put("isEmpty", stringCallers);
-    whiteListMap.put("lastIndexOf", stringCallers);
-    whiteListMap.put("length", stringCallers);
-    whiteListMap.put("matches", stringCallers);
-    whiteListMap.put("offsetByCodePoints", stringCallers);
-    whiteListMap.put("regionMatches", stringCallers);
-    whiteListMap.put("replace", stringCallers);
-    whiteListMap.put("replaceAll", stringCallers);
-    whiteListMap.put("replaceFirst", stringCallers);
-    whiteListMap.put("split", stringCallers);
-    whiteListMap.put("startsWith", stringCallers);
-    whiteListMap.put("substring", stringCallers);
-    whiteListMap.put("toCharArray", stringCallers);
-    whiteListMap.put("toLowerCase", stringCallers);
-    whiteListMap.put("toUpperCase", stringCallers);
-    whiteListMap.put("trim", stringCallers);
+    acceptListMap.put("charAt", stringCallers);
+    acceptListMap.put("codePointAt", stringCallers);
+    acceptListMap.put("codePointBefore", stringCallers);
+    acceptListMap.put("codePointCount", stringCallers);
+    acceptListMap.put("compareToIgnoreCase", stringCallers);
+    acceptListMap.put("concat", stringCallers);
+    acceptListMap.put("contains", stringCallers);
+    acceptListMap.put("contentEquals", stringCallers);
+    acceptListMap.put("endsWith", stringCallers);
+    acceptListMap.put("equalsIgnoreCase", stringCallers);
+    acceptListMap.put("getBytes", stringCallers);
+    acceptListMap.put("hashCode", stringCallers);
+    acceptListMap.put("indexOf", stringCallers);
+    acceptListMap.put("intern", stringCallers);
+    acceptListMap.put("isEmpty", stringCallers);
+    acceptListMap.put("lastIndexOf", stringCallers);
+    acceptListMap.put("length", stringCallers);
+    acceptListMap.put("matches", stringCallers);
+    acceptListMap.put("offsetByCodePoints", stringCallers);
+    acceptListMap.put("regionMatches", stringCallers);
+    acceptListMap.put("replace", stringCallers);
+    acceptListMap.put("replaceAll", stringCallers);
+    acceptListMap.put("replaceFirst", stringCallers);
+    acceptListMap.put("split", stringCallers);
+    acceptListMap.put("startsWith", stringCallers);
+    acceptListMap.put("substring", stringCallers);
+    acceptListMap.put("toCharArray", stringCallers);
+    acceptListMap.put("toLowerCase", stringCallers);
+    acceptListMap.put("toUpperCase", stringCallers);
+    acceptListMap.put("trim", stringCallers);
-    return whiteListMap;
+    return acceptListMap;
-  protected HashMap<String, Set> getWhiteList() {
-    return whiteListedMethodsToClass;
+  protected HashMap<String, Set> getAcceptList() {
+    return acceptListedMethodsToClass;
-  boolean isWhitelisted(Method method) {
+  boolean isAcceptlisted(Method method) {
-    Set<Class> allowedClasses = whiteListedMethodsToClass.get(methodName);
+    Set<Class> allowedClasses = acceptListedMethodsToClass.get(methodName);
-    if (!isWhitelisted(method)) {
+    if (!isAcceptlisted(method)) {

UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42