GEODE-7556: remove membership dependencies on geode-core exeptions (#4502)

* GEODE-7556: remove membership dependencies on geode-core exeptions

Removed use of geode-core exceptions from membership. DistributionImpl now converts membership exceptions into geode-core exceptions where necessary.

Except for MembershipClosedException the new membership exceptions are all checked exceptions. This let me isolate where the exceptions are used and ensure that they're changed into appropriate geode-core exceptions.

MemberShunnedException is now in the membership module instead of the TcpConduit module. It, too, is a checked exception.

CancelCriterion is also removed from use in the membership module. The Stopper in Services.java doesn't need to be a CancelCriterion to function properly.

Several tests had to be modified to handle our stress-test environement.

* use checkCancelled method

-import org.apache.geode.CancelException;
-import org.apache.geode.SystemConnectException;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberStartupException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipClosedException;
+import org.apache.geode.distributed.internal.membership.gms.api.MembershipConfigurationException;
-      } catch (CancelException e) {
+      } catch (MembershipClosedException e) {
-  public void start() {
+  public void start() throws MemberStartupException {
-    ServerSocket serverSocket;
-    try {
-      serverSocket = SocketCreatorFactory
-          .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER)
-          .createServerSocketUsingPortRange(socketAddress, 50/* backlog */, true/* isBindAddress */,
-              false/* useNIO */, 65536/* tcpBufferSize */, portRange, false);
-      socketPort = serverSocket.getLocalPort();
-    } catch (IOException | SystemConnectException e) {
-      throw new GemFireConfigException(
-          "Unable to allocate a failure detection port in the membership-port range", e);
-    }
-    return serverSocket;
+    ServerSocket newSocket = SocketCreatorFactory
+        .getSocketCreatorForComponent(SecurableCommunicationChannel.CLUSTER)
+        .createServerSocketUsingPortRange(socketAddress, 50/* backlog */, true/* isBindAddress */,
+            false/* useNIO */, 65536/* tcpBufferSize */, portRange, false);
+    socketPort = newSocket.getLocalPort();
+    return newSocket;
-          } catch (CancelException e) {
+          } catch (MembershipClosedException e) {
-          } catch (CancelException e) {
+          } catch (MembershipClosedException e) {
-  public void init(Services<ID> s) {
+  public void init(Services<ID> s) throws MembershipConfigurationException {
-        } catch (CancelException e) {
+        } catch (MembershipClosedException e) {
-        } catch (CancelException e) {
+        } catch (MembershipClosedException e) {
-    } catch (CancelException e) {
+    } catch (MembershipClosedException e) {

MOV26 MOV26 INS26 UPD40 UPD40 INS40 INS43 MOV8 INS43 INS42 INS60 INS41 INS42 MOV43 INS59 INS42 INS42 MOV32 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 DEL42 DEL7 DEL21 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8