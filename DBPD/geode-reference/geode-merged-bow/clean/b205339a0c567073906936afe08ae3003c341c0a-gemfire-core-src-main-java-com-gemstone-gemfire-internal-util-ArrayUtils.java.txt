Merge branch 'feature/GEODE-8' into develop

+import java.util.Arrays;
+
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
+  public static String objectRefString(Object obj) {
+    return obj != null ? obj.getClass().getSimpleName() + '@'
+        + Integer.toHexString(System.identityHashCode(obj)) : "(null)";
+  }
+
+  public static void objectRefString(Object obj, StringBuilder sb) {
+    if (obj != null) {
+      sb.append(obj.getClass().getSimpleName()).append('@')
+          .append(Integer.toHexString(System.identityHashCode(obj)));
+    }
+    else {
+      sb.append("(null)");
+    }
+  }
+
+  /** Get proper string for an object including arrays. */
+  public static String objectString(Object obj) {
+    StringBuilder sb = new StringBuilder();
+    objectString(obj, sb);
+    return sb.toString();
+  }
+
+  /** Get proper string for an object including arrays. */
+  public static void objectString(Object obj, StringBuilder sb) {
+    if (obj instanceof Object[]) {
+      sb.append('(');
+      boolean first = true;
+      for (Object o : (Object[])obj) {
+        if (!first) {
+          sb.append(',');
+        }
+        else {
+          first = false;
+        }
+        objectString(o, sb);
+      }
+      sb.append(')');
+    }
+    else {
+      objectStringWithBytes(obj, sb);
+    }
+  }
+
+  /**
+   * Get proper string for an an object including arrays with upto one dimension
+   * of arrays.
+   */
+  public static String objectStringNonRecursive(@Unretained Object obj) {
+    StringBuilder sb = new StringBuilder();
+    objectStringNonRecursive(obj, sb);
+    return sb.toString();
+  }  
+  
+  public static boolean areByteArrayArrayEquals(byte[][] v1, byte[][] v2) {
+    boolean areEqual = false;
+    if (v1.length == v2.length) {
+      areEqual = true;
+      for (int index = 0; index < v1.length; ++index) {
+        if (!Arrays.equals(v1[index], v2[index])) {
+          areEqual = false;
+          break;
+        }
+      }
+    }
+    return areEqual;
+  }
+
+  /**
+   * Get proper string for an an object including arrays with upto one dimension
+   * of arrays.
+   */
+  public static void objectStringNonRecursive(@Unretained Object obj, StringBuilder sb) {
+    if (obj instanceof Object[]) {
+      sb.append('(');
+      boolean first = true;
+      for (Object o : (Object[])obj) {
+        if (!first) {
+          sb.append(',');
+          sb.append(o);
+        }
+        else {
+          first = false;
+          // for SQLFire show the first byte[] for byte[][] storage
+          objectStringWithBytes(o, sb);
+        }
+      }
+      sb.append(')');
+    }
+    else {
+      objectStringWithBytes(obj, sb);
+    }
+  }
+
+  private static void objectStringWithBytes(@Unretained Object obj, StringBuilder sb) {
+    if (obj instanceof byte[]) {
+      sb.append('(');
+      boolean first = true;
+      final byte[] bytes = (byte[])obj;
+      int numBytes = 0;
+      for (byte b : bytes) {
+        if (!first) {
+          sb.append(',');
+        }
+        else {
+          first = false;
+        }
+        sb.append(b);
+        // terminate with ... for large number of bytes
+        if (numBytes++ >= 5000 && numBytes < bytes.length) {
+          sb.append(" ...");
+          break;
+        }
+      }
+      sb.append(')');
+    }
+    else {
+      sb.append(obj);
+    }
+  }
+
-

INS26 INS26 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS25 INS65 INS42 INS43 INS42 INS60 INS21 INS41 INS65 INS43 INS42 INS43 INS42 INS25 INS65 INS42 INS78 INS43 INS42 INS60 INS21 INS41 INS5 INS42 INS5 INS42 INS60 INS25 INS41 INS65 INS78 INS43 INS42 INS43 INS42 INS25 INS78 INS43 INS42 INS43 INS42 INS25 INS42 INS16 INS42 INS42 INS27 INS8 INS8 INS66 INS42 INS43 INS59 INS32 INS32 INS66 INS42 INS42 INS62 INS8 INS8 INS66 INS66 INS42 INS42 INS43 INS59 INS32 INS32 INS39 INS85 INS85 INS39 INS85 INS85 INS39 INS59 INS27 INS8 INS42 INS66 INS66 INS42 INS42 INS42 INS62 INS8 INS8 INS42 INS42 INS42 INS62 INS8 INS8 INS27 INS27 INS45 INS42 INS33 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS21 INS60 INS70 INS21 INS21 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS40 INS40 INS21 INS24 INS42 INS5 INS21 INS60 INS70 INS21 INS21 INS42 INS5 INS21 INS60 INS60 INS60 INS70 INS21 INS21 INS42 INS33 INS32 INS13 INS32 INS32 INS32 INS43 INS43 INS85 INS32 INS39 INS59 INS44 INS11 INS8 INS32 INS32 INS43 INS7 INS58 INS27 INS38 INS8 INS43 INS85 INS32 INS39 INS59 INS44 INS11 INS8 INS32 INS32 INS39 INS85 INS32 INS39 INS59 INS83 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS32 INS32 INS32 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS13 INS42 INS9 INS43 INS42 INS5 INS42 INS25 INS21 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS9 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS42 INS42 INS13 INS42 INS9 INS43 INS42 INS5 INS42 INS25 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS9 INS39 INS85 INS42 INS11 INS42 INS34 INS39 INS42 INS25 INS21 INS25 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS13 INS42 INS42 INS32 INS42 INS43 INS85 INS38 INS8 INS8 INS32 INS42 INS34 INS38 INS8 INS42 INS43 INS85 INS38 INS8 INS8 INS5 INS42 INS38 INS8 INS8 INS32 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS32 INS21 INS10 INS42 INS42 INS21 INS21 INS21 INS21 INS39 INS85 INS42 INS21 INS21 INS42 INS42 INS42 INS27 INS27 INS21 INS10 INS32 INS42 INS32 INS7 INS42 INS42 INS2 INS2 INS7 INS32 INS32 INS7 INS32 INS32 INS7 INS37 INS34 INS42 INS40 INS32 INS42 INS42 INS42 INS42 INS13 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS13 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS13 INS42 INS9 INS42 INS42 INS42 INS45