Merge branch 'develop' into feature/GEODE-3109

+import org.apache.geode.distributed.internal.membership.gms.membership.HostAddress;
-  private final List<InetSocketAddress> locators;
+  private final List<HostAddress> locators;
+  private transient NetView recoveredView;
+
+  private volatile boolean isCoordinator;
+
-      this.locators = new ArrayList<>(0);
+      this.locators = new ArrayList<HostAddress>(0);
+      } else if (localAddress != null) {
+        synchronized (this.registrants) {
+          this.registrants.add(localAddress);
+        }
+    this.recoveredView = null;
+  @Override
+  public void setIsCoordinator(boolean isCoordinator) {
+    this.isCoordinator = isCoordinator;
+  }
+        if (v == null) {
+          v = this.recoveredView;
+        }
+
+        synchronized (registrants) {
+          registrants.add(findRequest.getMemberID());
+        }
-          int viewId = v.getViewId();
-          if (viewId > findRequest.getLastViewId()) {
+
+          if (v.getViewId() > findRequest.getLastViewId()) {
-            registrants.add(findRequest.getMemberID());
+          if (isCoordinator) {
+            coord = localAddress;
+            InternalDistributedMember viewCoordinator = null;
+            if (v != null) {
+              viewCoordinator = v.getCoordinator();
+            }
+            fromView = viewCoordinator != null && !viewCoordinator.equals(localAddress);
+            if (!fromView) {
+              logger.info("This member is becoming coordinator");
+              v = null;
+            }
+          }
-          if (view != null) {
-            coordPk = (byte[]) view.getPublicKey(coord);
+          if (v != null) {
+            coordPk = (byte[]) v.getPublicKey(coord);
-          response = new FindCoordinatorResponse(coord, localAddress, fromView, view,
+          response = new FindCoordinatorResponse(coord, localAddress, fromView, v,
-    if (!recoverFromOthers()) {
+    if (!recoverFromOtherLocators()) {
-  private boolean recoverFromOthers() {
-    for (InetSocketAddress other : this.locators) {
-      if (recover(other)) {
+  private boolean recoverFromOtherLocators() {
+    for (HostAddress other : this.locators) {
+      if (recover(other.getSocketInetAddress())) {
-      this.view = (NetView) o;
-      List<InternalDistributedMember> members = new ArrayList<>(view.getMembers());
+      recoveredView = (NetView) o;
+      recoveredView.setViewId(-1); // this is not a valid view so it shouldn't have a usable Id
+      List<InternalDistributedMember> members = new ArrayList<>(recoveredView.getMembers());
-          view.remove(member);
+          recoveredView.remove(member);
-      logger.info("Peer locator initial membership is " + view);
+      logger.info("Peer locator recovered membership is " + recoveredView);

INS26 INS40 INS23 INS23 INS31 UPD74 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS8 UPD42 UPD43 INS42 INS42 INS42 INS21 INS42 INS39 INS42 INS21 UPD42 INS7 INS7 INS22 INS33 INS22 INS42 UPD43 INS21 INS25 INS52 INS42 INS52 INS42 UPD42 UPD42 INS32 INS27 INS8 INS32 INS42 INS42 INS42 INS38 UPD74 INS42 INS33 INS51 INS25 INS51 MOV42 INS42 INS34 UPD45 UPD42 INS43 INS22 INS8 INS27 INS8 INS42 INS8 UPD42 INS42 INS52 INS42 INS21 INS42 INS33 INS21 MOV21 INS25 INS32 INS7 INS42 INS8 UPD42 INS22 INS42 INS42 INS42 INS22 MOV32 INS21 INS60 INS25 INS21 INS25 UPD42 INS52 INS42 INS52 INS42 INS7 INS43 INS59 INS27 INS8 INS7 INS38 INS8 UPD42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS21 INS42 INS27 INS42 INS21 INS21 INS7 INS27 INS38 INS32 INS7 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS45 INS42 INS33 UPD42 INS42 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22