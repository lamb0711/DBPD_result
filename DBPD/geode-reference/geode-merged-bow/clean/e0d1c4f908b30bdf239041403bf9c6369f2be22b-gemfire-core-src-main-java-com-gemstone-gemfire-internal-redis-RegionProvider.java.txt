Merge remote-tracking branch 'origin/develop' into feature/GEODE-77

+import java.util.Map.Entry;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+import com.gemstone.gemfire.cache.RegionShortcut;
+import com.gemstone.gemfire.cache.query.QueryInvalidException;
+import com.gemstone.gemfire.cache.query.RegionNotFoundException;
-
-public class RegionCache implements Closeable {
+/**
+ * This class stands between {@link Executor} and {@link Cache#getRegion(String)}.
+ * This is needed because some keys for Redis represented as a {@link Region} in
+ * {@link GemFireRedisServer} come with additional state. Therefore getting, creating,
+ * or destroying a {@link Region} needs to be synchronized, which is done away with
+ * and abstracted by this class.
+ * 
+ * @author Vitaly Gavrilov
+ *
+ */
+public class RegionProvider implements Closeable {
-   * This is the {@link RedisDataType#REDIS_LIST} meta data {@link Region}. Here each list
-   * stores the index of the head and tail of the list
-   */
-  private final Region<String, Integer> listsMetaRegion;
-
-  /**
+  private final RegionShortcut defaultRegionType;
+  private final ConcurrentHashMap<String, Lock> locks;
+  private final LogWriter logger;
-  public RegionCache(Region<ByteArrayWrapper, ByteArrayWrapper> stringsRegion, Region<ByteArrayWrapper, HyperLogLogPlus> hLLRegion, Region<String, RedisDataType> redisMetaRegion, Region<String, Integer> listsMetaRegion, ConcurrentMap<ByteArrayWrapper, ScheduledFuture<?>> expirationsMap, ScheduledExecutorService expirationExecutor) {
-    if (stringsRegion == null || hLLRegion == null || redisMetaRegion == null || listsMetaRegion == null)
+  public RegionProvider(Region<ByteArrayWrapper, ByteArrayWrapper> stringsRegion, Region<ByteArrayWrapper, HyperLogLogPlus> hLLRegion, Region<String, RedisDataType> redisMetaRegion, ConcurrentMap<ByteArrayWrapper, ScheduledFuture<?>> expirationsMap, ScheduledExecutorService expirationExecutor, RegionShortcut defaultShortcut) {
+    if (stringsRegion == null || hLLRegion == null || redisMetaRegion == null)
-    this.listsMetaRegion = listsMetaRegion;
+    this.defaultRegionType = defaultShortcut;
+    this.locks = new ConcurrentHashMap<String, Lock>();
+    this.logger = this.cache.getLogger();
-    cancelKeyExpiration(key);
-    this.regions.remove(key);
+    Lock lock = this.locks.get(key.toString());
+    boolean locked = false;
+    try {
+      locked = lock.tryLock();
+      // If we cannot get the lock we ignore this remote event, this key has local event
+      // that started independently, ignore this event to prevent deadlock
+      if (locked) {
+        cancelKeyExpiration(key);
+        removeRegionState(key, type);
+      }
+    } finally {
+      if (locked) {
+        lock.unlock();
+      }
+    }
-    metaRemoveEntry(key);
+    Lock lock = this.locks.get(key.toString());
-      if (type == RedisDataType.REDIS_STRING) {
-        return this.stringsRegion.remove(key) != null;
-      } else if (type == RedisDataType.REDIS_HLL) {
-        return this.hLLRegion.remove(key) != null;
-      } else {
-        return destroyRegion(key, type);
+      if (lock != null)  {// Strings/hlls will not have locks
+        lock.lock();
-    } catch (Exception exc) {
-      return false;
+      metaRemoveEntry(key);
+      try {
+        if (type == RedisDataType.REDIS_STRING) {
+          return this.stringsRegion.remove(key) != null;
+        } else if (type == RedisDataType.REDIS_HLL) {
+          return this.hLLRegion.remove(key) != null;
+        } else {
+          return destroyRegion(key, type);
+        }
+      } catch (Exception exc) {
+        return false;
+      } finally {
+        if (cancelExpiration)
+          cancelKeyExpiration(key);
+        else
+          removeKeyExpiration(key);
+        if (lock != null)
+          this.locks.remove(key.toString());
+      }
-      if (cancelExpiration)
-        cancelKeyExpiration(key);
-      else
-        removeKeyExpiration(key);
+      if (lock != null) {
+        lock.unlock();
+      }
-  public Region<?, ?> createRemoteRegionLocally(ByteArrayWrapper key, RedisDataType type) {
-    return getOrCreateRegion0(key, type, null, false);
+  public void createRemoteRegionLocally(ByteArrayWrapper key, RedisDataType type) {
+    if (type == null || type == RedisDataType.REDIS_STRING || type == RedisDataType.REDIS_HLL)
+      return;
+    Region<?, ?> r = this.regions.get(key);
+    if (r != null)
+      return;
+    if (!this.regions.contains(key)) {
+      String stringKey = key.toString();
+      Lock lock = this.locks.get(stringKey);
+      if (lock == null) {
+        this.locks.putIfAbsent(stringKey, new ReentrantLock());
+        lock = this.locks.get(stringKey);
+      }
+      boolean locked = false;
+      try {
+        locked = lock.tryLock();
+        // If we cannot get the lock then this remote even may have been initialized
+        // independently on this machine, so if we wait on the lock it is more than
+        // likely we will deadlock just to do the same task, this even can be ignored
+        if (locked) {
+          r = cache.getRegion(key.toString());
+          if (type == RedisDataType.REDIS_LIST)
+            doInitializeList(key, r);
+          else if (type == RedisDataType.REDIS_SORTEDSET)
+            doInitializeSortedSet(key, r);
+          this.regions.put(key, r);
+        }
+      } finally {
+        if (locked) {
+          lock.unlock();
+        }
+      }
+    }
+    if (r != null && r.isDestroyed()) {
+      removeKey(key, type);
+      r = null;
+    }
-      synchronized (stringKey) { // This object will be interned across the vm
+      Lock lock = this.locks.get(stringKey);
+      if (lock == null) {
+        this.locks.putIfAbsent(stringKey, new ReentrantLock());
+        lock = this.locks.get(stringKey);
+      }
+
+      try {
+        lock.lock();
-            r = createRegionGlobally(stringKey);
-            if (addToMeta)
-              metaPut(key, type);
-            if (type == RedisDataType.REDIS_LIST)
-              doInitializeList(key, r.getFullPath());
-            else if (type == RedisDataType.REDIS_SORTEDSET)
-              doInitializeSortedSet(key, r);
-            this.regions.put(key, r);
+            Exception concurrentCreateDestroyException = null;
+            do {
+              concurrentCreateDestroyException = null;
+              r = createRegionGlobally(stringKey);
+              try {
+                if (type == RedisDataType.REDIS_LIST)
+                  doInitializeList(key, r);
+                else if (type == RedisDataType.REDIS_SORTEDSET)
+                  doInitializeSortedSet(key, r);
+              } catch (QueryInvalidException e) {
+                if (e.getCause() instanceof RegionNotFoundException) {
+                  concurrentCreateDestroyException = e;
+                }
+              }
+            } while(concurrentCreateDestroyException != null);
+            this.regions.put(key, r);            
+            if (addToMeta) {
+              RedisDataType existingType = metaPutIfAbsent(key, type);
+              if (existingType != null && existingType != type)
+                throw new RedisDataTypeMismatchException("The key name \"" + key + "\" is already used by a " + existingType.toString());
+            }
+      } finally {
+        lock.unlock();
+  /**
+   * SYNCHRONIZE EXTERNALLY OF this.locks.get(key.toString())!!!!!
+   * 
+   * @param key Key of region to destroy
+   * @param type Type of region to destroyu
+   * @return Flag if destroyed
+   */
-    String stringKey = key.toString();
-      synchronized (stringKey) { // This object will be interned across the vm
-        try {
-          r.destroyRegion();
-        } catch (Exception e) {
-          return false;
-        } finally {
-          this.preparedQueries.remove(key);
-          metaRemoveEntry(key);
-          if (type == RedisDataType.REDIS_LIST) {
-            this.listsMetaRegion.remove(stringKey + "head");
-            this.listsMetaRegion.remove(stringKey + "tail");
-          }
-          this.regions.remove(key);
-        }
+      try {
+        r.destroyRegion();
+      } catch (Exception e) {
+        return false;
+      } finally {
+        removeRegionState(key, type);
+  /**
+   * Do not call this method if you are not synchronized on the lock associated with this key
+   * 
+   * @param key Key of region to remove
+   * @param type Type of key to remove all state
+   */
+  private void removeRegionState(ByteArrayWrapper key, RedisDataType type) {
+    this.preparedQueries.remove(key);
+    this.regions.remove(key);
+  }
+
-      queryService.createIndex("scoreIndex", "value.score", r.getFullPath() + ".entrySet entry");
+      queryService.createIndex("scoreIndex", "entry.value.score", r.getFullPath() + ".entrySet entry");
-        LogWriter logger = cache.getLogger();
-  private void doInitializeList(ByteArrayWrapper key, String fullpath) {
-    listsMetaRegion.put(key + "head", Integer.valueOf(0));
-    listsMetaRegion.put(key + "tail", Integer.valueOf(0));
+  private void doInitializeList(ByteArrayWrapper key, Region r) {
+    r.put("head", Integer.valueOf(0));
+    r.put("tail", Integer.valueOf(0));
+    String fullpath = r.getFullPath();
-    Result result = cliCmds.createRegion(key, GemFireRedisServer.DEFAULT_REGION_TYPE, null, null, true, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
-    if (result.getStatus() == Status.ERROR && r == null) {
-      String err = "";
-      while(result.hasNextLine())
-        err += result.nextLine();
-      throw new RegionCreationException(err);
-    }
-    if (r == null)
-      throw new RegionCreationException();
+    if (r != null) return r;
+    do {
+      Result result = cliCmds.createRegion(key, defaultRegionType, null, null, true, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
+      r = cache.getRegion(key);
+      if (result.getStatus() == Status.ERROR && r == null) {
+        String err = "";
+        while(result.hasNextLine())
+          err += result.nextLine();
+        if (this.logger.errorEnabled()) {
+          this.logger.error("Region creation failure- "+ err);
+        }
+        throw new RegionCreationException(err);
+      }
+    } while(r == null); // The region can be null in the case that it is concurrently destroyed by
+    // a remote even triggered internally by Geode
+    /*
+    if (query instanceof ListQuery) {
+      return this.queryService.newQuery(((ListQuery)query).getQueryString(this.regions.get(key).getFullPath()));
+    } else {
+      return this.queryService.newQuery(((SortedSetQuery)query).getQueryString(this.regions.get(key).getFullPath()));
+    }
+    */
-  public Region<String, Integer> getListsMetaRegion() {
-    return this.listsMetaRegion;
-  }
-
-
+  public String dumpRegionsCache() {
+    StringBuilder builder = new StringBuilder();
+    for (Entry<ByteArrayWrapper, Region<?, ?>> e : this.regions.entrySet()) {
+      builder.append(e.getKey() + " --> {" + e.getValue() + "}\n");
+    }
+    return builder.toString();
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS29 INS83 INS42 INS23 INS23 INS23 MOV44 INS31 MOV65 MOV66 INS65 MOV83 MOV83 INS43 INS59 INS83 INS83 UPD74 MOV74 MOV59 INS83 INS83 MOV43 INS59 UPD42 MOV21 INS8 INS39 INS29 INS29 INS83 INS39 INS42 INS44 INS44 MOV8 MOV21 MOV43 INS42 INS8 UPD66 INS65 INS66 INS66 INS66 UPD66 INS65 UPD66 INS66 INS65 INS66 UPD66 INS66 INS42 INS42 UPD43 MOV43 UPD43 UPD42 INS42 INS43 INS42 INS21 INS21 INS60 INS60 INS54 MOV25 INS60 INS54 INS25 INS60 INS25 INS25 INS25 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS19 INS60 INS70 INS41 INS42 INS68 INS42 INS42 UPD42 UPD42 UPD42 MOV42 MOV27 INS7 INS7 INS43 INS59 INS39 INS59 INS8 INS8 INS43 INS59 MOV8 INS8 INS27 INS41 INS74 INS59 INS27 INS41 INS38 INS8 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS66 INS8 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS42 INS43 INS59 INS27 INS41 INS8 MOV27 INS43 INS59 INS44 INS32 INS8 INS32 INS42 INS42 INS69 UPD42 INS22 INS14 INS22 INS32 INS42 INS42 INS32 INS42 INS9 INS21 INS25 INS25 INS42 INS42 INS32 INS25 INS25 INS27 INS27 INS43 INS76 INS76 INS42 INS32 INS42 INS33 INS32 MOV60 INS60 INS25 INS60 INS54 INS27 INS32 INS21 INS21 INS60 INS25 INS54 INS54 UPD42 INS45 UPD42 INS45 INS42 INS42 INS32 INS42 INS33 INS42 MOV60 INS21 MOV25 INS42 INS42 INS14 INS74 INS42 INS22 INS42 INS21 INS42 INS42 MOV43 UPD42 INS52 INS42 INS74 INS52 INS42 INS22 INS42 MOV22 UPD42 MOV42 INS32 INS7 INS42 INS8 INS42 INS8 INS22 INS42 INS32 INS27 INS8 INS27 INS8 INS27 INS27 INS42 INS40 INS42 INS22 INS42 MOV42 INS22 INS42 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS8 INS8 INS42 INS33 INS42 INS42 INS32 INS7 INS43 INS59 INS27 INS8 MOV8 INS8 MOV8 MOV12 INS8 INS42 INS42 INS7 INS43 UPD43 MOV43 UPD43 MOV43 MOV74 MOV52 UPD42 MOV42 INS32 INS43 MOV43 INS43 INS52 INS42 UPD42 MOV42 INS42 INS42 INS32 MOV21 INS21 INS21 INS52 INS42 INS42 INS42 INS42 INS33 INS21 INS25 INS42 INS33 INS21 INS42 INS33 INS42 INS40 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS9 INS21 INS25 INS25 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS21 INS21 INS21 UPD45 INS42 INS32 INS25 INS42 UPD42 UPD42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS27 INS21 INS32 INS22 INS42 INS42 INS32 INS7 INS7 INS42 INS8 INS42 INS8 INS22 INS42 INS42 INS32 INS7 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS8 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS52 INS42 INS22 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS21 MOV25 INS21 INS21 INS52 INS42 INS22 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS21 INS42 INS42 INS42 INS42 INS22 INS42 INS32 INS52 INS42 INS43 INS22 INS42 INS42 INS42 INS42 INS7 MOV27 INS32 INS32 INS52 INS42 INS43 INS22 INS42 INS42 MOV25 INS52 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS32 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS60 INS19 INS22 INS42 INS27 INS42 INS42 INS32 MOV42 INS52 INS42 INS43 INS59 INS8 INS27 INS8 INS52 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS33 INS21 MOV21 INS54 INS42 INS33 INS60 INS25 INS7 INS8 INS12 INS43 INS59 INS27 INS53 INS42 INS33 INS25 INS44 INS8 INS42 INS42 INS32 INS27 INS27 INS14 MOV27 INS21 INS25 INS43 INS42 INS25 UPD42 MOV42 MOV42 MOV42 INS42 INS33 INS42 INS42 INS43 INS27 INS32 INS27 INS21 INS42 INS62 INS8 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS43 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 DEL42 DEL42 DEL67 DEL83 DEL42 DEL29 DEL23 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL33 DEL27 DEL27 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL33 DEL9 DEL32 DEL41 DEL32 DEL21 DEL42 DEL51 DEL42 DEL54 DEL8 DEL51 DEL8 DEL42 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL45 DEL27 DEL42 DEL45 DEL27 DEL40 DEL42 DEL43 DEL14 DEL53 DEL25 DEL74 DEL42 DEL22 DEL41 DEL8