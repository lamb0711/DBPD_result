GEODE-4961: Allowing custom serialization formats with the protobuf protocol

Adding a new ValueSerializer interface that users can implement to
control the serialization format of data sent using the protobuf
protocol.

ValueSerializers are registered on the server side using the java
ServiceLoader mechanism. They are selected by the client using a new
valueFormat field in the handshake.

Renamed AuthenticationRequest to HandshakeRequest. Credentials
and valueFormat are all sent as part of a single HandshakeRequest.

Renamed the connection states to make them a little easier to
understand, and removed some duplicate states.

The new states are RequireVersion, RequireAuthentication,
AcceptMessages, InvalidSecurity, and TerminateConnection



+import java.util.Properties;
+
+import org.apache.shiro.subject.Subject;
+
-import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.internal.protocol.protobuf.v1.state.ProtobufConnectionStateProcessor;
-import org.apache.geode.internal.protocol.protobuf.v1.state.ProtobufConnectionTerminatingStateProcessor;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.NoSecurityAuthorizer;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.NotLoggedInAuthorizer;
+import org.apache.geode.internal.protocol.protobuf.v1.authentication.ShiroAuthorizer;
+import org.apache.geode.internal.protocol.protobuf.v1.state.TerminateConnection;
+import org.apache.geode.internal.security.SecurityService;
+import org.apache.geode.protocol.serialization.ValueSerializer;
-      ProtobufConnectionStateProcessor initialProtobufConnectionStateProcessor,
-      Authorizer authorizer) {
-    super(statistics, initialProtobufConnectionStateProcessor);
+      SecurityService securityService) {
+    super(statistics, securityService);
+    Authorizer authorizer = securityService.isIntegratedSecurity() ? new NotLoggedInAuthorizer()
+        : new NoSecurityAuthorizer();
-    setConnectionStateProcessor(new ProtobufConnectionTerminatingStateProcessor());
+    setState(new TerminateConnection());
-  public void setAuthorizer(Authorizer authorizer) {
-    this.authorizingLocator = new AuthorizingLocatorImpl(locator, authorizer);
+  public void authenticate(Properties properties) {
+    Subject subject = securityService.login(properties);
+    this.authorizingLocator =
+        new AuthorizingLocatorImpl(locator, new ShiroAuthorizer(securityService, subject));
+  }
+
+  @Override
+  public void setValueSerializer(ValueSerializer valueSerializer) {
+    // Do nothing, locator messages don't need a value serializer

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 UPD40 UPD40 INS40 INS40 INS31 UPD42 INS78 INS83 INS39 INS42 INS44 INS8 UPD43 UPD42 INS60 UPD43 UPD42 INS60 INS42 INS43 INS42 UPD42 UPD42 MOV43 INS59 UPD42 INS43 INS59 INS42 INS42 INS16 UPD42 INS42 INS42 INS32 INS32 INS14 INS14 UPD43 INS42 INS42 INS42 INS14 INS42 INS42 INS43 INS43 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 DEL42 DEL44 DEL42