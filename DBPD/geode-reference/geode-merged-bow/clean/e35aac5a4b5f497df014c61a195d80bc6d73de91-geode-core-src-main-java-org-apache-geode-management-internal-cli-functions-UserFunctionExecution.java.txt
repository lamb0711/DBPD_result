Merge branch 'release/1.5.0'

+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
-import java.util.Optional;
+import org.apache.logging.log4j.Logger;
+import org.apache.shiro.subject.Subject;
+
-import org.apache.geode.internal.InternalEntity;
+import org.apache.geode.internal.cache.execute.InternalFunction;
+import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.management.internal.cli.GfshParser;
+import org.apache.geode.security.AuthenticationRequiredException;
+import org.apache.geode.security.ResourcePermission;
-public class UserFunctionExecution implements Function, InternalEntity {
+public class UserFunctionExecution implements InternalFunction<Object[]> {
+  private static Logger logger = LogService.getLogger();
-  public void execute(FunctionContext context) {
+  public void execute(FunctionContext<Object[]> context) {
+    Cache cache = context.getCache();
+    DistributedMember member = cache.getDistributedSystem().getDistributedMember();
+
+    String[] functionArgs = null;
+    Object[] args = context.getArguments();
+    if (args == null) {
+      context.getResultSender().lastResult(new CliFunctionResult(member.getId(), false,
+          CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_RETRIEVE_ARGUMENTS));
+      return;
+    }
+
+    String functionId = ((String) args[0]);
+    String filterString = ((String) args[1]);
+    String resultCollectorName = ((String) args[2]);
+    String argumentsString = ((String) args[3]);
+    String onRegion = ((String) args[4]);
+    Properties credentials = (Properties) args[5];
+
+    SecurityService securityService = ((InternalCache) context.getCache()).getSecurityService();
+    boolean loginNeeded = false;
-      Cache cache = context.getCache();
-      DistributedMember member = cache.getDistributedSystem().getDistributedMember();
-      String[] functionArgs = null;
-      Object[] args = (Object[]) context.getArguments();
-      if (args == null) {
+      // if the function is executed on a server with jmx-manager that user is already logged into
+      // then we do not need to do login/logout here.
+      Subject subject = securityService.getSubject();
+      loginNeeded = subject == null || !subject.isAuthenticated();
+    } catch (AuthenticationRequiredException e) {
+      loginNeeded = true;
+    }
+
+    boolean loginSuccessful = false;
+    try {
+      if (loginNeeded) {
+        securityService.login(credentials);
+        loginSuccessful = true;
+      }
+
+      if (argumentsString != null && argumentsString.length() > 0) {
+        functionArgs = argumentsString.split(",");
+      }
+      Set<String> filters = new HashSet<>();
+      ResultCollector resultCollectorInstance = null;
+      if (resultCollectorName != null && resultCollectorName.length() > 0) {
+        resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
+            .forName(resultCollectorName).newInstance();
+      }
+      if (filterString != null && filterString.length() > 0) {
+        filters.add(filterString);
+      }
+
+      Function<?> function = FunctionService.getFunction(functionId);
+      if (function == null) {
-            .lastResult(CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_RETRIEVE_ARGUMENTS);
+            .lastResult(new CliFunctionResult(member.getId(), false,
+                (CliStrings.format(
+                    CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED,
+                    functionId))));
-      String functionId = ((String) args[0]);
-      String filterString = ((String) args[1]);
-      String resultCollectorName = ((String) args[2]);
-      String argumentsString = ((String) args[3]);
-      String onRegion = ((String) args[4]);
-      Properties credentials = (Properties) args[5];
+      // security check
+      function.getRequiredPermissions(onRegion).forEach(securityService::authorize);
-      SecurityService securityService = ((InternalCache) context.getCache()).getSecurityService();
-
-      try {
-        securityService.login(credentials);
-
-        if (argumentsString != null && argumentsString.length() > 0) {
-          functionArgs = argumentsString.split(",");
-        }
-        Set<String> filters = new HashSet<>();
-        ResultCollector resultCollectorInstance = null;
-        if (resultCollectorName != null && resultCollectorName.length() > 0) {
-          resultCollectorInstance = (ResultCollector) ClassPathLoader.getLatest()
-              .forName(resultCollectorName).newInstance();
-        }
-        if (filterString != null && filterString.length() > 0) {
-          filters.add(filterString);
-        }
-
-        Function<?> function = FunctionService.getFunction(functionId);
-        if (function == null) {
-          context.getResultSender().lastResult(CliStrings.format(
-              CliStrings.EXECUTE_FUNCTION__MSG__DOES_NOT_HAVE_FUNCTION_0_REGISTERED, functionId));
+      Execution execution = null;
+      if (onRegion != null && onRegion.length() > 0) {
+        Region region = cache.getRegion(onRegion);
+        if (region == null) {
+          context.getResultSender().lastResult(
+              new CliFunctionResult(member.getId(), false, onRegion + " does not exist"));
+        execution = FunctionService.onRegion(region);
+      } else {
+        execution = FunctionService.onMember(member);
+      }
-        // security check
-        function.getRequiredPermissions(onRegion).forEach(securityService::authorize);
+      if (execution == null) {
+        context.getResultSender()
+            .lastResult(new CliFunctionResult(member.getId(), false,
+                CliStrings.format(
+                    CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
+                    functionId, member.getId(), onRegion,
+                    CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR)));
+        return;
+      }
-        Execution execution = null;
-        if (onRegion != null && onRegion.length() > 0) {
-          Region region = cache.getRegion(onRegion);
-          if (region == null) {
-            context.getResultSender().lastResult(onRegion + "does not exist.");
-            return;
-          }
-          execution = FunctionService.onRegion(region);
-        } else {
-          execution = FunctionService.onMember(member);
-        }
+      if (resultCollectorInstance != null) {
+        execution = execution.withCollector(resultCollectorInstance);
+      }
-        if (execution == null) {
-          context.getResultSender()
-              .lastResult(CliStrings.format(
-                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_0_ON_MEMBER_1_ON_REGION_2_DETAILS_3,
-                  functionId, member.getId(), onRegion,
-                  CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_RETRIEVING_EXECUTOR));
-          return;
-        }
+      if (functionArgs != null && functionArgs.length > 0) {
+        execution = execution.setArguments(functionArgs);
+      }
+      if (filters.size() > 0) {
+        execution = execution.withFilter(filters);
+      }
-        if (resultCollectorInstance != null) {
-          execution = execution.withCollector(resultCollectorInstance);
-        }
+      List<Object> results = (List<Object>) execution.execute(function.getId()).getResult();
+      List<String> resultMessage = new ArrayList<>();
+      boolean functionSuccess = true;
-        if (functionArgs != null && functionArgs.length > 0) {
-          execution = execution.setArguments(functionArgs);
-        }
-        if (filters.size() > 0) {
-          execution = execution.withFilter(filters);
-        }
-
-        List<Object> results = (List<Object>) execution.execute(function).getResult();
-
-        StringBuilder resultMessage = new StringBuilder();
-        if (results != null) {
-          for (Object resultObj : results) {
-            if (resultObj != null) {
-              if (resultObj instanceof String) {
-                resultMessage.append(((String) resultObj));
-                resultMessage.append(GfshParser.LINE_SEPARATOR);
-              } else if (resultObj instanceof Exception) {
-                resultMessage.append(((IllegalArgumentException) resultObj).getMessage());
-              } else {
-                resultMessage.append(resultObj);
-                resultMessage.append(GfshParser.LINE_SEPARATOR);
-              }
+      if (results != null) {
+        for (Object resultObj : results) {
+          if (resultObj != null) {
+            if (resultObj instanceof Exception) {
+              resultMessage.add(((Exception) resultObj).getMessage());
+              functionSuccess = false;
+            } else {
+              resultMessage.add(resultObj.toString());
-        context.getResultSender().lastResult(resultMessage);
+      }
+      context.getResultSender().lastResult(
+          new CliFunctionResult(member.getId(), functionSuccess, resultMessage.toString()));
-      } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
-        context.getResultSender()
-            .lastResult(CliStrings.format(
-                CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
-                resultCollectorName, e.getMessage()));
-      } catch (Exception e) {
-        context.getResultSender()
-            .lastResult(CliStrings.format(
-                CliStrings.EXECUTE_FUNCTION__MSG__ERROR_IN_EXECUTING_ON_MEMBER_1_DETAILS_2,
-                functionId, member.getId(), e.getMessage()));
-      } finally {
+    } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
+      context.getResultSender()
+          .lastResult(new CliFunctionResult(member.getId(), false,
+              CliStrings.format(
+                  CliStrings.EXECUTE_FUNCTION__MSG__RESULT_COLLECTOR_0_NOT_FOUND_ERROR_1,
+                  resultCollectorName, e.getMessage())));
+    } catch (Exception e) {
+      logger.error("error executing function " + functionId, e);
+      context.getResultSender()
+          .lastResult(new CliFunctionResult(member.getId(), false, "Exception: " + e.getMessage()));
+    } finally {
+      if (loginSuccessful) {
-
-    } catch (Exception ex) {
-      context.getResultSender().lastResult(ex.getMessage());
+  public Collection<ResourcePermission> getRequiredPermissions(String regionName) {
+    return Collections.emptySet();
+  }
+
+  @Override

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS74 INS23 INS31 INS43 INS5 INS83 INS83 INS43 INS59 MOV8 INS78 INS83 INS74 INS42 INS44 INS8 UPD42 MOV42 INS43 INS85 INS42 INS42 INS32 INS74 INS60 INS54 INS60 INS42 INS43 INS43 MOV43 INS42 INS41 UPD42 MOV42 INS42 INS42 MOV43 MOV5 MOV5 INS39 INS59 INS8 INS12 INS39 INS59 INS8 INS42 INS42 INS32 MOV32 INS42 INS9 INS60 INS21 INS44 INS8 INS42 INS9 INS25 INS60 INS25 INS42 INS42 INS43 INS59 INS7 INS43 INS42 INS21 INS42 INS8 MOV74 INS74 INS39 INS59 INS21 INS42 MOV8 INS14 INS42 INS42 INS32 INS42 INS27 INS42 INS7 MOV21 INS21 INS43 MOV43 INS42 INS9 INS14 INS32 MOV32 INS43 INS32 INS9 INS40 INS42 INS42 INS27 INS38 INS42 INS9 INS7 MOV74 UPD42 MOV42 INS74 INS43 INS32 INS42 INS32 INS14 INS42 INS42 INS27 INS42 MOV32 UPD42 INS14 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS9 INS14 INS14 INS43 INS42 INS42 INS42 MOV42 INS42 INS43 INS32 INS9 MOV32 INS45 INS42 INS43 MOV32 INS9 INS27 INS42 INS42 INS43 INS32 INS9 INS36 INS43 INS32 INS9 MOV32 INS32 UPD42 MOV42 INS42 INS42 INS42 INS42 INS45 MOV32 INS42 INS42 INS42 MOV32 INS14 INS42 INS42 INS42 MOV42 INS42 INS25 INS43 INS32 INS9 INS27 MOV62 MOV8 MOV8 INS42 INS42 INS42 MOV42 UPD45 MOV45 INS21 INS7 UPD42 INS42 INS9 UPD42 INS32 MOV42 INS42 UPD43 MOV42 DEL43 DEL43 DEL11 DEL40 DEL27 DEL43 DEL43 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL62 DEL42 DEL42 DEL42 DEL11 DEL36 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL40 DEL42 DEL42 DEL32 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8