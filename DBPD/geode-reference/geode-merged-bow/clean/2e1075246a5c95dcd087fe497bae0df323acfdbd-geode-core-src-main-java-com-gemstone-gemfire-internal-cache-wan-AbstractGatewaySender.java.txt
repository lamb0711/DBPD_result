Merge branch 'release/1.0.0-incubating.M3'

+import com.gemstone.gemfire.cache.Operation;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
- * @since 7.0
+ * @since GemFire 7.0
-  
+
+  protected boolean forwardExpirationDestroy;
+
-  protected boolean isHDFSQueue;
-  
-    this.isHDFSQueue = attrs.isHDFSQueue();
-      if (!attrs.isHDFSQueue())
-        initializeEventIdIndex();
+      initializeEventIdIndex();
+    this.forwardExpirationDestroy = attrs.isForwardExpirationDestroy();
-  
-  public void createSender(Cache cache, GatewaySenderAttributes attrs){
-    this.cache = cache;
-    this.id = attrs.getId();
-    this.socketBufferSize = attrs.getSocketBufferSize();
-    this.socketReadTimeout = attrs.getSocketReadTimeout();
-    this.queueMemory = attrs.getMaximumQueueMemory();
-    this.batchSize = attrs.getBatchSize();
-    this.batchTimeInterval = attrs.getBatchTimeInterval();
-    this.isConflation = attrs.isBatchConflationEnabled();
-    this.isPersistence = attrs.isPersistenceEnabled();
-    this.alertThreshold = attrs.getAlertThreshold();
-    this.manualStart = attrs.isManualStart();
-    this.isParallel = attrs.isParallel();
-    this.isForInternalUse = attrs.isForInternalUse();
-    this.diskStoreName = attrs.getDiskStoreName();
-    this.remoteDSId = attrs.getRemoteDSId();
-    this.eventFilters = attrs.getGatewayEventFilters();
-    this.transFilters = attrs.getGatewayTransportFilters();
-    this.listeners = attrs.getAsyncEventListeners();
-    this.substitutionFilter = attrs.getGatewayEventSubstitutionFilter();
-    this.locatorDiscoveryCallback = attrs.getGatewayLocatoDiscoveryCallback();
-    this.isDiskSynchronous = attrs.isDiskSynchronous();
-    this.policy = attrs.getOrderPolicy();
-    this.dispatcherThreads = attrs.getDispatcherThreads();
-    this.parallelismForReplicatedRegion = attrs.getParallelismForReplicatedRegion();
-    //divide the maximumQueueMemory of sender equally using number of dispatcher threads.
-    //if dispatcherThreads is 1 then maxMemoryPerDispatcherQueue will be same as maximumQueueMemory of sender
-    this.maxMemoryPerDispatcherQueue = this.queueMemory / this.dispatcherThreads;
-    this.myDSId = InternalDistributedSystem.getAnyInstance().getDistributionManager().getDistributedSystemId();
-    this.serialNumber = DistributionAdvisor.createSerialNumber();
-    if (!(this.cache instanceof CacheCreation)) {
-      this.stopper = new Stopper(cache.getCancelCriterion());
-      this.senderAdvisor = GatewaySenderAdvisor.createGatewaySenderAdvisor(this);
-      if (!this.isForInternalUse()) {
-        this.statistics = new AsyncEventQueueStats(cache.getDistributedSystem(),
-            id);
-      }
-      else {// this sender lies underneath the AsyncEventQueue. Need to have
-            // AsyncEventQueueStats
-        this.statistics = new AsyncEventQueueStats(
-            cache.getDistributedSystem(), AsyncEventQueueImpl
-                .getAsyncEventQueueIdFromSenderId(id));
-      }
-      if (!attrs.isHDFSQueue())
-        initializeEventIdIndex();
-    }
-    this.isBucketSorted = attrs.isBucketSorted();
-    this.isHDFSQueue = attrs.isHDFSQueue();
-   
-  }
-  
+
-  
+
+  public boolean isForwardExpirationDestroy() {
+    return this.forwardExpirationDestroy;
+  }
+
-  public boolean getIsHDFSQueue() {
-    return this.isHDFSQueue;
-  }
-  
+  /**
+   * Check if this event can be distributed by senders.
+   * @param event
+   * @param stats
+   * @return boolean True if the event is allowed.
+   */
+  private boolean checkForDistribution(EntryEventImpl event, GatewaySenderStats stats) {
+    if (event.getRegion().getDataPolicy().equals(DataPolicy.NORMAL))
+    {
+      return false;
+    }
+    // Check for eviction and expiration events.
+    if (event.getOperation().isLocal() || event.getOperation().isExpiration()) {
+      // Check if its AEQ and is configured to forward expiration destroy events.
+      if (event.getOperation().isExpiration() && this.isAsyncEventQueue() && this.isForwardExpirationDestroy()) {
+        return true;
+      }
+      return false;
+    }
+    return true;
+  }
+
+
+
-    
-    final GatewaySenderStats stats = getStatistics();
-    stats.incEventsReceived();
-    // If the event is local (see bug 35831) or an expiration ignore it.
-    //removed the check of isLocal as in notifyGAtewayHub this has been taken care
-    if (/*event.getOperation().isLocal() || */event.getOperation().isExpiration()
-        || event.getRegion().getDataPolicy().equals(DataPolicy.NORMAL)) {
-      getStatistics().incEventsNotQueued();
+
+    // If this gateway is not running, return
+    if (!isRunning()) {
+      if (isDebugEnabled) {
+        logger.debug("Returning back without putting into the gateway sender queue");
+      }
-    
-    if (getIsHDFSQueue() && event.getOperation().isEviction()) {
-      if (logger.isDebugEnabled())
-        logger.debug("Eviction event not queued: " + event);
+
+    final GatewaySenderStats stats = getStatistics();
+    stats.incEventsReceived();
+
+    if (!checkForDistribution(event, stats)) {
+
-    // not cinsidering this filter
+    // not considering this filter
-      getStatistics().incEventsFiltered();
+      stats.incEventsFiltered();
-    
-    EntryEventImpl clonedEvent = new EntryEventImpl(event, false);
+    // released by this method or transfers ownership to TmpQueueEvent
+    @Released EntryEventImpl clonedEvent = new EntryEventImpl(event, false);
-    
+
-          callbackArg, this.getMyDSId(), allRemoteDSIds, true);
+          callbackArg, this.getMyDSId(), allRemoteDSIds);
+      // The sender may have stopped, after we have checked the status in the beginning. 
+

INS26 INS26 MOV23 INS40 INS40 INS31 INS31 MOV21 MOV83 UPD39 MOV39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 MOV25 UPD66 UPD42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 MOV25 MOV25 MOV41 INS25 INS22 INS66 INS42 INS42 INS66 INS42 INS42 MOV32 UPD27 MOV27 INS9 INS38 INS38 INS8 INS78 MOV21 MOV52 UPD42 MOV42 INS32 INS41 INS32 INS32 MOV21 INS41 INS42 UPD42 UPD42 INS9 UPD42 INS32 INS42 INS27 INS9 INS42 INS42 INS8 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV32 INS32 INS32 INS41 INS21 UPD42 MOV42 MOV52 UPD42 MOV42 INS52 INS42 INS9 MOV32 INS45 DEL42 DEL42 DEL32 DEL38 DEL25 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL27 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31 DEL27 DEL42 DEL32 DEL42 DEL32 DEL21 DEL32 DEL52 DEL42 DEL22 DEL42 DEL43 DEL62 DEL36 DEL38 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL52 DEL32 DEL7 DEL21 DEL32 DEL38 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL21 DEL25 DEL52 DEL42 DEL22 DEL45 DEL42 DEL27 DEL42 DEL42 DEL32 DEL21 DEL32 DEL9