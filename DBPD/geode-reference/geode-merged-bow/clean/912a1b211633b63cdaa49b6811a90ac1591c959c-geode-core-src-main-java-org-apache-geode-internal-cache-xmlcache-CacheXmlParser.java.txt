GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-          logger.trace(LogMarker.CACHE_XML_PARSER,
-              LocalizedMessage.create(LocalizedStrings.CacheXmlParser_UNKNOWN_INDEX_TYPE, type));
+          if (logger.isTraceEnabled(LogMarker.CACHE_XML_PARSER_VERBOSE)) {
+            logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE,
+                LocalizedMessage.create(LocalizedStrings.CacheXmlParser_UNKNOWN_INDEX_TYPE, type));
+          }
-    logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage
-        .create(LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_PROPERTIES__0, props));
+    if (logger.isTraceEnabled(LogMarker.CACHE_XML_PARSER_VERBOSE)) {
+      logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE, LocalizedMessage.create(
+          LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_PROPERTIES__0, props));
+    }
-    logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage.create(
-        LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_CLASS_NAME_0, className));
+    if (logger.isTraceEnabled(LogMarker.CACHE_XML_PARSER_VERBOSE)) {
+      logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE, LocalizedMessage.create(
+          LocalizedStrings.CacheXmlParser_XML_PARSER_CREATEDECLARABLE_CLASS_NAME_0, className));
+    }
-        logger.trace(LogMarker.CACHE_XML_PARSER,
-            LocalizedMessage.create(
-                LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_APPENDED_CHARACTER_DATA_0,
-                chars));
+        if (logger.isTraceEnabled(LogMarker.CACHE_XML_PARSER_VERBOSE)) {
+          logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE,
+              LocalizedMessage.create(
+                  LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_APPENDED_CHARACTER_DATA_0,
+                  chars));
+        }
-        logger.trace(LogMarker.CACHE_XML_PARSER, LocalizedMessage.create(
-            LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_NEW_CHARACTER_DATA_0, chars));
+        if (logger.isTraceEnabled(LogMarker.CACHE_XML_PARSER_VERBOSE)) {
+          logger.trace(LogMarker.CACHE_XML_PARSER_VERBOSE, LocalizedMessage.create(
+              LocalizedStrings.CacheXmlParser_XML_PARSER_CHARACTERS_NEW_CHARACTER_DATA_0, chars));
+        }

INS25 INS25 INS32 INS8 INS32 INS8 INS42 INS42 INS40 MOV21 INS42 INS42 INS40 MOV21 UPD40 UPD40 INS25 INS25 INS32 INS8 INS32 INS8 INS42 INS42 INS40 MOV21 INS42 INS42 INS40 MOV21 INS25 INS32 INS8 UPD40 UPD40 INS42 INS42 INS40 MOV21 UPD40