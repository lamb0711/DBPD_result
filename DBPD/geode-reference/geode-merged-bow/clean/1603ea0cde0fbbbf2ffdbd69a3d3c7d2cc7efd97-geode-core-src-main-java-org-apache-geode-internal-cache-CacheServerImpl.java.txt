GEODE-6626: Separate CacheServer and GatewayReceiver

Introduce new interfaces and then have GatewayReceiverServer extend
CacheServerImpl to override behavior.

-import static java.lang.Integer.valueOf;
-import java.util.Collections;
-import java.util.LinkedList;
-import java.util.List;
+import java.util.function.Function;
+import java.util.function.Supplier;
-import org.apache.geode.cache.wan.GatewayTransportFilter;
-import org.apache.geode.internal.cache.tier.sockets.AcceptorImpl;
+import org.apache.geode.internal.cache.tier.OverflowAttributes;
+import org.apache.geode.internal.cache.tier.sockets.AcceptorBuilder;
+import org.apache.geode.internal.cache.tier.sockets.CacheClientNotifier.CacheClientNotifierProvider;
+import org.apache.geode.internal.cache.tier.sockets.ClientHealthMonitor.ClientHealthMonitorProvider;
-import org.apache.geode.internal.cache.tier.sockets.OriginalServerConnection;
-import org.apache.geode.internal.cache.tier.sockets.ProtobufServerConnection;
+import org.apache.geode.internal.cache.tier.sockets.ConnectionListener;
+import org.apache.geode.internal.cache.tier.sockets.ServerConnection;
+import org.apache.geode.internal.net.SocketCreator;
+  private final AcceptorBuilder acceptorBuilder;
+
+  private final boolean sendResourceEvents;
+
+  private final boolean includeMembershipGroups;
+
-   * The server connection factory, that provides either a {@link OriginalServerConnection} or a new
-   * {@link ProtobufServerConnection}
+   * The server connection factory, that provides a {@link ServerConnection}.
-  private volatile AcceptorImpl acceptor;
+  private volatile Acceptor acceptor;
-  /**
-   * boolean that represents whether this server is a GatewayReceiver or a simple BridgeServer
-   */
-  private boolean isGatewayReceiver;
-
-  private List<GatewayTransportFilter> gatewayTransportFilters = Collections.emptyList();
-
+  private final Supplier<SocketCreator> socketCreatorSupplier;
+  private final CacheClientNotifierProvider cacheClientNotifierProvider;
+  private final ClientHealthMonitorProvider clientHealthMonitorProvider;
+  private final Function<DistributionAdvisee, CacheServerAdvisor> cacheServerAdvisorProvider;
+
-
-  // ////////////////////// Constructors //////////////////////
-
-  /**
-   * Creates a new{@code BridgeServerImpl} that serves the contents of the give {@code Cache}. It
-   * has the default configuration.
-   */
-  public CacheServerImpl(InternalCache cache, boolean isGatewayReceiver) {
+  CacheServerImpl(final InternalCache cache,
+      final SecurityService securityService,
+      final AcceptorBuilder acceptorBuilder,
+      final boolean sendResourceEvents,
+      final boolean includeMembershipGroups,
+      final Supplier<SocketCreator> socketCreatorSupplier,
+      final CacheClientNotifierProvider cacheClientNotifierProvider,
+      final ClientHealthMonitorProvider clientHealthMonitorProvider,
+      final Function<DistributionAdvisee, CacheServerAdvisor> cacheServerAdvisorProvider) {
-    this.isGatewayReceiver = isGatewayReceiver;
-    this.securityService = cache.getSecurityService();
+    this.securityService = securityService;
+    this.acceptorBuilder = acceptorBuilder;
+    this.sendResourceEvents = sendResourceEvents;
+    this.includeMembershipGroups = includeMembershipGroups;
+    this.socketCreatorSupplier = socketCreatorSupplier;
+    this.cacheClientNotifierProvider = cacheClientNotifierProvider;
+    this.clientHealthMonitorProvider = clientHealthMonitorProvider;
+    this.cacheServerAdvisorProvider = cacheServerAdvisorProvider;
-  // //////////////////// Instance Methods ///////////////////
-
-  public boolean isGatewayReceiver() {
-    return this.isGatewayReceiver;
-  }
-
-  public void setGatewayTransportFilter(List<GatewayTransportFilter> transportFilters) {
-    this.gatewayTransportFilters = transportFilters;
-  }
-
-    this.advisor = CacheServerAdvisor.createCacheServerAdvisor(this);
+    this.advisor = cacheServerAdvisorProvider.apply(this);
-    List overflowAttributesList = new LinkedList();
-    ClientSubscriptionConfig csc = this.getClientSubscriptionConfig();
-    overflowAttributesList.add(0, csc.getEvictionPolicy());
-    overflowAttributesList.add(1, valueOf(csc.getCapacity()));
-    overflowAttributesList.add(2, valueOf(this.port));
-    String diskStoreName = csc.getDiskStoreName();
-    if (diskStoreName != null) {
-      overflowAttributesList.add(3, diskStoreName);
-      overflowAttributesList.add(4, true); // indicator to use diskstore
-    } else {
-      overflowAttributesList.add(3, csc.getOverflowDirectory());
-      overflowAttributesList.add(4, false);
-    }
-    this.acceptor = new AcceptorImpl(getPort(), getBindAddress(), getNotifyBySubscription(),
-        getSocketBufferSize(), getMaximumTimeBetweenPings(), this.cache, getMaxConnections(),
-        getMaxThreads(), getMaximumMessageCount(), getMessageTimeToLive(), this.loadMonitor,
-        overflowAttributesList, this.isGatewayReceiver, this.gatewayTransportFilters,
-        this.tcpNoDelay, serverConnectionFactory, 120000);
+    ClientSubscriptionConfig clientSubscriptionConfig = getClientSubscriptionConfig();
+    String diskStoreName = clientSubscriptionConfig.getDiskStoreName();
+    OverflowAttributes overflowAttributes = new OverflowAttributes() {
+
+      @Override
+      public String getEvictionPolicy() {
+        return clientSubscriptionConfig.getEvictionPolicy();
+      }
+
+      @Override
+      public int getQueueCapacity() {
+        return clientSubscriptionConfig.getCapacity();
+      }
+
+      @Override
+      public int getPort() {
+        return port;
+      }
+
+      @Override
+      public boolean isDiskStore() {
+        return diskStoreName != null;
+      }
+
+      @Override
+      public String getOverflowDirectory() {
+        return clientSubscriptionConfig.getOverflowDirectory();
+      }
+
+      @Override
+      public String getDiskStoreName() {
+        return diskStoreName;
+      }
+    };
+
+    acceptor = createAcceptor(overflowAttributes);
-    this.cache.getLogger()
-        .config(String.format("CacheServer Configuration:  %s", getConfig()));
+    logger.info(String.format("CacheServer Configuration:  %s", getConfig()));
-    if (!isGatewayReceiver) {
-      InternalDistributedSystem system = this.cache.getInternalDistributedSystem();
+    if (sendResourceEvents) {
+      InternalDistributedSystem system = cache.getInternalDistributedSystem();
-
+  @Override
+  public Acceptor createAcceptor(OverflowAttributes overflowAttributes) throws IOException {
+    acceptorBuilder.forServer(this);
+    return acceptorBuilder.create(overflowAttributes);
+  }
+  @Override
-      cache.getLogger()
-          .warning("CacheServer - Error closing load monitor", e);
+      logger.warn("CacheServer - Error closing load monitor", e);
-      cache.getLogger()
-          .warning("CacheServer - Error closing advisor", e);
+      logger.warn("CacheServer - Error closing advisor", e);
-    if (!isGatewayReceiver) {
-      InternalDistributedSystem system = this.cache.getInternalDistributedSystem();
+    if (sendResourceEvents) {
+      InternalDistributedSystem system = cache.getInternalDistributedSystem();
-
-  public AcceptorImpl getAcceptor() {
+  public Acceptor getAcceptor() {
-    return (InternalDistributedSystem) this.cache.getDistributedSystem();
+    return cache.getInternalDistributedSystem();
+  @Override
-    if (!this.isGatewayReceiver) {
+    if (includeMembershipGroups) {
+
+  @Override
+  public ConnectionListener getConnectionListener() {
+    return loadMonitor;
+  }
+
+  @Override
+  public ServerConnectionFactory getServerConnectionFactory() {
+    return serverConnectionFactory;
+  }
+
+  @Override
+  public SecurityService getSecurityService() {
+    return securityService;
+  }
+
+  @Override
+  public long getTimeLimitMillis() {
+    return 120_000;
+  }
+
+  @Override
+  public Supplier<SocketCreator> getSocketCreatorSupplier() {
+    return socketCreatorSupplier;
+  }
+
+  @Override
+  public CacheClientNotifierProvider getCacheClientNotifierProvider() {
+    return cacheClientNotifierProvider;
+  }
+
+  @Override
+  public ClientHealthMonitorProvider getClientHealthMonitorProvider() {
+    return clientHealthMonitorProvider;
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 MOV23 MOV23 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 UPD43 INS83 INS74 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 UPD74 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 MOV21 INS78 INS43 UPD42 INS44 INS43 INS78 MOV54 UPD43 INS78 INS78 MOV83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 UPD39 MOV39 UPD42 MOV42 INS8 INS78 INS83 INS74 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 UPD42 INS43 INS43 UPD42 INS42 INS42 INS42 INS42 INS43 UPD43 UPD43 UPD42 INS83 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS39 INS42 INS83 UPD42 INS83 INS74 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS74 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS42 INS42 INS43 INS42 INS42 INS21 INS41 INS42 UPD42 INS42 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS41 INS42 UPD43 MOV43 UPD43 MOV43 INS41 INS42 INS42 INS41 INS42 INS42 INS41 UPD66 UPD66 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS43 INS7 INS7 INS7 INS7 INS7 INS7 MOV43 MOV43 INS43 INS59 INS42 INS42 INS32 INS32 MOV8 MOV8 INS42 INS32 INS42 INS42 INS42 INS42 INS34 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 UPD42 UPD42 INS32 UPD42 INS42 INS42 INS14 INS42 INS32 UPD42 MOV42 UPD42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 UPD42 MOV42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 UPD42 UPD42 INS42 UPD42 INS42 INS43 INS1 INS42 INS42 INS42 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS42 UPD42 MOV42 UPD42 UPD45 UPD42 MOV42 UPD42 UPD45 INS42 INS42 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS41 INS32 INS32 INS42 MOV27 INS32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 MOV42 DEL42 DEL65 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL32 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL42 DEL32 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL14 DEL52 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL34 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL34 DEL52 DEL42 DEL22 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL42 DEL32 DEL21 DEL42 DEL42 DEL34 DEL9 DEL32 DEL21 DEL8 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL42 DEL42 DEL34 DEL9 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL34 DEL14 DEL52 DEL42 DEL22 DEL32 DEL42 DEL38 DEL52 DEL42 DEL22 DEL39 DEL52 DEL42 DEL22 DEL41 DEL42 DEL32 DEL42 DEL32 DEL42 DEL38 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL32 DEL11 DEL52 DEL42 DEL22 DEL38