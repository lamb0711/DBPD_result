Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Returns the {@code VM} identity. For {@link StandAloneDUnitEnv} the number
-   * returned is a zero-based sequence representing the order in with
-   * the DUnit {@code VM}s were launched.
+   * Returns the {@code VM} identity. For {@link StandAloneDUnitEnv} the number returned is a
+   * zero-based sequence representing the order in with the DUnit {@code VM}s were launched.
-   * Returns the total number of {@code VM}s on all {@code Host}s (note that
-   * DUnit currently only supports one {@code Host}).
+   * Returns the total number of {@code VM}s on all {@code Host}s (note that DUnit currently only
+   * supports one {@code Host}).
-   * Creates a new {@code VM} that runs on a given host with a given process
-   * id.
+   * Creates a new {@code VM} that runs on a given host with a given process id.
-   * Invokes a static zero-arg method  with an {@link Object} or {@code void}
-   * return type in this {@code VM}.  If the return type of the method is
-   * {@code void}, {@code null} is returned.
+   * Invokes a static zero-arg method with an {@link Object} or {@code void} return type in this
+   * {@code VM}. If the return type of the method is {@code void}, {@code null} is returned.
-   * @param  targetClass
-   *         The class on which to invoke the method
-   * @param  methodName
-   *         The name of the method to invoke
+   * @param targetClass The class on which to invoke the method
+   * @param methodName The name of the method to invoke
-   * @throws RMIException
-   *         Wraps any underlying exception thrown while invoking the method in
-   *         this VM
+   * @throws RMIException Wraps any underlying exception thrown while invoking the method in this VM
-   * Asynchronously invokes a static zero-arg method with an {@code Object} or
-   * {@code void} return type in this VM.  If the return type of the method is
-   * {@code void}, {@code null} is returned.
+   * Asynchronously invokes a static zero-arg method with an {@code Object} or {@code void} return
+   * type in this VM. If the return type of the method is {@code void}, {@code null} is returned.
-   * @param  targetClass
-   *         The class on which to invoke the method
-   * @param  methodName
-   *         The name of the method to invoke
+   * @param targetClass The class on which to invoke the method
+   * @param methodName The name of the method to invoke
-   * Invokes a static method with an {@link Object} or {@code void} return type
-   * in this VM.  If the return type of the method is {@code void},
-   * {@code null} is returned.
+   * Invokes a static method with an {@link Object} or {@code void} return type in this VM. If the
+   * return type of the method is {@code void}, {@code null} is returned.
-   * @param  targetClass
-   *         The class on which to invoke the method
-   * @param  methodName
-   *         The name of the method to invoke
-   * @param  args
-   *         Arguments passed to the method call (must be
-   *         {@link java.io.Serializable}).
+   * @param targetClass The class on which to invoke the method
+   * @param methodName The name of the method to invoke
+   * @param args Arguments passed to the method call (must be {@link java.io.Serializable}).
-   * @throws RMIException
-   *         Wraps any underlying exception thrown while invoking the method in
-   *         this {@code VM}
+   * @throws RMIException Wraps any underlying exception thrown while invoking the method in this
+   *         {@code VM}
-      throw new RMIException(this, targetClass.getName(), methodName, new IllegalStateException("VM not available: " + this));
+      throw new RMIException(this, targetClass.getName(), methodName,
+          new IllegalStateException("VM not available: " + this));
-      throw new RMIException(this, targetClass.getName(), methodName, result.getException(), result.getStackTrace());
+      throw new RMIException(this, targetClass.getName(), methodName, result.getException(),
+          result.getStackTrace());
-   * Asynchronously invokes an instance method with an {@link Object} or
-   * {@code void} return type in this {@code VM}.  If the return type of the
-   * method is {@code void}, {@code null} is returned.
+   * Asynchronously invokes an instance method with an {@link Object} or {@code void} return type in
+   * this {@code VM}. If the return type of the method is {@code void}, {@code null} is returned.
-   * @param  targetObject
-   *         The object on which to invoke the method
-   * @param  methodName
-   *         The name of the method to invoke
-   * @param  args
-   *         Arguments passed to the method call (must be {@link
-   *         java.io.Serializable}).
+   * @param targetObject The object on which to invoke the method
+   * @param methodName The name of the method to invoke
+   * @param args Arguments passed to the method call (must be {@link java.io.Serializable}).
-  public AsyncInvocation invokeAsync(final Object targetObject, final String methodName, final Object[] args) {
-    return new AsyncInvocation(targetObject, methodName, () -> invoke(targetObject, methodName, args)).start();
+  public AsyncInvocation invokeAsync(final Object targetObject, final String methodName,
+      final Object[] args) {
+    return new AsyncInvocation(targetObject, methodName,
+        () -> invoke(targetObject, methodName, args)).start();
-   * Asynchronously invokes an instance method with an {@link Object} or
-   * {@code void} return type in this {@code VM}.  If the return type of the
-   * method is {@code void}, {@code null} is returned.
+   * Asynchronously invokes an instance method with an {@link Object} or {@code void} return type in
+   * this {@code VM}. If the return type of the method is {@code void}, {@code null} is returned.
-   * @param  targetClass
-   *         The class on which to invoke the method
-   * @param  methodName
-   *         The name of the method to invoke
-   * @param  args
-   *         Arguments passed to the method call (must be {@link
-   *         java.io.Serializable}).
+   * @param targetClass The class on which to invoke the method
+   * @param methodName The name of the method to invoke
+   * @param args Arguments passed to the method call (must be {@link java.io.Serializable}).
-  public AsyncInvocation invokeAsync(final Class<?> targetClass, final String methodName, final Object[] args) {
-    return new AsyncInvocation(targetClass, methodName, () -> invoke(targetClass, methodName, args)).start();
+  public AsyncInvocation invokeAsync(final Class<?> targetClass, final String methodName,
+      final Object[] args) {
+    return new AsyncInvocation(targetClass, methodName, () -> invoke(targetClass, methodName, args))
+        .start();
-   * Invokes the {@code run} method of a {@link Runnable} in this VM.  Recall
-   * that {@code run} takes no arguments and has no return value.
+   * Invokes the {@code run} method of a {@link Runnable} in this VM. Recall that {@code run} takes
+   * no arguments and has no return value.
-   * @param  runnable
-   *         The {@code Runnable} to be run
+   * @param runnable The {@code Runnable} to be run
-  
+
-   * Invokes the {@code run} method of a {@link Runnable} in this VM.  Recall
-   * that {@code run} takes no arguments and has no return value.  The
-   * {@code Runnable} is wrapped in a {@link NamedRunnable} having the given
-   * name so it shows up in DUnit logs.
+   * Invokes the {@code run} method of a {@link Runnable} in this VM. Recall that {@code run} takes
+   * no arguments and has no return value. The {@code Runnable} is wrapped in a
+   * {@link NamedRunnable} having the given name so it shows up in DUnit logs.
-   * @param  runnable
-   *         The {@code Runnable} to be run
-   * @param  name
-   *         The name of the {@code Runnable}, which will be logged in DUnit
-   *         output
+   * @param runnable The {@code Runnable} to be run
+   * @param name The name of the {@code Runnable}, which will be logged in DUnit output
-  
+
-   * @param  callable
-   *         The {@code Callable} to be run
-   * @param  name
-   *         The name of the {@code Callable}, which will be logged in dunit
-   *         output
+   * @param callable The {@code Callable} to be run
+   * @param name The name of the {@code Callable}, which will be logged in dunit output
-  public <T> AsyncInvocation<T> invokeAsync(final String name, final SerializableCallableIF<T> callable) {
+  public <T> AsyncInvocation<T> invokeAsync(final String name,
+      final SerializableCallableIF<T> callable) {
-   * @param  callable
-   *         The {@code Callable} to be run
+   * @param callable The {@code Callable} to be run
-   * Invokes the {@code run} method of a {@link Runnable} in this {@code VM}.
-   * Recall that {@code run} takes no arguments and has no return value.
+   * Invokes the {@code run} method of a {@link Runnable} in this {@code VM}. Recall that
+   * {@code run} takes no arguments and has no return value.
-   * @param  runnable
-   *         The {@code Runnable} to be run
-   * @param  name
-   *         The name of the {@code Runnable}, which will be logged in DUnit
-   *         output
+   * @param runnable The {@code Runnable} to be run
+   * @param name The name of the {@code Runnable}, which will be logged in DUnit output
-   * Invokes the {@code run} method of a {@link Runnable} in this {@code VM}.
-   * Recall that {@code run} takes no arguments and has no return value.
+   * Invokes the {@code run} method of a {@link Runnable} in this {@code VM}. Recall that
+   * {@code run} takes no arguments and has no return value.
-   * @param  runnable
-   *         The {@code Runnable} to be run
+   * @param runnable The {@code Runnable} to be run
-  
+
-   * @param  callable
-   *         The {@code Callable} to be run
-   * @param  name
-   *         The name of the {@code Callable}, which will be logged in DUnit
-   *         output
+   * @param callable The {@code Callable} to be run
+   * @param name The name of the {@code Callable}, which will be logged in DUnit output
-  public <T>  T invoke(final String name, final SerializableCallableIF<T> callable) {
+  public <T> T invoke(final String name, final SerializableCallableIF<T> callable) {
-  
-  /**
-   * Invokes the {@code call} method of a {@link Callable} in this {@code VM}.
-   *
-   * @param  callable
-   *         The {@code Callable} to be run
-   *
-   * @see SerializableCallable
-   */
-  public <T>  T invoke(final SerializableCallableIF<T> callable) {
-    return (T) invoke(callable, "call");
-  }
-  
-  /**
-   * Invokes the {@code run} method of a {@link Runnable} in this {@code VM}.
-   * If the invocation throws AssertionError, and repeatTimeoutMs
-   * is >0, the {@code run} method is invoked repeatedly until it
-   * either succeeds, or repeatTimeoutMs has passed.  The AssertionError
-   * is thrown back to the sender of this method if {@code run} has not
-   * completed successfully before repeatTimeoutMs has passed.
-   * 
-   * @deprecated Please use {@link Awaitility} to await condition and then {@link #invoke(SerializableCallableIF)} instead.
-   */
-  public void invokeRepeatingIfNecessary(final RepeatableRunnable runnable, final long repeatTimeoutMs) {
-    invoke(runnable, "runRepeatingIfNecessary", new Object[] { repeatTimeoutMs });
-  }
-   * Invokes an instance method with no arguments on an object that is
-   * serialized into this {@code VM}.  The return type of the method can be
-   * either {@link Object} or {@code void}.  If the return type of the method
-   * is {@code void}, {@code null} is returned.
+   * Invokes the {@code call} method of a {@link Callable} in this {@code VM}.
-   * @param  targetObject
-   *         The receiver of the method invocation
-   * @param  methodName
-   *         The name of the method to invoke
+   * @param callable The {@code Callable} to be run
-   * @throws RMIException
-   *         Wraps any underlying exception thrown while invoking the method in
-   *         this {@code VM}
+   * @see SerializableCallable
+   */
+  public <T> T invoke(final SerializableCallableIF<T> callable) {
+    return (T) invoke(callable, "call");
+  }
+
+  /**
+   * Invokes the {@code run} method of a {@link Runnable} in this {@code VM}. If the invocation
+   * throws AssertionError, and repeatTimeoutMs is >0, the {@code run} method is invoked repeatedly
+   * until it either succeeds, or repeatTimeoutMs has passed. The AssertionError is thrown back to
+   * the sender of this method if {@code run} has not completed successfully before repeatTimeoutMs
+   * has passed.
+   * 
+   * @deprecated Please use {@link Awaitility} to await condition and then
+   *             {@link #invoke(SerializableCallableIF)} instead.
+   */
+  public void invokeRepeatingIfNecessary(final RepeatableRunnable runnable,
+      final long repeatTimeoutMs) {
+    invoke(runnable, "runRepeatingIfNecessary", new Object[] {repeatTimeoutMs});
+  }
+
+  /**
+   * Invokes an instance method with no arguments on an object that is serialized into this
+   * {@code VM}. The return type of the method can be either {@link Object} or {@code void}. If the
+   * return type of the method is {@code void}, {@code null} is returned.
+   *
+   * @param targetObject The receiver of the method invocation
+   * @param methodName The name of the method to invoke
+   *
+   * @throws RMIException Wraps any underlying exception thrown while invoking the method in this
+   *         {@code VM}
-  
+
-   * Invokes an instance method on an object that is serialized into this
-   * {@code VM}.  The return type of the method can be either {@link Object} or
-   * {@code void}.  If the return type of the method is {@code void},
-   * {@code null} is returned.
+   * Invokes an instance method on an object that is serialized into this {@code VM}. The return
+   * type of the method can be either {@link Object} or {@code void}. If the return type of the
+   * method is {@code void}, {@code null} is returned.
-   * @param  targetObject
-   *         The receiver of the method invocation
-   * @param  methodName
-   *         The name of the method to invoke
-   * @param  args
-   *         Arguments passed to the method call (must be {@link
-   *         java.io.Serializable}).
+   * @param targetObject The receiver of the method invocation
+   * @param methodName The name of the method to invoke
+   * @param args Arguments passed to the method call (must be {@link java.io.Serializable}).
-   * @throws RMIException
-   *         Wraps any underlying exception thrown while invoking the method in
-   *         this {@code VM}
+   * @throws RMIException Wraps any underlying exception thrown while invoking the method in this
+   *         {@code VM}
-      throw new RMIException(this, targetObject.getClass().getName(), methodName, new IllegalStateException("VM not available: " + this));
+      throw new RMIException(this, targetObject.getClass().getName(), methodName,
+          new IllegalStateException("VM not available: " + this));
-      throw new RMIException(this, targetObject.getClass().getName(), methodName, result.getException(), result.getStackTrace());
+      throw new RMIException(this, targetObject.getClass().getName(), methodName,
+          result.getException(), result.getStackTrace());
-   * Synchronously bounces (mean kills and restarts) this {@code VM}.
-   * Concurrent bounce attempts are synchronized but attempts to invoke methods
-   * on a bouncing {@code VM} will cause test failure.  Tests using bounce
-   * should be placed at the end of the DUnit test suite, since an exception
-   * here will cause all tests using the unsuccessfully bounced {@code VM} to
-   * fail.
+   * Synchronously bounces (mean kills and restarts) this {@code VM}. Concurrent bounce attempts are
+   * synchronized but attempts to invoke methods on a bouncing {@code VM} will cause test failure.
+   * Tests using bounce should be placed at the end of the DUnit test suite, since an exception here
+   * will cause all tests using the unsuccessfully bounced {@code VM} to fail.
-   * @throws RMIException if an exception occurs while bouncing this
-   *         {@code VM}, for example a {@code HydraTimeoutException} if the
-   *         {@code VM} fails to stop within
+   * @throws RMIException if an exception occurs while bouncing this {@code VM}, for example a
+   *         {@code HydraTimeoutException} if the {@code VM} fails to stop within
-      throw new RMIException(this, getClass().getName(), "bounceVM", new IllegalStateException("VM not available: " + this));
+      throw new RMIException(this, getClass().getName(), "bounceVM",
+          new IllegalStateException("VM not available: " + this));
-      RMIException rmie = new RMIException(this, getClass().getName(), "bounceVM", e, sw.toString());
+      RMIException rmie =
+          new RMIException(this, getClass().getName(), "bounceVM", e, sw.toString());
-  private MethExecutorResult execute(final Class targetClass, final String methodName, final Object[] args) {
+  private MethExecutorResult execute(final Class targetClass, final String methodName,
+      final Object[] args) {
-  private MethExecutorResult execute(final Object targetObject, final String methodName, final Object[] args) {
+  private MethExecutorResult execute(final Object targetObject, final String methodName,
+      final Object[] args) {

MOV65 MOV65 MOV66 MOV66 MOV65 MOV66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV65 UPD66 MOV65 UPD66 UPD66 MOV65 UPD66 MOV65 UPD66 UPD66 UPD66 UPD66 MOV65 UPD66 MOV65 UPD66 UPD66 MOV65 UPD66 UPD66 MOV65 UPD66 MOV65 UPD66 UPD66 UPD66 UPD66 MOV65 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV65 UPD66 MOV65 UPD66 MOV65 UPD66 UPD66 MOV65 UPD66 UPD66 UPD66 MOV65 UPD66 UPD66 UPD66 MOV65 UPD66 MOV66 UPD66 UPD66 MOV65 UPD66 MOV66 MOV65 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV66 INS66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66