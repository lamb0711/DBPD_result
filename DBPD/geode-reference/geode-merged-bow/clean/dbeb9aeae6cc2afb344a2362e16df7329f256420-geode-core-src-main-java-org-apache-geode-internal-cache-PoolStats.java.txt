Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * GemFire statistics about a Pool 
+ * GemFire statistics about a Pool
-  ////////////////////  Statistic "Id" Fields  ////////////////////
+  //////////////////// Statistic "Id" Fields ////////////////////
-  
+
-//   private final static int conCountId;
+  // private final static int conCountId;
-       new StatisticDescriptor[] {
+        new StatisticDescriptor[] {
-           f.createIntGauge(KNOWN_LOCATORS, "Current number of locators discovered", LOCATORS),
+            f.createIntGauge(KNOWN_LOCATORS, "Current number of locators discovered", LOCATORS),
-            f.createIntGauge(SUBSCRIPTION_SERVERS, "Number of servers hosting this clients subscriptions", "servers"),
-            f.createLongCounter(REQUESTS_TO_LOCATOR, "Number of requests from this connection pool to a locator", "requests"),
-            f.createLongCounter(RESPONSES_FROM_LOCATOR, "Number of responses from the locator to this connection pool", "responses"),
+            f.createIntGauge(SUBSCRIPTION_SERVERS,
+                "Number of servers hosting this clients subscriptions", "servers"),
+            f.createLongCounter(REQUESTS_TO_LOCATOR,
+                "Number of requests from this connection pool to a locator", "requests"),
+            f.createLongCounter(RESPONSES_FROM_LOCATOR,
+                "Number of responses from the locator to this connection pool", "responses"),
-//             f.createIntGauge("conCount", "Current number of connections", "connections"),
-            f.createIntGauge("poolConnections", "Current number of pool connections", "connections"),
-            f.createIntCounter("connects", "Total number of times a connection has been created.", "connects"),
-            f.createIntCounter("disconnects", "Total number of times a connection has been destroyed.", "disconnects"),
-            f.createIntCounter("minPoolSizeConnects", "Total number of connects done to maintain minimum pool size.", "connects"),
-            f.createIntCounter("loadConditioningConnects", "Total number of connects done due to load conditioning.", "connects"),
-            f.createIntCounter("loadConditioningReplaceTimeouts", "Total number of times a load conditioning connect was done but was not used.", "timeouts"),
-            f.createIntCounter("idleDisconnects", "Total number of disconnects done due to idle expiration.", "disconnects"),
-            f.createIntCounter("loadConditioningDisconnects", "Total number of disconnects done due to load conditioning expiration.", "disconnects"),
-            f.createIntCounter("idleChecks", "Total number of checks done for idle expiration.", "checks"),
-            f.createIntCounter("loadConditioningChecks", "Total number of checks done for load conditioning expiration.", "checks"),
-            f.createIntCounter("loadConditioningExtensions", "Total number of times a connection's load conditioning has been extended because the servers are still balanced.", "extensions"),
-            f.createIntGauge("connectionWaitsInProgress", "Current number of threads waiting for a connection", "threads"),
-            f.createIntCounter("connectionWaits", "Total number of times a thread completed waiting for a connection (by timing out or by getting a connection).", "waits"),
-            f.createLongCounter("connectionWaitTime", "Total number of nanoseconds spent waiting for a connection.", "nanoseconds"),
-            f.createIntGauge("clientOpsInProgress", "Current number of clientOps being executed", "clientOps"), 
-            f.createIntGauge("clientOpSendsInProgress", "Current number of clientOp sends being executed", "sends"), 
-            f.createIntCounter("clientOpSends", "Total number of clientOp sends that have completed successfully", "sends"), 
-            f.createIntCounter("clientOpSendFailures", "Total number of clientOp sends that have failed", "sends"), 
-            f.createIntCounter("clientOps", "Total number of clientOps completed successfully", "clientOps"), 
-            f.createIntCounter("clientOpFailures", "Total number of clientOp attempts that have failed", "clientOps"), 
-            f.createIntCounter("clientOpTimeouts", "Total number of clientOp attempts that have timed out", "clientOps"), 
-            f.createLongCounter("clientOpSendTime", "Total amount of time, in nanoseconds spent doing clientOp sends", "nanoseconds"), 
-            f.createLongCounter("clientOpTime", "Total amount of time, in nanoseconds spent doing clientOps", "nanoseconds"),
-       });
+            // f.createIntGauge("conCount", "Current number of connections", "connections"),
+            f.createIntGauge("poolConnections", "Current number of pool connections",
+                "connections"),
+            f.createIntCounter("connects", "Total number of times a connection has been created.",
+                "connects"),
+            f.createIntCounter("disconnects",
+                "Total number of times a connection has been destroyed.", "disconnects"),
+            f.createIntCounter("minPoolSizeConnects",
+                "Total number of connects done to maintain minimum pool size.", "connects"),
+            f.createIntCounter("loadConditioningConnects",
+                "Total number of connects done due to load conditioning.", "connects"),
+            f.createIntCounter("loadConditioningReplaceTimeouts",
+                "Total number of times a load conditioning connect was done but was not used.",
+                "timeouts"),
+            f.createIntCounter("idleDisconnects",
+                "Total number of disconnects done due to idle expiration.", "disconnects"),
+            f.createIntCounter("loadConditioningDisconnects",
+                "Total number of disconnects done due to load conditioning expiration.",
+                "disconnects"),
+            f.createIntCounter("idleChecks", "Total number of checks done for idle expiration.",
+                "checks"),
+            f.createIntCounter("loadConditioningChecks",
+                "Total number of checks done for load conditioning expiration.", "checks"),
+            f.createIntCounter("loadConditioningExtensions",
+                "Total number of times a connection's load conditioning has been extended because the servers are still balanced.",
+                "extensions"),
+            f.createIntGauge("connectionWaitsInProgress",
+                "Current number of threads waiting for a connection", "threads"),
+            f.createIntCounter("connectionWaits",
+                "Total number of times a thread completed waiting for a connection (by timing out or by getting a connection).",
+                "waits"),
+            f.createLongCounter("connectionWaitTime",
+                "Total number of nanoseconds spent waiting for a connection.", "nanoseconds"),
+            f.createIntGauge("clientOpsInProgress", "Current number of clientOps being executed",
+                "clientOps"),
+            f.createIntGauge("clientOpSendsInProgress",
+                "Current number of clientOp sends being executed", "sends"),
+            f.createIntCounter("clientOpSends",
+                "Total number of clientOp sends that have completed successfully", "sends"),
+            f.createIntCounter("clientOpSendFailures",
+                "Total number of clientOp sends that have failed", "sends"),
+            f.createIntCounter("clientOps", "Total number of clientOps completed successfully",
+                "clientOps"),
+            f.createIntCounter("clientOpFailures",
+                "Total number of clientOp attempts that have failed", "clientOps"),
+            f.createIntCounter("clientOpTimeouts",
+                "Total number of clientOp attempts that have timed out", "clientOps"),
+            f.createLongCounter("clientOpSendTime",
+                "Total amount of time, in nanoseconds spent doing clientOp sends", "nanoseconds"),
+            f.createLongCounter("clientOpTime",
+                "Total amount of time, in nanoseconds spent doing clientOps", "nanoseconds"),});
-    
+
-//     conCountId = _type.nameToId("conCount");
+    // conCountId = _type.nameToId("conCount");
-  //////////////////////  Instance Fields  //////////////////////
+  ////////////////////// Instance Fields //////////////////////
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-  /////////////////////  Instance Methods  /////////////////////
+  ///////////////////// Instance Methods /////////////////////
-  public long startTime()
-  {
+  public long startTime() {
-  
+
+
-  }  
-  
-  public final void incLocatorResponses() {
-    this._stats.incLong(_RESPONSES_FROM_LOCATOR, 1);
-  }  
-  
-  public final void setLocatorRequests(long rl) {
-    this._stats.setLong(_REQUESTS_TO_LOCATOR,rl);
-  }
-  
-  public final void setLocatorResponses(long rl) {
-    this._stats.setLong(_RESPONSES_FROM_LOCATOR,rl);
-//   public void incConCount(int delta) {
-//     this._stats.incInt(conCountId, delta);
-//   }
+  public final void incLocatorResponses() {
+    this._stats.incLong(_RESPONSES_FROM_LOCATOR, 1);
+  }
+
+  public final void setLocatorRequests(long rl) {
+    this._stats.setLong(_REQUESTS_TO_LOCATOR, rl);
+  }
+
+  public final void setLocatorResponses(long rl) {
+    this._stats.setLong(_RESPONSES_FROM_LOCATOR, rl);
+  }
+
+  // public void incConCount(int delta) {
+  // this._stats.incInt(conCountId, delta);
+  // }
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+

UPD66