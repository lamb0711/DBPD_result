Merge branch 'develop' into feature/GEODE-9

-import com.gemstone.gemfire.cache.hdfs.HDFSEventQueueAttributes;
-import com.gemstone.gemfire.cache.hdfs.HDFSEventQueueAttributesFactory;
-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreConfigHolder.AbstractHDFSCompactionConfigHolder;
-  private HDFSCompactionConfigMutator compactionMutator;
-  private HDFSEventQueueAttributesMutator qMutator;
+  private Boolean autoMajorCompact;
-    compactionMutator = new HDFSCompactionConfigMutatorImpl(configHolder.getHDFSCompactionConfig());
-    qMutator = new HDFSEventQueueAttributesMutatorImpl(null);
-    compactionMutator = new HDFSCompactionConfigMutatorImpl(configHolder.getHDFSCompactionConfig());
-    // The following two steps are needed to set the null boolean values in compactionMutator
-    configHolder.setMinorCompaction(configHolder.getMinorCompaction());
-    compactionMutator.setAutoMajorCompaction(configHolder.getHDFSCompactionConfig().getAutoMajorCompaction());
-    qMutator = new HDFSEventQueueAttributesMutatorImpl(configHolder.getHDFSEventQueueAttributes());
-  public HDFSStoreMutator setMaxFileSize(int maxFileSize) {
-    configHolder.setMaxFileSize(maxFileSize);
+  public HDFSStoreMutator setWriteOnlyFileRolloverSize(int maxFileSize) {
+    configHolder.setWriteOnlyFileRolloverSize(maxFileSize);
-  public int getMaxFileSize() {
-    return configHolder.getMaxFileSize();
+  public int getWriteOnlyFileRolloverSize() {
+    return configHolder.getWriteOnlyFileRolloverSize();
-  public HDFSStoreMutator setFileRolloverInterval(int count) {
-    configHolder.setFileRolloverInterval(count);
+  public HDFSStoreMutator setWriteOnlyFileRolloverInterval(int count) {
+    configHolder.setWriteOnlyFileRolloverInterval(count);
-  public int getFileRolloverInterval() {
-    return configHolder.getFileRolloverInterval();
+  public int getWriteOnlyFileRolloverInterval() {
+    return configHolder.getWriteOnlyFileRolloverInterval();
-  public HDFSCompactionConfigMutator setMinorCompaction(boolean auto) {
+  public HDFSStoreMutator setMinorCompaction(boolean auto) {
-  public HDFSCompactionConfigMutator getCompactionConfigMutator() {
-    return compactionMutator;
+  public HDFSStoreMutator setMinorCompactionThreads(int count) {
+    configHolder.setMinorCompactionThreads(count);
+    return this;
+  }
+  @Override
+  public int getMinorCompactionThreads() {
+    return configHolder.getMinorCompactionThreads();
+  }
+  
+  @Override
+  public HDFSStoreMutator setMajorCompaction(boolean auto) {
+    autoMajorCompact = Boolean.valueOf(auto);
+    configHolder.setMajorCompaction(auto);
+    return this;
+  }
+  @Override
+  public Boolean getMajorCompaction() {
+    return autoMajorCompact;
-  public HDFSEventQueueAttributesMutator getHDFSEventQueueAttributesMutator() {
-    return qMutator;
+  public HDFSStoreMutator setMajorCompactionInterval(int count) {
+    configHolder.setMajorCompactionInterval(count);
+    return this;
+  }
+  @Override
+  public int getMajorCompactionInterval() {
+    return configHolder.getMajorCompactionInterval();
-  public static class HDFSEventQueueAttributesMutatorImpl implements HDFSEventQueueAttributesMutator {
-    private HDFSEventQueueAttributesFactory factory = new HDFSEventQueueAttributesFactory();
-    int batchSize = -1;
-    int batchInterval = -1;
-    
-    public HDFSEventQueueAttributesMutatorImpl(HDFSEventQueueAttributes qAttrs) {
-      if (qAttrs == null) {
-        return;
-      }
-      
-      setBatchSizeMB(qAttrs.getBatchSizeMB());
-      setBatchTimeInterval(qAttrs.getBatchTimeInterval());
-    }
-    
-    @Override
-    public HDFSEventQueueAttributesMutator setBatchSizeMB(int size) {
-      factory.setBatchSizeMB(size);
-      batchSize = size;
-      // call factory.set to execute attribute value validation
-      return this;
-    }
-    @Override
-    public int getBatchSizeMB() {
-      return batchSize;
-    }
-
-    @Override
-    public HDFSEventQueueAttributesMutator setBatchTimeInterval(int interval) {
-      batchInterval = interval;
-      // call factory.set to execute attribute value validation
-      factory.setBatchTimeInterval(interval);
-      return this;
-    }
-    @Override
-    public int getBatchTimeInterval() {
-      return batchInterval;
-    }
-    
-    @Override
-    public String toString() {
-      StringBuilder builder = new StringBuilder();
-      builder.append("HDFSEventQueueAttributesMutatorImpl [");
-      if (batchSize > -1) {
-        builder.append("batchSize=");
-        builder.append(batchSize);
-        builder.append(", ");
-      }
-      if (batchInterval > -1) {
-        builder.append("batchInterval=");
-        builder.append(batchInterval);
-      }
-      builder.append("]");
-      return builder.toString();
-    }
+  @Override
+  public HDFSStoreMutator setMajorCompactionThreads(int count) {
+    configHolder.setMajorCompactionThreads(count);
+    return this;
+  }
+  @Override
+  public int getMajorCompactionThreads() {
+    return configHolder.getMajorCompactionThreads();
-  /**
-   * @author ashvina
-   */
-  public static class HDFSCompactionConfigMutatorImpl implements HDFSCompactionConfigMutator {
-    private AbstractHDFSCompactionConfigHolder configHolder;
-    private Boolean autoMajorCompact;
-
-    public HDFSCompactionConfigMutatorImpl(AbstractHDFSCompactionConfigHolder configHolder) {
-      this.configHolder = configHolder;
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMaxInputFileSizeMB(int size) {
-      configHolder.setMaxInputFileSizeMB(size);
-      return this;
-    }
-    @Override
-    public int getMaxInputFileSizeMB() {
-      return configHolder.getMaxInputFileSizeMB();
-    }
-    
-    @Override
-    public HDFSCompactionConfigMutator setMinInputFileCount(int count) {
-      configHolder.setMinInputFileCount(count);
-      return this;
-    }
-    @Override
-    public int getMinInputFileCount() {
-      return configHolder.getMinInputFileCount();
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMaxInputFileCount(int count) {
-      configHolder.setMaxInputFileCount(count);
-      return this;
-    }
-    @Override
-    public int getMaxInputFileCount() {
-      return configHolder.getMaxInputFileCount();
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMaxThreads(int count) {
-      configHolder.setMaxThreads(count);
-      return this;
-    }
-    @Override
-    public int getMaxThreads() {
-      return configHolder.getMaxThreads();
-    }
-    
-    @Override
-    public HDFSCompactionConfigMutator setAutoMajorCompaction(boolean auto) {
-      autoMajorCompact = Boolean.valueOf(auto);
-      configHolder.setAutoMajorCompaction(auto);
-      return this;
-    }
-    @Override
-    public Boolean getAutoMajorCompaction() {
-      return autoMajorCompact;
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMajorCompactionIntervalMins(int count) {
-      configHolder.setMajorCompactionIntervalMins(count);
-      return this;
-    }
-    @Override
-    public int getMajorCompactionIntervalMins() {
-      return configHolder.getMajorCompactionIntervalMins();
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setMajorCompactionMaxThreads(int count) {
-      configHolder.setMajorCompactionMaxThreads(count);
-      return this;
-    }
-    @Override
-    public int getMajorCompactionMaxThreads() {
-      return configHolder.getMajorCompactionMaxThreads();
-    }
-
-    @Override
-    public HDFSCompactionConfigMutator setOldFilesCleanupIntervalMins(
-        int interval) {
-      configHolder.setOldFilesCleanupIntervalMins(interval);
-      return this;
-    }
-    @Override
-    public int getOldFilesCleanupIntervalMins() {
-      return configHolder.getOldFilesCleanupIntervalMins();
-    }
+  @Override
+  public HDFSStoreMutator setInputFileSizeMax(int size) {
+    configHolder.setInputFileSizeMax(size);
+    return this;
+  }
+  @Override
+  public int getInputFileSizeMax() {
+    return configHolder.getInputFileSizeMax();
+  }
+  
+  @Override
+  public HDFSStoreMutator setInputFileCountMin(int count) {
+    configHolder.setInputFileCountMin(count);
+    return this;
+  }
+  @Override
+  public int getInputFileCountMin() {
+    return configHolder.getInputFileCountMin();
+  }
+  
+  @Override
+  public HDFSStoreMutator setInputFileCountMax(int count) {
+    configHolder.setInputFileCountMax(count);
+    return this;
+  }
+  @Override
+  public int getInputFileCountMax() {
+    return configHolder.getInputFileCountMax();
+  }
+  
+  @Override
+  public HDFSStoreMutator setPurgeInterval(int interval) {
+    configHolder.setPurgeInterval(interval);
+    return this;
+  }
+  @Override
+  public int getPurgeInterval() {
+    return configHolder.getPurgeInterval();
+  @Override
+  public int getBatchSize() {
+    return configHolder.batchSize;
+  }
+  @Override
+  public HDFSStoreMutator setBatchSize(int size) {
+    configHolder.setBatchSize(size);
+    return this;
+  }
+
+  
+  @Override
+  public int getBatchInterval() {
+    return configHolder.batchIntervalMillis;
+  }
+  @Override
+  public HDFSStoreMutator setBatchInterval(int interval) {
+    configHolder.setBatchInterval(interval);
+    return this;
+  }
+    
-    if (compactionMutator.getAutoMajorCompaction() != null) {
+    if (getMajorCompaction() != null) {
-      builder.append(compactionMutator.getAutoMajorCompaction());
+      builder.append(getMajorCompaction());
-    if (qMutator != null) {
-      builder.append("qMutator=");
-      builder.append(qMutator);
-    }

MOV31 MOV23 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 UPD42 MOV78 UPD42 MOV78 INS43 INS42 MOV44 MOV78 INS39 INS42 UPD43 UPD42 MOV78 UPD42 UPD43 UPD42 UPD42 MOV78 UPD43 UPD42 MOV44 MOV78 UPD42 MOV78 INS43 INS42 MOV44 INS8 MOV78 INS39 UPD42 MOV78 UPD43 UPD42 MOV44 MOV78 UPD42 MOV78 UPD43 UPD42 MOV44 MOV78 UPD42 MOV78 UPD43 UPD42 MOV44 MOV78 UPD42 MOV78 UPD43 UPD42 MOV44 MOV78 UPD42 MOV78 UPD42 MOV78 UPD43 UPD42 MOV44 MOV78 UPD42 MOV78 UPD43 UPD42 MOV41 UPD42 MOV42 MOV41 INS41 UPD42 UPD42 UPD42 MOV41 UPD42 MOV42 MOV21 MOV41 INS41 UPD42 MOV41 UPD42 MOV41 UPD42 MOV41 UPD42 MOV41 UPD42 MOV41 UPD42 MOV41 INS32 INS32 INS32 INS32 INS40 INS40 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL33 DEL14 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL42 DEL32 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23 DEL55 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL42 DEL42 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25