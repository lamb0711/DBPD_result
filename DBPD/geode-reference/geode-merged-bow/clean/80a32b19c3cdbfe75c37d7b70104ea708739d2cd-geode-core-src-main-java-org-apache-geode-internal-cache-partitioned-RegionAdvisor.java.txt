 GEODE-6580: Cleanup static analyzer warnings. (#3415)


-import org.apache.geode.internal.cache.EntryEventImpl;
-  private final Queue volunteeringQueue = new ConcurrentLinkedQueue();
+  private final Queue<Runnable> volunteeringQueue = new ConcurrentLinkedQueue<>();
-    synchronized (this.preInitQueueMonitor) {
-      this.preInitQueue = new ConcurrentLinkedQueue<>();
+    synchronized (preInitQueueMonitor) {
+      preInitQueue = new ConcurrentLinkedQueue<>();
-    this.clientBucketProfilesMap = new ConcurrentHashMap<>();
+    clientBucketProfilesMap = new ConcurrentHashMap<>();
-    if (this.buckets != null) {
+    if (buckets != null) {
-    this.buckets = bucs;
+    buckets = bucs;
-    synchronized (this.preInitQueueMonitor) {
-      Iterator pi = this.preInitQueue.iterator();
+    synchronized (preInitQueueMonitor) {
+      Iterator pi = preInitQueue.iterator();
-            for (ProxyBucketRegion bucket : this.buckets) {
+            for (ProxyBucketRegion bucket : buckets) {
-            for (int i = 0; i < this.buckets.length; i++) {
-              BucketAdvisor ba = this.buckets[i].getBucketAdvisor();
+            for (int i = 0; i < buckets.length; i++) {
+              BucketAdvisor ba = buckets[i].getBucketAdvisor();
-        this.preInitQueue = null; // prevent further additions to the queue
-        this.preInitQueueMonitor.notifyAll();
+        preInitQueue = null; // prevent further additions to the queue
+        preInitQueueMonitor.notifyAll();
-  public Queue getVolunteeringQueue() {
-    return this.volunteeringQueue;
+  public Queue<Runnable> getVolunteeringQueue() {
+    return volunteeringQueue;
-    return this.volunteeringSemaphore;
+    return volunteeringSemaphore;
-    for (Integer bucketId : this.clientBucketProfilesMap.keySet()) {
+    for (Integer bucketId : clientBucketProfilesMap.keySet()) {
-      for (BucketProfile profile : this.clientBucketProfilesMap.get(bucketId)) {
+      for (BucketProfile profile : clientBucketProfilesMap.get(bucketId)) {
-      Set<ServerBucketProfile> parr = new HashSet<>(this.clientBucketProfilesMap.get(bucketId));
+      Set<ServerBucketProfile> parr = new HashSet<>(clientBucketProfilesMap.get(bucketId));
-    return this.clientBucketProfilesMap.get(bucketId);
+    return clientBucketProfilesMap.get(bucketId);
-    this.clientBucketProfilesMap.put(bucketId, Collections.unmodifiableSet(profiles));
+    clientBucketProfilesMap.put(bucketId, Collections.unmodifiableSet(profiles));
-   *
-   * @return returns a list of primary bucket IDs
-   *
-  public List closeBucketAdvisors() {
-    List<Integer> primariesHeld = Collections.emptyList();
+  public void closeBucketAdvisors() {
-      for (int i = 0; i < buckets.length; i++) {
-        ProxyBucketRegion pbr = buckets[i];
-        if (pbr.isPrimary()) {
-          if (primariesHeld.isEmpty()) {
-            primariesHeld = new ArrayList<>();
-          }
-          primariesHeld.add(i);
-        }
+      for (ProxyBucketRegion pbr : buckets) {
-    return primariesHeld;
-    if (this.buckets != null) {
+    if (buckets != null) {
-    synchronized (this.preInitQueueMonitor) {
+    synchronized (preInitQueueMonitor) {
-          this.getPartitionedRegion().getName(), memberId, removedId, crashed);
+          getPartitionedRegion().getName(), memberId, removedId, crashed);
-          this.getPartitionedRegion().getName(), memberId,
+          getPartitionedRegion().getName(), memberId,
-    synchronized (this.preInitQueueMonitor) {
-      if (this.preInitQueue != null) {
+    synchronized (preInitQueueMonitor) {
+      if (preInitQueue != null) {
-        this.preInitQueue.add(qbf);
+        preInitQueue.add(qbf);
-    if (this.buckets != null) {
+    if (buckets != null) {
-      for (int i = 0; i < this.buckets.length; i++) {
+      for (int i = 0; i < buckets.length; i++) {
-          this.buckets[i].getBucketAdvisor().removeIdWithSerial(memberId, s, regionDestroyed);
+          buckets[i].getBucketAdvisor().removeIdWithSerial(memberId, s, regionDestroyed);
-      if (sick && !this.buckets[i].getBucketOwners().contains(member)) {
+      if (sick && !buckets[i].getBucketOwners().contains(member)) {
-      this.buckets[i].setBucketSick(member, sick);
+      buckets[i].setBucketSick(member, sick);
-            (this.buckets[i].isBucketSick() ? "sick" : "healthy"));
+            (buckets[i].isBucketSick() ? "sick" : "healthy"));
-      this.buckets[bucketId].setBucketSick(member, false);
+      buckets[bucketId].setBucketSick(member, false);
-      this.buckets[bucketId].setBucketSick(member, sick);
+      buckets[bucketId].setBucketSick(member, sick);
-    assert this.buckets != null;
-    assert this.buckets[bucketId] != null;
-    if (this.buckets[bucketId].isBucketSick()) {
-      Set<DistributedMember> sm = this.buckets[bucketId].getSickMembers();
+    assert buckets != null;
+    assert buckets[bucketId] != null;
+    if (buckets[bucketId].isBucketSick()) {
+      Set<DistributedMember> sm = buckets[bucketId].getSickMembers();
-      this.isPartitioned = true;
+      isPartitioned = true;
-      if (this.requiresNotification)
+      if (requiresNotification)
-      this.requiresNotification = (s & REQUIRES_NOTIFICATION_MASK) != 0;
+      requiresNotification = (s & REQUIRES_NOTIFICATION_MASK) != 0;
-      this.localMaxMemory = in.readInt();
-      this.isDataStore = this.localMaxMemory > 0;
-      this.fixedPAttrs = DataSerializer.readObject(in);
-      this.shutDownAllStatus = in.readInt();
+      localMaxMemory = in.readInt();
+      isDataStore = localMaxMemory > 0;
+      fixedPAttrs = DataSerializer.readObject(in);
+      shutDownAllStatus = in.readInt();
-      out.writeInt(this.localMaxMemory);
-      DataSerializer.writeObject(this.fixedPAttrs, out);
-      out.writeInt(this.shutDownAllStatus);
+      out.writeInt(localMaxMemory);
+      DataSerializer.writeObject(fixedPAttrs, out);
+      out.writeInt(shutDownAllStatus);
-      sb.append("; isDataStore=").append(this.isDataStore).append("; requiresNotification=")
-          .append(this.requiresNotification).append("; localMaxMemory=").append(this.localMaxMemory)
-          .append("; numBuckets=").append(this.numBuckets);
-      if (this.fixedPAttrs != null) {
-        sb.append("; FixedPartitionAttributes=").append(this.fixedPAttrs);
+      sb.append("; isDataStore=").append(isDataStore).append("; requiresNotification=")
+          .append(requiresNotification).append("; localMaxMemory=").append(localMaxMemory)
+          .append("; numBuckets=").append(numBuckets);
+      if (fixedPAttrs != null) {
+        sb.append("; FixedPartitionAttributes=").append(fixedPAttrs);
-      sb.append("; filterProfile=").append(this.filterProfile);
-      sb.append("; shutDownAllStatus=").append(this.shutDownAllStatus);
+      sb.append("; filterProfile=").append(filterProfile);
+      sb.append("; shutDownAllStatus=").append(shutDownAllStatus);
-    if (this.lastActiveProfiles != numProfs) {
-      this.numDataStores = adviseDataStore().size();
-      this.lastActiveProfiles = numProfs;
+    if (lastActiveProfiles != numProfs) {
+      numDataStores = adviseDataStore().size();
+      lastActiveProfiles = numProfs;
-    return this.numDataStores;
+    return numDataStores;
-    return this.adviseDataStore(false);
+    return adviseDataStore(false);
-  public Set adviseAllPRNodes() {
+  public Set<InternalDistributedMember> adviseAllPRNodes() {
-  public Set adviseRequiresNotification(final EntryEventImpl event) {
+  public Set<InternalDistributedMember> adviseRequiresNotification() {
-    if (this.buckets == null) {
+    if (buckets == null) {
-    return this.buckets[bucketId].isPrimary();
+    return buckets[bucketId].isPrimary();
-    if (this.buckets == null) {
+    if (buckets == null) {
-    return this.buckets[bucketId].getHostedBucketRegion() != null;
+    return buckets[bucketId].getHostedBucketRegion() != null;
-    return this.buckets != null;
+    return buckets != null;
-    Assert.assertTrue(this.buckets != null);
-    ProxyBucketRegion pbr = this.buckets[bucketId];
+    Assert.assertTrue(buckets != null);
+    ProxyBucketRegion pbr = buckets[bucketId];
-    Assert.assertTrue(this.buckets != null);
-    ProxyBucketRegion pbr = this.buckets[bucketId];
+    Assert.assertTrue(buckets != null);
+    ProxyBucketRegion pbr = buckets[bucketId];
-    Assert.assertTrue(this.buckets != null);
+    Assert.assertTrue(buckets != null);
-    if (this.buckets == null) {
+    if (buckets == null) {
-    int[] result = new int[this.buckets.length];
+    int[] result = new int[buckets.length];
-      ProxyBucketRegion pbr = this.buckets[i];
+      ProxyBucketRegion pbr = buckets[i];
-    synchronized (this.preInitQueueMonitor) {
+    synchronized (preInitQueueMonitor) {
-        while (this.preInitQueue != null) {
+        while (preInitQueue != null) {
-            this.preInitQueueMonitor.wait(); // spurious wakeup ok
+            preInitQueueMonitor.wait(); // spurious wakeup ok
-            this.getAdvisee().getCancelCriterion().checkCancelInProgress(e);
+            getAdvisee().getCancelCriterion().checkCancelInProgress(e);
-    Assert.assertTrue(this.buckets != null);
-    Bucket b = this.buckets[bucketId];
+    Assert.assertTrue(buckets != null);
+    Bucket b = buckets[bucketId];
-    Assert.assertTrue(this.buckets != null);
-    Bucket b = this.buckets[bucketId];
+    Assert.assertTrue(buckets != null);
+    Bucket b = buckets[bucketId];
-    Assert.assertTrue(this.buckets != null);
-    return this.buckets[bucketId].getBucketRedundancy() >= 0;
+    Assert.assertTrue(buckets != null);
+    return buckets[bucketId].getBucketRedundancy() >= 0;
-      Assert.assertTrue(this.buckets != null);
-      return this.buckets[bucketId].getBucketAdvisor().waitForRedundancy(minRedundancy);
+      Assert.assertTrue(buckets != null);
+      return buckets[bucketId].getBucketAdvisor().waitForRedundancy(minRedundancy);
-    Assert.assertTrue(this.buckets != null);
-    return this.buckets[bucketId].getBucketRedundancy();
+    Assert.assertTrue(buckets != null);
+    return buckets[bucketId].getBucketRedundancy();
-    Assert.assertTrue(this.buckets != null);
-    return this.buckets[bucketId].getBucketOwners();
+    Assert.assertTrue(buckets != null);
+    return buckets[bucketId].getBucketOwners();
-    Assert.assertTrue(this.buckets != null);
+    Assert.assertTrue(buckets != null);
-    return this.buckets;
+    return buckets;
-      this.pbrs = RegionAdvisor.this.buckets;
-      Assert.assertTrue(this.pbrs != null);
+      pbrs = buckets;
+      Assert.assertTrue(pbrs != null);
-      return this.pbrs.length;
+      return pbrs.length;
-          if (this.currentItem + 1 < BucketSet.this.pbrs.length) {
-            int possibleBucketId = this.currentItem;
+          if (currentItem + 1 < pbrs.length) {
+            int possibleBucketId = currentItem;
-            while (++possibleBucketId < BucketSet.this.pbrs.length && !bucketExists) {
+            while (++possibleBucketId < pbrs.length && !bucketExists) {
-          return this.currentItem + 1 < BucketSet.this.pbrs.length;
+          return currentItem + 1 < pbrs.length;
-        if (++this.currentItem < BucketSet.this.pbrs.length) {
-          if (isStorageAssignedForBucket(this.currentItem)) {
-            return this.currentItem;
+        if (++currentItem < pbrs.length) {
+          if (isStorageAssignedForBucket(currentItem)) {
+            return currentItem;
-                  if (fpa.hasBucket(this.currentItem)) {
+                  if (fpa.hasBucket(currentItem)) {
-                  this.currentItem++;
+                  currentItem++;
-              } while (this.currentItem < BucketSet.this.pbrs.length && !bucketExists);
+              } while (currentItem < pbrs.length && !bucketExists);
-                getPartitionedRegion().createBucket(this.currentItem, 0, null);
-                return this.currentItem;
+                getPartitionedRegion().createBucket(currentItem, 0, null);
+                return currentItem;
-              getPartitionedRegion().createBucket(this.currentItem, 0, null);
-              return this.currentItem;
+              getPartitionedRegion().createBucket(currentItem, 0, null);
+              return currentItem;
-    for (ProxyBucketRegion pbr : this.buckets) {
+    for (ProxyBucketRegion pbr : buckets) {
-      logger.debug("[dumpProfiles] dumping {}", this.toStringWithProfiles());
+      logger.debug("[dumpProfiles] dumping {}", toStringWithProfiles());
-    ProxyBucketRegion[] pbrs = this.buckets;
+    ProxyBucketRegion[] pbrs = buckets;
-    Assert.assertTrue(this.buckets != null);
-    ProxyBucketRegion b = this.buckets[bucketId];
+    Assert.assertTrue(buckets != null);
+    ProxyBucketRegion b = buckets[bucketId];
-    Assert.assertTrue(this.buckets != null);
-    ProxyBucketRegion[] bucs = this.buckets;
+    Assert.assertTrue(buckets != null);
+    ProxyBucketRegion[] bucs = buckets;
-    final ProxyBucketRegion[] bucs = this.buckets;
+    final ProxyBucketRegion[] bucs = buckets;
-    synchronized (this.preInitQueueMonitor) {
-      if (this.preInitQueue != null) {
+    synchronized (preInitQueueMonitor) {
+      if (preInitQueue != null) {
-        this.preInitQueue.add(qbf);
+        preInitQueue.add(qbf);
-      this.bucketId = bId;
-      this.bucketProfile = p;
-      this.isRemoval = false;
-      this.crashed = false;
-      this.memberDeparted = false;
-      this.memberId = null;
-      this.serials = null;
-      this.destroyed = false;
-      this.fromMembershipListener = false;
+      bucketId = bId;
+      bucketProfile = p;
+      isRemoval = false;
+      crashed = false;
+      memberDeparted = false;
+      memberId = null;
+      serials = null;
+      destroyed = false;
+      fromMembershipListener = false;
-      this.bucketId = 0;
-      this.bucketProfile = null;
-      this.isRemoval = true;
+      bucketId = 0;
+      bucketProfile = null;
+      isRemoval = true;
-      this.memberDeparted = true;
-      this.memberId = mbr;
-      this.serials = null;
+      memberDeparted = true;
+      memberId = mbr;
+      serials = null;
-      this.bucketId = 0;
-      this.bucketProfile = null;
-      this.isRemoval = true;
-      this.crashed = false;
-      this.memberDeparted = false;
-      this.memberId = mbr;
+      bucketId = 0;
+      bucketProfile = null;
+      isRemoval = true;
+      crashed = false;
+      memberDeparted = false;
+      memberId = mbr;
-      this.fromMembershipListener = false;
+      fromMembershipListener = false;
-  public Set adviseBucketProfileExchange() {
+  public Set<InternalDistributedMember> adviseBucketProfileExchange() {
-    final ProxyBucketRegion[] bucs = this.buckets;
+    final ProxyBucketRegion[] bucs = buckets;
-    final ProxyBucketRegion[] bucs = this.buckets;
+    final ProxyBucketRegion[] bucs = buckets;
-    if (this.buckets != null) {
-      for (ProxyBucketRegion bucket : this.buckets) {
+    if (buckets != null) {
+      for (ProxyBucketRegion bucket : buckets) {
-      return this.id;
+      return id;
-      return this.bp;
+      return bp;
-      this.id = in.readInt();
-      this.isServerBucketProfile = in.readBoolean();
-      if (this.isServerBucketProfile)
-        this.bp = new ServerBucketProfile();
+      id = in.readInt();
+      isServerBucketProfile = in.readBoolean();
+      if (isServerBucketProfile)
+        bp = new ServerBucketProfile();
-        this.bp = new BucketProfile();
+        bp = new BucketProfile();
-      InternalDataSerializer.invokeFromData(this.bp, in);
+      InternalDataSerializer.invokeFromData(bp, in);
-      out.writeInt(this.id);
-      out.writeBoolean(this.isServerBucketProfile);
-      InternalDataSerializer.invokeToData(this.bp, out);
+      out.writeInt(id);
+      out.writeBoolean(isServerBucketProfile);
+      InternalDataSerializer.invokeToData(bp, out);
-            this.wait(1000);
+            wait(1000);
-        this.profileChanged = false;
+        profileChanged = false;
-        this.profileChanged = true;
-        this.notifyAll();
+        profileChanged = true;
+        notifyAll();
-        this.profileChanged = true;
-        this.notifyAll();
+        profileChanged = true;
+        notifyAll();

INS74 INS74 INS39 INS74 INS74 INS42 INS74 MOV43 INS43 MOV43 INS43 MOV21 MOV21 INS43 INS43 INS43 INS43 INS60 MOV60 INS43 INS43 MOV78 MOV44 MOV78 MOV44 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 MOV42 UPD42 MOV42 MOV8 MOV8 MOV43 MOV43 MOV5 INS42 MOV43 MOV43 INS42 INS42 MOV5 INS59 MOV5 INS42 MOV42 INS42 MOV5 MOV5 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV60 INS40 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS44 INS42 INS8 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV5 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 MOV32 INS42 INS40 INS42 INS40 INS42 MOV32 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL66 DEL65 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL37 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL74 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL43 DEL43 DEL42 DEL83 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL2 DEL59 DEL60 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52