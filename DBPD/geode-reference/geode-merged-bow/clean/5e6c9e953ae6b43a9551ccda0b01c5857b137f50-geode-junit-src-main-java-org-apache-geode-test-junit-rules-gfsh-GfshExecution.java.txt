GEODE-8250: Create new custom log config acceptance tests (#5309)

* Adjust GfshRule use of TemporaryFolder and use it
* Move GfshRuleIntegrationTest from test to integrationTest
* Fixup GfshRuleIntegrationTest, VersionManager, and VersionManagerJUnitTest
* Add geode-old-versions to integrationTests
* Print JAVA_HOME directory tree if assertion about java binary fails
+import static java.util.Arrays.asList;
+import static java.util.stream.Collectors.toList;
+import java.util.ArrayList;
-import java.util.stream.Collectors;
+  private static final Predicate<File> IS_SERVER_DIRECTORY = directory -> stream(directory.list())
+      .anyMatch(filename -> filename.endsWith("server.pid"));
+  private static final Predicate<File> IS_LOCATOR_DIRECTORY = directory -> stream(directory.list())
+      .anyMatch(filename -> filename.endsWith("locator.pid"));
+
-  public List<File> getServerDirs() {
-    File[] potentialMemberDirectories = workingDir.listFiles(File::isDirectory);
-
-    Predicate<File> isServerDir = directory -> stream(directory.list())
-        .anyMatch(filename -> filename.endsWith("server.pid"));
-
-    return stream(potentialMemberDirectories)
-        .filter(isServerDir)
-        .collect(Collectors.toList());
-  }
-
-  public List<File> getLocatorDirs() {
-    File[] potentialMemberDirectories = workingDir.listFiles(File::isDirectory);
-
-    Predicate<File> isLocatorDir = directory -> stream(directory.list())
-        .anyMatch(filename -> filename.endsWith("locator.pid"));
-
-    return stream(potentialMemberDirectories)
-        .filter(isLocatorDir)
-        .collect(Collectors.toList());
-  }
-
-  public void printLogFiles() {
-    System.out.println(
-        "Printing contents of all log files found in " + workingDir.getAbsolutePath());
-    List<File> logFiles = findLogFiles();
-
-    for (File logFile : logFiles) {
-      System.out.println("Contents of " + logFile.getAbsolutePath());
-      try (BufferedReader br = new BufferedReader(new InputStreamReader(
-          new FileInputStream(logFile), Charset.defaultCharset()))) {
-        String line;
-        while ((line = br.readLine()) != null) {
-          System.out.println(line);
-        }
-      } catch (IOException e) {
-        System.out.println("Unable to print log due to: " + getStackTrace(e));
-      }
-    }
-  }
-
-  private List<File> findLogFiles() {
-    List<File> servers = getServerDirs();
-    List<File> locators = getLocatorDirs();
-
-    return concat(servers.stream(), locators.stream())
-        .flatMap(this::findLogFiles)
-        .collect(Collectors.toList());
-  }
-
-  private Stream<File> findLogFiles(File memberDir) {
-    return stream(memberDir.listFiles())
-        .filter(File::isFile)
-        .filter(file -> file.getName().toLowerCase().endsWith(".log"));
-  }
-
-  private String quoteArgument(String argument) {
+  private void printLogFiles() {
+    System.out.println(
+        "Printing contents of all log files found in " + workingDir.getAbsolutePath());
+    List<File> logFiles = findLogFiles();
+
+    for (File logFile : logFiles) {
+      System.out.println("Contents of " + logFile.getAbsolutePath());
+      try (BufferedReader br = new BufferedReader(new InputStreamReader(
+          new FileInputStream(logFile), Charset.defaultCharset()))) {
+        String line;
+        while ((line = br.readLine()) != null) {
+          System.out.println(line);
+        }
+      } catch (IOException e) {
+        System.out.println("Unable to print log due to: " + getStackTrace(e));
+      }
+    }
+  }
+
+  private List<File> getServerDirs() {
+    return findPotentialMemberDirectories()
+        .stream()
+        .filter(IS_SERVER_DIRECTORY)
+        .collect(toList());
+  }
+
+  private List<File> getLocatorDirs() {
+    return findPotentialMemberDirectories()
+        .stream()
+        .filter(IS_LOCATOR_DIRECTORY)
+        .collect(toList());
+  }
+
+  private List<File> findPotentialMemberDirectories() {
+    File[] directories = workingDir.listFiles(File::isDirectory);
+
+    assertThat(directories)
+        .as("List of directories under " + workingDir.getAbsolutePath())
+        .isNotNull();
+
+    List<File> potentialMemberDirectories = new ArrayList<>(asList(directories));
+    potentialMemberDirectories.add(workingDir);
+
+    return potentialMemberDirectories;
+  }
+
+  private List<File> findLogFiles() {
+    List<File> servers = getServerDirs();
+    List<File> locators = getLocatorDirs();
+
+    return concat(servers.stream(), locators.stream())
+        .flatMap(GfshExecution::findLogFiles)
+        .collect(toList());
+  }
+
+  private static Stream<File> findLogFiles(File memberDir) {
+    return stream(memberDir.listFiles())
+        .filter(File::isFile)
+        .filter(file -> file.getName().toLowerCase().endsWith(".log"));
+  }
+
+  private static String quoteArgument(String argument) {
-
-

MOV26 INS26 INS26 MOV31 MOV31 MOV31 MOV31 INS40 UPD40 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS83 MOV74 MOV59 INS83 INS83 INS83 MOV74 MOV59 UPD83 INS83 MOV74 MOV42 INS8 INS83 MOV74 INS42 INS8 UPD83 INS74 UPD42 INS83 INS83 UPD42 UPD42 INS41 MOV41 INS43 INS43 INS21 INS60 INS21 INS41 INS32 INS42 INS42 INS32 INS74 INS59 INS32 INS42 INS32 INS42 INS32 UPD42 INS32 UPD42 MOV42 INS43 INS43 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV32 INS42 INS27 INS42 INS42 INS74 INS32 INS32 INS42 INS32 UPD42 UPD42 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL90 DEL32 DEL59 DEL60 DEL60 DEL8 DEL31 DEL42 DEL42 DEL60 DEL32 DEL42 DEL32 DEL32 DEL41 DEL52 DEL42