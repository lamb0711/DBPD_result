Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import org.apache.commons.io.FileUtils;
+import org.apache.geode.distributed.internal.ClusterConfigurationService;
-import org.apache.geode.distributed.internal.SharedConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.HashSet;
+import java.util.Set;
+
- * CacheListener on ConfigRegion to write the configuration changes to file-system.
+ * CacheListener on ConfigRegion on Locators to write the configuration changes to file-system.
-  
-  private final SharedConfiguration sharedConfig;
-  
-  public ConfigurationChangeListener(SharedConfiguration sharedConfig) {
+
+  private final ClusterConfigurationService sharedConfig;
+
+  public ConfigurationChangeListener(ClusterConfigurationService sharedConfig) {
+
-    writeToFileSystem(event);
+    addOrRemoveJarFromFilesystem(event);
-  
+
-    writeToFileSystem(event);
+    addOrRemoveJarFromFilesystem(event);
-  
-  private void writeToFileSystem(EntryEvent<String, Configuration> event) {
-    Configuration newConfig = (Configuration)event.getNewValue();
-    try {
-      sharedConfig.writeConfig(newConfig);
-    } catch (Exception e) {
-      logger.info("Exception occurred while writing the configuration changes to the filesystem: {}", e.getMessage(), e);
+
+  // when a new jar is added, if it does not exist in the current locator, download it from
+  // another locator.
+  // when a jar is removed, if it exists in the current locator, remove it.
+  private void addOrRemoveJarFromFilesystem(EntryEvent<String, Configuration> event) {
+    String group = event.getKey();
+    Configuration newConfig = (Configuration) event.getNewValue();
+    Configuration oldConfig = (Configuration) event.getOldValue();
+    Set<String> newJars = newConfig.getJarNames();
+    Set<String> oldJars = (oldConfig == null) ? new HashSet<>() : oldConfig.getJarNames();
+    Set<String> jarsAdded = new HashSet<>(newJars);
+    Set<String> jarsRemoved = new HashSet<>(oldJars);
+
+    jarsAdded.removeAll(oldJars);
+    jarsRemoved.removeAll(newJars);
+
+    if (!jarsAdded.isEmpty() && !jarsRemoved.isEmpty()) {
+      throw new IllegalStateException(
+          "We don't expect to have jars both added and removed in one event");
+    }
+
+    for (String jarAdded : jarsAdded) {
+      if (!jarExistsInFilesystem(group, jarAdded)) {
+        try {
+          sharedConfig.downloadJarFromOtherLocators(group, jarAdded);
+        } catch (Exception e) {
+          logger.error("Unable to add jar: " + jarAdded, e);
+        }
+      }
+    }
+
+    for (String jarRemoved : jarsRemoved) {
+      File jar = sharedConfig.getPathToJarOnThisLocator(group, jarRemoved).toFile();
+      if (jar.exists()) {
+        try {
+          FileUtils.forceDelete(jar);
+        } catch (IOException e) {
+          logger.error(
+              "Exception occurred while attempting to delete a jar from the filesystem: {}",
+              jarRemoved, e);
+        }
+      }
+
+  private boolean jarExistsInFilesystem(String groupName, String jarName) {
+    return sharedConfig.getPathToJarOnThisLocator(groupName, jarName).toFile().exists();
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS31 UPD43 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 UPD66 UPD42 UPD43 INS60 MOV60 INS60 INS60 INS60 INS60 INS60 INS21 INS21 INS25 INS70 INS70 INS43 INS42 INS43 INS42 INS41 UPD42 INS43 INS59 INS43 INS59 INS74 INS59 INS74 INS59 INS74 INS59 INS74 INS59 INS32 INS32 INS27 INS8 INS44 INS42 INS8 INS44 INS42 INS8 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS11 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS16 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS38 INS38 INS53 INS43 INS42 INS25 INS43 INS42 INS60 INS25 INS32 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS14 INS32 INS42 INS42 INS74 INS42 INS42 INS42 INS74 INS42 INS32 INS32 INS14 INS42 INS38 INS8 INS42 INS43 INS59 INS32 INS8 INS32 INS42 INS42 INS42 INS42 INS27 INS74 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS43 INS45 INS32 MOV54 INS42 INS42 INS32 INS42 INS42 INS54 INS42 INS42 INS42 INS42 INS42 INS33 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS32 INS43 INS42 INS21 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 UPD42 INS27 INS42 INS42 INS45 INS42 INS42 INS45 INS42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL8