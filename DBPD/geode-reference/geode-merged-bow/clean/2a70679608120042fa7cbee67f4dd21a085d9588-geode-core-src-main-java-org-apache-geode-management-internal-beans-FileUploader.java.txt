GEODE-4379: Move RemoteOutputStreamServer from gfsh to the manager (#1341)

* GEODE-4379: Move RemoteOutputStreamServer from gfsh to the manager

- This flips the deployment of jars from a pull (by server) to a push (from
  gfsh).

* GEODE-4379: Update sanctioned-geode-core-serializables.txt for FileUploader$RemoteFile

(cherry picked from commit af25a803528aacccbe47bc4729dff17d3f82fbc4)

+import java.io.BufferedOutputStream;
-import java.io.InputStream;
+import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Map;
-import com.healthmarketscience.rmiio.RemoteInputStream;
-import com.healthmarketscience.rmiio.RemoteInputStreamClient;
+import com.healthmarketscience.rmiio.RemoteOutputStream;
+import com.healthmarketscience.rmiio.RemoteOutputStreamMonitor;
+import com.healthmarketscience.rmiio.RemoteOutputStreamServer;
+import com.healthmarketscience.rmiio.SimpleRemoteOutputStream;
+import com.healthmarketscience.rmiio.exporter.RemoteStreamExporter;
-import org.apache.commons.io.IOUtils;
+  private RemoteStreamExporter exporter;
+
+  public static class RemoteFile implements Serializable {
+    private String filename;
+    private RemoteOutputStream outputStream;
+
+    public RemoteFile(String filename, RemoteOutputStream outputStream) {
+      this.filename = filename;
+      this.outputStream = outputStream;
+    }
+
+    public String getFilename() {
+      return filename;
+    }
+
+    public RemoteOutputStream getOutputStream() {
+      return outputStream;
+    }
+  }
+
+  public FileUploader(RemoteStreamExporter exporter) {
+    this.exporter = exporter;
+  }
-  public List<String> uploadFile(Map<String, RemoteInputStream> remoteFiles) throws IOException {
-    List<String> stagedFiles = new ArrayList<>();
-
+  public RemoteFile uploadFile(String filename) throws IOException {
-    for (String filename : remoteFiles.keySet()) {
-      File stagedFile = new File(tempDir.toString(), filename);
-      FileOutputStream fos = new FileOutputStream(stagedFile);
+    File stagedFile = new File(tempDir.toString(), filename);
+    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(stagedFile));
-      InputStream input = RemoteInputStreamClient.wrap(remoteFiles.get(filename));
-      IOUtils.copyLarge(input, fos);
+    RemoteOutputStreamMonitor monitor = new RemoteOutputStreamMonitor() {
+      @Override
+      public void closed(RemoteOutputStreamServer stream, boolean clean) {
+        try {
+          stream.close(true);
+        } catch (IOException e) {
+          logger.error("error closing RemoteOutputStreamServer", e);
+        }
+      }
+    };
-      fos.close();
-      input.close();
+    RemoteOutputStreamServer server = new SimpleRemoteOutputStream(bos, monitor);
+    RemoteOutputStream remoteStream = exporter.export(server);
-      stagedFiles.add(stagedFile.getAbsolutePath());
-    }
+    RemoteFile remoteFile = new RemoteFile(stagedFile.getAbsolutePath(), remoteStream);
-    return stagedFiles;
+    return remoteFile;
-    Path parent = Paths.get(files.get(0)).getParent();
-    if (!parent.getFileName().toString().startsWith(STAGED_DIR_PREFIX)) {
-      throw new GemFireSecurityException(
-          String.format("Cannot delete %s, not in the uploaded directory.", files.get(0)));
-    }
-    try {
-      FileUtils.deleteDirectory(parent.toFile());
-    } catch (IOException e) {
-      logger.error(e.getMessage(), e);
+    for (String filename : files) {
+      File file = new File(filename);
+      File parent = file.getParentFile();
+
+      if (!parent.getName().startsWith(STAGED_DIR_PREFIX)) {
+        throw new GemFireSecurityException(
+            String.format("Cannot delete %s, not in the uploaded directory.", filename));
+      }
+
+      FileUtils.deleteQuietly(file);
+      FileUtils.deleteQuietly(parent);

MOV26 MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS23 INS55 INS31 INS83 INS43 INS59 INS83 INS83 INS42 INS43 INS23 INS23 INS31 INS31 INS31 INS83 INS42 INS44 INS8 INS43 MOV44 INS8 INS42 INS42 INS42 INS83 MOV43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 INS8 INS43 INS42 INS21 UPD42 MOV42 MOV60 MOV60 INS60 INS60 INS60 INS60 MOV25 INS70 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS41 INS42 INS41 INS42 INS7 UPD43 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 UPD42 INS44 INS42 INS8 INS42 INS42 INS7 INS7 INS42 INS42 INS22 INS42 UPD42 UPD42 INS14 UPD42 MOV42 UPD42 MOV42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS60 MOV60 MOV25 MOV21 MOV21 INS22 INS42 INS22 INS42 INS52 INS42 INS43 MOV14 INS43 INS1 INS43 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 MOV32 INS42 INS42 INS43 INS59 UPD43 INS52 INS42 INS52 INS42 INS42 UPD42 MOV42 INS31 INS42 INS42 INS42 INS42 INS14 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS42 UPD42 MOV42 UPD42 MOV32 INS42 INS43 INS42 INS39 INS42 INS54 INS42 UPD42 UPD42 MOV42 INS8 INS12 UPD42 MOV42 INS21 MOV44 INS8 INS32 INS21 UPD42 MOV42 UPD42 MOV42 INS9 INS32 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 MOV42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL43 DEL74 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL43 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL42 DEL32 DEL42 DEL34 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL8 DEL8 DEL12 DEL54 DEL8