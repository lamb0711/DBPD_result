Merge branch 'release/1.4.0'

-import java.io.BufferedInputStream;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.OutputStream;
+import java.nio.file.Files;
+import org.apache.geode.annotations.TestingOnly;
-   * 
+   *
-  public DeployedJar deployWithoutRegistering(final String jarName, final byte[] jarBytes)
+  public DeployedJar deployWithoutRegistering(final String jarName, final File stagedJar)
-      boolean shouldDeployNewVersion = shouldDeployNewVersion(jarName, jarBytes);
+      boolean shouldDeployNewVersion = shouldDeployNewVersion(jarName, stagedJar);
-      writeJarBytesToFile(newVersionedJarFile, jarBytes);
+      Files.copy(stagedJar.toPath(), newVersionedJarFile.toPath());
-      return new DeployedJar(newVersionedJarFile, jarName, jarBytes);
+      return new DeployedJar(newVersionedJarFile, jarName);
-   * 
+   *
-   * Attempt to write the given bytes to the given file. If this VM is able to successfully write
-   * the contents to the file, or another VM writes the exact same contents, then the write is
-   * considered to be successful.
-   * 
-   * @param file File of the JAR file to deploy.
-   * @param jarBytes Contents of the JAR file to deploy.
-   * @return True if the file was successfully written, false otherwise
-   */
-  private boolean writeJarBytesToFile(final File file, final byte[] jarBytes) throws IOException {
-    final boolean isDebugEnabled = logger.isDebugEnabled();
-    if (file.createNewFile()) {
-      if (isDebugEnabled) {
-        logger.debug("Successfully created new JAR file: {}", file.getAbsolutePath());
-      }
-      final OutputStream outStream = new FileOutputStream(file);
-      outStream.write(jarBytes);
-      outStream.close();
-      return true;
-    }
-    return doesFileMatchBytes(file, jarBytes);
-  }
-
-  /**
-   * Determine if the contents of the file referenced is an exact match for the bytes provided. The
-   * method first checks to see if the file is actively being written by checking the length over
-   * time. If it appears that the file is actively being written, then it loops waiting for that to
-   * complete before doing the comparison.
-   * 
-   * @param file File to compare
-   * @param bytes Bytes to compare
-   * @return True if there's an exact match, false otherwise
-   * @throws IOException If there's a problem reading the file
-   */
-  private boolean doesFileMatchBytes(final File file, final byte[] bytes) throws IOException {
-    // First check to see if the file is actively being written (if it's not big enough)
-    final String absolutePath = file.getAbsolutePath();
-    boolean keepTrying = true;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
-    while (file.length() < bytes.length && keepTrying) {
-      if (isDebugEnabled) {
-        logger.debug("Loop waiting for another to write file: {}", absolutePath);
-      }
-      long startingFileLength = file.length();
-      try {
-        Thread.sleep(500);
-      } catch (InterruptedException iex) {
-        // Just keep looping
-      }
-      if (startingFileLength == file.length()) {
-        if (isDebugEnabled) {
-          logger.debug("Done waiting for another to write file: {}", absolutePath);
-        }
-        // Assume the other process has finished writing
-        keepTrying = false;
-      }
-    }
-
-    // If they don't have the same number of bytes then nothing to do
-    if (file.length() != bytes.length) {
-      if (isDebugEnabled) {
-        logger.debug("Unmatching file length when waiting for another to write file: {}",
-            absolutePath);
-      }
-      return false;
-    }
-
-    // Open the file then loop comparing each byte
-    BufferedInputStream inStream = new BufferedInputStream(new FileInputStream(file));
-    int index = 0;
-    try {
-      for (; index < bytes.length; index++) {
-        if (((byte) inStream.read()) != bytes[index]) {
-          if (isDebugEnabled) {
-            logger.debug("Did not find a match when waiting for another to write file: {}",
-                absolutePath);
-          }
-          return false;
-        }
-      }
-    } finally {
-      inStream.close();
-    }
-
-    return true;
-  }
-
-  /**
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    Optional<File> latestValidDeployedJarOptional =
-        Arrays.stream(jarFiles).filter(Objects::nonNull).filter(jarFile -> {
-          try {
-            return DeployedJar.hasValidJarContent(FileUtils.readFileToByteArray(jarFile));
-          } catch (IOException e) {
-            return false;
-          }
-        }).findFirst();
+    Optional<File> latestValidDeployedJarOptional = Arrays.stream(jarFiles).filter(Objects::nonNull)
+        .filter(jarFile -> DeployedJar.hasValidJarContent(jarFile)).findFirst();
-   * 
-   * @param jarNames Array of names of the JAR files to deploy.
-   * @param jarBytes Array of contents of the JAR files to deploy.
+   *
+   * @param stagedJarFiles A map of Files which have been staged in another location and are ready
+   *        to be deployed as a unit.
-  public List<DeployedJar> deploy(final String jarNames[], final byte[][] jarBytes)
+  public List<DeployedJar> deploy(final Map<String, File> stagedJarFiles)
-    DeployedJar[] deployedJars = new DeployedJar[jarNames.length];
+    List<DeployedJar> deployedJars = new ArrayList<>(stagedJarFiles.size());
-    for (int i = 0; i < jarNames.length; i++) {
-      if (!DeployedJar.hasValidJarContent(jarBytes[i])) {
+    for (File jar : stagedJarFiles.values()) {
+      if (!DeployedJar.hasValidJarContent(jar)) {
-            "File does not contain valid JAR content: " + jarNames[i]);
+            "File does not contain valid JAR content: " + jar.getName());
-      for (int i = 0; i < jarNames.length; i++) {
-        String jarName = jarNames[i];
-        byte[] newJarBytes = jarBytes[i];
-
-        deployedJars[i] = deployWithoutRegistering(jarName, newJarBytes);
+      for (String fileName : stagedJarFiles.keySet()) {
+        deployedJars.add(deployWithoutRegistering(fileName, stagedJarFiles.get(fileName)));
-      return registerNewVersions(Arrays.asList(deployedJars));
+      return registerNewVersions(deployedJars);
-  private boolean shouldDeployNewVersion(String jarName, byte[] newJarBytes) throws IOException {
+  private boolean shouldDeployNewVersion(String jarName, File stagedJar) throws IOException {
-    if (oldDeployedJar.hasSameContentAs(newJarBytes)) {
+    if (oldDeployedJar.hasSameContentAs(stagedJar)) {
-   * 
+   *
-  public DeployedJar findDeployedJar(String jarName) {
+  public DeployedJar getDeployedJar(String jarName) {
-  public DeployedJar deploy(final String jarName, final byte[] jarBytes)
+  @TestingOnly
+  public DeployedJar deploy(final String jarName, final File stagedJarFile)
+    Map<String, File> jarFiles = new HashMap<>();
+    jarFiles.put(jarName, stagedJarFile);
+
-      List<DeployedJar> deployedJars = deploy(new String[] {jarName}, new byte[][] {jarBytes});
+      List<DeployedJar> deployedJars = deploy(jarFiles);
-   * 
+   *

MOV26 MOV26 UPD40 UPD40 INS31 MOV29 UPD83 MOV83 MOV74 UPD42 MOV42 MOV44 MOV43 MOV43 INS8 UPD42 INS78 MOV44 MOV43 INS42 INS74 UPD42 INS60 INS70 MOV21 MOV54 INS43 UPD42 INS42 UPD42 INS60 INS21 INS42 UPD42 INS66 UPD66 INS43 MOV43 INS43 INS74 INS59 INS44 INS32 INS8 INS42 INS74 INS59 INS32 INS42 MOV42 INS43 INS43 UPD42 MOV42 INS14 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV25 INS70 UPD42 INS43 MOV43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS74 INS32 UPD42 INS44 INS32 INS8 INS42 INS42 INS74 UPD42 INS42 INS32 INS32 INS43 UPD42 MOV42 UPD42 MOV42 MOV43 INS42 INS42 INS42 MOV21 MOV42 INS43 UPD42 INS42 INS42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 MOV42 MOV42 MOV42 INS42 INS42 INS32 INS32 MOV42 UPD42 MOV42 INS32 INS42 INS42 UPD42 MOV42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL39 DEL85 DEL5 DEL42 DEL42 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL83 DEL39 DEL85 DEL5 DEL42 DEL44 DEL43 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL83 DEL43 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL83 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL27 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL44 DEL8 DEL12 DEL54 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL2 DEL27 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL8 DEL24 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL9 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL42 DEL66 DEL65 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL32 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL8 DEL24 DEL42 DEL42 DEL32 DEL83 DEL42 DEL83 DEL42 DEL85 DEL44 DEL83 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL31 DEL39 DEL85 DEL5 DEL83 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL39 DEL85 DEL85 DEL5 DEL42 DEL4 DEL3