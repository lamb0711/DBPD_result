GEODE-2644: Cleanup logging classes

- *
-  // TODO:LOG:SECURITY: need to use this either here if isSecure==true or in the security
-  // LogWriterAppender's PatternLayout but not both places
-    this.logWrapper = this;
+    logWrapper = this;
-    this.loggerName = getName();
+    loggerName = getName();
-    final Logger wrapped = LogManager.getLogger(name, GemFireParameterizedMessageFactory.INSTANCE);
+    Logger wrapped = LogManager.getLogger(name, GemFireParameterizedMessageFactory.INSTANCE);
-      debug("Changing level for Logger '{}' from {} to {}", this.loggerName, getLevel(), level);
+      debug("Changing level for Logger '{}' from {} to {}", loggerName, getLevel(), level);
-    if (LogService.MAIN_LOGGER_NAME.equals(this.loggerName)) {
+    if (LogService.MAIN_LOGGER_NAME.equals(loggerName)) {
-    } else if (LogService.SECURITY_LOGGER_NAME.equals(this.loggerName)) {
+    } else if (LogService.SECURITY_LOGGER_NAME.equals(loggerName)) {
-      Configurator.setLevel(this.loggerName, level);
+      Configurator.setLevel(loggerName, level);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void finest(final Marker marker, final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, msg, (Throwable) null);
+  @Override
+  public void finest(final Marker marker, final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void finest(final Marker marker, final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, msg, t);
+  @Override
+  public void finest(final Marker marker, final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, null);
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void finest(final Marker marker, final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, t);
+  @Override
+  public void finest(final Marker marker, final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void finest(final Marker marker, final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, params);
+  @Override
+  public void finest(final Marker marker, final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, parameters);
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void finest(final Marker marker, final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, t);
+  @Override
+  public void finest(final Marker marker, final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, throwable);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void finest(final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, msg, (Throwable) null);
+  @Override
+  public void finest(final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void finest(final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, msg, t);
+  @Override
+  public void finest(final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void finest(final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, t);
+  @Override
+  public void finest(final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, throwable);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
-   */
-  public void finest(final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, params);
-  }
-
-  /**
-   * Logs a message at the {@code Level.TRACE} level including the stack trace of the
-   * {@link Throwable} {@code t} passed as parameter.
-   *
-   * @param message the message to log.
-   * @param t the exception to log, including its stack trace.
+   * @param parameters parameters to the message.
-  public void finest(final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, t);
-  }
-
-  /**
-   * Logs a message with the specific Marker at the {@code Level.TRACE} level.
-   *
-   * @param marker the marker data specific to this log statement
-   * @param msg the message string to be logged
-   */
-  public void finer(final Marker marker, final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, msg, (Throwable) null);
-  }
-
-  /**
-   * Logs a message with the specific Marker at the {@code Level.TRACE} level.
-   *
-   * @param marker the marker data specific to this log statement
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
-   */
-  public void finer(final Marker marker, final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, msg, t);
-  }
-
-  /**
-   * Logs a message object with the {@code Level.TRACE} level.
-   *
-   * @param marker the marker data specific to this log statement
-   * @param message the message object to log.
-   */
-  public void finer(final Marker marker, final Object message) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, (Throwable) null);
+  public void finest(final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, parameters);
-   * @param marker the marker data specific to this log statement
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void finer(final Marker marker, final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, t);
+  @Override
+  public void finest(final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, throwable);
+  }
+
+  /**
+   * Logs a message with the specific Marker at the {@code Level.TRACE} level.
+   *
+   * @param marker the marker data specific to this log statement
+   * @param message the message string to be logged
+   */
+  @Override
+  public void finer(final Marker marker, final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, null);
+  }
+
+  /**
+   * Logs a message with the specific Marker at the {@code Level.TRACE} level.
+   *
+   * @param marker the marker data specific to this log statement
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
+   */
+  @Override
+  public void finer(final Marker marker, final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, throwable);
+  @Override
+  public void finer(final Marker marker, final Object message) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, null);
+  }
+
+  /**
+   * Logs a message at the {@code Level.TRACE} level including the stack trace of the
+   * {@link Throwable} {@code throwable} passed as parameter.
+   *
+   * @param marker the marker data specific to this log statement
+   * @param message the message to log.
+   * @param throwable the exception to log, including its stack trace.
+   */
+  @Override
+  public void finer(final Marker marker, final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, throwable);
+  }
+
+  /**
+   * Logs a message object with the {@code Level.TRACE} level.
+   *
+   * @param marker the marker data specific to this log statement
+   * @param message the message object to log.
+   */
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void finer(final Marker marker, final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, params);
+  @Override
+  public void finer(final Marker marker, final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, parameters);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void finer(final Marker marker, final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, marker, message, t);
+  @Override
+  public void finer(final Marker marker, final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, marker, message, throwable);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void finer(final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, msg, (Throwable) null);
+  @Override
+  public void finer(final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void finer(final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, msg, t);
+  @Override
+  public void finer(final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void finer(final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, t);
+  @Override
+  public void finer(final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, throwable);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void finer(final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, params);
+  @Override
+  public void finer(final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, parameters);
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void finer(final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.TRACE, null, message, t);
+  public void finer(final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.TRACE, null, message, throwable);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void fine(final Marker marker, final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, marker, msg, (Throwable) null);
+  @Override
+  public void fine(final Marker marker, final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, marker, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void fine(final Marker marker, final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, marker, msg, t);
+  @Override
+  public void fine(final Marker marker, final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, marker, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void fine(final Marker marker, final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, marker, message, t);
+  @Override
+  public void fine(final Marker marker, final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, marker, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void fine(final Marker marker, final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, marker, message, params);
+  @Override
+  public void fine(final Marker marker, final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, marker, message, parameters);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void fine(final Marker marker, final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, marker, message, t);
+  @Override
+  public void fine(final Marker marker, final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, marker, message, throwable);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void fine(final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, null, msg, (Throwable) null);
+  @Override
+  public void fine(final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, null, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void fine(final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, null, msg, t);
+  @Override
+  public void fine(final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, null, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, null, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void fine(final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, null, message, t);
+  @Override
+  public void fine(final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, null, message, throwable);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, null, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void fine(final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, null, message, params);
+  @Override
+  public void fine(final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, null, message, parameters);
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void fine(final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.DEBUG, null, message, t);
+  public void fine(final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.DEBUG, null, message, throwable);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void config(final Marker marker, final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, msg, (Throwable) null);
+  @Override
+  public void config(final Marker marker, final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void config(final Marker marker, final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, msg, t);
+  @Override
+  public void config(final Marker marker, final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void config(final Marker marker, final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, t);
+  @Override
+  public void config(final Marker marker, final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void config(final Marker marker, final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, params);
+  @Override
+  public void config(final Marker marker, final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, parameters);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void config(final Marker marker, final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, t);
+  @Override
+  public void config(final Marker marker, final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, throwable);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void config(final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, msg, (Throwable) null);
+  @Override
+  public void config(final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void config(final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, msg, t);
+  @Override
+  public void config(final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void config(final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, t);
+  @Override
+  public void config(final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, throwable);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void config(final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, params);
+  @Override
+  public void config(final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, parameters);
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void config(final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, t);
+  public void config(final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, throwable);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, msg, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, msg, null);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, msg, t);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, msg, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, t);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, (Throwable) null);
-   * @see #getMessageFactory()
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, params);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, params);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, marker, message, t);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, marker, message, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, msg, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, msg, null);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, msg, t);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, msg, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, t);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, (Throwable) null);
-   * @see #getMessageFactory()
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, params);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, params);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-    this.logWrapper.logIfEnabled(this.loggerName, Level.INFO, null, message, t);
+    logWrapper.logIfEnabled(loggerName, Level.INFO, null, message, t);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void warning(final Marker marker, final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, marker, msg, (Throwable) null);
+  @Override
+  public void warning(final Marker marker, final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, marker, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void warning(final Marker marker, final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, marker, msg, t);
+  @Override
+  public void warning(final Marker marker, final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.WARN, marker, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void warning(final Marker marker, final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, marker, message, t);
+  @Override
+  public void warning(final Marker marker, final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.WARN, marker, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void warning(final Marker marker, final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, marker, message, params);
+  @Override
+  public void warning(final Marker marker, final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, marker, message, parameters);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void warning(final Marker marker, final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, marker, message, t);
+  @Override
+  public void warning(final Marker marker, final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, marker, message, throwable);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void warning(final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, null, msg, (Throwable) null);
+  @Override
+  public void warning(final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, null, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void warning(final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, null, msg, t);
+  @Override
+  public void warning(final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, null, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.WARN, null, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void warning(final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, null, message, t);
+  @Override
+  public void warning(final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, null, message, throwable);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.WARN, null, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void warning(final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, null, message, params);
+  @Override
+  public void warning(final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, null, message, parameters);
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void warning(final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.WARN, null, message, t);
+  public void warning(final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.WARN, null, message, throwable);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, marker, msg, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, marker, msg, null);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, marker, msg, t);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, marker, msg, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, marker, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, marker, message, t);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, marker, message, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, marker, message, (Throwable) null);
-   * @see #getMessageFactory()
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, marker, message, params);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, marker, message, params);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, marker, message, t);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, marker, message, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, null, msg, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, null, msg, null);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, null, msg, t);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, null, msg, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, null, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, null, message, t);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, null, message, t);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, null, message, (Throwable) null);
-   * @see #getMessageFactory()
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, null, message, params);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, null, message, params);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-    this.logWrapper.logIfEnabled(this.loggerName, Level.ERROR, null, message, t);
+    logWrapper.logIfEnabled(loggerName, Level.ERROR, null, message, t);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void severe(final Marker marker, final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, marker, msg, (Throwable) null);
+  @Override
+  public void severe(final Marker marker, final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, marker, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void severe(final Marker marker, final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, marker, msg, t);
+  @Override
+  public void severe(final Marker marker, final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, marker, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void severe(final Marker marker, final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, marker, message, t);
+  @Override
+  public void severe(final Marker marker, final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, marker, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, marker, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, marker, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void severe(final Marker marker, final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, marker, message, params);
+  @Override
+  public void severe(final Marker marker, final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, marker, message, parameters);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void severe(final Marker marker, final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, marker, message, t);
+  @Override
+  public void severe(final Marker marker, final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, marker, message, throwable);
-   * @param msg the message string to be logged
+   * @param message the message string to be logged
-  public void severe(final Message msg) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, null, msg, (Throwable) null);
+  @Override
+  public void severe(final Message message) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, null, message, null);
-   * @param msg the message string to be logged
-   * @param t A Throwable or null.
+   * @param message the message string to be logged
+   * @param throwable A Throwable or null.
-  public void severe(final Message msg, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, null, msg, t);
+  @Override
+  public void severe(final Message message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, null, message, throwable);
+  @Override
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, null, message, null);
-   * {@link Throwable} {@code t} passed as parameter.
+   * {@link Throwable} {@code throwable} passed as parameter.
-   * @param t the exception to log, including its stack trace.
+   * @param throwable the exception to log, including its stack trace.
-  public void severe(final Object message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, null, message, t);
+  @Override
+  public void severe(final Object message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, null, message, throwable);
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, null, message, (Throwable) null);
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, null, message, (Throwable) null);
-   * @param params parameters to the message.
-   * @see #getMessageFactory()
+   * @param parameters parameters to the message.
-  public void severe(final String message, final Object... params) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, null, message, params);
+  @Override
+  public void severe(final String message, final Object... parameters) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, null, message, parameters);
-   * @param t the exception to log, including its stack
-   *        trace.LogService.getLogWriterLogger().enter()
+   * @param throwable the exception to log, including its stack
-  public void severe(final String message, final Throwable t) {
-    this.logWrapper.logIfEnabled(this.loggerName, Level.FATAL, null, message, t);
+  public void severe(final String message, final Throwable throwable) {
+    logWrapper.logIfEnabled(loggerName, Level.FATAL, null, message, throwable);
-  public void log(int logWriterLevel, final String message, final Throwable t) {
+  public void log(int logWriterLevel, final String message, final Throwable throwable) {
-    this.logWrapper.logIfEnabled(this.loggerName, level, null, message, t);
+    logWrapper.logIfEnabled(loggerName, level, null, message, throwable);
-    this.finer("ENTRY {}:{}", sourceClass, sourceMethod);
+    finer("ENTRY {}:{}", sourceClass, sourceMethod);
-    this.finer("RETURN {}:{}", sourceClass, sourceMethod);
+    finer("RETURN {}:{}", sourceClass, sourceMethod);
-    this.finer("THROW {}:{}", sourceClass, sourceMethod, thrown);
+    finer("THROW {}:{}", sourceClass, sourceMethod, thrown);
-    return new GemFireHandler(this); // TODO:LOG:CLEANUP: DO WE NEED A DIFFERENT HANDLER OR IS THIS
-                                     // OKAY?
+    return new GemFireHandler(this);
-  public void severe(Throwable ex) {
-    severe((String) null, ex);
+  public void severe(Throwable throwable) {
+    severe((String) null, throwable);
-  public void error(Throwable ex) {
-    error((String) null, ex);
+  public void error(Throwable throwable) {
+    error((String) null, throwable);
-  public void warning(Throwable ex) {
-    warning((String) null, ex);
+  public void warning(Throwable throwable) {
+    warning((String) null, throwable);
-  public void info(Throwable ex) {
-    info((String) null, ex);
+  public void info(Throwable throwable) {
+    info((String) null, throwable);
-  public void config(Throwable ex) {
-    config((String) null, ex);
+  public void config(Throwable throwable) {
+    config((String) null, throwable);
-  public void fine(Throwable ex) {
-    fine((String) null, ex);
+  public void fine(Throwable throwable) {
+    fine((String) null, throwable);
-  public void finer(Throwable ex) {
-    finer((String) null, ex);
+  public void finer(Throwable throwable) {
+    finer((String) null, throwable);
-  public void finest(Throwable ex) {
-    finest((String) null, ex);
+  public void finest(Throwable throwable) {
+    finest((String) null, throwable);
-  /********************************************
-   * Methods below are specific to LogWriterI18n
-   *********************************************/
-
-  public void severe(StringId msgID, Object[] params, Throwable ex) {
+  public void severe(StringId messageId, Object[] parameters, Throwable throwable) {
-      severe(msgID.toLocalizedString(params), ex);
+      severe(messageId.toLocalizedString(parameters), throwable);
-  public void severe(StringId msgID, Object param, Throwable ex) {
+  public void severe(StringId messageId, Object parameter, Throwable throwable) {
-      severe(msgID.toLocalizedString(param), ex);
+      severe(messageId.toLocalizedString(parameter), throwable);
-  public void severe(StringId msgID, Throwable ex) {
+  public void severe(StringId messageId, Throwable throwable) {
-      severe(msgID.toLocalizedString(), ex);
+      severe(messageId.toLocalizedString(), throwable);
-  public void severe(StringId msgID, Object[] params) {
+  public void severe(StringId messageId, Object[] parameters) {
-      severe(msgID.toLocalizedString(params));
+      severe(messageId.toLocalizedString(parameters));
-  public void severe(StringId msgID, Object param) {
+  public void severe(StringId messageId, Object parameter) {
-      severe(msgID.toLocalizedString(param));
+      severe(messageId.toLocalizedString(parameter));
-  public void severe(StringId msgID) {
+  public void severe(StringId messageId) {
-      severe(msgID.toLocalizedString());
+      severe(messageId.toLocalizedString());
-  public void error(StringId msgID, Object[] params, Throwable ex) {
+  public void error(StringId messageId, Object[] parameters, Throwable throwable) {
-      error(msgID.toLocalizedString(params), ex);
+      error(messageId.toLocalizedString(parameters), throwable);
-  public void error(StringId msgID, Object param, Throwable ex) {
+  public void error(StringId messageId, Object parameter, Throwable throwable) {
-      error(msgID.toLocalizedString(param), ex);
+      error(messageId.toLocalizedString(parameter), throwable);
-  public void error(StringId msgID, Throwable ex) {
+  public void error(StringId messageId, Throwable throwable) {
-      error(msgID.toLocalizedString(), ex);
+      error(messageId.toLocalizedString(), throwable);
-  public void error(StringId msgID, Object[] params) {
+  public void error(StringId messageId, Object[] parameters) {
-      error(msgID.toLocalizedString(params));
+      error(messageId.toLocalizedString(parameters));
-  public void error(StringId msgID, Object param) {
+  public void error(StringId messageId, Object parameter) {
-      error(msgID.toLocalizedString(param));
+      error(messageId.toLocalizedString(parameter));
-  public void error(StringId msgID) {
+  public void error(StringId messageId) {
-      error(msgID.toLocalizedString());
+      error(messageId.toLocalizedString());
-  public void warning(StringId msgID, Object[] params, Throwable ex) {
+  public void warning(StringId messageId, Object[] parameters, Throwable throwable) {
-      warning(msgID.toLocalizedString(params), ex);
+      warning(messageId.toLocalizedString(parameters), throwable);
-  public void warning(StringId msgID, Object param, Throwable ex) {
+  public void warning(StringId messageId, Object parameter, Throwable throwable) {
-      warning(msgID.toLocalizedString(param), ex);
+      warning(messageId.toLocalizedString(parameter), throwable);
-  public void warning(StringId msgID, Throwable ex) {
+  public void warning(StringId messageId, Throwable throwable) {
-      warning(msgID.toLocalizedString(), ex);
+      warning(messageId.toLocalizedString(), throwable);
-  public void warning(StringId msgID, Object[] params) {
+  public void warning(StringId messageId, Object[] parameters) {
-      warning(msgID.toLocalizedString(params));
+      warning(messageId.toLocalizedString(parameters));
-  public void warning(StringId msgID, Object param) {
+  public void warning(StringId messageId, Object parameter) {
-      warning(msgID.toLocalizedString(param));
+      warning(messageId.toLocalizedString(parameter));
-  public void warning(StringId msgID) {
+  public void warning(StringId messageId) {
-      warning(msgID.toLocalizedString());
+      warning(messageId.toLocalizedString());
-  public void info(StringId msgID, Object[] params, Throwable ex) {
+  public void info(StringId messageId, Object[] parameters, Throwable throwable) {
-      info(msgID.toLocalizedString(params), ex);
+      info(messageId.toLocalizedString(parameters), throwable);
-  public void info(StringId msgID, Object param, Throwable ex) {
+  public void info(StringId messageId, Object parameter, Throwable throwable) {
-      info(msgID.toLocalizedString(param), ex);
+      info(messageId.toLocalizedString(parameter), throwable);
-  public void info(StringId msgID, Throwable ex) {
+  public void info(StringId messageId, Throwable throwable) {
-      info(msgID.toLocalizedString(), ex);
+      info(messageId.toLocalizedString(), throwable);
-  public void info(StringId msgID, Object[] params) {
+  public void info(StringId messageId, Object[] parameters) {
-      info(msgID.toLocalizedString(params));
+      info(messageId.toLocalizedString(parameters));
-  public void info(StringId msgID, Object param) {
+  public void info(StringId messageId, Object parameter) {
-      info(msgID.toLocalizedString(param));
+      info(messageId.toLocalizedString(parameter));
-  public void info(StringId msgID) {
+  public void info(StringId messageId) {
-      info(msgID.toLocalizedString());
+      info(messageId.toLocalizedString());
-  public void config(StringId msgID, Object[] params, Throwable ex) {
+  public void config(StringId messageId, Object[] parameters, Throwable throwable) {
-      config(msgID.toLocalizedString(params), ex);
+      config(messageId.toLocalizedString(parameters), throwable);
-  public void config(StringId msgID, Object param, Throwable ex) {
+  public void config(StringId messageId, Object parameter, Throwable throwable) {
-      config(msgID.toLocalizedString(param), ex);
+      config(messageId.toLocalizedString(parameter), throwable);
-  public void config(StringId msgID, Throwable ex) {
+  public void config(StringId messageId, Throwable throwable) {
-      config(msgID.toLocalizedString(), ex);
+      config(messageId.toLocalizedString(), throwable);
-  public void config(StringId msgID, Object[] params) {
+  public void config(StringId messageId, Object[] parameters) {
-      config(msgID.toLocalizedString(params));
+      config(messageId.toLocalizedString(parameters));
-  public void config(StringId msgID, Object param) {
+  public void config(StringId messageId, Object parameter) {
-      config(msgID.toLocalizedString(param));
+      config(messageId.toLocalizedString(parameter));
-  public void config(StringId msgID) {
+  public void config(StringId messageId) {
-      config(msgID.toLocalizedString());
+      config(messageId.toLocalizedString());
-    final Level log4jLevel = this.logWrapper.getLevel();
+    final Level log4jLevel = logWrapper.getLevel();
-    return this.isSecure;
+    return isSecure;
-  public void put(int msgLevel, String msg, Throwable exception) {
-    log(msgLevel, msg, exception);
+  public void put(int messageLevel, String message, Throwable throwable) {
+    log(messageLevel, message, throwable);
-  public void put(int msgLevel, StringId msgId, Object[] params, Throwable exception) {
-    log(msgLevel, msgId.toLocalizedString(params), exception);
+  public void put(int messageLevel, StringId messageId, Object[] parameters, Throwable throwable) {
+    log(messageLevel, messageId.toLocalizedString(parameters), throwable);
-    return this.connectionName;
+    return connectionName;

