Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class wraps 1) DistributedMembershipID 2) ThreadID 3) SequenceID
- * attributes which are used to uniquely identify any Region Operation like
- * create, update, destroy etc. This helps in sequencing the events belonging to
- * a unique producer. As an example, the EventSequenceID can be used to track 
- * the events received by <code>AsyncEventListener</code>. 
- * If the event has already been seen, <code>AsyncEventListener</code> can 
- * choose to ignore it.
+ * This class wraps 1) DistributedMembershipID 2) ThreadID 3) SequenceID attributes which are used
+ * to uniquely identify any Region Operation like create, update, destroy etc. This helps in
+ * sequencing the events belonging to a unique producer. As an example, the EventSequenceID can be
+ * used to track the events received by <code>AsyncEventListener</code>. If the event has already
+ * been seen, <code>AsyncEventListener</code> can choose to ignore it.
-   * Uniquely identifies the distributed member VM in which the Event is
-   * produced
+   * Uniquely identifies the distributed member VM in which the Event is produced
-      mbr = InternalDistributedMember.readEssentialData(new DataInputStream(
-          new ByteArrayInputStream(membershipID)));
-    }
-    catch (Exception e) {
+      mbr = InternalDistributedMember
+          .readEssentialData(new DataInputStream(new ByteArrayInputStream(membershipID)));
+    } catch (Exception e) {
-  
+
-    EventSequenceID obj2 = (EventSequenceID)obj;
-    return (this.membershipID.equals(obj2.getMembershipID())
-        && this.threadID == obj2.getThreadID() 
+    EventSequenceID obj2 = (EventSequenceID) obj;
+    return (this.membershipID.equals(obj2.getMembershipID()) && this.threadID == obj2.getThreadID()
-  
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66