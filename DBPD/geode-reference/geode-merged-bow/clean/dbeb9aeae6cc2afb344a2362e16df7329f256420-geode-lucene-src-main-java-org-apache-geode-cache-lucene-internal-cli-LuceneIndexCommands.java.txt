Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import java.util.List;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-import org.apache.geode.security.ResourcePermission.Operation;
-import org.apache.geode.security.ResourcePermission.Resource;
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-
+import org.apache.geode.security.ResourcePermission.Operation;
+import org.apache.geode.security.ResourcePermission.Resource;
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
- * The LuceneIndexCommands class encapsulates all Geode shell (Gfsh) commands related to Lucene indexes defined in Geode.
+ * The LuceneIndexCommands class encapsulates all Geode shell (Gfsh) commands related to Lucene
+ * indexes defined in Geode.
+ * 
-  private static final LuceneCreateIndexFunction createIndexFunction = new LuceneCreateIndexFunction();
-  private static final LuceneDescribeIndexFunction describeIndexFunction = new LuceneDescribeIndexFunction();
-  private static final LuceneSearchIndexFunction searchIndexFunction = new LuceneSearchIndexFunction();
-  private List<LuceneSearchResults> searchResults=null;
+  private static final LuceneCreateIndexFunction createIndexFunction =
+      new LuceneCreateIndexFunction();
+  private static final LuceneDescribeIndexFunction describeIndexFunction =
+      new LuceneDescribeIndexFunction();
+  private static final LuceneSearchIndexFunction searchIndexFunction =
+      new LuceneSearchIndexFunction();
+  private List<LuceneSearchResults> searchResults = null;
-  @CliCommand(value = LuceneCliStrings.LUCENE_LIST_INDEX, help = LuceneCliStrings.LUCENE_LIST_INDEX__HELP)
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA })
+  @CliCommand(value = LuceneCliStrings.LUCENE_LIST_INDEX,
+      help = LuceneCliStrings.LUCENE_LIST_INDEX__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
-  public Result listIndex(
-    @CliOption(key = LuceneCliStrings.LUCENE_LIST_INDEX__STATS,
-      mandatory=false,
-      specifiedDefaultValue = "true",
-      unspecifiedDefaultValue = "false",
+  public Result listIndex(@CliOption(key = LuceneCliStrings.LUCENE_LIST_INDEX__STATS,
+      mandatory = false, specifiedDefaultValue = "true", unspecifiedDefaultValue = "false",
-      return toTabularResult(getIndexListing(),stats);
-    }
-    catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN,
-        LuceneCliStrings.LUCENE_LIST_INDEX));
-    }
-    catch (VirtualMachineError e) {
+      return toTabularResult(getIndexListing(), stats);
+    } catch (FunctionInvocationTargetException ignore) {
+      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
+          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_LIST_INDEX));
+    } catch (VirtualMachineError e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      return ResultBuilder.createGemFireErrorResult(String.format(LuceneCliStrings.LUCENE_LIST_INDEX__ERROR_MESSAGE,
-        toString(t, isDebugging())));
+      return ResultBuilder.createGemFireErrorResult(String
+          .format(LuceneCliStrings.LUCENE_LIST_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-    final ResultCollector resultsCollector = functionExecutor.execute(new LuceneListIndexFunction());
-    final List<Set<LuceneIndexDetails>> results = (List<Set<LuceneIndexDetails>>) resultsCollector.getResult();
+    final ResultCollector resultsCollector =
+        functionExecutor.execute(new LuceneListIndexFunction());
+    final List<Set<LuceneIndexDetails>> results =
+        (List<Set<LuceneIndexDetails>>) resultsCollector.getResult();
-    return results.stream()
-      .flatMap(set -> set.stream())
-      .sorted()
-      .collect(Collectors.toList());
+    List<LuceneIndexDetails> sortedResults =
+        results.stream().flatMap(set -> set.stream()).sorted().collect(Collectors.toList());
+    LinkedHashSet<LuceneIndexDetails> uniqResults = new LinkedHashSet<LuceneIndexDetails>();
+    uniqResults.addAll(sortedResults);
+    sortedResults.clear();
+    sortedResults.addAll(uniqResults);
+    return sortedResults;
+        indexData.accumulate("Server Name", indexDetails.getServerName());
-        indexData.accumulate("Status", indexDetails.getInitialized() == true ? "Initialized" : "Defined");
+        indexData.accumulate("Status",
+            indexDetails.getInitialized() == true ? "Initialized" : "Defined");
-          }
-          else {
-            indexData.accumulate("Query Executions", indexDetails.getIndexStats().get("queryExecutions"));
+          } else {
+            indexData.accumulate("Query Executions",
+                indexDetails.getIndexStats().get("queryExecutions"));
-    }
-    else {
-      return ResultBuilder.createInfoResult(LuceneCliStrings.LUCENE_LIST_INDEX__INDEXES_NOT_FOUND_MESSAGE);
+    } else {
+      return ResultBuilder
+          .createInfoResult(LuceneCliStrings.LUCENE_LIST_INDEX__INDEXES_NOT_FOUND_MESSAGE);
-  @CliCommand(value = LuceneCliStrings.LUCENE_CREATE_INDEX, help = LuceneCliStrings.LUCENE_CREATE_INDEX__HELP)
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA }, writesToSharedConfiguration=true)
-  //TODO : Add optionContext for indexName
-  public Result createIndex(
-    @CliOption(key = LuceneCliStrings.LUCENE__INDEX_NAME,
-      mandatory=true,
+  @CliCommand(value = LuceneCliStrings.LUCENE_CREATE_INDEX,
+      help = LuceneCliStrings.LUCENE_CREATE_INDEX__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  // TODO : Add optionContext for indexName
+  public Result createIndex(@CliOption(key = LuceneCliStrings.LUCENE__INDEX_NAME, mandatory = true,
-    @CliOption (key = LuceneCliStrings.LUCENE__REGION_PATH,
-      mandatory = true,
-      optionContext = ConverterHint.REGIONPATH,
-      help = LuceneCliStrings.LUCENE_CREATE_INDEX__REGION_HELP) final String regionPath,
+      @CliOption(key = LuceneCliStrings.LUCENE__REGION_PATH, mandatory = true,
+          optionContext = ConverterHint.REGIONPATH,
+          help = LuceneCliStrings.LUCENE_CREATE_INDEX__REGION_HELP) final String regionPath,
-    @CliOption(key = LuceneCliStrings.LUCENE_CREATE_INDEX__FIELD,
-      mandatory = true,
-      help = LuceneCliStrings.LUCENE_CREATE_INDEX__FIELD_HELP)
-    @CliMetaData (valueSeparator = ",") final String[] fields,
+      @CliOption(key = LuceneCliStrings.LUCENE_CREATE_INDEX__FIELD, mandatory = true,
+          help = LuceneCliStrings.LUCENE_CREATE_INDEX__FIELD_HELP) @CliMetaData(
+              valueSeparator = ",") final String[] fields,
-    @CliOption(key = LuceneCliStrings.LUCENE_CREATE_INDEX__ANALYZER,
-      mandatory = false,
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = LuceneCliStrings.LUCENE_CREATE_INDEX__ANALYZER_HELP)
-    @CliMetaData (valueSeparator = ",") final String[] analyzers,
+      @CliOption(key = LuceneCliStrings.LUCENE_CREATE_INDEX__ANALYZER, mandatory = false,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = LuceneCliStrings.LUCENE_CREATE_INDEX__ANALYZER_HELP) @CliMetaData(
+              valueSeparator = ",") final String[] analyzers,
-    @CliOption (key = LuceneCliStrings.LUCENE_CREATE_INDEX__GROUP,
-      optionContext = ConverterHint.MEMBERGROUP,
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      help = LuceneCliStrings.LUCENE_CREATE_INDEX__GROUP__HELP)
-    @CliMetaData (valueSeparator = ",") final String[] groups) {
+      @CliOption(key = LuceneCliStrings.LUCENE_CREATE_INDEX__GROUP,
+          optionContext = ConverterHint.MEMBERGROUP,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = LuceneCliStrings.LUCENE_CREATE_INDEX__GROUP__HELP) @CliMetaData(
+              valueSeparator = ",") final String[] groups) {
-      final ResultCollector<?, ?> rc = this.executeFunctionOnGroups(createIndexFunction, groups, indexInfo);
+      final ResultCollector<?, ?> rc =
+          this.executeFunctionOnGroups(createIndexFunction, groups, indexInfo);
-        tabularResult.accumulate("Member",cliFunctionResult.getMemberIdOrName());
+        tabularResult.accumulate("Member", cliFunctionResult.getMemberIdOrName());
-          if (cliFunctionResult.isSuccessful()) {
-            tabularResult.accumulate("Status","Successfully created lucene index");
-//            if (xmlEntity == null) {
-//              xmlEntity = cliFunctionResult.getXmlEntity();
-//            }
-          }
-          else {
-            tabularResult.accumulate("Status","Failed: "+cliFunctionResult.getMessage());
-          }
+        if (cliFunctionResult.isSuccessful()) {
+          tabularResult.accumulate("Status", "Successfully created lucene index");
+          // if (xmlEntity == null) {
+          // xmlEntity = cliFunctionResult.getXmlEntity();
+          // }
+        } else {
+          tabularResult.accumulate("Status", "Failed: " + cliFunctionResult.getMessage());
+        }
-        result = ResultBuilder.buildResult(tabularResult);
-      }
-     catch (CommandResultException crex) {
+      result = ResultBuilder.buildResult(tabularResult);
+    } catch (CommandResultException crex) {
-//    TODO - store in cluster config
-//    if (xmlEntity != null) {
-//      result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity, groups));
-//    }
+    // TODO - store in cluster config
+    // if (xmlEntity != null) {
+    // result.setCommandPersisted((new SharedConfigurationWriter()).addXmlEntity(xmlEntity,
+    // groups));
+    // }
-  @CliCommand(value = LuceneCliStrings.LUCENE_DESCRIBE_INDEX, help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__HELP)
-  @CliMetaData(shellOnly = false, relatedTopic={CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA })
+  @CliCommand(value = LuceneCliStrings.LUCENE_DESCRIBE_INDEX,
+      help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
-    @CliOption(key = LuceneCliStrings.LUCENE__INDEX_NAME,
-      mandatory=true,
-      help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__NAME__HELP) final String indexName,
+      @CliOption(key = LuceneCliStrings.LUCENE__INDEX_NAME, mandatory = true,
+          help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__NAME__HELP) final String indexName,
-    @CliOption (key = LuceneCliStrings.LUCENE__REGION_PATH,
-      mandatory = true,
-      optionContext = ConverterHint.REGIONPATH,
-      help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__REGION_HELP) final String regionPath) {
+      @CliOption(key = LuceneCliStrings.LUCENE__REGION_PATH, mandatory = true,
+          optionContext = ConverterHint.REGIONPATH,
+          help = LuceneCliStrings.LUCENE_DESCRIBE_INDEX__REGION_HELP) final String regionPath) {
-      return toTabularResult(getIndexDetails(indexInfo),true);
-    }
-    catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN,
-        LuceneCliStrings.LUCENE_DESCRIBE_INDEX));
-    }
-    catch (VirtualMachineError e) {
+      return toTabularResult(getIndexDetails(indexInfo), true);
+    } catch (FunctionInvocationTargetException ignore) {
+      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
+          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_DESCRIBE_INDEX));
+    } catch (VirtualMachineError e) {
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      return ResultBuilder.createGemFireErrorResult(String.format(LuceneCliStrings.LUCENE_DESCRIBE_INDEX__ERROR_MESSAGE,
-        toString(t, isDebugging())));
+      return ResultBuilder.createGemFireErrorResult(String.format(
+          LuceneCliStrings.LUCENE_DESCRIBE_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-    final ResultCollector<?, ?> rc = this.executeFunctionOnGroups(describeIndexFunction, new String[] {}, indexInfo);
+    final ResultCollector<?, ?> rc =
+        this.executeFunctionOnGroups(describeIndexFunction, new String[] {}, indexInfo);
-    return funcResults.stream().filter(indexDetails -> indexDetails != null).collect(Collectors.toList());
+    return funcResults.stream().filter(indexDetails -> indexDetails != null)
+        .collect(Collectors.toList());
-  @CliCommand(value = LuceneCliStrings.LUCENE_SEARCH_INDEX, help = LuceneCliStrings.LUCENE_SEARCH_INDEX__HELP)
-  @CliMetaData(shellOnly = false, relatedTopic = { CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA })
+  @CliCommand(value = LuceneCliStrings.LUCENE_SEARCH_INDEX,
+      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
-  public Result searchIndex(
-    @CliOption(key = LuceneCliStrings.LUCENE__INDEX_NAME,
-      mandatory = true,
+  public Result searchIndex(@CliOption(key = LuceneCliStrings.LUCENE__INDEX_NAME, mandatory = true,
-    @CliOption(key = LuceneCliStrings.LUCENE__REGION_PATH,
-      mandatory = true,
-      optionContext = ConverterHint.REGIONPATH,
-      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__REGION_HELP) final String regionPath,
+      @CliOption(key = LuceneCliStrings.LUCENE__REGION_PATH, mandatory = true,
+          optionContext = ConverterHint.REGIONPATH,
+          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__REGION_HELP) final String regionPath,
-    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__QUERY_STRING,
-      mandatory = true,
-      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__QUERY_STRING__HELP) final String queryString,
+      @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__QUERY_STRING, mandatory = true,
+          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__QUERY_STRING__HELP) final String queryString,
-    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD,
-      mandatory = true,
-      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD__HELP) final String defaultField,
+      @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD, mandatory = true,
+          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__DEFAULT_FIELD__HELP) final String defaultField,
-    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__LIMIT,
-      mandatory = false,
-      unspecifiedDefaultValue = "-1",
-      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__LIMIT__HELP) final int limit,
+      @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__LIMIT, mandatory = false,
+          unspecifiedDefaultValue = "-1",
+          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__LIMIT__HELP) final int limit,
-    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE,
-      mandatory = false,
-      unspecifiedDefaultValue = "-1",
-      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE__HELP) int pageSize,
+      @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE, mandatory = false,
+          unspecifiedDefaultValue = "-1",
+          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__PAGE_SIZE__HELP) int pageSize,
-    @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY,
-      mandatory = false,
-      unspecifiedDefaultValue = "false",
-      help = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY__HELP) boolean keysOnly)
-  {
+      @CliOption(key = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY, mandatory = false,
+          unspecifiedDefaultValue = "false",
+          help = LuceneCliStrings.LUCENE_SEARCH_INDEX__KEYSONLY__HELP) boolean keysOnly) {
-      LuceneQueryInfo queryInfo = new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit, keysOnly);
+      LuceneQueryInfo queryInfo =
+          new LuceneQueryInfo(indexName, regionPath, queryString, defaultField, limit, keysOnly);
-    }
-    catch (FunctionInvocationTargetException ignore) {
-      return ResultBuilder.createGemFireErrorResult(CliStrings.format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN,
-        LuceneCliStrings.LUCENE_SEARCH_INDEX));
-    }
-    catch (VirtualMachineError e) {
+    } catch (FunctionInvocationTargetException ignore) {
+      return ResultBuilder.createGemFireErrorResult(CliStrings.format(
+          CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, LuceneCliStrings.LUCENE_SEARCH_INDEX));
+    } catch (VirtualMachineError e) {
-    }
-    catch (IllegalArgumentException e) {
+    } catch (IllegalArgumentException e) {
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      return ResultBuilder.createGemFireErrorResult(String.format(LuceneCliStrings.LUCENE_SEARCH_INDEX__ERROR_MESSAGE,
-        toString(t, isDebugging())));
+      return ResultBuilder.createGemFireErrorResult(String
+          .format(LuceneCliStrings.LUCENE_SEARCH_INDEX__ERROR_MESSAGE, toString(t, isDebugging())));
-      return ResultBuilder.createInfoResult(LuceneCliStrings.LUCENE_SEARCH_INDEX__NO_RESULTS_MESSAGE);
+      return ResultBuilder
+          .createInfoResult(LuceneCliStrings.LUCENE_SEARCH_INDEX__NO_RESULTS_MESSAGE);
-        case "n":
-        {
+        case "n": {
-          if(skipDisplay) {
-            skipDisplay=false;
-          }
-          else {
+          if (skipDisplay) {
+            skipDisplay = false;
+          } else {
-            toIndex = (pageSize + fromIndex >= searchResults.size()) ? searchResults.size() : pageSize + fromIndex;
+            toIndex = (pageSize + fromIndex >= searchResults.size()) ? searchResults.size()
+                : pageSize + fromIndex;
-            skipDisplay=true;
+            skipDisplay = true;
-          }
-          else {
+          } else {
-    } while(true);
+    } while (true);
-  private List<LuceneSearchResults> getSearchResults(final LuceneQueryInfo queryInfo) throws Exception {
+  private List<LuceneSearchResults> getSearchResults(final LuceneQueryInfo queryInfo)
+      throws Exception {
-    final List<Set<LuceneSearchResults>> functionResults = (List<Set<LuceneSearchResults>>) rc.getResult();
+    final List<Set<LuceneSearchResults>> functionResults =
+        (List<Set<LuceneSearchResults>>) rc.getResult();
-    return functionResults.stream()
-      .flatMap(set -> set.stream())
-      .sorted()
-      .collect(Collectors.toList());
+    return functionResults.stream().flatMap(set -> set.stream()).sorted()
+        .collect(Collectors.toList());
-      }
-      else {
+      } else {
-  protected ResultCollector<?, ?> executeFunctionOnGroups(FunctionAdapter function,
-                                                          String[] groups,
-                                                          final LuceneIndexInfo indexInfo) throws IllegalArgumentException, CommandResultException
-  {
+  protected ResultCollector<?, ?> executeFunctionOnGroups(FunctionAdapter function, String[] groups,
+      final LuceneIndexInfo indexInfo) throws IllegalArgumentException, CommandResultException {
-      targetMembers = CliUtil.getMembersForeRegionViaFunction(getCache(), indexInfo.getRegionPath());
+      targetMembers =
+          CliUtil.getMembersForeRegionViaFunction(getCache(), indexInfo.getRegionPath(), true);
-    }
-    else {
-      targetMembers = CliUtil.findAllMatchingMembers(groups, null);
+    } else {
+      targetMembers = CliUtil.findMembersOrThrow(groups, null);
-    final Set<DistributedMember> targetMembers = CliUtil.getMembersForeRegionViaFunction(getCache(),queryInfo.getRegionPath());
+    final Set<DistributedMember> targetMembers =
+        CliUtil.getMembersForeRegionViaFunction(getCache(), queryInfo.getRegionPath(), false);
-  @CliAvailabilityIndicator({LuceneCliStrings.LUCENE_SEARCH_INDEX, LuceneCliStrings.LUCENE_CREATE_INDEX,
-    LuceneCliStrings.LUCENE_DESCRIBE_INDEX, LuceneCliStrings.LUCENE_LIST_INDEX})
+  @CliAvailabilityIndicator({LuceneCliStrings.LUCENE_SEARCH_INDEX,
+      LuceneCliStrings.LUCENE_CREATE_INDEX, LuceneCliStrings.LUCENE_DESCRIBE_INDEX,
+      LuceneCliStrings.LUCENE_LIST_INDEX})

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 UPD66 INS66 INS60 INS60 INS21 INS21 INS21 INS74 INS59 INS74 INS59 INS32 INS32 INS32 INS42 INS43 INS43 INS42 MOV32 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS9 INS43 INS43 INS21 INS42 INS42 INS32 INS9 UPD42 INS42 INS42 INS45 INS32 INS42 INS42 DEL42 DEL9 DEL80