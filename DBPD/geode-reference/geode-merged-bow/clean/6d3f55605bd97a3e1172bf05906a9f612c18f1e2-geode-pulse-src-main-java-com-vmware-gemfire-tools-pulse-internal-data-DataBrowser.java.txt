GEODE-907: Converted core functionality to use jackson

+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.node.ArrayNode;
+import com.fasterxml.jackson.databind.node.ObjectNode;
+  private final ObjectMapper mapper = new ObjectMapper();
+
-
-      JSONObject queries = fetchAllQueriesFromFile();
+      ObjectNode queries = fetchAllQueriesFromFile();
-      JSONObject userQueries = null;
-      try {
-        userQueries = queries.getJSONObject(userId);
-      } catch (JSONException e) {
-        userQueries = new JSONObject();
+      ObjectNode userQueries = (ObjectNode) queries.get(userId);
+      if (userQueries == null) {
+        userQueries = mapper.createObjectNode();
-      try {
-        userQueries.put(Long.toString(System.currentTimeMillis()), queryText);
-        queries.put(userId, userQueries);
-      } catch (JSONException e) {
-        if (LOGGER.fineEnabled()) {
-          LOGGER.fine("JSONException Occured while adding user's query : " + e.getMessage());
-        }
-      }
+      userQueries.put(Long.toString(System.currentTimeMillis()), queryText);
+      queries.put(userId, userQueries);
-
-      JSONObject queries = fetchAllQueriesFromFile();
+      ObjectNode queries = fetchAllQueriesFromFile();
-      JSONObject userQueries = null;
-      try {
-        userQueries = queries.getJSONObject(userId);
-      } catch (JSONException e) {
-        userQueries = new JSONObject();
-      }
+      ObjectNode userQueries = (ObjectNode) queries.get(userId);
-      try {
-        userQueries.remove(queryId);
-        queries.put(userId, userQueries);
-      } catch (JSONException e) {
-        if (LOGGER.fineEnabled()) {
-          LOGGER.fine("JSONException Occured while deleting user's query : " + e.getMessage());
-        }
-      }
+      userQueries.remove(queryId);
+      queries.put(userId, userQueries);
-
-  public JSONArray getQueryHistoryByUserId(String userId) {
+  public ArrayNode getQueryHistoryByUserId(String userId) {
-    JSONArray queryList = new JSONArray();
+    ArrayNode queryList = mapper.createArrayNode();
-      JSONObject queries = fetchAllQueriesFromFile();
+      ObjectNode queries = fetchAllQueriesFromFile();
-      JSONObject userQueries = null;
-      try {
-        userQueries = queries.getJSONObject(userId);
-      } catch (JSONException e) {
-        userQueries = new JSONObject();
-      }
+      ObjectNode userQueries = (ObjectNode) queries.get(userId);
-      try {
-        Iterator<?> it = userQueries.keys();
-        while (it.hasNext()) {
-          String key = (String) it.next();
-          JSONObject queryItem = new JSONObject();
-          queryItem.put("queryId", key);
-          queryItem.put("queryText", userQueries.get(key).toString());
-          queryItem.put("queryDateTime",
-              simpleDateFormat.format(Long.valueOf(key)));
-          queryList.put(queryItem);
-        }
-      } catch (JSONException e) {
-        if (LOGGER.fineEnabled()) {
-          LOGGER.fine("JSONException Occured: " + e.getMessage());
-        }
+      Iterator<String> it = userQueries.fieldNames();
+      while (it.hasNext()) {
+        String key = it.next();
+        ObjectNode queryItem = mapper.createObjectNode();
+        queryItem.put("queryId", key);
+        queryItem.put("queryText", userQueries.get(key).toString());
+        queryItem.put("queryDateTime",
+            simpleDateFormat.format(Long.valueOf(key)));
+        queryList.add(queryItem);
-  private JSONObject fetchAllQueriesFromFile() {
+  private ObjectNode fetchAllQueriesFromFile() {
-    JSONObject queriesJSON = new JSONObject();
+    JsonNode queriesJSON = mapper.createObjectNode();
-      String inputStreamString = new Scanner(inputStream, "UTF-8")
-          .useDelimiter("\\A").next();
-      queriesJSON = new JSONObject(inputStreamString);
+      String inputStreamString = new Scanner(inputStream, "UTF-8").useDelimiter("\\A").next();
+      queriesJSON = mapper.readTree(inputStreamString);
-    return queriesJSON;
+    return (ObjectNode) queriesJSON;
-  private boolean storeQueriesInFile(JSONObject queries) {
+  private boolean storeQueriesInFile(ObjectNode queries) {

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS83 INS83 INS43 INS59 UPD43 MOV8 UPD43 INS42 INS42 INS14 UPD42 INS60 INS25 MOV41 UPD42 UPD43 INS43 MOV8 MOV8 UPD43 MOV43 INS59 MOV32 MOV8 UPD43 INS11 UPD42 INS42 MOV60 INS60 INS25 MOV21 MOV60 INS60 MOV21 UPD42 INS42 INS32 MOV60 INS60 UPD42 INS32 INS43 INS42 UPD43 INS43 INS59 INS27 INS8 UPD43 INS43 INS59 UPD42 MOV42 UPD42 MOV42 UPD43 INS43 INS59 UPD74 INS42 INS42 INS42 UPD42 INS42 INS42 INS11 INS42 INS33 INS21 UPD42 INS42 INS42 INS11 UPD42 INS42 INS42 INS11 MOV43 INS32 INS43 INS32 INS7 INS43 INS32 INS43 INS32 UPD42 MOV43 UPD43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 UPD42 INS32 UPD42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL76 DEL11 DEL42 DEL43 DEL14 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL25 DEL8 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL14 DEL42