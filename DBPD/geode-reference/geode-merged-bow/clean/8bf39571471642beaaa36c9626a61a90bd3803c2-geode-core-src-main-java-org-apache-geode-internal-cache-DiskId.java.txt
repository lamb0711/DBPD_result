Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * <li>The oplog id identifying the oplog in which this entry's value is
- * present
- * <li>The position in the oplog (the oplog offset) where this entry's value is
- * stored
+ * <li>The oplog id identifying the oplog in which this entry's value is present
+ * <li>The position in the oplog (the oplog offset) where this entry's value is stored
-public abstract class DiskId
-{
+public abstract class DiskId {
-   * id consists of
-   * most significant
-   * 1 byte = users bits
-   * 2-8 bytes = oplog id
-   * least significant.
+   * id consists of most significant 1 byte = users bits 2-8 bytes = oplog id least significant.
-   * The highest bit in the oplog id part is set to 1 if the oplog id
-   * is negative.
+   * The highest bit in the oplog id part is set to 1 if the oplog id is negative.
-   * Length of the bytes on disk.
-   * This is always set. If the value is invalid then it will be set to 0.
-   * The most significant bit is used by overflow to mark it as needing to be written.
+   * Length of the bytes on disk. This is always set. If the value is invalid then it will be set to
+   * 0. The most significant bit is used by overflow to mark it as needing to be written.
-//   private static final int IS_FLUSH_BUFFER_TOGGLE_BIT = 0x20 << 24;
+  // private static final int IS_FLUSH_BUFFER_TOGGLE_BIT = 0x20 << 24;
-  //private byte userBits = -1;
+  // private byte userBits = -1;
-  
+
-   * Bit masks to extract the oplog id or user bits from the id
-   * field
-   * The oplog id is currently the lowest 7 bytes, and the user
-   * bits is the most significant byte. The sign of the oplog id
-   * is held in the highest bit of the oplog id bytes.
+   * Bit masks to extract the oplog id or user bits from the id field The oplog id is currently the
+   * lowest 7 bytes, and the user bits is the most significant byte. The sign of the oplog id is
+   * held in the highest bit of the oplog id bytes.
-  public static final long OPLOG_ID_MASK =     0x00FFFFFFFFFFFFFFL;
-  public static final long USER_BITS_MASK =    0xFF00000000000000L;
-  public static final long MAX_OPLOG_ID =      0x007FFFFFFFFFFFFFL;
+  public static final long OPLOG_ID_MASK = 0x00FFFFFFFFFFFFFFL;
+  public static final long USER_BITS_MASK = 0xFF00000000000000L;
+  public static final long MAX_OPLOG_ID = 0x007FFFFFFFFFFFFFL;
+
-    //mask the first byte to get the oplogId
-    long oplogId = this.id & MAX_OPLOG_ID; 
-    
-    //Check to see if the oplog id should be negative
-    if ((this.id & OPLOG_ID_SIGN_BIT ) != 0) 
-    {
+    // mask the first byte to get the oplogId
+    long oplogId = this.id & MAX_OPLOG_ID;
+
+    // Check to see if the oplog id should be negative
+    if ((this.id & OPLOG_ID_SIGN_BIT) != 0) {
-    
+
-   * @param offsetInOplog -
-   *          offset in oplog where the entry is stored.
+   * @param offsetInOplog - offset in oplog where the entry is stored.
+
-    long oldUserBits = this.id & USER_BITS_MASK;//only get the most significant byte containing
-                            // sign bit + toggle flag + user bits
+    long oldUserBits = this.id & USER_BITS_MASK;// only get the most significant byte containing
+    // sign bit + toggle flag + user bits
-      opId |= OPLOG_ID_SIGN_BIT; //Set the highest bit of the oplog id to be 
-                             //1 to indicate a negative number
+      opId |= OPLOG_ID_SIGN_BIT; // Set the highest bit of the oplog id to be
+      // 1 to indicate a negative number
-    //Assert.assertTrue(oplogId == getOplogId());
+    // Assert.assertTrue(oplogId == getOplogId());
-//   /**
-//    * Setter for the flush buffer toggle flag
-//    * 
-//    * @param flag -
-//    *          The flush buffer toggle flag which identifies whether the latest
-//    *          value is present in the pendingflushes buffer or the pending
-//    *          writes buffer
-//    */
-//   void setFlushBufferToggleFlag(boolean flag) {
-//     if (flag) {
-//       this.id = this.id | IS_FLUSH_BUFFER_TOGGLE_BIT;// set the toggle flag bit
-//       //Assert.assertTrue(getFlushBufferToggleFlag());
-//     }
-//     else {
-//       this.id = this.id & 0x5FFFFFFF;// reset the toggle flag bit
-//       //Assert.assertTrue(!getFlushBufferToggleFlag());
-//     }
+  // /**
+  // * Setter for the flush buffer toggle flag
+  // *
+  // * @param flag -
+  // * The flush buffer toggle flag which identifies whether the latest
+  // * value is present in the pendingflushes buffer or the pending
+  // * writes buffer
+  // */
+  // void setFlushBufferToggleFlag(boolean flag) {
+  // if (flag) {
+  // this.id = this.id | IS_FLUSH_BUFFER_TOGGLE_BIT;// set the toggle flag bit
+  // //Assert.assertTrue(getFlushBufferToggleFlag());
+  // }
+  // else {
+  // this.id = this.id & 0x5FFFFFFF;// reset the toggle flag bit
+  // //Assert.assertTrue(!getFlushBufferToggleFlag());
+  // }
-//   }
+  // }
-//   /**
-//    * @return Returns the flush buffer toggle flag.
-//    */
-//   boolean getFlushBufferToggleFlag() {
-//     return (this.id & IS_FLUSH_BUFFER_TOGGLE_BIT) != 0; //return true if toggle
-//                                                         // flag bit is 1 else
-//                                                         // return false.
-//     //return this.flushBufferToggleFlag;
-//   }
+  // /**
+  // * @return Returns the flush buffer toggle flag.
+  // */
+  // boolean getFlushBufferToggleFlag() {
+  // return (this.id & IS_FLUSH_BUFFER_TOGGLE_BIT) != 0; //return true if toggle
+  // // flag bit is 1 else
+  // // return false.
+  // //return this.flushBufferToggleFlag;
+  // }
-    return (byte)(this.id >> USER_BITS_SHIFT); //shift to right to get the user bits
+    return (byte) (this.id >> USER_BITS_SHIFT); // shift to right to get the user bits
-   * @param userBits
-   *          The userBit to set.
+   * @param userBits The userBit to set.
-    //Assert.assertTrue(userBit == getUserBits());
+    // Assert.assertTrue(userBit == getUserBits());
+
-   * Return true if entry is schedule to be async written to disk.
-   * Return false if it has already been written or was never modified.
+   * Return true if entry is schedule to be async written to disk. Return false if it has already
+   * been written or was never modified.
+   * 
+
-  
+
-   * @param valueLength
-   *          The valueLength to set.
+   * @param valueLength The valueLength to set.
-      throw new IllegalStateException("Expected DiskId valueLength " + valueLength + " to be >= 0.");
+      throw new IllegalStateException(
+          "Expected DiskId valueLength " + valueLength + " to be >= 0.");
+
+
+
-     * StringBuffer temp = new StringBuffer("Oplog Key ID = ");
-     * temp.append(this.keyId);
+     * StringBuffer temp = new StringBuffer("Oplog Key ID = "); temp.append(this.keyId);
-   * Creates appropriate instance of DiskId depending upon the maxOplogSize set
-   * by the user. If the maxOplogSize (in bytes) is greater than
-   * Integer.MAX_VALUE, LongOplogOffsetDiskId will be created and for
-   * maxOplogSize lesser than that, IntOplogOffsetDiskId will be created.
+   * Creates appropriate instance of DiskId depending upon the maxOplogSize set by the user. If the
+   * maxOplogSize (in bytes) is greater than Integer.MAX_VALUE, LongOplogOffsetDiskId will be
+   * created and for maxOplogSize lesser than that, IntOplogOffsetDiskId will be created.
-  static DiskId createDiskId(long maxOplogSize,
-                             boolean isPersistenceType,
-                             boolean needsLinkedList) {
+  static DiskId createDiskId(long maxOplogSize, boolean isPersistenceType,
+      boolean needsLinkedList) {
-    }
-    else {
+    } else {
-   * Test method to verify if the passed DiskId is an instance of
-   * PersistenceWithIntOffset.
+   * Test method to verify if the passed DiskId is an instance of PersistenceWithIntOffset.
-   * @param diskId -
-   *          the DiskId instance
+   * @param diskId - the DiskId instance
-   * Test method to verify if the passed DiskId is an instance of
-   * PersistenceWithLongOffset.
+   * Test method to verify if the passed DiskId is an instance of PersistenceWithLongOffset.
-   * @param diskId -
-   *          the DiskId instance
-   * @return true if the given DiskId is an instance of
-   *         PersistenceWithLongOffset
+   * @param diskId - the DiskId instance
+   * @return true if the given DiskId is an instance of PersistenceWithLongOffset
-   * Test method to verify if the passed DiskId is an instance of
-   * OverflowOnlyWithIntOffset.
+   * Test method to verify if the passed DiskId is an instance of OverflowOnlyWithIntOffset.
-   * @param diskId -
-   *          the DiskId instance
-   * @return true if the given DiskId is an instance of
-   *         OverflowOnlyWithIntOffset
+   * @param diskId - the DiskId instance
+   * @return true if the given DiskId is an instance of OverflowOnlyWithIntOffset
-   * Test method to verify if the passed DiskId is an instance of
-   * PersistenceWithLongOffset.
+   * Test method to verify if the passed DiskId is an instance of PersistenceWithLongOffset.
-   * @param diskId -
-   *          the DiskId instance
+   * @param diskId - the DiskId instance
-   * Inner class implementation of DiskId which stores offset in oplog as 'int'
-   * field.
+   * Inner class implementation of DiskId which stores offset in oplog as 'int' field.
-   *  
+   * 
-  protected static abstract class IntOplogOffsetDiskId extends DiskId
-  {
+  protected static abstract class IntOplogOffsetDiskId extends DiskId {
-     * The position in the oplog (the oplog offset) where this entry's value is
-     * stored
+     * The position in the oplog (the oplog offset) where this entry's value is stored
-     * @param offsetInOplog -
-     *          offset in oplog where the entry is stored.
+     * @param offsetInOplog - offset in oplog where the entry is stored.
-      this.offsetInOplog = (int)offsetInOplog;
+      this.offsetInOplog = (int) offsetInOplog;
-   * Inner class implementation of DiskId which stores offset in oplog as 'long'
-   * field.
+   * Inner class implementation of DiskId which stores offset in oplog as 'long' field.
-   *  
+   * 
-  protected static abstract class LongOplogOffsetDiskId extends DiskId
-  {
+  protected static abstract class LongOplogOffsetDiskId extends DiskId {
-     * The position in the oplog (the oplog offset) where this entry's value is
-     * stored
+     * The position in the oplog (the oplog offset) where this entry's value is stored
-     * @param offsetInOplog -
-     *          offset in oplog where the entry is stored.
+     * @param offsetInOplog - offset in oplog where the entry is stored.
-  protected static class OverflowOnlyWithIntOffsetNoLL extends
-      IntOplogOffsetDiskId
-  {
+  protected static class OverflowOnlyWithIntOffsetNoLL extends IntOplogOffsetDiskId {
-      throw new UnsupportedOperationException(LocalizedStrings.DiskId_FOR_OVERFLOW_ONLY_MODE_THE_KEYID_SHOULD_NOT_BE_QUERIED.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.DiskId_FOR_OVERFLOW_ONLY_MODE_THE_KEYID_SHOULD_NOT_BE_QUERIED
+              .toLocalizedString());
-      throw new UnsupportedOperationException(LocalizedStrings.DiskId_FOR_OVERFLOW_ONLY_MODE_THE_KEYID_SHOULD_NOT_BE_SET.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.DiskId_FOR_OVERFLOW_ONLY_MODE_THE_KEYID_SHOULD_NOT_BE_SET
+              .toLocalizedString());
+
-  final protected static class OverflowOnlyWithIntOffset extends
-      OverflowOnlyWithIntOffsetNoLL
-  {
+  final protected static class OverflowOnlyWithIntOffset extends OverflowOnlyWithIntOffsetNoLL {
+     * 
+     * 
+
+
+
-  protected static class OverflowOnlyWithLongOffsetNoLL extends
-      LongOplogOffsetDiskId
-  {
+  protected static class OverflowOnlyWithLongOffsetNoLL extends LongOplogOffsetDiskId {
-    
+
-      throw new UnsupportedOperationException(LocalizedStrings.DiskId_FOR_OVERFLOW_ONLY_MODE_THE_KEYID_SHOULD_NOT_BE_QUERIED.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.DiskId_FOR_OVERFLOW_ONLY_MODE_THE_KEYID_SHOULD_NOT_BE_QUERIED
+              .toLocalizedString());
-      throw new UnsupportedOperationException(LocalizedStrings.DiskId_FOR_OVERFLOW_ONLY_MODE_THE_KEYID_SHOULD_NOT_BE_SET.toLocalizedString());
+      throw new UnsupportedOperationException(
+          LocalizedStrings.DiskId_FOR_OVERFLOW_ONLY_MODE_THE_KEYID_SHOULD_NOT_BE_SET
+              .toLocalizedString());
+
-  final protected static class OverflowOnlyWithLongOffset extends
-      OverflowOnlyWithLongOffsetNoLL
-  {
+  final protected static class OverflowOnlyWithLongOffset extends OverflowOnlyWithLongOffsetNoLL {
+     * 
+     * 
+
+
+
-  protected static class PersistenceWithIntOffsetNoLL extends
-      IntOplogOffsetDiskId
-  {
+  protected static class PersistenceWithIntOffsetNoLL extends IntOplogOffsetDiskId {
-        this.setKeyId(- this.keyId);
+        this.setKeyId(-this.keyId);
+
-        this.setKeyId(- this.keyId);
+        this.setKeyId(-this.keyId);
-  final protected static class PersistenceWithIntOffset extends
-      PersistenceWithIntOffsetNoLL
-  {
+  final protected static class PersistenceWithIntOffset extends PersistenceWithIntOffsetNoLL {
+     * 
+     * 
+
+
+
-  protected static class PersistenceWithLongOffsetNoLL extends
-      LongOplogOffsetDiskId
-  {
+  protected static class PersistenceWithLongOffsetNoLL extends LongOplogOffsetDiskId {
-        this.setKeyId(- this.keyId);
+        this.setKeyId(-this.keyId);
+
-        this.setKeyId(- this.keyId);
+        this.setKeyId(-this.keyId);
-  final protected static class PersistenceWithLongOffset extends
-      PersistenceWithLongOffsetNoLL
-  {
+  final protected static class PersistenceWithLongOffset extends PersistenceWithLongOffsetNoLL {
+     * 
+     * 
+
+
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66