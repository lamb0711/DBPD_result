Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The ObjectUtils class is an abstract utility class for working with and invoking methods on Objects.
+ * The ObjectUtils class is an abstract utility class for working with and invoking methods on
+ * Objects.
+ * 
-   * Gets the first non-null value in an array of values.  If the array is null, then null is returned, otherwise the
-   * first non-null array element is returned.  If the array is not null and all the array elements are null, then null
-   * is still returned.
+   * Gets the first non-null value in an array of values. If the array is null, then null is
+   * returned, otherwise the first non-null array element is returned. If the array is not null and
+   * all the array elements are null, then null is still returned.
+   * 
-   * @return the first non-null value from the array of values, otherwise return null if either the array is null
-   * or all the elements of the array are null.
+   * @return the first non-null value from the array of values, otherwise return null if either the
+   *         array is null or all the elements of the array are null.
-   * Determines whether 2 Objects are equal in value.  The Objects are equal if and only if neither are null and are
-   * equal according to the equals method of the Object's class type.
+   * Determines whether 2 Objects are equal in value. The Objects are equal if and only if neither
+   * are null and are equal according to the equals method of the Object's class type.
+   * 
-   * Determines whether 2 Objects are equal in value by ignoring nulls.  If both Object references are null, then they
-   * are considered equal, or neither must be null and the Objects must be equal in value as determined by their equals
-   * method.
+   * Determines whether 2 Objects are equal in value by ignoring nulls. If both Object references
+   * are null, then they are considered equal, or neither must be null and the Objects must be equal
+   * in value as determined by their equals method.
+   * 
-   * @return a boolean value indicating whether the 2 Objects are equal in value.  If both Object references are null,
-   * then they are considered equal.
+   * @return a boolean value indicating whether the 2 Objects are equal in value. If both Object
+   *         references are null, then they are considered equal.
-   * A null-safe computation of the specified Object's hash value.  If the Object reference is null, then this method
-   * returns 0 and will be consistent with the equalsIgnoreNull equality comparison.
+   * A null-safe computation of the specified Object's hash value. If the Object reference is null,
+   * then this method returns 0 and will be consistent with the equalsIgnoreNull equality
+   * comparison.
+   * 
-   * @return an integer signifying the hash value of the Object or 0 if the Object reference is null.
+   * @return an integer signifying the hash value of the Object or 0 if the Object reference is
+   *         null.
+   * 
-   * @return the String representation of the specified Object or null if the Object reference is null.
+   * @return the String representation of the specified Object or null if the Object reference is
+   *         null.
+   * 
-   * @return a Class array containing the Class types of each argument in the arguments Object array.
+   * @return a Class array containing the Class types of each argument in the arguments Object
+   *         array.
+   * 
-  public static <T> T invoke (final Object obj, final String methodName) {
+  public static <T> T invoke(final Object obj, final String methodName) {
+   * 
+   * 
-   * @param parameterTypes the Class types of parameters indicating the exact method to invoke (parameters in number,
-   * order and type) if the method is overloaded.
+   * @param parameterTypes the Class types of parameters indicating the exact method to invoke
+   *        (parameters in number, order and type) if the method is overloaded.
-  public static <T> T invoke(final Object obj, final String methodName, final Class<?>[] parameterTypes, final Object... arguments) {
-    assert obj != null : String.format("The Object to invoke method (%1$s) on cannot be null!", methodName);
-    assert methodName != null : String.format("The name of the method to invoke on Object of type (%1$s) cannot be null", obj.getClass().getName());
+  public static <T> T invoke(final Object obj, final String methodName,
+      final Class<?>[] parameterTypes, final Object... arguments) {
+    assert obj != null : String.format("The Object to invoke method (%1$s) on cannot be null!",
+        methodName);
+    assert methodName != null : String.format(
+        "The name of the method to invoke on Object of type (%1$s) cannot be null",
+        obj.getClass().getName());
-    }
-    catch (NoSuchMethodException e) {
-      throw new RuntimeException(String.format("Method (%1$s) does not exist on Object of type (%2$s)!",
-        methodName, obj.getClass().getName()), e);
-    }
-    catch (InvocationTargetException e) {
-      throw new RuntimeException(String.format("The invocation of method (%1$s) on an Object of type (%2$s) failed!",
-        methodName, obj.getClass().getName()), e);
-    }
-    catch (IllegalAccessException e) {
-      throw new RuntimeException(String.format("The method (%1$s) on an Object of type (%2$s) is not accessible!",
-        methodName, obj.getClass().getName()), e);
+    } catch (NoSuchMethodException e) {
+      throw new RuntimeException(
+          String.format("Method (%1$s) does not exist on Object of type (%2$s)!", methodName,
+              obj.getClass().getName()),
+          e);
+    } catch (InvocationTargetException e) {
+      throw new RuntimeException(
+          String.format("The invocation of method (%1$s) on an Object of type (%2$s) failed!",
+              methodName, obj.getClass().getName()),
+          e);
+    } catch (IllegalAccessException e) {
+      throw new RuntimeException(
+          String.format("The method (%1$s) on an Object of type (%2$s) is not accessible!",
+              methodName, obj.getClass().getName()),
+          e);

UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 UPD66