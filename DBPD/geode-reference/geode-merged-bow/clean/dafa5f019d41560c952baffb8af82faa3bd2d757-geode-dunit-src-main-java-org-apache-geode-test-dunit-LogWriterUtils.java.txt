Add standalone LogWriterLogger to geode-dunit

-import org.apache.geode.distributed.internal.DistributionConfigImpl;
-import org.apache.geode.internal.logging.InternalLogWriter;
-import org.apache.geode.internal.logging.LogWriterFactory;
-import org.apache.geode.internal.logging.ManagerLogWriter;
-import org.apache.geode.internal.logging.log4j.LogWriterLogger;
+import org.apache.geode.test.dunit.log4j.LogWriterLogger;
- * <code>LogWriterUtils</code> provides static utility methods to access a <code>LogWriter</code>
+ * {@code LogWriterUtils} provides static utility methods to access a <code>LogWriter</code>
- * These methods can be used directly: <code>LogWriterUtils.getLogWriter(...)</code>, however, they
+ * These methods can be used directly: {@code LogWriterUtils.getLogWriter(...)}, however, they
- * @deprecated Please use a <code>Logger</code> from {@link LogService#getLogger()} instead.
+ * @deprecated Please use a {@code Logger} from {@link LogService#getLogger()} instead.
-  protected LogWriterUtils() {}
-
-  /**
-   * Returns a <code>LogWriter</code> for logging information
-   *
-   * @deprecated Please use a <code>Logger</code> from {@link LogService#getLogger()} instead.
-   */
-  public static InternalLogWriter getLogWriter() {
-    return LogWriterUtils.oldLogger;
+  protected LogWriterUtils() {
+    // nothing
-   * Creates a new LogWriter and adds it to the config properties. The config can then be used to
-   * connect to DistributedSystem, thus providing early access to the LogWriter before connecting.
-   * This call does not connect to the DistributedSystem. It simply creates and returns the
-   * LogWriter that will eventually be used by the DistributedSystem that connects using config.
+   * Returns a {@code LogWriter} for logging information
-   * @param properties the DistributedSystem config properties to add LogWriter to
-   * @return early access to the DistributedSystem LogWriter
-   * @deprecated Please use a <code>Logger</code> from {@link LogService#getLogger()} instead.
+   * @deprecated Please use a {@code Logger} from {@link LogService#getLogger()} instead.
-  public static LogWriter createLogWriter(final Properties properties) {
-    Properties nonDefault = properties;
-    if (nonDefault == null) {
-      nonDefault = new Properties();
-    }
-    DistributedTestUtils.addHydraProperties(nonDefault);
-
-    DistributionConfig dc = new DistributionConfigImpl(nonDefault);
-    LogWriter logger = LogWriterFactory.createLogWriterLogger(/* isLoner */
-        dc, false/* isSecurityLog */);
-
-    // if config was non-null, then these will be added to it...
-    nonDefault.put(DistributionConfig.LOG_WRITER_NAME, logger);
-
-    return logger;
+  public static LogWriter getLogWriter() {
+    return oldLogger;
-      result = ManagerLogWriter.levelToString(DistributionConfig.DEFAULT_LOG_LEVEL);
+      result = LogWriterLogger.levelToString(DistributionConfig.DEFAULT_LOG_LEVEL);

UPD40 MOV43 INS65 UPD66 UPD66 INS65 INS66 UPD66 INS65 INS66 UPD42 MOV42 INS66 INS66 INS66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS42 INS66 INS66 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL66 DEL42 DEL42 DEL68 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31