Merge branch 'release/1.5.0'

-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.internal.cache.backup.BackupManager;
+import org.apache.geode.internal.cache.backup.BackupService;
-  /**
-   * Returns a map of baseline oplog files to copy that match this oplog's files for a currently
-   * running backup.
-   *
-   * @param baselineOplogFiles a List of files to match this oplog's filenames against.
-   * @return a map of baslineline oplog files to copy. May be empty if total current set for this
-   *         oplog does not match the baseline.
-   */
-  public Map<File, File> mapBaseline(Collection<File> baselineOplogFiles) {
-    // Map of baseline oplog file name to oplog file
-    Map<String, File> baselineOplogMap =
-        TransformUtils.transformAndMap(baselineOplogFiles, TransformUtils.fileNameTransformer);
-
-    // Returned Map of baseline file to current oplog file
-    Map<File, File> baselineToOplogMap = new HashMap<>();
-
-    // Check for crf existence
-    if ((null != this.crf.f) && this.crf.f.exists()
-        && baselineOplogMap.containsKey(this.crf.f.getName())) {
-      baselineToOplogMap.put(baselineOplogMap.get(this.crf.f.getName()),
-          IOUtils.tryGetCanonicalFileElseGetAbsoluteFile(this.crf.f));
-    }
-
-    // Check for drf existence
-    if ((null != this.drf.f) && this.drf.f.exists()
-        && baselineOplogMap.containsKey(this.drf.f.getName())) {
-      baselineToOplogMap.put(baselineOplogMap.get(this.drf.f.getName()),
-          IOUtils.tryGetCanonicalFileElseGetAbsoluteFile(this.drf.f));
-    }
-
-    // Check for krf existence
-    if (getParent().getDiskInitFile().hasKrf(this.oplogId)) {
-      File krfFile = getKrfFile();
-      if (krfFile.exists() && baselineOplogMap.containsKey(krfFile.getName())) {
-        baselineToOplogMap.put(baselineOplogMap.get(krfFile.getName()),
-            IOUtils.tryGetCanonicalFileElseGetAbsoluteFile(krfFile));
-      }
-    }
-
-    return baselineToOplogMap;
+  public boolean hasKrf() {
+    return getParent().getDiskInitFile().hasKrf(this.oplogId);
-      } catch (IllegalStateException e) {
-        throw e;
-    } catch (IllegalStateException e) {
-      throw e;
-        value = DiskEntry.Helper.readSerializedValue(valueBytes, version, in, false);
+        value = DiskEntry.Helper.readSerializedValue(valueBytes, version, in, false,
+            getParent().getCache());
-            DiskEntry.Helper.readSerializedValue(valueBytes, version, in, true);
+            DiskEntry.Helper.readSerializedValue(valueBytes, version, in, true,
+                getParent().getCache());
-            CacheClosedException cce = new CacheClosedException("The disk store is closed.");
+            CacheClosedException cce =
+                getParent().getCache().getCacheClosedException("The disk store is closed.");
-              CacheClosedException cce = new CacheClosedException("The disk store is closed.");
+              CacheClosedException cce =
+                  getParent().getCache().getCacheClosedException("The disk store is closed.");
-              CacheClosedException cce = new CacheClosedException("The disk store is closed.");
+              CacheClosedException cce =
+                  getParent().getCache().getCacheClosedException("The disk store is closed.");
-            CacheClosedException cce = new CacheClosedException("The disk store is closed.");
+            CacheClosedException cce =
+                parent.getCache().getCacheClosedException("The disk store is closed.");
-    BackupManager backupManager = getInternalCache().getBackupManager();
-    DiskStoreBackup inProgressBackup = getParent().getInProgressBackup();
-    if (inProgressBackup == null || !inProgressBackup.deferCrfDelete(this)) {
+    if (!getInternalCache().getBackupService().deferCrfDelete(getParent(), this)) {
-    DiskStoreBackup inProgressBackup = getParent().getInProgressBackup();
-    if (inProgressBackup == null || !inProgressBackup.deferDrfDelete(this)) {
+    if (!getInternalCache().getBackupService().deferDrfDelete(getParent(), this)) {
-        ByteArrayDataInput in, DM distributionManager, final Version version) {
+        ByteArrayDataInput in, DistributionManager distributionManager, final Version version) {
-    public DiskRegionView getDiskRegion();
+    DiskRegionView getDiskRegion();
-    public int addLiveEntriesToList(KRFEntry[] liveEntries, int idx);
+    int addLiveEntriesToList(KRFEntry[] liveEntries, int idx);
-    public void addLive(DiskEntry de);
+    void addLive(DiskEntry de);
-    public void update(DiskEntry entry);
+    void update(DiskEntry entry);
-    public void replaceLive(DiskEntry old, DiskEntry de);
+    void replaceLive(DiskEntry old, DiskEntry de);
-    public boolean rmLive(DiskEntry de, Oplog oplog);
+    boolean rmLive(DiskEntry de, Oplog oplog);
-    public DiskEntry getNextLiveEntry();
+    DiskEntry getNextLiveEntry();
-    public void setDiskRegion(DiskRegionView dr);
+    void setDiskRegion(DiskRegionView dr);
-    public long clear(RegionVersionVector rvv);
+    long clear(RegionVersionVector rvv);
-    public boolean testAndSetUnrecovered();
+    boolean testAndSetUnrecovered();
-    public boolean getUnrecovered();
+    boolean getUnrecovered();
-    public boolean testAndSetRecovered(DiskRegionView dr);
+    boolean testAndSetRecovered(DiskRegionView dr);
-    public void afterKrfCreated();
+    void afterKrfCreated();

MOV26 UPD40 UPD40 INS39 INS42 MOV32 INS38 INS38 UPD43 MOV32 MOV32 UPD42 INS32 INS32 MOV32 INS32 INS32 UPD42 MOV42 INS42 UPD42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS45 INS32 INS32 INS32 INS42 INS45 INS32 INS42 INS32 INS42 INS45 INS32 INS42 INS45 INS42 INS42 INS42 MOV32 INS42 MOV32 INS42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL33 DEL52 DEL42 DEL22 DEL42 DEL22 DEL27 DEL36 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL32 DEL32 DEL21 DEL8 DEL25 DEL33 DEL52 DEL42 DEL22 DEL42 DEL22 DEL27 DEL36 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL45 DEL14 DEL42 DEL43 DEL45 DEL14 DEL42 DEL43 DEL45 DEL14 DEL42 DEL43 DEL45 DEL14 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL38 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL33 DEL27 DEL38 DEL27 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83