Merge branch 'release/1.4.0'

+import java.io.File;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedSet;
+import java.util.TreeSet;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.stream.Collectors;
+
+import javax.management.InstanceNotFoundException;
+import javax.management.ListenerNotFoundException;
+import javax.management.MBeanServer;
+import javax.management.Notification;
+import javax.management.NotificationBroadcasterSupport;
+import javax.management.NotificationListener;
+import javax.management.ObjectName;
+
-import org.apache.geode.admin.internal.BackupDataStoreHelper;
-import org.apache.geode.admin.internal.BackupDataStoreResult;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.internal.cache.backup.BackupDataStoreHelper;
+import org.apache.geode.internal.cache.backup.BackupDataStoreResult;
+import org.apache.geode.management.internal.DiskBackupStatusImpl;
-import org.apache.logging.log4j.Logger;
-
-import java.io.File;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.SortedSet;
-import java.util.TreeSet;
-import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
-import javax.management.InstanceNotFoundException;
-import javax.management.ListenerNotFoundException;
-import javax.management.MBeanServer;
-import javax.management.Notification;
-import javax.management.NotificationBroadcasterSupport;
-import javax.management.NotificationListener;
-import javax.management.ObjectName;
-        Set<PersistentID> missingMembers = MissingPersistentIDsRequest.send(dm);
-        Iterator<DistributedMember> it = result.getSuccessfulMembers().keySet().iterator();
-        Map<String, String[]> backedUpDiskStores = new HashMap<>();
-        while (it.hasNext()) {
-          DistributedMember member = it.next();
-          Set<PersistentID> setOfDisk = result.getSuccessfulMembers().get(member);
-          String[] setOfDiskStr = new String[setOfDisk.size()];
-          int j = 0;
-          for (PersistentID id : setOfDisk) {
-            setOfDiskStr[j] = id.getDirectory();
-            j++;
-          }
-          backedUpDiskStores.put(member.getId(), setOfDiskStr);
-        }
+        DiskBackupStatusImpl diskBackupStatus = new DiskBackupStatusImpl();
+        Map<DistributedMember, Set<PersistentID>> successfulMembers = result.getSuccessfulMembers();
+        diskBackupStatus.generateBackedUpDiskStores(successfulMembers);
-        for (Set<PersistentID> onlineMembersIds : result.getSuccessfulMembers().values()) {
-          missingMembers.removeAll(onlineMembersIds);
-        }
+        Set<PersistentID> successfulIds = result.getSuccessfulMembers().values().stream()
+            .flatMap(Set::stream).collect(Collectors.toSet());
+        Set<PersistentID> missingIds =
+            result.getExistingDataStores().values().stream().flatMap(Set::stream)
+                .filter((v) -> !successfulIds.contains(v)).collect(Collectors.toSet());
-        result.getExistingDataStores().keySet().removeAll(result.getSuccessfulMembers().keySet());
-        String[] setOfMissingDiskStr = null;
-
-        if (result.getExistingDataStores().size() > 0) {
-          setOfMissingDiskStr = new String[result.getExistingDataStores().size()];
-          int j = 0;
-          for (Set<PersistentID> lostMembersIds : result.getExistingDataStores().values()) {
-            for (PersistentID id : lostMembersIds) {
-              setOfMissingDiskStr[j] = id.getDirectory();
-              j++;
-            }
-          }
-        }
-
-        DiskBackupStatus diskBackupStatus = new DiskBackupStatus();
-        diskBackupStatus.setBackedUpDiskStores(backedUpDiskStores);
-        diskBackupStatus.setOfflineDiskStores(setOfMissingDiskStr);
+        diskBackupStatus.generateOfflineDiskStores(missingIds);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 UPD40 UPD40 INS40 MOV60 MOV21 INS60 INS60 INS43 INS74 MOV59 MOV74 INS59 MOV74 INS59 UPD42 MOV42 UPD42 MOV43 MOV43 MOV74 INS42 MOV32 UPD42 UPD42 UPD42 MOV42 INS42 INS32 INS42 INS32 UPD42 UPD42 INS43 INS32 INS42 INS32 INS32 UPD42 MOV42 INS32 UPD42 MOV42 MOV32 UPD42 MOV42 INS90 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS86 UPD42 MOV42 UPD42 MOV42 MOV32 UPD42 INS42 INS42 INS32 INS42 INS90 INS59 INS38 MOV32 UPD42 MOV42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL43 DEL85 DEL5 DEL74 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL37 DEL21 DEL8 DEL70 DEL8 DEL61 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL85 DEL5 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL32 DEL34 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL32 DEL3 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL7 DEL21 DEL42 DEL37 DEL21 DEL8 DEL70 DEL8 DEL70 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21