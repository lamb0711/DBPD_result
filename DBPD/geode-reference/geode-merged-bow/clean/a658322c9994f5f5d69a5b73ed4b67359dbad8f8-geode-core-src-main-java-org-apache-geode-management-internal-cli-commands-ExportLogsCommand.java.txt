GEODE-2420: add file-size-limit param to the ExportLogsController

Refactored size and warning for exported logs to be based on fully
expanded size of the exported files

-import org.apache.geode.management.internal.cli.util.BytesToString;
-import java.io.File;
-      if (parseFileSizeLimit(fileSizeLimit) > 0) {
+      long userSpecifiedLimit = parseFileSizeLimit(fileSizeLimit);
+      if (userSpecifiedLimit > 0) {
-          long estimatedSize = 0;
-            List<?> res = (List<?>) results.get(0);
-            if (res.get(0) instanceof Long) {
-              estimatedSize = (Long) res.get(0);
+            if (results.get(0) instanceof Long) {
+              long estimatedSize = (Long) results.get(0);
+              logger.info("Received estimated export size from member {}: {}", server.getId(),
+                  estimatedSize);
+              totalEstimatedExportSize += estimatedSize;
+            } else if (results.get(0) instanceof ManagementException) {
+              ManagementException exception = (ManagementException) results.get(0);
+              return ResultBuilder.createUserErrorResult(exception.getMessage());
-          logger.info("Received estimated export size from member {}: {}", server.getId(),
-              estimatedSize);
-          totalEstimatedExportSize += estimatedSize;
-        // The sum of the estimated export sizes from each member should not exceed the
-        // disk available on the locator
-        try {
-          checkIfExportLogsOverflowsDisk("locator", parseFileSizeLimit(fileSizeLimit),
-              totalEstimatedExportSize, getLocalDiskAvailable());
-        } catch (ManagementException e) {
-          return ResultBuilder.createUserErrorResult(e.getMessage());
+        // first check if totalEstimate file size exceeds available disk space on locator
+        if (totalEstimatedExportSize > getLocalDiskAvailable()) {
+          return ResultBuilder.createUserErrorResult(
+              "Estimated logs size will exceed the available disk space on the locator.");
+        }
+        // then check if total estimated file size exceeds user specified value
+        if (totalEstimatedExportSize > userSpecifiedLimit) {
+          StringBuilder sb = new StringBuilder();
+          sb.append("Estimated exported logs expanded file size = ")
+              .append(totalEstimatedExportSize).append(", ")
+              .append(CliStrings.EXPORT_LOGS__FILESIZELIMIT).append(" = ")
+              .append(userSpecifiedLimit).append(
+                  ". To disable exported logs file size check use option \"--file-size-limit=0\".");
+          return ResultBuilder.createUserErrorResult(sb.toString());
-      try {
-        checkFileSizeWithinLimit(parseFileSizeLimit(fileSizeLimit), exportedLogsZipFile.toFile());
-      } catch (ManagementException e) {
-        FileUtils.deleteQuietly(exportedLogsZipFile.toFile());
-        return ResultBuilder.createUserErrorResult(e.getMessage());
-      } finally {
-        FileUtils.deleteDirectory(tempDir.toFile());
-      }
+      FileUtils.deleteDirectory(tempDir.toFile());
+
-    logger.debug("Exporting logs returning = {}", result);
+    if (logger.isDebugEnabled()) {
+      logger.debug("Exporting logs returning = {}", result);
+    }
-  long getLocalDiskSize() {
-    return FileUtils.getUserDirectory().getTotalSpace();
-  }
-
-  /**
-   * Wrapper to enable stubbing of static method call for unit testing
-   */
-  private long parseFileSizeLimit(String fileSizeLimit) {
+  long parseFileSizeLimit(String fileSizeLimit) {
-  /**
-   * @throws ManagementException if checking is enabled (fileSizeLimit > 0) and file size is over
-   *         fileSizeLimit bytes
-   */
-  void checkFileSizeWithinLimit(long fileSizeLimitBytes, File file) {
-    if (fileSizeLimitBytes > 0) {
-      if (FileUtils.sizeOf(file) > fileSizeLimitBytes) {
-        StringBuilder sb = new StringBuilder();
-        sb.append("Exported logs zip file size = ").append(FileUtils.sizeOf(file)).append(", ")
-            .append(CliStrings.EXPORT_LOGS__FILESIZELIMIT).append(" = ").append(fileSizeLimitBytes)
-            .append(
-                ". To disable exported logs file size check use option \"--file-size-limit=0\".");
-        throw new ManagementException(sb.toString()); // FileTooBigException
-      }
-    }
-  }
-
-
-  /**
-   * @throws ManagementException if export file size checking is enabled (fileSizeLimit > 0) and the
-   *         space required on a cluster member to filter and zip up files to be exported exceeds
-   *         the disk space available
-   */
-  void checkIfExportLogsOverflowsDisk(String memberName, long fileSizeLimitBytes,
-      long estimatedSize, long diskAvailable) {
-    if (fileSizeLimitBytes > 0) {
-      StringBuilder sb = new StringBuilder();
-      BytesToString bytesToString = new BytesToString();
-      if (estimatedSize > diskAvailable) {
-        sb.append("Estimated disk space required (").append(bytesToString.of(estimatedSize))
-            .append(") to consolidate logs on member ").append(memberName)
-            .append(" will exceed available disk space (").append(bytesToString.of(diskAvailable))
-            .append(")");
-        throw new ManagementException(sb.toString()); // FileTooBigException
-      }
-    }
-  }
-

INS25 INS32 INS8 INS60 MOV21 INS42 INS42 MOV21 INS39 INS59 INS42 MOV32 INS42 INS25 INS25 INS27 INS8 INS27 INS8 INS25 INS42 MOV32 INS41 INS42 INS42 MOV60 INS21 MOV41 MOV38 INS8 INS32 INS32 INS25 INS42 INS42 UPD45 MOV45 INS32 INS42 INS45 MOV32 INS62 INS8 INS25 INS32 INS42 INS42 INS32 MOV43 MOV60 MOV21 MOV21 MOV62 MOV8 INS32 INS42 INS45 INS42 INS42 INS34 INS39 MOV43 INS60 INS41 INS32 INS42 INS40 UPD42 UPD42 MOV43 INS59 INS32 INS32 INS42 INS45 INS43 INS42 INS11 INS42 INS42 INS32 MOV32 INS42 MOV42 UPD42 MOV42 MOV43 MOV32 INS42 INS42 UPD42 UPD42 INS45 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL32 DEL42 DEL43 DEL76 DEL74 DEL43 DEL76 DEL74 DEL42 DEL11 DEL7 DEL21 DEL39 DEL42 DEL34 DEL59 DEL60 DEL25 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL8 DEL54 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL42 DEL40 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL21 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL42 DEL66 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31