Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A lucene serializer that handles a single class and can
- * map an instance of that class to a document using reflection.
+ * A lucene serializer that handles a single class and can map an instance of that class to a
+ * document using reflection.
-  
-  public ReflectionLuceneSerializer(Class<? extends Object> clazz,
-      String[] indexedFields) {
+
+  public ReflectionLuceneSerializer(Class<? extends Object> clazz, String[] indexedFields) {
-    //Iterate through all declared fields and save them
-    //in a list if they are an indexed field and have the correct
-    //type.
+    // Iterate through all declared fields and save them
+    // in a list if they are an indexed field and have the correct
+    // type.
-    while(clazz != Object.class) {
-      for(Field field : clazz.getDeclaredFields()) {
+    while (clazz != Object.class) {
+      for (Field field : clazz.getDeclaredFields()) {
-        if(fieldSet.contains(field.getName()) 
-            && SerializerUtil.isSupported(type)) {
+        if (fieldSet.contains(field.getName()) && SerializerUtil.isSupported(type)) {
-      
+
-    
+
-    for(Field field: fields) {
+    for (Field field : fields) {
-        //TODO - what to do if we can't read a field?
+        // TODO - what to do if we can't read a field?
-      logger.debug("ReflectionLuceneSerializer.toDocument:"+doc);
+      logger.debug("ReflectionLuceneSerializer.toDocument:" + doc);
-}
+}

UPD66 UPD66