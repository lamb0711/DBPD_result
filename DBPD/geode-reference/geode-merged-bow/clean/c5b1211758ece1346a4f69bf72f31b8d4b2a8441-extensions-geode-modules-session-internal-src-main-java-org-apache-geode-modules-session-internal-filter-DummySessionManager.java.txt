GEODE-3513: Removing the use of native sessions session caching

In the session module for generic app servers, we were asking the
application server for a 'native' session and then wrapping it on our
own GemfireHttpSession. However, we were not cleaning up that native
session, which means that in PROXY mode we were leaving these sessions
on the client with them being useful.

The GemfireHttpSession now no longer wraps a native session. We are
still temporarily creating a native session because it is the only way
for us to get the session timeout value that was configured in web.xml,
but the native session is immediately invalidated.

Adding and extending cargo session tests to test how sessions are being
cleaned up from the clients and the server.

This closes #740

+
+import javax.servlet.ServletContext;
-  public HttpSession wrapSession(HttpSession nativeSession) {
+  public HttpSession wrapSession(ServletContext context, int maxInactiveInterval) {
-    GemfireHttpSession session = new GemfireHttpSession(id, nativeSession);
+    GemfireHttpSession session = new GemfireHttpSession(id, context);
-  /**
-   * {@inheritDoc}
-   */
-  @Override
-  public HttpSession getWrappingSession(String nativeId) {
-    return sessions.get(nativeId);
-  }
-  @Override
-  public String destroyNativeSession(String id) {
-    return null;
-  }
-

INS26 INS40 INS44 UPD43 UPD42 INS39 INS42 UPD42 MOV43 MOV43 UPD42 DEL65 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL31