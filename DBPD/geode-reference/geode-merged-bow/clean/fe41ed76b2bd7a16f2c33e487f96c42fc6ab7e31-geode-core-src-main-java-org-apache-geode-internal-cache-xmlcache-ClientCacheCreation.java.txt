GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

+import java.io.File;
+import java.net.InetSocketAddress;
+import java.util.Collections;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+
+import org.apache.geode.cache.Region;
-import org.apache.geode.cache.client.internal.PoolImpl;
+import org.apache.geode.cache.query.QueryService;
+import org.apache.geode.internal.cache.InternalCache;
-import org.apache.geode.pdx.internal.TypeRegistry;
-
-import java.io.File;
-import java.net.InetSocketAddress;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Properties;
-import java.util.Set;
- *
-  //////////////////////// Constructors ////////////////////////
-
-   * Creates a new <code>ClientCacheCreation</code> with no root regions
+   * Creates a new {@code ClientCacheCreation} with no root regions
-  public ClientCacheCreation(boolean forParsing) {
+  ClientCacheCreation(boolean forParsing) {
-  ////////////////////// Instance Methods //////////////////////
+  private static final RegionAttributes clientDefaults = createClientDefaults();
-  static final private RegionAttributes clientDefaults;
-  static {
+  private static RegionAttributes createClientDefaults() {
-    clientDefaults = af.create();
+    return af.create();
-  public org.apache.geode.cache.query.QueryService getQueryService(String poolName) {
+  @Override
+  public QueryService getQueryService(String poolName) {
-  public org.apache.geode.cache.query.QueryService getLocalQueryService() {
+  @Override
+  public QueryService getLocalQueryService() {
+    throw new UnsupportedOperationException(LocalizedStrings.SHOULDNT_INVOKE.toLocalizedString());
+  }
+
+  @Override
+  public void determineDefaultPool() {
+  @Override
+  @Override
-  public RegionService createAuthenticatedView(Properties properties, String poolName) {
+  @Override
+  public RegionService createAuthenticatedView(Properties userSecurityProperties, String poolName) {
+  @Override
-   *
-   * @throws TimeoutException
-   * @throws CacheWriterException
-   * @throws RegionExistsException
-   * @throws GatewayException
-  void create(GemFireCacheImpl cache)
+  void create(InternalCache cache)
-    { // create connection pools
-      Map m = getPools();
-      if (!m.isEmpty()) {
-        boolean setDefault = m.size() == 1;
-        Iterator it = m.values().iterator();
-        while (it.hasNext()) {
-          Pool cp = (Pool) it.next();
-          PoolFactoryImpl f;
-          f = (PoolFactoryImpl) PoolManager.createFactory();
-          f.init(cp);
-          PoolImpl p = (PoolImpl) f.create(cp.getName());
-        }
+    // create connection pools
+    Map<String, Pool> pools = getPools();
+    if (!pools.isEmpty()) {
+      for (final Pool cp : pools.values()) {
+        PoolFactoryImpl poolFactory = (PoolFactoryImpl) PoolManager.createFactory();
+        poolFactory.init(cp);
+        poolFactory.create(cp.getName());
-    for (Iterator iter = listDiskStores().iterator(); iter.hasNext();) {
-      DiskStoreAttributesCreation creation = (DiskStoreAttributesCreation) iter.next();
+    for (DiskStore diskStore : listDiskStores()) {
+      DiskStoreAttributesCreation creation = (DiskStoreAttributesCreation) diskStore;
-    for (Iterator iter = listDiskStores().iterator(); iter.hasNext();) {
-      DiskStoreAttributesCreation creation = (DiskStoreAttributesCreation) iter.next();
+    for (DiskStore diskStore : listDiskStores()) {
+      DiskStoreAttributesCreation creation = (DiskStoreAttributesCreation) diskStore;
-      // It's GemFireCache
-      GemFireCacheImpl gfc = (GemFireCacheImpl) cache;
-      DiskStoreFactory factory = gfc.createDiskStoreFactory(creation);
-      DiskStore ds = factory.create(creation.getName());
+      DiskStoreFactory factory = cache.createDiskStoreFactory(creation);
+      factory.create(creation.getName());
-    for (Iterator iter = this.regionAttributesNames.iterator(); iter.hasNext();) {
-      String id = (String) iter.next();
+    for (String id : this.regionAttributesNames) {
-      RegionAttributes attrs;
-      attrs = factory.createRegionAttributes();
+      RegionAttributes attrs = factory.createRegionAttributes();
-    Iterator it = this.roots.values().iterator();
-    while (it.hasNext()) {
-      RegionCreation r = (RegionCreation) it.next();
-      r.createRoot(cache);
+    for (final Region<?, ?> region : this.roots.values()) {
+      RegionCreation regionCreation = (RegionCreation) region;
+      regionCreation.createRoot(cache);
-    Map m = getPools();
-    if (m.size() == 1) {
-      Pool p = (Pool) m.values().iterator().next();
-      result = p.getName();
-    } else if (m.isEmpty()) {
+    Map<String, Pool> pools = getPools();
+    if (pools.size() == 1) {
+      Pool pool = pools.values().iterator().next();
+      result = pool.getName();
+    } else if (pools.isEmpty()) {
+  @Override
-    return (Pool) getPools().get(getDefaultPoolName());
+    return getPools().get(getDefaultPoolName());
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.client.CacheCreation#getPdxReadSerialized()
-   */
-
-  /*
-   * (non-Javadoc)
-   * 
-   * @see org.apache.geode.cache.client.ClientCache#getCurrentServers()
-   */
+  @Override
-    return Collections.EMPTY_SET;
+    return Collections.emptySet();
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 MOV31 UPD40 UPD40 UPD40 INS31 INS31 INS83 INS83 INS83 INS43 INS42 MOV8 INS78 UPD43 UPD42 MOV44 INS78 UPD43 UPD42 INS78 INS39 UPD42 INS78 INS78 INS78 INS83 MOV43 INS42 MOV44 MOV44 INS8 INS78 INS78 MOV43 INS78 INS32 INS42 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS53 INS42 UPD42 UPD43 MOV60 MOV25 INS70 INS70 INS70 INS70 INS42 INS42 INS66 INS65 UPD66 INS42 MOV32 INS14 UPD42 INS74 INS8 INS44 MOV32 MOV8 INS44 MOV32 INS8 INS44 MOV22 MOV8 MOV60 INS44 MOV32 INS8 INS74 MOV32 INS32 INS66 INS43 INS32 MOV43 INS43 MOV43 UPD42 INS70 INS43 INS42 MOV43 INS42 MOV60 MOV60 INS21 MOV43 INS42 INS83 INS74 INS42 MOV60 MOV21 MOV43 MOV43 MOV43 UPD42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 UPD42 INS44 INS32 INS8 UPD42 MOV42 MOV43 MOV43 MOV32 INS43 INS76 INS76 MOV43 UPD42 UPD42 INS83 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 MOV60 MOV21 INS21 MOV32 UPD42 MOV42 UPD42 UPD42 INS42 INS32 MOV42 MOV32 MOV43 INS42 MOV43 INS42 UPD42 MOV43 INS42 MOV32 MOV42 UPD42 UPD42 MOV11 UPD42 UPD42 UPD42 DEL83 DEL83 DEL42 DEL7 DEL21 DEL83 DEL28 DEL40 DEL40 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL32 DEL11 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL11 DEL59 DEL60 DEL8 DEL61 DEL8 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL59 DEL60 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL32 DEL11 DEL11 DEL40