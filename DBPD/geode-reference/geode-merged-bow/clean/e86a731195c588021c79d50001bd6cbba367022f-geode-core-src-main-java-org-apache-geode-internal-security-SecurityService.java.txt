Merge branch 'release/1.3.0'

-import org.apache.geode.internal.ClassLoadUtil;
-import org.apache.geode.management.internal.security.ResourceConstants;
-import org.apache.geode.management.internal.security.ResourceOperation;
-import org.apache.geode.security.GemFireSecurityException;
-import org.apache.geode.security.PostProcessor;
-import org.apache.geode.security.ResourcePermission;
-import org.apache.geode.security.SecurityManager;
-import org.apache.shiro.subject.Subject;
-import org.apache.shiro.util.ThreadState;
-
-import java.lang.reflect.Method;
+import org.apache.shiro.subject.Subject;
+import org.apache.shiro.util.ThreadState;
+
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.ResourcePermission;
+import org.apache.geode.security.ResourcePermission.Operation;
+import org.apache.geode.security.ResourcePermission.Resource;
+import org.apache.geode.security.ResourcePermission.Target;
+import org.apache.geode.security.SecurityManager;
+
-  ThreadState bindSubject(Subject subject);
-
-  Subject getSubject();
-
-  Subject login(Properties credentials);
-
-  void logout();
-
-  Callable associateWith(Callable callable);
-
-  void authorize(ResourceOperation resourceOperation);
-
-  void authorizeClusterManage();
-
-  void authorizeClusterWrite();
-
-  void authorizeClusterRead();
-
-  void authorizeDataManage();
-
-  void authorizeDataWrite();
-
-  void authorizeDataRead();
-
-  void authorizeRegionManage(String regionName);
-
-  void authorizeRegionManage(String regionName, String key);
-
-  void authorizeRegionWrite(String regionName);
-
-  void authorizeRegionWrite(String regionName, String key);
-
-  void authorizeRegionRead(String regionName);
-
-  void authorizeRegionRead(String regionName, String key);
-
-  void authorize(String resource, String operation);
-
-  void authorize(String resource, String operation, String regionName);
-
-  void authorize(String resource, String operation, String regionName, String key);
-
-  void authorize(ResourcePermission context);
-
-  void initSecurity(Properties securityProps);
-
-  void close();
-
-  boolean needPostProcess();
-
-  Object postProcess(String regionPath, Object key, Object value, boolean valueIsSerialized);
-
-  Object postProcess(Object principal, String regionPath, Object key, Object value,
-      boolean valueIsSerialized);
-
-  boolean isClientSecurityRequired();
-
-  boolean isIntegratedSecurity();
-
-  boolean isPeerSecurityRequired();
-
-  SecurityManager getSecurityManager();
-
-  void setSecurityManager(SecurityManager securityManager);
-
-  PostProcessor getPostProcessor();
-
-  void setPostProcessor(PostProcessor postProcessor);
-
-  /**
-   * this method would never return null, it either throws an exception or returns an object
-   */
-  public static <T> T getObjectOfTypeFromClassName(String className, Class<T> expectedClazz) {
-    Class actualClass = null;
-    try {
-      actualClass = ClassLoadUtil.classFromName(className);
-    } catch (Exception ex) {
-      throw new GemFireSecurityException("Instance could not be obtained, " + ex.toString(), ex);
-    }
-
-    if (!expectedClazz.isAssignableFrom(actualClass)) {
-      throw new GemFireSecurityException(
-          "Instance could not be obtained. Expecting a " + expectedClazz.getName() + " class.");
-    }
-
-    T actualObject = null;
-    try {
-      actualObject = (T) actualClass.newInstance();
-    } catch (Exception e) {
-      throw new GemFireSecurityException(
-          "Instance could not be obtained. Error instantiating " + actualClass.getName(), e);
-    }
-    return actualObject;
+  default ThreadState bindSubject(Subject subject) {
+    return null;
-  /**
-   * this method would never return null, it either throws an exception or returns an object
-   */
-  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName,
-      Class<T> expectedClazz) {
-    T actualObject = null;
-    try {
-      Method factoryMethod = ClassLoadUtil.methodFromName(factoryMethodName);
-      actualObject = (T) factoryMethod.invoke(null, (Object[]) null);
-    } catch (Exception e) {
-      throw new GemFireSecurityException("Instance could not be obtained from " + factoryMethodName,
-          e);
-    }
-
-    if (actualObject == null) {
-      throw new GemFireSecurityException(
-          "Instance could not be obtained from " + factoryMethodName);
-    }
-
-    return actualObject;
+  default Subject getSubject() {
+    return null;
-  /**
-   * this method would never return null, it either throws an exception or returns an object
-   *
-   * @return an object of type expectedClazz. This method would never return null. It either returns
-   *         an non-null object or throws exception.
-   */
-  public static <T> T getObjectOfType(String classOrMethod, Class<T> expectedClazz) {
-    T object = null;
-    try {
-      object = getObjectOfTypeFromClassName(classOrMethod, expectedClazz);
-    } catch (Exception e) {
-      object = getObjectOfTypeFromFactoryMethod(classOrMethod, expectedClazz);
-    }
-    return object;
+  default Subject login(Properties credentials) {
+    return null;
-  public static Properties getCredentials(Properties securityProps) {
-    Properties credentials = null;
-    if (securityProps.containsKey(ResourceConstants.USER_NAME)
-        && securityProps.containsKey(ResourceConstants.PASSWORD)) {
-      credentials = new Properties();
-      credentials.setProperty(ResourceConstants.USER_NAME,
-          securityProps.getProperty(ResourceConstants.USER_NAME));
-      credentials.setProperty(ResourceConstants.PASSWORD,
-          securityProps.getProperty(ResourceConstants.PASSWORD));
-    }
-    return credentials;
+  default void logout() {}
+
+  default Callable associateWith(Callable callable) {
+    return callable;
-  static SecurityService getSecurityService() {
-    return IntegratedSecurityService.getSecurityService();
+  default void authorize(Resource resource, Operation operation) {}
+
+  default void authorize(Resource resource, Operation operation, Target target) {}
+
+  default void authorize(Resource resource, Operation operation, String target) {}
+
+  default void authorize(Resource resource, Operation operation, String target, String key) {}
+
+  default void authorize(Resource resource, Operation operation, Target target, String key) {}
+
+  default void authorize(ResourcePermission context) {}
+
+  default void close() {}
+
+  default boolean needPostProcess() {
+    return false;
+  default Object postProcess(String regionPath, Object key, Object value,
+      boolean valueIsSerialized) {
+    return value;
+  }
+
+  default Object postProcess(Object principal, String regionPath, Object key, Object value,
+      boolean valueIsSerialized) {
+    return value;
+  }
+
+  default boolean isClientSecurityRequired() {
+    return false;
+  }
+
+  default boolean isIntegratedSecurity() {
+    return false;
+  }
+
+  default boolean isPeerSecurityRequired() {
+    return false;
+  }
+
+  default SecurityManager getSecurityManager() {
+    return null;
+  }
+
+  default PostProcessor getPostProcessor() {
+    return null;
+  }

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 INS31 INS31 INS31 INS83 INS8 INS83 INS8 INS83 INS8 INS83 INS8 INS83 INS8 INS83 MOV39 MOV42 MOV44 MOV44 INS8 INS83 MOV39 UPD42 MOV42 MOV44 MOV44 MOV44 INS8 INS83 MOV44 INS8 INS83 UPD42 INS44 INS44 INS8 INS83 INS8 INS83 INS8 INS83 INS8 INS83 INS8 INS83 INS8 INS83 INS8 INS83 MOV39 MOV42 MOV8 UPD83 INS39 INS42 UPD83 INS39 INS42 UPD83 MOV43 INS42 UPD83 MOV43 UPD42 INS41 INS41 INS41 INS41 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD43 UPD42 INS43 INS42 INS43 INS42 UPD42 UPD43 UPD43 UPD43 UPD42 INS41 INS41 INS41 INS41 INS33 INS33 INS33 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS9 INS42 INS42 INS9 INS9 INS9 INS33 INS33 DEL40 DEL26 DEL40 DEL26 DEL31 DEL39 DEL42 DEL31 DEL39 DEL42 DEL31 DEL39 DEL42 DEL31 DEL39 DEL42 DEL31 DEL39 DEL42 DEL31 DEL39 DEL42 DEL31 DEL39 DEL42 DEL31 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL31 DEL39 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL39 DEL42 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL31 DEL39 DEL42 DEL31 DEL39 DEL42 DEL31 DEL42 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL31 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL33 DEL42 DEL43 DEL85 DEL5 DEL33 DEL11 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL73 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL42 DEL43 DEL42 DEL42 DEL32