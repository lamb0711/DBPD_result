Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Takes delta to be evicted and tries to evict the least no of LRU entry which
- * would make evictedBytes more than or equal to the delta
+ * Takes delta to be evicted and tries to evict the least no of LRU entry which would make
+ * evictedBytes more than or equal to the delta
-  
+
-  
+
-    EVICTION_BURST_PAUSE_TIME_MILLIS = Integer.getInteger(
-        DistributionConfig.GEMFIRE_PREFIX + "evictionBurstPauseTimeMillis", 1000);
+    EVICTION_BURST_PAUSE_TIME_MILLIS = Integer
+        .getInteger(DistributionConfig.GEMFIRE_PREFIX + "evictionBurstPauseTimeMillis", 1000);
+
-  private final long bytesToEvictPerTask ; 
-  
-  public RegionEvictorTask(List<LocalRegion> regionSet, HeapEvictor evictor, long bytesToEvictPerTask) {
+  private final long bytesToEvictPerTask;
+
+  public RegionEvictorTask(List<LocalRegion> regionSet, HeapEvictor evictor,
+      long bytesToEvictPerTask) {
-  
+
-              bytesEvicted = ((AbstractLRURegionMap)region.entries)
-                  .centralizedLruUpdateCallback();
+              bytesEvicted = ((AbstractLRURegionMap) region.entries).centralizedLruUpdateCallback();
-              if (totalBytesEvicted >= bytesToEvictPerTask
-                  || !getHeapEvictor().mustEvict() || this.regionSet.size() == 0) {
+              if (totalBytesEvicted >= bytesToEvictPerTask || !getHeapEvictor().mustEvict()
+                  || this.regionSet.size() == 0) {
-              logger.warn(LocalizedMessage.create(
-                  LocalizedStrings.Eviction_EVICTOR_TASK_EXCEPTION,
-                  new Object[] { e.getMessage() }), e);
+              logger.warn(LocalizedMessage.create(LocalizedStrings.Eviction_EVICTOR_TASK_EXCEPTION,
+                  new Object[] {e.getMessage()}), e);
-              getGemFireCache().getCachePerfStats().incEvictWorkTime(end-start);
+              getGemFireCache().getCachePerfStats().incEvictWorkTime(end - start);

UPD66 UPD66