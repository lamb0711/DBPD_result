GEODE-2644: Make LogWriterAppender optional and support log4j2.xml

LogWriterAppender is now configured in log4j2.xml and it supports
sessions that correspond with Cache lifecycle. This allows Geode to
pause and resume LogWriterAppender and GeodeConsoleAppender without
resorting to dynamically adding and removing appenders.

When the Cache exists, log events stop going to the Console and instead
go to the Geode log file. Whenever the Cache does not exist, log events
go only to the Console.

These changes remove as much of the Log4j2 Core manipulation as
possible.

Also fixed:
* GEODE-5789: Geode now updates log level of all Geode loggers.

List of changes:
* Change LogWriterAppender to be pausable and session-oriented
* Add GeodeConsoleAppender which is pausable
* Log4j2 Core dependency is now optional
* Internal Logging interfaces allow Logging service to be pluggable
* Log4j2 xml integration testing now uses JUnit Rule from Log4j2
* Reduce coupling between Logging and the rest of Geode
* Greatly increase test coverage for Logging

-import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;
+import static org.apache.geode.internal.logging.Configuration.MAIN_LOGGER_NAME;
+import static org.apache.geode.internal.logging.Configuration.SECURITY_LOGGER_NAME;
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.distributed.internal.InternalLocator;
-import org.apache.geode.internal.Banner;
-import org.apache.geode.internal.ConfigSource;
-import org.apache.geode.internal.logging.log4j.LogMarker;
- * Creates LogWriterLogger instances.
- *
+ * Factory for creating {@link LogWriterLogger}s.
-  // LOG: RemoteGfManagerAgent and CacheCreation use this when there's no InternalDistributedSystem
-  public static InternalLogWriter toSecurityLogWriter(final InternalLogWriter logWriter) {
-    return new SecurityLogWriter(logWriter.getLogWriterLevel(), logWriter);
-  }
-
-   * @param isLoner Whether the distributed system is a loner or not
-   * @param isSecure Whether a logger for security related messages has to be created
-   * @param config The DistributionConfig for the target distributed system
-   * @param logConfig if true log the configuration
+   * @param logConfig geode configuration for the logger
+   * @param secure indicates if the logger is for security related messages
-  public static InternalLogWriter createLogWriterLogger(final boolean isLoner,
-      final boolean isSecure, final LogConfig config, final boolean logConfig) {
+  public static InternalLogWriter createLogWriterLogger(final LogConfig logConfig,
+      final boolean secure) {
+    String name = secure ? SECURITY_LOGGER_NAME : MAIN_LOGGER_NAME;
+    return LogService.createLogWriterLogger(name, logConfig.getName(), secure);
+  }
-    // if isSecurity then use "org.apache.geode.security" else use "org.apache.geode"
-    String name = null;
-    if (isSecure) {
-      name = LogService.SECURITY_LOGGER_NAME;
-    } else {
-      name = LogService.MAIN_LOGGER_NAME;
-    }
-
-    // create the LogWriterLogger
-    final LogWriterLogger logger =
-        LogService.createLogWriterLogger(name, config.getName(), isSecure);
-
-    if (isSecure) {
-      logger.setLogWriterLevel(((DistributionConfig) config).getSecurityLogLevel());
-    } else {
-      boolean defaultSource = false;
-      if (config instanceof DistributionConfig) {
-        ConfigSource source = ((DistributionConfig) config).getConfigSource(LOG_LEVEL);
-        if (source == null) {
-          defaultSource = true;
-        }
-      }
-      if (!defaultSource) {
-        // LOG: fix bug #51709 by not setting if log-level was not specified
-        // LOG: let log4j2.xml specify log level which defaults to INFO
-        logger.setLogWriterLevel(config.getLogLevel());
-      }
-    }
-
-    // log the banner
-    if (!Boolean.getBoolean(InternalLocator.INHIBIT_DM_BANNER)
-        && InternalDistributedSystem.getReconnectAttemptCounter() == 0 // avoid filling up logs
-                                                                       // during auto-reconnect
-        && !isSecure // && !isLoner /* do this on a loner to fix bug 35602 */
-        && logConfig) {
-      logger.info(LogMarker.CONFIG_MARKER, Banner.getString(null));
-    } else {
-      logger.debug("skipping banner - " + InternalLocator.INHIBIT_DM_BANNER + " is set to true");
-    }
-
-    // log the config
-    if (logConfig && !isLoner) {
-      logger.info(LogMarker.CONFIG_MARKER, "Startup Configuration: {}",
-          config.toLoggerString());
-    }
-    return logger;
+  /**
+   * Wraps the {@code logWriter} within a {@link SecurityLogWriter}.
+   */
+  public static InternalLogWriter toSecurityLogWriter(final InternalLogWriter logWriter) {
+    return new SecurityLogWriter(logWriter.getLogWriterLevel(), logWriter);

MOV31 UPD40 UPD40 MOV44 INS29 INS66 INS65 UPD66 UPD42 UPD42 INS60 INS41 INS65 INS42 UPD42 UPD66 UPD42 UPD66 MOV43 INS59 INS32 INS66 INS65 INS66 INS65 INS66 MOV42 INS16 MOV42 MOV42 MOV42 MOV32 UPD42 MOV42 INS66 INS42 INS42 INS42 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL83 DEL39 DEL42 DEL44 DEL83 DEL39 DEL42 DEL44 DEL33 DEL59 DEL60 DEL42 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL32 DEL21 DEL8 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL40 DEL32 DEL38 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL38 DEL27 DEL42 DEL27 DEL42 DEL42 DEL40 DEL42 DEL42 DEL33 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL45 DEL40 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL38 DEL27 DEL42 DEL42 DEL40 DEL45 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41