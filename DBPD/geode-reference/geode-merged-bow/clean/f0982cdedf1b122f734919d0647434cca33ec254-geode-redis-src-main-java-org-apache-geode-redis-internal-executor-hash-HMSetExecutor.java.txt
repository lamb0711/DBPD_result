Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)

This reverts commit 2f6bf013368df5a4b5efe68162a4953f9a88bbf2.
+import java.util.HashMap;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
+import org.apache.geode.cache.Region;
-/**
- * <pre>
- *
- * Implements the HMSet command.
- *
- * This command will set the specified fields to their given values in the hash stored at key.
- * This command overwrites any specified fields already in the hash.
- * A new key holding a hash is created, if the key does not exist.
- *
- * Examples:
- *
- * redis> HMSET myhash field1 "Hello" field2 "World"
- * "OK"
- * redis> HGET myhash field1
- * "Hello"
- * redis> HGET myhash field2
- * "World"
- *
- * </pre>
- */
-  private static final String SUCCESS = "OK";
+  private final String SUCCESS = "OK";
-    if (commandElems.size() < 4 || commandElems.size() % 2 == 1) {
+    if (commandElems.size() < 3 || commandElems.size() % 2 == 1) {
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
-      Map<ByteArrayWrapper, ByteArrayWrapper> map = getMap(context, key);
-      for (int i = 2; i < commandElems.size(); i += 2) {
-        byte[] fieldArray = commandElems.get(i);
-        ByteArrayWrapper field = new ByteArrayWrapper(fieldArray);
-        byte[] value = commandElems.get(i + 1);
-        map.put(field, new ByteArrayWrapper(value));
-      }
+    Region<ByteArrayWrapper, ByteArrayWrapper> keyRegion =
+        getOrCreateRegion(context, key, RedisDataType.REDIS_HASH);
-      saveMap(map, context, key);
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      return;
-    } catch (TimeoutException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
-      return;
+    Map<ByteArrayWrapper, ByteArrayWrapper> map = new HashMap<ByteArrayWrapper, ByteArrayWrapper>();
+    for (int i = 2; i < commandElems.size(); i += 2) {
+      byte[] fieldArray = commandElems.get(i);
+      ByteArrayWrapper field = new ByteArrayWrapper(fieldArray);
+      byte[] value = commandElems.get(i + 1);
+      map.put(field, new ByteArrayWrapper(value));
-    context.getKeyRegistrar().register(key, RedisDataType.REDIS_HASH);
+
+    keyRegion.putAll(map);
+
+

MOV26 UPD40 UPD40 MOV8 MOV60 MOV25 MOV60 INS60 INS21 MOV21 INS74 INS59 INS32 INS43 INS43 INS43 INS42 INS32 INS14 INS42 INS42 INS42 UPD34 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS74 INS43 INS43 INS43 UPD42 MOV42 INS42 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8