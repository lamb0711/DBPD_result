GEODE-5020: Move HARegionQueue system properties to SystemPropertyHelper

Rename ClientSubscriptionExpiryDataLossRegressionTest as
HARegionQueueExpiryRegressionTest.

Rename Bug48879DUnitTest as HARegionQueueThreadIdExpiryRegressionTest.

Overhaul HARegionQueueThreadIdExpiryRegressionTest:
* remove Thread sleeps
* use Rules and Awaitility
* use System properties instead of public static variables

+import static org.apache.geode.internal.lang.SystemPropertyHelper.HA_REGION_QUEUE_EXPIRY_TIME_PROPERTY;
+import static org.apache.geode.internal.lang.SystemPropertyHelper.THREAD_ID_EXPIRY_TIME_PROPERTY;
+import static org.apache.geode.internal.lang.SystemPropertyHelper.getProductIntegerProperty;
+
+import java.util.Optional;
-import org.apache.geode.distributed.internal.DistributionConfig;
-   * Constant used to set region entry expiry time using system property.
-   */
-  public static final String REGION_ENTRY_EXPIRY_TIME =
-      DistributionConfig.GEMFIRE_PREFIX + "MessageTimeToLive";
-
-  /**
-  static final int DEFAULT_THREAD_ID_EXPIRY_TIME = 300;
-  /**
-   * For testing purposes, allows resetting expiry time for ThreadIdentifiers. In seconds.
-   */
-  public static int threadIdExpiryTime = DEFAULT_THREAD_ID_EXPIRY_TIME;
-
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-      Integer expiryTime = Integer.getInteger(REGION_ENTRY_EXPIRY_TIME, hrqa.getExpiryTime());
-      hrqa.setExpiryTime(expiryTime);
+      Optional<Integer> expiryTime =
+          getProductIntegerProperty(HA_REGION_QUEUE_EXPIRY_TIME_PROPERTY);
+      hrqa.setExpiryTime(expiryTime.orElseGet(hrqa::getExpiryTime));
+    @Override
+    @Override
+    @Override
+  @Override
+          @Override
-    private static final ExpirationAttributes DEFAULT_THREAD_ID_EXP_ATTS = new ExpirationAttributes(
-        HARegionQueue.DEFAULT_THREAD_ID_EXPIRY_TIME, ExpirationAction.LOCAL_INVALIDATE);
-    private static volatile ExpirationAttributes testExpAtts = null;
+    /**
+     * expiry time for ThreadIdentifiers. In seconds.
+     */
+    static final int DEFAULT_THREAD_ID_EXPIRY_TIME = 300;
+
+    private static final ExpirationAttributes DEFAULT_THREAD_ID_EXP_ATTS =
+        new ExpirationAttributes(DEFAULT_THREAD_ID_EXPIRY_TIME, ExpirationAction.LOCAL_INVALIDATE);
+
+    private static volatile ExpirationAttributes testExpAtts;
+
+    @Override
-        final int expTime = HARegionQueue.threadIdExpiryTime;
-        if (expTime != HARegionQueue.DEFAULT_THREAD_ID_EXPIRY_TIME) {
+        final int expTime = calculateThreadIdExpiryTime();
+        if (expTime != DEFAULT_THREAD_ID_EXPIRY_TIME) {
-    public void close() {}
+    @Override
+    public void close() {
+      // nothing
+    }
+
+    private static int calculateThreadIdExpiryTime() {
+      Optional<Integer> expiryTime = getProductIntegerProperty(THREAD_ID_EXPIRY_TIME_PROPERTY);
+      return expiryTime.orElse(DEFAULT_THREAD_ID_EXPIRY_TIME);
+    }

MOV26 INS26 INS26 INS26 INS40 INS40 UPD40 INS40 INS31 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 MOV83 MOV39 MOV42 MOV44 MOV8 INS78 INS78 INS78 INS23 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS78 INS78 INS42 INS29 INS83 INS83 INS39 MOV59 MOV43 MOV43 INS78 INS78 INS83 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS65 INS42 INS42 INS60 INS41 INS66 INS42 INS74 INS59 INS32 INS74 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS43 MOV43 INS32 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS90 INS32 INS42 INS42 INS42 INS42 INS78 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL40 DEL45 DEL27 DEL59 DEL23 DEL83 DEL83 DEL39 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL59 DEL23 DEL31 DEL42 DEL42 DEL42 DEL32 DEL40 DEL33 DEL40 DEL40