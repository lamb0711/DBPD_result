GEODE-5082: Reindex not allowed on mixed server versions. (#1803)

         * Lucene reindex is not allowed when the members hosting the region are of different versions.
	* Any exception during the reindex will now clear the lucene index from the index defined map.
+import org.apache.geode.test.dunit.AsyncInvocation;
+  @Test
+  public void luceneReindexShouldBeSuccessfulWhenAllServersRollToCurrentVersion() throws Exception {
+    final Host host = Host.getHost(0);
+    VM locator1 = host.getVM(oldVersion, 0);
+    VM server1 = host.getVM(oldVersion, 1);
+    VM server2 = host.getVM(oldVersion, 2);
+
+    final String regionName = "aRegion";
+    RegionShortcut shortcut = RegionShortcut.PARTITION_REDUNDANT;
+
+    int locatorPort = AvailablePortHelper.getRandomAvailableTCPPort();
+    DistributedTestUtils.deleteLocatorStateFile(locatorPort);
+
+    String hostName = NetworkUtils.getServerHostName(host);
+    String locatorString = getLocatorString(locatorPort);
+    String regionType = "partitionedRedundant";
+    try {
+      locator1.invoke(
+          invokeStartLocator(hostName, locatorPort, getLocatorPropertiesPre91(locatorString)));
+      invokeRunnableInVMs(invokeCreateCache(getSystemProperties(new int[] {locatorPort})), server1,
+          server2);
+
+      // Locators before 1.4 handled configuration asynchronously.
+      // We must wait for configuration configuration to be ready, or confirm that it is disabled.
+      locator1.invoke(
+          () -> Awaitility.await().atMost(65, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS)
+              .until(() -> assertTrue(
+                  !InternalLocator.getLocator().getConfig().getEnableClusterConfiguration()
+                      || InternalLocator.getLocator().isSharedConfigurationRunning())));
+
+      locator1 =
+          rollLocatorToCurrent(locator1, hostName, locatorPort, getTestMethodName(), locatorString);
+
+      server1 = rollServerToCurrentAndCreateRegionOnly(server1, regionType, null, shortcut.name(),
+          regionName, new int[] {locatorPort});
+
+      invokeRunnableInVMs(invokeCreateRegion(regionName, shortcut.name()), server2);
+      try {
+        server1.invoke(() -> createLuceneIndexOnExistingRegion(cache, regionName, INDEX_NAME));
+        fail();
+      } catch (Exception exception) {
+        if (!exception.getCause().getCause().getMessage()
+            .contains("are not the same Apache Geode version")) {
+          exception.printStackTrace();
+          fail();
+        }
+      }
+
+      int expectedRegionSize = 10;
+      putSerializableObject(server1, regionName, 0, expectedRegionSize);
+
+      server2 = rollServerToCurrentAndCreateRegionOnly(server2, regionType, null, shortcut.name(),
+          regionName, new int[] {locatorPort});
+
+
+      AsyncInvocation ai1 = server1
+          .invokeAsync(() -> createLuceneIndexOnExistingRegion(cache, regionName, INDEX_NAME));
+
+      AsyncInvocation ai2 = server2
+          .invokeAsync(() -> createLuceneIndexOnExistingRegion(cache, regionName, INDEX_NAME));
+
+      ai1.join();
+      ai2.join();
+
+      ai1.checkException();
+      ai2.checkException();
+
+      expectedRegionSize += 10;
+      putSerializableObjectAndVerifyLuceneQueryResult(server2, regionName, expectedRegionSize, 15,
+          25, server1, server2);
+
+    } finally {
+      invokeRunnableInVMs(true, invokeStopLocator(), locator1);
+      invokeRunnableInVMs(true, invokeCloseCache(), server1, server2);
+    }
+  }
+
-      server1 = rollServerToCurrentAndCreateRegion(server1, regionType, null, shortcut.name(),
-          regionName, locatorPorts);
+      server1 = rollServerToCurrentCreateLuceneIndexAndCreateRegion(server1, regionType, null,
+          shortcut.name(), regionName, locatorPorts);
-      server2 = rollServerToCurrentAndCreateRegion(server2, regionType, null, shortcut.name(),
-          regionName, locatorPorts);
+      server2 = rollServerToCurrentCreateLuceneIndexAndCreateRegion(server2, regionType, null,
+          shortcut.name(), regionName, locatorPorts);
-      server3 = rollServerToCurrentAndCreateRegion(server3, regionType, null, shortcut.name(),
-          regionName, locatorPorts);
+      server3 = rollServerToCurrentCreateLuceneIndexAndCreateRegion(server3, regionType, null,
+          shortcut.name(), regionName, locatorPorts);
-      server2 = rollServerToCurrentAndCreateRegion(server2, regionType, null, shortcut.name(),
-          regionName, locatorPorts);
+      server2 = rollServerToCurrentCreateLuceneIndexAndCreateRegion(server2, regionType, null,
+          shortcut.name(), regionName, locatorPorts);
-      server1 = rollServerToCurrentAndCreateRegion(server1, regionType, null, shortcut.name(),
-          regionName, locatorPorts);
+      server1 = rollServerToCurrentCreateLuceneIndexAndCreateRegion(server1, regionType, null,
+          shortcut.name(), regionName, locatorPorts);
-      server1 = rollServerToCurrentAndCreateRegion(server1, regionType, testingDirs[0],
-          shortcutName, regionName, locatorPorts);
+      server1 = rollServerToCurrentCreateLuceneIndexAndCreateRegion(server1, regionType,
+          testingDirs[0], shortcutName, regionName, locatorPorts);
-      server2 = rollServerToCurrentAndCreateRegion(server2, regionType, testingDirs[1],
-          shortcutName, regionName, locatorPorts);
+      server2 = rollServerToCurrentCreateLuceneIndexAndCreateRegion(server2, regionType,
+          testingDirs[1], shortcutName, regionName, locatorPorts);
-      server3 = rollServerToCurrentAndCreateRegion(server3, regionType, testingDirs[2],
-          shortcutName, regionName, locatorPorts);
+      server3 = rollServerToCurrentCreateLuceneIndexAndCreateRegion(server3, regionType,
+          testingDirs[2], shortcutName, regionName, locatorPorts);
-  private VM rollServerToCurrentAndCreateRegion(VM oldServer, String regionType, File diskdir,
-      String shortcutName, String regionName, int[] locatorPorts) throws Exception {
+  private VM rollServerToCurrentCreateLuceneIndexAndCreateRegion(VM oldServer, String regionType,
+      File diskdir, String shortcutName, String regionName, int[] locatorPorts) throws Exception {
+  private VM rollServerToCurrentAndCreateRegionOnly(VM oldServer, String regionType, File diskdir,
+      String shortcutName, String regionName, int[] locatorPorts) throws Exception {
+    VM rollServer = rollServerToCurrent(oldServer, locatorPorts);
+    // recreate region on "rolled" server
+    if ((regionType.equals("persistentPartitioned"))) {
+      CacheSerializableRunnable runnable =
+          invokeCreatePersistentPartitionedRegion(regionName, diskdir);
+      invokeRunnableInVMs(runnable, rollServer);
+    } else {
+      invokeRunnableInVMs(invokeCreateRegion(regionName, shortcutName), rollServer);
+    }
+    rollServer.invoke(invokeRebalance());
+    return rollServer;
+  }
+
+  public static void createLuceneIndexOnExistingRegion(Object cache, String regionName,
+      String indexName) throws Exception {
+    Class luceneServiceProvider = Thread.currentThread().getContextClassLoader()
+        .loadClass("org.apache.geode.cache.lucene.LuceneServiceProvider");
+    Method getLuceneService = luceneServiceProvider.getMethod("get", GemFireCache.class);
+    Object luceneService = getLuceneService.invoke(luceneServiceProvider, cache);
+    Method createLuceneIndexFactoryMethod =
+        luceneService.getClass().getMethod("createIndexFactory");
+    createLuceneIndexFactoryMethod.setAccessible(true);
+    Object luceneIndexFactory = createLuceneIndexFactoryMethod.invoke(luceneService);
+    luceneIndexFactory.getClass().getMethod("addField", String.class).invoke(luceneIndexFactory,
+        "status");
+    luceneIndexFactory.getClass().getMethod("create", String.class, String.class, boolean.class)
+        .invoke(luceneIndexFactory, indexName, regionName, true);
+  }
+

INS26 INS40 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS43 INS8 UPD42 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS8 INS42 INS42 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS21 INS60 INS60 INS60 INS54 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS5 INS42 INS42 INS60 INS25 INS21 INS41 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS60 INS60 INS21 INS60 INS21 INS21 INS83 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS83 INS43 INS59 INS43 INS59 INS39 INS59 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS43 INS59 INS36 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS45 INS21 INS21 INS21 INS21 INS21 INS21 INS54 INS60 INS21 INS21 INS60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS32 INS60 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS7 INS7 INS32 INS8 INS12 INS39 INS59 INS32 INS7 INS43 INS59 INS43 INS59 INS32 INS32 INS32 INS32 INS7 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS45 INS43 INS59 INS32 INS32 INS42 INS32 INS42 INS45 INS42 INS42 INS45 INS57 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS45 INS57 INS32 INS42 INS45 INS57 INS57 INS57 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS86 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS21 INS21 INS44 INS8 INS42 INS34 INS42 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS34 INS34 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS43 INS39 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS33 MOV32 INS42 INS3 INS42 INS42 INS32 INS32 INS32 INS43 INS42 INS25 INS42 INS42 INS42 INS33 MOV32 INS42 INS3 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 UPD42 INS32 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS3 INS32 INS42 INS86 INS42 INS5 INS4 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS38 INS8 INS5 INS4 INS32 INS32 INS42 INS42 INS42 INS42 INS5 INS4 INS32 INS42 INS34 INS40 INS32 INS39 INS85 INS42 INS32 INS32 INS21 INS21 INS39 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS32 INS42 INS34 INS40 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS45 INS32 INS32 INS42 INS42 INS38 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42