GEODE-6811: be able to create GWR in management api. (#3687)

* add createGWR methods in the gateway controllers
* add GatewaReceiverConfigValidator
* add MemberValidator to validate same element can't exists in multiple groups which have common member
* add ConfigurationManager.get method to replace ConfigurationValidator.exists method for more conflict validation
-import java.util.HashSet;
-import java.util.stream.Stream;
+import org.apache.geode.management.internal.configuration.validators.GatewayReceiverConfigValidator;
+import org.apache.geode.management.internal.configuration.validators.MemberValidator;
-import org.apache.geode.management.internal.exceptions.EntityExistsException;
-  private InternalCache cache;
+  private MemberValidator memberValidator;
-    this(cache, persistenceService, new HashMap(), new HashMap());
+    this(persistenceService, new HashMap(), new HashMap(), null);
+    validators.put(GatewayReceiverConfig.class, new GatewayReceiverConfigValidator());
+    memberValidator = new MemberValidator(cache, persistenceService);
-  public LocatorClusterManagementService(InternalCache cache,
-      ConfigurationPersistenceService persistenceService, Map managers, Map validators) {
-    this.cache = cache;
+  public LocatorClusterManagementService(ConfigurationPersistenceService persistenceService,
+      Map managers, Map validators, MemberValidator memberValidator) {
+    this.memberValidator = memberValidator;
+
-      // exit early if config element already exists in cache config
-      CacheConfig currentPersistedConfig = persistenceService.getCacheConfig(group, true);
-      if (validator.exists(config.getId(), currentPersistedConfig)) {
-        throw new EntityExistsException("Cache element '" + config.getId() + "' already exists");
-      }
+    // check if this config already exists on all/some members of this group
+    memberValidator.validateCreate(config, configurationManager);
+
-    Set<DistributedMember> targetedMembers = findMembers(group);
+    Set<DistributedMember> targetedMembers = memberValidator.findMembers(group);
-    validator.validate(CacheElementOperation.DELETE, config);
+    if (validator != null) {
+      validator.validate(CacheElementOperation.DELETE, config);
+    }
-    List<String> relevantGroups = persistenceService.getGroups().stream().filter(g -> {
-      CacheConfig currentPersistedConfig = persistenceService.getCacheConfig(g);
-      if (currentPersistedConfig != null && validator != null) {
-        return validator.exists(config.getId(), currentPersistedConfig);
-      } else {
-        return false;
-      }
-    }).collect(Collectors.toList());
-
-    if (relevantGroups.isEmpty()) {
+    String[] groupsWithThisElement =
+        memberValidator.findGroupsWithThisElement(config, configurationManager);
+    if (groupsWithThisElement.length == 0) {
-    Set<DistributedMember> targetedMembers = new HashSet<>();
-    relevantGroups.forEach(g -> targetedMembers.addAll(findMembers(g)));
-
-        targetedMembers);
+        memberValidator.findMembers(groupsWithThisElement));
-    for (String finalGroup : relevantGroups) {
+    for (String finalGroup : groupsWithThisElement) {
-  Set<DistributedMember> findMembers(String group) {
-    Stream<DistributedMember> memberStream =
-        cache.getDistributionManager().getNormalDistributionManagerIds()
-            .stream().map(DistributedMember.class::cast);
-    if (!"cluster".equals(group)) {
-      memberStream = memberStream.filter(m -> m.getGroups().contains(group));
-    }
-    return memberStream.collect(Collectors.toSet());
-  }
-
-  @VisibleForTesting

MOV26 MOV26 MOV23 UPD40 UPD40 MOV44 UPD43 MOV21 UPD42 UPD42 MOV14 INS21 INS21 UPD43 UPD42 INS25 INS21 INS25 INS33 INS32 INS7 UPD42 MOV27 INS8 INS32 MOV27 INS8 INS5 INS27 UPD42 INS42 INS42 INS57 INS14 INS42 INS14 UPD42 MOV21 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV21 MOV43 INS85 INS42 INS32 INS40 INS34 INS43 INS43 INS43 INS42 INS42 UPD42 INS42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL40 DEL26 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL32 DEL32 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL59 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL27 DEL42 DEL32 DEL32 DEL41 DEL8 DEL9 DEL41 DEL8 DEL25 DEL8 DEL86 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL86 DEL32 DEL21 DEL42 DEL78 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL57 DEL42 DEL90 DEL32 DEL59 DEL60 DEL45 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL86 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31