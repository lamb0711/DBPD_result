Merge branch 'feature/GEODE-77' into develop

Conflicts:
	gemfire-core/src/test/java/com/gemstone/gemfire/cache/management/MemoryThresholdsOffHeapDUnitTest.java

-        socket = new MulticastSocket();
-        socket.setSoTimeout(Integer.getInteger("AvailablePort.timeout", 2000).intValue());
-        byte[] buffer = new byte[4];
-        buffer[0] = (byte)'p';
-        buffer[1] = (byte)'i';
-        buffer[2] = (byte)'n';
-        buffer[3] = (byte)'g';
-        SocketAddress mcaddr = new InetSocketAddress(
-          addr==null? DistributionConfig.DEFAULT_MCAST_ADDRESS : addr, port);
-        DatagramPacket packet = new DatagramPacket(buffer, 0, buffer.length, mcaddr);
-        socket.send(packet);
-        try {
-          socket.receive(packet);
-          packet.getData();  // make sure there's data, but no need to process it
-          return false;
-        }
-        catch (SocketTimeoutException ste) {
-          //System.out.println("socket read timed out");
-          return true;
-        }
-        catch (Exception e) {
-          e.printStackTrace();
-          return false;
-        }
-      }
-      catch (java.io.IOException ioe) {
-        if (ioe.getMessage().equals("Network is unreachable")) {
-          throw new RuntimeException(LocalizedStrings.AvailablePort_NETWORK_IS_UNREACHABLE.toLocalizedString(), ioe);
-        }
-        ioe.printStackTrace();
-        return false;
-      }
-      catch (Exception e) {
-        e.printStackTrace();
-        return false;
+        // TODO - need to find out if anyone is listening on this port
+        return true;
+
+//        socket = new MulticastSocket();
+//        socket.setSoTimeout(Integer.getInteger("AvailablePort.timeout", 2000).intValue());
+//        byte[] buffer = new byte[4];
+//        buffer[0] = (byte)'p';
+//        buffer[1] = (byte)'i';
+//        buffer[2] = (byte)'n';
+//        buffer[3] = (byte)'g';
+//        SocketAddress mcaddr = new InetSocketAddress(
+//          addr==null? DistributionConfig.DEFAULT_MCAST_ADDRESS : addr, port);
+//        DatagramPacket packet = new DatagramPacket(buffer, 0, buffer.length, mcaddr);
+//        socket.send(packet);
+//        try {
+//          socket.receive(packet);
+//          packet.getData();  // make sure there's data, but no need to process it
+//          return false;
+//        }
+//        catch (SocketTimeoutException ste) {
+//          //System.out.println("socket read timed out");
+//          return true;
+//        }
+//        catch (Exception e) {
+//          e.printStackTrace();
+//          return false;
+//        }
+//      }
+//      catch (java.io.IOException ioe) {
+//        if (ioe.getMessage().equals("Network is unreachable")) {
+//          throw new RuntimeException(LocalizedStrings.AvailablePort_NETWORK_IS_UNREACHABLE.toLocalizedString(), ioe);
+//        }
+//        ioe.printStackTrace();
+//        return false;
+//      }
+//      catch (Exception e) {
+//        e.printStackTrace();
+//        return false;

INS8 MOV60 MOV54 MOV8 MOV8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL34 DEL32 DEL42 DEL32 DEL32 DEL21 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL34 DEL2 DEL39 DEL13 DEL11 DEL7 DEL21 DEL42 DEL34 DEL2 DEL39 DEL13 DEL11 DEL7 DEL21 DEL42 DEL34 DEL2 DEL39 DEL13 DEL11 DEL7 DEL21 DEL42 DEL34 DEL2 DEL39 DEL13 DEL11 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL33 DEL27 DEL40 DEL42 DEL16 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL34 DEL40 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL43 DEL40 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8