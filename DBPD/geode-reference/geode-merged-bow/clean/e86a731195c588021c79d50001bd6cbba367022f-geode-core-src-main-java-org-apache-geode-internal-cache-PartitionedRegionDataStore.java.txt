Merge branch 'release/1.3.0'

+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.locks.Lock;
+
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.cache.*;
+import org.apache.geode.cache.AttributesFactory;
+import org.apache.geode.cache.AttributesMutator;
+import org.apache.geode.cache.Cache;
+import org.apache.geode.cache.CacheListener;
+import org.apache.geode.cache.CacheLoader;
+import org.apache.geode.cache.CacheRuntimeException;
+import org.apache.geode.cache.CustomExpiry;
+import org.apache.geode.cache.DataPolicy;
+import org.apache.geode.cache.EntryEvent;
+import org.apache.geode.cache.EntryExistsException;
+import org.apache.geode.cache.EntryNotFoundException;
+import org.apache.geode.cache.EvictionAttributes;
+import org.apache.geode.cache.ExpirationAction;
+import org.apache.geode.cache.ExpirationAttributes;
+import org.apache.geode.cache.InterestRegistrationEvent;
+import org.apache.geode.cache.PartitionAttributes;
+import org.apache.geode.cache.Region;
+import org.apache.geode.cache.RegionAttributes;
+import org.apache.geode.cache.RegionDestroyedException;
+import org.apache.geode.cache.RegionEvent;
+import org.apache.geode.cache.RegionExistsException;
+import org.apache.geode.cache.Scope;
+import org.apache.geode.cache.persistence.PartitionOfflineException;
-import org.apache.geode.internal.cache.partitioned.*;
+import org.apache.geode.internal.cache.partitioned.Bucket;
+import org.apache.geode.internal.cache.partitioned.PRLocallyDestroyedException;
+import org.apache.geode.internal.cache.partitioned.PartitionedRegionFunctionStreamingMessage;
+import org.apache.geode.internal.cache.partitioned.PartitionedRegionObserver;
+import org.apache.geode.internal.cache.partitioned.PartitionedRegionObserverHolder;
+import org.apache.geode.internal.cache.partitioned.RedundancyAlreadyMetException;
+import org.apache.geode.internal.cache.partitioned.RemoveBucketMessage;
-import org.apache.geode.internal.cache.persistence.BackupManager;
-import org.apache.logging.log4j.Logger;
-
-import java.io.IOException;
-import java.util.*;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.concurrent.locks.Lock;
+    } catch (PartitionOfflineException validationException) {
+      // GEODE-3055
+      PartitionedRegion leader = ColocationHelper.getLeaderRegion(this.partitionedRegion);
+      boolean isLeader = leader.equals(this.partitionedRegion);
+      if (!isLeader) {
+        leader.getDataStore().removeBucket(possiblyFreeBucketId, true);
+        if (isDebugEnabled) {
+          logger.debug("For bucket " + possiblyFreeBucketId
+              + ", failed to create cololcated child bucket for "
+              + this.partitionedRegion.getFullPath() + ", removed leader region "
+              + leader.getFullPath() + " bucket.");
+        }
+      }
+      throw validationException;
+  protected void lockBucketCreationAndVisit(BucketVisitor visitor) {
+    StoppableWriteLock lock = this.bucketCreationLock.writeLock();
+    lock.lock();
+    try {
+      visitBuckets(visitor);
+    } finally {
+      lock.unlock();
+    }
+  }
+
-    if (!canAccommodateMoreBytesSafely(size)) {
+    if (!forceCreation && !canAccommodateMoreBytesSafely(size)) {
+  public boolean isRemotePrimaryReadyForColocatedChildren(int bucketId) {
+    boolean isRemotePrimaryReady = true;
+    InternalDistributedMember myId =
+        this.partitionedRegion.getDistributionManager().getDistributionManagerId();
+
+    List<PartitionedRegion> colocatedChildPRs =
+        ColocationHelper.getColocatedChildRegions(this.partitionedRegion);
+    if (colocatedChildPRs != null) {
+      for (PartitionedRegion pr : colocatedChildPRs) {
+        InternalDistributedMember primaryChild = pr.getBucketPrimary(bucketId);
+        if (logger.isDebugEnabled()) {
+          logger.debug("Checking colocated child bucket " + pr + ", bucketId=" + bucketId
+              + ", primary is " + primaryChild);
+        }
+        if (primaryChild == null || myId.equals(primaryChild)) {
+          if (logger.isDebugEnabled()) {
+            logger.debug("Colocated bucket region " + pr + " " + bucketId
+                + " does not have a remote primary yet. Not to remove.");
+          }
+          return false;
+        } else {
+          if (logger.isDebugEnabled()) {
+            logger
+                .debug(pr + " bucketId=" + bucketId + " has remote primary, checking its children");
+          }
+          isRemotePrimaryReady = isRemotePrimaryReady
+              && pr.getDataStore().isRemotePrimaryReadyForColocatedChildren(bucketId);
+        }
+      }
+    }
+    return isRemotePrimaryReady;
+  }
+
-    if (!this.partitionedRegion.getRedundancyProvider().isPersistentRecoveryComplete()) {
+    if (!forceRemovePrimary
+        && !this.partitionedRegion.getRedundancyProvider().isPersistentRecoveryComplete()) {
+      PartitionedRegion leader = ColocationHelper.getLeaderRegion(this.partitionedRegion);
+      boolean isLeader = leader.equals(this.partitionedRegion);
+      InternalDistributedMember myId =
+          this.partitionedRegion.getDistributionManager().getDistributionManagerId();
+        // forceRemovePrimary==true will enable remove the bucket even when:
+        // 1) it's primary
+        // 2) no other primary ready yet
+        // 3) colocated bucket and its child is not completely ready
+        if (isLeader) {
+          if (!forceRemovePrimary && !isRemotePrimaryReadyForColocatedChildren(bucketId)) {
+            return false;
+          }
+
+          InternalDistributedMember primary = bucketAdvisor.getPrimary();
+          if (!forceRemovePrimary && (primary == null || myId.equals(primary))) {
+            if (logger.isDebugEnabled()) {
+              logger.debug("Bucket region " + bucketRegion
+                  + " does not have a remote primary yet. Not to remove.");
+            }
+            return false;
+          }
+
+          if (logger.isDebugEnabled()) {
+            logger.debug("Bucket region " + bucketRegion + " has primary at " + primary);
+          }
+        }
+
-      InternalDistributedMember myId =
-          this.partitionedRegion.getDistributionManager().getDistributionManagerId();
-        // TODO:KIRK:OK } else if ((ent.isTombstone() && allowTombstones) ||
-        // !Token.isRemoved(ent.getValueInVM(getPartitionedRegion()))) {
-  public static abstract class BucketVisitor {
-    abstract public void visit(Integer bucketId, Region r);
+  public interface BucketVisitor {
+    void visit(Integer bucketId, Region r);
-          grab = pr.getDataStore().grabFreeBucketRecursively(bucketId, pr, moveSource,
-              forceCreation, replaceOffineData, isRebalance, creationRequestor, isDiskRecovery);
+          try {
+            grab = pr.getDataStore().grabFreeBucketRecursively(bucketId, pr, moveSource,
+                forceCreation, replaceOffineData, isRebalance, creationRequestor, isDiskRecovery);
+          } catch (RegionDestroyedException rde) {
+            if (logger.isDebugEnabled()) {
+              logger.debug("Failed to grab, colocated region for bucketId = {}{}{} is destroyed.",
+                  this.partitionedRegion.getPRId(), PartitionedRegion.BUCKET_ID_SEPARATOR,
+                  bucketId);
+            }
+          }
-        new RegionFunctionContextImpl(function.getId(),
+        new RegionFunctionContextImpl(getPartitionedRegion().getCache(), function.getId(),

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 UPD40 UPD40 INS40 INS40 INS31 INS31 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS60 INS21 INS54 INS39 INS42 INS60 INS60 INS60 INS25 INS41 INS12 INS42 INS43 INS59 INS32 INS8 INS8 INS27 INS39 INS59 INS43 INS59 INS74 INS59 INS27 INS8 INS42 INS27 MOV60 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS21 INS21 INS38 MOV38 INS42 INS9 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS70 INS38 MOV38 INS60 INS60 INS43 INS42 INS60 INS60 INS25 INS53 INS22 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS44 INS42 INS8 INS42 INS43 INS59 INS39 INS59 INS32 INS42 INS43 INS59 INS39 INS59 INS38 INS8 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS52 INS42 INS43 INS42 INS60 INS25 INS25 INS42 INS42 INS32 INS42 INS32 INS25 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS21 INS25 INS52 INS42 INS42 INS43 INS59 INS32 INS8 INS27 INS8 INS8 INS42 INS42 INS22 INS42 INS42 INS22 INS42 INS8 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS32 INS42 INS8 INS42 INS42 INS32 INS42 INS42 INS21 INS27 INS32 INS25 INS41 INS25 INS21 INS52 INS42 INS52 INS42 INS25 INS60 INS25 INS25 INS54 INS52 INS42 INS52 INS42 INS32 INS42 INS42 INS9 INS21 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS32 INS8 INS9 INS32 INS8 INS7 INS27 INS8 INS43 INS59 INS27 INS8 INS32 INS8 INS8 INS12 INS42 INS42 INS32 INS42 INS42 INS27 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS27 INS38 INS38 INS41 INS42 INS42 INS32 INS38 INS36 INS25 INS41 INS42 INS42 INS21 MOV21 INS44 INS8 INS42 INS42 INS27 INS45 INS42 INS45 INS42 INS45 INS42 INS32 INS32 INS42 INS32 INS42 INS32 INS9 INS42 INS42 INS42 INS27 INS32 INS8 INS9 INS32 INS43 INS42 INS25 INS45 INS42 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS27 INS42 INS42 INS27 INS32 INS42 INS42 INS42 INS42 INS27 INS32 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS32 INS8 INS22 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS45 INS42 INS45 INS42 INS42 INS42 INS21 INS52 INS42 INS42 INS42 INS27 INS32 INS45 INS42 INS45 INS42 INS42 INS45 INS32 INS40 INS42 INS22 INS42 INS52 INS42 DEL83 DEL83 DEL83 DEL83