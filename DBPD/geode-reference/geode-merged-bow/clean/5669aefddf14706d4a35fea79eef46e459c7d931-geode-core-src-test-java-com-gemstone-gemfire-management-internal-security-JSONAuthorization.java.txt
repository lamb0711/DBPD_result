GEODE-17: Initial CLIOperationContext tests

-    private final String region;
-    Permission(Resource resource, OperationCode operationCode, String region) {
+    Permission(Resource resource, OperationCode operationCode) {
-      this.region = region;
-    public String getRegion() {
-      return region;
-    }
-
-      result += (region != null) ? "[" + region + "]" : "";
-    String regionName;
+    List<String> regionNames = null; // when checking, if regionNames is null, that means all regions are allowed.
-    Set<Permission> permissions = new HashSet<>();
+    Set<Role> roles = new HashSet<>();
-
-        user.permissions.addAll(roleMap.get(roleName).permissions);
+        user.roles.add(roleMap.get(roleName));
+      JSONArray ops = obj.getJSONArray("operationsAllowed");
+      for (int j = 0; j < ops.length(); j++) {
+        String[] parts = ops.getString(j).split(":");
+        Resource r = Resource.valueOf(parts[0]);
+        OperationCode op = parts.length > 1 ? OperationCode.valueOf(parts[1]) : OperationCode.ALL;
+        role.permissions.add(new Permission(r, op));
+      }
-      if (obj.has("operationsAllowed")) {
-        // The default region is null and not the empty string
-        String region = obj.optString("region", null);
-        JSONArray ops = obj.getJSONArray("operationsAllowed");
-        for (int j = 0; j < ops.length(); j++) {
-          String[] parts = ops.getString(j).split(":");
-          Resource r = Resource.valueOf(parts[0]);
-          OperationCode op = parts.length > 1 ? OperationCode.valueOf(parts[1]) : OperationCode.ALL;
-          role.permissions.add(new Permission(r, op, region));
+      if(obj.has("region")) {
+        if (role.regionNames == null) {
+          role.regionNames = new ArrayList<>();
-      } else {
-        if (!obj.has("inherit")) {
-          throw new RuntimeException(
-              "Role " + role.name + " does not have any permission neither it inherits any parent role");
+        role.regionNames.add(obj.getString("region"));
+      }
+
+      if(obj.has("regions")) {
+        JSONArray regions = obj.getJSONArray("regions");
+        if (role.regionNames == null) {
+          role.regionNames = new ArrayList<>();
+        }
+        for (int j = 0; j < regions.length(); j++) {
+          role.regionNames.add(regions.getString(j));
-      if (obj.has("region")) {
-        role.regionName = obj.getString("region");
-      }
-
+    if (principal == null)
+      return false;
-    if (principal != null) {
-      User user = acl.get(principal.getName());
-      if (user != null) {
-        LogService.getLogger().info("Context received " + context);
-        ResourceOperationContext ctx = (ResourceOperationContext) context;
-        LogService.getLogger().info("Checking for permission " + ctx.getResource() + ":" + ctx.getOperationCode());
+    User user = acl.get(principal.getName());
+    if(user == null)
+      return false; // this user is not authorized to do anything
-        //TODO : This is for un-annotated commands
-        if (ctx.getOperationCode() == null) {
-          return true;
-        }
+    LogService.getLogger().info("Context received " + context);
+    LogService.getLogger().info("Checking for permission " + context.getResource() + ":" + context.getOperationCode());
-        boolean found = false;
-        for (Permission perm : acl.get(user.name).permissions) {
-          if (ctx.getResource() == perm.getResource() && ctx.getOperationCode() == perm.getOperationCode()) {
-            found = true;
-            LogService.getLogger().info("Found permission " + perm);
-            break;
+    // check if the user has this permission defined in the context
+    for(Role role:acl.get(user.name).roles) {
+      for (Permission perm : role.permissions) {
+        if (context.getResource() == perm.getResource() && context.getOperationCode() == perm.getOperationCode()) {
+          LogService.getLogger().info("Found permission " + perm);
+
+          //if this is only for JMX aurthorization, we've found the permission needed, i.e, this operation is authorized
+          if(!(context instanceof CLIOperationContext)){
+            return true;
+          }
+
+          // If this is a Command operation context, we need to further check if the region is allowed in this role
+          CLIOperationContext ctx = (CLIOperationContext) context;
+          String region = ctx.getCommandOptions().get("region");
+          if(role.regionNames == null || role.regionNames.contains(region)){
+            // if regionName is null, i.e. all regions are allowed
+            return true;
-        if (found) {
-          return true;
-        }
-        LogService.getLogger().info("Did not find code " + ctx.getOperationCode());
-        return false;
+
+    LogService.getLogger().info("Did not find code " + context.getOperationCode());

MOV8 MOV8 INS74 UPD74 MOV60 MOV60 INS24 MOV41 INS25 MOV60 INS25 INS43 MOV43 UPD42 INS33 UPD43 UPD42 MOV58 MOV27 MOV37 MOV8 INS27 INS41 INS27 MOV41 INS44 INS8 UPD42 MOV42 UPD42 MOV60 MOV60 MOV21 INS25 INS25 MOV21 MOV25 INS42 INS33 INS9 INS42 INS33 INS43 INS42 UPD42 INS70 MOV32 INS8 INS32 INS8 INS42 MOV44 INS40 MOV8 INS25 INS21 INS42 INS42 INS45 MOV60 INS25 INS24 UPD42 UPD42 UPD42 INS27 INS8 INS32 INS43 INS27 INS8 INS58 INS27 INS37 INS8 UPD40 UPD42 MOV32 INS40 INS33 INS21 INS40 INS42 MOV32 INS42 UPD42 INS40 INS33 INS21 INS39 INS59 INS42 INS32 INS42 INS21 INS25 INS60 INS60 INS25 INS7 UPD42 UPD45 INS7 INS42 INS34 INS42 INS42 INS32 INS38 MOV8 INS43 INS59 MOV43 INS59 INS27 MOV8 INS40 INS14 INS40 INS14 INS40 INS42 INS32 UPD42 UPD42 INS36 INS42 INS42 INS11 INS42 INS32 INS27 INS32 INS74 INS74 INS42 INS42 INS42 INS62 INS43 INS42 INS32 INS42 INS45 INS40 INS33 INS40 INS42 INS42 INS43 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL33 DEL27 DEL36 DEL45 DEL42 DEL45 DEL27 DEL45 DEL16 DEL7 DEL21 DEL43 DEL42 DEL22 DEL42 DEL33 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL38 DEL42 DEL43 DEL45 DEL40 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL40 DEL7 DEL21 DEL8 DEL25 DEL24 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL9 DEL7 DEL21 DEL10 DEL42 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL25 DEL8 DEL25 DEL8