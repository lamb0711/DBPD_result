Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * DistributedRegions with DataPolicy EMPTY, NORMAL, PRELOADED, can use
- * this message to fetch VersionTag for a key.
+ * DistributedRegions with DataPolicy EMPTY, NORMAL, PRELOADED, can use this message to fetch
+ * VersionTag for a key.
-  
+
-  public RemoteFetchVersionMessage() {
-  }
+  public RemoteFetchVersionMessage() {}
+   * 
-  public static FetchVersionResponse send(InternalDistributedMember recipient,
-      LocalRegion r, Object key) throws RemoteOperationException {
-    FetchVersionResponse response = new FetchVersionResponse(r.getSystem(),
-        recipient);
-    RemoteFetchVersionMessage msg = new RemoteFetchVersionMessage(recipient,
-        r.getFullPath(), response, key);
+  public static FetchVersionResponse send(InternalDistributedMember recipient, LocalRegion r,
+      Object key) throws RemoteOperationException {
+    FetchVersionResponse response = new FetchVersionResponse(r.getSystem(), recipient);
+    RemoteFetchVersionMessage msg =
+        new RemoteFetchVersionMessage(recipient, r.getFullPath(), response, key);
-      throw new RemoteOperationException(LocalizedStrings.GetMessage_FAILED_SENDING_0.toLocalizedString(msg));
+      throw new RemoteOperationException(
+          LocalizedStrings.GetMessage_FAILED_SENDING_0.toLocalizedString(msg));
-  private RemoteFetchVersionMessage(InternalDistributedMember recipient,
-      String regionPath, ReplyProcessor21 processor, Object key) {
+  private RemoteFetchVersionMessage(InternalDistributedMember recipient, String regionPath,
+      ReplyProcessor21 processor, Object key) {
-  protected boolean operateOnRegion(DistributionManager dm, LocalRegion r,
-      long startTime) throws RemoteOperationException {
+  protected boolean operateOnRegion(DistributionManager dm, LocalRegion r, long startTime)
+      throws RemoteOperationException {
-          logger.trace(LogMarker.DM,"RemoteFetchVersionMessage did not find entry for key:{}", key);
+          logger.trace(LogMarker.DM, "RemoteFetchVersionMessage did not find entry for key:{}",
+              key);
-      sendReply(getSender(), getProcessorId(), dm, new ReplyException(e), r,
-          startTime);
+      sendReply(getSender(), getProcessorId(), dm, new ReplyException(e), r, startTime);
-    public FetchVersionReplyMessage() {
-    }
+    public FetchVersionReplyMessage() {}
-    public static void send(InternalDistributedMember recipient,
-        int processorId, VersionTag tag, DM dm) {
-      FetchVersionReplyMessage reply = new FetchVersionReplyMessage(
-          processorId, tag);
+    public static void send(InternalDistributedMember recipient, int processorId, VersionTag tag,
+        DM dm) {
+      FetchVersionReplyMessage reply = new FetchVersionReplyMessage(processorId, tag);
-      
+
-        logger.trace(LogMarker.DM, "FetchVersionReplyMessage process invoking reply processor with processorId:{}",  this.processorId);
+        logger.trace(LogMarker.DM,
+            "FetchVersionReplyMessage process invoking reply processor with processorId:{}",
+            this.processorId);
-        logger.trace(LogMarker.DM, "{}  Processed  {}",  processor, this);
+        logger.trace(LogMarker.DM, "{}  Processed  {}", processor, this);
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    public FetchVersionResponse(InternalDistributedSystem dm,
-        InternalDistributedMember member) {
+    public FetchVersionResponse(InternalDistributedSystem dm, InternalDistributedMember member) {
-    
+

UPD66 UPD66