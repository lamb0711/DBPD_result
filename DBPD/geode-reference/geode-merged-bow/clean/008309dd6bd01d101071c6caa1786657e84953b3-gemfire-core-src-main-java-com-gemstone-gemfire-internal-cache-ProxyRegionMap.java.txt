Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+  @Override
+  public Collection<RegionEntry> regionEntriesInVM() {
+    return Collections.emptySet();
+  }
+
+  public RegionEntry putEntryIfAbsent(Object key, RegionEntry re) {
+    return null;
+  }
+
+        boolean cbEventInPending = false;
+        try {
+          cbEventInPending = true;
+        }
+        } finally {
+          if (!cbEventInPending) e.release();
+        boolean cbEventInPending = false;
+        try {
+          cbEventInPending = true;
+        }
+        } finally {
+          if (!cbEventInPending) e.release();
+        boolean cbEventInPending = false;
+        try {
+          cbEventInPending = true;
+        }
+        } finally {
+          if (!cbEventInPending) e.release();
+    @Override
+    public Object getValueRetain(RegionEntryContext context) {
+      throw new UnsupportedOperationException(LocalizedStrings.ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0.toLocalizedString(DataPolicy.EMPTY));
+    }
+    
+    
+    @Override
+    public Object prepareValueForCache(RegionEntryContext r, Object val, boolean isEntryUpdate) {
+      throw new IllegalStateException("Should never be called");
+    }
-    public Object _getValueUse(RegionEntryContext context, boolean decompress) {
+    public Object _getValueRetain(RegionEntryContext context, boolean decompress) {
-    
+
+    @Override
+    public boolean isMarkedForEviction() {
+      throw new UnsupportedOperationException(LocalizedStrings
+          .ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+    }
+
+    @Override
+    public void setMarkedForEviction() {
+      throw new UnsupportedOperationException(LocalizedStrings
+          .ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+    }
+
+    @Override
+    public void clearMarkedForEviction() {
+      throw new UnsupportedOperationException(LocalizedStrings
+          .ProxyRegionMap_NO_ENTRY_SUPPORT_ON_REGIONS_WITH_DATAPOLICY_0
+              .toLocalizedString(DataPolicy.EMPTY));
+    }
+
+
+    @Override
+    public Object prepareValueForCache(RegionEntryContext r, Object val,
+        EntryEventImpl event, boolean isEntryUpdate) {
+      throw new IllegalStateException("Should never be called");
+    }
+  public RegionEntry getOperationalEntryInVM(Object key) {
+    return null;
+  }
+
+  @Override
+
+  @Override
+  public void close() {
+  }

INS31 INS31 INS31 INS31 INS78 INS83 INS74 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS42 INS43 INS43 INS41 INS42 INS43 INS42 INS43 INS42 INS41 INS78 INS83 INS43 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS8 UPD42 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS42 INS42 INS43 INS42 INS41 INS42 INS42 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS43 INS42 INS53 INS42 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS53 INS42 INS53 INS42 INS53 INS42 INS53 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS53 INS42 INS33 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS14 INS14 INS14 INS42 INS42 INS42 INS14 INS43 INS32 INS43 INS45 INS43 INS32 INS43 INS32 INS43 INS32 INS43 INS45 INS60 INS54 INS60 INS54 INS60 INS54 INS42 INS40 INS42 INS40 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS39 INS59 INS8 INS8 INS39 INS59 INS8 INS8 INS39 INS59 INS8 INS8 INS42 INS9 MOV21 MOV25 INS25 INS42 INS9 MOV21 MOV25 INS25 INS42 INS9 MOV21 MOV25 INS25 INS38 INS21 INS38 INS21 INS38 INS21 INS21 INS42 INS32 INS21 INS42 INS32 INS21 INS42 INS32 INS7 INS42 INS42 INS7 INS42 INS42 INS7 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS9