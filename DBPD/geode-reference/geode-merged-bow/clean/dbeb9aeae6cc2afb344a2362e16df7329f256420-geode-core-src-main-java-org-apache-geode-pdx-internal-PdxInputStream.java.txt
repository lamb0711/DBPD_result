Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * Create a pdx input stream by whose contents are the first length
-   * bytes from the given input stream.
-   * @param existing the input stream whose content will go into this stream. Note that this existing stream will be read by this class (a copy is not made) so it should not be changed externally.
+   * Create a pdx input stream by whose contents are the first length bytes from the given input
+   * stream.
+   * 
+   * @param existing the input stream whose content will go into this stream. Note that this
+   *        existing stream will be read by this class (a copy is not made) so it should not be
+   *        changed externally.
-   * @param bytes the content of this stream. Note that this byte array will be read by this class (a copy is not made) so it should not be changed externally.
+   * 
+   * @param bytes the content of this stream. Note that this byte array will be read by this class
+   *        (a copy is not made) so it should not be changed externally.
-   * @param bb the content of this stream. Note that bb will be read by this class (a copy is not made) so it should not be changed externally.
+   * 
+   * @param bb the content of this stream. Note that bb will be read by this class (a copy is not
+   *        made) so it should not be changed externally.
-   * @param copy the input stream to copy. Note that this copy stream will be read by this class (a copy is not made) so it should not be changed externally.
+   * 
+   * @param copy the input stream to copy. Note that this copy stream will be read by this class (a
+   *        copy is not made) so it should not be changed externally.
-  
+
-      position(positionForField);
-      return readString();
+    position(positionForField);
+    return readString();
-      position(positionForField);
-      return readObject();
+    position(positionForField);
+    return readObject();
-      position(positionForField);
-      return readCharArray();
+    position(positionForField);
+    return readCharArray();
-      position(positionForField);
-      return readBooleanArray();
+    position(positionForField);
+    return readBooleanArray();
-      position(positionForField);
-      return readByteArray();
+    position(positionForField);
+    return readByteArray();
-      position(positionForField);
-      return readShortArray();
+    position(positionForField);
+    return readShortArray();
-      position(positionForField);
-      return readIntArray();
+    position(positionForField);
+    return readIntArray();
-      position(positionForField);
-      return readLongArray();
+    position(positionForField);
+    return readLongArray();
-      position(positionForField);
-      return readFloatArray();
+    position(positionForField);
+    return readFloatArray();
-      position(positionForField);
-      return readDoubleArray();
+    position(positionForField);
+    return readDoubleArray();
-      position(positionForField);
-      return readStringArray();
+    position(positionForField);
+    return readStringArray();
-      position(positionForField);
-      return readObjectArray();
+    position(positionForField);
+    return readObjectArray();
-      position(positionForField);
-      return readArrayOfByteArrays();
+    position(positionForField);
+    return readArrayOfByteArrays();
-      throw new InternalGemFireException(
-          "ClassNotFoundException should never be thrown but it was", ex);
+      throw new InternalGemFireException("ClassNotFoundException should never be thrown but it was",
+          ex);
-  
+
-      throw new PdxSerializationException("Internal error; failed to slice start=" + startOffset + " end="+ endOffset, e);
+      throw new PdxSerializationException(
+          "Internal error; failed to slice start=" + startOffset + " end=" + endOffset, e);

UPD66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66