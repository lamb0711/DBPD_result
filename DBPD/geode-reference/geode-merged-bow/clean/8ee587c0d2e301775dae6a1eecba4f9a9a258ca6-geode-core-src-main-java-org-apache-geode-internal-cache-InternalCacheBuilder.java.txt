GEODE-6295: Add Micrometer-based metrics system (#3277)

- Add MetricsSession interface that represents the lifecycle of a meter
  registry, and allows connecting "downstream" registries.
- Add MetricsPublishingService interface that defines a service that
  can be implemented to interact with MetricsSessions by connecting
  "downstream" registries to publish metrics to external monitoring
  systems.
- Add CompositeMeterRegistryFactory whichs handles creating the
  composite meter registry for the cache and defining its common tags.
- Add CacheLifecycleMetricsSession class that loads implementations of
  MetricsPublishingService and manages the cache meter registry based
  on the cache lifecycle.
- InternalCacheBuilder uses CompositeMeterRegistryFactory to create the
  cache meter registry and starts a CacheLifecycleMetricsSession. The
  cache meter registry is passed to GemFireCacheImpl and exposed to
  internal Geode code by InternalCache.getMeterRegistry().

Co-Authored-By: Dale Emery <demery@pivotal.io>
Co-Authored-By: Michael Oleske <moleske@pivotal.io>
Co-Authored-By: Mark Hanson <mhanson@pivotal.io>
Co-Authored-By: Kirk Lund <klund@apache.org>
+import java.util.function.Consumer;
+import io.micrometer.core.instrument.MeterRegistry;
+import io.micrometer.core.instrument.composite.CompositeMeterRegistry;
+import org.apache.geode.internal.metrics.CacheLifecycleMetricsSession;
+import org.apache.geode.internal.metrics.CompositeMeterRegistryFactory;
+  private final CompositeMeterRegistryFactory compositeMeterRegistryFactory;
+  private final Consumer<CompositeMeterRegistry> metricsSessionInitializer;
-    this(configProperties, cacheConfig, InternalDistributedSystem::getConnectedInstance,
+    this(configProperties,
+        cacheConfig,
+        new CompositeMeterRegistryFactory() {},
+        CacheLifecycleMetricsSession.builder()::build,
+        InternalDistributedSystem::getConnectedInstance,
-        GemFireCacheImpl::getInstance, GemFireCacheImpl::new);
+        GemFireCacheImpl::getInstance,
+        GemFireCacheImpl::new);
+      CompositeMeterRegistryFactory compositeMeterRegistryFactory,
+      Consumer<CompositeMeterRegistry> metricsSessionInitializer,
+    this.compositeMeterRegistryFactory = compositeMeterRegistryFactory;
+    this.metricsSessionInitializer = metricsSessionInitializer;
+            int systemId = internalDistributedSystem.getConfig().getDistributedSystemId();
+            String memberName = internalDistributedSystem.getName();
+            String hostName = internalDistributedSystem.getDistributedMember().getHost();
+
+            CompositeMeterRegistry compositeMeterRegistry = compositeMeterRegistryFactory
+                .create(systemId, memberName, hostName);
+
+            metricsSessionInitializer.accept(compositeMeterRegistry);
+
-                    cacheConfig, useAsyncEventListeners, typeRegistry);
+                    cacheConfig, useAsyncEventListeners, typeRegistry, compositeMeterRegistry);
-        boolean useAsyncEventListeners, TypeRegistry typeRegistry);
+        boolean useAsyncEventListeners, TypeRegistry typeRegistry, MeterRegistry meterRegistry);

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS44 INS44 INS42 INS42 INS43 INS43 INS42 INS43 INS42 INS74 INS42 INS21 INS21 INS44 INS42 INS42 INS14 INS90 INS42 INS43 INS43 INS7 INS7 INS43 INS42 INS43 INS1 INS32 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS60 INS60 INS60 INS60 INS21 INS39 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42