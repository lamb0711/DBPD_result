Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
- * A message to update the Grantor with the latest TXLock participants
- * This class was added as part of the solution to bug 32999.  It is
- * used to update the Grantor that holds the lock batch for a given
- * TXLockId.  This update is needed in the event that a recovery is
- * needed when the TXLock Lessor (the origin VM of the transaction)
- * crashes/departs before or while sending the TXCommitMessage but
- * after making the reservation for the transaction.
+ * A message to update the Grantor with the latest TXLock participants This class was added as part
+ * of the solution to bug 32999. It is used to update the Grantor that holds the lock batch for a
+ * given TXLockId. This update is needed in the event that a recovery is needed when the TXLock
+ * Lessor (the origin VM of the transaction) crashes/departs before or while sending the
+ * TXCommitMessage but after making the reservation for the transaction.
- * @see org.apache.geode.distributed.internal.locks.DLockGrantor#updateLockBatch(Object, org.apache.geode.distributed.internal.locks.DLockBatch)
+ * @see org.apache.geode.distributed.internal.locks.DLockGrantor#updateLockBatch(Object,
+ *      org.apache.geode.distributed.internal.locks.DLockBatch)
-public final class TXLockUpdateParticipantsMessage
-  extends PooledDistributionMessage 
-  implements MessageWithReply {
-  
+public final class TXLockUpdateParticipantsMessage extends PooledDistributionMessage
+    implements MessageWithReply {
+
-  public TXLockUpdateParticipantsMessage(TXLockId txLockId, 
-                                         String serviceName,
-                                         Set updatedParticipants,
-                                         int processorId) {
+  public TXLockUpdateParticipantsMessage(TXLockId txLockId, String serviceName,
+      Set updatedParticipants, int processorId) {
-    DLockService svc = 
-      DLockService.getInternalServiceNamed(this.serviceName);
+    DLockService svc = DLockService.getInternalServiceNamed(this.serviceName);
-    TXLockUpdateParticipantsReplyMessage reply = 
-      new TXLockUpdateParticipantsReplyMessage();
+    TXLockUpdateParticipantsReplyMessage reply = new TXLockUpdateParticipantsReplyMessage();
-   * Update the Grantor with a new set of Participants.  This method is meant to be used
-   * in a local context (does <b>NOT</b> involve any messaging)
+   * Update the Grantor with a new set of Participants. This method is meant to be used in a local
+   * context (does <b>NOT</b> involve any messaging)
-  public static void updateParticipants(DLockService svc,
-                                        TXLockId txLockId, 
-                                        Set updatedParticipants) {
+  public static void updateParticipants(DLockService svc, TXLockId txLockId,
+      Set updatedParticipants) {
-        } 
-        catch (LockGrantorDestroyedException ignoreit) {
+        } catch (LockGrantorDestroyedException ignoreit) {
-    }
-    catch (InterruptedException e) {
+    } catch (InterruptedException e) {
-  
+
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  
+
-    return "TXLockUpdateParticipantsMessage for " 
-      + "service=" + this.serviceName
-      + "; updatedParticipants=" + this.updatedParticipants
-      + "; txLockId=" + this.txLockId;
+    return "TXLockUpdateParticipantsMessage for " + "service=" + this.serviceName
+        + "; updatedParticipants=" + this.updatedParticipants + "; txLockId=" + this.txLockId;
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
+
-      return "TXLockUpdateParticipantsReplyMessage processorId=" + super.processorId 
-        + "; sender=" + this.getSender();
+      return "TXLockUpdateParticipantsReplyMessage processorId=" + super.processorId + "; sender="
+          + this.getSender();

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66