GEODE-3213: Refactor ProtoBuf handler flow. This now closes #646

Signed-off-by: Alexander Murmann <amurmann@pivotal.io>

+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
-import org.apache.geode.protocol.protobuf.ClientProtocol;
+import org.apache.geode.protocol.protobuf.Failure;
+import org.apache.geode.protocol.protobuf.Result;
+import org.apache.geode.protocol.protobuf.Success;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-
-import java.util.HashMap;
-import java.util.Map;
-    implements OperationHandler<ClientProtocol.Request, ClientProtocol.Response> {
+    implements OperationHandler<RegionAPI.PutAllRequest, RegionAPI.PutAllResponse> {
-  private RegionAPI.PutAllRequest putAllRequest = null;
-  private Region region = null;
-  private Map<Object, Object> entries = null;
-
-  public ClientProtocol.Response process(SerializationService serializationService,
-      ClientProtocol.Request request, Cache cache) {
-    ClientProtocol.Response errorResponse = validatePutAllRequest(request);
-    if (errorResponse == null) {
-      errorResponse = determinePutAllRegion(cache);
-    }
-    if (errorResponse == null) {
-      errorResponse = extractPutAllEntries(serializationService);
-    }
-    if (errorResponse == null) {
-      try {
-        region.putAll(entries);
-      } catch (Exception ex) {
-        return ProtobufResponseUtilities.createAndLogErrorResponse(ex.getMessage(), logger, ex);
-      }
-
-      return ProtobufResponseUtilities.createPutAllResponse();
-    } else {
-      return errorResponse;
-    }
-  }
-
-  private ClientProtocol.Response validatePutAllRequest(ClientProtocol.Request request) {
-    if (request.getRequestAPICase() != ClientProtocol.Request.RequestAPICase.PUTALLREQUEST) {
-      return ProtobufResponseUtilities
-          .createAndLogErrorResponse("Improperly formatted put request message.", logger, null);
-    }
-
-    putAllRequest = request.getPutAllRequest();
-    return null;
-  }
-
-  private ClientProtocol.Response determinePutAllRegion(Cache cache) {
-    String regionName = putAllRequest.getRegionName();
-    region = cache.getRegion(regionName);
+  public Result<RegionAPI.PutAllResponse> process(SerializationService serializationService,
+      RegionAPI.PutAllRequest request, Cache cache) {
+    String regionName = request.getRegionName();
+    Region region = cache.getRegion(regionName);
-      return ProtobufResponseUtilities.createAndLogErrorResponse(
-          "Region passed by client did not exist: " + regionName, logger, null);
-    } else {
-      return null;
+      return Failure.of(ProtobufResponseUtilities.createAndLogErrorResponse(
+          "Region passed by client did not exist: " + regionName, logger, null));
+
+    Map entries = extractPutAllEntries(serializationService, request);
+    try {
+      region.putAll(entries);
+    } catch (Exception ex) {
+      return Failure
+          .of(ProtobufResponseUtilities.createAndLogErrorResponse(ex.getMessage(), logger, ex));
+    }
+
+    return Success.of(RegionAPI.PutAllResponse.newBuilder().build());
-  private ClientProtocol.Response extractPutAllEntries(SerializationService serializationService) {
-    entries = new HashMap();
+  private Map extractPutAllEntries(SerializationService serializationService,
+      RegionAPI.PutAllRequest putAllRequest) {
+    Map entries = new HashMap();
-      return ProtobufResponseUtilities.createAndLogErrorResponse("Encoding not supported ", logger,
-          ex);
+      throw new RuntimeException("This exception still needs to be handled in an ErrorMessage");
-      return ProtobufResponseUtilities
-          .createAndLogErrorResponse("Codec error in protobuf deserialization ", logger, ex);
+      throw new RuntimeException("This exception still needs to be handled in an ErrorMessage");
-    return null;
+    return entries;
-

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS40 UPD40 INS40 UPD74 INS31 MOV43 UPD43 MOV78 INS83 INS74 MOV42 MOV44 MOV44 MOV44 INS8 INS43 INS42 INS44 UPD40 UPD43 MOV43 INS43 UPD43 MOV60 INS60 MOV25 INS60 MOV54 INS41 INS42 INS43 INS42 INS60 UPD42 UPD40 MOV40 UPD40 MOV43 MOV43 INS59 MOV43 INS59 INS32 UPD40 MOV40 INS43 INS59 INS42 UPD42 INS42 MOV32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 MOV14 UPD42 UPD42 INS32 MOV42 MOV42 INS42 INS32 INS42 INS53 INS53 INS42 INS42 MOV32 INS32 INS40 INS42 INS14 INS14 INS42 INS42 MOV32 INS43 INS45 INS43 INS45 INS42 INS42 DEL40 DEL43 DEL40 DEL43 DEL33 DEL41 DEL8 DEL83 DEL42 DEL33 DEL59 DEL23 DEL83 DEL42 DEL33 DEL59 DEL23 DEL83 DEL42 DEL43 DEL74 DEL42 DEL33 DEL59 DEL23 DEL83 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL40 DEL43 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL40 DEL27 DEL45 DEL42 DEL33 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL33 DEL41 DEL8 DEL31 DEL83 DEL40 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL7 DEL21 DEL8 DEL31 DEL43 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL41 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL41 DEL33