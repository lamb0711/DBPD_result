GEODE-4928 DistributedLockService doesn't work as expected while the dlock grantor is initialized

Wait for background transaction cleanup when there is a failure.

+  private final Object stateLock = new Object();
+  private boolean processingDepartures;
+
+  @Override
+  public void waitForInProcessDepartures() throws InterruptedException {
+    synchronized (stateLock) {
+      while (processingDepartures) {
+        stateLock.wait();
+      }
+    }
+  }
+
-
-    try {
-      dm.getWaitingThreadPool().execute(new Runnable() {
-        public void run() {
-          for (int i = 0; i < batches.length; i++) {
-            TXLockBatch batch = (TXLockBatch) batches[i];
-            // send TXOriginatorDepartureMessage
-            Set participants = batch.getParticipants();
-            TXOriginatorRecoveryProcessor.sendMessage(participants, owner, batch.getTXLockId(),
-                grantor, dm);
-          }
+
+    synchronized (stateLock) {
+      processingDepartures = true;
+    }
+    Runnable recoverTx = () -> {
+      try {
+        for (int i = 0; i < batches.length; i++) {
+          TXLockBatch batch = (TXLockBatch) batches[i];
+          // send TXOriginatorDepartureMessage
+          Set participants = batch.getParticipants();
+          TXOriginatorRecoveryProcessor.sendMessage(participants, owner, batch.getTXLockId(),
+              grantor, dm);
-      });
-    } catch (RejectedExecutionException e) {
-      if (logger.isDebugEnabled()) {
-        logger.debug("Rejected sending recovery messages for departure of tx originator {}", owner,
-            e);
+      } finally {
+        clearProcessingDepartures();
+    };
+
+    try {
+      dm.getWaitingThreadPool().execute(recoverTx);
+    } catch (RejectedExecutionException e) {
+      // this shouldn't happen unless we're shutting down or someone has set a size constraint
+      // on the waiting-pool using a system property
+      if (!dm.getCancelCriterion().isCancelInProgress()) {
+        logger.warn("Unable to schedule background cleanup of transactions for departed member {}."
+            + "  Performing in-line cleanup of the transactions.");
+        recoverTx.run();
+      }
+    }
+  }
+
+  private void clearProcessingDepartures() {
+    synchronized (stateLock) {
+      processingDepartures = false;
+      stateLock.notifyAll();

INS23 INS23 INS31 MOV31 INS31 INS83 INS83 INS43 INS59 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS43 INS8 UPD83 INS42 MOV44 MOV44 MOV44 MOV44 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS14 INS42 INS42 UPD42 MOV42 INS51 INS51 INS60 INS54 INS51 INS43 INS42 INS8 INS42 INS8 MOV43 INS59 INS8 INS12 INS42 INS8 INS42 INS61 INS21 INS42 INS86 INS21 MOV44 INS8 INS21 MOV21 INS42 INS8 INS7 INS8 INS32 INS25 INS7 INS21 INS42 INS9 INS54 MOV32 INS42 INS42 INS42 INS38 INS8 INS42 INS9 UPD42 UPD42 INS32 MOV8 INS8 INS32 INS21 INS21 UPD42 MOV42 UPD42 MOV42 INS21 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS45 INS45 DEL42 DEL45 DEL42 DEL42 DEL83 DEL39 DEL42 DEL42 DEL1 DEL14 DEL32 DEL21 DEL8 DEL32 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL31