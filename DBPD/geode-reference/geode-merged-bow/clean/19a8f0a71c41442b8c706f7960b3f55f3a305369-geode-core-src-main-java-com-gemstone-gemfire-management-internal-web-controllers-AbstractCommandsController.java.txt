GEODE-17: WIP adding JMX security

+import static com.gemstone.gemfire.management.internal.security.ResourceConstants.ACCESS_DENIED_MESSAGE;
+
+import java.security.Principal;
+import java.util.Properties;
+import javax.management.remote.JMXPrincipal;
+import javax.security.auth.Subject;
+import com.gemstone.gemfire.GemFireConfigException;
+import com.gemstone.gemfire.cache.CacheFactory;
+import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.management.ManagementService;
+import com.gemstone.gemfire.management.internal.SystemManagementService;
+import com.gemstone.gemfire.management.internal.security.CLIOperationContext;
+import com.gemstone.gemfire.management.internal.security.MBeanServerWrapper;
+import com.gemstone.gemfire.management.internal.security.ResourceConstants;
+import com.gemstone.gemfire.management.internal.security.ResourceOperationContext;
+import com.gemstone.gemfire.security.AccessControl;
+import com.gemstone.gemfire.security.Authenticator;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+
+  private Class accessControlKlass;
+
+  private GemFireCacheImpl cache;
+
+  // Convert a predefined exception to an HTTP Status code
+  @ResponseStatus(value=HttpStatus.UNAUTHORIZED, reason="Not authenticated")  // 401
+  @ExceptionHandler(com.gemstone.gemfire.security.AuthenticationFailedException.class)
+  public void authenticate() {
+
+  }
+
+  // Convert a predefined exception to an HTTP Status code
+  @ResponseStatus(value=HttpStatus.FORBIDDEN, reason="Access Denied")  // 403
+  @ExceptionHandler(java.lang.SecurityException.class)
+  public void authorize() {
+
+  }
+
+
-      //managingMemberMXBeanProxy = createMemberMXBeanForManagerUsingAdapter(platformMBeanServer,
-      //  distributedSystemMXBean.getMemberObjectName());
+      /*managingMemberMXBeanProxy = createMemberMXBeanForManagerUsingAdapter(platformMBeanServer,
+      distributedSystemMXBean.getMemberObjectName());*/
+  protected synchronized ObjectName getMemberObjectName() {
+    final MBeanServer platformMBeanServer = getMBeanServer();
+
+    final DistributedSystemMXBean distributedSystemMXBean = JMX.newMXBeanProxy(platformMBeanServer,
+        MBeanJMXAdapter.getDistributedSystemName(), DistributedSystemMXBean.class);
+
+    return distributedSystemMXBean.getMemberObjectName();
+  }
+
+  protected String processCommandWithCredentials(final String command, Properties credentials) {
+    if (credentials != null) {
+      EnvironmentVariablesHandlerInterceptor.CREDENTIALS.set(credentials);
+    }
+    return processCommand(command, getEnvironment(), null);
+  }
+
+  protected String processCommandWithCredentials(final String command, final byte[][] fileData, Properties credentials) {
+    if (credentials != null) {
+      EnvironmentVariablesHandlerInterceptor.CREDENTIALS.set(credentials);
+    }
+    return processCommand(command, getEnvironment(), fileData);
+  }
+
-    logger.info(LogMarker.CONFIG, "Processing Command ({}) with Environment ({}) having File Data ({})...",
-        command, environment, (fileData != null));
+    logger.info(LogMarker.CONFIG, "Processing Command ({}) with Environment ({}) having File Data ({})...", command,
+        environment, (fileData != null));
-    return getManagingMemberMXBean().processCommand(command, environment, ArrayUtils.toByteArray(fileData));
+    ResourceOperationContext ctx = authorize(command);
+
+    String result =  getManagingMemberMXBean().processCommand(command, environment, ArrayUtils.toByteArray(fileData));
+
+    ctx = postAuthorize(command, ctx, result);
+
+    return result;
+  protected ResourceOperationContext authorize(final String command) {
+
+
+    SystemManagementService service = (SystemManagementService) ManagementService
+        .getExistingManagementService(CacheFactory.getAnyInstance());
+    Properties credentials = EnvironmentVariablesHandlerInterceptor.CREDENTIALS.get();
+    CLIOperationContext context = new CLIOperationContext(command);
+    service.getAuthManager().authorize(credentials, context);
+    return context;
+  }
+
+  protected ResourceOperationContext postAuthorize(final String command, ResourceOperationContext context, Object result) {
+
+    context.setPostOperationResult(result);
+    SystemManagementService service = (SystemManagementService) ManagementService
+        .getExistingManagementService(CacheFactory.getAnyInstance());
+    Properties credentials = EnvironmentVariablesHandlerInterceptor.CREDENTIALS.get();
+
+    service.getAuthManager().postAuthorize(credentials, context);
+    return context;
+  }
+
+
+
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS77 INS79 INS83 INS39 INS42 INS8 INS77 INS79 INS83 INS39 INS42 INS8 INS83 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS80 INS80 INS42 INS57 INS42 INS80 INS80 INS42 INS57 INS42 INS60 INS60 INS41 INS42 INS83 INS43 INS42 INS43 INS42 INS25 INS41 INS42 INS83 INS43 INS42 INS83 INS5 INS42 INS43 INS42 INS25 INS41 INS60 INS60 INS21 INS42 INS83 INS43 INS42 INS60 INS60 INS60 INS21 INS41 INS42 INS83 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS60 INS60 INS21 INS41 INS42 INS40 INS42 INS45 INS43 INS42 INS40 INS42 INS45 INS43 INS83 INS43 INS59 INS83 INS43 INS59 INS32 INS42 INS42 INS27 INS8 INS32 INS42 INS39 INS85 INS85 INS42 INS27 INS8 INS32 INS43 INS59 INS43 INS59 INS7 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS32 INS42 INS40 INS40 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS32 INS33 INS42 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS57 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS40 INS42 INS43 INS42 INS42 INS42 INS43 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42