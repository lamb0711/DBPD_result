Merge branch 'release/1.3.0'

-// TODO:uncomment: import static org.apache.geode.test.dunit.DistributedTestRule.*;
+import static java.util.concurrent.TimeUnit.MINUTES;
+import com.google.common.base.Stopwatch;
+
+import org.apache.geode.admin.internal.AdminDistributedSystemImpl;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
- * Disconnects all remote DUnit JVMs including the Locator JVM.
+ * JUnit Rule that disconnects DistributedSystem in all VMs.
+ *
+ * <p>
+ * DistributedDisconnectRule can be used in DistributedTests to disconnect all VMs before or after
+ * each test:
+ *
+ * <pre>
+ * {@literal @}Rule
+ * public DistributedDisconnectRule distributedDisconnectRule = new DistributedDisconnectRule();
+ *
+ * {@literal @}Test
+ * public void createCacheInEveryDUnitVM() throws Exception {
+ *   cache = (InternalCache) new CacheFactory().create();
+ *   assertThat(cache.isClosed()).isFalse();
+ *   assertThat(cache.getInternalDistributedSystem().isConnected()).isTrue();
+ *
+ *   for (VM vm: Host.getHost(0).getAllVMs()) {
+ *     vm.invoke(() -> {
+ *       cache = (InternalCache) new CacheFactory().create();
+ *       assertThat(cache.isClosed()).isFalse();
+ *       assertThat(cache.getInternalDistributedSystem().isConnected()).isTrue();
+ *     });
+ *   }
+ * }
+ * </pre>
-      invoker().invokeInEveryVM(serializableRunnable());
+      invoker().invokeInEveryVMAndController(serializableRunnable());
-      invoker().invokeInEveryVM(serializableRunnable());
+      invoker().invokeInEveryVMAndController(serializableRunnable());
-        // TODO:uncomment: disconnectFromDS();
+        disconnect();
+  public static void disconnect() {
+    Stopwatch stopwatch = Stopwatch.createStarted();
+    InternalDistributedSystem system = InternalDistributedSystem.getConnectedInstance();
+
+    while (system != null && stopwatch.elapsed(MINUTES) < 10) {
+      system = InternalDistributedSystem.getConnectedInstance();
+      try {
+        system.disconnect();
+      } catch (Exception ignore) {
+        // ignored
+      }
+    }
+
+    AdminDistributedSystemImpl adminSystem = AdminDistributedSystemImpl.getConnectedInstance();
+    if (adminSystem != null) {
+      adminSystem.disconnect();
+    }
+  }
+
-    public Builder() {}
+    public Builder() {
+      // nothing
+    }

INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS31 MOV78 UPD42 MOV43 MOV78 UPD42 INS83 INS83 INS39 INS42 INS8 UPD66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS60 INS60 INS61 INS60 INS25 INS66 INS66 MOV22 MOV22 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS21 INS54 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS34 INS7 INS8 INS12 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS42 INS42 INS21 INS42 INS42 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42