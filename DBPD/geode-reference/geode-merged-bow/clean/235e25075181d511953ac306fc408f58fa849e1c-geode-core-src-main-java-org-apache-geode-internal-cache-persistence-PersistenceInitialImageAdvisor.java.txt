GEODE-7577: Log when waiting for missing persistent members (#4476)

* Separate StartupStatusListenerRegistry from StartupStatus to allow
  non-static injection of StartupStatus into classes that use it
* Add CollectionTransformer interface to TransformUtils to facilitate
  unit testing of classes depending on it
* Add new MembershipChangeListenerFactory with validation to ensure that
  warningDelay and pollDuration have correct values in relation to each
  other (to prevent recurrences of GEODE-7577)
* Fixed the formatting of missing persistent members messages in
  PersistenceAdvisorImpl
* Fixed warnings and minor issues primarily for readability and
  testability in every class touched
* Added shouldSyncForCrashedMember to InternalRegion and pulled the
  javadocs up to the interface

GEODE-4267: Fix PersistentRecoveryOrderOldConfigDUnitTest
* Replace thread sleeps with CountDownLatch
* Add a couple await calls
* Actual fix involved preventing late-running asynchronous actions that
  resulted in logging DistributedSystemDisconnectedException AFTER the
  test already removed the IgnoredException
* Major cleanup of PersistentRecoveryOrderDUnitTest including replace
  usage of Admin API with usage of DistributedSystemMXBean
* Replace Region close with Cache close in test that needs to list and
  revoke missing disk-stores
+import static java.time.Duration.ofSeconds;
+import static org.apache.geode.internal.cache.persistence.MembershipChangeListenerFactory.cancelCondition;
+
+import java.util.function.Function;
+import org.apache.geode.CancelCriterion;
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.distributed.internal.DistributionConfig;
-public class PersistenceInitialImageAdvisor {
+class PersistenceInitialImageAdvisor {
+  private final Function<InternalPersistenceAdvisor, MembershipChangeListener> membershipChangeListenerProvider;
-  public PersistenceInitialImageAdvisor(InternalPersistenceAdvisor persistenceAdvisor,
+  PersistenceInitialImageAdvisor(InternalPersistenceAdvisor persistenceAdvisor,
+    this(persistenceAdvisor, shortDiskStoreID, regionPath, cacheDistributionAdvisor,
+        hasDiskImageToRecoverFrom,
+        internalPersistenceAdvisor -> {
+          CacheDistributionAdvisor advisor =
+              internalPersistenceAdvisor.getCacheDistributionAdvisor();
+          DistributionConfig config = advisor.getDistributionManager().getConfig();
+          CancelCriterion stopper = advisor.getAdvisee().getCancelCriterion();
+
+          return new MembershipChangeListenerFactory()
+              .setWarningDelay(ofSeconds(config.getAckWaitThreshold() / 2))
+              .setPollDuration(ofSeconds(config.getAckWaitThreshold()))
+              .setCancelCondition(cancelCondition(internalPersistenceAdvisor, stopper))
+              .setWarning(internalPersistenceAdvisor::logWaitingForMembers)
+              .create();
+        });
+  }
+
+  @VisibleForTesting
+  PersistenceInitialImageAdvisor(InternalPersistenceAdvisor persistenceAdvisor,
+      String shortDiskStoreID, String regionPath, CacheDistributionAdvisor cacheDistributionAdvisor,
+      boolean hasDiskImageToRecoverFrom,
+      Function<InternalPersistenceAdvisor, MembershipChangeListener> membershipChangeListenerProvider) {
+    this.membershipChangeListenerProvider = membershipChangeListenerProvider;
-  public InitialImageAdvice getAdvice(InitialImageAdvice previousAdvice) {
+  @VisibleForTesting
+  InitialImageAdvice getAdvice(InitialImageAdvice previousAdvice) {
-    MembershipChangeListener listener = new MembershipChangeListener(persistenceAdvisor);
+    MembershipChangeListener listener = membershipChangeListenerProvider.apply(persistenceAdvisor);
-          } else if (hasNonPersistentMember(advice)) {
+          }
+          if (hasNonPersistentMember(advice)) {
-          // Fix for 51698 - If there are online members that we previously failed to get a GII
-          // from, retry those members rather than wait for new persistent members to recover.
+          // If there are online members that we previously failed to get a GII from, retry those
+          // members rather than wait for new persistent members to recover.

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS42 INS23 INS31 INS83 INS83 INS74 INS59 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS78 INS44 INS78 INS43 INS43 MOV43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS17 INS42 INS74 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS43 INS43 INS43 INS7 MOV43 INS59 INS8 INS42 INS42 INS42 INS22 INS42 INS32 INS42 INS60 INS60 INS60 INS41 INS52 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS90 MOV25 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS32 INS43 INS42 INS27 INS42 INS42 INS42 INS32 INS34 INS42 INS42 DEL83 DEL42 DEL83 DEL83 DEL42 DEL14