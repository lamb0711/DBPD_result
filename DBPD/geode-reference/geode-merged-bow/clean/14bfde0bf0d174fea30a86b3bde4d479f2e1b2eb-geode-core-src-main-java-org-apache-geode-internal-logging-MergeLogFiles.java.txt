Merge branch 'release/1.8.0'

+import static org.apache.commons.lang.SystemUtils.LINE_SEPARATOR;
+
+import java.util.HashMap;
+import java.util.Map;
-import org.apache.geode.internal.i18n.LocalizedStrings;
- * {@link org.apache.geode.i18n.LogWriterI18n} together, sorting them by their timestamp. Note that
+ * {@link org.apache.geode.LogWriter} together, sorting them by their timestamp. Note that
-   * @param logFileNames The names of the log files to be printed in the merged log
-  public static boolean mergeLogFiles(InputStream[] logFiles, String[] logFileNames,
-      PrintWriter mergedFile) {
-    return mergeLogFiles(logFiles, logFileNames, mergedFile, false, false, false, new LinkedList());
+  public static boolean mergeLogFiles(Map<String, InputStream> logFiles, PrintWriter mergedFile) {
+    return mergeLogFiles(logFiles, mergedFile, false, false, false, new LinkedList());
-   * @param logFileNames The names of the log files to be printed in the merged log
-  public static boolean mergeLogFiles(InputStream[] logFiles, String[] logFileNames,
+  public static boolean mergeLogFiles(Map<String, InputStream> logFiles,
-    return Sorter.mergeLogFiles(logFiles, logFileNames, mergedFile, tabOut, suppressBlanks,
+    return Sorter.mergeLogFiles(logFiles, mergedFile, tabOut, suppressBlanks,
-    err.println("\n** " + s + "\n");
-    err.println(LocalizedStrings.MergeLogFiles_USAGE.toLocalizedString()
+    err.println(LINE_SEPARATOR + "** " + s + LINE_SEPARATOR);
+    err.println("Usage"
-        + LocalizedStrings.MergeLogFiles_NUMBER_OF_PARENT_DIRS_TO_PRINT.toLocalizedString());
+        + "Number of parent dirs to print");
-        + LocalizedStrings.MergeLogFiles_FILE_IN_WHICH_TO_PUT_MERGED_LOGS.toLocalizedString());
+        + "File in which to put merged logs");
-        + LocalizedStrings.MergeLogFiles_SEARCH_FOR_PIDS_IN_FILE_NAMES_AND_USE_THEM_TO_IDENTIFY_FILES
-            .toLocalizedString());
+        + "Search for PIDs in file names and use them to identify files");
-        "-align           " + LocalizedStrings.MergeLogFiles_ALIGN_NONTIMESTAMPED_LINES_WITH_OTHERS
-            .toLocalizedString());
+        "-align           " + "Align non-timestamped lines with others");
-        + LocalizedStrings.MergeLogFiles_SUPPRESS_OUTPUT_OF_BLANK_LINES.toLocalizedString());
+        + "Suppress output of blank lines");
-        + LocalizedStrings.MergeLogFiles_USE_MULTITHREADING_TO_TAKE_ADVANTAGE_OF_MULTIPLE_CPUS
-            .toLocalizedString());
+        + "Use multithreading to take advantage of multiple CPUs");
-        LocalizedStrings.MergeLogFiles_MERGES_MULTIPLE_GEMFIRE_LOG_FILES_AND_SORTS_THEM_BY_TIMESTAMP
-            .toLocalizedString());
+        "Merges multiple GemFire log files and sorts them by timestamp.");
-        LocalizedStrings.MergeLogFiles_THE_MERGED_LOG_FILE_IS_WRITTEN_TO_SYSTEM_OUT_OR_A_FILE
-            .toLocalizedString());
+        "The merged log file is written to System.out (or a file).");
-        LocalizedStrings.MergeLogFiles_IF_A_DIRECTORY_IS_SPECIFIED_ALL_LOG_FILES_IN_THAT_DIRECTORY_ARE_MERGED
-            .toLocalizedString());
+        "If a directory is specified, all .log files in that directory are merged.");
-          usage(LocalizedStrings.MergeLogFiles_MISSING_NUMBER_OF_PARENT_DIRECTORIES
-              .toLocalizedString());
+          usage("Missing number of parent directories");
-          usage(LocalizedStrings.MergeLogFiles_NOT_A_NUMBER_0.toLocalizedString(args[i]));
+          usage(String.format("Not a number: %s", args[i]));
-          usage(LocalizedStrings.MergeLogFiles_MISSING_MERGE_FILE_NAME.toLocalizedString());
+          usage("Missing merge file name");
-          usage(LocalizedStrings.MergeLogFiles_FILE_0_DOES_NOT_EXIST.toLocalizedString(file));
+          usage(String.format("File %s does not exist", file));
-      usage(LocalizedStrings.MergeLogFiles_MISSING_FILENAME.toLocalizedString());
+      usage("Missing filename");
-        usage(LocalizedStrings.MergeLogFiles_FILE_0_DOES_NOT_EXIST.toLocalizedString(n));
+        usage(String.format("File %s does not exist", n));
-      usage(LocalizedStrings.MergeLogFiles_FILE_0_IS_NEITHER_A_FILE_NOR_A_DIRECTORY
-          .toLocalizedString(n));
+      usage(String.format("File '%s' is neither a file nor a directory.",
+          n));
-    InputStream[] logFiles = new InputStream[files.size()];
-    String[] logFileNames = new String[files.size()];
+    Map<String, InputStream> logFiles = new HashMap<>();
-      logFiles[i] = new FileInputStream(file);
+      String logFileName;
-          logFileNames[i] = (String) nickNames.get(i) + ".gz";
+          logFileName = nickNames.get(i) + ".gz";
-          logFileNames[i] = (String) nickNames.get(i);
+          logFileName = (String) nickNames.get(i);
-        logFileNames[i] = sb.toString();
+        logFileName = sb.toString();
+      logFiles.put(logFileName, new FileInputStream(file));
-    mergeLogFiles(logFiles, logFileNames, mergedFile, tabOut, suppressBlanks, multithreaded,
+    mergeLogFiles(logFiles, mergedFile, tabOut, suppressBlanks, multithreaded,
-     * Invoking this constructor will start this reader thread.
+     * Invoking this constructor will start this reader thread. The InputStream is closed at the
+     * end of processing.
-      super(group, LocalizedStrings.MergeLogFiles_LOG_FILE_READER.toLocalizedString());
+      super(group, "Log File Reader");
+      } finally {
+        try {
+          logFile.close();
+        } catch (IOException e) {
+          e.printStackTrace(System.err);
+        }
-      System.err.println(LocalizedStrings.MergeLogFiles_EXCEPTION_IN_0.toLocalizedString(t));
+      System.err.println(String.format("Exception in %s", t));
-     * @param logFileNames The names of the log files to be printed in the merged log
-    public static boolean mergeLogFiles(InputStream[] logFiles, String[] logFileNames,
+    public static boolean mergeLogFiles(Map<String, InputStream> logFiles,
-      if (logFiles.length != logFileNames.length) {
-        throw new IllegalArgumentException(
-            LocalizedStrings.MergeLogFiles_NUMBER_OF_LOG_FILES_0_IS_NOT_THE_SAME_AS_THE_NUMBER_OF_LOG_FILE_NAMES_1
-                .toLocalizedString(new Object[] {Integer.valueOf(logFiles.length),
-                    Integer.valueOf(logFileNames.length)}));
-      }
-
-          new ReaderGroup(LocalizedStrings.MergeLogFiles_READER_THREADS.toLocalizedString());
-      Collection readers = new ArrayList(logFiles.length);
-      for (int i = 0; i < logFiles.length; i++) {
+          new ReaderGroup("Reader threads");
+      Collection readers = new ArrayList(logFiles.size());
+      for (Map.Entry<String, InputStream> e : logFiles.entrySet()) {
-          readers.add(new ThreadedReader(logFiles[i], logFileNames[i], group, tabOut,
+          readers.add(new ThreadedReader(e.getValue(), e.getKey(), group, tabOut,
-          readers.add(new NonThreadedReader(logFiles[i], logFileNames[i], group, tabOut,
+          readers.add(new NonThreadedReader(e.getValue(), e.getKey(), group, tabOut,
-
-

MOV26 INS26 INS26 UPD40 INS40 INS40 INS74 INS74 UPD40 INS43 MOV43 MOV43 INS43 MOV43 MOV43 INS74 MOV21 INS74 INS70 INS42 INS42 INS45 INS45 INS45 INS43 MOV43 MOV43 INS14 INS60 UPD66 INS66 INS45 INS8 INS43 INS43 MOV43 MOV43 INS44 INS32 INS8 INS42 UPD45 INS42 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS42 INS74 MOV43 INS59 INS32 INS54 INS42 INS42 INS74 INS42 INS42 INS42 MOV25 INS45 INS43 INS42 INS42 INS42 INS42 MOV14 INS8 INS12 UPD42 INS42 INS45 MOV43 INS45 INS32 INS43 MOV43 MOV43 UPD42 INS42 INS45 INS42 INS21 INS44 INS8 INS42 INS42 INS40 INS42 INS32 INS43 INS42 INS21 UPD42 INS42 INS45 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 MOV42 MOV42 MOV42 MOV27 INS45 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 DEL42 DEL66 DEL65 DEL85 DEL5 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL66 DEL65 DEL85 DEL5 DEL85 DEL5 DEL42 DEL44 DEL42 DEL45 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL85 DEL5 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL85 DEL5 DEL42 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL43 DEL32 DEL11 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL42 DEL40 DEL42 DEL32 DEL40 DEL42 DEL66 DEL65 DEL85 DEL5 DEL85 DEL5 DEL42 DEL44 DEL40 DEL40 DEL27 DEL42 DEL43 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL4 DEL3 DEL32 DEL14 DEL53 DEL8 DEL25 DEL40 DEL42 DEL32 DEL40 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24