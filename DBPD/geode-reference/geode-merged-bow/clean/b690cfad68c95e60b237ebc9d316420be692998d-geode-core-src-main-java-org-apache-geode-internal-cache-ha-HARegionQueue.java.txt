GEODE-4015: Rewrite queue conflation tests (#1312)

  * Refactored HARegionQueue to allow unit testing
-  private final StoppableReentrantReadWriteLock rwLock;
+  private StoppableReentrantReadWriteLock rwLock;
-  private final StoppableReentrantReadWriteLock.StoppableReadLock readLock;
+  private StoppableReentrantReadWriteLock.StoppableReadLock readLock;
-  private final StoppableWriteLock writeLock;
+  private StoppableWriteLock writeLock;
-  private final String regionName;
+  private String regionName;
-  private final ClientProxyMembershipID clientProxyID;
+  private ClientProxyMembershipID clientProxyID;
-  public final HARegionQueueStats stats;
+  public HARegionQueueStats stats;
-  protected final MapWrapper threadIdToSeqId;
+  protected MapWrapper threadIdToSeqId;
-  private final StoppableReentrantReadWriteLock giiLock;
+  private StoppableReentrantReadWriteLock giiLock;
-  private final CancelCriterion stopper;
+  private CancelCriterion stopper;
-  /**
-   * @param isPrimary whether this is the primary queue for a client
-   */
-  protected HARegionQueue(String regionName, InternalCache cache,
-      HARegionQueueAttributes haAttributes, Map haContainer, ClientProxyMembershipID clientProxyId,
-      final byte clientConflation, boolean isPrimary)
+  HARegionQueue(String regionName, HARegion haRegion, InternalCache cache, Map haContainer,
+      ClientProxyMembershipID clientProxyId, final byte clientConflation, boolean isPrimary,
+      HARegionQueueStats stats, StoppableReentrantReadWriteLock giiLock,
+      StoppableReentrantReadWriteLock rwLock, CancelCriterion cancelCriterion,
+      boolean puttingGIIDataInQueue)
+    initializeHARegionQueue(regionName, haRegion, haContainer, clientProxyId, clientConflation,
+        isPrimary, stats, giiLock, rwLock, cancelCriterion, puttingGIIDataInQueue);
+  }
-    String processedRegionName = createRegionName(regionName);
+  private void initializeHARegionQueue(String regionName, HARegion haRegion, Map haContainer,
+      ClientProxyMembershipID clientProxyId, byte clientConflation, boolean isPrimary,
+      HARegionQueueStats stats, StoppableReentrantReadWriteLock giiLock,
+      StoppableReentrantReadWriteLock rwLock, CancelCriterion cancelCriterion,
+      boolean putGIIDataInQueue) throws InterruptedException {
+    this.regionName = regionName;
+    this.region = haRegion;
-    this.regionName = processedRegionName;
-    StatisticsFactory factory = cache.getDistributedSystem();
-    this.stats = new HARegionQueueStats(factory, processedRegionName);
+    this.stats = stats;
-    this.giiLock = new StoppableReentrantReadWriteLock(cache.getCancelCriterion());
+    this.giiLock = giiLock;
-    createHARegion(processedRegionName, cache);
-
-    this.stopper = this.region.getCancelCriterion();
-    this.rwLock = new StoppableReentrantReadWriteLock(this.stopper);
+    this.stopper = cancelCriterion;
+    this.rwLock = rwLock;
-    putGIIDataInRegion();
+    // false specifically set in tests only
+    if (putGIIDataInQueue) {
+      putGIIDataInRegion();
+    }
+  /**
+   * @param isPrimary whether this is the primary queue for a client
+   */
+  protected HARegionQueue(String regionName, InternalCache cache, Map haContainer,
+      ClientProxyMembershipID clientProxyId, final byte clientConflation, boolean isPrimary)
+      throws IOException, ClassNotFoundException, CacheException, InterruptedException {
+
+    String processedRegionName = createRegionName(regionName);
+
+    // Initialize the statistics
+    StatisticsFactory factory = cache.getDistributedSystem();
+    createHARegion(processedRegionName, cache);
+
+    initializeHARegionQueue(processedRegionName, this.region, haContainer, clientProxyId,
+        clientConflation, isPrimary, new HARegionQueueStats(factory, processedRegionName),
+        new StoppableReentrantReadWriteLock(cache.getCancelCriterion()),
+        new StoppableReentrantReadWriteLock(region.getCancelCriterion()),
+        this.region.getCancelCriterion(), true);
+  }
+
-        hrq = new HARegionQueue(regionName, cache, hrqa, haContainer, clientProxyId,
-            clientConflation, isPrimary);
+        hrq = new HARegionQueue(regionName, cache, haContainer, clientProxyId, clientConflation,
+            isPrimary);
-      super(regionName, cache, hrqa, haContainer, clientProxyId, clientConflation, isPrimary);
+      super(regionName, cache, haContainer, clientProxyId, clientConflation, isPrimary);
-      super(regionName, cache, hrqa, haContainer, null, clientConflation, isPrimary);
+      super(regionName, cache, haContainer, null, clientConflation, isPrimary);

INS31 MOV44 INS31 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS43 INS43 INS8 UPD83 INS39 UPD42 INS44 INS44 INS44 INS44 INS44 INS44 MOV21 MOV29 INS83 INS42 INS44 MOV44 INS44 INS44 MOV44 INS44 MOV43 MOV43 MOV43 INS43 INS8 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS83 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS42 INS42 INS21 INS43 INS42 INS39 INS42 UPD43 UPD42 INS43 INS42 MOV43 INS42 INS43 INS42 INS39 INS42 INS21 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS42 MOV60 MOV60 MOV21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 INS42 INS42 INS7 INS42 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS22 INS42 INS42 INS42 INS42 INS42 MOV21 INS42 INS42 INS22 INS42 INS42 INS42 INS42 MOV14 MOV14 INS14 MOV32 INS9 INS52 INS42 INS52 INS42 INS43 INS32 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL52 DEL42 DEL22 DEL14 DEL42 DEL42 DEL42