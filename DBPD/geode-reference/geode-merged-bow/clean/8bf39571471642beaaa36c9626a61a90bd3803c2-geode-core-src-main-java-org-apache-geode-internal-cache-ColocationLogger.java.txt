Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides logging when regions are missing from a colocation hierarchy. This logger runs in
- * it's own thread and waits for child regions to be created before logging them as missing.
+ * Provides logging when regions are missing from a colocation hierarchy. This logger runs in it's
+ * own thread and waits for child regions to be created before logging them as missing.
-    loggerThread = new Thread(this,"ColocationLogger for " + region.getName());
+    loggerThread = new Thread(this, "ColocationLogger for " + region.getName());
-  public void run()
-  {
-    CancelCriterion stopper = region
-        .getGemFireCache().getDistributedSystem().getCancelCriterion();
+  public void run() {
+    CancelCriterion stopper = region.getGemFireCache().getDistributedSystem().getCancelCriterion();
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-   * Writes a log entry every SLEEP_PERIOD when there are missing colocated child regions
-   * for this region.
+   * Writes a log entry every SLEEP_PERIOD when there are missing colocated child regions for this
+   * region.
+   * 
-    synchronized(loggerLock) {
+    synchronized (loggerLock) {
-        // delay for first log message is half the time of the interval between subsequent log messages
+        // delay for first log message is half the time of the interval between subsequent log
+        // messages
-          //Terminate the logging thread, recoverycomplete is only true when there are no missing colocated regions
+          // Terminate the logging thread, recoverycomplete is only true when there are no missing
+          // colocated regions
-        if(missingChildren.isEmpty()) {
+        if (missingChildren.isEmpty()) {
-    for (String name:missingDescendants) {
+    for (String name : missingDescendants) {
-   * The list of missing child regions is normally updated lazily, only when this logger thread periodically wakes up to
-   * log warnings about the colocated regions that are still missing. This method performs an on-demand update of the
-   * list so if called between logging intervals the returned list is current.
+   * The list of missing child regions is normally updated lazily, only when this logger thread
+   * periodically wakes up to log warnings about the colocated regions that are still missing. This
+   * method performs an on-demand update of the list so if called between logging intervals the
+   * returned list is current.
-      Set<String> childRegions = (Set<String>) ColocationHelper.getAllColocationRegions(this.region).keySet();
+      Set<String> childRegions =
+          (Set<String>) ColocationHelper.getAllColocationRegions(this.region).keySet();
+   * 
-    logger.warn(LocalizedMessage.create(LocalizedStrings.ColocationLogger_PERSISTENT_DATA_RECOVERY_OF_REGION_PREVENTED_BY_OFFLINE_COLOCATED_CHILDREN,
-        new Object[]{region.getFullPath(), namesOfMissing}));
+    logger.warn(LocalizedMessage.create(
+        LocalizedStrings.ColocationLogger_PERSISTENT_DATA_RECOVERY_OF_REGION_PREVENTED_BY_OFFLINE_COLOCATED_CHILDREN,
+        new Object[] {region.getFullPath(), namesOfMissing}));
+
-}
+}

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66