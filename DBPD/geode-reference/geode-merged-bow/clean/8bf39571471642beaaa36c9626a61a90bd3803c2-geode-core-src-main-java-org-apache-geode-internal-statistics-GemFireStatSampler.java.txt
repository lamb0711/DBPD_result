Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  
-  private final Map<LocalStatListenerImpl, Boolean> localListeners = 
+
+  private final Map<LocalStatListenerImpl, Boolean> localListeners =
-  
-  private final Map<InternalDistributedMember, List<RemoteStatListenerImpl>> recipientToListeners = 
+
+  private final Map<InternalDistributedMember, List<RemoteStatListenerImpl>> recipientToListeners =
-  
+
-  
+
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-  
+
-   * Returns the <code>ProcessStats</code> for this Java VM.  Note
-   * that <code>null</code> will be returned if operating statistics
-   * are disabled.
+   * Returns the <code>ProcessStats</code> for this Java VM. Note that <code>null</code> will be
+   * returned if operating statistics are disabled.
-  
+
-    return "GemFire " + GemFireVersion.getGemFireVersion()
-           + " #" + GemFireVersion.getBuildId()
-           + " as of " + GemFireVersion.getSourceDate();
+    return "GemFire " + GemFireVersion.getGemFireVersion() + " #" + GemFireVersion.getBuildId()
+        + " as of " + GemFireVersion.getSourceDate();
-      RemoteStatListenerImpl sl = RemoteStatListenerImpl.create(result, recipient, 
-          resourceId, statName, this);
+      RemoteStatListenerImpl sl =
+          RemoteStatListenerImpl.create(result, recipient, resourceId, statName, this);
-  
+
-      RemoteStatListenerImpl sl = (RemoteStatListenerImpl)listeners.remove(listenerId);
+      RemoteStatListenerImpl sl = (RemoteStatListenerImpl) listeners.remove(listenerId);
-    Iterator<Map.Entry<LocalStatListenerImpl, Boolean>> it = 
-                  this.localListeners.entrySet().iterator();
+    Iterator<Map.Entry<LocalStatListenerImpl, Boolean>> it =
+        this.localListeners.entrySet().iterator();
-  
+
-  
+
-      return ((long)this.con.getConfig().getArchiveFileSizeLimit()) * (1024);
+      return ((long) this.con.getConfig().getArchiveFileSizeLimit()) * (1024);
-      return ((long)this.con.getConfig().getArchiveFileSizeLimit()) * (1024*1024);
+      return ((long) this.con.getConfig().getArchiveFileSizeLimit()) * (1024 * 1024);
-  
+
-      return ((long)this.con.getConfig().getArchiveDiskSpaceLimit()) * (1024);
+      return ((long) this.con.getConfig().getArchiveDiskSpaceLimit()) * (1024);
-      return ((long)this.con.getConfig().getArchiveDiskSpaceLimit()) * (1024*1024);
+      return ((long) this.con.getConfig().getArchiveDiskSpaceLimit()) * (1024 * 1024);
-  
+
-      Iterator<Map.Entry<InternalDistributedMember, List<RemoteStatListenerImpl>>> it1 = 
+      Iterator<Map.Entry<InternalDistributedMember, List<RemoteStatListenerImpl>>> it1 =
-        if (stopRequested()) return;
-        Map.Entry<InternalDistributedMember, List<RemoteStatListenerImpl>> me = 
-            it1.next();
+        if (stopRequested())
+          return;
+        Map.Entry<InternalDistributedMember, List<RemoteStatListenerImpl>> me = it1.next();
-          InternalDistributedMember recipient = (InternalDistributedMember)me.getKey();
-          StatListenerMessage msg =
-            StatListenerMessage.create(timeStamp, l.size());
+          InternalDistributedMember recipient = (InternalDistributedMember) me.getKey();
+          StatListenerMessage msg = StatListenerMessage.create(timeStamp, l.size());
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-        logger.info(LogMarker.STATISTICS, LocalizedMessage.create(LocalizedStrings.GemFireStatSampler_OS_STATISTIC_COLLECTION_DISABLED_BY_OSSTATSDISABLED_SYSTEM_PROPERTY));
+        logger.info(LogMarker.STATISTICS, LocalizedMessage.create(
+            LocalizedStrings.GemFireStatSampler_OS_STATISTIC_COLLECTION_DISABLED_BY_OSSTATSDISABLED_SYSTEM_PROPERTY));
-        if ( retVal != 0 ) {
-          logger.error(LogMarker.STATISTICS, LocalizedMessage.create(LocalizedStrings.GemFireStatSampler_OS_STATISTICS_FAILED_TO_INITIALIZE_PROPERLY_SOME_STATS_MAY_BE_MISSING_SEE_BUGNOTE_37160)); 
+        if (retVal != 0) {
+          logger.error(LogMarker.STATISTICS, LocalizedMessage.create(
+              LocalizedStrings.GemFireStatSampler_OS_STATISTICS_FAILED_TO_INITIALIZE_PROPERLY_SOME_STATS_MAY_BE_MISSING_SEE_BUGNOTE_37160));
-        Statistics stats = HostStatHelper.newProcess(getOsStatisticsFactory(), id, statName + "-proc");
-        this.processStats = HostStatHelper.newProcessStats(stats); 
+        Statistics stats =
+            HostStatHelper.newProcess(getOsStatisticsFactory(), id, statName + "-proc");
+        this.processStats = HostStatHelper.newProcessStats(stats);
- @Override
+  @Override
-    if (stopRequested()) return;
+    if (stopRequested())
+      return;
-      if (stopRequested()) return;
-      StatisticsImpl s = (StatisticsImpl)it.next();
+      if (stopRequested())
+        return;
+      StatisticsImpl s = (StatisticsImpl) it.next();
-        HostStatHelper.refresh((LocalStatisticsImpl)s);
+        HostStatHelper.refresh((LocalStatisticsImpl) s);
- @Override
+  @Override
-  
+
-    
+
-    
+
-    
+
-    
+
-      StatisticDescriptorImpl stat = (StatisticDescriptorImpl)stats.nameToDescriptor(statName);
+      StatisticDescriptorImpl stat = (StatisticDescriptorImpl) stats.nameToDescriptor(statName);
-      case StatisticDescriptorImpl.BYTE:
-      case StatisticDescriptorImpl.SHORT:
-      case StatisticDescriptorImpl.INT:
-      case StatisticDescriptorImpl.LONG:
-        result = new LocalLongStatListenerImpl();
-        break;
-      case StatisticDescriptorImpl.FLOAT:
-        result = new LocalFloatStatListenerImpl();
-        break;
-      case StatisticDescriptorImpl.DOUBLE:
-        result = new LocalDoubleStatListenerImpl();
-        break;
-      default:
-        throw new RuntimeException("Illegal field type " + stats.getType() + " for statistic");
+        case StatisticDescriptorImpl.BYTE:
+        case StatisticDescriptorImpl.SHORT:
+        case StatisticDescriptorImpl.INT:
+        case StatisticDescriptorImpl.LONG:
+          result = new LocalLongStatListenerImpl();
+          break;
+        case StatisticDescriptorImpl.FLOAT:
+          result = new LocalFloatStatListenerImpl();
+          break;
+        case StatisticDescriptorImpl.DOUBLE:
+          result = new LocalDoubleStatListenerImpl();
+          break;
+        default:
+          throw new RuntimeException("Illegal field type " + stats.getType() + " for statistic");
-    
+
-     * Checks to see if the value of the stat has changed. If it has then 
-     * the local listener is fired
+     * Checks to see if the value of the stat has changed. If it has then the local listener is
+     * fired
-  
+
-      return Float.intBitsToFloat((int)bits);
+      return Float.intBitsToFloat((int) bits);
-  
+
-  protected static abstract class RemoteStatListenerImpl extends StatListenerImpl{
+  protected static abstract class RemoteStatListenerImpl extends StatListenerImpl {
-    
+
-        return listenerId == ((RemoteStatListenerImpl)o).listenerId;
+        return listenerId == ((RemoteStatListenerImpl) o).listenerId;
-    
+
-    
-    static RemoteStatListenerImpl create(int listenerId, InternalDistributedMember recipient, long resourceId, String statName, HostStatSampler sampler) {
+
+    static RemoteStatListenerImpl create(int listenerId, InternalDistributedMember recipient,
+        long resourceId, String statName, HostStatSampler sampler) {
-      StatisticDescriptorImpl stat = (StatisticDescriptorImpl)stats.nameToDescriptor(statName);
+      StatisticDescriptorImpl stat = (StatisticDescriptorImpl) stats.nameToDescriptor(statName);
-      case StatisticDescriptorImpl.BYTE:
-      case StatisticDescriptorImpl.SHORT:
-      case StatisticDescriptorImpl.INT:
-      case StatisticDescriptorImpl.LONG:
-        result = new LongStatListenerImpl();
-        break;
-      case StatisticDescriptorImpl.FLOAT:
-        result = new FloatStatListenerImpl();
-        break;
-      case StatisticDescriptorImpl.DOUBLE:
-        result = new DoubleStatListenerImpl();
-        break;
-      default:
-        throw new RuntimeException(LocalizedStrings.GemFireStatSampler_ILLEGAL_FIELD_TYPE_0_FOR_STATISTIC.toLocalizedString(stats.getType()));
+        case StatisticDescriptorImpl.BYTE:
+        case StatisticDescriptorImpl.SHORT:
+        case StatisticDescriptorImpl.INT:
+        case StatisticDescriptorImpl.LONG:
+          result = new LongStatListenerImpl();
+          break;
+        case StatisticDescriptorImpl.FLOAT:
+          result = new FloatStatListenerImpl();
+          break;
+        case StatisticDescriptorImpl.DOUBLE:
+          result = new DoubleStatListenerImpl();
+          break;
+        default:
+          throw new RuntimeException(
+              LocalizedStrings.GemFireStatSampler_ILLEGAL_FIELD_TYPE_0_FOR_STATISTIC
+                  .toLocalizedString(stats.getType()));
-    
+
-     * Checks to see if the value of the stat has changed. If it has then it
-     * adds that change to the specified message.
+     * Checks to see if the value of the stat has changed. If it has then it adds that change to the
+     * specified message.
-      return Float.intBitsToFloat((int)bits);
+      return Float.intBitsToFloat((int) bits);
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66