GEODE-965: redundant cache server created during auto-reconnect

If cluster configuration is enabled but a cache.xml is actually being
used to construct the cache then it is possible that after an auto-
reconnect a redundant CacheServer will be created.

There is an assumption made in writing the auto-reconnect code that if
cluster-configuration is enabled the cache will not be constructed
using a cache.xml file.

This change-set marks CacheServers that are created by gfsh or so
called "default" servers created by cache.xml processing so that
auto-reconnect will know whether they should be handled specially.

+import com.gemstone.gemfire.cache.server.CacheServer;
-            if (cacheServerCreation != null) {
-              for (CacheServerCreation bridge: cacheServerCreation) {
-                CacheServerImpl impl = (CacheServerImpl)cache.addCacheServer();
-                impl.configureFrom(bridge);
-                try {
-                  if (!impl.isRunning()) {
-                    impl.start();
-                  }
-                } catch (IOException ex) {
-                  throw new GemFireIOException(
-                      LocalizedStrings.CacheCreation_WHILE_STARTING_CACHE_SERVER_0
-                          .toLocalizedString(impl), ex);
-                }
-              }
-            }
+            
+            createAndStartCacheServers(cacheServerCreation, cache);
+
+
+  /**
+   * after an auto-reconnect we may need to recreate a cache server
+   * and start it
+   */
+  public void createAndStartCacheServers(
+      List<CacheServerCreation> cacheServerCreation, GemFireCacheImpl cache) {
+
+    List<CacheServer> servers = cache.getCacheServers();
+    
+    // if there used to be a cache server but now there isn't one we need
+    // to recreate it.
+    if (servers.isEmpty() && cacheServerCreation != null) {
+      for (CacheServerCreation bridge: cacheServerCreation) {
+        CacheServerImpl impl = (CacheServerImpl)cache.addCacheServer();
+        impl.configureFrom(bridge);
+      }
+    }
+    
+    servers = cache.getCacheServers();
+    for (CacheServer server: servers) {
+      try {
+        if (!server.isRunning()) {
+          server.start();
+        }
+      } catch (IOException ex) {
+        throw new GemFireIOException(
+            LocalizedStrings.CacheCreation_WHILE_STARTING_CACHE_SERVER_0
+                .toLocalizedString(server), ex);
+      }
+    }
+    
+  }
+

INS26 INS40 INS31 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS65 INS74 INS42 INS43 INS42 INS60 MOV25 INS21 INS70 INS66 INS66 INS43 INS43 INS42 INS74 INS59 INS27 INS7 INS44 INS42 INS8 INS42 INS42 INS43 INS43 INS42 INS32 INS32 MOV27 INS42 INS32 INS43 INS42 INS54 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS25 MOV44 INS8 INS38 INS8 INS53 INS32 INS21 INS14 INS42 INS42 INS32 MOV43 INS32 INS42 INS21 INS42 INS42 INS40 INS42 INS42 INS32 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL40 DEL42 DEL42 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54