Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The SystemUtils class is an abstract utility class for working with, invoking methods and accessing properties
- * of the Java System class.
+ * The SystemUtils class is an abstract utility class for working with, invoking methods and
+ * accessing properties of the Java System class.
-   * Utility method to determine whether the installed Java Runtime Environment (JRE) is minimally at the specified,
-   * expected version.  Typically, Java versions are of the form "1.6.0_31"...
-   * In the Azul JVM java.version does not have the "_NN" suffix. Instead it has the azul product version
-   * as the suffix like so "-zing_NN.NN.N.N". So on azul we instead use the "java.specification.version" sys prop
-   * and only compare the major and minor version numbers. All the stuff after the second "." in expectedVersion
-   * is ignored.
+   * Utility method to determine whether the installed Java Runtime Environment (JRE) is minimally
+   * at the specified, expected version. Typically, Java versions are of the form "1.6.0_31"... In
+   * the Azul JVM java.version does not have the "_NN" suffix. Instead it has the azul product
+   * version as the suffix like so "-zing_NN.NN.N.N". So on azul we instead use the
+   * "java.specification.version" sys prop and only compare the major and minor version numbers. All
+   * the stuff after the second "." in expectedVersion is ignored.
-   * @param expectedVersion an string value specifying the minimum expected version of the Java Runtime.
+   * @param expectedVersion an string value specifying the minimum expected version of the Java
+   *        Runtime.
-      actualVersionDigits = StringUtils.getDigitsOnly(System.getProperty("java.specification.version"));
+      actualVersionDigits =
+          StringUtils.getDigitsOnly(System.getProperty("java.specification.version"));
-        dotIdx = expectedVersion.indexOf('.', dotIdx+1);
+        dotIdx = expectedVersion.indexOf('.', dotIdx + 1);
-    String expectedVersionDigits = StringUtils.padEnding(StringUtils.getDigitsOnly(expectedVersion), '0',
-      actualVersionDigits.length());
+    String expectedVersionDigits = StringUtils.padEnding(StringUtils.getDigitsOnly(expectedVersion),
+        '0', actualVersionDigits.length());
-    }
-    catch (NumberFormatException ignore) {
+    } catch (NumberFormatException ignore) {
-   * @return a boolean value indicating whether the Java application process is executing and running 
-   * on the Apple JVM.
+   * @return a boolean value indicating whether the Java application process is executing and
+   *         running on the Apple JVM.
-   * Utility method to determine whether the Java application process is executing on the Oracle JVM.
+   * Utility method to determine whether the Java application process is executing on the Oracle
+   * JVM.
-   * @return a boolean value indicating whether the Java application process is executing and running 
-   * on the Oracle JVM.
+   * @return a boolean value indicating whether the Java application process is executing and
+   *         running on the Oracle JVM.
-   * @return a boolean value indicating whether the Java application process is executing and running 
-   * on the Azul JVM.
+   * @return a boolean value indicating whether the Java application process is executing and
+   *         running on the Azul JVM.
-  
+
-   * Utility method to determine whether the Java application process is executing on the Java HotSpot VM.
-   * Client or Server VM does not matter.
+   * Utility method to determine whether the Java application process is executing on the Java
+   * HotSpot VM. Client or Server VM does not matter.
-   * @return a boolean value indicating whether the Java application process is executing on the Java HotSpot VM.
+   * @return a boolean value indicating whether the Java application process is executing on the
+   *         Java HotSpot VM.
-   * @return a boolean value indicating whether the Java application process is executing on the IBM J9 VM.
+   * @return a boolean value indicating whether the Java application process is executing on the IBM
+   *         J9 VM.
-   * Utility method to determine whether the Java application process is executing on the Oracle JRockit VM.
-   * Client or Server VM does not matter.
+   * Utility method to determine whether the Java application process is executing on the Oracle
+   * JRockit VM. Client or Server VM does not matter.
-   * @return a boolean value indicating whether the Java application process is executing on the Oracle JRockit VM.
+   * @return a boolean value indicating whether the Java application process is executing on the
+   *         Oracle JRockit VM.
-   * Utility method that determines whether the Java application process is executing in a Apple Mac OSX
-   * operating system environment.
+   * Utility method that determines whether the Java application process is executing in a Apple Mac
+   * OSX operating system environment.
-   * @return a boolean value indicating whether the Java application process is executing in Mac OSX.
+   * @return a boolean value indicating whether the Java application process is executing in Mac
+   *         OSX.
-   * Utility method that determines whether the Java application process is executing in a Microsoft Windows-based
-   * operating system environment.
+   * Utility method that determines whether the Java application process is executing in a Microsoft
+   * Windows-based operating system environment.
-   * @return a boolean value indicating whether the Java application process is executing in Windows.
+   * @return a boolean value indicating whether the Java application process is executing in
+   *         Windows.
-   * Utility method that determines whether the Java application process is executing in a Sun Solaris
-   * operating system environment.
+   * Utility method that determines whether the Java application process is executing in a Sun
+   * Solaris operating system environment.
-   * @return a boolean value indicating whether the Java application process is executing in Solaris.
+   * @return a boolean value indicating whether the Java application process is executing in
+   *         Solaris.
-   * Returns true if the specified location is in the JVM classpath. This may
-   * ignore additions to the classpath that are not reflected by the value in
+   * Returns true if the specified location is in the JVM classpath. This may ignore additions to
+   * the classpath that are not reflected by the value in
-  
+
-   * Returns true if the specified location is in the JVM classpath. This may
-   * ignore additions to the classpath that are not reflected by the value in
+   * Returns true if the specified location is in the JVM classpath. This may ignore additions to
+   * the classpath that are not reflected by the value in
-      String path =st.nextToken();
+      String path = st.nextToken();
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66