Merge branch 'develop' into feature/GEODE-7049

+
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
-import org.apache.geode.cache.configuration.CacheElement;
-import org.apache.geode.cache.configuration.GatewayReceiverConfig;
-import org.apache.geode.cache.configuration.RegionConfig;
-import org.apache.geode.management.api.CorrespondWith;
-import org.apache.geode.management.api.RestfulEndpoint;
+import org.apache.geode.management.configuration.AbstractConfiguration;
+import org.apache.geode.management.configuration.GatewayReceiver;
+import org.apache.geode.management.configuration.GroupableConfiguration;
+import org.apache.geode.management.configuration.Index;
+import org.apache.geode.management.configuration.Region;
+import org.apache.geode.management.internal.configuration.mutators.IndexConfigManager;
-import org.apache.geode.management.internal.configuration.validators.CacheElementValidator;
+import org.apache.geode.management.internal.configuration.validators.CommonConfigurationValidator;
-  private final CacheElementValidator commonValidator;
+  private final CommonConfigurationValidator commonValidator;
-        new MemberValidator(cache, persistenceService), new CacheElementValidator(),
+        new MemberValidator(cache, persistenceService), new CommonConfigurationValidator(),
-    managers.put(RegionConfig.class, new RegionConfigManager());
+    managers.put(Region.class, new RegionConfigManager());
-    managers.put(GatewayReceiverConfig.class, new GatewayReceiverConfigManager(cache));
+    managers.put(GatewayReceiver.class, new GatewayReceiverConfigManager());
+    managers.put(Index.class, new IndexConfigManager());
-    validators.put(RegionConfig.class, new RegionConfigValidator(cache));
-    validators.put(GatewayReceiverConfig.class, new GatewayReceiverConfigValidator());
+    validators.put(Region.class, new RegionConfigValidator(cache));
+    validators.put(GatewayReceiver.class, new GatewayReceiverConfigValidator());
-      CacheElementValidator commonValidator,
+      CommonConfigurationValidator commonValidator,
-  public <T extends CacheElement> ClusterManagementRealizationResult create(T config) {
+  public <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult create(T config) {
-    String group = config.getConfigGroup();
+    String group = config.getGroup();
+    final String groupName =
+        AbstractConfiguration.isCluster(group) ? AbstractConfiguration.CLUSTER : group;
-    final String finalGroup = group; // the below lambda requires a reference that is final
-    persistenceService.updateCacheConfig(finalGroup, cacheConfigForGroup -> {
+    persistenceService.updateCacheConfig(groupName, cacheConfigForGroup -> {
-            "Successfully updated configuration for " + finalGroup + ".");
+            "Successfully updated configuration for " + groupName + ".");
-        String message = "Failed to update cluster configuration for " + finalGroup + ".";
+        String message = "Failed to update cluster configuration for " + groupName + ".";
-    // add the config object which includes the HATOS information of the element created
-    if (result.isSuccessful() && config instanceof RestfulEndpoint) {
-      result.setUri(((RestfulEndpoint) config).getUri());
+    // add the config object which includes the HATEOAS information of the element created
+    if (result.isSuccessful()) {
+      result.setUri(config.getUri());
-  public <T extends CacheElement> ClusterManagementRealizationResult delete(
+  public <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult delete(
-  public <T extends CacheElement> ClusterManagementRealizationResult update(
+  public <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult update(
-  public <T extends CacheElement & CorrespondWith<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> list(
+  public <T extends AbstractConfiguration<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> list(
-      // gather elements on all the groups, consolidate the group information and then do the filter
-      // so that when we filter by a specific group, we still show that a particular element might
-      // also belong to another group.
-      for (String group : persistenceService.getGroups()) {
-        CacheConfig currentPersistedConfig = persistenceService.getCacheConfig(group, true);
-        List<T> listInGroup = manager.list(filter, currentPersistedConfig);
-        for (T element : listInGroup) {
-          element.setGroup(group);
-          resultList.add(element);
-        }
-      }
-
-      // if empty result, return immediately
-      if (resultList.size() == 0) {
-        return result;
-      }
-
-      // right now the list contains [{regionA, group1}, {regionA, group2}...], if the elements are
-      // MultiGroupCacheElement, we need to consolidate the list into [{regionA, [group1, group2]}
-      List<T> consolidatedResultList = new ArrayList<>();
-      for (T element : resultList) {
-        int index = consolidatedResultList.indexOf(element);
-        if (index >= 0) {
-          T exist = consolidatedResultList.get(index);
-          exist.addGroup(element.getGroup());
-        } else {
-          consolidatedResultList.add(element);
-        }
-      }
+      Set<String> groups;
-        consolidatedResultList = consolidatedResultList.stream()
-            .filter(e -> (e.getGroups().contains(filter.getConfigGroup())))
-            .collect(Collectors.toList());
+        groups = Collections.singleton(filter.getGroup());
+      } else {
+        groups = persistenceService.getGroups();
-      resultList = consolidatedResultList;
+
+      for (String group : groups) {
+        CacheConfig currentPersistedConfig =
+            persistenceService.getCacheConfig(
+                AbstractConfiguration.isCluster(group) ? AbstractConfiguration.CLUSTER : group,
+                true);
+        List<T> listInGroup = manager.list(filter, currentPersistedConfig);
+        if (!AbstractConfiguration.isCluster(group)) {
+          listInGroup.forEach(t -> {
+            if (t instanceof GroupableConfiguration) {
+              ((GroupableConfiguration<?>) t).setGroup(group);
+            }
+          });
+        }
+        resultList.addAll(listInGroup);
+      }
-    boolean hasRuntimeInfo = filter.hasRuntimeInfo();
+    boolean hasRuntimeInfo = hasRuntimeInfo(filter.getClass());
-      List<String> groups = element.getGroups();
-      // if "cluster" is the only group, clear it, so that the returning json does not show
-      // "cluster" as a group value
-      if (element.getGroups().size() == 1 && CacheElement.CLUSTER.equals(element.getGroup())) {
-        element.getGroups().clear();
-      }
-
-            memberValidator.findMembers(filter.getId(), filter.getGroups().toArray(new String[0]));
+            memberValidator.findMembers(filter.getId(), filter.getGroup());
-        members = memberValidator.findServers(groups.toArray(new String[0]));
+        members = memberValidator.findServers(element.getGroup());
-  public <T extends CacheElement & CorrespondWith<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> get(
+  public <T extends AbstractConfiguration<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> get(
-    result.setUri(RestfulEndpoint.URI_CONTEXT + RestfulEndpoint.URI_VERSION
+    result.setUri(AbstractConfiguration.URI_CONTEXT + AbstractConfiguration.URI_VERSION
-  private <T extends CacheElement> ConfigurationManager<T> getConfigurationManager(
+  private <T extends AbstractConfiguration> ConfigurationManager<T> getConfigurationManager(
+
+
+  /**
+   * for internal use only
+   */
+  @VisibleForTesting
+  Class<?> getRuntimeClass(Class<?> configClass) {
+    Type genericSuperclass = configClass.getGenericSuperclass();
+
+    if (genericSuperclass instanceof ParameterizedType) {
+      return (Class<?>) ((ParameterizedType) genericSuperclass).getActualTypeArguments()[0];
+    }
+
+    return null;
+  }
+
+  @VisibleForTesting
+  boolean hasRuntimeInfo(Class<?> configClass) {
+    return !RuntimeInfo.class.equals(getRuntimeClass(configClass));
+  }
+

MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS40 INS40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 UPD40 INS31 INS31 UPD43 MOV60 INS29 INS78 INS74 INS42 INS44 INS8 INS78 INS39 INS42 INS44 INS8 UPD42 INS21 UPD43 INS74 INS74 INS74 UPD74 UPD74 UPD43 INS65 INS42 INS43 INS76 INS74 INS42 INS60 INS25 INS41 INS42 INS74 INS42 INS41 INS32 UPD42 INS43 INS76 MOV32 INS43 INS76 INS43 INS76 UPD43 UPD43 UPD42 INS66 INS42 INS43 INS76 INS43 INS59 INS62 INS8 INS33 INS43 INS76 INS38 UPD43 INS42 INS42 INS57 INS14 UPD42 MOV42 INS42 INS16 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV60 INS25 INS70 INS32 UPD42 INS42 INS42 INS42 INS32 INS42 INS43 INS41 INS42 INS32 UPD42 UPD43 UPD43 INS43 INS43 UPD43 UPD43 UPD42 INS32 INS40 INS42 UPD74 MOV32 INS8 MOV8 MOV44 INS42 INS8 INS42 INS32 UPD40 UPD40 INS42 INS42 INS42 INS11 INS57 INS42 INS32 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD43 INS21 INS21 INS60 MOV60 INS25 MOV21 MOV42 UPD42 MOV42 INS74 INS2 INS43 INS42 INS42 INS42 UPD42 INS7 INS7 MOV43 INS59 INS38 MOV8 INS32 INS43 INS76 INS32 INS34 INS42 INS42 INS32 INS42 MOV32 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 MOV32 INS42 INS36 INS42 INS42 INS42 INS32 INS42 INS42 INS16 INS9 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 MOV32 INS42 UPD42 INS11 UPD42 MOV42 UPD42 MOV42 INS32 INS40 INS42 UPD42 MOV42 UPD42 MOV42 INS86 UPD42 INS43 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV59 INS8 INS42 UPD42 UPD42 INS25 INS62 INS8 INS42 INS43 INS21 INS42 INS32 INS36 UPD42 MOV42 UPD42 MOV42 INS11 INS74 INS42 INS43 INS76 INS42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL43 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL41 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL36 DEL86 DEL32 DEL42 DEL32 DEL32 DEL7 DEL42 DEL42 DEL7 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL32 DEL34 DEL27 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL39 DEL42 DEL32 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL25 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL32 DEL32 DEL42 DEL43