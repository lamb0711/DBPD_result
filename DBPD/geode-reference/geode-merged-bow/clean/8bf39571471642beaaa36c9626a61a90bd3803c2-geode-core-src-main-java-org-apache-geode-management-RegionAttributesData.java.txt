Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   * This constructor is to be used by internal JMX framework only. User should
-   * not try to create an instance of this class.
+   * This constructor is to be used by internal JMX framework only. User should not try to create an
+   * instance of this class.
-  @ConstructorProperties( { 
-    "cacheLoaderClassName",
-    "cacheWriterClassName",
-    "keyConstraintClassName",
-    "valueConstraintClassName",
-    "regionTimeToLive",
-    "regionIdleTimeout",
-    "entryTimeToLive",
-    "entryIdleTimeout",
-    "customEntryTimeToLive",
-    "customEntryIdleTimeout",
-    "ignoreJTA",
-    "dataPolicy",
-    "scope",
-    "initialCapacity",
-    "loadFactor",
-    "lockGrantor",
-    "multicastEnabled",
-    "concurrencyLevel",
-    "indexMaintenanceSynchronous",
-    "statisticsEnabled",
-    "subscriptionConflationEnabled",
-    "asyncConflationEnabled",
-    "poolName",
-    "cloningEnabled",
-    "diskStoreName",
-    "interestPolicy",
-    "diskSynchronous",
-    "cacheListeners",
-    "compressorClassName",
-    "offHeap"
-      })
-      
-      
-  public RegionAttributesData(String cacheLoaderClassName,
-      String cacheWriterClassName,
-      String keyConstraintClassName,
-      String valueConstraintClassName,
-      int regionTimeToLive,
-      int regionIdleTimeout,
-      int entryTimeToLive,
-      int entryIdleTimeout,
-      String customEntryTimeToLive,
-      String customEntryIdleTimeout,
-      boolean ignoreJTA,
-      String dataPolicy,
-      String scope,
-      int initialCapacity,
-      float loadFactor,
-      boolean lockGrantor,
-      boolean multicastEnabled,
-      int concurrencyLevel,
-      boolean indexMaintenanceSynchronous,
-      boolean statisticsEnabled,
-      boolean subscriptionConflationEnabled,
-      boolean asyncConflationEnabled,
-      String poolName,
-      boolean cloningEnabled,
-      String diskStoreName,
-      String interestPolicy,
-      boolean diskSynchronous,
-      String[] cacheListeners,
-      String compressorClassName,
-      boolean offHeap) {
-    
-    
-    
-      this.cacheLoaderClassName = cacheLoaderClassName;
-      this.cacheWriterClassName = cacheWriterClassName;
-      this.keyConstraintClassName = keyConstraintClassName;
-      this.valueConstraintClassName = valueConstraintClassName;
-      this.regionTimeToLive = regionTimeToLive;
-      this.regionIdleTimeout = regionIdleTimeout;
-      this.entryTimeToLive = entryTimeToLive;
-      this.entryIdleTimeout = entryIdleTimeout;
-      this.customEntryTimeToLive = customEntryTimeToLive;
-      this.customEntryIdleTimeout = customEntryIdleTimeout;
-      this.ignoreJTA = ignoreJTA;
-      this.dataPolicy = dataPolicy;
-      this.scope = scope;
-      this.initialCapacity = initialCapacity;
-      this.loadFactor = loadFactor;
-      this.lockGrantor = lockGrantor;
-      this.multicastEnabled = multicastEnabled;
-      this.concurrencyLevel = concurrencyLevel;
-      this.indexMaintenanceSynchronous = indexMaintenanceSynchronous;
-      this.statisticsEnabled = statisticsEnabled;
-      this.subscriptionConflationEnabled = subscriptionConflationEnabled;
-      this.asyncConflationEnabled = asyncConflationEnabled;
-      this.poolName = poolName;
-      this.cloningEnabled = cloningEnabled;
-      this.diskStoreName = diskStoreName;
-      this.interestPolicy = interestPolicy;
-      this.diskSynchronous = diskSynchronous;
-      this.cacheListeners = cacheListeners;
-      this.compressorClassName = compressorClassName;
-      this.offHeap = offHeap;
+  @ConstructorProperties({"cacheLoaderClassName", "cacheWriterClassName", "keyConstraintClassName",
+      "valueConstraintClassName", "regionTimeToLive", "regionIdleTimeout", "entryTimeToLive",
+      "entryIdleTimeout", "customEntryTimeToLive", "customEntryIdleTimeout", "ignoreJTA",
+      "dataPolicy", "scope", "initialCapacity", "loadFactor", "lockGrantor", "multicastEnabled",
+      "concurrencyLevel", "indexMaintenanceSynchronous", "statisticsEnabled",
+      "subscriptionConflationEnabled", "asyncConflationEnabled", "poolName", "cloningEnabled",
+      "diskStoreName", "interestPolicy", "diskSynchronous", "cacheListeners", "compressorClassName",
+      "offHeap"})
+
+
+  public RegionAttributesData(String cacheLoaderClassName, String cacheWriterClassName,
+      String keyConstraintClassName, String valueConstraintClassName, int regionTimeToLive,
+      int regionIdleTimeout, int entryTimeToLive, int entryIdleTimeout,
+      String customEntryTimeToLive, String customEntryIdleTimeout, boolean ignoreJTA,
+      String dataPolicy, String scope, int initialCapacity, float loadFactor, boolean lockGrantor,
+      boolean multicastEnabled, int concurrencyLevel, boolean indexMaintenanceSynchronous,
+      boolean statisticsEnabled, boolean subscriptionConflationEnabled,
+      boolean asyncConflationEnabled, String poolName, boolean cloningEnabled, String diskStoreName,
+      String interestPolicy, boolean diskSynchronous, String[] cacheListeners,
+      String compressorClassName, boolean offHeap) {
+
+
+
+    this.cacheLoaderClassName = cacheLoaderClassName;
+    this.cacheWriterClassName = cacheWriterClassName;
+    this.keyConstraintClassName = keyConstraintClassName;
+    this.valueConstraintClassName = valueConstraintClassName;
+    this.regionTimeToLive = regionTimeToLive;
+    this.regionIdleTimeout = regionIdleTimeout;
+    this.entryTimeToLive = entryTimeToLive;
+    this.entryIdleTimeout = entryIdleTimeout;
+    this.customEntryTimeToLive = customEntryTimeToLive;
+    this.customEntryIdleTimeout = customEntryIdleTimeout;
+    this.ignoreJTA = ignoreJTA;
+    this.dataPolicy = dataPolicy;
+    this.scope = scope;
+    this.initialCapacity = initialCapacity;
+    this.loadFactor = loadFactor;
+    this.lockGrantor = lockGrantor;
+    this.multicastEnabled = multicastEnabled;
+    this.concurrencyLevel = concurrencyLevel;
+    this.indexMaintenanceSynchronous = indexMaintenanceSynchronous;
+    this.statisticsEnabled = statisticsEnabled;
+    this.subscriptionConflationEnabled = subscriptionConflationEnabled;
+    this.asyncConflationEnabled = asyncConflationEnabled;
+    this.poolName = poolName;
+    this.cloningEnabled = cloningEnabled;
+    this.diskStoreName = diskStoreName;
+    this.interestPolicy = interestPolicy;
+    this.diskSynchronous = diskSynchronous;
+    this.cacheListeners = cacheListeners;
+    this.compressorClassName = compressorClassName;
+    this.offHeap = offHeap;
-  
-  /** 
+
+  /**
-  
+
-   * Returns the Class that the keys in this region are constrained to
-   * (must be an instance of).
+   * Returns the Class that the keys in this region are constrained to (must be an instance of).
-  
+
-   * Returns the Class that the values in this region are constrained to
-   * (must be an instance of).
+   * Returns the Class that the values in this region are constrained to (must be an instance of).
-  
-  /** 
+
+  /**
-  
+
-  
+
-  
+
-  
-  /** 
-   * Returns the custom time to live expiration for entries in the
-   * Region, if one exists.
+
+  /**
+   * Returns the custom time to live expiration for entries in the Region, if one exists.
-  
+
-   * Returns the custom idle timeout expiration for entries in the Region,
-   * if one exists.
+   * Returns the custom idle timeout expiration for entries in the Region, if one exists.
-  
+
-  
+
-  
+
-  
+
-  
+
-   * Returns whether this member is configured to become the lock granter 
-   * when the Region is created. It does not indicate whether this member
-   * is currently the lock granter for the Region.
+   * Returns whether this member is configured to become the lock granter when the Region is
+   * created. It does not indicate whether this member is currently the lock granter for the Region.
-   * @return True if this member is configured to start the Region as the
-   *         lock granter, false otherwise. Always returns false if the scope
-   *         of the Region is not <code>Scope.GLOBAL</code>
+   * @return True if this member is configured to start the Region as the lock granter, false
+   *         otherwise. Always returns false if the scope of the Region is not
+   *         <code>Scope.GLOBAL</code>
-  
+
-  
+
+
-   * Returns whether query service index maintenance will be done
-   * synchronously.
+   * Returns whether query service index maintenance will be done synchronously.
-   * @return True if query service index maintenance will be done
-   *         synchronously or false if it will be done asynchronously.
+   * @return True if query service index maintenance will be done synchronously or false if it will
+   *         be done asynchronously.
-  
+
-   * Returns whether statistic collection is enabled for the Region and its
-   * entries.
+   * Returns whether statistic collection is enabled for the Region and its entries.
-  
+
-   * Returns whether conflation is enabled for sending messages from a cache
-   * server to its clients.  This value only has meaning for client to server
-   * communication and is not relevant for peer to peer communication.
+   * Returns whether conflation is enabled for sending messages from a cache server to its clients.
+   * This value only has meaning for client to server communication and is not relevant for peer to
+   * peer communication.
-   * Returns whether asynchronous conflation is enabled for sending messages
-   * to peers.
+   * Returns whether asynchronous conflation is enabled for sending messages to peers.
-   * Returns the name of the Pool that this Region will use to communicate
-   * with servers, if any.
+   * Returns the name of the Pool that this Region will use to communicate with servers, if any.
-   * @return The name of the Pool used to communicate with servers or null if the
-   *         host member communicates with peers.
+   * @return The name of the Pool used to communicate with servers or null if the host member
+   *         communicates with peers.
-  
+
-  /** 
+  /**
-  
+
-  public boolean isDiskSynchronous(){
-     return diskSynchronous;
+  public boolean isDiskSynchronous() {
+    return diskSynchronous;
-   * Returns a list of CacheListeners for the Region.
-   * An empty array if no listener is specified.
+   * Returns a list of CacheListeners for the Region. An empty array if no listener is specified.
+   * 
+   * 
-  
+
-    return "RegionAttributesData [asyncConflationEnabled=" + asyncConflationEnabled + ", cacheListeners=" + Arrays.toString(cacheListeners)
-        + ", cacheLoaderClassName=" + cacheLoaderClassName + ", cacheWriterClassName=" + cacheWriterClassName + ", cloningEnabled=" + cloningEnabled
-        + ", compressorClassName=" + compressorClassName + ", concurrencyLevel=" + concurrencyLevel + ", customEntryIdleTimeout=" + customEntryIdleTimeout
-        + ", customEntryTimeToLive=" + customEntryTimeToLive + ", dataPolicy=" + dataPolicy + ", diskStoreName=" + diskStoreName
-        + ", diskSynchronous=" + diskSynchronous
-        + ", entryIdleTimeout=" + entryIdleTimeout + ", entryTimeToLive=" + entryTimeToLive
-        + ", ignoreJTA=" + ignoreJTA + ", indexMaintenanceSynchronous="
-        + indexMaintenanceSynchronous + ", initialCapacity=" + initialCapacity + ", interestPolicy=" + interestPolicy + ", keyConstraintClassName="
-        + keyConstraintClassName + ", loadFactor=" + loadFactor + ", lockGrantor=" + lockGrantor + ", multicastEnabled=" + multicastEnabled
-        + ", offHeap=" + offHeap
-        + ", poolName=" + poolName + ", regionIdleTimeout=" + regionIdleTimeout + ", regionTimeToLive=" + regionTimeToLive + ", scope=" + scope
-        + ", statisticsEnabled=" + statisticsEnabled + ", subscriptionConflationEnabled=" + subscriptionConflationEnabled
-        + ", valueConstraintClassName=" + valueConstraintClassName + "]";
+    return "RegionAttributesData [asyncConflationEnabled=" + asyncConflationEnabled
+        + ", cacheListeners=" + Arrays.toString(cacheListeners) + ", cacheLoaderClassName="
+        + cacheLoaderClassName + ", cacheWriterClassName=" + cacheWriterClassName
+        + ", cloningEnabled=" + cloningEnabled + ", compressorClassName=" + compressorClassName
+        + ", concurrencyLevel=" + concurrencyLevel + ", customEntryIdleTimeout="
+        + customEntryIdleTimeout + ", customEntryTimeToLive=" + customEntryTimeToLive
+        + ", dataPolicy=" + dataPolicy + ", diskStoreName=" + diskStoreName + ", diskSynchronous="
+        + diskSynchronous + ", entryIdleTimeout=" + entryIdleTimeout + ", entryTimeToLive="
+        + entryTimeToLive + ", ignoreJTA=" + ignoreJTA + ", indexMaintenanceSynchronous="
+        + indexMaintenanceSynchronous + ", initialCapacity=" + initialCapacity + ", interestPolicy="
+        + interestPolicy + ", keyConstraintClassName=" + keyConstraintClassName + ", loadFactor="
+        + loadFactor + ", lockGrantor=" + lockGrantor + ", multicastEnabled=" + multicastEnabled
+        + ", offHeap=" + offHeap + ", poolName=" + poolName + ", regionIdleTimeout="
+        + regionIdleTimeout + ", regionTimeToLive=" + regionTimeToLive + ", scope=" + scope
+        + ", statisticsEnabled=" + statisticsEnabled + ", subscriptionConflationEnabled="
+        + subscriptionConflationEnabled + ", valueConstraintClassName=" + valueConstraintClassName
+        + "]";
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66