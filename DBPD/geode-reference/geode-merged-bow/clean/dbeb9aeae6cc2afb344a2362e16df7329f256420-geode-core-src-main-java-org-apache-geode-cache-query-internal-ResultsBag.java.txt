Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class ResultsBag extends Bag implements
-    DataSerializableFixedID {
+public class ResultsBag extends Bag implements DataSerializableFixedID {
-   * This constructor should only be used by the DataSerializer. Creates a
-   * ResultsBag with no fields.
+   * This constructor should only be used by the DataSerializer. Creates a ResultsBag with no
+   * fields.
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-  protected ResultsBag(Collection c, HashingStrategy strategy,
-      CachePerfStats stats) {
+  protected ResultsBag(Collection c, HashingStrategy strategy, CachePerfStats stats) {
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-   * @param stats
-   *          the CachePerfStats to track hash collisions. Should be null unless
-   *          this is used as a query execution-time result set.
+   * @param stats the CachePerfStats to track hash collisions. Should be null unless this is used as
+   *        a query execution-time result set.
-  protected ResultsBag(int initialCapacity, float loadFactor,
-      HashingStrategy strategy, CachePerfStats stats) {
+  protected ResultsBag(int initialCapacity, float loadFactor, HashingStrategy strategy,
+      CachePerfStats stats) {
-  protected ResultsBag(int initialCapacity, HashingStrategy strategy,
-      CachePerfStats stats) {
+  protected ResultsBag(int initialCapacity, HashingStrategy strategy, CachePerfStats stats) {
-    for (Iterator<Entry> itr = this.map.entrySet().iterator(); itr.hasNext()
-        && numLeft > 0;) {
+    for (Iterator<Entry> itr = this.map.entrySet().iterator(); itr.hasNext() && numLeft > 0;) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66