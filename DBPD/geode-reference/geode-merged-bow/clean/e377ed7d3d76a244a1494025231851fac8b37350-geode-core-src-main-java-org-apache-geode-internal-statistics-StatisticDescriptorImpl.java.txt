GEODE-6850: change int stats to long (#3713)

The "Int" methods on the statistics interfaces have been deprecated in favor of the corresponding "Long" methods.
The implementation of these deprecated "Int" methods now use the "Long" methods.
The only place this could be visible to a user is if they call Statistics.get(String) or Statistics.get(StatisticDescriptor). Both of these methods return a "Number" instance.
These methods continue to do this and existing code will work fine if it does not try to downcast the Number to a subclass. But for "Int" stats, these methods used to return an "Integer" instance and now return a "Long" instance. If code used to cast to an "Integer" it will now be broken.
Many places in the product now use these deprecated "Int" methods and as of this checkin all those places are now creating a "Long" statistic.
-  /** A constant for an <code>byte</code> type */
-  static final byte BYTE = (byte) 3;
-
-  /** A constant for an <code>short</code> type */
-  static final byte SHORT = (byte) 4;
-
-  /** A constant for an <code>int</code> type */
-  static final byte INT = (byte) 5;
-
-  static final byte LONG = (byte) 6;
-
-  /** A constant for an <code>float</code> type */
-  static final byte FLOAT = (byte) 7;
+  static final byte LONG = StatArchiveFormat.LONG_CODE;
-  static final byte DOUBLE = (byte) 8;
+  static final byte DOUBLE = StatArchiveFormat.DOUBLE_CODE;
-      case BYTE:
-        return "byte";
-      case SHORT:
-        return "short";
-      case FLOAT:
-        return "float";
-      case INT:
-        return "int";
-   * Returns the number of bits needed to represent a value of the given type
-   *
-   * @throws IllegalArgumentException <code>code</code> is an unknown type
-   */
-  public static int getTypeCodeBits(int code) {
-    switch (code) {
-      case BYTE:
-        return 8;
-      case SHORT:
-        return 16;
-      case FLOAT:
-        return 32;
-      case INT:
-        return 32;
-      case LONG:
-        return 64;
-      case DOUBLE:
-        return 64;
-      default:
-        throw new IllegalArgumentException(
-            String.format("Unknown type code: %s",
-                Integer.valueOf(code)));
-    }
-  }
-
-  /**
-      case BYTE:
-        return byte.class;
-      case SHORT:
-        return short.class;
-      case FLOAT:
-        return float.class;
-      case INT:
-        return int.class;
-    return new StatisticDescriptorImpl(name, INT, description, units, true, isLargerBetter);
+    return createLongCounter(name, description, units, isLargerBetter);
-    return new StatisticDescriptorImpl(name, INT, description, units, false, isLargerBetter);
+    return createLongGauge(name, description, units, isLargerBetter);
-  public int getStorageBits() {
-    return getTypeCodeBits(this.typeCode);
-  }
-
-      case StatisticDescriptorImpl.INT:
-        return (int) bits;
-  public int checkInt() {
-    if (this.typeCode != INT) {
-      throw new IllegalArgumentException(
-          String.format(
-              "The statistic %s with id %s is of type %s and it was expected to be an int.",
-              new Object[] {getName(), Integer.valueOf(getId()),
-                  StatisticDescriptorImpl.getTypeCodeName(getTypeCode())}));
-    }
-    return this.id;
-  }
-

MOV31 MOV31 UPD42 UPD42 INS40 INS40 MOV49 MOV49 MOV49 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL34 DEL11 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL34 DEL11 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL34 DEL11 DEL59 DEL23 DEL39 DEL34 DEL11 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL34 DEL11 DEL59 DEL23 DEL39 DEL34 DEL11 DEL45 DEL41 DEL42 DEL49 DEL45 DEL41 DEL42 DEL49 DEL45 DEL41 DEL42 DEL49 DEL45 DEL41 DEL42 DEL49 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL49 DEL34 DEL41 DEL42 DEL49 DEL34 DEL41 DEL42 DEL49 DEL34 DEL41 DEL42 DEL49 DEL34 DEL41 DEL42 DEL49 DEL34 DEL41 DEL42 DEL49 DEL34 DEL41 DEL49 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL53 DEL50 DEL8 DEL31 DEL39 DEL57 DEL41 DEL42 DEL49 DEL39 DEL57 DEL41 DEL42 DEL49 DEL39 DEL57 DEL41 DEL42 DEL49 DEL39 DEL57 DEL41 DEL42 DEL49 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL42 DEL14 DEL83 DEL39 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL41 DEL8 DEL31 DEL39 DEL42 DEL11 DEL41 DEL40 DEL49 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL27 DEL42 DEL43 DEL42 DEL42 DEL45 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL4 DEL3 DEL32 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31