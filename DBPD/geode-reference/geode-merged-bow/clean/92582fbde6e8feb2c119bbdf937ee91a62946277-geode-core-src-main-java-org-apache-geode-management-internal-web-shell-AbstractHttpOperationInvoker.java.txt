GEODE-2267: enable gfsh to download file from http connection (GEODE-2418)

+import org.apache.commons.io.FileUtils;
+import org.springframework.http.HttpHeaders;
+import org.springframework.web.client.RequestCallback;
+import org.springframework.web.client.ResponseExtractor;
+import java.nio.file.Files;
+import java.nio.file.Path;
-  protected <T> ResponseEntity<T> send(final ClientHttpRequest request,
-      final Class<T> responseType) {
+  protected <T> T send(final ClientHttpRequest request, final Class<T> responseType) {
-  protected <T> ResponseEntity<T> send(final ClientHttpRequest request, final Class<T> responseType,
+  protected <T> T send(final ClientHttpRequest request, final Class<T> responseType,
-
-    return response;
+    return response.getBody();
+  }
+
+  protected Path downloadResponseToTempFile(ClientHttpRequest request,
+      Map<String, ?> uriVariables) {
+    final URI url = request.getURL(uriVariables);
+
+    // Optional Accept header
+    RequestCallback requestCallback = r -> {
+      r.getHeaders().setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM));
+      HttpHeaders header = request.getHeaders();
+      r.getHeaders().setAll(request.getHeaders().toSingleValueMap());
+    };
+
+    // Streams the response instead of loading it all in memory
+    ResponseExtractor<Path> responseExtractor = resp -> {
+      Path tempFile = Files.createTempFile("fileDownload", "");
+      if (tempFile.toFile().exists()) {
+        FileUtils.deleteQuietly(tempFile.toFile());
+      }
+      Files.copy(resp.getBody(), tempFile);
+      return tempFile;
+    };
+    return getRestTemplate().execute(url, org.springframework.http.HttpMethod.GET, requestCallback,
+        responseExtractor);
-      final ResponseEntity<byte[]> response = send(request, byte[].class);
-
-        return IOUtils.deserializeObject(response.getBody());
+        return IOUtils.deserializeObject(send(request, byte[].class));
-      final ResponseEntity<byte[]> response = send(request, byte[].class);
-
-        return IOUtils.deserializeObject(response.getBody());
+        return IOUtils.deserializeObject(send(request, byte[].class));
-
-      final ResponseEntity<byte[]> response = send(request, byte[].class);
-
-        return (Set<ObjectName>) IOUtils.deserializeObject(response.getBody());
+        return (Set<ObjectName>) IOUtils.deserializeObject(send(request, byte[].class));

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 MOV43 MOV43 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS74 INS42 INS60 INS60 INS60 INS41 MOV32 INS42 INS43 INS43 INS76 INS83 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS86 INS43 INS43 INS42 INS86 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS59 INS8 INS42 INS42 INS59 INS8 INS42 INS42 INS21 INS60 INS21 INS42 INS60 INS25 INS21 INS41 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS8 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS21 INS42 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 MOV57 MOV32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL42 DEL83 DEL42 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL59 DEL60 DEL83 DEL42 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL59 DEL60 DEL83 DEL42 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32