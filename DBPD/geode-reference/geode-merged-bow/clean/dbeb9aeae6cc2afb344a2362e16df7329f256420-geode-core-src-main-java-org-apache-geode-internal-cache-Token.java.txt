Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Internal tokens used as region values. These tokens
- * are never seen from the public API.
+ * Internal tokens used as region values. These tokens are never seen from the public API.
- * These classes are Serializable and implement readResolve to support
- * canonicalization in the face of copysharing.
+ * These classes are Serializable and implement readResolve to support canonicalization in the face
+ * of copysharing.
-  
+
-  public static final Destroyed DESTROYED = new Destroyed();  
+  public static final Destroyed DESTROYED = new Destroyed();
-   * Tombstone is used to hold onto destroyed entries in regions
-   * supporting entry versioning.  DESTROYED and REMOVED_PHASE2
-   * tokens transition to TOMBSTONE during GII and normal entry
+   * Tombstone is used to hold onto destroyed entries in regions supporting entry versioning.
+   * DESTROYED and REMOVED_PHASE2 tokens transition to TOMBSTONE during GII and normal entry
-  public static final Tombstone TOMBSTONE = new Tombstone();  
+  public static final Tombstone TOMBSTONE = new Tombstone();
-   * Used when a RegionEntry is removed from a RegionMap. In phase 1 of
-   * removal, the destroy() operation is applied to the entry under
-   * synchronization.  The lock is then released while distribution
-   * is done.  During this period, the entry may be modified, preventing
-   * the entry from being removed from its map.
+   * Used when a RegionEntry is removed from a RegionMap. In phase 1 of removal, the destroy()
+   * operation is applied to the entry under synchronization. The lock is then released while
+   * distribution is done. During this period, the entry may be modified, preventing the entry from
+   * being removed from its map.
-  
+
-   * Used when a RegionEntry is removed from a RegionMap.  In phase 2 of
-   * removal, callbacks for the entry are invoked under synchronization
-   * and the entry is then removed from the map.  If an entry is seen in
-   * this state, you should wait in a loop for the entry to be removed
-   * from the map.
+   * Used when a RegionEntry is removed from a RegionMap. In phase 2 of removal, callbacks for the
+   * entry are invoked under synchronization and the entry is then removed from the map. If an entry
+   * is seen in this state, you should wait in a loop for the entry to be removed from the map.
-   * Indicates that a decision was made to not provide some information
-   * that is normally available.
+   * Indicates that a decision was made to not provide some information that is normally available.
-  
+
-  
+
+
+
+
+
-    return o == DESTROYED ;
+    return o == DESTROYED;
-  
+
-    protected Invalid() {
-    }
+
+    protected Invalid() {}
+
+
+
+
+
-    
+
-      return buf.capacity() == 3 
-          && buf.get() == DSCODE.DS_FIXED_ID_SHORT 
+      return buf.capacity() == 3 && buf.get() == DSCODE.DS_FIXED_ID_SHORT
+
-  
+
-    protected LocalInvalid() {
-    }
+
+    protected LocalInvalid() {}
+
+
+
-    protected Destroyed() {
-    }
+
+    protected Destroyed() {}
+
+
+
+
+
+
-  }  
+  }
-    protected Tombstone() {
-    }
+
+    protected Tombstone() {}
+
+
+
+
+
+
-  }  
+  }
-    protected Removed() {
-    }
+
+    protected Removed() {}
+
+
+
+
+
+
-  
+
-    protected Removed2() {
-    }
+
+    protected Removed2() {}
+
+
+
+
+
+
-  
+
-    protected NotAvailable() {
-    }
+    protected NotAvailable() {}
+
-  
+
-    protected NotAToken() {
-    }
+    protected NotAToken() {}
+
-  
+
-    public EndOfStream() {
-    }
+    public EndOfStream() {}
+
+
+
+
+
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66