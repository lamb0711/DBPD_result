Geode 7013 command line help broken (#3858)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Owen Nichols <onichols@pivotal.io>
+import static org.apache.geode.management.internal.cli.GfshParser.LINE_SEPARATOR;
+import static org.apache.geode.management.internal.cli.GfshParser.LONG_OPTION_SPECIFIER;
+import static org.apache.geode.management.internal.cli.GfshParser.OPTION_VALUE_SPECIFIER;
+
-import java.util.Collections;
-import org.apache.geode.management.internal.cli.GfshParser;
+  private static final String NO_HELP_EXISTS_FOR_THIS_COMMAND = "No help exists for this command.";
+  private static final String HELP_INSTRUCTIONS = LINE_SEPARATOR + "Use " + CliStrings.HELP
+      + " <command name> to display detailed usage information for a specific command."
+      + LINE_SEPARATOR
+      + "Help with command and parameter completion can also be obtained by entering all or a portion of either followed by the \"TAB\" key.";
-    if (related == null) {
-      return;
-    }
-      if (isNotNullOrBlank(cliOption.specifiedDefaultValue())) {
+      if (isNonEmptyAnnotation(cliOption.specifiedDefaultValue())) {
-      if (isNotNullOrBlank(cliOption.unspecifiedDefaultValue())) {
+      if (isNonEmptyAnnotation(cliOption.unspecifiedDefaultValue())) {
-              .append("  is required").append(GfshParser.LINE_SEPARATOR);
+              .append("  is required").append(LINE_SEPARATOR);
-          .append(GfshParser.LINE_SEPARATOR);
+          .append(LINE_SEPARATOR);
-    Method method = commands.get(buffer);
-    if (method == null) {
-      return "no help exists for this command.";
+    List<Method> methodList = commands.keySet()
+        .stream()
+        .filter(key -> key.startsWith(buffer))
+        .map(commands::get).collect(Collectors.toList());
+
+    boolean summarize = methodList.size() > 1;
+    String helpString = methodList.stream()
+        .map(m -> getHelp(m.getDeclaredAnnotation(CliCommand.class),
+            summarize ? null : m.getParameterAnnotations(),
+            summarize ? null : m.getParameterTypes()))
+        .map(helpBlock -> helpBlock.toString(terminalWidth))
+        .reduce((s, s2) -> s + s2)
+        .orElse(NO_HELP_EXISTS_FOR_THIS_COMMAND);
+
+    if (summarize) {
+      helpString += HELP_INSTRUCTIONS;
-    HelpBlock helpBlock = getHelp(method.getDeclaredAnnotation(CliCommand.class),
-        method.getParameterAnnotations(), method.getParameterTypes());
-    return helpBlock.toString(terminalWidth);
+    return helpString;
+    List<String> topicKeys = this.topics.keySet()
+        .stream()
+        .filter(t -> buffer == null || t.toLowerCase().startsWith(buffer.toLowerCase()))
+        .sorted()
+        .collect(Collectors.toList());
+
-    if (StringUtils.isBlank(buffer)) {
-      builder.append(CliStrings.HINT__MSG__TOPICS_AVAILABLE).append(GfshParser.LINE_SEPARATOR)
-          .append(GfshParser.LINE_SEPARATOR);
+    if (topicKeys.isEmpty()) {
+      builder.append(CliStrings.format(CliStrings.HINT__MSG__UNKNOWN_TOPIC, buffer))
+          .append(LINE_SEPARATOR).append(LINE_SEPARATOR);
+    } else if (topicKeys.size() == 1) {
+      Topic oneTopic = this.topics.get(topicKeys.get(0));
+      builder.append(oneTopic.desc).append(LINE_SEPARATOR)
+          .append(LINE_SEPARATOR);
+      oneTopic.relatedCommands.stream().sorted().forEach(command -> builder.append(command.command)
+          .append(": ").append(command.desc).append(LINE_SEPARATOR));
+    } else {
+      builder.append(CliStrings.HINT__MSG__TOPICS_AVAILABLE).append(LINE_SEPARATOR)
+          .append(LINE_SEPARATOR);
-      List<String> sortedTopics = new ArrayList<>(topics.keySet());
-      Collections.sort(sortedTopics);
-      sortedTopics.stream()
-          .forEachOrdered(topic -> builder.append(topic).append(GfshParser.LINE_SEPARATOR));
-      return builder.toString();
+      topicKeys.forEach(topic -> builder.append(topic).append(LINE_SEPARATOR));
-    Topic topic = topics.get(buffer);
-    if (topic == null) {
-      return CliStrings.format(CliStrings.HINT__MSG__UNKNOWN_TOPIC, buffer);
-    }
-
-    builder.append(topic.desc).append(GfshParser.LINE_SEPARATOR).append(GfshParser.LINE_SEPARATOR);
-    Collections.sort(topic.relatedCommands);
-    topic.relatedCommands.stream().forEachOrdered(command -> builder.append(command.command)
-        .append(": ").append(command.desc).append(GfshParser.LINE_SEPARATOR));
-  HelpBlock getHelp() {
+  private HelpBlock getHelp() {
-    if (isNotNullOrBlank(cliOption.specifiedDefaultValue())) {
+    if (isNonEmptyAnnotation(cliOption.specifiedDefaultValue())) {
-    if (isNotNullOrBlank(cliOption.unspecifiedDefaultValue())) {
+    if (isNonEmptyAnnotation(cliOption.unspecifiedDefaultValue())) {
-  private <T> T getAnnotation(Annotation[] annotations, Class<?> klass) {
+  @SuppressWarnings("unchecked")
+  private <T> T getAnnotation(Annotation[] annotations, Class<T> klass) {
-    buffer.append(GfshParser.LONG_OPTION_SPECIFIER).append(key0);
+    buffer.append(LONG_OPTION_SPECIFIER).append(key0);
-    boolean hasSpecifiedDefault = isNotNullOrBlank(cliOption.specifiedDefaultValue());
+    boolean hasSpecifiedDefault = isNonEmptyAnnotation(cliOption.specifiedDefaultValue());
-    buffer.append(GfshParser.OPTION_VALUE_SPECIFIER).append(VALUE_FIELD);
+    buffer.append(OPTION_VALUE_SPECIFIER).append(VALUE_FIELD);
-    for (int i = 1; i < keys.length; i++) {
-      synonyms.add(keys[i]);
-    }
+    synonyms.addAll(Arrays.asList(keys).subList(1, keys.length));
-  private static boolean isNotNullOrBlank(String value) {
+  private static boolean isNonEmptyAnnotation(String value) {

MOV26 MOV26 INS26 UPD40 UPD40 INS40 INS23 INS23 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS79 UPD42 INS42 INS42 INS45 INS42 INS42 INS27 INS60 INS25 INS60 INS25 INS42 INS45 UPD74 MOV21 INS42 INS45 INS40 INS45 INS42 INS45 INS74 INS39 INS59 UPD43 INS42 INS8 INS42 MOV74 INS59 INS32 MOV8 INS25 INS43 INS43 MOV43 UPD42 INS32 INS42 INS27 UPD42 UPD42 INS32 INS21 INS42 INS32 INS42 INS42 INS21 INS27 INS8 MOV8 UPD42 UPD42 INS42 UPD42 INS32 INS42 INS32 INS42 INS32 INS32 INS34 INS32 INS42 INS42 INS7 INS32 INS42 INS32 INS32 INS32 INS34 MOV60 MOV21 MOV21 INS42 UPD42 INS42 INS32 INS42 INS34 INS40 UPD42 UPD42 INS42 INS32 INS42 INS90 INS42 INS42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS32 INS42 INS86 INS59 INS59 INS27 INS32 INS42 INS86 INS32 INS42 INS42 UPD42 INS42 INS32 UPD42 INS42 UPD42 MOV42 UPD42 INS32 INS42 INS59 INS32 INS32 INS42 INS86 INS59 MOV32 INS42 INS42 INS42 INS42 INS32 INS42 INS59 INS27 INS42 INS42 MOV32 INS22 INS32 INS42 MOV32 INS42 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 MOV42 INS42 INS42 INS59 INS32 INS42 INS22 UPD42 MOV42 INS42 INS27 INS32 INS52 INS42 UPD42 MOV42 INS42 INS34 UPD40 UPD40 INS42 INS42 INS42 INS42 MOV42 MOV32 INS16 INS16 INS52 INS42 INS42 INS33 INS32 INS42 INS32 UPD42 INS42 INS33 INS32 INS42 INS33 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL40 DEL40 DEL32 DEL42 DEL33 DEL27 DEL45 DEL41 DEL8 DEL25 DEL32 DEL32 DEL32 DEL41 DEL42 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL41 DEL42 DEL42 DEL32 DEL25 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL40 DEL32 DEL21 DEL76 DEL40 DEL40 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24