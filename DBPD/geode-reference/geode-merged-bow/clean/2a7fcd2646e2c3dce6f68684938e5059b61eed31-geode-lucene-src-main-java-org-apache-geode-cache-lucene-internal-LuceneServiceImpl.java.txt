GEODE-3930: Create lucene index on an existing region

- This is currently just an internal method to create the index on an existing
region.  It does not actually index the existing data in the region.
- Adding a parameter to LuceneIndexFactoryImpl.create to allow creation on
an existing region.

+import org.apache.geode.cache.AttributesFactory;
+import org.apache.geode.cache.EvictionAlgorithm;
+import org.apache.geode.cache.EvictionAttributes;
+import org.apache.geode.internal.cache.InternalRegion;
+import org.apache.geode.internal.cache.PartitionedRegion;
-      LuceneSerializer serializer) {
+      LuceneSerializer serializer, boolean allowOnExistingRegion) {
-    String[] fields = (String[]) fieldsSet.toArray(new String[fieldsSet.size()]);
+    String[] fields = fieldsSet.toArray(new String[fieldsSet.size()]);
-    createIndex(indexName, regionPath, analyzer, fieldAnalyzers, serializer, fields);
+    createIndex(indexName, regionPath, analyzer, fieldAnalyzers, serializer, allowOnExistingRegion,
+        fields);
-      final String... fields) {
+      boolean allowOnExistingRegion, final String... fields) {
-    Region region = cache.getRegion(regionPath);
-    if (region != null) {
+    PartitionedRegion region = (PartitionedRegion) cache.getRegion(regionPath);
+
+    LuceneRegionListener regionListener = new LuceneRegionListener(this, cache, indexName,
+        regionPath, fields, analyzer, fieldAnalyzers, serializer);
+    if (region == null) {
+      cache.addRegionListener(regionListener);
+      return;
+    }
+
+    if (!allowOnExistingRegion) {
-    cache.addRegionListener(new LuceneRegionListener(this, cache, indexName, regionPath, fields,
+
+    createIndexOnExistingRegion(region, indexName, regionPath, fields, analyzer, fieldAnalyzers,
+        serializer);
+
+  }
+
+  private void createIndexOnExistingRegion(PartitionedRegion region, String indexName,
+      String regionPath, String[] fields, Analyzer analyzer, Map<String, Analyzer> fieldAnalyzers,
+      LuceneSerializer serializer) {
+    validateRegionAttributes(region.getAttributes());
+
+    String aeqId = LuceneServiceImpl.getUniqueIndexName(indexName, regionPath);
+    region.addAsyncEventQueueId(aeqId, true);
+
+    region.addCacheServiceProfile(new LuceneIndexCreationProfile(indexName, regionPath, fields,
+
+    LuceneIndexImpl luceneIndex = beforeDataRegionCreated(indexName, regionPath,
+        region.getAttributes(), analyzer, fieldAnalyzers, aeqId, serializer, fields);
+
+    afterDataRegionCreated(luceneIndex);
+  }
+
+  static void validateRegionAttributes(RegionAttributes attrs) {
+    if (!attrs.getDataPolicy().withPartitioning()) {
+      // replicated region
+      throw new UnsupportedOperationException(
+          "Lucene indexes on replicated regions are not supported");
+    }
+
+    // For now we cannot support eviction with local destroy.
+    // Eviction with overflow to disk still needs to be supported
+    EvictionAttributes evictionAttributes = attrs.getEvictionAttributes();
+    EvictionAlgorithm evictionAlgorithm = evictionAttributes.getAlgorithm();
+    if (evictionAlgorithm != EvictionAlgorithm.NONE
+        && evictionAttributes.getAction().isLocalDestroy()) {
+      throw new UnsupportedOperationException(
+          "Lucene indexes on regions with eviction and action local destroy are not supported");
+    }
+    String aeqId = LuceneServiceImpl.getUniqueIndexName(index.getName(), index.getRegionPath());
+    AsyncEventQueueImpl aeq = (AsyncEventQueueImpl) cache.getAsyncEventQueue(aeqId);
+    AbstractPartitionedRepositoryManager repositoryManager =
+        (AbstractPartitionedRepositoryManager) index.getRepositoryManager();
+    repositoryManager.allowRepositoryComputation();
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS44 INS44 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS39 INS42 INS39 INS42 INS60 INS25 INS21 INS43 INS42 INS43 INS42 INS43 INS42 MOV5 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS21 INS60 INS21 INS21 INS60 INS21 INS43 INS42 INS25 INS60 INS60 INS25 INS60 INS60 INS60 INS21 MOV5 UPD43 INS43 INS59 INS27 INS8 INS38 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS42 INS38 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 MOV32 INS42 UPD42 INS11 INS42 INS42 MOV14 INS42 INS33 MOV21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS53 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS32 INS53 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS11 INS42 INS42 INS43 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS40 INS32 INS42 INS14 INS42 INS42 INS32 INS32 INS43 INS32 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL11 DEL42 DEL33 DEL27