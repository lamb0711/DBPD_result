Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A BucketOperator is used by the PartitionedRegionLoadModel to perform the actual
- * operations such as moving a bucket or creating a redundant copy.
+ * A BucketOperator is used by the PartitionedRegionLoadModel to perform the actual operations such
+ * as moving a bucket or creating a redundant copy.
-   * Create a redundancy copy of a bucket on a given node. This call may be
-   * asynchronous, it will notify the completion when the the operation is done.
+   * Create a redundancy copy of a bucket on a given node. This call may be asynchronous, it will
+   * notify the completion when the the operation is done.
-   * Note that the completion is not required to be threadsafe, so implementors
-   * should ensure the completion is invoked by the calling thread of
-   * createRedundantBucket, usually by invoking the completions in waitForOperations.
+   * Note that the completion is not required to be threadsafe, so implementors should ensure the
+   * completion is invoked by the calling thread of createRedundantBucket, usually by invoking the
+   * completions in waitForOperations.
-   * @param targetMember
-   *          the node to create the bucket on
-   * @param bucketId
-   *          the id of the bucket to create
-   * @param colocatedRegionBytes
-   *          the size of the bucket in bytes
-   * @param completion
-   *          a callback which will receive a notification on the success or
-   *          failure of the operation.
+   * @param targetMember the node to create the bucket on
+   * @param bucketId the id of the bucket to create
+   * @param colocatedRegionBytes the size of the bucket in bytes
+   * @param completion a callback which will receive a notification on the success or failure of the
+   *        operation.
-  void createRedundantBucket(InternalDistributedMember targetMember,
-      int bucketId, Map<String, Long> colocatedRegionBytes, Completion completion);
+  void createRedundantBucket(InternalDistributedMember targetMember, int bucketId,
+      Map<String, Long> colocatedRegionBytes, Completion completion);
-   * @param sourceMember The member we want to move the bucket off of. 
+   * 
+   * @param sourceMember The member we want to move the bucket off of.
-  boolean moveBucket(InternalDistributedMember sourceMember,
-      InternalDistributedMember targetMember, int bucketId,
-      Map<String, Long> colocatedRegionBytes);
+  boolean moveBucket(InternalDistributedMember sourceMember, InternalDistributedMember targetMember,
+      int bucketId, Map<String, Long> colocatedRegionBytes);
-   * Move a primary from one node to another. This method will
-   * not be called unless both nodes are hosting the bucket, and the source
-   * node is the primary for the bucket.
+   * Move a primary from one node to another. This method will not be called unless both nodes are
+   * hosting the bucket, and the source node is the primary for the bucket.
+   * 
-  boolean movePrimary(InternalDistributedMember source,
-      InternalDistributedMember target, int bucketId);
-  
+  boolean movePrimary(InternalDistributedMember source, InternalDistributedMember target,
+      int bucketId);
+
-   * Wait for any pending asynchronous operations that this thread submitted
-   * earlier to complete. Currently only createRedundantBucket may be
-   * asynchronous.
+   * Wait for any pending asynchronous operations that this thread submitted earlier to complete.
+   * Currently only createRedundantBucket may be asynchronous.
-  
+
-   * Callbacks for asnychonous operations. These methods will be invoked when an
-   * ansynchronous operation finishes.
+   * Callbacks for asnychonous operations. These methods will be invoked when an ansynchronous
+   * operation finishes.
-   * They will be completed when createRedundantBucket or waitForOperations is
-   * called.
+   * They will be completed when createRedundantBucket or waitForOperations is called.
+
-}
+}

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66