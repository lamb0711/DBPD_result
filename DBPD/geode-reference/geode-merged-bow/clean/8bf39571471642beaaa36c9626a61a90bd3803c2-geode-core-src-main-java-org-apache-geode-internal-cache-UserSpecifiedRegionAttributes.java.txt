Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * It may be used when collecting attributes from an XML parser or from attribute changes made using the
- * {@link org.apache.geode.cache.AttributesFactory}.  Its initial usage was to validate
- * when a user set a value which should not be set (for PartitionedRegions).
+ * It may be used when collecting attributes from an XML parser or from attribute changes made using
+ * the {@link org.apache.geode.cache.AttributesFactory}. Its initial usage was to validate when a
+ * user set a value which should not be set (for PartitionedRegions).
-public abstract class UserSpecifiedRegionAttributes<K,V> implements RegionAttributes<K,V>
-{
+public abstract class UserSpecifiedRegionAttributes<K, V> implements RegionAttributes<K, V> {
-  
+
-  
+
-  private  boolean hasEnableAsyncConflation = false;
-  
-  
+  private boolean hasEnableAsyncConflation = false;
+
+
-  
-  
+
+
-  private  boolean hasPoolName = false;
+  private boolean hasPoolName = false;
-  
-/**
+
+  /**
-  
+
-  
-  public boolean hasCacheLoader()
-  {
+
+  public boolean hasCacheLoader() {
-  public boolean hasCacheWriter()
-  {
+
+  public boolean hasCacheWriter() {
-  public boolean hasKeyConstraint()
-  {
+
+  public boolean hasKeyConstraint() {
-  public boolean hasValueConstraint()
-  {
+
+  public boolean hasValueConstraint() {
-  public boolean hasRegionTimeToLive()
-  {
+
+  public boolean hasRegionTimeToLive() {
-  public boolean hasRegionIdleTimeout()
-  {
+
+  public boolean hasRegionIdleTimeout() {
-  public boolean hasEntryTimeToLive()
-  {
+
+  public boolean hasEntryTimeToLive() {
+
-  public boolean hasEntryIdleTimeout()
-  {
+
+  public boolean hasEntryIdleTimeout() {
+
-  public boolean hasMirrorType()
-  {
+
+  public boolean hasMirrorType() {
-  public boolean hasDataPolicy()
-  {
+
+  public boolean hasDataPolicy() {
-  public boolean hasScope()
-  {
+
+  public boolean hasScope() {
-  public boolean hasCacheListeners()
-  {
+
+  public boolean hasCacheListeners() {
-  public boolean hasGatewaySenderId()
-  {
+
+  public boolean hasGatewaySenderId() {
+
-  public boolean hasInitialCapacity()
-  {
+
+  public boolean hasInitialCapacity() {
-  public boolean hasLoadFactor()
-  {
+
+  public boolean hasLoadFactor() {
-  public boolean hasConcurrencyLevel()
-  {
+
+  public boolean hasConcurrencyLevel() {
+
-  public boolean hasStatisticsEnabled()
-  {
+
+  public boolean hasStatisticsEnabled() {
-  public boolean hasIgnoreJTA()
-  {
+
+  public boolean hasIgnoreJTA() {
-  public boolean hasIsLockGrantor()
-  {
+
+  public boolean hasIsLockGrantor() {
-  public boolean hasPersistBackup()
-  {
+
+  public boolean hasPersistBackup() {
-  public boolean hasEarlyAck()
-  {
+
+  public boolean hasEarlyAck() {
-  public boolean hasMulticastEnabled()
-  {
+
+  public boolean hasMulticastEnabled() {
-  public boolean hasPublisher()
-  {
+
+  public boolean hasPublisher() {
-  public boolean hasPartitionAttributes()
-  {
+
+  public boolean hasPartitionAttributes() {
-  public boolean hasSubscriptionAttributes()
-  {
+
+  public boolean hasSubscriptionAttributes() {
-  public boolean hasEnableSubscriptionConflation()
-  {
+
+  public boolean hasEnableSubscriptionConflation() {
-  public boolean hasEnableAsyncConflation()
-  {
+
+  public boolean hasEnableAsyncConflation() {
-  public boolean hasIndexMaintenanceSynchronous()
-  {
+
+  public boolean hasIndexMaintenanceSynchronous() {
-  public boolean hasDiskWriteAttributes()
-  {
+
+  public boolean hasDiskWriteAttributes() {
-  public boolean hasDiskDirs()
-  {
+
+  public boolean hasDiskDirs() {
-  public boolean hasMembershipAttributes()
-  {
+
+  public boolean hasMembershipAttributes() {
-  public boolean hasEvictionAttributes()
-  {
+
+  public boolean hasEvictionAttributes() {
-  public boolean hasCustomEviction()
-  {
+
+  public boolean hasCustomEviction() {
-  public boolean hasPoolName()
-  {
+  public boolean hasPoolName() {
-  
+
-  
+
-  
-  public boolean hasCloningEnabled()
-  {
+
+  public boolean hasCloningEnabled() {
+
+
-  
-  public void setHasCacheListeners(boolean hasCacheListeners)
-  {
+
+  public void setHasCacheListeners(boolean hasCacheListeners) {
-  
-  public void setHasGatewaySenderIds(boolean hasgatewaySenders)
-  {
+
+  public void setHasGatewaySenderIds(boolean hasgatewaySenders) {
-  
+
-  
-  public void setHasCacheLoader(boolean hasCacheLoader)
-  {
+
+  public void setHasCacheLoader(boolean hasCacheLoader) {
-  public void setHasCacheWriter(boolean hasCacheWriter)
-  {
+
+  public void setHasCacheWriter(boolean hasCacheWriter) {
-  public void setHasConcurrencyLevel(boolean hasConcurrencyLevel)
-  {
+
+  public void setHasConcurrencyLevel(boolean hasConcurrencyLevel) {
+
-  public void setHasDataPolicy(boolean hasDataPolicy)
-  {
+
+  public void setHasDataPolicy(boolean hasDataPolicy) {
-  public void setHasDiskDirs(boolean hasDiskDirs)
-  {
+
+  public void setHasDiskDirs(boolean hasDiskDirs) {
-  public void setHasDiskWriteAttributes(boolean hasDiskWriteAttributes)
-  {
+
+  public void setHasDiskWriteAttributes(boolean hasDiskWriteAttributes) {
-  public void setHasEarlyAck(boolean hasEarlyAck)
-  {
+
+  public void setHasEarlyAck(boolean hasEarlyAck) {
-  public void setHasEnableAsyncConflation(boolean hasEnableAsyncConflation)
-  {
+
+  public void setHasEnableAsyncConflation(boolean hasEnableAsyncConflation) {
-  public void setHasEnableSubscriptionConflation(boolean hasEnableSubscriptionConflation)
-  {
+
+  public void setHasEnableSubscriptionConflation(boolean hasEnableSubscriptionConflation) {
-  public void setHasEntryIdleTimeout(boolean hasEntryIdleTimeout)
-  {
+
+  public void setHasEntryIdleTimeout(boolean hasEntryIdleTimeout) {
+
-  public void setHasEntryTimeToLive(boolean hasEntryTimeToLive)
-  {
+
+  public void setHasEntryTimeToLive(boolean hasEntryTimeToLive) {
+
-  public void setHasEvictionAttributes(boolean hasEvictionAttributes)
-  {
+
+  public void setHasEvictionAttributes(boolean hasEvictionAttributes) {
-  public void setHasCustomEviction(boolean hasCustomEviction)
-  {
+
+  public void setHasCustomEviction(boolean hasCustomEviction) {
-  public void setHasIgnoreJTA(boolean hasIgnoreJTA)
-  {
+
+  public void setHasIgnoreJTA(boolean hasIgnoreJTA) {
-  public void setHasIndexMaintenanceSynchronous(
-      boolean hasIndexMaintenanceSynchronous)
-  {
+
+  public void setHasIndexMaintenanceSynchronous(boolean hasIndexMaintenanceSynchronous) {
-  public void setHasInitialCapacity(boolean hasInitialCapacity)
-  {
+
+  public void setHasInitialCapacity(boolean hasInitialCapacity) {
-  public void setHasIsLockGrantor(boolean hasIsLockGrantor)
-  {
+
+  public void setHasIsLockGrantor(boolean hasIsLockGrantor) {
-  public void setHasKeyConstraint(boolean hasKeyConstraint)
-  {
+
+  public void setHasKeyConstraint(boolean hasKeyConstraint) {
-  public void setHasLoadFactor(boolean hasLoadFactor)
-  {
+
+  public void setHasLoadFactor(boolean hasLoadFactor) {
-  public void setHasMembershipAttributes(boolean hasMembershipAttributes)
-  {
+
+  public void setHasMembershipAttributes(boolean hasMembershipAttributes) {
-  public void setHasMulticastEnabled(boolean hasMulticastEnabled)
-  {
+
+  public void setHasMulticastEnabled(boolean hasMulticastEnabled) {
-  public void setHasPartitionAttributes(boolean hasPartitionAttributes)
-  {
+
+  public void setHasPartitionAttributes(boolean hasPartitionAttributes) {
-  public void setHasPublisher(boolean hasPublisher)
-  {
+
+  public void setHasPublisher(boolean hasPublisher) {
-  public void setHasRegionIdleTimeout(boolean hasRegionIdleTimeout)
-  {
+
+  public void setHasRegionIdleTimeout(boolean hasRegionIdleTimeout) {
-  public void setHasRegionTimeToLive(boolean hasRegionTimeToLive)
-  {
+
+  public void setHasRegionTimeToLive(boolean hasRegionTimeToLive) {
-  public void setHasScope(boolean hasScope)
-  {
+
+  public void setHasScope(boolean hasScope) {
-  public void setHasStatisticsEnabled(boolean hasStatisticsEnabled)
-  {
+
+  public void setHasStatisticsEnabled(boolean hasStatisticsEnabled) {
-  public void setHasSubscriptionAttributes(boolean hasSubscriptionAttributes)
-  {
+
+  public void setHasSubscriptionAttributes(boolean hasSubscriptionAttributes) {
-  public void setHasValueConstraint(boolean hasValueConstraint)
-  {
+
+  public void setHasValueConstraint(boolean hasValueConstraint) {
-   * If set to true then an exception will be thrown at creation
-   * time if hasPoolName is not true.
+   * If set to true then an exception will be thrown at creation time if hasPoolName is not true.
+   * 
-  
-  public void setHasPoolName(boolean hasPool)
-  {
+
+  public void setHasPoolName(boolean hasPool) {
-  
+
-  
+
-  
+
-    for(int i=0; i < thisFields.length; i++) {
+    for (int i = 0; i < thisFields.length; i++) {
-          Assert.assertTrue(false, "Could not access field" + thisFields[i].getName() + " on " + getClass());
+          Assert.assertTrue(false,
+              "Could not access field" + thisFields[i].getName() + " on " + getClass());
-//    this.hasCacheListeners = b;
-//    this.hasCacheLoader = b;
-//    this.hasCacheWriter = b;
-//    this.hasConcurrencyLevel = b;
-//    this.hasDataPolicy = b;
-//    this.hasDiskDirs = b;
-//    this.hasDiskWriteAttributes = b;
-//    this.hasEarlyAck = b;
-//    this.hasEnableAsyncConflation = b;
-//    this.hasEnableSubscriptionConflation = b;
-//    this.hasEnableGateway = b;
-//    this.hasEntryIdleTimeout = b;
-//    this.hasEntryTimeToLive = b;
-//    this.hasEvictionAttributes = b;
-//    this.hasIgnoreJTA = b;
-//    this.hasIndexMaintenanceSynchronous = b;
-//    this.hasInitialCapacity = b;
-//    this.hasIsLockGrantor = b;
-//    this.hasKeyConstraint = b;
-//    this.hasLoadFactor = b;
-//    this.hasMembershipAttributes = b;
-//    this.hasMulticastEnabled = b;
-//    this.hasPartitionAttributes = b;
-//    this.hasPublisher = b;
-//    this.hasRegionIdleTimeout = b;
-//    this.hasRegionTimeToLive = b;
-//    this.hasScope = b;
-//    this.hasStatisticsEnabled = b;
-//    this.hasSubscriptionAttributes = b;
-//    this.hasValueConstraint = b;
+    // this.hasCacheListeners = b;
+    // this.hasCacheLoader = b;
+    // this.hasCacheWriter = b;
+    // this.hasConcurrencyLevel = b;
+    // this.hasDataPolicy = b;
+    // this.hasDiskDirs = b;
+    // this.hasDiskWriteAttributes = b;
+    // this.hasEarlyAck = b;
+    // this.hasEnableAsyncConflation = b;
+    // this.hasEnableSubscriptionConflation = b;
+    // this.hasEnableGateway = b;
+    // this.hasEntryIdleTimeout = b;
+    // this.hasEntryTimeToLive = b;
+    // this.hasEvictionAttributes = b;
+    // this.hasIgnoreJTA = b;
+    // this.hasIndexMaintenanceSynchronous = b;
+    // this.hasInitialCapacity = b;
+    // this.hasIsLockGrantor = b;
+    // this.hasKeyConstraint = b;
+    // this.hasLoadFactor = b;
+    // this.hasMembershipAttributes = b;
+    // this.hasMulticastEnabled = b;
+    // this.hasPartitionAttributes = b;
+    // this.hasPublisher = b;
+    // this.hasRegionIdleTimeout = b;
+    // this.hasRegionTimeToLive = b;
+    // this.hasScope = b;
+    // this.hasStatisticsEnabled = b;
+    // this.hasSubscriptionAttributes = b;
+    // this.hasValueConstraint = b;
-  
-  public void setHasCloningEnabled(boolean val)
-  {
-    this.hasCloningEnabled=val;
+
+  public void setHasCloningEnabled(boolean val) {
+    this.hasCloningEnabled = val;
-  public void setHasDiskStoreName(boolean val)
-  {
+
+  public void setHasDiskStoreName(boolean val) {
-  public void setHasDiskSynchronous(boolean val)
-  {
+
+  public void setHasDiskSynchronous(boolean val) {
+
-  
-  public void initHasFields(UserSpecifiedRegionAttributes<K,V> other)
-  {
+
+  public void initHasFields(UserSpecifiedRegionAttributes<K, V> other) {
-    for(int i=0; i < thisFields.length; i++) {
+    for (int i = 0; i < thisFields.length; i++) {
-        
+
-          Method otherMeth = other.getClass().getMethod(fieldName/*, (Class[])null*/);
+          Method otherMeth = other.getClass().getMethod(fieldName/* , (Class[])null */);
-        }
-        catch (IllegalArgumentException e) {
-          Assert.assertTrue(false, "Illegal argument trying to set field " + e.getLocalizedMessage());
-        }
-        catch (InvocationTargetException e) {
+        } catch (IllegalArgumentException e) {
+          Assert.assertTrue(false,
+              "Illegal argument trying to set field " + e.getLocalizedMessage());
+        } catch (InvocationTargetException e) {
-        
+
-    Assert.assertTrue(hasCounter == HAS_COUNT, "Expected " + HAS_COUNT 
-        + " methods, got " + hasCounter + " last field: " + fieldName);
-    
-//    this.hasCacheListeners = other.hasCacheListeners();
-//    this.hasCacheLoader = other.hasCacheLoader();
-//    this.hasCacheWriter = other.hasCacheWriter();
-//    this.hasConcurrencyLevel = other.hasConcurrencyLevel();
-//    this.hasDataPolicy = other.hasDataPolicy();
-//    this.hasDiskDirs = other.hasDiskDirs();
-//    this.hasDiskWriteAttributes = other.hasDiskWriteAttributes();
-//    this.hasEarlyAck = other.hasEarlyAck();
-//    this.hasEnableAsyncConflation = other.hasEnableAsyncConflation();
-//    this.hasEnableSubscriptionConflation = other.hasEnableSubscriptionConflation();
-//    this.hasEnableGateway = other.hasEnableGateway();
-//    this.hasEntryIdleTimeout = other.hasEntryIdleTimeout();
-//    this.hasEntryTimeToLive = other.hasEntryTimeToLive();
-//    this.hasEvictionAttributes = other.hasEvictionAttributes();
-//    this.hasIgnoreJTA = other.hasIgnoreJTA();
-//    this.hasIndexMaintenanceSynchronous = other.hasIndexMaintenanceSynchronous();
-//    this.hasInitialCapacity = other.hasInitialCapacity();
-//    this.hasIsLockGrantor = other.hasIsLockGrantor();
-//    this.hasKeyConstraint = other.hasKeyConstraint();
-//    this.hasLoadFactor = other.hasLoadFactor();
-//    this.hasMembershipAttributes = other.hasMembershipAttributes();
-//    this.hasMulticastEnabled = other.hasMulticastEnabled();
-//    this.hasPartitionAttributes = other.hasPartitionAttributes();
-//    this.hasPublisher = other.hasPublisher();
-//    this.hasRegionIdleTimeout = other.hasRegionIdleTimeout();
-//    this.hasRegionTimeToLive = other.hasRegionTimeToLive();
-//    this.hasScope = other.hasScope();
-//    this.hasStatisticsEnabled = other.hasStatisticsEnabled();
-//    this.hasSubscriptionAttributes = other.hasSubscriptionAttributes();
-//    this.hasValueConstraint = other.hasValueConstraint();
+    Assert.assertTrue(hasCounter == HAS_COUNT,
+        "Expected " + HAS_COUNT + " methods, got " + hasCounter + " last field: " + fieldName);
+
+    // this.hasCacheListeners = other.hasCacheListeners();
+    // this.hasCacheLoader = other.hasCacheLoader();
+    // this.hasCacheWriter = other.hasCacheWriter();
+    // this.hasConcurrencyLevel = other.hasConcurrencyLevel();
+    // this.hasDataPolicy = other.hasDataPolicy();
+    // this.hasDiskDirs = other.hasDiskDirs();
+    // this.hasDiskWriteAttributes = other.hasDiskWriteAttributes();
+    // this.hasEarlyAck = other.hasEarlyAck();
+    // this.hasEnableAsyncConflation = other.hasEnableAsyncConflation();
+    // this.hasEnableSubscriptionConflation = other.hasEnableSubscriptionConflation();
+    // this.hasEnableGateway = other.hasEnableGateway();
+    // this.hasEntryIdleTimeout = other.hasEntryIdleTimeout();
+    // this.hasEntryTimeToLive = other.hasEntryTimeToLive();
+    // this.hasEvictionAttributes = other.hasEvictionAttributes();
+    // this.hasIgnoreJTA = other.hasIgnoreJTA();
+    // this.hasIndexMaintenanceSynchronous = other.hasIndexMaintenanceSynchronous();
+    // this.hasInitialCapacity = other.hasInitialCapacity();
+    // this.hasIsLockGrantor = other.hasIsLockGrantor();
+    // this.hasKeyConstraint = other.hasKeyConstraint();
+    // this.hasLoadFactor = other.hasLoadFactor();
+    // this.hasMembershipAttributes = other.hasMembershipAttributes();
+    // this.hasMulticastEnabled = other.hasMulticastEnabled();
+    // this.hasPartitionAttributes = other.hasPartitionAttributes();
+    // this.hasPublisher = other.hasPublisher();
+    // this.hasRegionIdleTimeout = other.hasRegionIdleTimeout();
+    // this.hasRegionTimeToLive = other.hasRegionTimeToLive();
+    // this.hasScope = other.hasScope();
+    // this.hasStatisticsEnabled = other.hasStatisticsEnabled();
+    // this.hasSubscriptionAttributes = other.hasSubscriptionAttributes();
+    // this.hasValueConstraint = other.hasValueConstraint();
+
+

UPD66 INS66 UPD66 UPD66 UPD66 DEL66