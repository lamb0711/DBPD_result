Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
+
-   * Does a execute Function on a server using connections from the given pool
-   * to communicate with the server.
+   * Does a execute Function on a server using connections from the given pool to communicate with
+   * the server.
+   * 
-  public static void execute(ExecutablePool pool, String region,
-      Function function, ServerRegionFunctionExecutor serverRegionExecutor,
-      ResultCollector resultCollector, byte hasResult, int mRetryAttempts) {
+  public static void execute(ExecutablePool pool, String region, Function function,
+      ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector resultCollector,
+      byte hasResult, int mRetryAttempts) {
-    AbstractOp reexecOp = null; 
+    AbstractOp reexecOp = null;
-    
-    final boolean isDebugEnabled =logger.isDebugEnabled();
+
+    final boolean isDebugEnabled = logger.isDebugEnabled();
-      
-    try {
+
+      try {
-          reexecOp = new ExecuteRegionFunctionOpImpl(
-              (ExecuteRegionFunctionOpImpl)op, (byte)1/* isReExecute */,
-              failedNodes);
+          reexecOp = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op,
+              (byte) 1/* isReExecute */, failedNodes);
-        }
-        else {
+        } else {
-      }
-    catch (InternalFunctionInvocationTargetException e) {
-      if (isDebugEnabled) {
-        logger.debug("ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}", e.getFailedNodeSet());
-      }
-      reexecute = true;
-      resultCollector.clearResults();
-      Set<String> failedNodesIds = e.getFailedNodeSet();
-      failedNodes.clear();
-      if (failedNodesIds != null) {
-        failedNodes.addAll(failedNodesIds);
-      }
-    }
-    catch (ServerConnectivityException se) {
-      retryAttempts++;
-      if (isDebugEnabled) {
-        logger.debug("ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}", se, retryAttempts, maxRetryAttempts );
-      }
-      if(se instanceof ServerOperationException){
-        throw se;
-      }
-      if ((retryAttempts > maxRetryAttempts && maxRetryAttempts !=-1) /*|| !function.isHA()*/)
-        throw se;
+      } catch (InternalFunctionInvocationTargetException e) {
+        if (isDebugEnabled) {
+          logger.debug(
+              "ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
+              e.getFailedNodeSet());
+        }
+        reexecute = true;
+        resultCollector.clearResults();
+        Set<String> failedNodesIds = e.getFailedNodeSet();
+        failedNodes.clear();
+        if (failedNodesIds != null) {
+          failedNodes.addAll(failedNodesIds);
+        }
+      } catch (ServerConnectivityException se) {
+        retryAttempts++;
+        if (isDebugEnabled) {
+          logger.debug(
+              "ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",
+              se, retryAttempts, maxRetryAttempts);
+        }
+        if (se instanceof ServerOperationException) {
+          throw se;
+        }
+        if ((retryAttempts > maxRetryAttempts && maxRetryAttempts != -1) /* || !function.isHA() */)
+          throw se;
-      reexecuteForServ = true;
-      resultCollector.clearResults();
-      failedNodes.clear();
-    }
-    }
-    while(reexecuteForServ);
+        reexecuteForServ = true;
+        resultCollector.clearResults();
+        failedNodes.clear();
+      }
+    } while (reexecuteForServ);
-    if ( reexecute && function.isHA()) {
-      ExecuteRegionFunctionOp.reexecute(pool, region, function,
-          serverRegionExecutor, resultCollector, hasResult, failedNodes,
-          maxRetryAttempts - 1);
+    if (reexecute && function.isHA()) {
+      ExecuteRegionFunctionOp.reexecute(pool, region, function, serverRegionExecutor,
+          resultCollector, hasResult, failedNodes, maxRetryAttempts - 1);
-  
-  public static void execute(ExecutablePool pool, String region,
-      String function, ServerRegionFunctionExecutor serverRegionExecutor,
-      ResultCollector resultCollector, byte hasResult, int mRetryAttempts, boolean isHA, boolean optimizeForWrite) {
+
+  public static void execute(ExecutablePool pool, String region, String function,
+      ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector resultCollector,
+      byte hasResult, int mRetryAttempts, boolean isHA, boolean optimizeForWrite) {
-    AbstractOp reexecOp = null; 
+    AbstractOp reexecOp = null;
-    do{
-    try {
-      if (reexecuteForServ) {
-        reexecOp = new ExecuteRegionFunctionOpImpl(
-            (ExecuteRegionFunctionOpImpl)op, (byte)1/* isReExecute */,
-            failedNodes);
-        pool.execute(reexecOp, 0);
-      }
-      else {
-        pool.execute(op, 0);
-      }
-      reexecute = false;
-      reexecuteForServ = false;
-    }
-    catch (InternalFunctionInvocationTargetException e) {
-      if (isDebugEnabled) {
-        logger.debug("ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}", e.getFailedNodeSet());
-      }
-      reexecute = true;
-      resultCollector.clearResults();
-      Set<String> failedNodesIds = e.getFailedNodeSet();
-      failedNodes.clear();
-      if (failedNodesIds != null) {
-        failedNodes.addAll(failedNodesIds);
-      }
-    }
-    catch (ServerConnectivityException se) {
-      if (isDebugEnabled) {
-        logger.debug("ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}", se, retryAttempts, maxRetryAttempts);
-      }
-      if(se instanceof ServerOperationException){
-        throw se;
-      }
-      retryAttempts++;
-      if ((retryAttempts >  maxRetryAttempts && maxRetryAttempts != -1) /*|| !isHA*/)
-        throw se;
+    do {
+      try {
+        if (reexecuteForServ) {
+          reexecOp = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op,
+              (byte) 1/* isReExecute */, failedNodes);
+          pool.execute(reexecOp, 0);
+        } else {
+          pool.execute(op, 0);
+        }
+        reexecute = false;
+        reexecuteForServ = false;
+      } catch (InternalFunctionInvocationTargetException e) {
+        if (isDebugEnabled) {
+          logger.debug(
+              "ExecuteRegionFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
+              e.getFailedNodeSet());
+        }
+        reexecute = true;
+        resultCollector.clearResults();
+        Set<String> failedNodesIds = e.getFailedNodeSet();
+        failedNodes.clear();
+        if (failedNodesIds != null) {
+          failedNodes.addAll(failedNodesIds);
+        }
+      } catch (ServerConnectivityException se) {
+        if (isDebugEnabled) {
+          logger.debug(
+              "ExecuteRegionFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",
+              se, retryAttempts, maxRetryAttempts);
+        }
+        if (se instanceof ServerOperationException) {
+          throw se;
+        }
+        retryAttempts++;
+        if ((retryAttempts > maxRetryAttempts && maxRetryAttempts != -1) /* || !isHA */)
+          throw se;
-      reexecute = true;
-      resultCollector.clearResults();
-      failedNodes.clear();
+        reexecute = true;
+        resultCollector.clearResults();
+        failedNodes.clear();
+      }
+    } while (reexecuteForServ);
+
+    if (reexecute && isHA) {
+      ExecuteRegionFunctionOp.reexecute(pool, region, function, serverRegionExecutor,
+          resultCollector, hasResult, failedNodes, maxRetryAttempts - 1, isHA, optimizeForWrite);
-  while(reexecuteForServ);
-  
-    if ( reexecute && isHA) {
-      ExecuteRegionFunctionOp.reexecute(pool, region, function,
-          serverRegionExecutor, resultCollector, hasResult, failedNodes,
-          maxRetryAttempts - 1, isHA, optimizeForWrite);
-    }
-  }
-  
-  public static void reexecute(ExecutablePool pool, String region,
-      Function function, ServerRegionFunctionExecutor serverRegionExecutor,
-      ResultCollector resultCollector, byte hasResult, Set<String> failedNodes, int maxRetryAttempts) {
+
+  public static void reexecute(ExecutablePool pool, String region, Function function,
+      ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector resultCollector,
+      byte hasResult, Set<String> failedNodes, int maxRetryAttempts) {
-     AbstractOp reExecuteOp = new ExecuteRegionFunctionOpImpl(
-          (ExecuteRegionFunctionOpImpl)op, (byte)1/*isReExecute*/, failedNodes);
+      AbstractOp reExecuteOp = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op,
+          (byte) 1/* isReExecute */, failedNodes);
-        logger.debug("ExecuteRegionFunction#reexecute: Sending Function Execution Message: {} to Server using pool: {} with failed nodes: {}", reExecuteOp.getMessage(), pool, failedNodes);
+        logger.debug(
+            "ExecuteRegionFunction#reexecute: Sending Function Execution Message: {} to Server using pool: {} with failed nodes: {}",
+            reExecuteOp.getMessage(), pool, failedNodes);
-          pool.execute(reExecuteOp,0);
-      }
-      catch (InternalFunctionInvocationTargetException e) {
+        pool.execute(reExecuteOp, 0);
+      } catch (InternalFunctionInvocationTargetException e) {
-          logger.debug("ExecuteRegionFunctionOp#reexecute : Received InternalFunctionInvocationTargetException. The failed nodes are {}", e.getFailedNodeSet());
+          logger.debug(
+              "ExecuteRegionFunctionOp#reexecute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
+              e.getFailedNodeSet());
-      }
-      catch (ServerConnectivityException se) {
+      } catch (ServerConnectivityException se) {
-          logger.debug("ExecuteRegionFunctionOp#reexecute : Received ServerConnectivity Exception.");
+          logger
+              .debug("ExecuteRegionFunctionOp#reexecute : Received ServerConnectivity Exception.");
-        
-        if(se instanceof ServerOperationException){
+
+        if (se instanceof ServerOperationException) {
-        if (retryAttempts > maxRetryAttempts && maxRetryAttempts != -2) 
+        if (retryAttempts > maxRetryAttempts && maxRetryAttempts != -2)
-  
-  public static void reexecute(ExecutablePool pool, String region,
-      String function, ServerRegionFunctionExecutor serverRegionExecutor,
-      ResultCollector resultCollector, byte hasResult, Set<String> failedNodes, int maxRetryAttempts, boolean isHA, boolean optimizeForWrite) {
+
+  public static void reexecute(ExecutablePool pool, String region, String function,
+      ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector resultCollector,
+      byte hasResult, Set<String> failedNodes, int maxRetryAttempts, boolean isHA,
+      boolean optimizeForWrite) {
-      
-      AbstractOp reExecuteOp = new ExecuteRegionFunctionOpImpl(
-          (ExecuteRegionFunctionOpImpl)op, (byte)1/*isReExecute*/, failedNodes);
+
+      AbstractOp reExecuteOp = new ExecuteRegionFunctionOpImpl((ExecuteRegionFunctionOpImpl) op,
+          (byte) 1/* isReExecute */, failedNodes);
-        logger.debug("ExecuteRegionFunction#reexecute : Sending Function Execution Message: {} to Server using pool: {}", reExecuteOp.getMessage(), pool);
+        logger.debug(
+            "ExecuteRegionFunction#reexecute : Sending Function Execution Message: {} to Server using pool: {}",
+            reExecuteOp.getMessage(), pool);
-          pool.execute(reExecuteOp,0);
-      }
-      catch (InternalFunctionInvocationTargetException e) {
+        pool.execute(reExecuteOp, 0);
+      } catch (InternalFunctionInvocationTargetException e) {
-          logger.debug("ExecuteRegionFunctionOp#reexecute : Received InternalFunctionInvocationTargetException. The failed nodes are {}", e.getFailedNodeSet());
+          logger.debug(
+              "ExecuteRegionFunctionOp#reexecute : Received InternalFunctionInvocationTargetException. The failed nodes are {}",
+              e.getFailedNodeSet());
-      }
-      catch (ServerConnectivityException se) {
-        if (isDebugEnabled) { 
-          logger.debug("ExecuteRegionFunctionOp#reexecute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}", se, retryAttempts, maxRetryAttempts);
+      } catch (ServerConnectivityException se) {
+        if (isDebugEnabled) {
+          logger.debug(
+              "ExecuteRegionFunctionOp#reexecute : Received ServerConnectivityException. The exception is {} The retryattempt is : {} maxRetryAttempts {}",
+              se, retryAttempts, maxRetryAttempts);
-        if(se instanceof ServerOperationException){
+        if (se instanceof ServerOperationException) {
-        if (retryAttempts > maxRetryAttempts && maxRetryAttempts != -2) 
+        if (retryAttempts > maxRetryAttempts && maxRetryAttempts != -2)
+
-    //To get the instance of the Function Statistics we need the function name or instance
+    // To get the instance of the Function Statistics we need the function name or instance
-    
+
-        ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector rc,
-        byte hasResult, Set<String> removedNodes) {
-      super(MessageType.EXECUTE_REGION_FUNCTION, 8
-          + serverRegionExecutor.getFilter().size() + removedNodes.size());
+        ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector rc, byte hasResult,
+        Set<String> removedNodes) {
+      super(MessageType.EXECUTE_REGION_FUNCTION,
+          8 + serverRegionExecutor.getFilter().size() + removedNodes.size());
-      byte functionState = AbstractExecution.getFunctionState(function.isHA(),
-          function.hasResult(), function.optimizeForWrite());
-      MemberMappedArgument memberMappedArg = serverRegionExecutor
-          .getMemberMappedArgument();
+      byte functionState = AbstractExecution.getFunctionState(function.isHA(), function.hasResult(),
+          function.optimizeForWrite());
+      MemberMappedArgument memberMappedArg = serverRegionExecutor.getMemberMappedArgument();
-      }
-      else {
+      } else {
-      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag(); 
+      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag();
-    
+
-        ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector rc,
-        byte hasResult, Set<String> removedNodes, boolean isHA, boolean optimizeForWrite, boolean calculateFnState ) {
-      super(MessageType.EXECUTE_REGION_FUNCTION, 8
-          + serverRegionExecutor.getFilter().size() + removedNodes.size());
+        ServerRegionFunctionExecutor serverRegionExecutor, ResultCollector rc, byte hasResult,
+        Set<String> removedNodes, boolean isHA, boolean optimizeForWrite,
+        boolean calculateFnState) {
+      super(MessageType.EXECUTE_REGION_FUNCTION,
+          8 + serverRegionExecutor.getFilter().size() + removedNodes.size());
-      if(calculateFnState){
-         functionState = AbstractExecution.getFunctionState(isHA,
-          hasResult == (byte)1 ? true : false, optimizeForWrite);
+      if (calculateFnState) {
+        functionState = AbstractExecution.getFunctionState(isHA,
+            hasResult == (byte) 1 ? true : false, optimizeForWrite);
-      MemberMappedArgument memberMappedArg = serverRegionExecutor
-          .getMemberMappedArgument();
+      MemberMappedArgument memberMappedArg = serverRegionExecutor.getMemberMappedArgument();
-      
-      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag(); 
-//      byte flags = this.executeOnBucketSet ? 
-//          (byte)(0x00 | ExecuteFunctionHelper.BUCKETS_AS_FILTER_MASK) : 0x00;
-//      flags = isReExecute == 1? (byte)(flags | ExecuteFunctionHelper.IS_REXECUTE_MASK) : flags;
+
+      this.executeOnBucketSet = serverRegionExecutor.getExecuteOnBucketSetFlag();
+      // byte flags = this.executeOnBucketSet ?
+      // (byte)(0x00 | ExecuteFunctionHelper.BUCKETS_AS_FILTER_MASK) : 0x00;
+      // flags = isReExecute == 1? (byte)(flags | ExecuteFunctionHelper.IS_REXECUTE_MASK) : flags;
-      
-      getMessage().addBytesPart(new byte[] { flags });
+
+      getMessage().addBytesPart(new byte[] {flags});
-    public ExecuteRegionFunctionOpImpl(
-        ExecuteRegionFunctionSingleHopOpImpl newop) {
+    public ExecuteRegionFunctionOpImpl(ExecuteRegionFunctionSingleHopOpImpl newop) {
-          newop.getResultCollector(), newop.getHasResult(),
-          new HashSet<String>(), newop.isHA(), newop
-              .optimizeForWrite(), false);
+          newop.getResultCollector(), newop.getHasResult(), new HashSet<String>(), newop.isHA(),
+          newop.optimizeForWrite(), false);
-    public ExecuteRegionFunctionOpImpl(ExecuteRegionFunctionOpImpl op,
-        byte isReExecute, Set<String> removedNodes) {
-      super(MessageType.EXECUTE_REGION_FUNCTION, 8
-          + op.executor.getFilter().size() + removedNodes.size());
+    public ExecuteRegionFunctionOpImpl(ExecuteRegionFunctionOpImpl op, byte isReExecute,
+        Set<String> removedNodes) {
+      super(MessageType.EXECUTE_REGION_FUNCTION,
+          8 + op.executor.getFilter().size() + removedNodes.size());
-      }
-      else {
+      } else {
-//      byte flags = this.executeOnBucketSet ?
-//          (byte)(0x00 | Op.BUCKETS_AS_FILTER_MASK) : 0x00;
-//      flags = isReExecute == 1? (byte)(flags | Op.IS_REXECUTE_MASK) : flags;
+      // byte flags = this.executeOnBucketSet ?
+      // (byte)(0x00 | Op.BUCKETS_AS_FILTER_MASK) : 0x00;
+      // flags = isReExecute == 1? (byte)(flags | Op.IS_REXECUTE_MASK) : flags;
-      getMessage().addBytesPart(new byte[] {flags });
+      getMessage().addBytesPart(new byte[] {flags});
-      if (GemFireCacheImpl.getClientFunctionTimeout() == GemFireCacheImpl.DEFAULT_CLIENT_FUNCTION_TIMEOUT) {
-        getMessage().addBytesPart(new byte[] { functionStateOrHasResult });
+      if (GemFireCacheImpl
+          .getClientFunctionTimeout() == GemFireCacheImpl.DEFAULT_CLIENT_FUNCTION_TIMEOUT) {
+        getMessage().addBytesPart(new byte[] {functionStateOrHasResult});
-      ChunkedMessage executeFunctionResponseMsg = (ChunkedMessage)msg;
+      ChunkedMessage executeFunctionResponseMsg = (ChunkedMessage) msg;
-              logger.debug("ExecuteRegionFunctionOpImpl#processResponse: received message of type EXECUTE_REGION_FUNCTION_RESULT. The number of parts are : {}", executeFunctionResponseMsg.getNumberOfParts());
+              logger.debug(
+                  "ExecuteRegionFunctionOpImpl#processResponse: received message of type EXECUTE_REGION_FUNCTION_RESULT. The number of parts are : {}",
+                  executeFunctionResponseMsg.getNumberOfParts());
-              Object resultResponse = executeFunctionResponseMsg.getPart(0)
-                  .getObject();
+              Object resultResponse = executeFunctionResponseMsg.getPart(0).getObject();
-                result = ((ArrayList)resultResponse).get(0);
-              }
-              else {
+                result = ((ArrayList) resultResponse).get(0);
+              } else {
-              
+
-                FunctionException ex = ((FunctionException)result);
+                FunctionException ex = ((FunctionException) result);
-                  DistributedMember memberID = (DistributedMember)((ArrayList)resultResponse)
-                      .get(1);
-                  this.resultCollector
-                      .addResult(memberID, cause);
-                  FunctionStats.getFunctionStats(this.functionId,
-                      this.executor.getRegion().getSystem())
+                  DistributedMember memberID =
+                      (DistributedMember) ((ArrayList) resultResponse).get(1);
+                  this.resultCollector.addResult(memberID, cause);
+                  FunctionStats
+                      .getFunctionStats(this.functionId, this.executor.getRegion().getSystem())
-                }
-                else if (((FunctionException)result).getCause() instanceof InternalFunctionInvocationTargetException) {
-                  InternalFunctionInvocationTargetException ifite = (InternalFunctionInvocationTargetException)ex
-                      .getCause();
+                } else if (((FunctionException) result)
+                    .getCause() instanceof InternalFunctionInvocationTargetException) {
+                  InternalFunctionInvocationTargetException ifite =
+                      (InternalFunctionInvocationTargetException) ex.getCause();
-                }
-                else{
+                } else {
-              }
-              else if (result instanceof Throwable) {
-                Throwable t = (Throwable)result;
-                  if (this.functionException == null) {
-                    if(result instanceof BucketMovedException){
-                      FunctionInvocationTargetException fite;
-                      if(isHA){
-                        fite = new InternalFunctionInvocationTargetException(
-                                              ((BucketMovedException)result).getMessage());
-                      }else {
-                        fite = new FunctionInvocationTargetException(
-                            ((BucketMovedException)result).getMessage());
-                      }
-                      this.functionException =  new FunctionException(fite);
-                      this.functionException.addException(fite);
+              } else if (result instanceof Throwable) {
+                Throwable t = (Throwable) result;
+                if (this.functionException == null) {
+                  if (result instanceof BucketMovedException) {
+                    FunctionInvocationTargetException fite;
+                    if (isHA) {
+                      fite = new InternalFunctionInvocationTargetException(
+                          ((BucketMovedException) result).getMessage());
+                    } else {
+                      fite = new FunctionInvocationTargetException(
+                          ((BucketMovedException) result).getMessage());
-                    else if (result instanceof CacheClosedException) {
-                      FunctionInvocationTargetException fite;
-                      if(isHA) {
-                        fite = new InternalFunctionInvocationTargetException(((CacheClosedException)result).getMessage());
-                      }
-                      else{
-                        fite = new FunctionInvocationTargetException(((CacheClosedException)result).getMessage());
-                      }
-                      if (resultResponse instanceof ArrayList) {
-                        DistributedMember memberID = (DistributedMember) ((ArrayList) resultResponse)
-                            .get(1);
-                        this.failedNodes.add(memberID.getId());
-                      }                   
-                      this.functionException = new FunctionException(fite);
-                      this.functionException.addException(fite);
+                    this.functionException = new FunctionException(fite);
+                    this.functionException.addException(fite);
+                  } else if (result instanceof CacheClosedException) {
+                    FunctionInvocationTargetException fite;
+                    if (isHA) {
+                      fite = new InternalFunctionInvocationTargetException(
+                          ((CacheClosedException) result).getMessage());
+                    } else {
+                      fite = new FunctionInvocationTargetException(
+                          ((CacheClosedException) result).getMessage());
-                    else {
-                      throwServerOp = true;
-                      this.functionException = new FunctionException(t);
-                      this.functionException.addException(t);
+                    if (resultResponse instanceof ArrayList) {
+                      DistributedMember memberID =
+                          (DistributedMember) ((ArrayList) resultResponse).get(1);
+                      this.failedNodes.add(memberID.getId());
+                    this.functionException = new FunctionException(fite);
+                    this.functionException.addException(fite);
+                    throwServerOp = true;
+                    this.functionException = new FunctionException(t);
-              }
-              else {
-                DistributedMember memberID = (DistributedMember)((ArrayList)resultResponse)
-                    .get(1);
+                } else {
+                  this.functionException.addException(t);
+                }
+              } else {
+                DistributedMember memberID =
+                    (DistributedMember) ((ArrayList) resultResponse).get(1);
-                FunctionStats.getFunctionStats(this.functionId,
-                    this.executor.getRegion().getSystem()).incResultsReceived();
+                FunctionStats
+                    .getFunctionStats(this.functionId, this.executor.getRegion().getSystem())
+                    .incResultsReceived();
-              logger.debug("ExecuteRegionFunctionOpImpl#processResponse: received all the results from server successfully.");
+              logger.debug(
+                  "ExecuteRegionFunctionOpImpl#processResponse: received all the results from server successfully.");
-              logger.debug("ExecuteRegionFunctionOpImpl#processResponse: received message of type EXCEPTION. The number of parts are : {}", executeFunctionResponseMsg.getNumberOfParts());
+              logger.debug(
+                  "ExecuteRegionFunctionOpImpl#processResponse: received message of type EXCEPTION. The number of parts are : {}",
+                  executeFunctionResponseMsg.getNumberOfParts());
-              FunctionException ex = ((FunctionException)obj);
-              if (((FunctionException)obj).getCause() instanceof InternalFunctionInvocationTargetException) {
-                InternalFunctionInvocationTargetException ifite = (InternalFunctionInvocationTargetException)ex
-                    .getCause();
+              FunctionException ex = ((FunctionException) obj);
+              if (((FunctionException) obj)
+                  .getCause() instanceof InternalFunctionInvocationTargetException) {
+                InternalFunctionInvocationTargetException ifite =
+                    (InternalFunctionInvocationTargetException) ex.getCause();
-            }
-            else if (obj instanceof Throwable) {
+            } else if (obj instanceof Throwable) {
-              throw new ServerOperationException(s, (Throwable)obj);
+              throw new ServerOperationException(s, (Throwable) obj);
-              logger.debug("ExecuteRegionFunctionOpImpl#processResponse: received message of type EXECUTE_REGION_FUNCTION_ERROR");
+              logger.debug(
+                  "ExecuteRegionFunctionOpImpl#processResponse: received message of type EXECUTE_REGION_FUNCTION_ERROR");
-            String errorMessage = executeFunctionResponseMsg.getPart(0)
-                .getString();
+            String errorMessage = executeFunctionResponseMsg.getPart(0).getString();
-            throw new InternalGemFireError("Unknown message type "
-                + executeFunctionResponseMsg.getMessageType());
+            throw new InternalGemFireError(
+                "Unknown message type " + executeFunctionResponseMsg.getMessageType());
-      }
-      finally {
+      } finally {

UPD66 UPD66