GEODE-8084: Declare parameter requirements for redis commands (#5068)

This commit replaces the existing 'imperative' parameter checks with a
more declarative style.

It only changes how the parameters for Set and List are checked.  The
others are done through the existing mechanism in the Executors.
+import org.apache.geode.redis.internal.ParameterRequirements.ExactParameterRequirements;
+import org.apache.geode.redis.internal.ParameterRequirements.MaximumParameterRequirements;
+import org.apache.geode.redis.internal.ParameterRequirements.MinimumParameterRequirements;
+import org.apache.geode.redis.internal.ParameterRequirements.ParameterRequirements;
+import org.apache.geode.redis.internal.ParameterRequirements.SpopParameterRequirements;
+import org.apache.geode.redis.internal.ParameterRequirements.UnspecifiedParameterRequirements;
+import org.apache.geode.redis.internal.executor.transactions.TransactionExecutor;
-  LINDEX(new LIndexExecutor()),
+  LINDEX(new LIndexExecutor(), new MinimumParameterRequirements(3)),
-  LLEN(new LLenExecutor()),
-  LPOP(new LPopExecutor()),
-  LPUSH(new LPushExecutor()),
-  LPUSHX(new LPushXExecutor()),
-  LRANGE(new LRangeExecutor()),
-  LREM(new LRemExecutor()),
-  LSET(new LSetExecutor()),
-  LTRIM(new LTrimExecutor()),
-  RPOP(new RPopExecutor()),
-  RPUSH(new RPushExecutor()),
-  RPUSHX(new RPushXExecutor()),
+  LLEN(new LLenExecutor(), new MinimumParameterRequirements(2)),
+  LPOP(new LPopExecutor(), new MinimumParameterRequirements(2)),
+  LPUSH(new LPushExecutor(), new MinimumParameterRequirements(3)),
+  LPUSHX(new LPushXExecutor(), new MinimumParameterRequirements(3)),
+  LRANGE(new LRangeExecutor(), new MinimumParameterRequirements(4)),
+  LREM(new LRemExecutor(), new MinimumParameterRequirements(4)),
+  LSET(new LSetExecutor(), new MinimumParameterRequirements(4)),
+  LTRIM(new LTrimExecutor(), new MinimumParameterRequirements(4)),
+  RPOP(new RPopExecutor(), new MinimumParameterRequirements(2)),
+  RPUSH(new RPushExecutor(), new MinimumParameterRequirements(3)),
+  RPUSHX(new RPushXExecutor(), new MinimumParameterRequirements(3)),
-  SADD(new SAddExecutor()),
-  SCARD(new SCardExecutor()),
-  SDIFF(new SDiffExecutor()),
-  SDIFFSTORE(new SDiffStoreExecutor()),
-  SISMEMBER(new SIsMemberExecutor()),
-  SINTER(new SInterExecutor()),
-  SINTERSTORE(new SInterStoreExecutor()),
-  SMEMBERS(new SMembersExecutor()),
-  SMOVE(new SMoveExecutor()),
-  SPOP(new SPopExecutor()),
-  SRANDMEMBER(new SRandMemberExecutor()),
-  SUNION(new SUnionExecutor()),
-  SUNIONSTORE(new SUnionStoreExecutor()),
-  SSCAN(new SScanExecutor()),
-  SREM(new SRemExecutor()),
+  SADD(new SAddExecutor(), new MinimumParameterRequirements(3)),
+  SCARD(new SCardExecutor(), new ExactParameterRequirements(2)),
+  SDIFF(new SDiffExecutor(), new MinimumParameterRequirements(2)),
+  SDIFFSTORE(new SDiffStoreExecutor(), new MinimumParameterRequirements(3)),
+  SISMEMBER(new SIsMemberExecutor(), new ExactParameterRequirements(3)),
+  SINTER(new SInterExecutor(), new MinimumParameterRequirements(2)),
+  SINTERSTORE(new SInterStoreExecutor(), new MinimumParameterRequirements(3)),
+  SMEMBERS(new SMembersExecutor(), new ExactParameterRequirements(2)),
+  SMOVE(new SMoveExecutor(), new ExactParameterRequirements(4)),
+  SPOP(new SPopExecutor(),
+      new MinimumParameterRequirements(2).and(new MaximumParameterRequirements(3))
+          .and(new SpopParameterRequirements())),
+  SRANDMEMBER(new SRandMemberExecutor(), new MinimumParameterRequirements(2)),
+  SUNION(new SUnionExecutor(), new MinimumParameterRequirements(2)),
+  SUNIONSTORE(new SUnionStoreExecutor(), new MinimumParameterRequirements(3)),
+  SSCAN(new SScanExecutor(), new MinimumParameterRequirements(3)),
+  SREM(new SRemExecutor(), new MinimumParameterRequirements(3)),
-
-  /**
-   * @return {@link Executor} for the command type
-   */
-  public Executor getExecutor() {
-    return executor;
-  };
+  private final ParameterRequirements parameterRequirements;
+    this(executor, new UnspecifiedParameterRequirements());
+  }
+
+  private RedisCommandType(Executor executor, ParameterRequirements parameterRequirements) {
+    this.parameterRequirements = parameterRequirements;
+  }
+
+  public void executeCommand(Command command, ExecutionHandlerContext executionHandlerContext) {
+    parameterRequirements.checkParameters(command, executionHandlerContext);
+    executor.executeCommand(command, executionHandlerContext);
+  }
+
+  public boolean isTransactional() {
+    return executor instanceof TransactionExecutor;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS14 INS32 INS14 INS14 INS14 INS14 INS14 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS44 MOV83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 MOV8 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS32 INS42 INS14 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS43 INS34 INS42 INS42 INS43 INS42 INS17 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS7 INS42 UPD42 MOV42 INS32 INS32 INS62 INS43 INS34 INS43 INS34 INS42 INS43 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS52 INS42 INS42 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL43 DEL42 DEL31 DEL42