Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Responsible for pinging live
- * servers to make sure they
- * are still alive.
+ * Responsible for pinging live servers to make sure they are still alive.
-public class LiveServerPinger  extends EndpointListenerAdapter {
+public class LiveServerPinger extends EndpointListenerAdapter {
-  
+
-  
-  private final ConcurrentMap/*<Endpoint,Future>*/ taskFutures = new ConcurrentHashMap();
+
+  private final ConcurrentMap/* <Endpoint,Future> */ taskFutures = new ConcurrentHashMap();
-  
+
-      Future future = pool.getBackgroundProcessor().scheduleWithFixedDelay(
-          new PingTask(endpoint), pingIntervalNanos, pingIntervalNanos,
-          TimeUnit.NANOSECONDS);
+      Future future = pool.getBackgroundProcessor().scheduleWithFixedDelay(new PingTask(endpoint),
+          pingIntervalNanos, pingIntervalNanos, TimeUnit.NANOSECONDS);
-  
+
-    if(future != null) {
+    if (future != null) {
-  
+
-    
+
-      if(endpoint.timeToPing(pingIntervalNanos)) {
-//      logger.fine("DEBUG pinging " + server);
+      if (endpoint.timeToPing(pingIntervalNanos)) {
+        // logger.fine("DEBUG pinging " + server);
-        } catch(Exception e) {
-          if(logger.isDebugEnabled()) {
-            logger.debug("Error occured while pinging server: {} - {}", endpoint.getLocation(), e.getMessage());
+        } catch (Exception e) {
+          if (logger.isDebugEnabled()) {
+            logger.debug("Error occured while pinging server: {} - {}", endpoint.getLocation(),
+                e.getMessage());
-          GemFireCacheImpl cache = GemFireCacheImpl.getInstance();          
+          GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
-          }        
-          //any failure to ping the server should be considered a crash (eg.
-          //socket timeout exception, security exception, failure to connect).
+          }
+          // any failure to ping the server should be considered a crash (eg.
+          // socket timeout exception, security exception, failure to connect).
-//      logger.fine("DEBUG skipping ping of " + server
-//      + " because lastAccessed=" + endpoint.getLastAccessed());
+        // logger.fine("DEBUG skipping ping of " + server
+        // + " because lastAccessed=" + endpoint.getLastAccessed());
-  
+

UPD66 DEL66 DEL66