Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class implements a Partitioned index over a group of partitioned region
- * buckets.
+ * This class implements a Partitioned index over a group of partitioned region buckets.
-public class PartitionedIndex extends AbstractIndex
-{
+public class PartitionedIndex extends AbstractIndex {
-  private Map<Region, List<Index>> bucketIndexes = Collections.synchronizedMap(new HashMap<Region, List<Index>>());
+  private Map<Region, List<Index>> bucketIndexes =
+      Collections.synchronizedMap(new HashMap<Region, List<Index>>());
- 
+
-   * Number of remote buckets indexed when creating an index on the partitioned 
-   * region instance.
+   * Number of remote buckets indexed when creating an index on the partitioned region instance.
-  
+
-   
+
-   * Constructor for partitioned indexed. Creates the partitioned index on given
-   * a partitioned region. An index can be created programmatically or through 
-   * cache.xml during initialization.
+   * Constructor for partitioned indexed. Creates the partitioned index on given a partitioned
+   * region. An index can be created programmatically or through cache.xml during initialization.
-  public PartitionedIndex(IndexType iType, String indexName, Region r,
-      String indexedExpression, String fromClause,  String imports) {
-    super(indexName, r, fromClause, indexedExpression, null, fromClause, indexedExpression, null, null);
+  public PartitionedIndex(IndexType iType, String indexName, Region r, String indexedExpression,
+      String fromClause, String imports) {
+    super(indexName, r, fromClause, indexedExpression, null, fromClause, indexedExpression, null,
+        null);
-   
+
-   * Adds an index on a bucket to the list of already indexed buckets in the 
-   * partitioned region.
+   * Adds an index on a bucket to the list of already indexed buckets in the partitioned region.
+   * 
-  public void addToBucketIndexes(Region r, Index index)
-  {
-    synchronized(this.bucketIndexes) {
+  public void addToBucketIndexes(Region r, Index index) {
+    synchronized (this.bucketIndexes) {
-      if(indexes == null) {
+      if (indexes == null) {
-  public void removeFromBucketIndexes(Region r, Index index)
-  {
-    synchronized(this.bucketIndexes) {
+  public void removeFromBucketIndexes(Region r, Index index) {
+    synchronized (this.bucketIndexes) {
-      if(indexes != null) {
+      if (indexes != null) {
-  public int getNumberOfIndexedBuckets()
-  {
-    synchronized(this.bucketIndexes) {
+  public int getNumberOfIndexedBuckets() {
+    synchronized (this.bucketIndexes) {
-      for(List<Index> indexList : bucketIndexes.values()) {
+      for (List<Index> indexList : bucketIndexes.values()) {
-  public List getBucketIndexes()
-  {
-    synchronized(this.bucketIndexes) {
+  public List getBucketIndexes() {
+    synchronized (this.bucketIndexes) {
-      for(List<Index> indexList : bucketIndexes.values()) {
+      for (List<Index> indexList : bucketIndexes.values()) {
-  
-  public List<Index> getBucketIndexes(Region r)
-  {
-    synchronized(this.bucketIndexes) {
+
+  public List<Index> getBucketIndexes(Region r) {
+    synchronized (this.bucketIndexes) {
-      if(indexList != null) {
+      if (indexList != null) {
-  
+
-   * Returns one of the bucket index. 
-   * To get all bucket index use getBucketIndexes()
+   * Returns one of the bucket index. To get all bucket index use getBucketIndexes()
-  public Index getBucketIndex()
-  {
+  public Index getBucketIndex() {
-    synchronized(this.bucketIndexes) {
+    synchronized (this.bucketIndexes) {
-        if(indexList != null && indexList.size() > 0) {
+        if (indexList != null && indexList.size() > 0) {
-  
-  protected Map.Entry<Region,List<Index>> getFirstBucketIndex()
-  {
-    Map.Entry<Region,List<Index>> firstIndexEntry = null;
-    synchronized(this.bucketIndexes) {
+
+  protected Map.Entry<Region, List<Index>> getFirstBucketIndex() {
+    Map.Entry<Region, List<Index>> firstIndexEntry = null;
+    synchronized (this.bucketIndexes) {
-   * @return  indexType type of partitioned index.
+   * 
+   * @return indexType type of partitioned index.
-  public IndexType getType()
-  {
+  public IndexType getType() {
-  static public AbstractIndex getBucketIndex(PartitionedRegion pr, String indexName, Integer bId) 
-  throws QueryInvocationTargetException {
+  static public AbstractIndex getBucketIndex(PartitionedRegion pr, String indexName, Integer bId)
+      throws QueryInvocationTargetException {
-    bukRegion = (BucketRegion)prds.getLocalBucketById(bId);
-    if (bukRegion == null){
+    bukRegion = (BucketRegion) prds.getLocalBucketById(bId);
+    if (bukRegion == null) {
-      index = (AbstractIndex)(bukRegion.getIndexManager().getIndex(indexName));
+      index = (AbstractIndex) (bukRegion.getIndexManager().getIndex(indexName));
-        pr.getCache().getLogger().fine("Index Manager not found for the bucket region " +
-            bukRegion.getFullPath() + " unable to fetch the index " + indexName);
+        pr.getCache().getLogger().fine("Index Manager not found for the bucket region "
+            + bukRegion.getFullPath() + " unable to fetch the index " + indexName);
-      throw new QueryInvocationTargetException("Index Manager not found, " + 
-          " unable to fetch the index " + indexName);
+      throw new QueryInvocationTargetException(
+          "Index Manager not found, " + " unable to fetch the index " + indexName);
-   * Verify if the index is available of the buckets. If not create index
-   * on the bucket.
+   * Verify if the index is available of the buckets. If not create index on the bucket.
-  public void verifyAndCreateMissingIndex(List buckets) throws QueryInvocationTargetException{
-    PartitionedRegion pr = (PartitionedRegion)this.getRegion();
+  public void verifyAndCreateMissingIndex(List buckets) throws QueryInvocationTargetException {
+    PartitionedRegion pr = (PartitionedRegion) this.getRegion();
-      BucketRegion bukRegion = (BucketRegion)prds.getLocalBucketById((Integer)bId);
+      BucketRegion bukRegion = (BucketRegion) prds.getLocalBucketById((Integer) bId);
-      IndexManager im = IndexUtils.getIndexManager(bukRegion, true); 
-      if (im != null && im.getIndex(indexName) == null) { 
+      IndexManager im = IndexUtils.getIndexManager(bukRegion, true);
+      if (im != null && im.getIndex(indexName) == null) {
-            pr.getCache().getLogger().fine("Verifying index presence on bucket region. " +
-                " Found index " + this.indexName + " not present on the bucket region " +
-                bukRegion.getFullPath() + ", index will be created on this region.");
+            pr.getCache().getLogger()
+                .fine("Verifying index presence on bucket region. " + " Found index "
+                    + this.indexName + " not present on the bucket region "
+                    + bukRegion.getFullPath() + ", index will be created on this region.");
-               
+
-          
-          im.createIndex(this.indexName, this.type, this.originalIndexedExpression, 
-              this.fromClause, this.imports, externalContext, this, true);
-        } catch (IndexExistsException iee) {           
+
+          im.createIndex(this.indexName, this.type, this.originalIndexedExpression, this.fromClause,
+              this.imports, externalContext, this, true);
+        } catch (IndexExistsException iee) {
-        } 
+        }
-  
-  
+
+
-  
+
-   * Set the number of remotely indexed buckets when this partitioned index was 
-   * created.
+   * Set the number of remotely indexed buckets when this partitioned index was created.
+   * 
-  public void setRemoteBucketesIndexed(int remoteBucketsIndexed)
-  {
+  public void setRemoteBucketesIndexed(int remoteBucketsIndexed) {
+   * 
-  public int getNumRemoteBucketsIndexed()
-  {
+  public int getNumRemoteBucketsIndexed() {
+   * 
-  public Region getRegion()
-  {
+  public Region getRegion() {
-  void addMapping(RegionEntry entry) throws IMQException
-  {
-    throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
+  void addMapping(RegionEntry entry) throws IMQException {
+    throw new RuntimeException(
+        LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
-  public void initializeIndex(boolean loadEntries) throws IMQException
-  {
-    throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
+  public void initializeIndex(boolean loadEntries) throws IMQException {
+    throw new RuntimeException(
+        LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
-  void lockedQuery(Object key, int operator, Collection results,
-      CompiledValue iterOps, RuntimeIterator indpndntItr,
-      ExecutionContext context, List projAttrib,SelectResults intermediateResults, boolean isIntersection)
-  {
-    throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
+  void lockedQuery(Object key, int operator, Collection results, CompiledValue iterOps,
+      RuntimeIterator indpndntItr, ExecutionContext context, List projAttrib,
+      SelectResults intermediateResults, boolean isIntersection) {
+    throw new RuntimeException(
+        LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
-  void recreateIndexData() throws IMQException
-  {
-    throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
+  void recreateIndexData() throws IMQException {
+    throw new RuntimeException(
+        LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
-  void removeMapping(RegionEntry entry, int opCode)
-  {
-    throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
+  void removeMapping(RegionEntry entry, int opCode) {
+    throw new RuntimeException(
+        LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
-  public boolean clear() throws QueryException
-  {
+  public boolean clear() throws QueryException {
-  public void destroy()
-  {
-    throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
-  }
-  */
+   * public void destroy() { throw new
+   * RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.
+   * toLocalizedString()); }
+   */
-  public IndexStatistics getStatistics()
-  {
+  public IndexStatistics getStatistics() {
-  
+
-  public String toString()
-  {
+  public String toString() {
+
-    }   
+    }
-   * This will create extra {@link IndexStatistics} statistics for MapType
-   * PartitionedIndex.
+   * This will create extra {@link IndexStatistics} statistics for MapType PartitionedIndex.
+   * 
+
-   * Internal class for partitioned index statistics. Statistics are not
-   * supported right now.
+   * Internal class for partitioned index statistics. Statistics are not supported right now.
-    
+
-      this.vsdStats = new IndexStats(getRegion().getCache()
-                                     .getDistributedSystem(), indexName);
+      this.vsdStats = new IndexStats(getRegion().getCache().getDistributedSystem(), indexName);
-    
+
-    
+
-    
+
-    
+
-    
+
-    
+
+
-    
+
+
+
+
+
-    }   
+    }
-     * Returns the number of keys in this index
-     * at the highest level
+     * Returns the number of keys in this index at the highest level
-     * Returns the total amount of time (in nanoseconds) spent updating this
-     * index.
+     * Returns the total amount of time (in nanoseconds) spent updating this index.
-    
+
-     * Returns the total number of times this index has been accessed by a
-     * query.
+     * Returns the total number of times this index has been accessed by a query.
-    
+
-    
+
-    
-   /**
+
+    /**
-    
+
-  void lockedQuery(Object lowerBoundKey, int lowerBoundOperator,
-      Object upperBoundKey, int upperBoundOperator, Collection results,
-      Set keysToRemove, ExecutionContext context) throws TypeMismatchException
-  {
-    throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
+  void lockedQuery(Object lowerBoundKey, int lowerBoundOperator, Object upperBoundKey,
+      int upperBoundOperator, Collection results, Set keysToRemove, ExecutionContext context)
+      throws TypeMismatchException {
+    throw new RuntimeException(
+        LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
-  public int getSizeEstimate(Object key, int op, int matchLevel)
-  {
-    throw new UnsupportedOperationException(
-        "This method should not have been invoked");
+  public int getSizeEstimate(Object key, int op, int matchLevel) {
+    throw new UnsupportedOperationException("This method should not have been invoked");
-  
+
-      ExecutionContext context ) throws TypeMismatchException
-  {
+      ExecutionContext context) throws TypeMismatchException {
-    
+
-  void addMapping(Object key, Object value, RegionEntry entry)
-      throws IMQException
-  {
-    throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
-    
+  void addMapping(Object key, Object value, RegionEntry entry) throws IMQException {
+    throw new RuntimeException(
+        LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
+
-  void saveMapping(Object key, Object value, RegionEntry entry)
-      throws IMQException
-  {
-    throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
-    
+  void saveMapping(Object key, Object value, RegionEntry entry) throws IMQException {
+    throw new RuntimeException(
+        LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());
+
-  
+
-    for (Object index : getBucketIndexes()){
-      empty = ((AbstractIndex)index).isEmpty();
-      if(!empty){
+    for (Object index : getBucketIndexes()) {
+      empty = ((AbstractIndex) index).isEmpty();
+      if (!empty) {
- public boolean isPopulateInProgress() {
+  public boolean isPopulateInProgress() {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66