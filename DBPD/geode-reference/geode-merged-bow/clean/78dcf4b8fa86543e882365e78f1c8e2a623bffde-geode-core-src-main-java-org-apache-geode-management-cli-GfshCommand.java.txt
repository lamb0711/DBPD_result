GEODE-4859: Create a public version of GfshCommand (#1662)

* Added public GfshCommand abstract class
* InternalGfshCommand extends the public class
* CommandManager sets cache to GfshCommand

Signed-off-by: Jens Deppe <jdeppe@pivotal.io>


-package org.apache.geode.management.internal.cli.commands;
+package org.apache.geode.management.cli;
-import java.util.Objects;
+import org.apache.geode.annotations.Experimental;
-import org.apache.geode.distributed.internal.InternalClusterConfigurationService;
-import org.apache.geode.management.ManagementService;
-import org.apache.geode.management.cli.Result;
-import org.apache.geode.management.internal.cli.shell.Gfsh;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-/**
- * Encapsulates common functionality for implementing command classes for the Geode shell (gfsh).
- * this provides wrapper around the static methods in CliUtils for easy mock of the commands
- *
- * this class should not have much implementation of its own other then those tested in
- * GfshCommandJUnitTest
- */
-@SuppressWarnings("unused")
+@Experimental
-  public void setCache(Cache cache) {
-    this.cache = (InternalCache) cache;
-  }
-
-  public Cache getCache() {
-    return cache;
-  }
-
-  public static final String EXPERIMENTAL = "(Experimental) ";
-
-  public boolean isConnectedAndReady() {
-    return getGfsh() != null && getGfsh().isConnectedAndReady();
-  }
-
-  public InternalClusterConfigurationService getConfigurationService() {
-    InternalLocator locator = InternalLocator.getLocator();
-    return locator == null ? null : locator.getSharedConfiguration();
-  }
-
-  public void persistClusterConfiguration(Result result, Runnable runnable) {
-    if (result == null) {
-      throw new IllegalArgumentException("Result should not be null");
-    }
-    InternalClusterConfigurationService sc = getConfigurationService();
-    if (sc == null) {
-      result.setCommandPersisted(false);
-    } else {
-      runnable.run();
-      result.setCommandPersisted(true);
-    }
-  }
-
-  public XmlEntity findXmlEntity(List<CliFunctionResult> functionResults) {
-    return functionResults.stream().filter(CliFunctionResult::isSuccessful)
-        .map(CliFunctionResult::getXmlEntity).filter(Objects::nonNull).findFirst().orElse(null);
-  }
-
-  public boolean isDebugging() {
-    return getGfsh() != null && getGfsh().getDebug();
-  }
-
-  public boolean isLogging() {
-    return getGfsh() != null;
-  }
-
-  public Subject getSubject() {
-    return cache.getSecurityService().getSubject();
+  public Cache getCache() {
+    return cache;
-  public Gfsh getGfsh() {
-    return Gfsh.getCurrentInstance();
+  public ClusterConfigurationService getConfigurationService() {
+    InternalLocator locator = InternalLocator.getLocator();
+    return locator == null ? null : locator.getSharedConfiguration();
+  }
+
+  public void setCache(Cache cache) {
+    this.cache = (InternalCache) cache;
+  }
+
+  public Subject getSubject() {
+    return cache.getSecurityService().getSubject();
-  public ManagementService getManagementService() {
-    return ManagementService.getExistingManagementService(getCache());
-  }
-

MOV26 MOV31 MOV31 MOV31 UPD40 UPD40 INS78 INS42 UPD43 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL45 DEL79 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL32 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL42 DEL42 DEL42 DEL90 DEL32 DEL42 DEL32 DEL42 DEL33 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL32 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31