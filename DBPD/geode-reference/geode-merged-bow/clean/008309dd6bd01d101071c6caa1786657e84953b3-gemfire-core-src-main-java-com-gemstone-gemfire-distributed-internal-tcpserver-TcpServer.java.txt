Merge branch 'release/1.0.0-incubating.M1'

+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import org.apache.logging.log4j.Logger;
+
-import com.gemstone.org.jgroups.stack.GossipServer;
-import com.gemstone.org.jgroups.util.GemFireTracer;
-import com.gemstone.org.jgroups.util.ExternalStrings;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
+import com.gemstone.gemfire.internal.logging.LogService;
- * @author Bela Ban Oct 4 2001
-   * The version of the gossip protocol
+   * The version of the tcp server protocol
-  public final static int GOSSIPVERSION = GossipServer.getCurrentGossipVersion();
+  public final static int GOSSIPVERSION = 1002;
-  public final static int OLDGOSSIPVERSION = GossipServer.getOldGossipVersion();
+  public final static int OLDGOSSIPVERSION = 1001;
-  private static final long SHUTDOWN_WAIT_TIME = 60 * 1000;
+  public static final long SHUTDOWN_WAIT_TIME = 60 * 1000;
+  
+  private static final Logger log = LogService.getLogger();
+  
-  private final GemFireTracer log = GemFireTracer
-      .getLog(TcpServer.class);
-    this.log.info("TcpServer@"+System.identityHashCode(this)+" join() invoked.  Server thread="+serverThread+"@"+System.identityHashCode(serverThread)+";alive="+serverThread.isAlive());
+//    this.log.info("TcpServer@"+System.identityHashCode(this)+" join() invoked.  Server thread="+serverThread+"@"+System.identityHashCode(serverThread)+";alive="+serverThread.isAlive());
-  protected/*GemStoneAddition*/ void run() {
+  protected void run() {
-    // boolean looping=true;
-    // while(looping) {
-    // [GemStoneAddition] Close the server socket, duh. See bug 32856.
+
-      log.getLogWriter().warning(
-          ExternalStrings.ONE_ARG,
+      log.warn(
-    if (shuttingDown) { // GemStoneAddition
+    if (shuttingDown) {
-        DataInputStream input = null; // GemStoneAddition -- initialize it for
-                                      // the finally block
+        DataInputStream input = null;
-            // GemStoneAddition
-            log.getLogWriter().fine(
+            log.debug(
-            if (gossipVersion < getCurrentGossipVersion()) {
-              if (log.isTraceEnabled()) {
-                log.debug(
-                    "Received request from "
-                        + sock.getInetAddress().getHostAddress()
-                        + " This locator is running: " + getCurrentGossipVersion()
-                        + ", but request was version: " + gossipVersion
-                        + ", version ordinal: " + versionOrdinal);
-              }
-            }
+//            if (gossipVersion < getCurrentGossipVersion()) {
+//              if (log.isTraceEnabled()) {
+//                log.debug(
+//                    "Received request from "
+//                        + sock.getInetAddress().getHostAddress()
+//                        + " This locator is running: " + getCurrentGossipVersion()
+//                        + ", but request was version: " + gossipVersion
+//                        + ", version ordinal: " + versionOrdinal);
+//              }
+//            }
-          // Close the socket. We can not accept requests from newer GOSSIP
-          // VERSION.
+          // Close the socket. We can not accept requests from a newer version
-          if (log.getLogWriter().fineEnabled()) {
-            log.getLogWriter().fine("Locator reading request from " + sock.getInetAddress() + " with version " + Version.fromOrdinal(versionOrdinal, false));
+          if (log.isDebugEnabled() && versionOrdinal != Version.CURRENT_ORDINAL) {
+            log.debug("Locator reading request from " + sock.getInetAddress() + " with version " + Version.fromOrdinal(versionOrdinal, false));
-          if (log.getLogWriter().fineEnabled()) {
-            log.getLogWriter().fine("Locator received request " + request + " from " + sock.getInetAddress());
+          if (log.isDebugEnabled()) {
+            log.debug("Locator received request " + request + " from " + sock.getInetAddress());
-          // input.close(); GemStoneAddition close in finally block
-          // sock.close(); GemStoneAddition close in finally block
-          log.getLogWriter().info(ExternalStrings.ONE_ARG,
+          log.info(
-              log.getLogWriter().info(
-                  ExternalStrings.ONE_ARG,
+              log.info(
-            log.getLogWriter().severe(
-                ExternalStrings.TCPSERVER_EXCEPTION_IN_PROCESSING_REQUEST_FROM_0,
+            log.fatal("Exception in processing request from " + 
-            // GemStoneAddition do this in the finally block
-            // try {
-            // sock.close();
-            // }
-            // catch (IOException ioe) {
-            // log.getLogWriter().warning("Exception closing socket", ioe);
-            // }
+
-            log.getLogWriter().severe(
-                ExternalStrings.TCPSERVER_EXCEPTION_IN_PROCESSING_REQUEST_FROM_0,
+            log.fatal("Exception in processing request from " +
-        } finally { // GemStoneAddition: be safe about closing
+        } finally {
-              log.getLogWriter().warning(
-                ExternalStrings.ONE_ARG,
+              log.warn(
-            log.getLogWriter().warning(
-                ExternalStrings.ONE_ARG,
+            log.warn(
-  protected/*GemStoneAddition*/ Object handleInfoRequest(Object request) {
-    // Return a GossipData.INFO_RSP with two "members": the
-    // working directory of this locator and the product
-    // directory of this locator.
+  protected Object handleInfoRequest(Object request) {
-  protected /*GemStone Addition */ Object handleVersionRequest(Object request) {
+  protected Object handleVersionRequest(Object request) {

MOV26 MOV23 UPD40 UPD40 UPD40 UPD83 INS83 UPD43 INS34 INS34 UPD42 UPD66 UPD42 UPD42 MOV42 UPD42 MOV8 INS27 MOV21 INS32 INS27 MOV42 UPD42 MOV44 MOV42 UPD42 MOV42 INS42 INS40 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV44 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS27 MOV42 UPD42 MOV42 MOV27 MOV42 UPD42 INS45 INS42 MOV42 INS27 MOV42 UPD42 INS45 INS42 DEL66 DEL65 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL57 DEL52 DEL42 DEL22 DEL42 DEL45 DEL42 DEL42 DEL52 DEL32 DEL45 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL32 DEL40 DEL32 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL42 DEL32 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL25 DEL8 DEL25 DEL8 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL32 DEL42 DEL40 DEL42 DEL32 DEL42 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40