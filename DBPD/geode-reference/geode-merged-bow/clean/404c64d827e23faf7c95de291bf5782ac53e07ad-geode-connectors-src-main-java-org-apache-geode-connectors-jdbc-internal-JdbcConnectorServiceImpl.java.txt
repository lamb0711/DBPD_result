GEODE-5861: change jdbc connector to use jndi binding (#2650)

The jdbc connector now uses the existing "jndi-binding" xml/gfsh instead of adding "jdbc-connection" xml/gfsh. All the old "jdbc-connection" commands have been removed.

The create jndi-binding command has been changed in the following ways:
* the driver-class-name gfsh parameter is now optional.
* --url can be used as a replacement for --connnection-url
* the --type now defaults to SIMPLE (it used to not have a default).
* the --type=POOLED now defaults to creating a Hikari pool and an SPI exists to customize the class 
that implements the pool.

New External APIS:
  DataSourceFactoryTest: this is the SPI users can implement for the POOLED type.

Co-authored-by: @BenjaminPerryRoss 
-import org.apache.geode.internal.cache.InternalCache;
-  private final Map<String, ConnectorService.Connection> connectionsByName =
-      new ConcurrentHashMap<>();
-  private final DataSourceManager manager =
-      new DataSourceManager(new HikariJdbcDataSourceFactory());
-  private volatile InternalCache cache;
-  private boolean registered;
-
-  @Override
-  public void createConnectionConfig(ConnectorService.Connection config)
-      throws ConnectionConfigExistsException {
-    ConnectorService.Connection existing = connectionsByName.putIfAbsent(config.getName(), config);
-    if (existing != null) {
-      throw new ConnectionConfigExistsException("Connection " + config.getName() + " exists");
-    }
-  }
-
-  @Override
-  public void replaceConnectionConfig(ConnectorService.Connection alteredConfig)
-      throws ConnectionConfigNotFoundException {
-    ConnectorService.Connection existingConfig = connectionsByName.get(alteredConfig.getName());
-    if (existingConfig == null) {
-      throw new ConnectionConfigNotFoundException(
-          "Connection configuration " + alteredConfig.getName() + " was not found");
-    }
-
-    connectionsByName.put(existingConfig.getName(), alteredConfig);
-  }
-
-  @Override
-  public void destroyConnectionConfig(String connectionName) {
-    connectionsByName.remove(connectionName);
-  }
-
-  @Override
-  public ConnectorService.Connection getConnectionConfig(String connectionName) {
-    return connectionsByName.get(connectionName);
-  }
-
-  @Override
-  public Set<ConnectorService.Connection> getConnectionConfigs() {
-    Set<ConnectorService.Connection> connectionConfigs = new HashSet<>();
-    connectionConfigs.addAll(connectionsByName.values());
-    return connectionConfigs;
-  }
-  public DataSourceManager getDataSourceManager() {
-    return manager;
-  }
-
-  @Override
-  public void init(Cache cache) {
-    this.cache = (InternalCache) cache;
-  }
+  public void init(Cache cache) {}

DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL40 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21