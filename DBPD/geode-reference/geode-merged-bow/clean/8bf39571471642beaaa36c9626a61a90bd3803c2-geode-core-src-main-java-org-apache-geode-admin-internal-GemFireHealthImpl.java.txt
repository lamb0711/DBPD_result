Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Provides the implementation of the <code>GemFireHealth</code>
- * administration API.  This class is responsible for {@linkplain
- * GemFireVM#addHealthListener sending} the {@link
- * GemFireHealthConfig}s to the remote member VM in which the health
- * is calcualted.
+ * Provides the implementation of the <code>GemFireHealth</code> administration API. This class is
+ * responsible for {@linkplain GemFireVM#addHealthListener sending} the {@link GemFireHealthConfig}s
+ * to the remote member VM in which the health is calcualted.
-public class GemFireHealthImpl
-  implements GemFireHealth, JoinLeaveListener, HealthListener {
+public class GemFireHealthImpl implements GemFireHealth, JoinLeaveListener, HealthListener {
-  /** Maps the name of a host to its <code>GemFireHealthConfig</code>.
-   * Note that the mappings are created lazily. */
+  /**
+   * Maps the name of a host to its <code>GemFireHealthConfig</code>. Note that the mappings are
+   * created lazily.
+   */
-  /** Maps the name of a host to all of the members
-   * (<code>GemFireVM</code>s) that run on that host. */
+  /**
+   * Maps the name of a host to all of the members (<code>GemFireVM</code>s) that run on that host.
+   */
-  /** The configuration specifying how the health of the distributed
-   * system should be computed.  */
+  /**
+   * The configuration specifying how the health of the distributed system should be computed.
+   */
-  /** The distributed system whose health is monitored by this
-   * <Code>GemFireHealth</code>. */
+  /**
+   * The distributed system whose health is monitored by this <Code>GemFireHealth</code>.
+   */
-  
-  ///////////////////////  Constructors  ///////////////////////
+
+  /////////////////////// Constructors ///////////////////////
-   * Creates a new <code>GemFireHealthImpl</code> that monitors the
-   * health of member of the given distributed system.
+   * Creates a new <code>GemFireHealthImpl</code> that monitors the health of member of the given
+   * distributed system.
-  protected GemFireHealthImpl(GfManagerAgent agent,
-                              AdminDistributedSystem system) {
-//     agent.getDM().getLogger().info("Creating GemFireHealthImpl",
-//                                    new Exception("Stack trace"));
+  protected GemFireHealthImpl(GfManagerAgent agent, AdminDistributedSystem system) {
+    // agent.getDM().getLogger().info("Creating GemFireHealthImpl",
+    // new Exception("Stack trace"));
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-   * Returns the <code>DistributedSystem</code> whose health this
-   * <code>GemFireHealth</code> monitors.
+   * Returns the <code>DistributedSystem</code> whose health this <code>GemFireHealth</code>
+   * monitors.
-   * A "template factory" method for creating a
-   * <code>DistributedSystemHealthConfig</code>. It can be overridden
-   * by subclasses to produce instances of different
+   * A "template factory" method for creating a <code>DistributedSystemHealthConfig</code>. It can
+   * be overridden by subclasses to produce instances of different
-  protected DistributedSystemHealthConfig
-    createDistributedSystemHealthConfig() {
+  protected DistributedSystemHealthConfig createDistributedSystemHealthConfig() {
-   * A "template factory" method for creating a
-   * <code>GemFireHealthConfig</code>.  It can be overridden by
-   * subclasses to produce instances of different
-   * <code>GemFireHealthConfig</code> implementations.
+   * A "template factory" method for creating a <code>GemFireHealthConfig</code>. It can be
+   * overridden by subclasses to produce instances of different <code>GemFireHealthConfig</code>
+   * implementations.
-   * @param hostName
-   *        The host whose health we are configuring
+   * @param hostName The host whose health we are configuring
-  protected GemFireHealthConfig
-    createGemFireHealthConfig(String hostName) {
+  protected GemFireHealthConfig createGemFireHealthConfig(String hostName) {
-   * Throws an {@link IllegalStateException} if this
-   * <code>GemFireHealthImpl</code> is closed.
+   * Throws an {@link IllegalStateException} if this <code>GemFireHealthImpl</code> is closed.
-      throw new IllegalStateException(LocalizedStrings.GemFireHealthImpl_CANNOT_ACCESS_A_CLOSED_GEMFIREHEALTH_INSTANCE.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.GemFireHealthImpl_CANNOT_ACCESS_A_CLOSED_GEMFIREHEALTH_INSTANCE
+              .toLocalizedString());
-   * Returns the overall health of GemFire.  Note that this method
-   * does not contact any of the member VMs.  Instead, it relies on
-   * the members to alert it of changes in its health via a {@link
-   * HealthListener}.
+   * Returns the overall health of GemFire. Note that this method does not contact any of the member
+   * VMs. Instead, it relies on the members to alert it of changes in its health via a
+   * {@link HealthListener}.
-   * Resets the overall health to be {@link #GOOD_HEALTH}.  It also
-   * resets the health in the member VMs.
+   * Resets the overall health to be {@link #GOOD_HEALTH}. It also resets the health in the member
+   * VMs.
-      for (Iterator iter = hostMembers.values().iterator();
-           iter.hasNext(); ) {
+      for (Iterator iter = hostMembers.values().iterator(); iter.hasNext();) {
-        for (Iterator iter2 = members.iterator(); iter2.hasNext(); ) {
+        for (Iterator iter2 = members.iterator(); iter2.hasNext();) {
-   * Aggregates the diagnoses from all members of the distributed
-   * system. 
+   * Aggregates the diagnoses from all members of the distributed system.
-      for (Iterator iter = hostMembers.values().iterator();
-           iter.hasNext(); ) {
+      for (Iterator iter = hostMembers.values().iterator(); iter.hasNext();) {
-        for (Iterator iter2 = members.iterator(); iter2.hasNext(); ) {
+        for (Iterator iter2 = members.iterator(); iter2.hasNext();) {
-          String[] diagnoses =
-            member.getHealthDiagnosis(this.overallHealth);
+          String[] diagnoses = member.getHealthDiagnosis(this.overallHealth);
-  public void setDistributedSystemHealthConfig(DistributedSystemHealthConfig
-                                               config) {
+  public void setDistributedSystemHealthConfig(DistributedSystemHealthConfig config) {
-        new DistributedSystemHealthEvaluator(config, this.agent.getDM());
-      int interval =
-        this.getDefaultGemFireHealthConfig().getHealthEvaluationInterval();
-      this.dsHealthMonitor =
-        new DistributedSystemHealthMonitor(eval, this, interval);
+          new DistributedSystemHealthEvaluator(config, this.agent.getDM());
+      int interval = this.getDefaultGemFireHealthConfig().getHealthEvaluationInterval();
+      this.dsHealthMonitor = new DistributedSystemHealthMonitor(eval, this, interval);
-  public DistributedSystemHealthConfig
-    getDistributedSystemHealthConfig() {
+  public DistributedSystemHealthConfig getDistributedSystemHealthConfig() {
-      throw new IllegalArgumentException(LocalizedStrings.GemFireHealthImpl_THE_GEMFIREHEALTHCONFIG_FOR_FOR_0_CANNOT_SERVE_AS_THE_DEFAULT_HEALTH_CONFIG.toLocalizedString(config.getHostName()));
+      throw new IllegalArgumentException(
+          LocalizedStrings.GemFireHealthImpl_THE_GEMFIREHEALTHCONFIG_FOR_FOR_0_CANNOT_SERVE_AS_THE_DEFAULT_HEALTH_CONFIG
+              .toLocalizedString(config.getHostName()));
-      for (Iterator iter = this.hostMembers.entrySet().iterator();
-           iter.hasNext(); ) {
+      for (Iterator iter = this.hostMembers.entrySet().iterator(); iter.hasNext();) {
-        GemFireHealthConfig hostConfig =
-          (GemFireHealthConfig) hostConfigs.get(hostIpAddress);
+        GemFireHealthConfig hostConfig = (GemFireHealthConfig) hostConfigs.get(hostIpAddress);
-        for (Iterator iter2 = members.iterator(); iter2.hasNext(); ) {
+        for (Iterator iter2 = members.iterator(); iter2.hasNext();) {
-    // change.  This is probably not the most efficient way of doing
+    // change. This is probably not the most efficient way of doing
-   * @param hostName
-   *          host name for which the GemFire Health Config is needed
+   * @param hostName host name for which the GemFire Health Config is needed
-   * @throws IllegalArgumentException
-   *           if host with given name could not be found
+   * @throws IllegalArgumentException if host with given name could not be found
-  public synchronized GemFireHealthConfig
-    getGemFireHealthConfig(String hostName){
+  public synchronized GemFireHealthConfig getGemFireHealthConfig(String hostName) {
-              .toLocalizedString(hostName), e);
+              .toLocalizedString(hostName),
+          e);
-    
-    GemFireHealthConfig config =
-      (GemFireHealthConfig) this.hostConfigs.get(hostIpAddress);
+
+    GemFireHealthConfig config = (GemFireHealthConfig) this.hostConfigs.get(hostIpAddress);
-   * @param hostName
-   *          host name for which the GemFire Health Config is needed
-   * @param config
-   *          GemFireHealthConfig object to set
+   * @param hostName host name for which the GemFire Health Config is needed
+   * @param config GemFireHealthConfig object to set
-   * @throws IllegalArgumentException
-   *           if (1) given host name & the host name in the given config do not
-   *           match OR (2) host with given name could not be found OR (3) there
-   *           are no GemFire components running on the given host
+   * @throws IllegalArgumentException if (1) given host name & the host name in the given config do
+   *         not match OR (2) host with given name could not be found OR (3) there are no GemFire
+   *         components running on the given host
-  public void setGemFireHealthConfig(String hostName,
-                                     GemFireHealthConfig config) {
+  public void setGemFireHealthConfig(String hostName, GemFireHealthConfig config) {
-                .toLocalizedString(hostName), e);
+                .toLocalizedString(hostName),
+            e);
-      
+
-      for (Iterator iter = members.iterator(); iter.hasNext(); ) {
+      for (Iterator iter = members.iterator(); iter.hasNext();) {
-   * Tells the members of the distributed system that we are no longer
-   * interested in monitoring their health.
+   * Tells the members of the distributed system that we are no longer interested in monitoring
+   * their health.
-  public void close(){
+  public void close() {
-    
+
-        for (Iterator iter = hostMembers.values().iterator();
-             iter.hasNext(); ) {
+        for (Iterator iter = hostMembers.values().iterator(); iter.hasNext();) {
-          for (Iterator iter2 = members.iterator(); iter2.hasNext(); ) {
+          for (Iterator iter2 = members.iterator(); iter2.hasNext();) {
-  public synchronized void nodeJoined(GfManagerAgent source,
-                                      GemFireVM joined) {
+  public synchronized void nodeJoined(GfManagerAgent source, GemFireVM joined) {
-    GemFireHealthConfig config =
-      (GemFireHealthConfig) this.hostConfigs.get(hostIpAddress);
+    GemFireHealthConfig config = (GemFireHealthConfig) this.hostConfigs.get(hostIpAddress);
-  public synchronized void nodeLeft(GfManagerAgent source,
-                                    GemFireVM left) {
+  public synchronized void nodeLeft(GfManagerAgent source, GemFireVM left) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66