GEODE-6306: extend the RegionConfigRealizer to honor all region attributes configurations

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

-import java.util.Arrays;
-import java.util.List;
-
-import org.apache.geode.cache.CacheListener;
-import org.apache.geode.cache.CacheLoader;
-import org.apache.geode.cache.CacheWriter;
-import org.apache.geode.cache.CustomExpiry;
-import org.apache.geode.cache.DataPolicy;
-import org.apache.geode.cache.ExpirationAction;
-import org.apache.geode.cache.ExpirationAttributes;
-import org.apache.geode.cache.PartitionResolver;
-import org.apache.geode.cache.RegionFactory;
-import org.apache.geode.cache.Scope;
-import org.apache.geode.cache.configuration.DeclarableType;
-import org.apache.geode.cache.configuration.RegionAttributesType;
-import org.apache.geode.cache.configuration.RegionConfig;
-import org.apache.geode.compression.Compressor;
-import org.apache.geode.internal.ClassPathLoader;
-import org.apache.geode.internal.cache.EvictionAttributesImpl;
-import org.apache.geode.internal.cache.PartitionAttributesImpl;
-import org.apache.geode.management.internal.cli.CliUtil;
+import org.apache.geode.management.internal.configuration.realizers.RegionConfigRealizer;
+  private static final RegionConfigRealizer realizer = new RegionConfigRealizer();
+
-      Region<?, ?> createdRegion =
-          createRegion(cache, regionCreateArgs.getConfig(), regionCreateArgs.getRegionPath());
-      XmlEntity xmlEntity = getXmlEntityForRegion(createdRegion);
+      RegionPath regionPath = new RegionPath(regionCreateArgs.getRegionPath());
+      realizer.create(regionCreateArgs.getConfig(), regionCreateArgs.getRegionPath(), cache);
+      XmlEntity xmlEntity = new XmlEntity(CacheXml.REGION, "name", regionPath.getRootRegionName());
-              createdRegion.getFullPath(), memberNameOrId)));
+              regionCreateArgs.getRegionPath(), memberNameOrId)));
-  private XmlEntity getXmlEntityForRegion(Region<?, ?> region) {
-    Region<?, ?> curRegion = region;
-    while (curRegion != null && curRegion.getParentRegion() != null) {
-      curRegion = curRegion.getParentRegion();
-    }
-
-    return new XmlEntity(CacheXml.REGION, "name", curRegion.getName());
-  }
-
-  private <K, V> Region<?, ?> createRegion(Cache cache, RegionConfig config, String regionPath)
-      throws RuntimeException {
-    RegionAttributesType regionAttributes = config.getRegionAttributes();
-    Region<K, V> createdRegion;
-    RegionFactory<K, V> factory = cache.createRegionFactory();
-
-    validateAndSetCustomClasses(regionAttributes, factory);
-
-    if (regionAttributes.getPartitionAttributes() != null) {
-      factory.setPartitionAttributes(
-          PartitionAttributesImpl.fromConfig(regionAttributes.getPartitionAttributes()));
-    }
-
-    factory
-        .setDataPolicy(DataPolicy.fromString(regionAttributes.getDataPolicy().value().toUpperCase()
-            .replace("-", "_")));
-
-    if (regionAttributes.getScope() != null) {
-      factory.setScope(Scope.fromString(regionAttributes.getScope().value().toUpperCase()
-          .replace("-", "_")));
-    }
-
-    validateAndSetExpirationAttributes(regionAttributes, factory);
-
-    if (regionAttributes.getEvictionAttributes() != null) {
-      try {
-        factory.setEvictionAttributes(
-            EvictionAttributesImpl.fromConfig(regionAttributes.getEvictionAttributes()));
-      } catch (Exception e) {
-        throw new IllegalArgumentException(
-            CliStrings.CREATE_REGION__MSG__OBJECT_SIZER_MUST_BE_OBJECTSIZER_AND_DECLARABLE);
-      }
-    }
-
-    if (regionAttributes.getDiskStoreName() != null) {
-      factory.setDiskStoreName(regionAttributes.getDiskStoreName());
-    }
-
-    if (regionAttributes.isDiskSynchronous() != null) {
-      factory.setDiskSynchronous(regionAttributes.isDiskSynchronous());
-    }
-
-    if (regionAttributes.isOffHeap() != null) {
-      factory.setOffHeap(regionAttributes.isOffHeap());
-    }
-
-    if (regionAttributes.isStatisticsEnabled() != null) {
-      factory.setStatisticsEnabled(regionAttributes.isStatisticsEnabled());
-    }
-
-    if (regionAttributes.isEnableAsyncConflation() != null) {
-      factory.setEnableAsyncConflation(regionAttributes.isEnableAsyncConflation());
-    }
-
-    if (regionAttributes.isEnableSubscriptionConflation() != null) {
-      factory.setEnableSubscriptionConflation(regionAttributes.isEnableSubscriptionConflation());
-    }
-
-    if (regionAttributes.getGatewaySenderIds() != null) {
-      Arrays.stream(regionAttributes.getGatewaySenderIds().split(","))
-          .forEach(gsi -> factory.addGatewaySenderId(gsi));
-    }
-
-    if (regionAttributes.getAsyncEventQueueIds() != null) {
-      Arrays.stream(regionAttributes.getAsyncEventQueueIds().split(","))
-          .forEach(gsi -> factory.addAsyncEventQueueId(gsi));
-    }
-
-    factory.setConcurrencyChecksEnabled(regionAttributes.isConcurrencyChecksEnabled());
-
-    if (regionAttributes.getConcurrencyLevel() != null) {
-      factory.setConcurrencyLevel(Integer.valueOf(regionAttributes.getConcurrencyLevel()));
-    }
-
-    if (regionAttributes.isCloningEnabled() != null) {
-      factory.setCloningEnabled(regionAttributes.isCloningEnabled());
-    }
-
-    if (regionAttributes.isMulticastEnabled() != null) {
-      factory.setMulticastEnabled(regionAttributes.isMulticastEnabled());
-    }
-
-    RegionPath regionPathData = new RegionPath(regionPath);
-    String regionName = regionPathData.getName();
-    String parentRegionPath = regionPathData.getParent();
-    if (parentRegionPath != null && !Region.SEPARATOR.equals(parentRegionPath)) {
-      Region<?, ?> parentRegion = cache.getRegion(parentRegionPath);
-      createdRegion = factory.createSubregion(parentRegion, regionName);
-    } else {
-      createdRegion = factory.create(regionName);
-    }
-
-    return createdRegion;
-  }
-
-  private <K, V> void validateAndSetExpirationAttributes(RegionAttributesType regionAttributes,
-      RegionFactory<K, V> factory) {
-    if (regionAttributes.getEntryIdleTime() != null) {
-      RegionAttributesType.ExpirationAttributesType eitl = regionAttributes.getEntryIdleTime();
-      factory.setEntryIdleTimeout(
-          new ExpirationAttributes(Integer.valueOf(eitl.getTimeout()),
-              ExpirationAction.fromXmlString(eitl.getAction())));
-
-      try {
-        if (eitl.getCustomExpiry() != null) {
-          factory.setCustomEntryIdleTimeout((CustomExpiry) ClassPathLoader.getLatest()
-              .forName(eitl.getCustomExpiry().getClassName())
-              .newInstance());
-        }
-      } catch (Exception e) {
-      }
-    }
-
-    if (regionAttributes.getEntryTimeToLive() != null) {
-      RegionAttributesType.ExpirationAttributesType ettl = regionAttributes.getEntryTimeToLive();
-      factory.setEntryTimeToLive(
-          new ExpirationAttributes(Integer.valueOf(ettl.getTimeout()),
-              ExpirationAction.fromXmlString(ettl.getAction())));
-
-      try {
-        if (ettl.getCustomExpiry() != null) {
-          factory.setCustomEntryTimeToLive((CustomExpiry) ClassPathLoader.getLatest()
-              .forName(ettl.getCustomExpiry().getClassName())
-              .newInstance());
-        }
-      } catch (Exception e) {
-      }
-    }
-
-    if (regionAttributes.getRegionIdleTime() != null) {
-      RegionAttributesType.ExpirationAttributesType ritl = regionAttributes.getRegionIdleTime();
-      factory.setRegionIdleTimeout(
-          new ExpirationAttributes(Integer.valueOf(ritl.getTimeout()),
-              ExpirationAction.fromXmlString(ritl.getAction())));
-    }
-
-    if (regionAttributes.getRegionTimeToLive() != null) {
-      RegionAttributesType.ExpirationAttributesType rttl = regionAttributes.getRegionTimeToLive();
-      factory.setRegionTimeToLive(
-          new ExpirationAttributes(Integer.valueOf(rttl.getTimeout()),
-              ExpirationAction.fromXmlString(rttl.getAction())));
-    }
-  }
-
-  private <K, V> void validateAndSetCustomClasses(RegionAttributesType regionAttributes,
-      RegionFactory<K, V> factory) {
-    if (regionAttributes.getEntryIdleTime() != null
-        && regionAttributes.getEntryIdleTime().getCustomExpiry() != null) {
-      String customExpiry = regionAttributes.getEntryIdleTime().getCustomExpiry().getClassName();
-      String neededFor = CliStrings.ENTRY_IDLE_TIME_CUSTOM_EXPIRY;
-      Class<CustomExpiry> customExpiryClass = CliUtil.forName(customExpiry, neededFor);
-      CliUtil.newInstance(customExpiryClass, neededFor);
-    }
-
-    if (regionAttributes.getEntryTimeToLive() != null
-        && regionAttributes.getEntryTimeToLive().getCustomExpiry() != null) {
-      String customExpiry = regionAttributes.getEntryTimeToLive().getCustomExpiry().getClassName();
-      String neededFor = CliStrings.ENTRY_TTL_CUSTOM_EXPIRY;
-      Class<CustomExpiry> customExpiryClass = CliUtil.forName(customExpiry, neededFor);
-      CliUtil.newInstance(customExpiryClass, neededFor);
-    }
-
-    if (regionAttributes.getPartitionAttributes() != null
-        && regionAttributes.getPartitionAttributes().getPartitionResolver() != null) {
-      String partitionResolver =
-          regionAttributes.getPartitionAttributes().getPartitionResolver().getClassName();
-      String neededFor = CliStrings.CREATE_REGION__PARTITION_RESOLVER;
-      Class<PartitionResolver> partitionResolverClass =
-          CliUtil.forName(partitionResolver, neededFor);
-      CliUtil.newInstance(partitionResolverClass, neededFor);
-    }
-
-    if (regionAttributes.getCacheLoader() != null) {
-      String cacheLoader =
-          regionAttributes.getCacheLoader().getClassName();
-      String neededFor = CliStrings.CREATE_REGION__CACHELOADER;
-      Class<CacheLoader> cacheLoaderClass =
-          CliUtil.forName(cacheLoader, neededFor);
-      CacheLoader loader = CliUtil.newInstance(cacheLoaderClass, neededFor);
-      factory.setCacheLoader(loader);
-    }
-
-    if (regionAttributes.getCacheWriter() != null) {
-      String cacheWriter =
-          regionAttributes.getCacheWriter().getClassName();
-      String neededFor = CliStrings.CREATE_REGION__CACHEWRITER;
-      Class<CacheWriter> cacheWriterClass =
-          CliUtil.forName(cacheWriter, neededFor);
-      CacheWriter writer = CliUtil.newInstance(cacheWriterClass, neededFor);
-      factory.setCacheWriter(writer);
-    }
-
-    if (regionAttributes.getCacheListeners() != null) {
-      List<DeclarableType> configListeners = regionAttributes.getCacheListeners();
-      CacheListener[] listeners = new CacheListener[configListeners.size()];
-      String neededFor = CliStrings.CREATE_REGION__CACHELISTENER;
-      for (int i = 0; i < configListeners.size(); i++) {
-        String listener = configListeners.get(i).getClassName();
-        Class<CacheListener> cacheListenerClass = CliUtil.forName(listener, neededFor);
-        listeners[i] = CliUtil.newInstance(cacheListenerClass, neededFor);
-      }
-      factory.initCacheListeners(listeners);
-    }
-
-    final String keyConstraint = (String) regionAttributes.getKeyConstraint();
-    final String valueConstraint = regionAttributes.getValueConstraint();
-    if (keyConstraint != null && !keyConstraint.isEmpty()) {
-      Class<K> keyConstraintClass =
-          CliUtil.forName(keyConstraint, CliStrings.CREATE_REGION__KEYCONSTRAINT);
-      factory.setKeyConstraint(keyConstraintClass);
-    }
-
-    if (valueConstraint != null && !valueConstraint.isEmpty()) {
-      Class<V> valueConstraintClass =
-          CliUtil.forName(valueConstraint, CliStrings.CREATE_REGION__VALUECONSTRAINT);
-      factory.setValueConstraint(valueConstraintClass);
-    }
-
-    if (regionAttributes.getCompressor() != null) {
-      Class<Compressor> compressorKlass =
-          CliUtil.forName(regionAttributes.getCompressor().getClassName(),
-              CliStrings.CREATE_REGION__COMPRESSOR);
-      factory.setCompressor(
-          CliUtil.newInstance(compressorKlass, CliStrings.CREATE_REGION__COMPRESSOR));
-    }
-  }
-
-

MOV26 UPD40 INS23 INS83 INS83 INS83 INS43 INS59 UPD42 MOV42 UPD42 MOV42 MOV14 UPD43 UPD42 INS21 INS43 MOV32 MOV42 MOV43 UPD42 MOV42 INS42 INS14 INS42 UPD42 INS14 MOV43 INS32 MOV43 INS40 INS45 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL40 DEL45 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL83 DEL42 DEL73 DEL42 DEL73 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL45 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL45 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL32 DEL42 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL73 DEL42 DEL73 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL11 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL11 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL73 DEL42 DEL73 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL43 DEL42 DEL40 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31