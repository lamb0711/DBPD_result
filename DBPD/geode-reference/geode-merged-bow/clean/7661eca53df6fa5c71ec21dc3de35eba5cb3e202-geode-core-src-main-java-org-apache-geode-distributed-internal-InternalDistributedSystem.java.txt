GEODE-6369 Cache-creation failure after a successful auto-reconnect causes subsequent NPE

If an error occurs while rebuilding the cache on auto-reconnect & we can't
continue we should throw an exception to any thread waiting for the
reconnect to complete.

If we're unable to contact the cluster configuration service we do not
terminate auto-reconnect attempts.

New members are now only allowed to join after view preparation has
completed.  This will reduce the number of "surprise members" and also
ensures that any old member IDs have been removed from the view.

We now only attempt to use findCoordinatorFromView multiple times if the
view actually changes.  Instead we contact locators again to see if
there are new registrants.

fixing the above exposed other problems in auto-reconnect:

* messages were being thrown away by the location service quorum checker
during auto-reconnect.  some of these were "join" messages that needed
to be delivered to the new membership service

* registrants weren't being removed from the recovered membership view
in the locator.  This confused restarting nodes because the recovered
membership view has stale info in it that they don't want to use

* locator services restart were hanging due to profile interchange being
done under synchronization

-import org.apache.geode.cache.CacheXmlException;
+import org.apache.geode.internal.config.ClusterConfigurationNotAvailableException;
-    if (isForcedDisconnect) {
+    if (isForcedDisconnect && !this.isReconnectingDS) {
+   * If reconnect fails due to an exception it will be in this field
+   */
+  private Exception reconnectException;
+
+  /**
+            reconnectException = e;
-          if (isDebugEnabled) {
-            logger.debug("Attempt to reconnect failed with GemFireConfigException");
-          }
-        } catch (Exception ee) {
+        } catch (Exception e) {
-              ee);
+              e);
+          reconnectException = e;
-            try {
-              CacheConfig config = new CacheConfig();
-              if (cacheXML != null) {
-                config.setCacheXMLDescription(cacheXML);
-              }
-              cache = GemFireCacheImpl.create(this.reconnectDS, config);
-
-              if (!cache.isClosed()) {
-                createAndStartCacheServers(cacheServerCreation, cache);
-                if (cache.getCachePerfStats().getReliableRegionsMissing() == 0) {
-                  reconnectAttemptCounter = 0;
+            boolean retry;
+            do {
+              retry = false;
+              try {
+                CacheConfig config = new CacheConfig();
+                if (cacheXML != null) {
+                  config.setCacheXMLDescription(cacheXML);
-              }
+                cache = GemFireCacheImpl.create(this.reconnectDS, config);
-            } catch (CacheXmlException e) {
-              logger.warn("Exception occurred while trying to create the cache during reconnect",
-                  e);
-              reconnectDS.disconnect();
-              reconnectDS = null;
-              reconnectCancelled = true;
-              break;
-            } catch (CancelException ignor) {
-              // If this reconnect is for required-roles the algorithm is recursive and we
-              // shouldn't retry at this level
-              if (!forcedDisconnect) {
+                if (!cache.isClosed()) {
+                  createAndStartCacheServers(cacheServerCreation, cache);
+                  if (cache.getCachePerfStats().getReliableRegionsMissing() == 0) {
+                    reconnectAttemptCounter = 0;
+                  }
+                }
+
+              } catch (GemFireConfigException e) {
+                if (e.getCause() instanceof ClusterConfigurationNotAvailableException) {
+                  retry = true;
+                  logger.info("Reconnected to the cluster but the cluster configuration service "
+                      + "isn't available - will retry creating the cache");
+                  try {
+                    Thread.sleep(5000);
+                  } catch (InterruptedException e1) {
+                    reconnectCancelled = true;
+                    reconnectException = e;
+                    break;
+                  }
+                }
+              } catch (Exception e) {
+                // We need to give up because we'll probably get the same exception in
+                // the next attempt to build the cache.
+                logger.warn(
+                    "Exception occurred while trying to create the cache during reconnect.  Auto-reconnect is terminating.",
+                    e);
+                reconnectCancelled = true;
+                reconnectException = e;
-              logger.warn("Exception occurred while trying to create the cache during reconnect",
-                  ignor);
-              reconnectDS.disconnect();
-              reconnectDS = null;
-            } catch (Exception e) {
-              logger.warn("Exception occurred while trying to create the cache during reconnect",
-                  e);
-            }
+            } while (retry);
+            reconnectCancelled = true;
+            reconnectException = e;
+      dm.getMembershipManager().setReconnectCompleted(true);
+      InternalDistributedSystem newds = reconnectDS;
+      if (newds != null) {
+        newds.getDM().getMembershipManager().setReconnectCompleted(true);
+      }
+      if (reconnectException != null) {
+        throw new DistributedSystemDisconnectedException(
+            "Reconnect attempts terminated due to exception", reconnectException);
+      }

MOV26 UPD40 INS23 INS29 INS83 MOV43 INS59 INS65 INS42 INS27 INS66 INS42 INS38 INS21 INS60 INS25 INS25 INS22 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS52 INS42 INS32 INS42 INS9 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS33 INS53 INS42 INS42 INS32 INS14 INS32 INS42 INS9 INS43 INS45 INS42 INS43 UPD42 INS21 INS8 INS32 INS42 INS42 INS42 INS7 INS60 INS19 INS42 INS42 INS21 UPD42 INS42 INS42 INS39 INS59 MOV8 INS42 MOV21 INS21 INS7 INS42 INS21 INS7 INS42 INS42 INS7 INS12 INS42 INS42 INS42 INS9 MOV44 INS8 UPD43 INS25 INS21 INS21 INS10 UPD42 INS62 INS8 INS7 INS7 INS32 INS43 INS21 MOV21 INS54 UPD45 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS7 INS8 MOV12 INS42 INS9 UPD42 INS27 MOV21 INS45 INS45 UPD43 UPD42 INS10 UPD42 UPD42 INS34 UPD42 INS7 INS42 INS9 UPD42 INS42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL45 DEL42 DEL42 DEL38 DEL10 DEL8 DEL25 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL42 DEL33 DEL7 DEL21 DEL10 DEL8 DEL12