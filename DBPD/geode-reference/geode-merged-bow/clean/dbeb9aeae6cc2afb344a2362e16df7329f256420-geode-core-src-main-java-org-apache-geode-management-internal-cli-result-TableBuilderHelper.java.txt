Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Helps table builder for adjusting result width according to screen width 
+ * Helps table builder for adjusting result width according to screen width
-  public static class Column implements Comparable<Column>{
+  public static class Column implements Comparable<Column> {
-    boolean markForTrim=false;
-    int trimmedLength=0;
-    
+    boolean markForTrim = false;
+    int trimmedLength = 0;
+
-    public int compareTo(Column o) {      
+    public int compareTo(Column o) {
-    
-    public String toString(){
-      return ("OI:" + originalIndex +"<" + length + ">\n");
+
+    public String toString() {
+      return ("OI:" + originalIndex + "<" + length + ">\n");
-    
+
-  
-  public static class TooManyColumnsException extends RuntimeException{
-    public TooManyColumnsException(String str){
+
+  public static class TooManyColumnsException extends RuntimeException {
+    public TooManyColumnsException(String str) {
-  
-  public static int[] recalculateColSizesForScreen(int screenWidth, int[] colSizes, String colSeparators){
-    
+
+  public static int[] recalculateColSizesForScreen(int screenWidth, int[] colSizes,
+      String colSeparators) {
+
-      //change the screen width to account for separator chars
-      screenWidth -= (colSizes.length-1)*colSeparators.length();
-      
-      //build sorted list and find total width
+      // change the screen width to account for separator chars
+      screenWidth -= (colSizes.length - 1) * colSeparators.length();
+
+      // build sorted list and find total width
-        totalLength +=k;
+        totalLength += k;
-      
-      //No need to reduce the column width return orig array
-      if(totalLength <= screenWidth){
+
+      // No need to reduce the column width return orig array
+      if (totalLength <= screenWidth) {
-      }        
+      }
-      //find out columns which need trimming
+      // find out columns which need trimming
-      //calculate trimmed width for columns marked for
-      //distribute the trimming as per percentage
+      // calculate trimmed width for columns marked for
+      // distribute the trimming as per percentage
-            s.trimmedLength = (int) Math
-                .floor((spaceLeft * ((double) s.length / totalExtra)));
+            s.trimmedLength = (int) Math.floor((spaceLeft * ((double) s.length / totalExtra)));
-      
+
-        if (colSize!=colSizes[index] && colSize < 2)
-          throw new TooManyColumnsException(
-              "Computed ColSize="
-                  + colSize
-                  + " Set RESULT_VIEWER to external. This uses the 'less' command (with horizontal scrolling) to see wider results");
+        if (colSize != colSizes[index] && colSize < 2)
+          throw new TooManyColumnsException("Computed ColSize=" + colSize
+              + " Set RESULT_VIEWER to external. This uses the 'less' command (with horizontal scrolling) to see wider results");
-           
+
-      //Returning original colSizes since reader is set to external
+      // Returning original colSizes since reader is set to external
-    Gfsh gfsh = Gfsh.getCurrentInstance();   
+    Gfsh gfsh = Gfsh.getCurrentInstance();
-  
+
-      return Gfsh.DEFAULT_APP_RESULT_VIEWER.equals(gfsh
-          .getEnvProperty(Gfsh.ENV_APP_RESULT_VIEWER)) && !Gfsh.isInfoResult();
+      return Gfsh.DEFAULT_APP_RESULT_VIEWER.equals(gfsh.getEnvProperty(Gfsh.ENV_APP_RESULT_VIEWER))
+          && !Gfsh.isInfoResult();
-  
-  
+
+

UPD66