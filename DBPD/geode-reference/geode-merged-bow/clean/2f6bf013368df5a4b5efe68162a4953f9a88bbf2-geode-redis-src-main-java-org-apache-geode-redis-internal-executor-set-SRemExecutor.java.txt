GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)

* GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions

This PR builds on the work originally submitted by Greg Green in
https://github.com/apache/geode/pull/404. Also acknowledgements to Galen
O'Sullivan for addressing locking issues in that PR.

This commit changes the storage model of Redis hashes and sets from one
region per each Redis key to a single hash region and single set region.
The Redis key is now also the region key and the data is stored in a Map
and Set respectively in the region. Currently, the backing values do not
implement Delta changes, however this will be a future optimization.

This also fixes the inability of Redis keys to contain other characters
commonly used, such as colons (':').

- Add `RedisLockService` which manages a lock per key within a single
  JVM. Locks are held in a WeakHasMap to allow for automatic cleanup
  (prior PR work, using a pure ConcurrentHashMap, ended up leaking
  memory since there is no straight-forward way to clean up unused
  keys/locks).
- Add new tests including concurrency tests for hashes and sets

Co-authored-by: Greg Green <ggreen@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Prasath Durairaj <prasathd@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

+import java.util.Set;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
-  private final int NONE_REMOVED = 0;
+  private static final int NONE_REMOVED = 0;
-    @SuppressWarnings("unchecked")
-    Region<ByteArrayWrapper, Boolean> keyRegion =
-        (Region<ByteArrayWrapper, Boolean>) context.getRegionProvider().getRegion(key);
-    if (keyRegion == null) {
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NONE_REMOVED));
-      return;
-    }
+    Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Set<ByteArrayWrapper> set = region.get(key);
-    for (int i = 2; i < commandElems.size(); i++) {
-      Object oldVal;
-      oldVal = keyRegion.remove(new ByteArrayWrapper(commandElems.get(i)));
-      if (oldVal != null)
-        numRemoved++;
+      if (set == null || set.isEmpty()) {
+        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NONE_REMOVED));
+        return;
+      }
+
+      for (int i = 2; i < commandElems.size(); i++) {
+        if (set.remove(new ByteArrayWrapper(commandElems.get(i)))) {
+          numRemoved++;
+        }
+      }
+
+      region.put(key, set);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      return;
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
+      return;

INS26 INS26 INS26 INS40 INS40 INS40 INS83 INS60 INS54 UPD74 MOV74 INS59 INS58 INS8 INS12 INS12 INS74 INS42 INS32 INS43 INS59 INS60 MOV25 MOV24 INS21 INS44 INS8 INS44 INS8 INS43 UPD43 MOV43 INS42 INS42 UPD42 MOV42 INS42 INS32 INS74 INS59 INS27 INS32 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 INS41 INS42 UPD42 INS42 INS42 INS42 INS43 MOV43 INS42 INS32 INS27 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV33 INS42 INS42 MOV32 INS8 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV21 INS42 INS42 INS42 INS42 MOV32 INS45 INS42 INS42 INS32 INS45 UPD42 INS42 INS42 DEL42 DEL45 DEL79 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL27 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL33 DEL27