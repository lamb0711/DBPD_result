GEODE-7536 - Break Gfsh out into separate module (#4422)


- ManagementUtils is split from CliUtil with non-CLI methods.
- Introduce new CommandProcessor interface which is a CacheService. This
  is implemented by OnlineCommandProcessor and is used in
  MemberMBeanBridge.
- Remove try/catch from ClusterConfigurationStatusRetriever since any
  exception will be handled at a higher level.

+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileFilter;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import org.apache.commons.lang3.ArrayUtils;
+
+import org.apache.geode.annotations.Immutable;
+import org.apache.geode.cache.Cache;
+import org.apache.geode.cache.Region;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.internal.ClassPathLoader;
+import org.apache.geode.management.DistributedRegionMXBean;
+import org.apache.geode.management.ManagementService;
+import org.apache.geode.management.internal.MBeanJMXAdapter;
+import org.apache.geode.management.internal.exceptions.UserErrorException;
+import org.apache.geode.management.internal.i18n.CliStrings;
+  @Immutable
+  public static final FileFilter JAR_FILE_FILTER = new CustomFileFilter(".jar");
+
+
+  public static <K> Class<K> forName(String classToLoadName, String neededFor) {
+    Class<K> loadedClass = null;
+    try {
+      // Set Constraints
+      ClassPathLoader classPathLoader = ClassPathLoader.getLatest();
+      if (classToLoadName != null && !classToLoadName.isEmpty()) {
+        loadedClass = (Class<K>) classPathLoader.forName(classToLoadName);
+      }
+    } catch (ClassNotFoundException | NoClassDefFoundError e) {
+      throw new RuntimeException(
+          MessageFormat.format(CliStrings.ERROR__MSG__COULD_NOT_FIND_CLASS_0_SPECIFIED_FOR_1,
+              classToLoadName, neededFor),
+          e);
+    } catch (ClassCastException e) {
+      throw new RuntimeException(MessageFormat.format(
+          CliStrings.ERROR__MSG__CLASS_0_SPECIFIED_FOR_1_IS_NOT_OF_EXPECTED_TYPE,
+          classToLoadName, neededFor), e);
+    }
+
+    return loadedClass;
+  }
+
+  public static DistributedMember getDistributedMemberByNameOrId(String memberNameOrId,
+      InternalCache cache) {
+    if (memberNameOrId == null) {
+      return null;
+    }
+
+    Set<DistributedMember> memberSet = getAllMembers(cache);
+    return memberSet.stream().filter(member -> memberNameOrId.equalsIgnoreCase(member.getId())
+        || memberNameOrId.equalsIgnoreCase(member.getName())).findFirst().orElse(null);
+  }
+
+  public static Set<String> getAllRegionNames(Cache cache) {
+    Set<String> regionNames = new HashSet<>();
+    Set<Region<?, ?>> rootRegions = cache.rootRegions();
+
+    for (Region<?, ?> rootRegion : rootRegions) {
+      regionNames.add(rootRegion.getFullPath().substring(1));
+
+      Set<Region<?, ?>> subRegions = rootRegion.subregions(true);
+
+      for (Region<?, ?> subRegion : subRegions) {
+        regionNames.add(subRegion.getFullPath().substring(1));
+      }
+    }
+    return regionNames;
+  }
+
+  public static List<String> bytesToFiles(Byte[][] fileData, String parentDirPath)
+      throws IOException, UnsupportedOperationException {
+    List<String> filesPaths = new ArrayList<>();
+    FileOutputStream fos = null;
+    File file = null;
+
+    File parentDir = new File(parentDirPath);
+    if (!parentDir.exists() && !parentDir.mkdirs()) {
+      throw new UnsupportedOperationException(
+          "Couldn't create required directory structure for " + parentDirPath);
+    }
+    for (int i = 0; i < fileData.length; i++) {
+      byte[] bytes = ArrayUtils.toPrimitive(fileData[i]);
+      if (i % 2 == 0) {
+        // Expect file name as bytes at even index
+        String fileName = new String(bytes);
+        file = new File(parentDir, fileName);
+        fos = new FileOutputStream(file);
+      } else {
+        // Expect file contents as bytes at odd index
+        fos.write(bytes);
+        fos.close();
+        filesPaths.add(file.getAbsolutePath());
+      }
+    }
+    return filesPaths;
+  }
+
+  /**
+   * Returns a Set of DistributedMember for members that have the specified <code>region</code>.
+   * <code>returnAll</code> indicates whether to return all members or only the first member we
+   * find.
+   *
+   * @param region region path for which members that have this region are required
+   * @param cache cache instance to use to find members
+   * @param returnAll if true, returns all matching members, else returns only first one found.
+   * @return a Set of DistributedMember for members that have the specified <code>region</code>.
+   */
+  public static Set<DistributedMember> getRegionAssociatedMembers(String region,
+      final InternalCache cache, boolean returnAll) {
+    if (region == null || region.isEmpty()) {
+      return Collections.emptySet();
+    }
+
+    if (!region.startsWith(Region.SEPARATOR)) {
+      region = Region.SEPARATOR + region;
+    }
+
+    DistributedRegionMXBean regionMXBean =
+        ManagementService.getManagementService(cache).getDistributedRegionMXBean(region);
+
+    if (regionMXBean == null) {
+      return Collections.emptySet();
+    }
+
+    String[] regionAssociatedMemberNames = regionMXBean.getMembers();
+    Set<DistributedMember> matchedMembers = new HashSet<>();
+    Set<DistributedMember> allClusterMembers = new HashSet<>(cache.getMembers());
+    allClusterMembers.add(cache.getDistributedSystem().getDistributedMember());
+
+    for (DistributedMember member : allClusterMembers) {
+      List<String> regionAssociatedMemberNamesList = Arrays.asList(regionAssociatedMemberNames);
+      String name = MBeanJMXAdapter.getMemberNameOrUniqueId(member);
+      if (regionAssociatedMemberNamesList.contains(name)) {
+        matchedMembers.add(member);
+        if (!returnAll) {
+          return matchedMembers;
+        }
+      }
+    }
+    return matchedMembers;
+  }
+
+  /**
+   * this finds the member that hosts all the regions passed in.
+   *
+   * @param returnAll if true, returns all matching members, otherwise, returns only one.
+   */
+  public static Set<DistributedMember> getQueryRegionsAssociatedMembers(Set<String> regions,
+      final InternalCache cache, boolean returnAll) {
+    Set<DistributedMember> results = regions.stream()
+        .map(region -> getRegionAssociatedMembers(region, cache, true)).reduce((s1, s2) -> {
+          s1.retainAll(s2);
+          return s1;
+        }).get();
+
+    if (returnAll || results.size() <= 1) {
+      return results;
+    }
+
+    // returns a set of only one item
+    return Collections.singleton(results.iterator().next());
+  }
+
+  public static Set<DistributedMember> findMembers(Set<DistributedMember> membersToConsider,
+      String[] groups, String[] members) {
+    if (groups == null) {
+      groups = new String[] {};
+    }
+
+    if (members == null) {
+      members = new String[] {};
+    }
+
+    if ((members.length > 0) && (groups.length > 0)) {
+      throw new UserErrorException(CliStrings.PROVIDE_EITHER_MEMBER_OR_GROUP_MESSAGE);
+    }
+
+    if (members.length == 0 && groups.length == 0) {
+      return membersToConsider;
+    }
+
+    Set<DistributedMember> matchingMembers = new HashSet<>();
+    // it will either go into this loop or the following loop, not both.
+    for (String memberNameOrId : members) {
+      for (DistributedMember member : membersToConsider) {
+        if (memberNameOrId.equalsIgnoreCase(member.getId())
+            || memberNameOrId.equalsIgnoreCase(member.getName())) {
+          matchingMembers.add(member);
+        }
+      }
+    }
+
+    for (String group : groups) {
+      for (DistributedMember member : membersToConsider) {
+        if (member.getGroups().contains(group)) {
+          matchingMembers.add(member);
+        }
+      }
+    }
+    return matchingMembers;
+  }
+
+  /**
+   * Finds all Members (including both servers and locators) which belong to the given arrays of
+   * groups or members.
+   */
+  public static Set<DistributedMember> findMembersIncludingLocators(String[] groups,
+      String[] members, InternalCache cache) {
+    Set<DistributedMember> allMembers = getAllMembers(cache);
+    return findMembers(allMembers, groups, members);
+  }
+
+  /**
+   * Finds all Servers which belong to the given arrays of groups or members. Does not include
+   * locators.
+   */
+  public static Set<DistributedMember> findMembers(String[] groups, String[] members,
+      InternalCache cache) {
+    Set<DistributedMember> allNormalMembers = getAllNormalMembers(cache);
+
+    return findMembers(allNormalMembers, groups, members);
+  }
+
+  /**
+   * Finds all Servers which belong to the given arrays of groups or members. Does not include
+   * locators.
+   */
+  public static Set<DistributedMember> findMembers(String[] groups, String[] members,
+      DistributionManager distributionManager) {
+    Set<DistributedMember> allNormalMembers = new HashSet<DistributedMember>(
+        distributionManager.getNormalDistributionManagerIds());
+
+    return findMembers(allNormalMembers, groups, members);
+  }
+
+  /**
+   * Even thought this is only used in a test, caller of MemberMXBean.processCommand(String, Map,
+   * Byte[][]) will need to use this method to convert a fileList to Byte[][] to call that
+   * deprecated API.
+   *
+   * Once that deprecated API is removed, we can delete this method and the tests.
+   */
+  public static Byte[][] filesToBytes(List<String> fileNames) throws IOException {
+    List<byte[]> filesDataList = new ArrayList<>();
+
+    for (String fileName : fileNames) {
+      File file = new File(fileName);
+
+      if (!file.exists()) {
+        throw new FileNotFoundException("Could not find " + file.getCanonicalPath());
+      }
+
+      if (file.isDirectory()) {
+        File[] childrenFiles = file.listFiles(JAR_FILE_FILTER);
+        for (File childrenFile : childrenFiles) {
+          // 1. add name of the file as bytes at even index
+          filesDataList.add(childrenFile.getName().getBytes());
+          // 2. add file contents as bytes at odd index
+          filesDataList.add(toByteArray(new FileInputStream(childrenFile)));
+        }
+      } else {
+        filesDataList.add(file.getName().getBytes());
+        filesDataList.add(toByteArray(new FileInputStream(file)));
+      }
+    }
+
+    return filesDataList.stream().map(ArrayUtils::toObject).toArray(Byte[][]::new);
+  }
+
+  public static byte[] toByteArray(InputStream input) throws IOException {
+    ByteArrayOutputStream output = new ByteArrayOutputStream();
+    int n;
+    byte[] buffer = new byte[4096];
+    while (-1 != (n = input.read(buffer))) {
+      output.write(buffer, 0, n);
+    }
+
+    return output.toByteArray();
+  }
+
+  static class CustomFileFilter implements FileFilter {
+    private String extensionWithDot;
+
+    public CustomFileFilter(String extensionWithDot) {
+      this.extensionWithDot = extensionWithDot;
+    }
+
+    @Override
+    public boolean accept(File pathname) {
+      String name = pathname.getName();
+      return name.endsWith(extensionWithDot);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS55 INS78 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS73 INS74 INS42 INS44 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS83 INS5 INS42 INS44 INS43 INS8 INS83 INS83 INS5 INS42 INS44 INS43 INS8 INS83 INS42 INS43 INS23 INS31 INS31 INS42 INS42 INS42 INS14 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS60 INS54 INS41 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS41 INS43 INS43 INS43 INS42 INS60 INS60 INS70 INS41 INS43 INS43 INS5 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS25 INS24 INS41 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS83 INS43 INS42 INS39 INS42 INS25 INS25 INS60 INS25 INS60 INS60 INS60 INS21 INS70 INS41 INS65 INS65 INS43 INS43 INS74 INS42 INS83 INS43 INS42 INS39 INS42 INS60 INS25 INS41 INS43 INS43 INS74 INS42 INS5 INS42 INS5 INS42 INS25 INS25 INS25 INS25 INS60 INS70 INS70 INS41 INS65 INS43 INS43 INS5 INS42 INS5 INS42 INS43 INS42 INS60 INS41 INS65 INS43 INS43 INS5 INS42 INS5 INS42 INS43 INS42 INS60 INS41 INS65 INS43 INS43 INS5 INS42 INS5 INS42 INS43 INS42 INS60 INS41 INS65 INS43 INS85 INS85 INS74 INS42 INS42 INS60 INS70 INS41 INS39 INS85 INS43 INS42 INS42 INS60 INS60 INS60 INS61 INS41 INS42 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS43 INS45 INS42 INS42 INS42 INS42 INS74 INS59 INS8 INS12 INS12 INS42 INS42 INS42 INS27 INS8 INS74 INS59 INS32 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS43 INS85 INS85 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS58 INS27 INS37 INS8 INS42 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS27 INS8 INS38 INS8 INS43 INS59 INS27 INS8 INS5 INS59 INS74 INS59 INS74 INS59 INS32 INS44 INS42 INS8 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS42 INS74 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS43 INS43 INS85 INS43 INS85 INS27 INS8 INS27 INS8 INS27 INS8 INS27 INS8 INS74 INS59 INS44 INS42 INS8 INS44 INS42 INS8 INS42 INS66 INS66 INS42 INS42 INS43 INS85 INS43 INS85 INS42 INS74 INS59 INS32 INS66 INS66 INS42 INS42 INS43 INS85 INS43 INS85 INS42 INS74 INS59 INS32 INS66 INS66 INS42 INS42 INS43 INS85 INS43 INS85 INS42 INS74 INS59 INS32 INS66 INS66 INS66 INS66 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS43 INS59 INS39 INS59 INS5 INS59 INS27 INS8 INS32 INS42 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS60 INS41 INS42 INS43 INS43 INS42 INS33 INS60 INS25 INS44 INS8 INS44 INS8 INS42 INS33 INS41 INS43 INS43 INS42 INS32 INS32 INS42 INS33 INS43 INS43 INS42 INS14 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS60 INS70 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS33 INS42 INS42 INS33 INS42 INS42 INS14 INS38 INS38 INS53 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS27 INS32 INS41 INS32 INS21 INS42 INS42 INS32 INS42 INS33 INS41 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS60 INS60 INS25 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS27 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS33 INS21 INS36 INS36 INS53 INS27 INS27 INS41 INS43 INS43 INS42 INS14 INS43 INS42 INS70 INS43 INS42 INS70 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS5 INS42 INS14 INS43 INS42 INS60 INS25 INS25 INS32 INS42 INS89 INS42 INS42 INS14 INS42 INS39 INS85 INS42 INS3 INS38 INS36 INS21 INS42 INS42 INS42 INS7 INS42 INS43 INS59 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS84 INS42 INS53 INS43 INS42 INS53 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS42 INS43 INS76 INS76 INS42 INS42 INS43 INS76 INS76 INS32 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS74 INS43 INS42 INS32 INS32 INS14 INS42 INS34 INS5 INS59 INS27 INS8 INS8 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS40 INS7 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS74 INS32 INS32 INS42 INS42 INS74 INS59 INS43 INS59 INS32 INS8 INS42 INS42 INS32 INS42 INS32 INS34 INS42 INS32 INS42 INS7 INS7 INS27 INS27 INS14 INS40 INS34 INS40 INS34 INS42 INS42 INS42 INS74 INS42 INS44 INS42 INS8 INS42 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS39 INS85 INS74 INS42 INS43 INS59 INS38 INS8 INS32 INS8 INS8 INS32 INS42 INS90 INS5 INS43 INS5 INS34 INS34 INS7 INS32 INS22 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS38 INS21 INS43 INS43 INS14 INS42 INS14 INS32 INS42 INS86 INS43 INS42 INS42 INS42 INS42 INS32 INS43 INS74 INS42 INS32 INS74 INS42 INS21 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS27 INS39 INS85 INS42 INS32 INS27 INS34 INS60 INS21 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS25 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS3 INS42 INS3 INS40 INS34 INS40 INS34 INS43 INS40 INS43 INS43 INS42 INS25 INS43 INS42 INS25 INS43 INS43 INS42 INS42 INS43 INS42 INS42 INS14 INS32 INS53 INS42 INS42 INS60 INS70 INS21 INS21 INS42 INS42 INS42 INS42 INS43 INS85 INS85 INS42 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS7 INS42 INS42 INS43 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS59 INS27 INS42 INS32 INS42 INS34 INS42 INS43 INS76 INS76 INS42 INS42 INS9 INS43 INS76 INS76 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS2 INS42 INS34 INS43 INS59 INS7 INS7 INS32 INS32 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS38 INS8 INS32 INS42 INS86 INS59 INS59 INS8 INS5 INS4 INS5 INS4 INS42 INS42 INS42 INS27 INS8 INS42 INS32 INS8 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS14 INS5 INS59 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS41 INS42 INS42 INS59 INS32 INS42 INS42 INS21 INS41 INS43 INS85 INS43 INS85 INS32 INS32 INS21 INS32 INS42 INS42 INS21 INS42 INS43 INS27 INS43 INS85 INS42 INS32 INS43 INS42 INS21 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS74 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS34 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS14 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS42 INS42