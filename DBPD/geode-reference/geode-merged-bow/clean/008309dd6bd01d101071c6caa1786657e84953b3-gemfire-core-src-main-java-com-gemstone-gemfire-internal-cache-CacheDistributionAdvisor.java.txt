Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreFactoryImpl;
+import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreImpl;
+  private static final int IS_OFF_HEAP_MASK =           0x800000;
+    public boolean isOffHeap = false;
+
+      if (this.isOffHeap) s |= IS_OFF_HEAP_MASK;
+      this.isOffHeap = (s & IS_OFF_HEAP_MASK) != 0;
+      sb.append("; IsOffHeap=" + this.isOffHeap);
-          if (allAsyncEventIds.equals(cp.asyncEventQueueIds)) {
+          /*Since HDFS queues are created only when a region is created, this check is 
+           * unnecessary. Also this check is creating problem because hdfs queue is not 
+           * created on an accessor. Hence removing this check for hdfs queues. */
+          Set<String> allAsyncEventIdsNoHDFS = removeHDFSQueues(allAsyncEventIds);
+          Set<String> profileQueueIdsNoHDFS = removeHDFSQueues(cp.asyncEventQueueIds);
+          if (allAsyncEventIdsNoHDFS.equals(profileQueueIdsNoHDFS)) {
-            differAsycnQueueIds.add(allAsyncEventIds);
-            differAsycnQueueIds.add(cp.asyncEventQueueIds);
+            differAsycnQueueIds.add(allAsyncEventIdsNoHDFS);
+            differAsycnQueueIds.add(profileQueueIdsNoHDFS);
+      private Set<String> removeHDFSQueues(Set<String> queueIds){
+        Set<String> queueIdsWithoutHDFSQueues = new HashSet<String>();
+        for (String queueId: queueIds){
+          if (!queueId.startsWith(HDFSStoreFactoryImpl.DEFAULT_ASYNC_QUEUE_ID_FOR_HDFS)){
+            queueIdsWithoutHDFSQueues.add(queueId);
+          }
+        }
+        return queueIdsWithoutHDFSQueues;
+      }

INS26 INS26 INS40 INS40 INS23 INS83 INS83 INS83 INS39 INS59 INS23 INS42 INS34 INS83 INS39 INS59 INS42 INS9 INS25 INS21 INS21 INS22 INS21 INS7 INS32 INS52 INS42 INS7 INS22 INS27 INS42 INS42 INS27 INS42 INS42 INS52 INS42 INS36 INS34 INS45 INS22 INS27 INS52 INS42 INS31 INS42 INS42 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS60 INS60 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS25 INS74 INS59 INS74 INS59 INS42 INS42 INS74 INS42 INS38 INS8 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 UPD42 INS42 INS43 INS43 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS32 UPD42 INS42 INS42 INS42 INS42 DEL40 DEL40