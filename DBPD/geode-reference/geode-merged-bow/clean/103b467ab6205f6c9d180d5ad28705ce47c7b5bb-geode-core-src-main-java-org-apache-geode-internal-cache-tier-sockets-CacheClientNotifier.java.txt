GEODE-5420: Protect events in HAContainer from premature modification

- Updated putInProgress boolean in HAWrapper to a counter to prevent prematurely setting ClientUpdateMessage to null when events are temporarily queued during a GII or message dispatcher initialization
- decAndRemoveFromHAContainer only removes when putInProgress counter and ref count are 0
- Refactored putEventInHARegion/putConditionallyInHAContainer to prevent overwriting an existing entry in the HAContainer.  Also reduces simplifies the code and reduces duplicated logic.
- Wrote missing basic HARegionQueue unit/integration tests, and an integration test to capture setting the ClientUpdateMessage property on HAEventWrapper to null prematurely
- Added new event tracing messages at debug logging level to help track similar issues in the future

Co-authored-by: Ryan McMahon <rmcmahon@pivotal.io>
Co-authored-by: Lynn Hughes-Godfrey <lhughesgodfrey@pivotal.io>

-      // Set the putInProgress flag to true before starting the put on proxy's
-      // HA queues. Nowhere else, this flag is being set to true.
-      wrapper.setPutInProgress(true);
+      wrapper.incrementPutInProgressCounter();
+
+      if (logger.isDebugEnabled()) {
+        logger.debug(
+            "Initial increment PutInProgressCounter on HAEventWrapper with Event ID hash code: "
+                + wrapper.hashCode() + "; System ID hash code: "
+                + System.identityHashCode(wrapper) + "; Wrapper details: " + wrapper);
+      }
+
-    checkAndRemoveFromClientMsgsRegion(conflatable);
+
+    if (conflatable instanceof HAEventWrapper) {
+      ((HAEventWrapper) conflatable).decrementPutInProgressCounter();
+    }
+
-   * If the conflatable is an instance of HAEventWrapper, and if the corresponding entry is present
-   * in the haContainer, set the reference to the clientUpdateMessage to null and putInProgress flag
-   * to false. Also, if the ref count is zero, then remove the entry from the haContainer.
-   *
-   * @since GemFire 5.7
-   */
-  private void checkAndRemoveFromClientMsgsRegion(Conflatable conflatable) {
-    if (haContainer == null) {
-      return;
-    }
-    if (conflatable instanceof HAEventWrapper) {
-      HAEventWrapper wrapper = (HAEventWrapper) conflatable;
-      if (!wrapper.getIsRefFromHAContainer()) {
-        wrapper = (HAEventWrapper) haContainer.getKey(wrapper);
-        if (wrapper != null && !wrapper.getPutInProgress()) {
-          synchronized (wrapper) {
-            if (wrapper.getReferenceCount() == 0L) {
-              if (logger.isDebugEnabled()) {
-                logger.debug("Removing event from haContainer: {}", wrapper);
-              }
-              haContainer.remove(wrapper);
-            }
-          }
-        }
-      } else {
-        // This wrapper resides in haContainer.
-        wrapper.setClientUpdateMessage(null);
-        wrapper.setPutInProgress(false);
-        synchronized (wrapper) {
-          if (wrapper.getReferenceCount() == 0L) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("Removing event from haContainer: {}", wrapper);
-            }
-            haContainer.remove(wrapper);
-          }
-        }
-      }
-    }
-  }
-
-  /**

INS25 MOV62 INS8 INS25 MOV21 MOV32 INS8 UPD42 INS21 INS36 INS42 INS32 MOV11 INS42 INS42 INS27 INS45 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS42 DEL9 DEL42 DEL42 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL25 DEL8 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31