Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/incubator-geode into develop

+import com.gemstone.gemfire.internal.cache.partitioned.rebalance.ParallelBucketOperator;
+  private static final int MAX_PARALLEL_OPERATIONS = Integer.getInteger("gemfire.MAX_PARALLEL_BUCKET_RECOVERIES", 8);
+  
-      BucketOperatorWrapper operator = getBucketOperator(detailsMap);
-      model = buildModel(operator, detailsMap, resourceManager);
-      for(PartitionRebalanceDetailsImpl details : operator.getDetailSet()) {
+      BucketOperatorWrapper serialOperator = getBucketOperator(detailsMap);
+      ParallelBucketOperator parallelOperator = new ParallelBucketOperator(MAX_PARALLEL_OPERATIONS, cache.getDistributionManager().getWaitingThreadPool(), serialOperator);
+      model = buildModel(parallelOperator, detailsMap, resourceManager);
+      for(PartitionRebalanceDetailsImpl details : serialOperator.getDetailSet()) {
+          model.waitForOperations();
-          model = buildModel(operator, detailsMap, resourceManager);
+          model = buildModel(parallelOperator, detailsMap, resourceManager);
-      for(PartitionRebalanceDetailsImpl details : operator.getDetailSet()) {
+      for(PartitionRebalanceDetailsImpl details : serialOperator.getDetailSet()) {
-      return Collections.<PartitionRebalanceInfo>unmodifiableSet(operator.getDetailSet());
+      return Collections.<PartitionRebalanceInfo>unmodifiableSet(serialOperator.getDetailSet());
+    @Override
+    @Override
-    public boolean createRedundantBucket(
+    @Override
+    public void createRedundantBucket(
-        Map<String, Long> colocatedRegionBytes) {
-      return createRedundantBucketForRegion(targetMember, bucketId,
+        Map<String, Long> colocatedRegionBytes, Completion completion) {
+      boolean result = false;
+      try {
+        result = createRedundantBucketForRegion(targetMember, bucketId,
+      } finally {
+        if(result) {
+          completion.onSuccess();
+        } else {
+          completion.onFailure();
+        }
+      }
+    }
+    
+    @Override
+    public void waitForOperations() {
+      //do nothing, all operations are synchronous
+    @Override
-    
+    @Override
-    public boolean createRedundantBucket(
-        InternalDistributedMember targetMember, int i, 
-        Map<String, Long> colocatedRegionBytes) {
-      boolean result = false;
-      long elapsed = 0;
-      long totalBytes = 0;
-      
+    @Override
+    public void createRedundantBucket(
+        final InternalDistributedMember targetMember, final int i, 
+        final Map<String, Long> colocatedRegionBytes, final Completion completion) {
-      try {
-        long start = System.nanoTime();
-        result = delegate.createRedundantBucket(targetMember, i,  
-            colocatedRegionBytes);
-        elapsed= System.nanoTime() - start;
-        if (result) {
+      
+      final long start = System.nanoTime();
+      delegate.createRedundantBucket(targetMember, i,  
+          colocatedRegionBytes, new Completion() {
+
+        @Override
+        public void onSuccess() {
+          long totalBytes = 0;
+          long elapsed= System.nanoTime() - start;
-        } else {
+
+          if(stats != null) {
+            stats.endBucketCreate(regionCount, true, totalBytes, elapsed);
+          }
+
+        }
+
+        @Override
+        public void onFailure() {
+          long elapsed= System.nanoTime() - start;
+
+
+          if(stats != null) {
+            stats.endBucketCreate(regionCount, false, 0, elapsed);
+          }
-      } finally {
-        if(stats != null) {
-          stats.endBucketCreate(regionCount, result, totalBytes, elapsed);
-        }
-      }
-      
-      return result;
+      });
+    @Override
+    @Override
+    
+    @Override
+    public void waitForOperations() {
+      delegate.waitForOperations();
+    }

INS26 INS40 INS23 INS83 INS83 INS83 INS39 INS59 INS31 INS31 INS42 INS32 INS78 INS78 INS78 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS78 INS78 UPD39 INS44 MOV8 INS78 INS78 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS45 INS34 INS42 INS42 INS42 INS43 INS42 MOV60 INS54 INS42 INS42 INS42 INS42 INS83 INS83 INS83 INS83 INS43 INS42 MOV25 INS42 INS42 INS42 INS21 INS60 INS42 MOV8 INS8 INS42 INS83 INS32 INS32 INS43 INS59 INS21 INS25 MOV42 MOV42 MOV42 MOV42 MOV42 INS14 INS42 INS42 UPD42 INS42 INS42 INS14 UPD42 UPD42 INS7 INS42 INS8 INS8 INS43 INS1 INS43 INS42 INS32 INS42 UPD42 UPD42 INS42 MOV32 INS21 INS21 INS42 INS31 INS31 INS42 INS32 INS42 INS21 INS32 INS32 INS78 INS83 INS39 INS42 MOV8 INS78 INS83 INS39 INS42 MOV8 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 MOV60 INS60 INS25 INS42 INS60 INS25 INS42 INS42 INS39 INS59 MOV27 INS8 INS39 INS59 INS27 INS8 UPD42 INS42 MOV27 INS21 INS42 INS27 INS42 INS33 INS21 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS34 INS42 DEL39 DEL42 DEL41 DEL42 DEL32 DEL7 DEL42 DEL7 DEL21 DEL42 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL42 DEL41 DEL8