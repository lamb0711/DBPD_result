Merge branch 'feature/GEODE-8' into develop

+import java.util.concurrent.atomic.AtomicReference;
+import com.gemstone.gemfire.cache.CacheWriterException;
+import com.gemstone.gemfire.cache.RegionDestroyedException;
+import com.gemstone.gemfire.cache.TimeoutException;
+import com.gemstone.gemfire.internal.cache.RegionEventImpl;
+import com.gemstone.gemfire.internal.cache.versions.RegionVersionVector;
+import com.gemstone.gemfire.internal.cache.versions.VersionSource;
+import com.gemstone.gemfire.internal.offheap.OffHeapRegionEntryHelper;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
-    resetLastPeeked();
-    AsyncEvent object = peekAhead();
-    // If it is not null, destroy it and increment the head key
-    if (object != null) {
-      Long key = this.peekedIds.remove();
-      if (logger.isTraceEnabled()) {
-        logger.trace("{}: Retrieved {} -> {}",this, key, object);
-      }
-      // Remove the entry at that key with a callback arg signifying it is
-      // a WAN queue so that AbstractRegionEntry.destroy can get the value
-      // even if it has been evicted to disk. In the normal case, the
-      // AbstractRegionEntry.destroy only gets the value in the VM.
-      this.region.destroy(key, RegionQueue.WAN_QUEUE_TOKEN);
-      updateHeadKey(key.longValue());
+    // Unsupported since we have no callers.
+    // If we do want to support it then each caller needs
+    // to call freeOffHeapResources and the returned GatewaySenderEventImpl
+    throw new UnsupportedOperationException();
+//     resetLastPeeked();
+//     AsyncEvent object = peekAhead();
+//     // If it is not null, destroy it and increment the head key
+//     if (object != null) {
+//       Long key = this.peekedIds.remove();
+//       if (logger.isTraceEnabled()) {
+//         logger.trace("{}: Retrieved {} -> {}",this, key, object);
+//       }
+//       // Remove the entry at that key with a callback arg signifying it is
+//       // a WAN queue so that AbstractRegionEntry.destroy can get the value
+//       // even if it has been evicted to disk. In the normal case, the
+//       // AbstractRegionEntry.destroy only gets the value in the VM.
+//       this.region.destroy(key, RegionQueue.WAN_QUEUE_TOKEN);
+//       updateHeadKey(key.longValue());
-      if (logger.isTraceEnabled()) {
-        logger.trace("{}: Destroyed {} -> {}", this, key, object);
-      }
-    }
-    return object;
+//       if (logger.isTraceEnabled()) {
+//         logger.trace("{}: Destroyed {} -> {}", this, key, object);
+//       }
+//     }
+//     return object;
-    List<AsyncEvent> batch = new ArrayList<AsyncEvent>(
-        batchSize * 2);
-    for (int i = 0; i < batchSize; i++) {
-      AsyncEvent obj = take();
-      if (obj != null) {
-        batch.add(obj);
-      } else {
-        break;
-      }
-    }
-    if (logger.isTraceEnabled()) {
-      logger.trace("{}: Took a batch of {} entries", this, batch.size());
-    }
-    return batch;
+    // This method has no callers.
+    // If we do want to support it then the callers
+    // need to call freeOffHeapResources on each returned GatewaySenderEventImpl
+    throw new UnsupportedOperationException();
+//     List<AsyncEvent> batch = new ArrayList<AsyncEvent>(
+//         batchSize * 2);
+//     for (int i = 0; i < batchSize; i++) {
+//       AsyncEvent obj = take();
+//       if (obj != null) {
+//         batch.add(obj);
+//       } else {
+//         break;
+//       }
+//     }
+//     if (logger.isTraceEnabled()) {
+//       logger.trace("{}: Took a batch of {} entries", this, batch.size());
+//     }
+//     return batch;
+    // OFFHEAP returned object only used to see if queue is empty
+    // so no need to worry about off-heap refCount.
+      if (object != null && object instanceof GatewaySenderEventImpl) {
+        GatewaySenderEventImpl copy = ((GatewaySenderEventImpl)object).makeHeapCopyIfOffHeap();
+        if (copy == null) {
+          continue;
+        }
+        object = copy;
+      }
+    // OFFHEAP: all returned AsyncEvent end up being removed from queue after the batch is sent
+    // so no need to worry about off-heap refCount.
-                this, deserialize(previous.getValueToConflate()), deserialize(object.getValueToConflate()),
+                this, previous.getValueToConflate(), object.getValueToConflate(),
-  private Object deserialize(Object serializedBytes) {
-    Object deserializedObject = serializedBytes;
-    if (serializedBytes instanceof byte[]) {
-      byte[] serializedBytesCast = (byte[])serializedBytes;
-      // This is a debugging method so ignore all exceptions like
-      // ClassNotFoundException
-      try {
-        deserializedObject = EntryEventImpl.deserialize(serializedBytesCast);
-      } catch (Exception e) {
-      }
-    }
-    return deserializedObject;
-  }
-
-      if (logger.isDebugEnabled()) {
-        logger.debug("{}: Retrieved queue region: {}. Since the region already exists, the sender must have been restarted after being stopped. Clearing the region.",
-            this.region);
-        this.region.clear();
-      }
+      throw new IllegalStateException("Queue region " + this.region.getFullPath() + " already exists.");
+  @Override
+  public void close() {
+    Region r = getRegion();
+    if (r != null && !r.isDestroyed()) {
+      try {
+        r.close();
+      } catch (RegionDestroyedException e) {
+      }
+    }
+  }
+  
-            EntryEventImpl event = new EntryEventImpl((LocalRegion)region,
+            EntryEventImpl event = EntryEventImpl.create((LocalRegion)region,
+            event.disallowOffHeapValues();
-  static private class SerialGatewaySenderQueueMetaRegion extends
+  public static class SerialGatewaySenderQueueMetaRegion extends
+    @Override
+    public void closeEntries() {
+      OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
+        @Override
+        public void run() {
+          SerialGatewaySenderQueueMetaRegion.super.closeEntries();
+        }
+      });
+    }
+    @Override
+    public Set<VersionSource> clearEntries(final RegionVersionVector rvv) {
+      final AtomicReference<Set<VersionSource>> result = new AtomicReference<Set<VersionSource>>();
+      OffHeapRegionEntryHelper.doWithOffHeapClear(new Runnable() {
+        @Override
+        public void run() {
+          result.set(SerialGatewaySenderQueueMetaRegion.super.clearEntries(rvv));
+        }
+      });
+      return result.get();
+    }
+    @Override
+    protected void basicDestroy(final EntryEventImpl event,
+        final boolean cacheWrite, Object expectedOldValue)
+        throws EntryNotFoundException, CacheWriterException, TimeoutException {
+
+      super.basicDestroy(event, cacheWrite, expectedOldValue);
+      GatewaySenderEventImpl.release(event.getRawOldValue());
+    }
+    @Override
+    protected boolean virtualPut(EntryEventImpl event, boolean ifNew,
+        boolean ifOld, Object expectedOldValue, boolean requireOldValue,
+        long lastModified, boolean overwriteDestroyed) throws TimeoutException,
+        CacheWriterException {
+      boolean success = super.virtualPut(event, ifNew, ifOld, expectedOldValue,
+          requireOldValue, lastModified, overwriteDestroyed);
+
+      if (success) {
+        GatewaySenderEventImpl.release(event.getRawOldValue());
+      }
+      return success;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS8 MOV83 MOV74 MOV42 MOV44 MOV43 INS8 INS78 INS83 INS39 INS42 INS8 INS83 INS42 INS31 INS31 INS31 INS31 INS53 INS53 INS42 MOV60 INS25 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS74 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 MOV44 INS44 INS44 INS44 INS43 INS43 INS8 INS14 INS14 MOV8 UPD43 INS27 MOV8 INS42 INS21 INS42 INS43 INS43 INS83 INS43 INS42 INS60 INS21 INS41 INS42 INS83 INS43 INS42 INS83 INS39 INS42 MOV43 INS42 INS42 INS42 INS42 INS21 INS21 INS42 MOV43 INS42 INS39 INS42 INS39 INS42 UPD42 INS39 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS60 INS25 INS41 INS43 INS43 INS25 INS53 UPD42 UPD42 INS27 INS38 INS32 INS42 INS42 INS42 INS83 INS74 INS59 INS32 INS32 INS42 INS48 INS32 INS39 INS59 INS42 INS8 INS42 UPD42 MOV42 UPD42 MOV42 INS27 INS8 INS14 UPD42 UPD42 MOV42 MOV33 INS32 INS42 INS42 INS14 INS43 INS74 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS48 INS21 MOV27 INS62 INS60 INS25 INS21 INS43 INS27 UPD42 MOV42 UPD42 MOV42 INS43 INS1 INS42 INS43 INS43 INS74 INS43 INS1 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS43 INS59 INS27 INS8 INS7 INS42 INS45 MOV32 INS45 INS32 UPD43 INS42 INS31 INS42 INS42 INS43 INS74 INS42 INS31 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS33 INS18 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS78 INS83 INS39 INS42 INS8 INS42 INS43 INS43 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS36 INS42 INS21 INS42 INS21 INS42 INS42 INS42 INS21 INS11 MOV43 INS32 INS48 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS48 INS42 MOV32 MOV32 INS42 INS42 MOV11 INS40 MOV36 INS33 INS33 INS9 MOV32 INS42 INS42 INS42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL41 DEL8 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL34 DEL27 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL10 DEL8 DEL25 DEL8 DEL24 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL32 DEL42 DEL32 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL39 DEL85 DEL5 DEL62 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL32 DEL21 DEL21 DEL42 DEL42 DEL32 DEL25 DEL8 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL40 DEL33 DEL33 DEL9 DEL14 DEL83 DEL42