GEODE-7541: move SocketCreator localhost lookup to geode-common (#4527)

* GEODE-7541: move SocketCreator localhost lookup to geode-common

General host address lookup remains in SocketCreator while localhost-
related functionality has moved to LocalHostUtil.

* added deprecated SocketCreator.getLocalHost() for use in upgrade tests

* hardening tests for stressTest environment

* merging with develop

* remove use of system properties.  ensure old locator directories are cleaned up

-import java.net.Inet4Address;
-import java.net.Inet6Address;
-import java.net.NetworkInterface;
-import java.util.Enumeration;
-import java.util.HashSet;
-import java.util.Hashtable;
-import java.util.Set;
-import javax.naming.Context;
-import javax.naming.NamingEnumeration;
-import javax.naming.directory.Attribute;
-import javax.naming.directory.Attributes;
-import javax.naming.directory.DirContext;
-import javax.naming.directory.InitialDirContext;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.internal.inet.LocalHostUtil;
-  /**
-   * Optional system property to enable GemFire usage of link-local addresses
-   */
-  private static final String USE_LINK_LOCAL_ADDRESSES_PROPERTY =
-      DistributionConfig.GEMFIRE_PREFIX + "net.useLinkLocalAddresses";
-
-  /**
-   * True if GemFire should use link-local addresses
-   */
-  private static final boolean useLinkLocalAddresses =
-      Boolean.getBoolean(USE_LINK_LOCAL_ADDRESSES_PROPERTY);
-
-  /**
-   * we cache localHost to avoid bug #40619, access-violation in native code
-   */
-  private static final InetAddress localHost;
-
-  /**
-   * all classes should use this variable to determine whether to use IPv4 or IPv6 addresses
-   */
-  @MakeNotStatic
-  private static boolean useIPv6Addresses = !Boolean.getBoolean("java.net.preferIPv4Stack")
-      && Boolean.getBoolean("java.net.preferIPv6Addresses");
-
-  static {
-    InetAddress inetAddress = null;
-    try {
-      inetAddress = InetAddress.getByAddress(InetAddress.getLocalHost().getAddress());
-      if (inetAddress.isLoopbackAddress()) {
-        InetAddress ipv4Fallback = null;
-        InetAddress ipv6Fallback = null;
-        // try to find a non-loopback address
-        Set<InetAddress> myInterfaces = getMyAddresses();
-        boolean preferIPv6 = SocketCreator.useIPv6Addresses;
-        String lhName = null;
-        for (InetAddress addr : myInterfaces) {
-          if (addr.isLoopbackAddress() || addr.isAnyLocalAddress() || lhName != null) {
-            break;
-          }
-          boolean ipv6 = addr instanceof Inet6Address;
-          boolean ipv4 = addr instanceof Inet4Address;
-          if ((preferIPv6 && ipv6) || (!preferIPv6 && ipv4)) {
-            String addrName = reverseDNS(addr);
-            if (inetAddress.isLoopbackAddress()) {
-              inetAddress = addr;
-              lhName = addrName;
-            } else if (addrName != null) {
-              inetAddress = addr;
-              lhName = addrName;
-            }
-          } else {
-            if (preferIPv6 && ipv4 && ipv4Fallback == null) {
-              ipv4Fallback = addr;
-            } else if (!preferIPv6 && ipv6 && ipv6Fallback == null) {
-              ipv6Fallback = addr;
-            }
-          }
-        }
-        // vanilla Ubuntu installations will have a usable IPv6 address when
-        // running as a guest OS on an IPv6-enabled machine. We also look for
-        // the alternative IPv4 configuration.
-        if (inetAddress.isLoopbackAddress()) {
-          if (ipv4Fallback != null) {
-            inetAddress = ipv4Fallback;
-            SocketCreator.useIPv6Addresses = false;
-          } else if (ipv6Fallback != null) {
-            inetAddress = ipv6Fallback;
-            SocketCreator.useIPv6Addresses = true;
-          }
-        }
-      }
-    } catch (UnknownHostException ignored) {
-    }
-    localHost = inetAddress;
-  }
-   * All GemFire code should use this method instead of InetAddress.getLocalHost(). See bug #40619
+   * @deprecated use LocalHostUtil.getLocalHost()
-    if (localHost == null) {
-      throw new UnknownHostException();
-    }
-    return localHost;
-  }
-
-  /**
-   * All classes should use this instead of relying on the JRE system property
-   */
-  public static boolean preferIPv6Addresses() {
-    return SocketCreator.useIPv6Addresses;
+    return LocalHostUtil.getLocalHost();
-  /**
-   * returns a set of the non-loopback InetAddresses for this machine
-   */
-  public static Set<InetAddress> getMyAddresses() {
-    Set<InetAddress> result = new HashSet<>();
-    Set<InetAddress> locals = new HashSet<>();
-    Enumeration<NetworkInterface> interfaces;
-    try {
-      interfaces = NetworkInterface.getNetworkInterfaces();
-    } catch (SocketException e) {
-      throw new IllegalArgumentException(
-          "Unable to examine network interfaces",
-          e);
-    }
-    while (interfaces.hasMoreElements()) {
-      NetworkInterface face = interfaces.nextElement();
-      boolean faceIsUp = false;
-      try {
-        faceIsUp = face.isUp();
-      } catch (SocketException e) {
-        InternalDistributedSystem ids = InternalDistributedSystem.getAnyInstance();
-        if (ids != null) {
-          logger.info("Failed to check if network interface is up. Skipping {}", face, e);
-        }
-      }
-      if (faceIsUp) {
-        Enumeration<InetAddress> addrs = face.getInetAddresses();
-        while (addrs.hasMoreElements()) {
-          InetAddress addr = addrs.nextElement();
-          if (addr.isLoopbackAddress() || addr.isAnyLocalAddress()
-              || (!useLinkLocalAddresses && addr.isLinkLocalAddress())) {
-            locals.add(addr);
-          } else {
-            result.add(addr);
-          }
-        } // while
-      }
-    } // while
-    // fix for bug #42427 - allow product to run on a standalone box by using
-    // local addresses if there are no non-local addresses available
-    if (result.size() == 0) {
-      return locals;
-    } else {
-      return result;
-    }
-  }
-
-  /**
-   * This method uses JNDI to look up an address in DNS and return its name
-   *
-   *
-   * @return the host name associated with the address or null if lookup isn't possible or there is
-   *         no host name for this address
-   */
-  private static String reverseDNS(InetAddress addr) {
-    byte[] addrBytes = addr.getAddress();
-    // reverse the address suitable for reverse lookup
-    StringBuilder lookup = new StringBuilder();
-    for (int index = addrBytes.length - 1; index >= 0; index--) {
-      lookup.append(addrBytes[index] & 0xff).append('.');
-    }
-    lookup.append("in-addr.arpa");
-
-    try {
-      Hashtable<String, String> env = new Hashtable<>();
-      env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.dns.DnsContextFactory");
-      DirContext ctx = new InitialDirContext(env);
-      Attributes attrs = ctx.getAttributes(lookup.toString(), new String[] {"PTR"});
-      for (NamingEnumeration ae = attrs.getAll(); ae.hasMoreElements();) {
-        Attribute attr = (Attribute) ae.next();
-        for (Enumeration vals = attr.getAll(); vals.hasMoreElements();) {
-          Object elem = vals.nextElement();
-          if ("PTR".equals(attr.getID()) && elem != null) {
-            return elem.toString();
-          }
-        }
-      }
-      ctx.close();
-    } catch (Exception e) {
-      // ignored
-    }
-    return null;
-  }
-
-  /**
-   * Returns true if host matches the LOCALHOST.
-   */
-  public static boolean isLocalHost(Object host) {
-    if (host instanceof InetAddress) {
-      InetAddress inetAddress = (InetAddress) host;
-      if (isLocalHost(inetAddress)) {
-        return true;
-      } else if (inetAddress.isLoopbackAddress()) {
-        return true;
-      } else {
-        try {
-          Enumeration en = NetworkInterface.getNetworkInterfaces();
-          while (en.hasMoreElements()) {
-            NetworkInterface i = (NetworkInterface) en.nextElement();
-            for (Enumeration en2 = i.getInetAddresses(); en2.hasMoreElements();) {
-              InetAddress addr = (InetAddress) en2.nextElement();
-              if (inetAddress.equals(addr)) {
-                return true;
-              }
-            }
-          }
-          return false;
-        } catch (SocketException e) {
-          throw new IllegalArgumentException("Unable to query network interface", e);
-        }
-      }
-    } else {
-      return isLocalHost((Object) toInetAddress(host.toString()));
-    }
-  }
-
-  private static boolean isLocalHost(InetAddress host) {
-    try {
-      return SocketCreator.getLocalHost().equals(host);
-    } catch (UnknownHostException ignored) {
-      return false;
-    }
-  }
-
-  /**
-   * Converts the string host to an instance of InetAddress. Returns null if the string is empty.
-   * Fails Assertion if the conversion would result in <code>java.lang.UnknownHostException</code>.
-   * <p>
-   * Any leading slashes on host will be ignored.
-   *
-   * @param host string version the InetAddress
-   *
-   * @return the host converted to InetAddress instance
-   */
-  public static InetAddress toInetAddress(String host) {
-    if (host == null || host.length() == 0) {
-      return null;
-    }
-    try {
-      final int index = host.indexOf("/");
-      if (index > -1) {
-        return InetAddress.getByName(host.substring(index + 1));
-      } else {
-        return InetAddress.getByName(host);
-      }
-    } catch (java.net.UnknownHostException e) {
-      throw new IllegalArgumentException(e.getMessage());
-    }
-  }

MOV26 MOV31 UPD40 MOV43 UPD42 MOV43 INS8 UPD65 MOV41 UPD66 UPD42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL40 DEL45 DEL27 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL38 DEL42 DEL42 DEL45 DEL32 DEL27 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL40 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL27 DEL10 DEL8 DEL25 DEL39 DEL42 DEL42 DEL42 DEL43 DEL62 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL43 DEL62 DEL59 DEL60 DEL42 DEL42 DEL27 DEL36 DEL42 DEL38 DEL42 DEL27 DEL36 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL42 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL38 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL40 DEL9 DEL7 DEL21 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL40 DEL9 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL42 DEL7 DEL21 DEL8 DEL28 DEL39 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL11 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL25 DEL8 DEL24 DEL8 DEL61 DEL9 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL25 DEL8 DEL8 DEL25 DEL8 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL33 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL40 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL38 DEL42 DEL42 DEL32 DEL27 DEL36 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL41 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL40 DEL34 DEL27 DEL59 DEL58 DEL42 DEL34 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL34 DEL27 DEL32 DEL42 DEL13 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL85 DEL5 DEL45 DEL4 DEL3 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL24 DEL8 DEL24 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL33 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL33 DEL41 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL34 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL32 DEL41 DEL8 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31