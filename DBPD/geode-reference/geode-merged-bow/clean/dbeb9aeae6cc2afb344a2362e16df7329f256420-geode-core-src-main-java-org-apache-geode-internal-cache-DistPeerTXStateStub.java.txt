Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * DistPeerTXStateStub lives on the transaction coordinator for a distributed
- * transaction
- * </br>1. It forwards TX operations to primary or a selected replica (in case of RR)
- * for each op
- * </br>2.It also records those transactional operations in order to send those to
+ * DistPeerTXStateStub lives on the transaction coordinator for a distributed transaction </br>
+ * 1. It forwards TX operations to primary or a selected replica (in case of RR) for each op </br>
+ * 2.It also records those transactional operations in order to send those to
-public final class DistPeerTXStateStub extends PeerTXStateStub implements
-    DistTXCoordinatorInterface {
+public final class DistPeerTXStateStub extends PeerTXStateStub
+    implements DistTXCoordinatorInterface {
-          + " ,primaryTransactionalOperations="
-          + primaryTransactionalOperations
-          + " ,secondaryTransactionalOperations="
-          + secondaryTransactionalOperations);
+          + " ,primaryTransactionalOperations=" + primaryTransactionalOperations
+          + " ,secondaryTransactionalOperations=" + secondaryTransactionalOperations);
-    assert primaryTransactionalOperations != null
-        || secondaryTransactionalOperations != null;
-    
+    assert primaryTransactionalOperations != null || secondaryTransactionalOperations != null;
+
-    
-    this.precommitDistTxMsg
-        .setSecondaryTransactionalOperations(secondaryTransactionalOperations);
+
+    this.precommitDistTxMsg.setSecondaryTransactionalOperations(secondaryTransactionalOperations);
-  
+
-    
+
-    
+
-  
+
-    
+
-//    if (this.internalAfterSendRollback != null) {
-//      this.internalAfterSendRollback.run();
-//    }
-    
+    // if (this.internalAfterSendRollback != null) {
+    // this.internalAfterSendRollback.run();
+    // }
+
-  
+
-      logger.debug("DistPeerTXStateStub.addPrimaryTransactionalOperations add "
-          + dtop + " ,stub before=" + this);
+      logger.debug("DistPeerTXStateStub.addPrimaryTransactionalOperations add " + dtop
+          + " ,stub before=" + this);
-          .debug("DistPeerTXStateStub.addPrimaryTransactionalOperations stub after add = "
-              + this);
+          .debug("DistPeerTXStateStub.addPrimaryTransactionalOperations stub after add = " + this);
-  
+
-  
+
-   * @see
-   * org.apache.geode.internal.cache.TXStateStub#putEntry(org.apache.geode
-   * .internal.cache.EntryEventImpl, boolean, boolean, java.lang.Object,
-   * boolean, long, boolean)
+   * @see org.apache.geode.internal.cache.TXStateStub#putEntry(org.apache.geode
+   * .internal.cache.EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long, boolean)
-      logger.debug("DistPeerTXStateStub.putEntry "
-          + event.getKeyInfo().getKey(), new Throwable());
+      logger.debug("DistPeerTXStateStub.putEntry " + event.getKeyInfo().getKey(), new Throwable());
-    boolean returnValue = super.putEntry(event, ifNew, ifOld, expectedOldValue,
-        requireOldValue, lastModified, overwriteDestroyed);
+    boolean returnValue = super.putEntry(event, ifNew, ifOld, expectedOldValue, requireOldValue,
+        lastModified, overwriteDestroyed);
-    
+
-   * @see
-   * org.apache.geode.internal.cache.InternalDataView#putEntryOnRemote(org
-   * .apache.geode.internal.cache.EntryEventImpl, boolean, boolean,
-   * java.lang.Object, boolean, long, boolean)
+   * @see org.apache.geode.internal.cache.InternalDataView#putEntryOnRemote(org
+   * .apache.geode.internal.cache.EntryEventImpl, boolean, boolean, java.lang.Object, boolean, long,
+   * boolean)
-  public boolean putEntryOnRemote(EntryEventImpl event, boolean ifNew,
-      boolean ifOld, Object expectedOldValue, boolean requireOldValue,
-      long lastModified, boolean overwriteDestroyed)
-      throws DataLocationException {
+  public boolean putEntryOnRemote(EntryEventImpl event, boolean ifNew, boolean ifOld,
+      Object expectedOldValue, boolean requireOldValue, long lastModified,
+      boolean overwriteDestroyed) throws DataLocationException {
-      logger.debug("DistPeerTXStateStub.putEntryOnRemote "
-          + event.getKeyInfo().getKey(), new Throwable());
+      logger.debug("DistPeerTXStateStub.putEntryOnRemote " + event.getKeyInfo().getKey(),
+          new Throwable());
-    
+
-  
+
-   * @see
-   * org.apache.geode.internal.cache.TXStateInterface#destroyExistingEntry
-   * (org.apache.geode.internal.cache.EntryEventImpl, boolean,
-   * java.lang.Object)
+   * @see org.apache.geode.internal.cache.TXStateInterface#destroyExistingEntry
+   * (org.apache.geode.internal.cache.EntryEventImpl, boolean, java.lang.Object)
-//    logger.debug("DistPeerTXStateStub.destroyExistingEntry", new Throwable());
+    // logger.debug("DistPeerTXStateStub.destroyExistingEntry", new Throwable());
-  
+
-   * @see
-   * org.apache.geode.internal.cache.InternalDataView#destroyOnRemote(java
-   * .lang.Integer, org.apache.geode.internal.cache.EntryEventImpl,
-   * java.lang.Object)
+   * @see org.apache.geode.internal.cache.InternalDataView#destroyOnRemote(java .lang.Integer,
+   * org.apache.geode.internal.cache.EntryEventImpl, java.lang.Object)
-  public void destroyOnRemote(EntryEventImpl event, boolean cacheWrite,
-      Object expectedOldValue) throws DataLocationException {
-//    logger.debug("DistPeerTXStateStub.destroyOnRemote", new Throwable());
+  public void destroyOnRemote(EntryEventImpl event, boolean cacheWrite, Object expectedOldValue)
+      throws DataLocationException {
+    // logger.debug("DistPeerTXStateStub.destroyOnRemote", new Throwable());
-  
+
-   * @see
-   * org.apache.geode.internal.cache.TXStateInterface#invalidateExistingEntry
+   * @see org.apache.geode.internal.cache.TXStateInterface#invalidateExistingEntry
-  public void invalidateExistingEntry(EntryEventImpl event,
-      boolean invokeCallbacks, boolean forceNewEntry) {
-//    logger
-//        .debug("DistPeerTXStateStub.invalidateExistingEntry", new Throwable());
+  public void invalidateExistingEntry(EntryEventImpl event, boolean invokeCallbacks,
+      boolean forceNewEntry) {
+    // logger
+    // .debug("DistPeerTXStateStub.invalidateExistingEntry", new Throwable());
-   * @see
-   * org.apache.geode.internal.cache.InternalDataView#invalidateOnRemote
+   * @see org.apache.geode.internal.cache.InternalDataView#invalidateOnRemote
-//    logger.debug("DistPeerTXStateStub.invalidateOnRemote", new Throwable());
+    // logger.debug("DistPeerTXStateStub.invalidateOnRemote", new Throwable());
-  
-  public void postPutAll(DistributedPutAllOperation putallOp,
-      VersionedObjectList successfulPuts, LocalRegion region) {
+
+  public void postPutAll(DistributedPutAllOperation putallOp, VersionedObjectList successfulPuts,
+      LocalRegion region) {
-    EntryEventImpl event = EntryEventImpl.createPutAllEvent(putallOp, region,
-        Operation.PUTALL_CREATE, putallOp.getBaseEvent().getKey(), putallOp
-            .getBaseEvent().getValue());
+    EntryEventImpl event =
+        EntryEventImpl.createPutAllEvent(putallOp, region, Operation.PUTALL_CREATE,
+            putallOp.getBaseEvent().getKey(), putallOp.getBaseEvent().getValue());
-  
+
-    EntryEventImpl event = EntryEventImpl.createRemoveAllEvent(removeAllOp,
-        region, removeAllOp.getBaseEvent().getKey());
+    EntryEventImpl event = EntryEventImpl.createRemoveAllEvent(removeAllOp, region,
+        removeAllOp.getBaseEvent().getKey());
-  
+
-  public boolean getPreCommitResponse()
-      throws UnsupportedOperationInTransactionException {
+  public boolean getPreCommitResponse() throws UnsupportedOperationInTransactionException {
-  public boolean getRollbackResponse()
-      throws UnsupportedOperationInTransactionException {
+  public boolean getRollbackResponse() throws UnsupportedOperationInTransactionException {
-  
+
-  
+
-  
+
-  public void gatherAffectedRegions(HashSet<LocalRegion> regionSet,
-      boolean includePrimaryRegions, boolean includeRedundantRegions)
-      throws UnsupportedOperationInTransactionException {
+  public void gatherAffectedRegions(HashSet<LocalRegion> regionSet, boolean includePrimaryRegions,
+      boolean includeRedundantRegions) throws UnsupportedOperationInTransactionException {
-  
+
-  
+
-  
+
-  
+

UPD66 UPD66 UPD66 DEL66 DEL66