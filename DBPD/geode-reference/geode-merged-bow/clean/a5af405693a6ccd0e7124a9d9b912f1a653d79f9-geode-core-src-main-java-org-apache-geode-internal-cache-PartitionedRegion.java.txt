GEODE-2723: Removed localCacheEnabled field, and associated dead code.
This closes #440

Signed-off-by: adongre <adongre@apache.org>

-  /**
-   * To check if local cache is enabled.
-   */
-  private static final boolean localCacheEnabled = false;
-
-          if (localCacheEnabled && null != (obj = localCacheGet(key))) { // OFFHEAP: copy into heap
-                                                                         // cd; TODO optimize for
-                                                                         // preferCD case
-            if (logger.isTraceEnabled()) {
-              logger.trace("getFromBucket: Getting key {} ({}) from local cache", key,
-                  key.hashCode());
-            }
-            return obj;
-          } else if (this.haveCacheLoader) {
+          if (this.haveCacheLoader) {
-
-    // Here even if we can not cache the value, it should return value to
-    // user.
-    try {
-      if (localCacheEnabled && value != null) {
-        super.put(key, value);
-      }
-    } catch (Exception e) {
-      if (logger.isDebugEnabled()) {
-        logger.debug("getRemotely: Can not cache value = {} for key = {} in local cache", value,
-            key, e);
-      }
-    }
-          if (localCacheEnabled) {
-            try {
-              // only destroy in local cache if successfully destroyed remotely
-              final boolean cacheWrite = true;
-              super.basicDestroy(event, cacheWrite, null); // pass null as expectedOldValue,
-                                                           // since if successfully destroyed
-                                                           // remotely we always want to succeed
-                                                           // locally
-            } catch (EntryNotFoundException enf) {
-              if (logger.isDebugEnabled()) {
-                logger.debug(
-                    "destroyInBucket: Failed to invalidate from local cache because of EntryNotFoundException.",
-                    enf);
-              }
-            }
-          }
-          if (localCacheEnabled) {
-            try {
-              super.basicInvalidate(event);
-            } catch (EntryNotFoundException enf) {
-              if (isDebugEnabled) {
-                logger.debug(
-                    "invalidateInBucket: Failed to invalidate from local cache because of EntryNotFoundException.",
-                    enf);
-              }
-            }
-          }
-          if (localCacheEnabled) {
-            try {
-              super.basicUpdateEntryVersion(event);
-            } catch (EntryNotFoundException enf) {
-              if (isDebugEnabled) {
-                logger.debug(
-                    "updateEntryVersionInBucket: Failed to update entry version timestamp from local cache because of EntryNotFoundException.",
-                    enf);
-              }
-            }
-          }

INS8 INS8 MOV25 MOV21 MOV21 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL33 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL25 DEL42 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL48 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL83 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL33 DEL48 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL48 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL48 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8