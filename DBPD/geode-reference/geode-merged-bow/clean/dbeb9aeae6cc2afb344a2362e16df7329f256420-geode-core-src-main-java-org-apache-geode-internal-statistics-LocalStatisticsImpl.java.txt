Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import org.apache.geode.util.IntArray;
-//import org.apache.geode.util.LongArray;
+// import org.apache.geode.util.IntArray;
+// import org.apache.geode.util.LongArray;
- * An implementation of {@link Statistics} that stores its statistics
- * in local java memory.
+ * An implementation of {@link Statistics} that stores its statistics in local java memory.
-  /** An array containing the JOM object used to lock a int statistic when
-   * it is incremented. */
+  /**
+   * An array containing the JOM object used to lock a int statistic when it is incremented.
+   */
-  /** An array containing the JOM object used to lock a long statistic when
-   * it is incremented. */
+  /**
+   * An array containing the JOM object used to lock a long statistic when it is incremented.
+   */
-  /** An array containing the JOM object used to lock a double statistic when
-   * it is incremented. */
+  /**
+   * An array containing the JOM object used to lock a double statistic when it is incremented.
+   */
-  
-  ///////////////////////  Constructors  ///////////////////////
+
+  /////////////////////// Constructors ///////////////////////
-   * @param type
-   *        A description of the statistics
-   * @param textId
-   *        Text that identifies this statistic when it is monitored
-   * @param numericId
-   *        A number that displayed when this statistic is monitored
-   * @param uniqueId
-   *        A number that uniquely identifies this instance
-   * @param atomicIncrements
-   *        Are increment operations atomic?  If only one application
-   *        thread increments a statistic, then a <code>false</code>
-   *        value may yield better performance.
-   * @param osStatFlags
-   *        Non-zero if stats require system calls to collect them; for internal use only
-   * @param system
-   *        The distributed system that determines whether or not these
-   *        statistics are stored (and collected) in GemFire shared
-   *        memory or in the local VM
+   * @param type A description of the statistics
+   * @param textId Text that identifies this statistic when it is monitored
+   * @param numericId A number that displayed when this statistic is monitored
+   * @param uniqueId A number that uniquely identifies this instance
+   * @param atomicIncrements Are increment operations atomic? If only one application thread
+   *        increments a statistic, then a <code>false</code> value may yield better performance.
+   * @param osStatFlags Non-zero if stats require system calls to collect them; for internal use
+   *        only
+   * @param system The distributed system that determines whether or not these statistics are stored
+   *        (and collected) in GemFire shared memory or in the local VM
-  public LocalStatisticsImpl(StatisticsType type, String textId,
-                             long numericId,
-                             long uniqueId,
-                             boolean atomicIncrements,
-                             int osStatFlags,
-                             StatisticsManager system) {
-    super(type, calcTextId(system, textId), calcNumericId(system, numericId),
-          uniqueId, osStatFlags);
+  public LocalStatisticsImpl(StatisticsType type, String textId, long numericId, long uniqueId,
+      boolean atomicIncrements, int osStatFlags, StatisticsManager system) {
+    super(type, calcTextId(system, textId), calcNumericId(system, numericId), uniqueId,
+        osStatFlags);
-    StatisticsTypeImpl realType = (StatisticsTypeImpl)type;
+    StatisticsTypeImpl realType = (StatisticsTypeImpl) type;
-  //////////////////////  Static Methods  //////////////////////
+  ////////////////////// Static Methods //////////////////////
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-  ////////////////////////  store() Methods  ///////////////////////
+  //////////////////////// store() Methods ///////////////////////
-  ///////////////////////  get() Methods  ///////////////////////
+  /////////////////////// get() Methods ///////////////////////
-  ////////////////////////  inc() Methods  ////////////////////////
+  //////////////////////// inc() Methods ////////////////////////
+
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66