GEODE-624: add unit test for LifeCycleListener

Renamed SimpleMemoryAllocatorLifeCycleListener to LifeCycleListener.
New methods in RefCountChangeInfo for unit testing.
Renamed ReferenceCountHelper method isDuplicate to isSameCaller.

This closes #53

-  private int dupCount;
+  private int useCount;
-  public int getDupCount() {
-    return this.dupCount;
+  public int getUseCount() {
+    return this.useCount;
-  public void decDupCount() {
-    this.dupCount--;
+  public int incUseCount() {
+    this.useCount++;
+    return this.useCount;
+  }  
+  public int decUseCount() {
+    this.useCount--;
+    return this.useCount;
-    if (this.dupCount > 0) {
-      ps.print(" dupCount=");
-      ps.print(this.dupCount);
+    if (this.useCount > 0) {
+      ps.print(" useCount=");
+      ps.print(this.useCount);
-  
-  public boolean isDuplicate(RefCountChangeInfo other) {
+
+  public boolean isSameCaller(RefCountChangeInfo other) {
-    String trace = getStackTraceString();
-    String traceOther = other.getStackTraceString();
+    Object trace = getStackTraceString();
+    Object traceOther = other.getStackTraceString();
-      this.dupCount++;
-  private String stackTraceString;
-  String getStackTraceString() {
-    String result = this.stackTraceString;
-    if (result == null) {
-	ByteArrayOutputStream baos = new ByteArrayOutputStream(64*1024);
-	PrintStream spr = new PrintStream(baos);
+  private Object stackTraceString;
-	cleanStackTrace(spr);
-	result = baos.toString();
-	this.stackTraceString = result;
+  Object getStackTraceString() {
+    Object result = this.stackTraceString;
+    if (result == null) {
+      ByteArrayOutputStream baos = new ByteArrayOutputStream(64 * 1024);
+      PrintStream spr = new PrintStream(baos);
+      cleanStackTrace(spr);
+      result = baos.toString();
+      this.stackTraceString = result;
-  private void cleanStackTrace(PrintStream ps) {
-      StackTraceElement[] trace = getStackTrace();
-      // skip the initial elements from the offheap package
-      int skip=0;
-      for (int i=0; i < trace.length; i++) {
-	if (!trace[i].getClassName().contains("com.gemstone.gemfire.internal.offheap")) {
-          skip = i;
-          break;
-        }
-      }
-      for (int i=skip; i < trace.length; i++) {
-        ps.println("\tat " + trace[i]);
-      }   
+  void setStackTraceString(Object sts) {
+    stackTraceString = sts;
+  private void cleanStackTrace(PrintStream ps) {
+    StackTraceElement[] trace = getStackTrace();
+    // skip the initial elements from the offheap package
+    int skip=0;
+    for (int i=0; i < trace.length; i++) {
+      if(!(trace[i].toString().contains("com.gemstone.gemfire.internal.offheap"))) {
+        skip = i;
+        break;
+      }
+    }
+    for (int i=skip; i < trace.length; i++) {
+      ps.println("\tat " + trace[i]);
+    }   
+}
+
+

INS31 INS31 UPD42 INS83 INS39 INS42 INS8 UPD39 UPD42 UPD42 UPD43 UPD43 INS39 INS42 INS44 INS8 UPD42 INS21 INS41 INS41 UPD42 UPD42 INS43 INS42 INS21 INS37 INS22 INS22 UPD43 UPD43 UPD43 INS42 INS7 UPD42 INS22 INS52 INS42 INS52 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS52 INS42 UPD42 UPD42 UPD45 INS36 UPD42 MOV32 UPD42 DEL52 DEL42 DEL22 DEL37 DEL21