GEODE-4329: Move logic for copying files outside of BackupManager (#1334)



-import java.net.URISyntaxException;
-import java.net.URL;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.nio.file.StandardCopyOption;
-import org.apache.geode.distributed.DistributedSystem;
-import org.apache.geode.internal.ClassPathLoader;
-import org.apache.geode.internal.DeployedJar;
-import org.apache.geode.internal.JarDeployer;
-  private static final String CONFIG_DIRECTORY = "config";
-  private final BackupDefinition backupDefinition = new BackupDefinition();
+
+  private BackupFileCopier fileCopier;
+      fileCopier = new BackupFileCopier(cache, temporaryFiles);
+        // TODO: allow different strategies...
+        BackupDefinition backupDefinition = fileCopier.getBackupDefinition();
-      }
-
-      if (!backupByDiskStores.isEmpty()) {
-        // TODO: allow different stategies...
-    backupConfigFiles();
-    backupUserFiles(backupDir);
-    backupDeployedJars(backupDir);
+    fileCopier.copyConfigFiles();
+
+    Set<File> userFiles = fileCopier.copyUserFiles();
+    File userBackupDir = new File(backupDir, USER_FILES);
+    for (File file : userFiles) {
+      File restoreScriptDestination = new File(userBackupDir, file.getName());
+      restoreScript.addUserFile(file, restoreScriptDestination);
+    }
+
+    Set<File> jars = fileCopier.copyDeployedJars();
+    for (File file : jars) {
+      File restoreScriptDestination = new File(userBackupDir, file.getName());
+      restoreScript.addFile(file, restoreScriptDestination);
+    }
-        copyOplog(diskStore, temporaryFiles.getDirectory().toFile(), oplog);
+        oplog.finishKrf();
+        fileCopier.copyOplog(diskStore, oplog);
-          backupDiskInitFile(diskStore, temporaryFiles.getDirectory());
+          fileCopier.copyDiskInitFile(diskStore);
-  private void backupDiskInitFile(DiskStoreImpl diskStore, Path tempDir) throws IOException {
-    File diskInitFile = diskStore.getDiskInitFile().getIFFile();
-    String subDir = Integer.toString(diskStore.getInforFileDirIndex());
-    Files.createDirectories(tempDir.resolve(subDir));
-    Files.copy(diskInitFile.toPath(), tempDir.resolve(subDir).resolve(diskInitFile.getName()),
-        StandardCopyOption.COPY_ATTRIBUTES);
-    backupDefinition.addDiskInitFile(diskStore,
-        tempDir.resolve(subDir).resolve(diskInitFile.getName()));
-  }
+
-  private void backupConfigFiles() throws IOException {
-    Files.createDirectories(temporaryFiles.getDirectory().resolve(CONFIG_DIRECTORY));
-    addConfigFileToBackup(cache.getCacheXmlURL());
-    addConfigFileToBackup(DistributedSystem.getPropertiesFileURL());
-    // TODO: should the gfsecurity.properties file be backed up?
-  }
-
-  private void addConfigFileToBackup(URL fileUrl) throws IOException {
-    if (fileUrl != null) {
-      try {
-        Path source = Paths.get(fileUrl.toURI());
-        Path destination =
-            temporaryFiles.getDirectory().resolve(CONFIG_DIRECTORY).resolve(source.getFileName());
-        Files.copy(source, destination, StandardCopyOption.COPY_ATTRIBUTES);
-        backupDefinition.addConfigFileToBackup(destination);
-      } catch (URISyntaxException e) {
-        throw new IOException(e);
-      }
-    }
-  }
-
-  private void backupUserFiles(File backupDir) throws IOException {
-    Files.createDirectories(temporaryFiles.getDirectory().resolve(USER_FILES));
-    List<File> backupFiles = cache.getBackupFiles();
-    File userBackupDir = new File(backupDir, USER_FILES);
-    for (File original : backupFiles) {
-      if (original.exists()) {
-        original = original.getAbsoluteFile();
-        Path destination =
-            temporaryFiles.getDirectory().resolve(USER_FILES).resolve(original.getName());
-        if (original.isDirectory()) {
-          FileUtils.copyDirectory(original, destination.toFile());
-        } else {
-          Files.copy(original.toPath(), destination, StandardCopyOption.COPY_ATTRIBUTES);
-        }
-        backupDefinition.addUserFilesToBackup(destination);
-        File restoreScriptDestination = new File(userBackupDir, original.getName());
-        restoreScript.addUserFile(original, restoreScriptDestination);
-      }
-    }
-  }
-
-  /**
-   * Copies user deployed jars to the backup directory.
-   *
-   * @param backupDir The backup directory for this member.
-   * @throws IOException one or more of the jars did not successfully copy.
-   */
-  private void backupDeployedJars(File backupDir) throws IOException {
-    JarDeployer deployer = null;
-
-    try {
-      // Suspend any user deployed jar file updates during this backup.
-      deployer = ClassPathLoader.getLatest().getJarDeployer();
-      deployer.suspendAll();
-
-      List<DeployedJar> jarList = deployer.findDeployedJars();
-      if (!jarList.isEmpty()) {
-        File userBackupDir = new File(backupDir, USER_FILES);
-
-        for (DeployedJar jar : jarList) {
-          File source = new File(jar.getFileCanonicalPath());
-          String sourceFileName = source.getName();
-          Path destination =
-              temporaryFiles.getDirectory().resolve(USER_FILES).resolve(sourceFileName);
-          Files.copy(source.toPath(), destination, StandardCopyOption.COPY_ATTRIBUTES);
-          backupDefinition.addDeployedJarToBackup(destination);
-
-          File restoreScriptDestination = new File(userBackupDir, sourceFileName);
-          restoreScript.addFile(source, restoreScriptDestination);
-        }
-      }
-    } finally {
-      // Re-enable user deployed jar file updates.
-      if (deployer != null) {
-        deployer.resumeAll();
-      }
-    }
-  }
-
-  private void copyOplog(DiskStore diskStore, File targetDir, Oplog oplog) throws IOException {
-    DirectoryHolder dirHolder = oplog.getDirectoryHolder();
-    backupFile(diskStore, dirHolder, targetDir, oplog.getCrfFile());
-    backupFile(diskStore, dirHolder, targetDir, oplog.getDrfFile());
-    oplog.finishKrf();
-    backupFile(diskStore, dirHolder, targetDir, oplog.getKrfFile());
-  }
-
-  private void backupFile(DiskStore diskStore, DirectoryHolder dirHolder, File targetDir, File file)
-      throws IOException {
-    if (file != null && file.exists()) {
-      try {
-        Path tempDiskDir = temporaryFiles.getDiskStoreDirectory(diskStore, dirHolder);
-        Files.createLink(tempDiskDir.resolve(file.getName()), file.toPath());
-        backupDefinition.addOplogFileToBackup(diskStore, tempDiskDir.resolve(file.getName()));
-      } catch (IOException | UnsupportedOperationException e) {
-        logger.warn("Unable to create hard link for + {}. Reverting to file copy", targetDir);
-        FileUtils.copyFileToDirectory(file, targetDir);
-      }
-    }
-  }

MOV23 INS31 UPD43 MOV83 MOV39 MOV42 MOV44 MOV43 INS8 UPD42 UPD42 MOV21 MOV60 MOV60 INS70 MOV60 MOV70 INS74 INS44 INS42 INS8 UPD74 MOV44 INS42 INS21 UPD42 UPD42 INS43 MOV43 INS42 INS32 MOV43 UPD42 MOV42 MOV60 MOV21 UPD43 UPD42 INS7 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 UPD42 UPD42 UPD42 MOV43 INS42 INS14 INS60 MOV21 MOV21 UPD42 UPD42 MOV21 INS43 INS42 INS42 MOV43 INS59 MOV43 MOV32 MOV43 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL14 DEL42 DEL42 DEL32 DEL38 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL40 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL8 DEL25 DEL8 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31