Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.ABSTRACT_REGION_ENTRY_FILL_IN_VALUE;
+import static com.gemstone.gemfire.internal.offheap.annotations.OffHeapIdentifier.ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE;
+
+import com.gemstone.gemfire.internal.offheap.MemoryChunkWithRefCount;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
+import com.gemstone.gemfire.internal.offheap.annotations.Unretained;
+import com.gemstone.gemfire.cache.EvictionCriteria;
-  public boolean fillInValue(LocalRegion r, InitialImageOperation.Entry entry,
+  public boolean fillInValue(LocalRegion r,
+      @Retained(ABSTRACT_REGION_ENTRY_FILL_IN_VALUE) InitialImageOperation.Entry entry,
+  /**
+   * Just like getValue but the result may be a retained off-heap reference.
+   */
+  @Retained
+  public Object getValueRetain(RegionEntryContext context);
-  public void setValue(RegionEntryContext context, Object value) throws RegionClearedException;
+  @Released
+  public void setValue(RegionEntryContext context, @Unretained Object value) throws RegionClearedException;
+   * If the value is a MemoryChunkWithRefCount then increment its refcount.
+   * WARNING: if a MemoryChunkWithRefCount is returned then the caller MUST
+   * call {@link MemoryChunkWithRefCount#release()}.
+   * 
+   * This is only retained in off-heap subclasses.  However, it's marked as
+   * Retained here so that callers are aware that the value may be retained.
+   * 
+   * @return possible OFF_HEAP_OBJECT (caller must release)
-  public Object _getValueUse(RegionEntryContext context, boolean decompress);
+  @Retained 
+  public Object _getValueRetain(RegionEntryContext context, boolean decompress);
+  /** Gets the value field of this entry. */
+  
+  @Unretained
-  public void setValueWithTombstoneCheck(Object value, EntryEvent event) throws RegionClearedException;
+  public void setValueWithTombstoneCheck(@Unretained Object value, EntryEvent event) throws RegionClearedException;
+  @Retained
+  @Retained
+  @Released
-                         Object expectedOldValue,
+                         @Unretained Object expectedOldValue,
+  @Retained
+  @Retained
-  
+
+  /**
+   * Returns true if this entry has been marked for eviction for custom eviction
+   * via {@link EvictionCriteria}.
+   */
+  public boolean isMarkedForEviction();
+
+  /**
+   * Marks this entry for eviction by custom eviction via
+   * {@link EvictionCriteria}.
+   */
+  public void setMarkedForEviction();
+
+  /**
+   * Clears this entry as for eviction by custom eviction via
+   * {@link EvictionCriteria} or when an update is done after it was marked for
+   * eviction.
+   */
+  public void clearMarkedForEviction();
+
+  @Retained(ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE)
+  public Object prepareValueForCache(RegionEntryContext r, Object val, boolean isEntryUpdate);
+
+  @Retained(ABSTRACT_REGION_ENTRY_PREPARE_VALUE_FOR_CACHE)
+  public Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event, boolean isEntryUpdate);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS78 INS83 INS43 INS42 INS44 INS78 INS78 UPD42 INS29 INS78 INS43 INS44 INS78 INS78 INS78 INS44 INS78 INS78 INS29 INS83 INS39 INS42 INS29 INS83 INS39 INS42 INS29 INS83 INS39 INS42 INS79 INS83 INS43 INS42 INS44 MOV44 INS44 INS79 INS83 MOV43 INS42 INS44 MOV44 INS44 INS44 INS79 INS65 INS42 INS42 INS43 INS42 INS42 INS78 MOV43 INS65 INS42 INS65 INS42 INS42 INS78 INS43 INS42 INS42 INS42 INS42 INS78 INS43 INS42 INS42 INS42 INS65 INS65 INS65 INS42 INS42 INS42 INS43 INS42 UPD42 INS39 INS42 INS42 INS42 INS43 INS42 UPD42 INS43 INS42 INS39 INS42 INS42 INS42 INS66 INS42 INS42 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS42 INS42 INS42 INS68 INS42 INS42 INS42 INS42 INS42