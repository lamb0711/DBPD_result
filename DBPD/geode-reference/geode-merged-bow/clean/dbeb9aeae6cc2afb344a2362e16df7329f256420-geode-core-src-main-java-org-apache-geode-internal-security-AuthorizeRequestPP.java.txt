Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class implements post-processing authorization calls for various
- * operations. It provides methods to invoke authorization callback ({@link AccessControl#authorizeOperation})
- * to invoke the post-processing callback that may modify the results. The data
- * being passed for the operation is encapsulated in a {@link OperationContext}
- * object that can be modified by the post-processing authorization callbacks.
+ * This class implements post-processing authorization calls for various operations. It provides
+ * methods to invoke authorization callback ({@link AccessControl#authorizeOperation}) to invoke the
+ * post-processing callback that may modify the results. The data being passed for the operation is
+ * encapsulated in a {@link OperationContext} object that can be modified by the post-processing
+ * authorization callbacks.
-  
+
-  
+
-  public AuthorizeRequestPP(String postAuthzFactoryName,
-      ClientProxyMembershipID id, Principal principal, Cache cache)
-      throws ClassNotFoundException, NoSuchMethodException,
+  public AuthorizeRequestPP(String postAuthzFactoryName, ClientProxyMembershipID id,
+      Principal principal, Cache cache) throws ClassNotFoundException, NoSuchMethodException,
-    this.postAuthzCallback = (AccessControl)postAuthzMethod.invoke(null,
-        (Object[])null);
+    this.postAuthzCallback = (AccessControl) postAuthzMethod.invoke(null, (Object[]) null);
-        LocalizedStrings.AuthorizeRequestPP_AUTHORIZEREQUESTPP_SETTING_POST_PROCESS_AUTHORIZATION_CALLBACK_TO_1_FOR_CLIENT_0, 
-        new Object[] {id, postAuthzFactoryName});
+          LocalizedStrings.AuthorizeRequestPP_AUTHORIZEREQUESTPP_SETTING_POST_PROCESS_AUTHORIZATION_CALLBACK_TO_1_FOR_CLIENT_0,
+          new Object[] {id, postAuthzFactoryName});
-  public GetOperationContext getAuthorize(String regionName, Object key,
-      Object result, boolean isObject, GetOperationContext getContext)
-      throws NotAuthorizedException {
+  public GetOperationContext getAuthorize(String regionName, Object key, Object result,
+      boolean isObject, GetOperationContext getContext) throws NotAuthorizedException {
-    }
-    else {
+    } else {
-      String errStr = LocalizedStrings.AuthorizeRequestPP_IN_POSTPROCESS_NOT_AUTHORIZED_TO_PERFORM_GET_OPERATION_ON_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-        LocalizedStrings.TWO_ARG_COLON,
-        new Object[] {this.id, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequestPP_IN_POSTPROCESS_NOT_AUTHORIZED_TO_PERFORM_GET_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this.id, errStr});
-    }
-    else {
+    } else {
-           .finest(this.id
-                + ": In post-process: authorized to perform GET operation on region ["
+            .finest(this.id + ": In post-process: authorized to perform GET operation on region ["
-  public QueryOperationContext queryAuthorize(String queryString,
-      Set regionNames, Object queryResult, QueryOperationContext queryContext, Object[] queryParams)
+  public QueryOperationContext queryAuthorize(String queryString, Set regionNames,
+      Object queryResult, QueryOperationContext queryContext, Object[] queryParams)
-    }
-    else {
+    } else {
-      String errStr = LocalizedStrings.AuthorizeRequestPP_IN_POSTPROCESS_NOT_AUTHORIZED_TO_PERFORM_QUERY_OPERATION_0_ON_THE_CACHE.toLocalizedString(queryString);
-      this.logger.warning(
-        LocalizedStrings.TWO_ARG_COLON,
-        new Object[] {this.id, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequestPP_IN_POSTPROCESS_NOT_AUTHORIZED_TO_PERFORM_QUERY_OPERATION_0_ON_THE_CACHE
+              .toLocalizedString(queryString);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this.id, errStr});
-    }
-    else {
+    } else {
-        this.logger.finest(this.id
-            + ": In post-process: authorized to perform QUERY operation ["
+        this.logger.finest(this.id + ": In post-process: authorized to perform QUERY operation ["
-  public QueryOperationContext executeCQAuthorize(String cqName,
-      String queryString, Set regionNames, Object queryResult,
-      QueryOperationContext executeCQContext) throws NotAuthorizedException {
+  public QueryOperationContext executeCQAuthorize(String cqName, String queryString,
+      Set regionNames, Object queryResult, QueryOperationContext executeCQContext)
+      throws NotAuthorizedException {
-      executeCQContext = new ExecuteCQOperationContext(cqName, queryString,
-          regionNames, true);
-    }
-    else {
+      executeCQContext = new ExecuteCQOperationContext(cqName, queryString, regionNames, true);
+    } else {
-      String errStr =  LocalizedStrings.AuthorizeRequestPP_IN_POSTPROCESS_NOT_AUTHORIZED_TO_PERFORM_EXECUTE_CQ_OPERATION_0_ON_THE_CACHE.toLocalizedString(queryString);
-      this.logger.warning(
-        LocalizedStrings.TWO_ARG_COLON,
-        new Object[] {this.id, errStr});    
+      String errStr =
+          LocalizedStrings.AuthorizeRequestPP_IN_POSTPROCESS_NOT_AUTHORIZED_TO_PERFORM_EXECUTE_CQ_OPERATION_0_ON_THE_CACHE
+              .toLocalizedString(queryString);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this.id, errStr});
-    }
-    else {
+    } else {
-        this.logger.finest(this.id
-            + ": In post-process: authorized to perform EXECUTE_CQ operation ["
-            + queryString + "] on cache");
+        this.logger
+            .finest(this.id + ": In post-process: authorized to perform EXECUTE_CQ operation ["
+                + queryString + "] on cache");
-    }
-    else {
+    } else {
-      String errStr = LocalizedStrings.AuthorizeRequestPP_IN_POSTPROCESS_NOT_AUTHORIZED_TO_PERFORM_KEY_SET_OPERATION_ON_REGION_0.toLocalizedString(regionName);
-      this.logger.warning(
-        LocalizedStrings.TWO_ARG_COLON,
-        new Object[] {this.id, errStr});
+      String errStr =
+          LocalizedStrings.AuthorizeRequestPP_IN_POSTPROCESS_NOT_AUTHORIZED_TO_PERFORM_KEY_SET_OPERATION_ON_REGION_0
+              .toLocalizedString(regionName);
+      this.logger.warning(LocalizedStrings.TWO_ARG_COLON, new Object[] {this.id, errStr});
-    }
-    else {
+    } else {
-        this.logger
-            .finest(this.id
-                + ": In post-process: authorized to perform KEY_SET operation on region ["
+        this.logger.finest(
+            this.id + ": In post-process: authorized to perform KEY_SET operation on region ["
-  
-  public ExecuteFunctionOperationContext executeFunctionAuthorize(
-      Object oneResult, ExecuteFunctionOperationContext executeContext)
-      throws NotAuthorizedException {
+
+  public ExecuteFunctionOperationContext executeFunctionAuthorize(Object oneResult,
+      ExecuteFunctionOperationContext executeContext) throws NotAuthorizedException {
-    	String errStr = LocalizedStrings.AuthorizeRequestPP_0_NOT_AUTHORIZED_TO_PERFORM_EXECUTE_REGION_FUNCTION_1.toLocalizedString(new Object[] {toString(), regionName});
+      String errStr =
+          LocalizedStrings.AuthorizeRequestPP_0_NOT_AUTHORIZED_TO_PERFORM_EXECUTE_REGION_FUNCTION_1
+              .toLocalizedString(new Object[] {toString(), regionName});
-    }
-    else {
+    } else {
-        this.logger
-            .finest(this.id
-                + ": In post-process: authorized to perform EXECUTE_REGION_FUNCTION operation on region ["
-                + regionName + ']');
+        this.logger.finest(this.id
+            + ": In post-process: authorized to perform EXECUTE_REGION_FUNCTION operation on region ["
+            + regionName + ']');

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66