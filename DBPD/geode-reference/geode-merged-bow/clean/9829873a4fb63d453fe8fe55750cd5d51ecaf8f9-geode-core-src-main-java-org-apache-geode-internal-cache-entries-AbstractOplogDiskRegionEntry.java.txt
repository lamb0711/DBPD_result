GEODE-3870: clean up region entry classes (#989)

* cleanup variable names and types
* fix formatting and white space
* add @Override annotations and fix parameter names
* use interfaces instead of concrete implementations
* move member variables and constants to the top
-import org.apache.geode.internal.cache.LocalRegion;
+import org.apache.geode.internal.cache.InternalRegion;
-  public void removePhase1(LocalRegion r, boolean isClear) throws RegionClearedException {
+  public void removePhase1(InternalRegion region, boolean clear) throws RegionClearedException {
-      Helper.removeFromDisk(this, r, isClear);
+      Helper.removeFromDisk(this, region, clear);
-  public boolean fillInValue(LocalRegion r, Entry entry, ByteArrayDataInput in, DM mgr,
+  public boolean fillInValue(InternalRegion region, Entry entry, ByteArrayDataInput in, DM mgr,
-    return Helper.fillInValue(this, entry, r.getDiskRegion(), mgr, in, r, version);
+    return Helper.fillInValue(this, entry, region.getDiskRegion(), mgr, in, region, version);
-  public boolean isOverflowedToDisk(LocalRegion r, DistributedRegion.DiskPosition dp) {
-    return Helper.isOverflowedToDisk(this, r.getDiskRegion(), dp, r);
+  public boolean isOverflowedToDisk(InternalRegion region,
+      DistributedRegion.DiskPosition diskPosition) {
+    return Helper.isOverflowedToDisk(this, region.getDiskRegion(), diskPosition, region);
-    return Helper.faultInValue(this, (LocalRegion) context); // OFFHEAP returned to callers
+    return Helper.faultInValue(this, (InternalRegion) context); // OFFHEAP returned to callers
-    return Helper.faultInValueRetain(this, (LocalRegion) context);
+    return Helper.faultInValueRetain(this, (InternalRegion) context);
-  public Object getValueInVMOrDiskWithoutFaultIn(LocalRegion owner) {
-    return Helper.getValueInVMOrDiskWithoutFaultIn(this, owner);
+  public Object getValueInVMOrDiskWithoutFaultIn(InternalRegion region) {
+    return Helper.getValueInVMOrDiskWithoutFaultIn(this, region);
-  public Object getValueOffHeapOrDiskWithoutFaultIn(LocalRegion owner) {
-    return Helper.getValueOffHeapOrDiskWithoutFaultIn(this, owner);
+  public Object getValueOffHeapOrDiskWithoutFaultIn(InternalRegion region) {
+    return Helper.getValueOffHeapOrDiskWithoutFaultIn(this, region);
-  public Object getValueOnDisk(LocalRegion r) throws EntryNotFoundException {
-    return Helper.getValueOnDisk(this, r.getDiskRegion());
+  public Object getValueOnDisk(InternalRegion region) throws EntryNotFoundException {
+    return Helper.getValueOnDisk(this, region.getDiskRegion());
-  public Object getSerializedValueOnDisk(LocalRegion r) throws EntryNotFoundException {
-    return Helper.getSerializedValueOnDisk(this, r.getDiskRegion());
+  public Object getSerializedValueOnDisk(InternalRegion region) throws EntryNotFoundException {
+    return Helper.getSerializedValueOnDisk(this, region.getDiskRegion());
-  public Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException {
+  public Object getValueOnDiskOrBuffer(InternalRegion region) throws EntryNotFoundException {
-    return Helper.getValueOnDiskOrBuffer(this, r.getDiskRegion(), r);
+    return Helper.getValueOnDiskOrBuffer(this, region.getDiskRegion(), region);
+  @Override
+  @Override
+  @Override
+  @Override
-  public void persistConflictingTag(LocalRegion region, VersionTag tag) {
+  public void persistConflictingTag(InternalRegion region, VersionTag tag) {
-      LocalRegion lr = (LocalRegion) cacheEvent.getRegion();
+      InternalRegion lr = (InternalRegion) cacheEvent.getRegion();

UPD40 INS78 INS78 INS78 INS78 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 INS42 INS42 INS42 INS42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42