Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.cache.DiskEntry.Helper.Flushable;
+import com.gemstone.gemfire.internal.cache.DiskEntry.Helper.ValueWrapper;
-class OverflowOplog implements CompactableOplog {
+class OverflowOplog implements CompactableOplog, Flushable {
+  private final ByteBuffer[] bbArray = new ByteBuffer[2];
+    this.bbArray[0] = this.crf.writeBuf;
+      this.bbArray[0] = null;
-                           byte[] value,
-                           int valueLength,
+                           ValueWrapper value,
-    this.opState.initialize(entry, value, valueLength, userBits);
+    this.opState.initialize(entry, value, userBits);
-  private byte calcUserBits(byte[] value,
-                            boolean isSerializedObject) {
-    byte userBits = 0x0;
-  
-    if (isSerializedObject) {
-      if (value == DiskEntry.INVALID_BYTES) {
-        // its the invalid token
-        userBits = EntryBits.setInvalid(userBits, true);
-      } else if (value == DiskEntry.LOCAL_INVALID_BYTES) {
-        // its the local-invalid token
-        userBits = EntryBits.setLocalInvalid(userBits, true);
-      } else if (value == DiskEntry.TOMBSTONE_BYTES) {
-        // its the tombstone token
-        userBits = EntryBits.setTombstone(userBits, true);
-      } else {
-        userBits = EntryBits.setSerialized(userBits, true);
-      }
-    }
-    return userBits;
+  private byte calcUserBits(ValueWrapper value) {
+    return value.getUserBits();
-   * 
-   * 
-   * @param isSerializedObject
-   *          Do the bytes in <code>value</code> contain a serialized object
-   *          (or an actually <code>byte</code> array)?
+   * 
-  public final boolean modify(DiskRegion dr, DiskEntry entry, byte[] value,
-                              boolean isSerializedObject, boolean async)
+  public final boolean modify(DiskRegion dr, DiskEntry entry, ValueWrapper value,
+                              boolean async)
-      byte userBits = calcUserBits(value, isSerializedObject);
-      return basicModify(entry, value, value.length, userBits, async);
+      byte userBits = calcUserBits(value);
+      return basicModify(entry, value, userBits, async);
+  
-      return basicModify(entry, value, length, userBits, true);
+      ValueWrapper vw = new DiskEntry.Helper.CompactorValueWrapper(value, length);
+      return basicModify(entry, vw, userBits, true);
-                              byte[] value,
-                              int valueLength,
+                              ValueWrapper value,
-      initOpState(entry, value, valueLength, userBits);
+      initOpState(entry, value, userBits);
-            id.setValueLength(valueLength);
+            id.setValueLength(value.getLength());
-  private final void flush() throws IOException {
+  @Override
+  public final void flush() throws IOException {
+  @Override
+  public final void flush(ByteBuffer b1, ByteBuffer b2) throws IOException {
+    final OplogFile olf = this.crf;
+    synchronized (olf) {
+      if (olf.RAFClosed) {
+        return;
+      }
+      try {
+        assert b1 == olf.writeBuf;
+        b1.flip();
+        this.bbArray[1] = b2;
+        long flushed = olf.channel.write(this.bbArray);
+        this.bbArray[1] = null;
+        // update bytesFlushed after entire writeBuffer is flushed to fix bug 41201
+        olf.bytesFlushed += flushed;
+        b1.clear();
+      } catch (ClosedChannelException ignore) {
+        // It is possible for a channel to be closed when our code does not
+        // explicitly call channel.close (when we will set RAFclosed).
+        // This can happen when a thread is doing an io op and is interrupted.
+        // That thread will see ClosedByInterruptException but it will also
+        // close the channel and then we will see ClosedChannelException.
+      }
+    }
+  }
+  
-    private byte[] value;
-    private int valueLength;
+    private ValueWrapper value;
-    private final void write(byte[] bytes, int byteLength) throws IOException {
-      int offset = 0;
-      final int maxOffset = byteLength;
-      ByteBuffer bb = getOLF().writeBuf;
-      while (offset < maxOffset) {
-        
-        int bytesThisTime = maxOffset - offset;
-        boolean needsFlush = false;
-        if (bytesThisTime > bb.remaining()) {
-          needsFlush = true;
-          bytesThisTime = bb.remaining();
-        }
-        bb.put(bytes, offset, bytesThisTime);
-        offset += bytesThisTime;
-        if (needsFlush) {
-          flush();
-        }
-      }
+    private final void write(ValueWrapper vw) throws IOException {
+      vw.sendTo(getOLF().writeBuf, OverflowOplog.this);
+    
-                           byte[] value,
-                           int valueLength,
+                           ValueWrapper value,
-      this.valueLength = valueLength;
-        this.size += this.valueLength;
+        this.size += this.value.getLength();
-      if (this.needsValue && this.valueLength > 0) {
-        write(this.value, this.valueLength);
-        bytesWritten += this.valueLength;
+      if (this.needsValue) {
+        int valueLength = this.value.getLength();
+        if (valueLength > 0) {
+          write(this.value);
+          bytesWritten += valueLength;
+        }
+      // TODO OFFHEAP: optimize BytesAndBitsForCompactor to be able to have off-heap value reference instead of copying

INS26 INS26 INS40 INS40 INS43 INS23 INS31 INS31 INS42 INS83 INS83 INS5 INS59 MOV83 MOV39 MOV42 MOV44 INS8 INS78 UPD83 INS78 INS83 INS83 INS39 INS42 INS44 INS44 INS43 MOV8 INS43 INS85 INS42 INS3 INS21 INS43 INS43 INS41 INS43 INS43 INS42 INS42 INS43 INS42 MOV43 INS42 INS42 INS51 INS43 MOV59 INS8 INS42 INS5 INS34 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS83 INS43 INS42 INS8 INS42 INS43 INS42 MOV21 INS43 INS25 INS43 INS85 INS2 INS22 INS21 INS42 INS42 INS60 INS42 UPD42 INS22 INS25 INS54 INS42 INS42 MOV22 INS8 INS42 INS22 INS34 INS22 INS42 INS7 INS43 INS59 INS52 INS42 INS40 INS8 INS8 INS12 UPD42 UPD42 MOV22 INS52 INS60 MOV25 INS52 INS42 INS52 INS42 INS2 INS33 INS42 INS42 INS14 UPD42 INS41 INS6 MOV21 MOV21 INS60 MOV21 INS21 INS21 INS44 INS8 INS42 INS39 INS59 INS27 INS22 INS34 INS43 INS42 INS42 INS27 INS32 INS39 INS59 INS7 INS32 INS43 INS42 INS32 INS42 INS32 INS42 MOV34 INS52 INS42 INS40 UPD42 MOV42 UPD40 MOV40 UPD42 MOV42 UPD42 MOV42 INS2 INS42 INS42 INS32 INS2 INS33 INS40 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS22 INS42 INS22 INS42 INS22 INS34 INS40 INS42 INS22 INS22 INS34 MOV52 UPD42 MOV42 INS52 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 UPD42 MOV42 INS42 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL42 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL31 DEL42 DEL66 DEL66 DEL65 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL42 DEL40 DEL42 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL42 DEL39 DEL34 DEL42 DEL42 DEL9 DEL32 DEL7 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL42 DEL27 DEL8 DEL42 DEL40 DEL27 DEL8 DEL42 DEL40 DEL27 DEL8 DEL42 DEL9 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25 DEL8 DEL25 DEL42 DEL41 DEL83 DEL39 DEL85 DEL5 DEL23 DEL39 DEL42 DEL59 DEL39 DEL85 DEL5 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL83 DEL39 DEL42 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL27 DEL39 DEL42 DEL42 DEL42 DEL27 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL61 DEL8 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL22 DEL52 DEL42 DEL22 DEL27 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22