Merge branch 'release/1.4.0'

+import java.io.BufferedReader;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Arrays;
+import java.util.List;
+import java.util.function.Predicate;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+import com.google.common.base.Charsets;
+import org.apache.commons.lang.exception.ExceptionUtils;
+
+  public List<File> getServerDirs() {
+    File[] potentialMemberDirectories = workingDir.listFiles(File::isDirectory);
+
+    Predicate<File> isServerDir = (File directory) -> Arrays.stream(directory.list())
+        .anyMatch(filename -> filename.endsWith("server.pid"));
+
+    return Arrays.stream(potentialMemberDirectories).filter(isServerDir)
+        .collect(Collectors.toList());
+  }
+
+  public List<File> getLocatorDirs() {
+    File[] potentialMemberDirectories = workingDir.listFiles(File::isDirectory);
+
+    Predicate<File> isLocatorDir = (File directory) -> Arrays.stream(directory.list())
+        .anyMatch(filename -> filename.endsWith("locator.pid"));
+
+    return Arrays.stream(potentialMemberDirectories).filter(isLocatorDir)
+        .collect(Collectors.toList());
+  }
+
+  public void printLogFiles() {
+    System.out
+        .println("Printing contents of all log files found in " + workingDir.getAbsolutePath());
+    List<File> logFiles = findLogFiles();
+
+    for (File logFile : logFiles) {
+      System.out.println("Contents of " + logFile.getAbsolutePath());
+      try (BufferedReader br =
+          new BufferedReader(new InputStreamReader(new FileInputStream(logFile), Charsets.UTF_8))) {
+        String line;
+        while ((line = br.readLine()) != null) {
+          System.out.println(line);
+        }
+      } catch (IOException ignored) {
+        System.out.println("Unable to print log due to: " + ExceptionUtils.getStackTrace(ignored));
+      }
+    }
+  }
+
+  private List<File> findLogFiles() {
+    List<File> servers = getServerDirs();
+    List<File> locators = getLocatorDirs();
+
+    return Stream.concat(servers.stream(), locators.stream()).flatMap(this::findLogFiles)
+        .collect(Collectors.toList());
+  }
+
+  private Stream<File> findLogFiles(File memberDir) {
+    return Arrays.stream(memberDir.listFiles()).filter(File::isFile)
+        .filter(file -> file.getName().toLowerCase().endsWith(".log"));
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS74 INS42 INS44 INS8 INS43 INS43 INS60 INS60 INS41 INS43 INS43 INS60 INS60 INS41 INS21 INS60 INS70 INS43 INS43 INS60 INS60 INS41 INS43 INS43 INS43 INS42 INS41 INS42 INS42 INS5 INS59 INS74 INS59 INS32 INS42 INS42 INS5 INS59 INS74 INS59 INS32 INS32 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS74 INS59 INS74 INS59 INS32 INS42 INS42 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS86 INS32 INS42 INS32 INS43 INS85 INS42 INS32 INS43 INS43 INS42 INS86 INS32 INS42 INS32 INS40 INS42 INS27 INS43 INS43 INS42 INS32 INS43 INS42 INS21 INS54 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS86 INS42 INS42 INS42 INS90 INS42 INS42 INS44 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS90 INS42 INS42 INS44 INS32 INS32 INS42 INS42 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS58 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS90 INS42 INS42 INS32 INS42 INS90 INS59 INS32 INS42 INS42 INS43 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS43 INS59 INS60 INS61 INS44 INS8 INS42 INS42 INS32 INS32 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS32 INS59 INS32 INS42 INS42 INS42 INS32 INS59 INS32 INS45 INS32 INS42 INS42 INS14 INS43 INS59 INS27 INS8 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS14 INS42 INS42 INS36 INS33 INS21 INS42 INS32 INS42 INS42 INS42 INS43 INS14 INS40 INS7 INS32 INS40 INS42 INS27 INS42 INS43 INS42 INS42 INS32 INS40 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42