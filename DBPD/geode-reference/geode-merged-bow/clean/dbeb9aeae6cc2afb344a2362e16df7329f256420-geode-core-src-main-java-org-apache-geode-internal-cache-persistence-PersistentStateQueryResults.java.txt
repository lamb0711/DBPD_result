Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public final Map<InternalDistributedMember, PersistentMemberState> stateOnPeers = new HashMap<InternalDistributedMember, PersistentMemberState>();
-  public final Map<InternalDistributedMember, PersistentMemberID> initializingIds = new HashMap<InternalDistributedMember, PersistentMemberID>();
-  public final Map<InternalDistributedMember, PersistentMemberID> persistentIds = new HashMap<InternalDistributedMember, PersistentMemberID>();
-  public final Map<InternalDistributedMember, Set<PersistentMemberID>> onlineMemberMap = new HashMap<InternalDistributedMember, Set<PersistentMemberID>>();
-  public final Map<InternalDistributedMember, DiskStoreID> diskStoreIds = new HashMap<InternalDistributedMember, DiskStoreID>();
-  
+  public final Map<InternalDistributedMember, PersistentMemberState> stateOnPeers =
+      new HashMap<InternalDistributedMember, PersistentMemberState>();
+  public final Map<InternalDistributedMember, PersistentMemberID> initializingIds =
+      new HashMap<InternalDistributedMember, PersistentMemberID>();
+  public final Map<InternalDistributedMember, PersistentMemberID> persistentIds =
+      new HashMap<InternalDistributedMember, PersistentMemberID>();
+  public final Map<InternalDistributedMember, Set<PersistentMemberID>> onlineMemberMap =
+      new HashMap<InternalDistributedMember, Set<PersistentMemberID>>();
+  public final Map<InternalDistributedMember, DiskStoreID> diskStoreIds =
+      new HashMap<InternalDistributedMember, DiskStoreID>();
+
-      PersistentMemberID myInitializingId, DiskStoreID diskStoreID, HashSet<PersistentMemberID> onlineMembers) {
+      PersistentMemberID myInitializingId, DiskStoreID diskStoreID,
+      HashSet<PersistentMemberID> onlineMembers) {
-    if(myId != null) {
+    if (myId != null) {
-    if(myInitializingId != null) {
+    if (myInitializingId != null) {
-    if(diskStoreID != null) {
+    if (diskStoreID != null) {
-    if(onlineMembers != null) {
+    if (onlineMembers != null) {

