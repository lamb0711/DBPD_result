GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

-import java.io.Closeable;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.ScheduledExecutorService;
-import java.util.concurrent.ScheduledFuture;
-import java.util.concurrent.TimeUnit;
-
-import org.apache.geode.redis.internal.executor.ExpirationExecutor;
-import org.apache.geode.redis.internal.executor.RedisKeyCommands;
-import org.apache.geode.redis.internal.executor.RedisKeyCommandsFunctionExecutor;
-public class RegionProvider implements Closeable {
+public class RegionProvider {
-  private final ConcurrentMap<ByteArrayWrapper, ScheduledFuture<?>> expirationsMap;
-  private final ScheduledExecutorService expirationExecutor;
-
-  public RegionProvider(
-      ConcurrentMap<ByteArrayWrapper, ScheduledFuture<?>> expirationsMap,
-      ScheduledExecutorService expirationExecutor,
-      Region<ByteArrayWrapper, RedisData> dataRegion) {
+  public RegionProvider(Region<ByteArrayWrapper, RedisData> dataRegion) {
-    this.expirationsMap = expirationsMap;
-    this.expirationExecutor = expirationExecutor;
-  }
-
-  public boolean expireKey(ByteArrayWrapper key, RedisDataType type, boolean cancelExpiration) {
-    RedisKeyCommands redisKeyCommands = new RedisKeyCommandsFunctionExecutor(dataRegion);
-    try {
-      return redisKeyCommands.del(key);
-    } catch (Exception exc) {
-      return false;
-    } finally {
-      if (cancelExpiration) {
-        cancelKeyExpiration(key);
-      } else {
-        removeKeyExpiration(key);
-      }
-    }
-
-  /**
-   * Sets the expiration for a key. The setting and modifying of a key expiration can only be set by
-   * a delay, which means that both expiring after a time and at a time can be done but the delay to
-   * expire at a time must be calculated before these calls. It is also important to note that the
-   * delay is always handled in milliseconds
-   *
-   * @param key The key to set the expiration for
-   * @param delay The delay in milliseconds of the expiration
-   * @return True is expiration set, false otherwise
-   */
-  public boolean setExpiration(ByteArrayWrapper key, long delay) {
-
-    if (!getDataRegion().containsKey(key)) {
-      return false;
-    }
-    ScheduledFuture<?> future = expirationExecutor
-        .schedule(new ExpirationExecutor(key, null, this), delay, TimeUnit.MILLISECONDS);
-    expirationsMap.put(key, future);
-    return true;
-  }
-
-  /**
-   * Modifies an expiration on a key
-   *
-   * @param key String key to modify expiration on
-   * @param delay Delay in milliseconds to reset the expiration to
-   * @return True if reset, false if not
-   */
-  public boolean modifyExpiration(ByteArrayWrapper key, long delay) {
-    /*
-     * Attempt to cancel future task
-     */
-    boolean canceled = cancelKeyExpiration(key);
-
-    if (!canceled) {
-      return false;
-    }
-
-    if (!getDataRegion().containsKey(key)) {
-      return false;
-    }
-
-    ScheduledFuture<?> future = expirationExecutor
-        .schedule(new ExpirationExecutor(key, null, this), delay, TimeUnit.MILLISECONDS);
-    expirationsMap.put(key, future);
-    return true;
-  }
-
-  /**
-   * Removes an expiration from a key
-   *
-   * @param key Key
-   * @return True is expiration cancelled on the key, false otherwise
-   */
-  public boolean cancelKeyExpiration(ByteArrayWrapper key) {
-    ScheduledFuture<?> future = expirationsMap.remove(key);
-    if (future == null) {
-      return false;
-    }
-    return future.cancel(false);
-  }
-
-  private boolean removeKeyExpiration(ByteArrayWrapper key) {
-    return expirationsMap.remove(key) != null;
-  }
-
-  /**
-   * Check method if key has expiration
-   *
-   * @param key Key
-   * @return True if key has expiration, false otherwise
-   */
-  public boolean hasExpiration(ByteArrayWrapper key) {
-    return expirationsMap.containsKey(key);
-  }
-
-  /**
-   * Get remaining expiration time
-   *
-   * @param key Key
-   * @return Remaining time in milliseconds or 0 if no delay or key doesn't exist
-   */
-  public long getExpirationDelayMillis(ByteArrayWrapper key) {
-    ScheduledFuture<?> future = expirationsMap.get(key);
-    return future != null ? future.getDelay(TimeUnit.MILLISECONDS) : 0L;
-  }
-
-  @Override
-  public void close() {}

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL33 DEL52 DEL14 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL33 DEL52 DEL14 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL9 DEL41 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL34 DEL16 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL8 DEL31