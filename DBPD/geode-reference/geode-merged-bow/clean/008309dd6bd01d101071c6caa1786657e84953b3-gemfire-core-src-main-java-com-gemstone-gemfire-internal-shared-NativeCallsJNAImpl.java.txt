Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.io.File;
+import java.nio.file.FileStore;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
-      if (!preAllocate || !hasFallocate()) {
+      if (!preAllocate || !hasFallocate(path)) {
-    protected boolean hasFallocate() {
+    protected boolean hasFallocate(String path) {
+     * Get the file store type of a path.
+     * for example, /dev/sdd1(store name) /w2-gst-dev40d(mount point) ext4(type)
+     * @param path
+     * @return file store type
+     */
+    public String getFileStoreType(final String path) {
+      File diskFile = new File(path);
+      if (!diskFile.exists()) {
+        diskFile = diskFile.getParentFile();
+      }
+      Path currentPath = diskFile.toPath();
+      if (currentPath.isAbsolute() && Files.exists(currentPath)) {
+        try {
+          FileStore store = Files.getFileStore(currentPath);
+          return store.type();
+        } catch (IOException e) {
+          return null;
+        }
+      }
+      return null;
+    }
+
+    /**
+    public final static String[] FallocateFileSystems = {"ext4", "xfs", "btrfs", "ocfs2"};
+
-    protected boolean hasFallocate() {
-      return true;
+    protected boolean hasFallocate(String path) {
+      String fstype = getFileStoreType(path);
+      for (String type:FallocateFileSystems) {
+        if (type.equalsIgnoreCase(fstype)) {
+          return true;
+        }
+      }
+      return false;

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS23 INS44 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS83 INS5 INS59 INS44 INS8 INS43 INS42 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS60 INS25 INS60 INS25 INS41 INS43 INS85 INS42 INS4 INS43 INS42 INS60 INS70 INS41 INS42 INS66 INS66 INS42 INS66 INS42 INS43 INS59 INS38 INS8 INS43 INS59 INS27 INS8 INS33 INS42 INS45 INS45 INS45 INS45 INS42 INS43 INS59 INS44 INS42 INS8 INS9 INS42 INS42 INS14 INS32 INS21 INS42 INS42 INS32 INS32 INS32 INS54 INS42 INS42 INS32 INS43 INS42 INS25 INS43 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS32 MOV8 INS42 INS42 INS42 INS32 INS60 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS42