GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-import javax.transaction.SystemException;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.cache.InternalCache;
-/**
- * 
- *
- */
-public class JCAManagedConnection implements ManagedConnection
+public class JCAManagedConnection implements ManagedConnection {
-{
-  private volatile TXManagerImpl gfTxMgr;
+  private volatile TXManagerImpl transactionManager;
-  // private volatile TransactionId currentTxID;
-  private volatile GemFireCacheImpl cache;
+  private volatile InternalCache cache;
-  private volatile boolean initDone = false;
+  private volatile boolean initialized = false;
-  private volatile PrintWriter logger;
+  private volatile PrintWriter logWriter;
-  private JCAManagedConnectionFactory factory;
+  private final JCAManagedConnectionFactory connectionFactory;
-  private volatile Set<GFConnectionImpl> connections;
+  private final Set<GFConnectionImpl> connections;
-  private volatile JCALocalTransaction localTran;
+  private volatile JCALocalTransaction localTransaction;
-  private final static boolean DEBUG = false;
-
-  public JCAManagedConnection(JCAManagedConnectionFactory fact) {
-    this.factory = fact;
-    this.listeners = Collections
-        .<ConnectionEventListener>synchronizedList(new ArrayList<ConnectionEventListener>());
-    this.localTran = new JCALocalTransaction();
-    this.connections =
-        Collections.<GFConnectionImpl>synchronizedSet(new HashSet<GFConnectionImpl>());
+  JCAManagedConnection(JCAManagedConnectionFactory connectionFactory) {
+    this.connectionFactory = connectionFactory;
+    this.listeners = Collections.synchronizedList(new ArrayList<>());
+    this.localTransaction = new JCALocalTransaction();
+    this.connections = Collections.synchronizedSet(new HashSet<>());
+  @Override
-
-  public void associateConnection(Object conn) throws ResourceException {
-    if (!(conn instanceof GFConnectionImpl)) {
+  @Override
+  public void associateConnection(Object connection) throws ResourceException {
+    if (!(connection instanceof GFConnectionImpl)) {
-    ((GFConnectionImpl) conn).resetManagedConnection(this);
-    this.connections.add((GFConnectionImpl) conn);
+    ((GFConnectionImpl) connection).resetManagedConnection(this);
+    this.connections.add((GFConnectionImpl) connection);
+  @Override
-    if (DEBUG) {
-      try {
-        throw new NullPointerException("Asif:JCAManagedConnection:cleanup");
-      } catch (NullPointerException npe) {
-        npe.printStackTrace();
-      }
-    }
-      Iterator<GFConnectionImpl> connsItr = this.connections.iterator();
-      while (connsItr.hasNext()) {
-        GFConnectionImpl conn = connsItr.next();
-        conn.invalidate();
-        connsItr.remove();
+      Iterator<GFConnectionImpl> iterator = this.connections.iterator();
+      while (iterator.hasNext()) {
+        GFConnectionImpl connection = iterator.next();
+        connection.invalidate();
+        iterator.remove();
-    if (this.localTran == null || this.localTran.transactionInProgress()) {
-      if (this.initDone && !this.cache.isClosed()) {
-        this.localTran = new JCALocalTransaction(cache, gfTxMgr);
+    if (this.localTransaction == null || this.localTransaction.transactionInProgress()) {
+      if (this.initialized && !this.cache.isClosed()) {
+        this.localTransaction = new JCALocalTransaction(this.cache, this.transactionManager);
-        this.localTran = new JCALocalTransaction();
+        this.localTransaction = new JCALocalTransaction();
-
+  @Override
-    if (DEBUG) {
-      try {
-        throw new NullPointerException("Asif:JCAManagedConnection:destroy");
-      } catch (NullPointerException npe) {
-        npe.printStackTrace();
-      }
-    }
-      Iterator<GFConnectionImpl> connsItr = this.connections.iterator();
-      while (connsItr.hasNext()) {
-        GFConnectionImpl conn = connsItr.next();
-        conn.invalidate();
-        connsItr.remove();
+      Iterator<GFConnectionImpl> iterator = this.connections.iterator();
+      while (iterator.hasNext()) {
+        GFConnectionImpl connection = iterator.next();
+        connection.invalidate();
+        iterator.remove();
-    this.gfTxMgr = null;
+    this.transactionManager = null;
-    this.localTran = null;
+    this.localTransaction = null;
+  @Override
-    if (DEBUG) {
-      try {
-        throw new NullPointerException("Asif:JCAManagedConnection:getConnection");
-      } catch (NullPointerException npe) {
-        npe.printStackTrace();
-      }
+    if (!this.initialized || this.cache.isClosed()) {
+      init();
-    try {
-      if (!this.initDone || this.cache.isClosed()) {
-        init();
-      }
-      LogWriter logger = this.cache.getLogger();
-      if (logger.fineEnabled()) {
-        logger.fine("JCAManagedConnection:getConnection. Returning new Connection");
-      }
+    LogWriter logger = this.cache.getLogger();
+    if (logger.fineEnabled()) {
+      logger.fine("JCAManagedConnection:getConnection. Returning new Connection");
+    }
-      GFConnectionImpl conn = new GFConnectionImpl(this);
-      this.connections.add(conn);
-      return conn;
-    } catch (SystemException e) {
-      this.onError(e);
-      throw new ResourceException("GemFire Resource unavailable", e);
-    }
+    GFConnectionImpl connection = new GFConnectionImpl(this);
+    this.connections.add(connection);
+    return connection;
-  private void init() throws SystemException {
-    this.cache = (GemFireCacheImpl) CacheFactory.getAnyInstance();
+  private void init() {
+    this.cache = (InternalCache) CacheFactory.getAnyInstance();
-    gfTxMgr = cache.getTxManager();
-    this.initDone = true;
+    this.transactionManager = this.cache.getTxManager();
+    this.initialized = true;
+  @Override
-    if (DEBUG) {
-      try {
-        throw new NullPointerException("Asif:JCAManagedConnection:getLocalTransaction");
-      } catch (NullPointerException npe) {
-        npe.printStackTrace();
-      }
-    }
-
-    return this.localTran;
+    return this.localTransaction;
+  @Override
-    return this.logger;
+    return this.logWriter;
+  @Override
-    if (DEBUG) {
-      try {
-        throw new NullPointerException("Asif:JCAManagedConnection:getMetaData");
-      } catch (NullPointerException npe) {
-        npe.printStackTrace();
-      }
-    }
-    if (this.initDone && !this.cache.isClosed()) {
+    if (this.initialized && !this.cache.isClosed()) {
-    return new JCAManagedConnectionMetaData(this.factory.getProductName(),
-        this.factory.getVersion(), this.factory.getUserName());
+    return new JCAManagedConnectionMetaData(this.connectionFactory.getProductName(),
+        this.connectionFactory.getVersion(), this.connectionFactory.getUserName());
+  @Override
+  @Override
+  @Override
-    this.logger = logger;
+    this.logWriter = logger;
-  private void onError(Exception e) {
-
-    this.localTran = null;
+  private void onError(Exception e) { // TODO: currently unused
+    this.localTransaction = null;
-      Iterator<GFConnectionImpl> connsItr = this.connections.iterator();
-      while (connsItr.hasNext()) {
-        GFConnectionImpl conn = connsItr.next();
-        conn.invalidate();
+      Iterator<GFConnectionImpl> iterator = this.connections.iterator();
+      while (iterator.hasNext()) {
+        GFConnectionImpl connection = iterator.next();
+        connection.invalidate();
+
-          Iterator<ConnectionEventListener> itr = this.listeners.iterator();
-          ConnectionEvent ce =
+          ConnectionEvent event =
-          ce.setConnectionHandle(conn);
-          while (itr.hasNext()) {
-            itr.next().connectionErrorOccurred(ce);
+          event.setConnectionHandle(connection);
+          for (ConnectionEventListener listener : this.listeners) {
+            listener.connectionErrorOccurred(event);
-        connsItr.remove();
+
+        iterator.remove();
-
-  public void onClose(GFConnectionImpl conn) throws ResourceException {
-    conn.invalidate();
-    this.connections.remove(conn);
+  public void onClose(GFConnectionImpl connection) {
+    connection.invalidate();
+    this.connections.remove(connection);
+
-      Iterator<ConnectionEventListener> itr = this.listeners.iterator();
-      ConnectionEvent ce = new ConnectionEvent(this, ConnectionEvent.CONNECTION_CLOSED);
-      ce.setConnectionHandle(conn);
-      while (itr.hasNext()) {
-        itr.next().connectionClosed(ce);
-      }
-    }
-    if (this.connections.isEmpty()) {
-      // safe to dissociate this managedconnection so that it can go to pool
-      if (this.initDone && !this.cache.isClosed()) {
-        this.localTran = new JCALocalTransaction(this.cache, this.gfTxMgr);
-      } else {
-        this.localTran = new JCALocalTransaction();
+      Iterator<ConnectionEventListener> iterator = this.listeners.iterator();
+      ConnectionEvent event = new ConnectionEvent(this, ConnectionEvent.CONNECTION_CLOSED);
+      event.setConnectionHandle(connection);
+      while (iterator.hasNext()) {
+        iterator.next().connectionClosed(event);
+    if (this.connections.isEmpty()) {
+      // safe to dissociate this managed connection so that it can go to pool
+      if (this.initialized && !this.cache.isClosed()) {
+        this.localTransaction = new JCALocalTransaction(this.cache, this.transactionManager);
+      } else {
+        this.localTransaction = new JCALocalTransaction();
+      }
+    }

UPD40 INS31 UPD43 INS83 UPD83 INS78 INS78 MOV21 INS78 INS78 INS78 MOV8 INS78 MOV83 MOV43 MOV42 MOV43 MOV8 INS78 MOV43 INS78 INS78 INS78 INS78 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 UPD42 MOV22 UPD42 UPD42 INS36 INS42 INS52 MOV22 INS42 MOV11 UPD42 UPD42 INS22 UPD42 UPD42 UPD42 UPD42 MOV60 UPD42 UPD42 INS11 UPD42 UPD42 UPD42 UPD43 INS52 INS42 INS22 UPD42 UPD42 UPD42 UPD42 UPD74 UPD74 UPD42 MOV43 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS52 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 UPD42 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS70 UPD42 UPD42 UPD42 UPD42 INS22 INS22 UPD42 UPD42 UPD42 INS44 INS22 INS8 UPD42 UPD42 UPD42 INS52 INS42 INS52 INS42 UPD42 UPD42 UPD42 INS43 INS42 INS52 INS42 MOV21 UPD42 INS42 UPD42 MOV42 UPD42 DEL40 DEL26 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL52 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL61 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60