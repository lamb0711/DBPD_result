Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), -bit)); // Redis returns 0 when key does not exists for this command
+      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), -bit)); // Redis
+                                                                                          // returns
+                                                                                          // 0 when
+                                                                                          // key
+                                                                                          // does
+                                                                                          // not
+                                                                                          // exists
+                                                                                          // for
+                                                                                          // this
+                                                                                          // command
-    outerLoop:
-      for (int i = start; i <= end; i++) {
-        int cBit;
-        byte cByte = bytes[i];
-        for (int j = 0; j < 8; j++) {
-          cBit = (cByte & (0x80 >> j)) >> (7 - j);
-    if (cBit ==  bit) {
-      bitPosition = 8 * i + j;
-      break outerLoop;
-    }
+    outerLoop: for (int i = start; i <= end; i++) {
+      int cBit;
+      byte cByte = bytes[i];
+      for (int j = 0; j < 8; j++) {
+        cBit = (cByte & (0x80 >> j)) >> (7 - j);
+        if (cBit == bit) {
+          bitPosition = 8 * i + j;
+          break outerLoop;
+    }

