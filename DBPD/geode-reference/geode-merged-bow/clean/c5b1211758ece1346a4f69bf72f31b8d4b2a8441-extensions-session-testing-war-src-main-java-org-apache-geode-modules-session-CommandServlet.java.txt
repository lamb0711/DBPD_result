GEODE-3513: Removing the use of native sessions session caching

In the session module for generic app servers, we were asking the
application server for a 'native' session and then wrapping it on our
own GemfireHttpSession. However, we were not cleaning up that native
session, which means that in PROXY mode we were leaving these sessions
on the client with them being useful.

The GemfireHttpSession now no longer wraps a native session. We are
still temporarily creating a native session because it is the only way
for us to get the session timeout value that was configured in web.xml,
but the native session is immediately invalidated.

Adding and extending cargo session tests to test how sessions are being
cleaned up from the clients and the server.

This closes #740

+import java.util.function.Function;
-    String cmdStr = request.getParameter("cmd");
-    if (cmdStr != null) {
-      cmd = QueryCommand.valueOf(cmdStr);
-    }
+    try {
+      String cmdStr = request.getParameter("cmd");
+      if (cmdStr != null) {
+        cmd = QueryCommand.valueOf(cmdStr);
+      }
-    HttpSession session;
+      HttpSession session;
-    switch (cmd) {
-      case SET:
-        session = request.getSession();
-        session.setAttribute(param, value);
-        break;
-      case SET_MAX_INACTIVE:
-        session = request.getSession();
-        session.setMaxInactiveInterval(Integer.valueOf(value));
-        break;
-      case GET:
-        session = request.getSession();
-        String val = (String) session.getAttribute(param);
-        if (val != null) {
-          out.write(val);
-        }
-        break;
-      case REMOVE:
-        session = request.getSession();
-        session.removeAttribute(param);
-        break;
-      case INVALIDATE:
-        session = request.getSession();
-        session.invalidate();
-        break;
+      switch (cmd) {
+        case SET:
+          session = request.getSession();
+          session.setAttribute(param, value);
+          break;
+        case SET_MAX_INACTIVE:
+          session = request.getSession();
+          session.setMaxInactiveInterval(Integer.valueOf(value));
+          break;
+        case GET:
+          session = request.getSession();
+          String val = (String) session.getAttribute(param);
+          if (val != null) {
+            out.write(val);
+          }
+          break;
+        case REMOVE:
+          session = request.getSession();
+          session.removeAttribute(param);
+          break;
+        case INVALIDATE:
+          session = request.getSession();
+          session.invalidate();
+          break;
+        case FUNCTION:
+          String functionClass = request.getParameter("function");
+          Class<? extends Function> clazz = (Class<? extends Function>) Thread.currentThread()
+              .getContextClassLoader().loadClass(functionClass);
+          Function<HttpServletRequest, String> function = clazz.newInstance();
+          String result = function.apply(request);
+          if (result != null) {
+            out.write(result);
+          }
+          break;
+      }
+    } catch (Exception e) {
+      out.write("Error in servlet: " + e.toString());
+      e.printStackTrace(out);

INS26 INS40 INS54 INS8 INS12 MOV60 MOV25 MOV60 MOV50 INS44 INS8 INS49 INS60 INS60 INS60 INS60 INS25 INS10 INS43 INS42 INS21 INS21 INS42 INS43 INS59 INS74 INS59 INS74 INS59 INS43 INS59 INS27 INS8 INS42 INS32 INS32 INS42 INS42 INS32 INS43 INS76 INS42 INS11 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS32 INS42 INS43 INS76 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42