GEODE-6310 limit classgraph file descriptor consumption (#3124)

 * properly wraps all scanner uses in try-with-resources to ensure
   temporary files are cleaned up and file descriptors are closed

 * limits thread usage based on heap size, cpu count, and max file
   descriptor limits

 * removes usage of a non-public classgraph API, to ensure
   binary-compatibility with versions of classgraph up to 4.4.12

* based on review feedback, simplify to just always use 1 thread

-    ScanResult scanResult = fastClasspathScanner.enableClassInfo().scan();
+    try (ScanResult scanResult = fastClasspathScanner.enableClassInfo().scan(1)) {
-    Set<String> functionClasses = new HashSet<>();
+      Set<String> functionClasses = new HashSet<>();
-    functionClasses.addAll(scanResult.getClassesImplementing(Function.class.getName()).getNames());
-    functionClasses.addAll(scanResult.getSubclasses(FunctionAdapter.class.getName()).getNames());
+      functionClasses
+          .addAll(scanResult.getClassesImplementing(Function.class.getName()).getNames());
+      functionClasses.addAll(scanResult.getSubclasses(FunctionAdapter.class.getName()).getNames());
-    return functionClasses;
+      return functionClasses;
+    }

INS54 INS58 INS8 MOV43 MOV59 MOV60 MOV21 MOV21 MOV41 INS34 DEL60