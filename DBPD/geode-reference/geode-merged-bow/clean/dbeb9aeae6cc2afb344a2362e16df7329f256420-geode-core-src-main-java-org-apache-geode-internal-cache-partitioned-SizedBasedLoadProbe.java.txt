Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A load probe which calculates the load of a pr using
- * the size of the buckets in bytes.
+ * A load probe which calculates the load of a pr using the size of the buckets in bytes.
-  //TODO rebalancing come up with a better threshold for minumum bucket size?
-  public static final int MIN_BUCKET_SIZE = Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "MIN_BUCKET_SIZE", 1).intValue();
+  // TODO rebalancing come up with a better threshold for minumum bucket size?
+  public static final int MIN_BUCKET_SIZE =
+      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "MIN_BUCKET_SIZE", 1).intValue();
-    PRLoad prLoad = new PRLoad(
-        configuredBucketCount, pr.getLocalMaxMemory());
-    
+    PRLoad prLoad = new PRLoad(configuredBucketCount, pr.getLocalMaxMemory());
+
-    for(Integer bidInt : ds.getAllLocalBucketIds()) {
+    for (Integer bidInt : ds.getAllLocalBucketIds()) {
-      if(bucketSize < MIN_BUCKET_SIZE) {
+      if (bucketSize < MIN_BUCKET_SIZE) {
-      
-      BucketAdvisor bucketAdvisor = pr.getRegionAdvisor().
-      getBucket(bid).getBucketAdvisor();
-      //Wait for a primary to exist for this bucket, because
-      //it might be this member.
+
+      BucketAdvisor bucketAdvisor = pr.getRegionAdvisor().getBucket(bid).getBucketAdvisor();
+      // Wait for a primary to exist for this bucket, because
+      // it might be this member.
-      boolean isPrimary = pr.getRegionAdvisor().
-          getBucket(bid).getBucketAdvisor().isPrimary();
+      boolean isPrimary = pr.getRegionAdvisor().getBucket(bid).getBucketAdvisor().isPrimary();
-    
+
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  }
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {}
-  public void toData(DataOutput out) throws IOException {
-  }
+  public void toData(DataOutput out) throws IOException {}

UPD66 DEL66