Merge branch 'release/1.3.0'

+import static org.apache.commons.lang.Validate.isTrue;
+import static org.apache.commons.lang.Validate.notEmpty;
+import static org.apache.commons.lang.Validate.notNull;
+
-import java.io.FilenameFilter;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.TimeoutException;
-
-import org.apache.geode.internal.util.IOUtils;
-import org.apache.geode.internal.util.StopWatch;
-  private static final long SLEEP_INTERVAL_MILLIS = 10;
-
-   * @throws FileNotFoundException if the specified file name is not found within the directory
+   * @throws IllegalArgumentException if the specified file is null or does not exist
-  public PidFile(final File file) throws FileNotFoundException {
-    if (!file.exists() || !file.isFile()) {
-      throw new FileNotFoundException("Unable to find PID file '" + file + "'");
-    }
-    this.pidFile = file;
-  }
+  public PidFile(final File file) {
+    notNull(file, "Invalid file '" + file + "' specified");
+    isTrue(file.exists(), "Nonexistent file '" + file + "' specified");
-  File getFile() {
-    return this.pidFile;
+    this.pidFile = file;
-   * @throws FileNotFoundException if the specified file name is not found within the directory
-   * @throws IllegalStateException if dir is not an existing directory
+   * @throws FileNotFoundException if the specified filename is not found within the directory
+   * @throws IllegalArgumentException if directory is null, does not exist or is not a directory
-    if (!directory.isDirectory() && directory.exists()) {
-      throw new IllegalArgumentException(
-          "Argument '" + directory + "' must be an existing directory!");
-    }
+    notNull(directory, "Invalid directory '" + directory + "' specified");
+    notEmpty(filename, "Invalid filename '" + filename + "' specified");
+    isTrue(directory.isDirectory() && directory.exists(),
+        "Nonexistent directory '" + directory + "' specified");
-    final File file = new File(directory, filename);
+    File file = new File(directory, filename);
-          "Unable to find PID file '" + filename + "' in directory " + directory);
+          "Unable to find PID file '" + filename + "' in directory '" + directory + "'");
-    BufferedReader fileReader = null;
-
-    try {
-      fileReader = new BufferedReader(new FileReader(this.pidFile));
+    try (BufferedReader fileReader = new BufferedReader(new FileReader(pidFile))) {
-      final int pid = Integer.parseInt(pidValue);
+      int pid = Integer.parseInt(pidValue);
-            "Invalid pid '" + pid + "' found in " + this.pidFile.getCanonicalPath());
+            "Invalid pid '" + pid + "' found in " + pidFile.getCanonicalPath());
-    } catch (NumberFormatException e) {
+    } catch (NumberFormatException ignored) {
-          "Invalid pid '" + pidValue + "' found in " + this.pidFile.getCanonicalPath());
-    } finally {
-      IOUtils.close(fileReader);
+          "Invalid pid '" + pidValue + "' found in " + pidFile.getCanonicalPath());
-  /**
-   * Reads in the pid from the specified file, retrying until the specified timeout.
-   * 
-   * @param timeout the maximum time to spend trying to read the pidFile
-   * @param unit the unit of timeout
-   * 
-   * @return the process id (pid) contained within the pidFile
-   * 
-   * @throws IllegalArgumentException if the pid in the pidFile is not a positive integer
-   * @throws IOException if unable to read from the specified file
-   * @throws InterruptedException if interrupted
-   * @throws TimeoutException if operation times out
-   */
-  public int readPid(final long timeout, final TimeUnit unit)
-      throws IOException, InterruptedException, TimeoutException {
-    IllegalArgumentException iae = null;
-    IOException ioe = null;
-    int pid = 0;
-
-    final long timeoutMillis = unit.toMillis(timeout);
-    final StopWatch stopWatch = new StopWatch(true);
-
-    while (pid <= 0) {
-      try {
-        pid = readPid();
-      } catch (IllegalArgumentException e) {
-        iae = e;
-      } catch (IOException e) {
-        ioe = e;
-      }
-      if (stopWatch.elapsedTimeMillis() > timeoutMillis) {
-        if (iae != null) {
-          throw new TimeoutException(iae.getMessage());
-        }
-        if (ioe != null) {
-          throw new TimeoutException(ioe.getMessage());
-        }
-      } else {
-        try {
-          Thread.sleep(SLEEP_INTERVAL_MILLIS);
-        } catch (InterruptedException e) {
-          Thread.currentThread().interrupt();
-          if (iae != null) {
-            throw new InterruptedException(iae.getMessage());
-          }
-          if (ioe != null) {
-            throw new InterruptedException(ioe.getMessage());
-          }
-          throw e;
-        }
-      }
-    }
-    return pid;
+  File getFile() {
+    return pidFile;
+

MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 INS21 INS21 INS21 INS21 INS21 UPD42 UPD66 INS32 INS32 UPD66 UPD42 UPD66 INS32 INS32 INS32 INS58 INS42 INS42 MOV42 INS27 INS42 MOV32 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 MOV27 INS27 MOV43 INS59 INS45 INS42 INS45 UPD45 MOV45 MOV42 UPD45 MOV45 INS45 INS42 INS45 INS45 INS42 INS45 MOV32 UPD45 MOV45 MOV42 UPD45 MOV45 INS42 MOV14 UPD42 UPD45 INS45 INS42 MOV43 MOV43 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL42 DEL43 DEL38 DEL42 DEL32 DEL38 DEL27 DEL42 DEL43 DEL27 DEL14 DEL53 DEL8 DEL25 DEL38 DEL42 DEL43 DEL27 DEL14 DEL53 DEL8 DEL25 DEL83 DEL42 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL52 DEL42 DEL22 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL9 DEL14 DEL59 DEL60 DEL42 DEL34 DEL27 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL25 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31