GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

+import org.apache.geode.redis.internal.Coder;
+import org.apache.geode.redis.internal.executor.RedisKeyInRegion;
-public class RedisStringInRegion implements RedisStringCommands {
-  private final Region<ByteArrayWrapper, RedisData> region;
+public class RedisStringInRegion extends RedisKeyInRegion implements RedisStringCommands {
-  @SuppressWarnings("unchecked")
-    this.region = region;
+    super(region);
-    RedisString redisString = checkType(region.get(key));
+    RedisString redisString = getRedisString(key);
-    RedisString redisString = checkType(region.get(key));
+    RedisString redisString = getRedisString(key);
-      if (options.getExists().equals(SetOptions.Exists.NX)) {
-        return setnx(key, value);
+      if (options.isNX()) {
+        return setnx(key, value, options);
-      if (options.getExists().equals(SetOptions.Exists.XX) && region.get(key) == null) {
+      if (options.isXX() && getRedisData(key) == null) {
-    RedisString redisString = checkTypeIsString(region.get(key));
+    RedisString redisString = getRedisStringForSet(key);
+    if (redisString == null) {
+      redisString = new RedisString(value);
+    } else {
+      redisString.set(value);
+    }
+    handleSetExpiration(redisString, options);
+    region.put(key, redisString);
+    return true;
+  }
+
+  @Override
+  public long incr(ByteArrayWrapper key) {
+    RedisString redisString = getRedisString(key);
+
+    if (redisString == null) {
+      byte[] newValue = {Coder.NUMBER_1_BYTE};
+      redisString = new RedisString(new ByteArrayWrapper(newValue));
+      region.put(key, redisString);
+      return 1;
+    }
+
+    return redisString.incr(region, key);
+  }
+
+  @Override
+  public long decr(ByteArrayWrapper key) {
+    RedisString redisString = getRedisString(key);
+
+    if (redisString == null) {
+      redisString = new RedisString(new ByteArrayWrapper(Coder.stringToBytes("-1")));
+      region.put(key, redisString);
+      return -1;
+    }
+
+    return redisString.decr(region, key);
+  }
+
+  @Override
+  public ByteArrayWrapper getset(ByteArrayWrapper key, ByteArrayWrapper value) {
+    ByteArrayWrapper result = null;
+    RedisString redisString = getRedisString(key);
+      result = redisString.get();
+      redisString.persistNoDelta();
+    return result;
+  }
+
+  @Override
+  public long incrby(ByteArrayWrapper key, long increment) {
+    RedisString redisString = getRedisString(key);
+
+    if (redisString == null) {
+      byte[] newValue = Coder.stringToBytes(Long.toString(increment));
+      redisString = new RedisString(new ByteArrayWrapper(newValue));
+      region.put(key, redisString);
+      return increment;
+    }
+
+    return redisString.incrby(region, key, increment);
+  }
+
+  @Override
+  public long decrby(ByteArrayWrapper key, long decrement) {
+    RedisString redisString = getRedisString(key);
+
+    if (redisString == null) {
+      byte[] newValue = Coder.stringToBytes(Long.toString(-decrement));
+      redisString = new RedisString(new ByteArrayWrapper(newValue));
+      region.put(key, redisString);
+      return -decrement;
+    }
+
+    return redisString.decrby(region, key, decrement);
+  }
+
+  private boolean setnx(ByteArrayWrapper key, ByteArrayWrapper value, SetOptions options) {
+    if (getRedisData(key) != null) {
+      return false;
+    }
+    RedisString redisString = new RedisString(value);
+    handleSetExpiration(redisString, options);
+    region.put(key, redisString);
-  private boolean setnx(ByteArrayWrapper key, ByteArrayWrapper value) {
-    if (region.get(key) != null) {
-      return false;
+  private void handleSetExpiration(RedisString redisString, SetOptions options) {
+    long setExpiration = options == null ? 0L : options.getExpiration();
+    if (setExpiration != 0) {
+      long now = System.currentTimeMillis();
+      long timestamp = now + setExpiration;
+      redisString.setExpirationTimestampNoDelta(timestamp);
+    } else if (options == null || !options.isKeepTTL()) {
+      redisString.persistNoDelta();
-    region.put(key, new RedisString(value));
-    return true;
-  private RedisString checkTypeIsString(RedisData redisData) {
-    if (redisData == null || redisData.getType() != REDIS_STRING) {
-      return null;
-    }
-    return (RedisString) redisData;
+  private RedisString getRedisString(ByteArrayWrapper key) {
+    return checkType(getRedisData(key));
-  private RedisString checkExists(RedisData redisData) {
-    if (redisData == null) {
+  private RedisString getRedisStringForSet(ByteArrayWrapper key) {
+    RedisData redisData = getRedisData(key);
+    if (redisData == null || redisData.getType() != REDIS_STRING) {

INS26 INS26 MOV31 INS40 INS40 INS43 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 MOV42 INS78 MOV83 MOV39 MOV42 INS44 INS44 MOV44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 MOV78 INS83 MOV43 INS42 MOV44 MOV44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS44 INS39 UPD42 INS44 INS83 MOV43 INS42 INS44 INS8 UPD42 INS46 INS42 INS43 INS42 INS43 INS42 MOV25 INS60 INS25 INS21 INS21 MOV41 INS42 INS43 INS42 INS60 MOV25 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS60 INS60 INS25 INS41 INS42 INS43 INS42 INS39 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS39 INS42 INS60 INS25 INS41 INS43 INS42 INS60 INS21 INS21 UPD43 UPD42 INS43 INS42 INS60 INS25 INS43 INS42 INS41 UPD43 UPD42 INS60 INS42 INS42 INS42 MOV43 INS59 INS27 INS8 MOV8 INS32 INS32 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS43 INS59 MOV27 MOV8 INS8 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS43 INS59 INS27 INS8 INS32 INS42 INS43 INS59 INS32 INS32 UPD42 INS42 INS39 INS59 INS27 INS8 INS25 INS42 INS32 UPD42 INS43 INS59 INS32 INS32 MOV42 INS32 INS42 INS33 MOV21 INS42 INS42 INS42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 MOV21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS21 INS21 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS60 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS34 INS60 INS60 INS21 INS27 INS8 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS42 INS7 INS42 INS42 INS5 INS59 INS7 INS32 INS34 INS42 INS42 INS7 INS38 INS42 INS42 INS7 INS32 INS32 INS32 INS42 INS42 INS5 INS59 INS7 INS32 INS42 INS42 INS42 INS5 INS59 INS7 INS32 INS38 UPD42 INS43 INS42 INS27 INS34 INS32 INS39 INS59 INS39 INS59 INS32 INS27 INS38 INS21 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS32 INS42 MOV14 INS39 INS85 INS42 INS4 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS34 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS39 INS85 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV33 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS42 INS33 INS32 INS32 MOV42 UPD42 MOV42 INS40 INS43 INS14 INS43 INS14 INS42 INS42 INS42 INS42 INS32 INS43 INS14 INS42 INS42 INS32 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS43 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS38 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS42 DEL83 DEL83 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL42 DEL45 DEL79 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL42 DEL40 DEL32 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL59 DEL60 DEL8 DEL31 DEL42 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11 DEL41