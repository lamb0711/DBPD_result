GEODE-6365: Fixed DestroyMappingCommand bug for default 'cluster' group (#3242)

Refactored DestroyMappingCommand to fix issue causing commands run
without group parameter specified to run on all members, which resulted
in mappings being removed from servers in all groups, without updating
cluster config


Authored-by: Benjamin Ross <bross@pivotal.io>

+import org.apache.geode.distributed.ConfigurationPersistenceService;
-    // input
-    // action
-    List<CliFunctionResult> results =
-        executeAndGetFunctionResult(new DestroyMappingFunction(), regionName, targetMembers);
+    try {
+      boolean isMappingInClusterConfig = false;
+      ConfigurationPersistenceService configService = checkForClusterConfiguration();
-    ResultModel result =
-        ResultModel.createMemberStatusResult(results, EXPERIMENTAL, null, false, true);
-    result.setConfigObject(regionName);
-    return result;
+      if (groups == null) {
+        groups = new String[] {ConfigurationPersistenceService.CLUSTER_CONFIG};
+      }
+
+      for (String group : groups) {
+        CacheConfig cacheConfig = getCacheConfig(configService, group);
+        if (cacheConfig != null) {
+          for (RegionConfig regionConfig : cacheConfig.getRegions()) {
+            if (regionConfig != null && !MappingCommandUtils
+                .getMappingsFromRegionConfig(cacheConfig, regionConfig, group).isEmpty()) {
+              isMappingInClusterConfig = true;
+            }
+          }
+        }
+      }
+
+      if (!isMappingInClusterConfig) {
+        return ResultModel.createError("Mapping not found in cluster configuration.");
+      }
+
+      ResultModel result;
+      if (targetMembers != null) {
+        List<CliFunctionResult> results =
+            executeAndGetFunctionResult(new DestroyMappingFunction(), regionName, targetMembers);
+        result =
+            ResultModel.createMemberStatusResult(results, EXPERIMENTAL, null, false, true);
+      } else {
+        result = ResultModel.createInfo(
+            "No members found in specified server groups containing a mapping for region \""
+                + regionName + "\"");
+      }
+
+      result.setConfigObject(regionName);
+      return result;
+    } catch (PreconditionException ex) {
+      return ResultModel.createError(ex.getMessage());
+    }
+
+
+  private CacheConfig getCacheConfig(ConfigurationPersistenceService configService, String group)
+      throws PreconditionException {
+    CacheConfig result = configService.getCacheConfig(group);
+    return result;
+  }
+
+  protected ConfigurationPersistenceService checkForClusterConfiguration()
+      throws PreconditionException {
+    ConfigurationPersistenceService result = getConfigurationPersistenceService();
+    if (result == null) {
+      throw new PreconditionException("Cluster Configuration must be enabled.");
+    }
+    return result;
+  }
+

INS26 INS40 INS31 INS31 INS8 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS83 INS43 INS42 INS43 INS8 MOV25 MOV60 INS54 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS41 INS42 INS42 INS60 INS25 INS41 INS8 INS12 INS42 INS42 INS43 INS59 INS42 INS43 INS59 INS27 INS8 INS42 INS60 INS60 INS25 INS70 INS25 INS60 INS25 MOV21 MOV41 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS53 INS39 INS59 INS43 INS59 INS27 INS8 INS44 INS42 INS8 INS38 INS8 MOV43 INS59 INS27 MOV8 INS8 INS43 INS42 INS41 INS42 INS42 INS42 INS42 INS14 INS42 INS9 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS42 INS60 INS25 INS42 INS41 INS42 INS42 INS33 INS21 INS21 INS42 INS32 INS43 INS45 INS42 INS7 INS42 INS43 INS59 INS27 INS8 INS32 INS7 INS7 INS42 INS42 INS32 INS42 INS42 INS3 INS42 INS42 INS32 INS42 INS33 INS70 INS42 INS42 INS45 INS42 MOV32 INS42 INS32 INS42 INS42 INS5 INS4 INS42 INS42 INS42 INS44 INS32 INS8 INS42 INS42 INS27 INS43 INS85 INS40 INS43 INS42 INS42 INS42 INS25 INS45 INS42 INS45 INS42 INS42 INS27 INS8 INS27 INS38 INS21 INS42 INS33 INS32 INS7 INS32 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60