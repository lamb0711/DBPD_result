GEODE-7704: Replacing inheritance of MemberIdentifierImpl with delagation (#4636)

* Deduplicate fields betweeen MemberIdentifierImpl and GMSMemberData

Moving all state down into GMSMemberData and removing duplicate fields
isPartial and versionObject. GMSMemberData now has all of the state of a
member.

* Delegate rather than inherit InternalDistributedMember

Delegating to MemberIdentifierImpl, rather than inheriting from it.

* Delegate to MemberIdentifier, rather than MemberIdentifierImpl

Having InternalDistributedMember delegate to MemberIdentifier, rather than
MemberIdentifierImpl, so that we are not relying on the concrete class and all
required methods are part of the interface. As a result, adding a number of
additional methods to the MemberIdentifier interface.

* Removing uses of getMemberData

Removing uses of getMemberData and adding methods to MemberIdentifier that
delegate to memberData.

* Hiding MemberIdentiferImpl

Using MemberIdentifier everywhere insteand of MemberIdentiferImpl. Still need to
move MemberIdentiferImpl to an internal package.

* Making PMD happy

Marking the MemberIdentifierFactory as immutable.

* Fixing NPE in getGroups

The MemberIdentifierImpl.getGroups needs to check for a null array. Places that
used to call getMemberData.getGroups were throwing an NPE.

* Fixing a test that used MemberIdentifierFactoryImpl

This factory is not going to play well with other parts of the test that are
generating InternalDistributedMembers.

* Fixing AnalyzeSerializablesJUnitTest

InternalDistributedMember now has new serialization methods that delegate to
the methods that it previously was just inheriting.

* Fixing a unit test failure due to mocking MemberData

InternalDistributedMemberTest was mocking the underlying MemberData and
changing state on the InternalDistributedMember. Now that all state is
delegated to the MemberData, this test was failing because the mock was not
reflecting the state changes.

Co-authored-by: Ernie Burghardt <eburghardt@pivotal.io>

+import org.apache.geode.internal.serialization.UnsupportedSerializationVersionException;
+  /** serialization bit flag */
+  public static final int NPD_ENABLED_BIT = 0x1;
+  /** serialization bit flag */
+  public static final int COORD_ENABLED_BIT = 0x2;
+  /** partial ID bit flag */
+  public static final int PARTIAL_ID_BIT = 0x4;
+  /** product version bit flag */
+  public static final int VERSION_BIT = 0x8;
+
-  private short versionOrdinal = Version.getCurrentVersion().ordinal();
+  /**
+   * Unique tag (such as randomly generated bytes) to help enforce uniqueness. Note: this should be
+   * displayable.
+   */
+  private String uniqueTag = null;
+  private transient Version versionObj = Version.CURRENT;
+  /**
+   * whether this is a partial member ID (without roles, durable attributes). We use partial IDs in
+   * EventID objects to reduce their size. It would be better to use canonical IDs but there is
+   * currently no central mechanism that would allow that for both server and client identifiers
+   */
-      long msbs, long lsbs, byte memberWeight) {
+      long msbs, long lsbs, byte memberWeight, boolean isPartial, String uniqueTag) {
-    this.versionOrdinal = version;
+    setVersionObject(version);
+    this.isPartial = isPartial;
+    this.uniqueTag = uniqueTag;
+  }
+
+  private void setVersionObject(short versionOrdinal) {
+    try {
+      this.versionObj = Version.fromOrdinal(versionOrdinal);
+    } catch (UnsupportedSerializationVersionException e) {
+      this.versionObj = Version.CURRENT;
+    }
-    this.versionOrdinal = version;
+    setVersionObject(version);
-    this.versionOrdinal = other.versionOrdinal;
+    this.versionObj = other.versionObj;
+    this.isPartial = other.isPartial;
+    this.uniqueTag = other.uniqueTag;
-    return this.versionOrdinal;
+    return this.versionObj.ordinal();
+  }
+
+  @Override
+  public Version getVersion() {
+    return versionObj;
+  }
+
+  @Override
+  public String getUniqueTag() {
+    return uniqueTag;
-    this.versionOrdinal = versionOrdinal;
+    setVersionObject(versionOrdinal);
-    if (versionOrdinal != Version.CURRENT_ORDINAL) {
-      sb.append(";version=").append(versionOrdinal);
+    if (getVersionOrdinal() != Version.CURRENT_ORDINAL) {
+      sb.append(";version=").append(getVersionOrdinal());
-    this.versionOrdinal = v.ordinal();
+    this.versionObj = v;
-  static final int NPD_ENABLED_BIT = 0x01;
-  static final int PREFERRED_FOR_COORD_BIT = 0x02;
-  static final int VERSION_BIT = 0x8;
-    Version.writeOrdinal(out, this.versionOrdinal, true);
+    Version.writeOrdinal(out, getVersionOrdinal(), true);
-      flags |= PREFERRED_FOR_COORD_BIT;
+      flags |= COORD_ENABLED_BIT;
-    this.versionOrdinal = Version.readOrdinal(in);
+    setVersionObject(Version.readOrdinal(in));
-    this.preferredForCoordinator = (flags & PREFERRED_FOR_COORD_BIT) != 0;
+    this.preferredForCoordinator = (flags & COORD_ENABLED_BIT) != 0;
+
+  @Override
+  public void setIsPartial(boolean value) {
+    isPartial = value;
+  }
+
+  @Override
+  public void setUniqueTag(String tag) {
+    uniqueTag = tag;
+  }

INS26 INS40 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS29 UPD83 MOV83 INS83 INS83 UPD39 MOV39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS83 INS39 MOV59 INS29 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS29 INS44 INS44 MOV21 INS83 INS39 INS42 INS44 INS8 MOV78 MOV78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS65 UPD42 MOV42 INS34 INS65 INS42 INS34 INS65 INS42 INS34 INS65 INS65 INS42 INS42 INS33 INS42 INS42 INS40 INS65 INS39 INS42 INS43 INS42 INS21 INS21 INS39 INS42 INS54 INS21 INS21 INS42 INS41 INS42 INS42 INS41 INS42 INS42 INS39 INS42 INS21 INS42 INS43 INS42 INS21 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS32 INS7 INS8 INS12 INS32 INS7 INS7 INS32 INS42 INS42 INS32 INS32 INS7 INS42 INS7 INS42 INS42 UPD42 INS22 INS42 INS21 INS44 INS8 INS42 INS42 UPD40 INS22 INS40 INS22 INS40 INS22 INS42 INS42 INS42 INS32 INS42 INS32 INS42 MOV32 INS42 INS42 INS42 INS42 UPD42 INS52 INS42 INS7 INS43 INS42 INS21 UPD42 INS52 INS42 INS52 INS42 MOV52 UPD42 MOV42 INS42 UPD42 INS42 UPD42 INS22 INS32 INS42 INS7 INS32 INS52 INS42 INS42 INS42 INS42 INS22 INS40 UPD42 MOV42 UPD42 INS52 INS42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL22 DEL52 DEL42 DEL22 DEL42 DEL7 DEL42 DEL42 DEL42 DEL32 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL23 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7