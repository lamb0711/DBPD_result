Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A message that is sent to a given collection of managers and then
- * awaits replies.  It is used by some tests to flush the unordered communication
- * channels after no-ack tests.<p>
- * On the receiving end, the message will wait for the high priority queue
- * to drain before sending a reply.  This guarantees that all high priority
- * messages have been received and applied to the cache.  Their reply messages
- * may not necessarily have been sent back or processed (if they have any).
+ * A message that is sent to a given collection of managers and then awaits replies. It is used by
+ * some tests to flush the unordered communication channels after no-ack tests.
+ * <p>
+ * On the receiving end, the message will wait for the high priority queue to drain before sending a
+ * reply. This guarantees that all high priority messages have been received and applied to the
+ * cache. Their reply messages may not necessarily have been sent back or processed (if they have
+ * any).
-public final class HighPriorityAckedMessage extends HighPriorityDistributionMessage implements MessageWithReply {
+public final class HighPriorityAckedMessage extends HighPriorityDistributionMessage
+    implements MessageWithReply {
-  
+
-  
+
-  
+
-      this.originDm = (DistributionManager)ds.getDistributionManager();
+      this.originDm = (DistributionManager) ds.getDistributionManager();
-  
+
-   * Request stack dumps.  This does not wait for responses.  If useNative is
-   * true we attempt to use OSProcess native code and null is returned.
-   * Otherwise we use a thread mx bean to generate the traces.  If returnStacks
-   * is true the stacks are not logged but are returned in a map in gzipped
+   * Request stack dumps. This does not wait for responses. If useNative is true we attempt to use
+   * OSProcess native code and null is returned. Otherwise we use a thread mx bean to generate the
+   * traces. If returnStacks is true the stacks are not logged but are returned in a map in gzipped
-  public Map<InternalDistributedMember, byte[]> dumpStacks(Set recipients, @SuppressWarnings("hiding") boolean useNative, boolean returnStacks) {
+  public Map<InternalDistributedMember, byte[]> dumpStacks(Set recipients,
+      @SuppressWarnings("hiding") boolean useNative, boolean returnStacks) {
-  
+
+   * 
-  public void send(Set recipients, boolean multicast)
-    throws InterruptedException, ReplyException
-  {
+  public void send(Set recipients, boolean multicast) throws InterruptedException, ReplyException {
-    
+
-    
+
-  
+
-  
+
-  @Override  
+  @Override
-   * Adds the distribution manager that is started up to the current
-   * DM's list of members.
+   * Adds the distribution manager that is started up to the current DM's list of members.
-  @Override  
+  @Override
-    case DRAIN_POOL:
-      Assert.assertTrue(this.id != null);
-      // wait 10 seconds for the high priority queue to drain
-      long endTime = System.currentTimeMillis() + 10000;
-      ThreadPoolExecutor pool = (ThreadPoolExecutor)dm.getHighPriorityThreadPool();
-      while (pool.getActiveCount() > 1 && System.currentTimeMillis() < endTime) {
-        boolean interrupted = Thread.interrupted();
-        try { 
-          Thread.sleep(500); }
-        catch (InterruptedException ie) {
-          interrupted = true;
-          dm.getCancelCriterion().checkCancelInProgress(ie);
-          // if interrupted, we must be shutting down
-          return;
+      case DRAIN_POOL:
+        Assert.assertTrue(this.id != null);
+        // wait 10 seconds for the high priority queue to drain
+        long endTime = System.currentTimeMillis() + 10000;
+        ThreadPoolExecutor pool = (ThreadPoolExecutor) dm.getHighPriorityThreadPool();
+        while (pool.getActiveCount() > 1 && System.currentTimeMillis() < endTime) {
+          boolean interrupted = Thread.interrupted();
+          try {
+            Thread.sleep(500);
+          } catch (InterruptedException ie) {
+            interrupted = true;
+            dm.getCancelCriterion().checkCancelInProgress(ie);
+            // if interrupted, we must be shutting down
+            return;
+          } finally {
+            if (interrupted)
+              Thread.currentThread().interrupt();
+          }
-        finally {
-          if (interrupted) Thread.currentThread().interrupt();
+        if (pool.getActiveCount() > 1) {
+
+          logger.warn(LocalizedMessage.create(
+              LocalizedStrings.HighPriorityAckedMessage_0_THERE_ARE_STILL_1_OTHER_THREADS_ACTIVE_IN_THE_HIGH_PRIORITY_THREAD_POOL,
+              new Object[] {this, Integer.valueOf(pool.getActiveCount() - 1)}));
-      }
-      if (pool.getActiveCount() > 1) {
-        
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.HighPriorityAckedMessage_0_THERE_ARE_STILL_1_OTHER_THREADS_ACTIVE_IN_THE_HIGH_PRIORITY_THREAD_POOL,
-            new Object[] {this, Integer.valueOf(pool.getActiveCount()-1)}));
-      }
-      ReplyMessage.send(getSender(), processorId, null, dm);
-      break;
-    case DUMP_STACK:
-      if (this.processorId > 0) {
-        try {
-          byte[] zippedStacks = OSProcess.zipStacks();
-          ReplyMessage.send(getSender(), processorId, zippedStacks, dm);
-        } catch (IOException e) {
-          ReplyMessage.send(getSender(), processorId, new ReplyException(e), dm);
+        ReplyMessage.send(getSender(), processorId, null, dm);
+        break;
+      case DUMP_STACK:
+        if (this.processorId > 0) {
+          try {
+            byte[] zippedStacks = OSProcess.zipStacks();
+            ReplyMessage.send(getSender(), processorId, zippedStacks, dm);
+          } catch (IOException e) {
+            ReplyMessage.send(getSender(), processorId, new ReplyException(e), dm);
+          }
+        } else {
+          OSProcess.printStacks(0, this.useNative);
-      } else {
-        OSProcess.printStacks(0, this.useNative);
-      }
-  @Override  
+  @Override
-  @Override  
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  @Override
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  @Override  
+  @Override

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66