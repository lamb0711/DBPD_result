Merge branch 'release/1.0.0-incubating.M3'

-import com.gemstone.gemfire.internal.cache.KeyWithRegionContext;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
- * @since 5.0
+ * @since GemFire 5.0
-   * the receiver. Distinguishes between Deltas which need to be eagerly
-   * deserialized (DESERIALIZATION_POLICY_EAGER), a non-byte[] value that was
+   * the receiver. Distinguishes between a non-byte[] value that was
-  private Object expectedOldValue; // TODO OFFHEAP make it a cd
+  private Object expectedOldValue;
-  /** whether this operation should fetch oldValue from HDFS*/
-  private transient boolean fetchFromHDFS;
-
-  private transient boolean isPutDML;
-  
-  //using the left most bit for IS_PUT_DML, the last available bit
-  protected static final short IS_PUT_DML = (short) (HAS_VERSION_TAG << 1);
-  protected static final int FETCH_FROM_HDFS = getNextByteMask(HAS_CALLBACKARG);  
-      if (CachedDeserializableFactory.preferObject() || event.hasDelta()) {
-        this.deserializationPolicy = DistributedCacheOperation.DESERIALIZATION_POLICY_EAGER;
-      } else {
-        this.deserializationPolicy = DistributedCacheOperation.DESERIALIZATION_POLICY_LAZY;
-      }
+      this.deserializationPolicy = DistributedCacheOperation.DESERIALIZATION_POLICY_LAZY;
-  /** create a new EntryEvent to be used in notifying listeners, bridge servers, etc. */
+  /** create a new EntryEvent to be used in notifying listeners, bridge servers, etc.
+   * Caller must release result if it is != to sourceEvent
+   */
+  @Retained
-    if ((extraFlags & FETCH_FROM_HDFS) != 0) {
-      this.fetchFromHDFS = true;
-    }
-      // for eager deserialization avoid extra byte array serialization
-      if (this.deserializationPolicy ==
-          DistributedCacheOperation.DESERIALIZATION_POLICY_EAGER) {
-        setValObj(DataSerializer.readObject(in));
-      }
-      else {
-        setValBytes(DataSerializer.readByteArray(in));
-      }
+      setValBytes(DataSerializer.readByteArray(in));
-    if ((flags & IS_PUT_DML) != 0) {
-      this.isPutDML = true;
-    }
-    
-    if (this.event.isFetchFromHDFS()) extraFlags |= FETCH_FROM_HDFS;
-      // TODO OFFHEAP MERGE: cache serialized blob in event
-    if (this.event.isPutDML()) s |= IS_PUT_DML;
-    if (r.keyRequiresRegionContext()) {
-      ((KeyWithRegionContext)this.key).setRegionContext(r);
-    }
-    final EntryEventImpl ev = EntryEventImpl.create(
+    @Released final EntryEventImpl ev = EntryEventImpl.create(
-	ev.setFetchFromHDFS(this.fetchFromHDFS);
-    ev.setPutDML(this.isPutDML);
-        case DistributedCacheOperation.DESERIALIZATION_POLICY_EAGER:
-          // new value is a Delta
-          ev.setNewValue(this.valObj); // sets the delta field
-          break;
-      EntryEventImpl e2 = createListenerEvent(ev, r, dm.getDistributionManagerId());
+      @Released EntryEventImpl e2 = createListenerEvent(ev, r, dm.getDistributionManagerId());
-   * @since 5.1
+   * @since GemFire 5.1

MOV26 INS26 UPD40 INS40 INS78 UPD66 INS42 UPD66 MOV8 UPD66 INS66 INS78 UPD66 MOV21 MOV21 INS42 INS78 INS42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL34 DEL27 DEL36 DEL11 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL8 DEL25 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL25 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL25 DEL42 DEL42 DEL32 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL40 DEL42 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL10 DEL49