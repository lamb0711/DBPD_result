GEODE-1495: Changes are made to remove the cached destroyed token/events from the CQ.

The CQEvents as seen by CQs are cached in order to avoid applying CQ queries on old values.

In case of a destory CQEvent, the CQEvents are marked with destroy tokens and removed from
the cache after the CQEvent is added to HAQueue.
This works fine for the CQs registered locally, but for the CQs registered on peer server, the
CQs weren't removed from the cache, which resulted in generating wrong CQEvent for subsequent
operation.
This change removes the destroy CQevent from the cache after the CQEvent is distributed to
peer server.

+import com.gemstone.gemfire.cache.query.internal.cq.ServerCQ;
+import com.gemstone.gemfire.internal.cache.CacheDistributionAdvisor.CacheProfile;
+import com.gemstone.gemfire.internal.cache.tier.MessageType;
+      if (region.isUsedForPartitionedRegionBucket() && filterRouting != null) {
+        removeDestroyTokensFromCqResultKeys(filterRouting);
+      }
+
+
+  /**
+   * Cleanup destroyed events in CQ result cache for remote CQs.
+   * While maintaining the CQ results key caching. the destroy event
+   * keys are marked as destroyed instead of removing them, this is
+   * to take care, arrival of duplicate events. The key marked as
+   * destroyed are  removed after the event is placed in clients 
+   * HAQueue or distributed to the peers.
+   *
+   * This is similar to CacheClientNotifier.removeDestroyTokensFromCqResultKeys()
+   * where the destroyed events for local CQs are handled.
+   */
+  private void removeDestroyTokensFromCqResultKeys(FilterRoutingInfo filterRouting) {
+    for (InternalDistributedMember m : filterRouting.getMembers()) {
+      FilterInfo filterInfo = filterRouting.getFilterInfo(m);
+      if (filterInfo.getCQs() == null) {
+        continue;
+      }
+
+      CacheProfile cf = (CacheProfile) ((BucketRegion)getRegion()).getPartitionedRegion()
+          .getCacheDistributionAdvisor().getProfile(m);
+
+      if (cf == null || cf.filterProfile == null || cf.filterProfile.isLocalProfile() 
+          || cf.filterProfile.getCqMap().isEmpty()) {
+        continue;
+      }
+
+
+      for (Object value : cf.filterProfile.getCqMap().values()) {
+        ServerCQ cq = (ServerCQ)value;
+
+        for (Map.Entry<Long, Integer> e: filterInfo.getCQs().entrySet()) {
+          Long cqID = e.getKey();
+          // For the CQs satisfying the event with destroy CQEvent, remove
+          // the entry form CQ cache.
+          if (cq.getFilterID() == cqID && (e.getValue().equals(Integer.valueOf(
+              MessageType.LOCAL_DESTROY)))) {
+            cq.removeFromCqResultKeys(((EntryEventImpl)event).getKey(), true);
+          }
+        }
+      }
+    }
+  }
+
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS29 INS83 INS39 INS42 INS44 INS8 INS65 INS43 INS42 INS70 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS44 INS32 INS8 INS25 INS43 INS42 INS42 INS42 INS60 INS25 INS60 INS25 INS70 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS44 INS32 INS8 INS32 INS27 INS21 INS42 INS42 INS32 INS32 INS33 INS18 INS42 INS42 INS11 INS27 INS32 INS18 INS43 INS42 INS32 INS42 INS60 INS70 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS27 INS32 INS32 INS42 INS42 INS40 INS42 INS43 INS59 INS44 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS27 INS27 INS40 INS42 INS40 INS42 INS42 INS42 INS11 INS74 INS42 INS32 INS42 INS60 INS25 INS32 INS42 INS42 INS33 INS40 INS33 INS43 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS59 INS27 INS8 INS36 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS27 INS36 INS21 INS11 INS42 INS42 INS32 INS42 INS32 INS32 INS43 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS36 INS42 INS11 INS43 INS42 INS42