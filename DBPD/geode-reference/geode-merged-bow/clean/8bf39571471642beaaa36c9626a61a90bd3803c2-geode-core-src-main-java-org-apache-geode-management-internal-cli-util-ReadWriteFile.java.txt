Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    String result = readWriteFile(args[0], args[1], args[2], args[3], args[4],
-        args[5]);
+    String result = readWriteFile(args[0], args[1], args[2], args[3], args[4], args[5]);
-  public static String readWriteFile(String logFileName, String logToBeWritten,
-      String logLevel, String onlyLogLevel, String startTime, String endTime) {
+  public static String readWriteFile(String logFileName, String logToBeWritten, String logLevel,
+      String onlyLogLevel, String startTime, String endTime) {
-      if(logFileNameFile.canRead() == false){
-        return ("Cannot read logFileName="+logFileName);
+      if (logFileNameFile.canRead() == false) {
+        return ("Cannot read logFileName=" + logFileName);
-      input = new BufferedReader(new FileReader(logFileName));      
+      input = new BufferedReader(new FileReader(logFileName));
-        }        
+        }
-      }     
+      }
-      while ( input.ready() == true && (line = input.readLine()) != null ) {
-        if(new File(logFileName).canRead() == false ){
-          return ("Cannot read logFileName=" + logFileName); 
+      while (input.ready() == true && (line = input.readLine()) != null) {
+        if (new File(logFileName).canRead() == false) {
+          return ("Cannot read logFileName=" + logFileName);
-        if (line.startsWith("[")) {          
+        if (line.startsWith("[")) {
-          for(int i=line.indexOf("[info ")+6; i < line.length(); i++ ){
-            if(line.charAt(i) == ' ' ){
+          for (int i = line.indexOf("[info ") + 6; i < line.length(); i++) {
+            if (line.charAt(i) == ' ') {
-            if(spaceCounter > 2){
+            if (spaceCounter > 2) {
-            stTime = stTime+line.charAt(i);
+            stTime = stTime + line.charAt(i);
-          if ((fileStartTime.getTime() >= userStartTime && fileStartTime
-              .getTime() <= userEndTime)
-              || (fileEndTime.getTime() >= userStartTime && fileEndTime
-                  .getTime() <= userEndTime)
-              || (fileStartTime.getTime() >= userStartTime
-                  && fileStartTime.getTime() <= userEndTime
-                  && fileEndTime.getTime() >= userStartTime && fileEndTime
-                  .getTime() <= userEndTime)) {
+          if ((fileStartTime.getTime() >= userStartTime && fileStartTime.getTime() <= userEndTime)
+              || (fileEndTime.getTime() >= userStartTime && fileEndTime.getTime() <= userEndTime)
+              || (fileStartTime.getTime() >= userStartTime && fileStartTime.getTime() <= userEndTime
+                  && fileEndTime.getTime() >= userStartTime
+                  && fileEndTime.getTime() <= userEndTime)) {
-          validateLogLevel = checkLogLevel(line, logLevel, logLevels,
-              foundLogLevelTag);
+          validateLogLevel = checkLogLevel(line, logLevel, logLevels, foundLogLevelTag);
-  static boolean checkLogLevel(String line, String logLevel,
-      List<String> logLevels, boolean foundLogLevelTag) {
+  static boolean checkLogLevel(String line, String logLevel, List<String> logLevels,
+      boolean foundLogLevelTag) {
-              boolean flag = line.substring(indexFrom + 1, indexTo)
-                  .toLowerCase().contains(permittedLogLevel);             
+              boolean flag =
+                  line.substring(indexFrom + 1, indexTo).toLowerCase().contains(permittedLogLevel);

