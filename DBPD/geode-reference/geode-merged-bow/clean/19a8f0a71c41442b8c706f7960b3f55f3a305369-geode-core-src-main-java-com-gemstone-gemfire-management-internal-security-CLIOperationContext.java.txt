GEODE-17: WIP adding JMX security

-import com.gemstone.gemfire.internal.logging.LogService;
+import com.gemstone.gemfire.GemFireConfigException;
+import com.gemstone.gemfire.management.internal.cli.i18n.CliStrings;
+import static com.gemstone.gemfire.management.internal.security.ResourceConstants.*;
-
+/**
+ * It represents command being executed and all passed options and option-values.
+ * ResourceOpCode returned by CLIOperationContext is retrieved from ResourceOperation
+ * annotation on the target command
+ *
+ * @author tushark
+ * @since 9.0
+ */
-		code = OperationCode.RESOURCE;
-		this.resourceCode = findResourceCode(parseResult.getCommandName()); //need to add this to ParseResult 
+    this.resourceCode = findResourceCode(parseResult.getCommandName());
+    this.code = findOperationCode(parseResult.getCommandName());
+  }
+
+  /**
+   * This method returns OperationCode for command. Some commands perform data
+   * operations, for such commands OperationCode returned is not RESOURCE but
+   * corresponding data operation as defined in OperationCode
+   *
+   * @param commandName
+   * @return OperationCode
+   */
+  private OperationCode findOperationCode(String commandName) {
+
+    if(CliStrings.GET.equals(commandName) || CliStrings.LOCATE_ENTRY.equals(commandName))
+      return OperationCode.GET;
+
+    if(CliStrings.PUT.equals(commandName))
+      return OperationCode.PUT;
+
+    if(CliStrings.QUERY.equals(commandName))
+      return OperationCode.QUERY;
+
+    if (CliStrings.REMOVE.equals(commandName)) {
+      if (commandOptions.containsKey(CliStrings.REMOVE__ALL)
+          && "true".equals(commandOptions.get(CliStrings.REMOVE__ALL))) {
+        return OperationCode.REMOVEALL;
+      } else
+        return OperationCode.DESTROY;
+    }
+
+    if(CliStrings.CLOSE_DURABLE_CQS.equals(commandName)) {
+      return OperationCode.CLOSE_CQ;
+    }
+
+    if(CliStrings.CREATE_REGION.equals(commandName)) {
+      return OperationCode.REGION_CREATE;
+    }
+
+    if(CliStrings.DESTROY_REGION.equals(commandName)) {
+      return OperationCode.REGION_DESTROY;
+    }
+
+    if(CliStrings.EXECUTE_FUNCTION.equals(commandName)) {
+      return OperationCode.EXECUTE_FUNCTION;
+    }
+
+    //"stop cq"
+    //"removeall",
+    //"get durable cqs",
+    return OperationCode.RESOURCE;
-	public static void registerCommand(CommandManager cmdManager, Method method, CommandTarget commandTarget){	  
-	  //Save command manager instance and create a local parser for parsing the commands
+	public static void registerCommand(CommandManager cmdManager, Method method, CommandTarget commandTarget){
-		ResourceOperationCode code = null;
+    ResourceOperationCode resourceOpCode = null;
-				code = ResourceOperationCode.parse(opString);
+        resourceOpCode = ResourceOperationCode.parse(opString);
-		if(code==null){
-			if(commandName.startsWith("describe") || commandName.startsWith("list") || commandName.startsWith("status")
-					|| commandName.startsWith("show")){
-				code = ResourceOperationCode.LIST_DS;
+    if(resourceOpCode==null){
+      if (commandName.startsWith(GETTER_DESCRIBE) || commandName.startsWith(GETTER_LIST)
+          || commandName.startsWith(GETTER_STATUS)) {
+        resourceOpCode = ResourceOperationCode.LIST_DS;
+
-		//TODO : Have map according to each resources
-		//TODO : How to save information for retrieving command Option map or region and serverGroup
-		
-		Resource targetedResource = null;		
-		if(op!=null){
-			targetedResource = op.resource();
+    if(resourceOpCode!=null) {
+      commandToCodeMapping.put(commandName, resourceOpCode);
-			targetedResource = Resource.DISTRIBUTED_SYSTEM;
-			//TODO : Add other resource and mbeans
-		}
-		
-		
-		LogService.getLogger().trace("#RegisterCommandSecurity : " + commandName + " code " + code + " op="+op);
-		
-		if(code!=null) {
-			commandToCodeMapping.put(commandName, code);
+      throw new GemFireConfigException(
+          "Error while configuring authorization for gfsh commands. No opCode defined for command " + commandName);
+

MOV26 INS26 INS26 INS40 UPD40 INS40 INS29 INS31 INS65 INS65 INS65 MOV21 INS29 INS83 INS43 INS42 INS44 INS8 INS66 INS66 INS66 INS66 INS66 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS41 INS25 INS66 INS66 INS66 INS42 INS66 INS42 INS27 INS41 INS32 INS41 INS32 INS41 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS40 MOV27 MOV8 INS8 INS22 INS32 INS32 INS32 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS40 INS40 INS42 INS42 INS25 INS40 INS42 INS42 INS41 INS40 INS42 INS42 INS41 INS40 INS42 INS42 INS41 INS40 INS42 INS42 INS41 UPD42 UPD42 UPD42 INS53 INS52 INS42 INS42 INS32 INS40 INS42 INS42 INS40 INS42 INS42 INS27 INS8 INS41 INS40 INS40 INS40 INS40 INS32 INS14 INS42 INS42 INS32 INS32 INS41 INS40 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS43 INS27 INS42 INS42 INS40 INS45 INS42 INS32 INS40 UPD42 INS42 INS42 INS42 INS42 UPD45 MOV45 MOV42 INS42 INS42 INS40 UPD42 DEL42 DEL40 DEL45 DEL45 DEL45 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL7 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL40 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25