Merge branch 'feature/GEODE-8' into develop

+import java.util.concurrent.TimeUnit;
+
+import com.gemstone.gemfire.distributed.AbstractLauncher.Status;
+
+  private final Float criticalOffHeapPercentage;
+  private final Float evictionOffHeapPercentage;
+  
+    this.criticalOffHeapPercentage = builder.getCriticalOffHeapPercentage();
+    this.evictionOffHeapPercentage = builder.getEvictionOffHeapPercentage();
+  public Float getCriticalOffHeapPercentage() {
+    return this.criticalOffHeapPercentage;
+  }
+  
+  public Float getEvictionOffHeapPercentage() {
+    return this.evictionOffHeapPercentage;
+  }
+  
+          if (this.criticalOffHeapPercentage != null) {
+            this.cache.getResourceManager().setCriticalOffHeapPercentage(getCriticalOffHeapPercentage());
+          } 
+          if (this.evictionOffHeapPercentage != null) {
+            this.cache.getResourceManager().setEvictionOffHeapPercentage(getEvictionOffHeapPercentage());
+          }
-      final ProcessController controller = new ProcessControllerFactory().createProcessController(this.controllerParameters, new File(getWorkingDirectory()), ProcessType.SERVER.getPidFileName());
+      final ProcessController controller = new ProcessControllerFactory().createProcessController(this.controllerParameters, new File(getWorkingDirectory()), ProcessType.SERVER.getPidFileName(), READ_PID_FILE_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
-//    catch (NoClassDefFoundError error) {
-//      if (isAttachAPINotFound(error)) {
-//        throw new AttachAPINotFoundException(LocalizedStrings.Launcher_ATTACH_API_NOT_FOUND_ERROR_MESSAGE
-//          .toLocalizedString(), error);
-//      }
-//
-//      throw error;
-//    }
-//    catch (MalformedObjectNameException e) {
-//      // JMX object name is bad
-//      return createNoResponseState(e, "Failed to communicate with server with process id " + parsedPid);
-//    } 
+    catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      return createNoResponseState(e, "Interrupted while trying to communicate with server with process id " + parsedPid);
+    } 
-      // TODO comment me
-      return createNoResponseState(e, "Failed to communicate with server with process id " + parsedPid);
-    } 
-    catch (InterruptedException e) {
-      // TODO comment me
-      // TODO comment me
-      final ProcessController controller = new ProcessControllerFactory().createProcessController(this.controllerParameters, new File(getWorkingDirectory()), ProcessType.SERVER.getPidFileName());
+      final ProcessController controller = new ProcessControllerFactory().createProcessController(this.controllerParameters, new File(getWorkingDirectory()), ProcessType.SERVER.getPidFileName(), READ_PID_FILE_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
-//    catch (NoClassDefFoundError error) {
-//      if (isAttachAPINotFound(error)) {
-//        throw new AttachAPINotFoundException(LocalizedStrings.Launcher_ATTACH_API_NOT_FOUND_ERROR_MESSAGE
-//          .toLocalizedString(), error);
-//      }
-//
-//      throw error;
-//    }
-//    catch (MalformedObjectNameException e) {
-//      // JMX object name is bad
-//      return createNoResponseState(e, "Failed to communicate with server with process id " + parsedPid);
-//    } 
+    catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      return createNoResponseState(e, "Interrupted while trying to communicate with server with process id " + parsedPid);
+    } 
+    catch (TimeoutException e) {
+      return createNoResponseState(e, "Timed out trying to find usable process id within file " + ProcessType.SERVER.getPidFileName() + " in " + getWorkingDirectory());
+    } 
-      // TODO comment me
-    //info(errorMessage);
-    return new ServerState(this, Status.NOT_RESPONDING); // TODO: use errorMessage
+    return new ServerState(this, Status.NOT_RESPONDING, errorMessage);
+    private Float criticalOffHeapPercentage;
+    private Float evictionOffHeapPercentage;
+    
+      parser.accepts(CliStrings.START_SERVER__CRITICAL_OFF_HEAP_PERCENTAGE).withRequiredArg().ofType(Float.class);
+      parser.accepts(CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE).withRequiredArg().ofType(Float.class);
-
+        
+        if (options.hasArgument(CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE)) {
+          setCriticalHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__CRITICAL__HEAP__PERCENTAGE))));
+        }
+        
+        if (options.hasArgument(CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE)) {
+          setEvictionHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__EVICTION__HEAP__PERCENTAGE))));
+        }
+        
+        if (options.hasArgument(CliStrings.START_SERVER__CRITICAL_OFF_HEAP_PERCENTAGE)) {
+          setCriticalOffHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__CRITICAL_OFF_HEAP_PERCENTAGE))));
+        }
+        
+        if (options.hasArgument(CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE)) {
+          setEvictionOffHeapPercentage(Float.parseFloat(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__EVICTION_OFF_HEAP_PERCENTAGE))));
+        }
+        
+        if (options.hasArgument(CliStrings.START_SERVER__MAX__CONNECTIONS)) {
+          setMaxConnections(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MAX__CONNECTIONS))));
+        }
+        
+        if (options.hasArgument(CliStrings.START_SERVER__MAX__MESSAGE__COUNT)) {
+          setMaxConnections(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MAX__MESSAGE__COUNT))));
+        }
+        
+        if (options.hasArgument(CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE)) {
+          setMaxConnections(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MESSAGE__TIME__TO__LIVE))));
+        }
+        
+        if (options.hasArgument(CliStrings.START_SERVER__SOCKET__BUFFER__SIZE)) {
+          setMaxConnections(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__SOCKET__BUFFER__SIZE))));
+        } 
+        
+        if (options.hasArgument(CliStrings.START_SERVER__MAX__THREADS)) {
+          setMaxThreads(Integer.parseInt(ObjectUtils.toString(options.valueOf(CliStrings.START_SERVER__MAX__THREADS))));
+        }
+        
+
+    public Float getCriticalOffHeapPercentage() {
+      return this.criticalOffHeapPercentage;
+    }
+    
+    public Builder setCriticalOffHeapPercentage(final Float criticalOffHeapPercentage) {
+      if (criticalOffHeapPercentage != null) {
+        if (criticalOffHeapPercentage < 0 || criticalOffHeapPercentage > 100.0f) {
+          throw new IllegalArgumentException(String.format("Critical off-heap percentage (%1$s) must be between 0 and 100!", criticalOffHeapPercentage));
+        }
+      }
+     this.criticalOffHeapPercentage = criticalOffHeapPercentage;
+     return this;
+    }
-
+    
+    public Float getEvictionOffHeapPercentage() {
+      return this.evictionOffHeapPercentage;
+    }
+    
+    public Builder setEvictionOffHeapPercentage(final Float evictionOffHeapPercentage) {
+      if (evictionOffHeapPercentage != null) {
+        if (evictionOffHeapPercentage < 0 || evictionOffHeapPercentage > 100.0f) {
+          throw new IllegalArgumentException(String.format("Eviction off-heap percentage (%1$s) must be between 0 and 100", evictionOffHeapPercentage));
+        }
+      }
+      this.evictionOffHeapPercentage = evictionOffHeapPercentage;
+      return this;
+    }
+    
+    public ServerState(final ServerLauncher launcher, final Status status, final String errorMessage) {
+      this(status, // status
+          errorMessage, // statusMessage
+          System.currentTimeMillis(), // timestamp
+          null, // serverLocation
+          null, // pid
+          0L, // uptime
+          launcher.getWorkingDirectory(), // workingDirectory
+          Collections.<String>emptyList(), // jvmArguments
+          null, // classpath
+          GemFireVersion.getGemFireVersion(), // gemfireVersion
+          null, // javaVersion
+          null, // logFile
+          null, // host
+          null, // port
+          null);// memberName
+    }
+    

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS41 INS42 INS41 MOV12 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS42 INS44 INS44 INS44 INS8 INS7 INS7 INS22 INS22 INS12 INS12 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS41 INS42 INS83 INS43 INS42 INS25 INS21 INS41 INS42 INS41 INS42 INS83 INS43 INS42 INS25 INS21 INS41 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS17 INS22 INS32 INS22 INS32 INS52 INS42 INS52 INS42 INS44 INS8 INS44 INS8 INS42 INS32 INS32 MOV25 MOV25 INS22 INS42 INS27 INS8 INS7 INS52 INS22 INS42 INS27 INS8 INS7 INS52 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS33 INS34 INS32 INS32 INS33 INS32 INS33 INS33 INS33 INS33 INS33 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS21 INS43 INS42 INS21 INS41 INS43 INS42 INS41 INS32 INS42 INS57 INS32 INS42 INS57 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS52 INS42 INS42 INS33 INS25 INS22 INS42 INS52 INS42 INS42 INS33 INS25 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS43 INS32 INS42 INS43 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS27 INS8 INS52 INS42 INS27 INS8 INS52 INS42 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS42 INS42 INS40 INS21 INS27 INS27 INS53 INS27 INS27 INS53 INS25 INS25 INS42 INS42 UPD45 INS42 INS42 INS45 INS42 INS45 INS32 INS45 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS34 INS42 INS34 INS14 INS42 INS34 INS42 INS34 INS14 INS27 INS8 INS27 INS8 INS40 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS43 INS32 INS43 INS32 INS22 INS33 INS21 INS22 INS33 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS52 INS42 INS32 INS52 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS22 INS42 INS42 INS22 INS42 INS42 INS52 INS42 INS52 INS42