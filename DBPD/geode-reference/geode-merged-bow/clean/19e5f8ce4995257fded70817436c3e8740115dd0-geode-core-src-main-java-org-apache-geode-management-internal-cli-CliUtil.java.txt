GEODE-3539: Consolidate CliUtil and DataCommandUtils, DataCommandsUtil (#992)

* GEODE-3539: Consolidate CliUtil and DataCommandUtils, DataCommandsUtil

* remove DataCommandsUtil
* move method from DataCommandUtils to CliUtil if applicable.
* move moethds from DataCommandUtils to individual command if only used by one command

-import java.util.Collection;
+import java.util.Collections;
-import java.util.Iterator;
+import java.util.stream.Collectors;
-import org.apache.geode.management.DistributedSystemMXBean;
+import org.apache.geode.management.DistributedRegionMXBean;
+import org.apache.geode.management.internal.MBeanJMXAdapter;
+import org.apache.geode.management.internal.cli.result.ResultBuilder;
+  public static Result getFunctionResult(ResultCollector<?, ?> rc, String commandName) {
+    Result result;
+    List<Object> results = (List<Object>) rc.getResult();
+    if (results != null) {
+      Object resultObj = results.get(0);
+      if (resultObj instanceof String) {
+        result = ResultBuilder.createInfoResult((String) resultObj);
+      } else if (resultObj instanceof Exception) {
+        result = ResultBuilder.createGemFireErrorResult(((Exception) resultObj).getMessage());
+      } else {
+        result = ResultBuilder.createGemFireErrorResult(
+            CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, commandName));
+      }
+    } else {
+      result = ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, commandName));
+    }
+    return result;
+  }
+
-    return new HashSet<DistributedMember>(
-        cache.getInternalDistributedSystem().getDistributionManager().getDistributionManagerIds());
+    return getAllMembers(cache.getInternalDistributedSystem());
-  /**
-   * Returns a set of all the members of the distributed system for the given groups.
-   */
-  public static Set<DistributedMember> getDistributedMembersByGroup(InternalCache cache,
-      String[] groups) {
-    Set<DistributedMember> groupMembers = new HashSet<>();
-    for (String group : groups) {
-      groupMembers.addAll(
-          cache.getInternalDistributedSystem().getDistributionManager().getGroupMembers(group));
-    }
-    return groupMembers;
-  }
-
-  /***
-   * Executes a function with arguments on a member , ignores the departed member.
-   * 
-   * @param function Function to be executed
-   * @param args Arguments passed to the function, pass null if you wish to pass no arguments to the
-   *        function.
-   * @param targetMember Member on which the function is to be executed.
-   * @return ResultCollector
-   */
-  public static ResultCollector<?, ?> executeFunction(final Function function, Object args,
-      final DistributedMember targetMember) {
-    Execution execution;
-
-    if (args != null) {
-      execution = FunctionService.onMember(targetMember).setArguments(args);
-    } else {
-      execution = FunctionService.onMember(targetMember);
-    }
-
-    ((AbstractExecution) execution).setIgnoreDepartedMembers(true);
-    return execution.execute(function);
-  }
-
+   * @param returnAll if true, returns all matching members, else returns only first one found.
-      final InternalCache cache) {
+      final InternalCache cache, boolean returnAll) {
-      return null;
+      return Collections.emptySet();
-    ManagementService managementService = ManagementService.getExistingManagementService(cache);
-    DistributedSystemMXBean distributedSystemMXBean =
-        managementService.getDistributedSystemMXBean();
-    Set<DistributedMember> matchedMembers = new HashSet<>();
+    DistributedRegionMXBean regionMXBean =
+        ManagementService.getManagementService(cache).getDistributedRegionMXBean(region);
+    if (regionMXBean == null) {
+      return Collections.emptySet();
+    }
+
+    String[] regionAssociatedMemberNames = regionMXBean.getMembers();
+    Set<DistributedMember> matchedMembers = new HashSet<>();
-      try {
-        if (distributedSystemMXBean.fetchRegionObjectName(CliUtil.getMemberNameOrId(member),
-            region) != null) {
+      for (String regionAssociatedMemberName : regionAssociatedMemberNames) {
+        String name = MBeanJMXAdapter.getMemberNameOrId(member);
+        if (name.equals(regionAssociatedMemberName)) {
+          if (!returnAll) {
+            return matchedMembers;
+          }
-      } catch (Exception ignored) {
+  /**
+   * this finds the member that hosts all the regions passed in.
+   * 
+   * @param regions
+   * @param cache
+   * @param returnAll: if true, returns all matching members, otherwise, returns only one.
+   */
+  public static Set<DistributedMember> getQueryRegionsAssociatedMembers(Set<String> regions,
+      final InternalCache cache, boolean returnAll) {
+    Set<DistributedMember> results = regions.stream()
+        .map(region -> getRegionAssociatedMembers(region, cache, true)).reduce((s1, s2) -> {
+          s1.retainAll(s2);
+          return s1;
+        }).get();
+
+    if (returnAll || results.size() <= 1) {
+      return results;
+    }
+
+    // returns a set of only one item
+    return Collections.singleton(results.iterator().next());
+  }
+
-  public static String collectionToString(Collection<?> col, int newlineAfter) {
-    if (col != null) {
-      StringBuilder builder = new StringBuilder();
-      int lastNewlineAt = 0;
-
-      for (Iterator<?> it = col.iterator(); it.hasNext();) {
-        Object object = it.next();
-        builder.append(String.valueOf(object));
-        if (it.hasNext()) {
-          builder.append(", ");
-        }
-        if (newlineAfter > 0 && (builder.length() - lastNewlineAt) / newlineAfter >= 1) {
-          builder.append(GfshParser.LINE_SEPARATOR);
-        }
-      }
-      return builder.toString();
-    } else {
-      return "" + null;
-    }
-  }
-
-    if (array != null) {
-      StringBuilder builder = new StringBuilder();
-      for (int i = 0; i < array.length; i++) {
-        Object object = array[i];
-        builder.append(String.valueOf(object));
-        if (i < array.length - 1) {
-          builder.append(", ");
-        }
-      }
-      return builder.toString();
-    } else {
-      return "" + null;
+    if (array == null) {
+      return "null";
+    return Arrays.stream(array).map(String::valueOf).collect(Collectors.joining(", "));

MOV26 INS26 INS26 UPD40 UPD40 UPD40 INS40 INS40 INS31 INS31 MOV83 MOV83 INS43 UPD42 MOV42 INS44 MOV44 INS8 INS44 INS29 MOV83 MOV83 MOV74 UPD42 MOV42 MOV44 INS44 MOV44 MOV8 INS42 MOV74 INS42 UPD43 UPD42 INS60 INS60 INS25 INS41 INS65 INS39 INS42 INS25 INS60 INS65 INS65 INS65 INS65 UPD74 UPD42 INS83 INS43 INS42 UPD39 UPD42 INS60 MOV25 MOV41 INS25 INS41 UPD42 INS43 INS59 INS74 INS59 INS27 INS8 INS8 INS42 INS32 INS42 INS66 UPD43 INS27 INS8 MOV5 MOV59 INS66 INS42 INS42 INS66 UPD43 MOV43 INS42 MOV74 INS59 UPD27 INS32 UPD27 MOV27 INS8 INS32 INS42 UPD42 MOV42 UPD43 MOV43 MOV43 INS42 INS11 INS42 INS33 INS60 INS25 MOV21 INS42 MOV32 UPD42 UPD42 INS32 INS42 INS33 INS41 UPD42 INS70 UPD42 INS42 INS32 UPD42 MOV42 UPD27 INS41 INS42 INS42 INS32 INS41 INS32 UPD42 MOV42 INS32 UPD42 INS74 INS32 MOV43 INS59 INS62 INS8 INS25 INS7 INS32 INS32 INS42 INS42 INS32 UPD42 UPD42 MOV44 INS42 INS8 INS32 UPD42 MOV42 MOV32 INS42 INS32 UPD42 MOV42 INS45 INS32 INS42 INS90 UPD42 MOV42 UPD42 MOV42 MOV45 INS43 MOV43 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 INS43 INS21 INS62 MOV8 MOV8 INS42 INS32 INS42 INS42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 UPD42 INS60 INS25 INS32 UPD42 MOV42 INS86 UPD42 UPD42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 UPD42 MOV42 INS7 INS42 INS43 INS42 INS42 INS32 INS43 INS59 INS32 MOV8 INS32 INS42 INS86 INS59 INS59 INS8 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 INS25 INS42 INS42 INS59 INS32 INS42 UPD42 MOV42 MOV21 INS41 INS42 INS42 INS11 UPD42 UPD42 INS32 UPD42 MOV42 MOV42 MOV42 INS38 INS8 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS9 INS32 INS42 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 INS42 INS41 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS36 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 UPD42 MOV42 INS42 INS11 MOV43 INS42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL9 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL42 DEL32 DEL14 DEL66 DEL65 DEL29 DEL42 DEL44 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL83 DEL43 DEL42 DEL44 DEL42 DEL44 DEL83 DEL43 DEL42 DEL44 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL33 DEL32 DEL42 DEL43 DEL60 DEL42 DEL42 DEL32 DEL32 DEL33 DEL27 DEL25 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL76 DEL42 DEL42 DEL32 DEL32 DEL34 DEL27 DEL42 DEL27 DEL36 DEL42 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL32 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL34 DEL59 DEL60 DEL42 DEL43 DEL76 DEL74 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL45 DEL33 DEL27 DEL41 DEL8 DEL25 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL40 DEL34 DEL27 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL32 DEL41 DEL8 DEL45 DEL33 DEL27 DEL41 DEL8 DEL25