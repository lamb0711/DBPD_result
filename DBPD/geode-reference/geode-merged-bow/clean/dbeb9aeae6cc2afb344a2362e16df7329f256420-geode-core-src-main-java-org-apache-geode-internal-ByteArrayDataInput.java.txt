Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A reusable {@link DataInput} implementation that wraps a given byte array. It
- * also implements {@link VersionedDataStream} for a stream coming from a
- * different product version.
+ * A reusable {@link DataInput} implementation that wraps a given byte array. It also implements
+ * {@link VersionedDataStream} for a stream coming from a different product version.
-public class ByteArrayDataInput extends InputStream implements DataInput,
-    VersionedDataStream {
+public class ByteArrayDataInput extends InputStream implements DataInput, VersionedDataStream {
-  public ByteArrayDataInput() {
-  }
+  public ByteArrayDataInput() {}
-   * @param bytes
-   *          the content of this stream. Note that this byte array will be read
-   *          by this class (a copy is not made) so it should not be changed
-   *          externally.
-   * @param version
-   *          the product version that serialized the object on given bytes
+   * @param bytes the content of this stream. Note that this byte array will be read by this class
+   *        (a copy is not made) so it should not be changed externally.
+   * @param version the product version that serialized the object on given bytes
-      this.pos += (int)n;
-      return (int)n;
-    }
-    else {
+      this.pos += (int) n;
+      return (int) n;
+    } else {
-    }
-    else {
+    } else {
-    }
-    else if (off < 0 || len < 0 || b.length < (off + len)) {
+    } else if (off < 0 || len < 0 || b.length < (off + len)) {
-    }
-    else {
+    } else {
-      }
-      else {
+      } else {
-    }
-    else if (len < 0) {
+    } else if (len < 0) {
-    }
-    else {
+    } else {
-    }
-    else {
+    } else {
-      return (short)((result << 8) | (this.bytes[this.pos++] & 0xff));
-    }
-    else {
+      return (short) ((result << 8) | (this.bytes[this.pos++] & 0xff));
+    } else {
-    }
-    else {
+    } else {
-      return (char)(result | (this.bytes[this.pos++] & 0xff));
-    }
-    else {
+      return (char) (result | (this.bytes[this.pos++] & 0xff));
+    } else {
-    }
-    else {
+    } else {
-    }
-    else {
+    } else {
-          chars[nChars] = (char)char1;
+          chars[nChars] = (char) char1;
-        }
-        else {
+        } else {
-                chars[nChars] = (char)((char1 & 0x1f) << 6 | (char2 & 0x3f));
-              }
-              else {
+                chars[nChars] = (char) ((char1 & 0x1f) << 6 | (char2 & 0x3f));
+              } else {
-            }
-            else {
+            } else {
-                  chars[nChars] = (char)(((char1 & 0x0f) << 12)
-                      | ((char2 & 0x3f) << 6) | (char3 & 0x3f));
-                }
-                else {
+                  chars[nChars] =
+                      (char) (((char1 & 0x0f) << 12) | ((char2 & 0x3f) << 6) | (char3 & 0x3f));
+                } else {
-              }
-              else {
+              } else {
-            }
-            else {
+            } else {
-            chars[nChars] = (char)char1;
+            chars[nChars] = (char) char1;
-    }
-    else {
+    } else {
-    return this.version == null ? super.toString() : (super.toString() + " ("
-        + this.version + ')');
+    return this.version == null ? super.toString() : (super.toString() + " (" + this.version + ')');
-  private void throwUTFEncodingError(int index, int char1, int char2,
-      Integer char3, int enc) throws UTFDataFormatException {
-    throw new UTFDataFormatException("malformed input for " + enc
-        + "-byte encoding at " + index + " (char1=" + char1 + " char2=" + char2
-        + (char3 == null ? ")" : (" char3=" + char3 + ')')));
+  private void throwUTFEncodingError(int index, int char1, int char2, Integer char3, int enc)
+      throws UTFDataFormatException {
+    throw new UTFDataFormatException(
+        "malformed input for " + enc + "-byte encoding at " + index + " (char1=" + char1 + " char2="
+            + char2 + (char3 == null ? ")" : (" char3=" + char3 + ')')));

UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66