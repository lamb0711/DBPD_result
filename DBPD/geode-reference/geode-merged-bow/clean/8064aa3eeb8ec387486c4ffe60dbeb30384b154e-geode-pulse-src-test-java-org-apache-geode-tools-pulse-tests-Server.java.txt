GEODE-5396: A bit of restructuring and a bit of cleanup to isolate failures better

-import java.io.IOException;
+import java.util.concurrent.TimeUnit;
+import javax.management.InstanceNotFoundException;
+import org.awaitility.Awaitility;
+
-  private String propFile = null;
+  private String propFile;
+  private int jmxPort;
+  private String jsonAuthFile;
-
-    // Load the beans first, otherwise we get access denied
-    loadMBeans();
-
-    if (jsonAuthFile != null) {
-      System.setProperty("spring.profiles.active", "pulse.authentication.gemfire");
-
-      Map<String, Object> env = new HashMap<String, Object>();
-
-      // set up Shiro Security Manager
-      Properties securityProperties = new Properties();
-      securityProperties.setProperty(TestSecurityManager.SECURITY_JSON, jsonAuthFile);
-      securityProperties.setProperty(SECURITY_MANAGER, TestSecurityManager.class.getName());
-
-      SecurityService securityService = SecurityServiceFactory.create(securityProperties);
-
-      // register the AccessControll bean
-      AccessControlMBean acc = new AccessControlMBean(securityService);
-      ObjectName accessControlMBeanON = new ObjectName(ResourceConstants.OBJECT_NAME_ACCESSCONTROL);
-      MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();
-      platformMBeanServer.registerMBean(acc, accessControlMBeanON);
-
-      // wire in the authenticator and authorizaton
-      JMXShiroAuthenticator interceptor = new JMXShiroAuthenticator(securityService);
-      env.put(JMXConnectorServer.AUTHENTICATOR, interceptor);
-      cs = JMXConnectorServerFactory.newJMXConnectorServer(url, env, mbs);
-      cs.setMBeanServerForwarder(new MBeanServerWrapper(securityService));
-
-      // set up the AccessControlMXBean
-
-    } else {
-      System.setProperty("spring.profiles.active", "pulse.authentication.default");
-      cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbs);
-    }
-
-    try {
-      LocateRegistry.createRegistry(jmxPort);
-      System.out.println("RMI registry ready.");
-    } catch (Exception e) {
-      System.out.println("Exception starting RMI registry:");
-      e.printStackTrace();
-    }
-
-    cs.start();
+    this.jmxPort = jmxPort;
+    this.jsonAuthFile = jsonAuthFile;
-  public void stop() throws IOException {
+  public void stop() throws Exception {
+    unloadMBeans();
+
+    if (jsonAuthFile != null)
+      mbs.unregisterMBean(new ObjectName(ResourceConstants.OBJECT_NAME_ACCESSCONTROL));
-  private synchronized void loadMBeans() {
-    JMXProperties props = JMXProperties.getInstance();
-    try {
-      props.load(propFile);
-    } catch (IOException e) {
-      e.printStackTrace();
+  public void start() throws Exception {
+
+    // Load the beans first, otherwise we get access denied
+    loadMBeans();
+
+    if (jsonAuthFile != null) {
+      System.setProperty("spring.profiles.active", "pulse.authentication.gemfire");
+
+      Map<String, Object> env = new HashMap<>();
+
+      // set up Shiro Security Manager
+      Properties securityProperties = new Properties();
+      securityProperties.setProperty(TestSecurityManager.SECURITY_JSON, jsonAuthFile);
+      securityProperties.setProperty(SECURITY_MANAGER, TestSecurityManager.class.getName());
+
+      SecurityService securityService = SecurityServiceFactory.create(securityProperties);
+
+      // register the AccessControl bean
+      mbs.registerMBean(new AccessControlMBean(securityService),
+          new ObjectName(ResourceConstants.OBJECT_NAME_ACCESSCONTROL));
+
+      // wire in the authenticator and authorization
+      env.put(JMXConnectorServer.AUTHENTICATOR, new JMXShiroAuthenticator(securityService));
+      cs = JMXConnectorServerFactory.newJMXConnectorServer(url, env, mbs);
+      cs.setMBeanServerForwarder(new MBeanServerWrapper(securityService));
+
+    } else {
+      System.setProperty("spring.profiles.active", "pulse.authentication.default");
+      cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbs);
+    try {
+      LocateRegistry.createRegistry(jmxPort);
+      System.out.println("RMI registry ready.");
+    } catch (Exception e) {
+      System.out.println("Exception starting RMI registry:");
+      throw e;
+    }
+
+    cs.start();
+    Awaitility.waitAtMost(30, TimeUnit.SECONDS).pollInterval(1, TimeUnit.SECONDS)
+        .until(() -> cs.isActive());
+  }
+
+  private synchronized void loadMBeans() throws Exception {
+    JMXProperties props = JMXProperties.getInstance();
+
+    props.load(propFile);
+
-      try {
-        addServerMBean(server);
-      } catch (InstanceAlreadyExistsException e) {
-        e.printStackTrace();
-      } catch (MBeanRegistrationException e) {
-        e.printStackTrace();
-      } catch (NotCompliantMBeanException e) {
-        e.printStackTrace();
-      } catch (MalformedObjectNameException e) {
-        e.printStackTrace();
-      } catch (NullPointerException e) {
-        e.printStackTrace();
-      }
+      addServerMBean(server);
-      try {
-        addMemberMBean(m);
-      } catch (InstanceAlreadyExistsException e) {
-        e.printStackTrace();
-      } catch (MBeanRegistrationException e) {
-        e.printStackTrace();
-      } catch (NotCompliantMBeanException e) {
-        e.printStackTrace();
-      } catch (MalformedObjectNameException e) {
-        e.printStackTrace();
-      } catch (NullPointerException e) {
-        e.printStackTrace();
-      }
+      addMemberMBean(m);
-      try {
-        addRegionMBean(reg);
-      } catch (InstanceAlreadyExistsException e) {
-        e.printStackTrace();
-      } catch (MBeanRegistrationException e) {
-        e.printStackTrace();
-      } catch (NotCompliantMBeanException e) {
-        e.printStackTrace();
-      } catch (MalformedObjectNameException e) {
-        e.printStackTrace();
-      } catch (NullPointerException e) {
-        e.printStackTrace();
-      }
+      addRegionMBean(reg);
+    }
+  }
+
+  private synchronized void unloadMBeans() throws Exception {
+    JMXProperties props = JMXProperties.getInstance();
+
+    props.load(propFile);
+
+    // remove servers
+    String[] servers = getArrayProperty(props, "servers");
+    for (String server : servers) {
+      removeServerMBean();
+    }
+
+    // remove members
+    String[] members = getArrayProperty(props, "members");
+    for (String m : members) {
+      removeMemberMBean(m);
+    }
+
+    // remove regions
+    String[] regions = getArrayProperty(props, "regions");
+    for (String reg : regions) {
+      removeRegionMBean(reg);
-    Member m1 = new Member(m);
-    mbs.registerMBean(m1, new ObjectName(Member.OBJECT_NAME + ",member=" + m));
+
+    mbs.registerMBean(new Member(m), new ObjectName(Member.OBJECT_NAME + ",member=" + m));
+  }
+
+
+  private void removeMemberMBean(String m)
+      throws InstanceNotFoundException,
+      MBeanRegistrationException, MalformedObjectNameException {
+    mbs.unregisterMBean(new ObjectName(Member.OBJECT_NAME + ",member=" + m));
+
+  private void removeRegionMBean(String reg)
+      throws InstanceNotFoundException, MBeanRegistrationException, MalformedObjectNameException,
+      NullPointerException {
+    Region regionObject = new Region(reg);
+
+    mbs.unregisterMBean(new ObjectName(Region.OBJECT_NAME + ",name=/" + reg));
+
+    for (String member : regionObject.getMembers()) {
+      mbs.unregisterMBean(new ObjectName(
+          PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObject.getFullPath()
+              + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER + member));
+    }
+  }
+
-    ServerObject so = new ServerObject(server);
-    mbs.registerMBean(so, new ObjectName(ServerObject.OBJECT_NAME));
+    mbs.registerMBean(new ServerObject(server), new ObjectName(ServerObject.OBJECT_NAME));
+  }
+
+  private void removeServerMBean()
+      throws InstanceNotFoundException, MBeanRegistrationException,
+      MalformedObjectNameException, NullPointerException {
+    mbs.unregisterMBean(new ObjectName(ServerObject.OBJECT_NAME));
-  public static Server createServer(int jmxPort, String properties, String jsonAuthFile) {
-    Server s = null;
-    try {
-      s = new Server(jmxPort, properties, jsonAuthFile);
-    } catch (Exception e) {
-      e.printStackTrace();
-      return null;
-    }
-
-    return s;
+  public static Server createServer(int jmxPort, String properties, String jsonAuthFile)
+      throws Exception {
+    return new Server(jmxPort, properties, jsonAuthFile);

MOV26 INS26 INS26 MOV31 INS40 UPD40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS83 MOV43 INS59 INS83 INS42 MOV44 MOV44 MOV44 INS43 INS8 UPD43 INS39 UPD42 MOV83 MOV83 MOV39 MOV42 INS43 INS8 INS83 INS83 INS39 INS42 INS43 INS8 INS83 INS39 INS42 INS44 INS43 MOV43 MOV43 INS8 INS83 INS39 INS42 INS44 INS43 MOV43 MOV43 MOV43 INS8 INS83 INS39 INS42 INS43 MOV43 MOV43 MOV43 INS8 INS43 MOV8 INS42 INS42 INS42 MOV21 MOV21 MOV21 INS21 INS21 UPD42 INS21 INS25 INS21 UPD42 MOV42 MOV60 MOV21 MOV60 INS70 MOV60 INS70 MOV60 INS70 UPD42 MOV42 INS60 MOV21 INS60 INS70 INS60 INS70 INS60 INS70 INS43 INS42 INS42 MOV21 INS43 INS42 UPD42 MOV42 INS60 MOV21 INS70 INS42 MOV21 MOV42 INS41 INS7 INS7 INS32 INS27 INS21 INS32 MOV44 INS42 MOV8 MOV44 INS42 MOV8 MOV44 INS42 MOV8 INS43 INS59 INS5 INS59 INS44 INS42 INS8 INS5 INS59 INS44 INS42 INS8 INS5 INS59 INS44 INS42 INS8 INS42 INS42 INS43 INS59 INS44 INS32 INS8 MOV14 INS22 INS42 INS22 INS42 INS42 INS42 INS33 INS32 INS32 INS42 INS86 INS42 INS42 INS32 UPD42 INS42 UPD42 INS43 INS85 INS42 INS32 INS43 INS42 MOV21 INS43 INS85 INS42 INS32 UPD43 MOV43 UPD42 MOV42 MOV21 INS43 INS85 INS42 INS32 UPD43 MOV43 UPD42 MOV42 MOV21 MOV14 INS42 INS42 INS14 INS42 INS42 INS14 UPD42 UPD42 INS14 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV21 MOV14 UPD42 INS42 INS14 INS52 INS42 INS52 INS42 INS42 INS42 MOV14 INS53 INS32 INS42 INS34 INS40 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS45 UPD42 INS43 INS27 INS43 INS42 MOV43 INS27 UPD42 INS43 INS40 UPD42 MOV14 INS14 MOV14 INS42 INS42 INS42 INS34 INS40 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS40 INS45 INS42 INS42 INS40 INS45 INS42 INS42 INS42 INS14 INS42 UPD74 INS43 INS40 INS43 INS27 INS42 INS42 INS40 INS32 INS40 INS42 UPD42 MOV42 INS42 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL42 DEL44 DEL32 DEL21 DEL8 DEL12 DEL42 DEL44 DEL8 DEL12 DEL43 DEL42 DEL44 DEL32 DEL21 DEL8 DEL12 DEL42 DEL44 DEL8 DEL12 DEL43 DEL42 DEL44 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL44 DEL8 DEL12 DEL42 DEL44 DEL32 DEL21 DEL8 DEL12 DEL44 DEL8 DEL12 DEL42 DEL44 DEL8 DEL12 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL44 DEL8 DEL12 DEL44 DEL32 DEL21 DEL8 DEL12 DEL42 DEL44 DEL8 DEL12 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL31 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL33 DEL41 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8