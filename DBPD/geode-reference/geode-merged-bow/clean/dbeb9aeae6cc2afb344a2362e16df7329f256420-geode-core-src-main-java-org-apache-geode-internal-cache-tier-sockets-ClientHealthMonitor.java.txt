Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Class <code>ClientHealthMonitor</code> is a server-side singleton that
- * monitors the health of clients by looking at their heartbeats. If too much
- * time elapses between heartbeats, the monitor determines that the client is
- * dead and interrupts its threads.
+ * Class <code>ClientHealthMonitor</code> is a server-side singleton that monitors the health of
+ * clients by looking at their heartbeats. If too much time elapses between heartbeats, the monitor
+ * determines that the client is dead and interrupts its threads.
-   * Used to track the number of handshakes in a VM primary use, license
-   * enforcement.
+   * Used to track the number of handshakes in a VM primary use, license enforcement.
-   * note, these were moved from static fields in ServerConnection
-   * so that they will be cleaned up when the client health monitor is shutdown.
+   * note, these were moved from static fields in ServerConnection so that they will be cleaned up
+   * when the client health monitor is shutdown.
-   * Gives, version-wise, the number of clients connected to the cache servers
-   * in this cache, which are capable of processing recieved deltas.
+   * Gives, version-wise, the number of clients connected to the cache servers in this cache, which
+   * are capable of processing recieved deltas.
-   * NOTE: It does not necessarily give the actual number of clients per version
-   * connected to the cache servers in this cache.
+   * NOTE: It does not necessarily give the actual number of clients per version connected to the
+   * cache servers in this cache.
-  AtomicIntegerArray numOfClientsPerVersion = new AtomicIntegerArray(Version.HIGHEST_VERSION+1);
-  
+  AtomicIntegerArray numOfClientsPerVersion = new AtomicIntegerArray(Version.HIGHEST_VERSION + 1);
+
-   * Factory method to construct or return the singleton
-   * <code>ClientHealthMonitor</code> instance.
+   * Factory method to construct or return the singleton <code>ClientHealthMonitor</code> instance.
-   * @param cache
-   *          The GemFire <code>Cache</code>
-   * @param maximumTimeBetweenPings
-   *          The maximum time allowed between pings before determining the
-   *          client has died and interrupting its sockets.
+   * @param cache The GemFire <code>Cache</code>
+   * @param maximumTimeBetweenPings The maximum time allowed between pings before determining the
+   *        client has died and interrupting its sockets.
-  public static ClientHealthMonitor getInstance(Cache cache,
-      int maximumTimeBetweenPings, CacheClientNotifierStats stats)
-  {
+  public static ClientHealthMonitor getInstance(Cache cache, int maximumTimeBetweenPings,
+      CacheClientNotifierStats stats) {
-   * Factory method to return the singleton <code>ClientHealthMonitor</code>
-   * instance.
+   * Factory method to return the singleton <code>ClientHealthMonitor</code> instance.
-  public static ClientHealthMonitor getInstance()
-  {
+  public static ClientHealthMonitor getInstance() {
-  public synchronized static void shutdownInstance()
-  {
+  public synchronized static void shutdownInstance() {
-    _instance.shutdown();    
-    
+    _instance.shutdown();
+
-    try{
+    try {
-    }
-    catch(InterruptedException e) {
+    } catch (InterruptedException e) {
-      if(logger.isDebugEnabled()) {
+      if (logger.isDebugEnabled()) {
-    }
-    finally {
+    } finally {
-   * @param proxyID
-   *          The id of the client to be registered
+   * @param proxyID The id of the client to be registered
-  public void registerClient(ClientProxyMembershipID proxyID)
-  {
+  public void registerClient(ClientProxyMembershipID proxyID) {
-        logger.debug(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_REGISTERING_CLIENT_WITH_MEMBER_ID_0, new Object[] { proxyID }));
+        logger.debug(LocalizedMessage.create(
+            LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_REGISTERING_CLIENT_WITH_MEMBER_ID_0,
+            new Object[] {proxyID}));
-   * @param proxyID
-   *          The id of the client to be unregistered
+   * 
+   * @param proxyID The id of the client to be unregistered
-  private void unregisterClient(ClientProxyMembershipID proxyID) {
+  private void unregisterClient(ClientProxyMembershipID proxyID, boolean clientDisconnectedCleanly,
+      Throwable clientDisconnectException) {
-      if (logger.isDebugEnabled()) {
-        logger.debug(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_UNREGISTERING_CLIENT_WITH_MEMBER_ID_0, new Object[] { proxyID }));
+      if (clientDisconnectedCleanly) {
+        if (logger.isDebugEnabled()) {
+          logger.debug(LocalizedMessage.create(
+              LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_UNREGISTERING_CLIENT_WITH_MEMBER_ID_0,
+              new Object[] {proxyID}));
+        }
+      } else {
+        logger.warn(LocalizedMessage.create(
+            LocalizedStrings.ClientHealthMonitor_CLIENTHEALTHMONITOR_UNREGISTERING_CLIENT_WITH_MEMBER_ID_0_DUE_TO_1,
+            new Object[] {proxyID, clientDisconnectException == null ? "Unknown reason"
+                : clientDisconnectException.getLocalizedMessage()}));
-  
+
-   * @param proxyID
-   *          The id of the client to be unregistered
-   * @param acceptor
-   *          non-null if the call is from a <code>ServerConnection</code> (as
-   *          opposed to a <code>CacheClientProxy</code>).
-   * @param clientDisconnectedCleanly
-   *          Whether the client disconnected cleanly or crashed
+   * @param proxyID The id of the client to be unregistered
+   * @param acceptor non-null if the call is from a <code>ServerConnection</code> (as opposed to a
+   *        <code>CacheClientProxy</code>).
+   * @param clientDisconnectedCleanly Whether the client disconnected cleanly or crashed
-  public void unregisterClient(ClientProxyMembershipID proxyID,
-                               AcceptorImpl acceptor,
-                               boolean clientDisconnectedCleanly)
-  {
-    unregisterClient(proxyID);
+  public void unregisterClient(ClientProxyMembershipID proxyID, AcceptorImpl acceptor,
+      boolean clientDisconnectedCleanly, Throwable clientDisconnectException) {
+    unregisterClient(proxyID, clientDisconnectedCleanly, clientDisconnectException);
-        }
-        catch (CancelException ignore) {
+        } catch (CancelException ignore) {
-  private final Set<TXId> scheduledToBeRemovedTx = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "trackScheduledToBeRemovedTx") ?
-      new ConcurrentHashSet<TXId>() : null;
+  private final Set<TXId> scheduledToBeRemovedTx =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "trackScheduledToBeRemovedTx")
+          ? new ConcurrentHashSet<TXId>() : null;
-   * expire the transaction states for the given client.  This uses the
-   * transactionTimeToLive setting that is inherited from the TXManagerImpl.
-   * If that setting is non-positive we expire the states immediately
+   * expire the transaction states for the given client. This uses the transactionTimeToLive setting
+   * that is inherited from the TXManagerImpl. If that setting is non-positive we expire the states
+   * immediately
+   * 
-    final TXManagerImpl txMgr = (TXManagerImpl)this._cache.getCacheTransactionManager(); 
-    final Set<TXId> txids = txMgr.getTransactionsForClient(
-          (InternalDistributedMember)proxyID.getDistributedMember());
+    final TXManagerImpl txMgr = (TXManagerImpl) this._cache.getCacheTransactionManager();
+    final Set<TXId> txids =
+        txMgr.getTransactionsForClient((InternalDistributedMember) proxyID.getDistributedMember());
-      return; 
+      return;
-        logger.debug("expiring {} transaction contexts for {} timeout={}", txids.size(), proxyID, timeout/1000);
+        logger.debug("expiring {} transaction contexts for {} timeout={}", txids.size(), proxyID,
+            timeout / 1000);
-        if (scheduledToBeRemovedTx != null) scheduledToBeRemovedTx.addAll(txids);       
+        if (scheduledToBeRemovedTx != null)
+          scheduledToBeRemovedTx.addAll(txids);
-            if (scheduledToBeRemovedTx != null) scheduledToBeRemovedTx.removeAll(txids);
+            if (scheduledToBeRemovedTx != null)
+              scheduledToBeRemovedTx.removeAll(txids);
-        ((GemFireCacheImpl)this._cache).getCCPTimer().schedule(task, timeout);
+        ((GemFireCacheImpl) this._cache).getCCPTimer().schedule(task, timeout);
-  public void removeAllConnectionsAndUnregisterClient(
-      ClientProxyMembershipID proxyID)
-  {
+  public void removeAllConnectionsAndUnregisterClient(ClientProxyMembershipID proxyID,
+      Throwable t) {
-    unregisterClient(proxyID);
+    unregisterClient(proxyID, false, t);
-   * @param proxyID
-   *          The membership id of the client to be updated
-   * @param connection
-   *          The thread processing client requests
+   * @param proxyID The membership id of the client to be updated
+   * @param connection The thread processing client requests
-  public void addConnection(ClientProxyMembershipID proxyID,
-      ServerConnection connection)
-  {
-    //logger.info("ClientHealthMonitor: Adding " + connection + " to
+  public void addConnection(ClientProxyMembershipID proxyID, ServerConnection connection) {
+    // logger.info("ClientHealthMonitor: Adding " + connection + " to
-      Set serverConnections = (Set)this._clientThreads.get(proxyID);
+      Set serverConnections = (Set) this._clientThreads.get(proxyID);
-      //logger.info("ClientHealthMonitor: The client with member id " +
+      // logger.info("ClientHealthMonitor: The client with member id " +
-   * Removes a <code>ServerConnection</code> from the client's processing
-   * threads
+   * Removes a <code>ServerConnection</code> from the client's processing threads
-   * @param proxyID
-   *          The id of the client to be updated
-   * @param connection
-   *          The thread processing client requests
+   * @param proxyID The id of the client to be updated
+   * @param connection The thread processing client requests
-  public void removeConnection(ClientProxyMembershipID proxyID,
-      ServerConnection connection)
-  {
-    //logger.info("ClientHealthMonitor: Removing " + connection + " from
+  public void removeConnection(ClientProxyMembershipID proxyID, ServerConnection connection) {
+    // logger.info("ClientHealthMonitor: Removing " + connection + " from
-      Set serverConnections = (Set)this._clientThreads.get(proxyID);
+      Set serverConnections = (Set) this._clientThreads.get(proxyID);
-        //logger.info("ClientHealthMonitor: The client with member id " +
+        // logger.info("ClientHealthMonitor: The client with member id " +
-          //logger.info("ClientHealthMonitor: The client with member id "
+          // logger.info("ClientHealthMonitor: The client with member id "
-   * @param proxyID
-   *          The id of the client from which the ping was received
+   * @param proxyID The id of the client from which the ping was received
-  public void receivedPing(ClientProxyMembershipID proxyID)
-  {
+  public void receivedPing(ClientProxyMembershipID proxyID) {
-      }
-      else {
-        this._clientHeartbeats.put(proxyID,
-            Long.valueOf(System.currentTimeMillis()));
+      } else {
+        this._clientHeartbeats.put(proxyID, Long.valueOf(System.currentTimeMillis()));
-  //   /**
-  //    * Returns modifiable map (changes do not effect this class) of memberId
-  //    * to connection count.
-  //    */
-  //   public Map getConnectedClients() {
-  //     Map map = new HashMap(); // KEY=memberId, VALUE=connectionCount (Integer)
-  //     synchronized (_clientThreadsLock) {
-  //       Iterator connectedClients = this._clientThreads.entrySet().iterator();
-  //       while (connectedClients.hasNext()) {
-  //         Map.Entry entry = (Map.Entry) connectedClients.next();
-  //         String memberId = (String) entry.getKey();// memberId includes FQDN
-  //         Set connections = (Set) entry.getValue();
-  //         int socketPort = 0;
-  //         InetAddress socketAddress = null;
-  //         ///*
-  //         Iterator serverConnections = connections.iterator();
-  //         // Get data from one.
-  //         while (serverConnections.hasNext()) {
-  //           ServerConnection sc = (ServerConnection) serverConnections.next();
-  //           socketPort = sc.getSocketPort();
-  //           socketAddress = sc.getSocketAddress();
-  //           break;
-  //         }
-  //         //*/
-  //         int connectionCount = connections.size();
-  //         String clientString = null;
-  //         if (socketAddress == null) {
-  //           clientString = "client member id=" + memberId;
-  //         } else {
-  //           clientString = "host name=" + socketAddress.toString() + " host ip=" +
+  // /**
+  // * Returns modifiable map (changes do not effect this class) of memberId
+  // * to connection count.
+  // */
+  // public Map getConnectedClients() {
+  // Map map = new HashMap(); // KEY=memberId, VALUE=connectionCount (Integer)
+  // synchronized (_clientThreadsLock) {
+  // Iterator connectedClients = this._clientThreads.entrySet().iterator();
+  // while (connectedClients.hasNext()) {
+  // Map.Entry entry = (Map.Entry) connectedClients.next();
+  // String memberId = (String) entry.getKey();// memberId includes FQDN
+  // Set connections = (Set) entry.getValue();
+  // int socketPort = 0;
+  // InetAddress socketAddress = null;
+  // ///*
+  // Iterator serverConnections = connections.iterator();
+  // // Get data from one.
+  // while (serverConnections.hasNext()) {
+  // ServerConnection sc = (ServerConnection) serverConnections.next();
+  // socketPort = sc.getSocketPort();
+  // socketAddress = sc.getSocketAddress();
+  // break;
+  // }
+  // //*/
+  // int connectionCount = connections.size();
+  // String clientString = null;
+  // if (socketAddress == null) {
+  // clientString = "client member id=" + memberId;
+  // } else {
+  // clientString = "host name=" + socketAddress.toString() + " host ip=" +
-  //         }
-  //         map.put(memberId, new Object[] {clientString, new
+  // }
+  // map.put(memberId, new Object[] {clientString, new
-  //         /* Note: all client addresses are same...
-  //         Iterator serverThreads = ((Set) entry.getValue()).iterator();
-  //         while (serverThreads.hasNext()) {
-  //           ServerConnection connection = (ServerConnection) serverThreads.next();
-  //           InetAddress clientAddress = connection.getClientAddress();
-  //           logger.severe("getConnectedClients: memberId=" + memberId +
-  //             " clientAddress=" + clientAddress + " FQDN=" +
-  //             clientAddress.getCanonicalHostName());
-  //         }*/
-  //       }
-  //     }
-  //     return map;
-  //   }
+  // /* Note: all client addresses are same...
+  // Iterator serverThreads = ((Set) entry.getValue()).iterator();
+  // while (serverThreads.hasNext()) {
+  // ServerConnection connection = (ServerConnection) serverThreads.next();
+  // InetAddress clientAddress = connection.getClientAddress();
+  // logger.severe("getConnectedClients: memberId=" + memberId +
+  // " clientAddress=" + clientAddress + " FQDN=" +
+  // clientAddress.getCanonicalHostName());
+  // }*/
+  // }
+  // }
+  // return map;
+  // }
-   * Returns modifiable map (changes do not effect this class) of client
-   * membershipID to connection count. This is different from the map contained
-   * in this class as here the key is client membershipID & not the the proxyID.
-   * It is to be noted that a given client can have multiple proxies.
+   * Returns modifiable map (changes do not effect this class) of client membershipID to connection
+   * count. This is different from the map contained in this class as here the key is client
+   * membershipID & not the the proxyID. It is to be noted that a given client can have multiple
+   * proxies.
-   * @param filterProxies
-   *          Set identifying the Connection proxies which should be fetched.
-   *          These ConnectionProxies may be from same client member or
-   *          different. If it is null this would mean to fetch the Connections
-   *          of all the ConnectionProxy objects.
-   *  
+   * @param filterProxies Set identifying the Connection proxies which should be fetched. These
+   *        ConnectionProxies may be from same client member or different. If it is null this would
+   *        mean to fetch the Connections of all the ConnectionProxy objects.
+   * 
-  public Map getConnectedClients(Set filterProxies)
-  {
+  public Map getConnectedClients(Set filterProxies) {
-        Map.Entry entry = (Map.Entry)connectedClients.next();
-        ClientProxyMembershipID proxyID = (ClientProxyMembershipID)entry
-            .getKey();// proxyID includes FQDN
+        Map.Entry entry = (Map.Entry) connectedClients.next();
+        ClientProxyMembershipID proxyID = (ClientProxyMembershipID) entry.getKey();// proxyID
+                                                                                   // includes FQDN
-          Set connections = (Set)entry.getValue();
+          Set connections = (Set) entry.getValue();
-          ///*
+          /// *
-            ServerConnection sc = (ServerConnection)serverConnections.next();
+            ServerConnection sc = (ServerConnection) serverConnections.next();
-          //*/
+          // */
-          }
-          else {
-            clientString = "host name=" + socketAddress.toString()
-                + " host ip=" + socketAddress.getHostAddress()
-                + " client port=" + socketPort + " client member id="
-                + membershipID;
+          } else {
+            clientString = "host name=" + socketAddress.toString() + " host ip="
+                + socketAddress.getHostAddress() + " client port=" + socketPort
+                + " client member id=" + membershipID;
-          data = (Object[])map.get(membershipID);
+          data = (Object[]) map.get(membershipID);
-            map.put(membershipID, new Object[] { clientString,
-                Integer.valueOf(connectionCount) });
-          }
-          else {
-            data[1] = Integer.valueOf(((Integer)data[1]).intValue()
-                + connectionCount);
+            map.put(membershipID, new Object[] {clientString, Integer.valueOf(connectionCount)});
+          } else {
+            data[1] = Integer.valueOf(((Integer) data[1]).intValue() + connectionCount);
-           * Note: all client addresses are same... Iterator serverThreads =
-           * ((Set) entry.getValue()).iterator(); while
-           * (serverThreads.hasNext()) { ServerConnection connection =
-           * (ServerConnection) serverThreads.next(); InetAddress clientAddress =
-           * connection.getClientAddress();
-           * logger.severe("getConnectedClients: proxyID=" + proxyID + "
-           * clientAddress=" + clientAddress + " FQDN=" +
-           * clientAddress.getCanonicalHostName()); }
+           * Note: all client addresses are same... Iterator serverThreads = ((Set)
+           * entry.getValue()).iterator(); while (serverThreads.hasNext()) { ServerConnection
+           * connection = (ServerConnection) serverThreads.next(); InetAddress clientAddress =
+           * connection.getClientAddress(); logger.severe("getConnectedClients: proxyID=" + proxyID
+           * + " clientAddress=" + clientAddress + " FQDN=" + clientAddress.getCanonicalHostName());
+           * }
-  
+
-   * This method returns the CacheClientStatus for all the clients that are
-   * connected to this server. This method returns all clients irrespective of
-   * whether subscription is enabled or not. 
+   * This method returns the CacheClientStatus for all the clients that are connected to this
+   * server. This method returns all clients irrespective of whether subscription is enabled or not.
-        Map.Entry entry = (Map.Entry)connectedClients.next();
-        ClientProxyMembershipID proxyID = (ClientProxyMembershipID)entry.getKey();
-        CacheClientStatus cci = new CacheClientStatus(proxyID); 
-        Set connections = (Set)this._clientThreads.get(proxyID);
+        Map.Entry entry = (Map.Entry) connectedClients.next();
+        ClientProxyMembershipID proxyID = (ClientProxyMembershipID) entry.getKey();
+        CacheClientStatus cci = new CacheClientStatus(proxyID);
+        Set connections = (Set) this._clientThreads.get(proxyID);
-            ServerConnection sc = (ServerConnection)connectionsIterator.next();
+            ServerConnection sc = (ServerConnection) connectionsIterator.next();
-            /* Check for all modes that could be used for Client-Server communication*/
+            /* Check for all modes that could be used for Client-Server communication */
-  
-  public void fillInClientInfo(Map allClients)
-  {
+
+  public void fillInClientInfo(Map allClients) {
-        Map.Entry entry = (Map.Entry)allClientsIterator.next();
-        ClientProxyMembershipID proxyID = (ClientProxyMembershipID)entry
-            .getKey();// proxyID includes FQDN
-        CacheClientStatus cci = (CacheClientStatus)entry.getValue();
-        Set connections = (Set)this._clientThreads.get(proxyID);
+        Map.Entry entry = (Map.Entry) allClientsIterator.next();
+        ClientProxyMembershipID proxyID = (ClientProxyMembershipID) entry.getKey();// proxyID
+                                                                                   // includes FQDN
+        CacheClientStatus cci = (CacheClientStatus) entry.getValue();
+        Set connections = (Set) this._clientThreads.get(proxyID);
-            ServerConnection sc = (ServerConnection)connectionsIterator.next();
+            ServerConnection sc = (ServerConnection) connectionsIterator.next();
-  public Map getConnectedIncomingGateways()
-  {
+  public Map getConnectedIncomingGateways() {
-        Map.Entry entry = (Map.Entry)connectedClients.next();
-        ClientProxyMembershipID proxyID = (ClientProxyMembershipID)entry
-            .getKey();
-        Set connections = (Set)entry.getValue();
+        Map.Entry entry = (Map.Entry) connectedClients.next();
+        ClientProxyMembershipID proxyID = (ClientProxyMembershipID) entry.getKey();
+        Set connections = (Set) entry.getValue();
-          ServerConnection sc = (ServerConnection)connectionsIterator.next();
+          ServerConnection sc = (ServerConnection) connectionsIterator.next();
-            IncomingGatewayStatus status = new IncomingGatewayStatus(proxyID
-                .getDSMembership(), sc.getSocketAddress(), sc.getSocketPort());
+            IncomingGatewayStatus status = new IncomingGatewayStatus(proxyID.getDSMembership(),
+                sc.getSocketAddress(), sc.getSocketPort());
-        //logger.warning("Terminating " + serverConnections.size() + "
+        // logger.warning("Terminating " + serverConnections.size() + "
-          ServerConnection serverConnection = (ServerConnection)it.next();
-          //logger.warning("Terminating " + serverConnection);
+          ServerConnection serverConnection = (ServerConnection) it.next();
+          // logger.warning("Terminating " + serverConnection);
-       serverConnections = (Set) this._clientThreads.get(proxyID);
-       if (serverConnections != null) {
-         serverConnections = new HashSet(serverConnections);
-       }
+      serverConnections = (Set) this._clientThreads.get(proxyID);
+      if (serverConnections != null) {
+        serverConnections = new HashSet(serverConnections);
+      }
-            LocalizedStrings.ClientHealtMonitor_0_IS_BEING_TERMINATED_BECAUSE_ITS_CLIENT_TIMEOUT_OF_1_HAS_EXPIRED,
-              new Object[] {serverConnection, Integer.valueOf(serverConnection.getClientReadTimeout())}));                              
+              LocalizedStrings.ClientHealtMonitor_0_IS_BEING_TERMINATED_BECAUSE_ITS_CLIENT_TIMEOUT_OF_1_HAS_EXPIRED,
+              new Object[] {serverConnection,
+                  Integer.valueOf(serverConnection.getClientReadTimeout())}));
-            //serverConnection.interruptOwner();
-          }
-          finally {
+            // serverConnection.interruptOwner();
+          } finally {
-  
+
-  public Map getClientHeartbeats()
-  {
+  public Map getClientHeartbeats() {
-   * @param cache
-   *          The GemFire <code>Cache</code>
-   * @param maximumTimeBetweenPings
-   *          The maximum time allowed between pings before determining the
-   *          client has died and interrupting its sockets.
+   * @param cache The GemFire <code>Cache</code>
+   * @param maximumTimeBetweenPings The maximum time allowed between pings before determining the
+   *        client has died and interrupting its sockets.
-  protected static synchronized void createInstance(Cache cache,
-      int maximumTimeBetweenPings, CacheClientNotifierStats stats) {
+  protected static synchronized void createInstance(Cache cache, int maximumTimeBetweenPings,
+      CacheClientNotifierStats stats) {
-   * @param cache
-   *          The GemFire <code>Cache</code>
-   * @param maximumTimeBetweenPings
-   *          The maximum time allowed between pings before determining the
-   *          client has died and interrupting its sockets.
+   * @param cache The GemFire <code>Cache</code>
+   * @param maximumTimeBetweenPings The maximum time allowed between pings before determining the
+   *        client has died and interrupting its sockets.
-  private ClientHealthMonitor(Cache cache, int maximumTimeBetweenPings, CacheClientNotifierStats stats) {
+  private ClientHealthMonitor(Cache cache, int maximumTimeBetweenPings,
+      CacheClientNotifierStats stats) {
-    
+
-      logger.info(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_CLIENT_HEALTH_MONITOR_THREAD_DISABLED_DUE_TO_MAXIMUMTIMEBETWEENPINGS_SETTING__0, maximumTimeBetweenPings));
+      logger.info(LocalizedMessage.create(
+          LocalizedStrings.ClientHealthMonitor_CLIENT_HEALTH_MONITOR_THREAD_DISABLED_DUE_TO_MAXIMUMTIMEBETWEENPINGS_SETTING__0,
+          maximumTimeBetweenPings));
-  public String toString()
-  {
-    return "ClientHealthMonitor@"
-      + Integer.toHexString(System.identityHashCode(this));
+  public String toString() {
+    return "ClientHealthMonitor@" + Integer.toHexString(System.identityHashCode(this));
-  
+
-  
+
-   * Class <code>ClientHealthMonitorThread</code> is a <code>Thread</code>
-   * that verifies all clients are still alive.
+   * Class <code>ClientHealthMonitorThread</code> is a <code>Thread</code> that verifies all clients
+   * are still alive.
-  class ClientHealthMonitorThread extends Thread
-   {
+  class ClientHealthMonitorThread extends Thread {
-     * The maximum time allowed between pings before determining the client has
-     * died and interrupting its sockets.
+     * The maximum time allowed between pings before determining the client has died and
+     * interrupting its sockets.
-     * @param maximumTimeBetweenPings
-     *          The maximum time allowed between pings before determining the
-     *          client has died and interrupting its sockets
+     * @param maximumTimeBetweenPings The maximum time allowed between pings before determining the
+     *        client has died and interrupting its sockets
-      super(LoggingThreadGroup.createThreadGroup("ClientHealthMonitor Thread Group",
-          logger), "ClientHealthMonitor Thread");
+      super(LoggingThreadGroup.createThreadGroup("ClientHealthMonitor Thread Group", logger),
+          "ClientHealthMonitor Thread");
-          logger.debug("zero ping interval detected",
-            new Exception(LocalizedStrings.ClientHealthMonitor_STACK_TRACE_0.toLocalizedString()));
+          logger.debug("zero ping interval detected", new Exception(
+              LocalizedStrings.ClientHealthMonitor_STACK_TRACE_0.toLocalizedString()));
-    protected synchronized void stopMonitoring()
-    {
+    protected synchronized void stopMonitoring() {
-    protected boolean isStopped()
-    {
+    protected boolean isStopped() {
-     * Runs the monitor by iterating the map of clients and testing the latest
-     * ping time received against the current time.
+     * Runs the monitor by iterating the map of clients and testing the latest ping time received
+     * against the current time.
-    public void run()
-    {
+    public void run() {
-          //logger.warning("Monitoring " + getClientHeartbeats().size() +
+          // logger.warning("Monitoring " + getClientHeartbeats().size() +
-          for (Iterator i = getClientHeartbeats().entrySet().iterator(); i
-              .hasNext();) {
-            Map.Entry entry = (Map.Entry)i.next();
+          for (Iterator i = getClientHeartbeats().entrySet().iterator(); i.hasNext();) {
+            Map.Entry entry = (Map.Entry) i.next();
-            
-            Long latestHeartbeatValue = (Long)entry.getValue();
+
+            Long latestHeartbeatValue = (Long) entry.getValue();
-                logger.trace("{} ms have elapsed since the latest heartbeat for client with member id {}", (currentTime - latestHeartbeat), proxyID);
+                logger.trace(
+                    "{} ms have elapsed since the latest heartbeat for client with member id {}",
+                    (currentTime - latestHeartbeat), proxyID);
-              
-              if ( (currentTime-latestHeartbeat) > this._maximumTimeBetweenPings) {
+
+              if ((currentTime - latestHeartbeat) > this._maximumTimeBetweenPings) {
-                    logger.debug("Monitoring client with member id {}. It has been {} ms since the latest heartbeat. This client would have been terminated but at least one of its threads is processing a message.", entry.getKey(), (currentTime - latestHeartbeat));
+                    logger.debug(
+                        "Monitoring client with member id {}. It has been {} ms since the latest heartbeat. This client would have been terminated but at least one of its threads is processing a message.",
+                        entry.getKey(), (currentTime - latestHeartbeat));
-                    logger.warn(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_MONITORING_CLIENT_WITH_MEMBER_ID_0_IT_HAD_BEEN_1_MS_SINCE_THE_LATEST_HEARTBEAT_MAX_INTERVAL_IS_2_TERMINATED_CLIENT, new Object[] {entry.getKey(), currentTime - latestHeartbeat, this._maximumTimeBetweenPings}));
+                    logger.warn(LocalizedMessage.create(
+                        LocalizedStrings.ClientHealthMonitor_MONITORING_CLIENT_WITH_MEMBER_ID_0_IT_HAD_BEEN_1_MS_SINCE_THE_LATEST_HEARTBEAT_MAX_INTERVAL_IS_2_TERMINATED_CLIENT,
+                        new Object[] {entry.getKey(), currentTime - latestHeartbeat,
+                            this._maximumTimeBetweenPings}));
-                  logger.trace("Monitoring client with member id {}. It has been {} ms since the latest heartbeat. This client is healthy.", entry.getKey(), (currentTime - latestHeartbeat));
+                  logger.trace(
+                      "Monitoring client with member id {}. It has been {} ms since the latest heartbeat. This client is healthy.",
+                      entry.getKey(), (currentTime - latestHeartbeat));
-                //logger.warning("Monitoring client with member id " +
+                // logger.warning("Monitoring client with member id " +
-        }
-        catch (InterruptedException e) {
+        } catch (InterruptedException e) {
-          logger.warn(LocalizedMessage.create(LocalizedStrings.ClientHealthMonitor_UNEXPECTED_INTERRUPT_EXITING), e);
+          logger.warn(LocalizedMessage
+              .create(LocalizedStrings.ClientHealthMonitor_UNEXPECTED_INTERRUPT_EXITING), e);
-        }
-        catch (Exception e) {
+        } catch (Exception e) {

INS44 INS44 INS44 INS44 UPD66 UPD66 UPD66 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 UPD66 UPD66 UPD66 UPD66 INS42 UPD66 UPD66 UPD66 INS42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS25 INS42 INS42 INS9 INS42 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS8 INS8 MOV25 INS21 INS32 INS42 INS42 INS32 INS42 INS42 INS40 INS3 INS5 INS4 INS43 INS85 INS42 INS16 INS42 INS27 INS45 INS32 INS42 INS33 INS42 INS42 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66