GEODE-17: JSONAuthorization permissions are now defined as resource:operation

+import java.util.ArrayList;
+import java.util.List;
+  static class Permission {
+
+    private final Resource resource;
+    private final OperationCode operationCode;
+    private final String region;
+
+    Permission(Resource resource, OperationCode operationCode, String region) {
+      this.resource = resource;
+      this.operationCode = operationCode;
+      this.region = region;
+    }
+
+    public Resource getResource() {
+      return resource;
+    }
+
+    public OperationCode getOperationCode() {
+      return operationCode;
+    }
+
+    public String getRegion() {
+      return region;
+    }
+
+    @Override
+    public String toString() {
+      String result = resource.toString() + ":" + operationCode.toString();
+      result += (region != null) ? "[" + region + "]" : "";
+      return result;
+    }
+  }
+
-    String[] permissions;
+    List<Permission> permissions = new ArrayList<>();
-    Role[] roles;
+    Set<Permission> permissions = new HashSet<>();
-    acl = new HashMap<String, User>();
+    acl = new HashMap<>();
-  public static Set<OperationCode> getAuthorizedOps(User user, ResourceOperationContext context) {
-    Set<OperationCode> codeList = new HashSet<OperationCode>();
-    for (Role role : user.roles) {
-      for (String perm : role.permissions) {
-        OperationCode code = OperationCode.valueOf(perm);
-        if (role.regionName == null && role.serverGroup == null) {
-          addPermissions(code, codeList);
-        } else if (role.regionName != null) {
-          LogService.getLogger().info("This role requires region=" + role.regionName);
-          if (context instanceof CLIOperationContext) {
-            CLIOperationContext cliContext = (CLIOperationContext) context;
-            String region = cliContext.getCommandOptions().get("region");
-            if (region != null && region.equals(role.regionName)) {
-              addPermissions(code, codeList);
-            } else {
-              LogService.getLogger()
-                  .info("Not adding permission " + code + " since region=" + region + " does not match");
-            }
-          }
-        }
-        // Same to be implemented for ServerGroup
-      }
-    }
-    LogService.getLogger().info("Final set of permisions " + codeList);
-    return codeList;
-  }
-
-  private static void addPermissions(OperationCode code, Set<OperationCode> codeList) {
-    if (code == null) {
-      return;
-    }
-    codeList.add(code);
-  }
-
-  private static void readUsers(Map<String, User> acl, JSONObject jsonBean,
-      Map<String, Role> roleMap) throws JSONException {
+  private static void readUsers(Map<String, User> acl, JSONObject jsonBean, Map<String, Role> roleMap)
+      throws JSONException {
-      user.roles = new Role[ops.length()];
-        user.roles[j] = roleMap.get(roleName);
-        if (user.roles[j] == null) {
-          throw new RuntimeException("Role not present " + roleName);
-        }
+
+        user.permissions.addAll(roleMap.get(roleName).permissions);
-    Map<String, Role> roleMap = new HashMap<String, Role>();
+    Map<String, Role> roleMap = new HashMap<>();
+        // The default region is null and not the empty string
+        String region = obj.optString("region", null);
-        role.permissions = new String[ops.length()];
-          role.permissions[j] = ops.getString(j);
+          String[] parts = ops.getString(j).split(":");
+          Resource r = Resource.valueOf(parts[0]);
+          OperationCode op = parts.length > 1 ? OperationCode.valueOf(parts[1]) : OperationCode.ALL;
+          role.permissions.add(new Permission(r, op, region));
-    for (int i = 0; i < array.length(); i++) {
-      JSONObject obj = array.getJSONObject(i);
-      String name = obj.getString("name");
-      Role role = roleMap.get(name);
-      if (role == null) {
-        throw new RuntimeException("Role not present " + role);
-      }
-      if (obj.has("inherit")) {
-        JSONArray parentRoles = obj.getJSONArray("inherit");
-        for (int m = 0; m < parentRoles.length(); m++) {
-          String parentRoleName = parentRoles.getString(m);
-          Role parentRole = roleMap.get(parentRoleName);
-          if (parentRole == null) {
-            throw new RuntimeException("Role not present " + parentRoleName);
-          }
-          int oldLenth = 0;
-          if (role.permissions != null) oldLenth = role.permissions.length;
-          int newLength = oldLenth + parentRole.permissions.length;
-          String[] str = new String[newLength];
-          int k = 0;
-          if (role.permissions != null) {
-            for (; k < role.permissions.length; k++) {
-              str[k] = role.permissions[k];
-            }
-          }
-
-          for (int l = 0; l < parentRole.permissions.length; l++) {
-            str[k + l] = parentRole.permissions[l];
-          }
-          role.permissions = str;
-        }
-      }
-
-    }
-        LogService.getLogger().info("Checking for code " + ctx.getOperationCode());
+        LogService.getLogger().info("Checking for permission " + ctx.getResource() + ":" + ctx.getOperationCode());
-        if (ctx.getOperationCode() == null) return true;
+        if (ctx.getOperationCode() == null) {
+          return true;
+        }
-        for (OperationCode code : getAuthorizedOps(user, (ResourceOperationContext) context)) {
-          if (ctx.getOperationCode().equals(code)) {
+        for (Permission perm : acl.get(user.name).permissions) {
+          if (ctx.getResource() == perm.getResource() && ctx.getOperationCode() == perm.getOperationCode()) {
-            LogService.getLogger().info("found code " + code.toString());
+            LogService.getLogger().info("Found permission " + perm);
-        if (found) return true;
+        if (found) {
+          return true;
+        }

INS26 INS26 INS40 INS40 INS55 INS55 MOV83 UPD42 MOV42 MOV23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS42 MOV23 INS23 MOV23 INS83 INS83 INS43 INS83 INS83 MOV43 INS59 INS83 INS83 MOV43 INS59 INS42 MOV44 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 MOV43 INS42 INS8 INS83 MOV43 INS42 INS8 INS78 INS83 MOV43 INS42 INS8 INS74 UPD74 MOV74 MOV59 UPD42 MOV42 UPD42 INS42 INS42 UPD43 UPD42 MOV43 INS42 MOV43 UPD42 MOV42 INS21 MOV21 MOV21 UPD42 MOV42 INS41 INS41 INS41 INS42 INS60 INS21 MOV41 INS43 INS43 INS14 INS43 UPD42 UPD42 INS7 INS7 INS7 INS42 INS42 INS42 MOV43 INS59 INS7 UPD42 UPD42 MOV42 INS42 INS74 INS42 UPD74 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS27 INS42 INS16 INS43 UPD74 UPD74 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS45 INS32 INS36 INS27 INS45 INS42 INS60 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV27 UPD45 MOV45 MOV42 UPD45 MOV45 INS32 MOV43 INS59 INS8 INS22 INS8 INS40 INS42 INS22 INS42 INS32 INS60 INS60 INS60 MOV32 MOV41 UPD43 UPD42 INS32 INS42 MOV41 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 INS45 INS33 MOV5 INS59 INS43 INS59 MOV43 INS59 INS32 UPD45 INS32 INS45 UPD42 UPD42 MOV42 INS42 INS40 INS27 INS42 INS32 INS42 INS42 INS32 INS42 INS16 INS40 INS42 INS14 INS42 INS42 INS27 INS27 MOV32 INS42 INS45 INS42 INS42 INS2 INS27 INS32 INS40 INS43 INS42 INS42 INS42 INS32 INS32 MOV32 INS32 INS42 INS34 INS40 INS34 INS42 INS42 INS2 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS34 UPD45 INS42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL40 DEL27 DEL32 DEL43 DEL85 DEL5 DEL42 DEL43 DEL83 DEL55 DEL42 DEL43 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL74 DEL60 DEL42 DEL43 DEL42 DEL44 DEL40 DEL44 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL33 DEL27 DEL27 DEL8 DEL40 DEL33 DEL27 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL25 DEL8 DEL70 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL7 DEL21 DEL40 DEL42 DEL2 DEL7 DEL40 DEL42 DEL2 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL40 DEL32 DEL3 DEL7 DEL21 DEL40 DEL42 DEL2 DEL7 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL40 DEL33 DEL27 DEL42 DEL40 DEL7 DEL21 DEL25 DEL39 DEL42 DEL42 DEL40 DEL27 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL40 DEL33 DEL27 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL40 DEL42 DEL2 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL27 DEL2 DEL40 DEL42 DEL2 DEL7 DEL21 DEL8 DEL24 DEL40 DEL42 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL43 DEL42 DEL11 DEL32 DEL32 DEL42 DEL42 DEL32