Merge branch 'release/1.3.0'

-import org.apache.geode.internal.offheap.annotations.Released;
-  private final Map<Object, Set> keysOfInterest = new CopyOnWriteHashMap<>();
+  private final CopyOnWriteHashMap<Object, Set> keysOfInterest = new CopyOnWriteHashMap<>();
-  private final Map<Object, Set> keysOfInterestInv = new CopyOnWriteHashMap<>();
+  private final CopyOnWriteHashMap<Object, Set> keysOfInterestInv = new CopyOnWriteHashMap<>();
-  private final Map<Object, Map<Object, Pattern>> patternsOfInterest = new CopyOnWriteHashMap<>();
+  private final CopyOnWriteHashMap<Object, Map<Object, Pattern>> patternsOfInterest =
+      new CopyOnWriteHashMap<>();
-  private final Map<Object, Map<Object, Pattern>> patternsOfInterestInv =
+  private final CopyOnWriteHashMap<Object, Map<Object, Pattern>> patternsOfInterestInv =
-  private final Map<Object, Map> filtersOfInterest = new CopyOnWriteHashMap<>();
+  private final CopyOnWriteHashMap<Object, Map> filtersOfInterest = new CopyOnWriteHashMap<>();
-  private final Map<Object, Map> filtersOfInterestInv = new CopyOnWriteHashMap<>();
+  private final CopyOnWriteHashMap<Object, Map> filtersOfInterestInv = new CopyOnWriteHashMap<>();
-  private final Set<Long> allKeyClients = new CopyOnWriteHashSet<>();
+  private final CopyOnWriteHashSet<Long> allKeyClients = new CopyOnWriteHashSet<>();
-  private final Set<Long> allKeyClientsInv = new CopyOnWriteHashSet<>();
+  private final CopyOnWriteHashSet<Long> allKeyClientsInv = new CopyOnWriteHashSet<>();
-  private final Map cqs = new CopyOnWriteHashMap();
+  private final CopyOnWriteHashMap<String, ServerCQ> cqs = new CopyOnWriteHashMap<>();
+    this(r, r.getMyId(), r.getGemFireCache().getCacheServers().size() > 0);
+  }
+
+  /**
+   * used for instantiation of a profile associated with a region and not describing region filters
+   * in a different process. Do not use this method when instantiating profiles to store in
+   * distribution advisor profiles.
+   */
+  public FilterProfile(LocalRegion r, DistributedMember member, boolean hasCacheServer) {
-    this.memberID = region.getMyId();
+    this.memberID = member;
-    this.localProfile.hasCacheServer = (r.getGemFireCache().getCacheServers().size() > 0);
+    this.localProfile.hasCacheServer = hasCacheServer;
-
-    InternalDataSerializer.invokeToData(((InternalDistributedMember) memberID), out);
-    InternalDataSerializer.writeSetOfLongs(this.allKeyClients, this.clientMap.hasLongID, out);
-    DataSerializer.writeHashMap(this.keysOfInterest, out);
-    DataSerializer.writeHashMap(this.patternsOfInterest, out);
-    DataSerializer.writeHashMap(this.filtersOfInterest, out);
+    InternalDataSerializer.invokeToData(memberID, out);
+    InternalDataSerializer.writeSetOfLongs(this.allKeyClients.getSnapshot(),
+        this.clientMap.hasLongID, out);
+    DataSerializer.writeHashMap(this.keysOfInterest.getSnapshot(), out);
+    DataSerializer.writeHashMap(this.patternsOfInterest.getSnapshot(), out);
+    DataSerializer.writeHashMap(this.filtersOfInterest.getSnapshot(), out);
-    InternalDataSerializer.writeSetOfLongs(this.allKeyClientsInv, this.clientMap.hasLongID, out);
-    DataSerializer.writeHashMap(this.keysOfInterestInv, out);
-    DataSerializer.writeHashMap(this.patternsOfInterestInv, out);
-    DataSerializer.writeHashMap(this.filtersOfInterestInv, out);
+    InternalDataSerializer.writeSetOfLongs(this.allKeyClientsInv.getSnapshot(),
+        this.clientMap.hasLongID, out);
+    DataSerializer.writeHashMap(this.keysOfInterestInv.getSnapshot(), out);
+    DataSerializer.writeHashMap(this.patternsOfInterestInv.getSnapshot(), out);
+    DataSerializer.writeHashMap(this.filtersOfInterestInv.getSnapshot(), out);
-    Map theCQs = this.cqs;
+    Map<String, ServerCQ> theCQs = this.cqs.getSnapshot();
-    for (Iterator it = theCQs.entrySet().iterator(); it.hasNext();) {
-      Map.Entry entry = (Map.Entry) it.next();
-      String name = (String) entry.getKey();
-      ServerCQ cq = (ServerCQ) entry.getValue();
+    for (Iterator<Map.Entry<String, ServerCQ>> it = theCQs.entrySet().iterator(); it.hasNext();) {
+      Map.Entry<String, ServerCQ> entry = it.next();
+      String name = entry.getKey();
+      ServerCQ cq = entry.getValue();
-        CacheDistributionAdvisee r = findRegion();
+        CacheDistributionAdvisee r = findRegion(dm);
-    private CacheDistributionAdvisee findRegion() {
+    private CacheDistributionAdvisee findRegion(DistributionManager dm) {
-      InternalCache cache;
-        cache = GemFireCacheImpl.getInstance();
+        InternalCache cache = dm.getCache();

INS31 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 INS74 INS29 INS83 INS42 INS44 INS8 INS44 INS44 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS43 INS43 INS43 INS65 INS43 INS42 INS17 INS43 INS42 INS39 INS42 INS44 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 INS42 INS74 INS66 INS66 INS66 INS42 INS42 INS32 MOV27 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS74 INS43 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 MOV43 MOV43 MOV43 INS32 INS74 INS42 MOV22 INS42 UPD42 UPD42 UPD42 MOV22 INS42 UPD42 UPD42 UPD42 MOV22 INS42 MOV43 INS74 INS74 MOV43 MOV43 INS60 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV32 MOV32 MOV32 MOV43 INS59 INS42 INS42 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL43 DEL42 DEL42 DEL32 DEL36 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL11 DEL11 DEL11 DEL42 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21