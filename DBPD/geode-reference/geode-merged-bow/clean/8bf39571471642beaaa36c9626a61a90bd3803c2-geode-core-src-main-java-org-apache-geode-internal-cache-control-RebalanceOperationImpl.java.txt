Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
-  RebalanceOperationImpl(GemFireCacheImpl cache, boolean simulation,
-      RegionFilter filter) {
+
+  RebalanceOperationImpl(GemFireCacheImpl cache, boolean simulation, RegionFilter filter) {
-    
+
-      this.scheduleRebalance();      
+      this.scheduleRebalance();
-  
+
-    
+
-    for(PartitionedRegion region: cache.getPartitionedRegions()) {
-      if(cancelled.get()) {
-        break;
-      }
-      try {
-        //Colocated regions will be rebalanced as part of rebalancing their leader
+      for (PartitionedRegion region : cache.getPartitionedRegions()) {
+        if (cancelled.get()) {
+          break;
+        }
+        try {
+          // Colocated regions will be rebalanced as part of rebalancing their leader
-            
+
-              if (Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "DISABLE_MOVE_PRIMARIES_ON_STARTUP")) {
-                PartitionedRegionRebalanceOp prOp = new PartitionedRegionRebalanceOp(
-                    region, simulation, new CompositeDirector(false, false, false, true), true, true, cancelled,
-                    stats);
-                this.futureList.add(submitRebalanceTask(prOp,start));
+              if (Boolean.getBoolean(
+                  DistributionConfig.GEMFIRE_PREFIX + "DISABLE_MOVE_PRIMARIES_ON_STARTUP")) {
+                PartitionedRegionRebalanceOp prOp = new PartitionedRegionRebalanceOp(region,
+                    simulation, new CompositeDirector(false, false, false, true), true, true,
+                    cancelled, stats);
+                this.futureList.add(submitRebalanceTask(prOp, start));
-              PartitionedRegionRebalanceOp prOp = new PartitionedRegionRebalanceOp(
-                  region, simulation, new CompositeDirector(true, true, true, true), true, true, cancelled,
-                  stats);
-              this.futureList.add(submitRebalanceTask(prOp,start));
-            }            
+              PartitionedRegionRebalanceOp prOp =
+                  new PartitionedRegionRebalanceOp(region, simulation,
+                      new CompositeDirector(true, true, true, true), true, true, cancelled, stats);
+              this.futureList.add(submitRebalanceTask(prOp, start));
+            }
-      } catch(RegionDestroyedException e) {
-        //ignore, go on to the next region
+        } catch (RegionDestroyedException e) {
+          // ignore, go on to the next region
+        }
-    }
-      if(pendingTasks == 0) {
-        //if we didn't submit any tasks, end the rebalance now.
+      if (pendingTasks == 0) {
+        // if we didn't submit any tasks, end the rebalance now.
-  
-  private Future<RebalanceResults> submitRebalanceTask(final PartitionedRegionRebalanceOp rebalanceOp, final long rebalanceStartTime) {
+
+  private Future<RebalanceResults> submitRebalanceTask(
+      final PartitionedRegionRebalanceOp rebalanceOp, final long rebalanceStartTime) {
-    synchronized(futureLock) {
-      //this update should happen inside this.futureLock 
+    synchronized (futureLock) {
+      // this update should happen inside this.futureLock
-            }
-            catch (RuntimeException e) {
+            } catch (RuntimeException e) {
-                if(pendingTasks == 0) {//all threads done
+                if (pendingTasks == 0) {// all threads done
-      } catch(RejectedExecutionException e) {
+      } catch (RejectedExecutionException e) {
-  
+
-    synchronized(this.futureList) {
+    synchronized (this.futureList) {
-  
+
-    
+
-      for(Future<RebalanceResults> fr : getFutureList()) {
-        if(fr.cancel(false)) {
+      for (Future<RebalanceResults> fr : getFutureList()) {
+        if (fr.cancel(false)) {
-      if(pendingTasks == 0 ) {
+      if (pendingTasks == 0) {
-    
+
-    List<Future<RebalanceResults>> frlist =  getFutureList();
-    for(Future<RebalanceResults> fr : frlist) {
+    List<Future<RebalanceResults>> frlist = getFutureList();
+    for (Future<RebalanceResults> fr : frlist) {
-        RebalanceResults rr =  fr.get();
-        results.addDetails((RebalanceResultsImpl)rr);
-        
+        RebalanceResults rr = fr.get();
+        results.addDetails((RebalanceResultsImpl) rr);
+
-        if(e.getCause() instanceof GemFireException) {
+        if (e.getCause() instanceof GemFireException) {
-        } else if(e.getCause() instanceof InternalGemFireError) {
+        } else if (e.getCause() instanceof InternalGemFireError) {
-    
+
-    List<Future<RebalanceResults>> frlist =  getFutureList();
-    for(Future<RebalanceResults> fr : frlist) {
+    List<Future<RebalanceResults>> frlist = getFutureList();
+    for (Future<RebalanceResults> fr : frlist) {
-        RebalanceResults rr =  fr.get(waitTime, TimeUnit.NANOSECONDS);                
-        results.addDetails((RebalanceResultsImpl)rr);
+        RebalanceResults rr = fr.get(waitTime, TimeUnit.NANOSECONDS);
+        results.addDetails((RebalanceResultsImpl) rr);
-        if(e.getCause() instanceof GemFireException) {
+        if (e.getCause() instanceof GemFireException) {
-        } else if(e.getCause() instanceof InternalGemFireError) {
+        } else if (e.getCause() instanceof InternalGemFireError) {
-    for(Future<RebalanceResults> fr : getFutureList()) {
-      if(!fr.isDone())
+    for (Future<RebalanceResults> fr : getFutureList()) {
+      if (!fr.isDone())
-  
+
-  
+

