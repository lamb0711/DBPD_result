GEODE-6883 Move the membership code into a separate gradle sub-project

This commit is focused on removing references to
InternalDistributedMember and DistributionMessage from "gms"
packages.

    GMS classes only refer to GMSMember
    GMS classes use GMSMembershipView.  NetView is now an interface
    GMS classes do not refer to DistributionMessage.  JGroupsMessenger
      expects GMSMessage instances.  Geode messages to be sent over UDP
      are wrapped in a GMSMessageAdapter.
    "gms" messages extend AbstractGMSMessage which implements GMSMessage
    GMSMembershipManager has an inner class that implements the GMS Manager
      interface and is now in the "adapter" package
    GMSMembershipManager translates GMSMembershipView into a MembershipView
      for the rest of Geode to use (this is the old NetView class)
    GMS instantiation allows us to inject the Manager into the new Services
      instance.
    Other adapter classes have been added to translate between Geode
      and GMS.

    GMSUtil has new methods for marshalling/unmarshalling
    InternalDistributedMember instances for backward-compatibility.
    GMSMember now has the same on-wire form as
    InternalDistributedMember.  This allows the GMS classes to
    deserialize a message from a pre-1.10 member whose code writes
    InternalDistributedMembers when serializing something like a
    JoinRequest.

+import static org.apache.geode.distributed.internal.membership.gms.messages.AbstractGMSMessage.ALL_RECIPIENTS;
-import java.util.Arrays;
-import org.apache.geode.distributed.DistributedMember;
-import org.apache.geode.distributed.DurableClientAttributes;
-import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.distributed.internal.DistributionMessage;
-import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;
-import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
-import org.apache.geode.distributed.internal.membership.MemberAttributes;
-import org.apache.geode.distributed.internal.membership.NetView;
-import org.apache.geode.distributed.internal.membership.QuorumChecker;
+import org.apache.geode.distributed.internal.membership.gms.GMSMembershipView;
+import org.apache.geode.distributed.internal.membership.gms.GMSUtil;
+import org.apache.geode.distributed.internal.membership.gms.interfaces.GMSMessage;
-import org.apache.geode.internal.cache.DirectReplyMessage;
-   * The location (in the product) of the locator Jgroups config file.
+   * The location (in the product) of the non-mcast Jgroups config file.
-  InternalDistributedMember localAddress;
+  GMSMember localAddress;
-  private volatile NetView view;
+  private volatile GMSMembershipView view;
-  protected final Map<DistributedMember, MessageTracker> scheduledMcastSeqnos = new HashMap<>();
+  protected final Map<GMSMember, MessageTracker> scheduledMcastSeqnos = new HashMap<>();
-   * DistributedMember identifiers already used, either in this JGroupsMessenger instance
+   * Member identifiers already used, either in this JGroupsMessenger instance
-  private Set<DistributedMember> usedDistributedMemberIdentifiers = new HashSet<>();
+  private Set<GMSMember> usedMemberIdentifiers = new HashSet<>();
-        usedDistributedMemberIdentifiers = oldInfo.getMembershipIdentifiers();
+        usedMemberIdentifiers = oldInfo.getMembershipIdentifiers();
-  public boolean isOldMembershipIdentifier(DistributedMember id) {
-    return usedDistributedMemberIdentifiers.contains(id);
+  public boolean isOldMembershipIdentifier(GMSMember id) {
+    return usedMemberIdentifiers.contains(id);
-      usedDistributedMemberIdentifiers.add(localAddress);
+      usedMemberIdentifiers.add(localAddress);
-  public void memberSuspected(InternalDistributedMember initiator,
-      InternalDistributedMember suspect, String reason) {}
+  public void memberSuspected(GMSMember initiator,
+      GMSMember suspect, String reason) {}
-  public void installView(NetView v) {
+  public void installView(GMSMembershipView v) {
-    List<JGAddress> mbrs = new ArrayList<>(v.size());
-    mbrs.addAll(v.getMembers().stream().map(JGAddress::new).collect(Collectors.toList()));
+    List<JGAddress> mbrs = v.getMembers().stream().map(JGAddress::new).collect(Collectors.toList());
-      for (DistributedMember mbr : v.getCrashedMembers()) {
+      for (GMSMember mbr : v.getCrashedMembers()) {
-      for (DistributedMember mbr : v.getShutdownMembers()) {
+      for (GMSMember mbr : v.getShutdownMembers()) {
-    NetView v = this.view;
+    GMSMembershipView v = this.view;
-      List<InternalDistributedMember> members = v.getMembers();
-      InternalDistributedMember recipient = null;
-      for (InternalDistributedMember mbr : members) {
-        GMSMember gmsMbr = ((GMSMember) mbr.getNetMember());
+      List<GMSMember> members = v.getMembers();
+      GMSMember recipient = null;
+      for (GMSMember gmsMbr : members) {
-          recipient = mbr;
+          recipient = gmsMbr;
-        .getVmKind() == ClusterDistributionManager.LOCATOR_DM_TYPE)
+        .getVmKind() == GMSMember.LOCATOR_DM_TYPE)
-    DurableClientAttributes dca = null;
-    if (config.getDurableClientId() != null) {
-      dca = new DurableClientAttributes(config.getDurableClientId(),
-          config.getDurableClientTimeout());
-    }
-    MemberAttributes attr = new MemberAttributes(-1/* dcPort - not known at this time */,
-        OSProcess.getId(), services.getConfig().getTransport().getVmKind(),
-        -1/* view id - not known at this time */, config.getName(),
-        MemberAttributes.parseGroups(config.getRoles(), config.getGroups()), dca);
-    localAddress = new InternalDistributedMember(jgAddress.getInetAddress(), jgAddress.getPort(),
-        config.getEnableNetworkPartitionDetection(), isLocator, attr);
-
-    // add the JGroups logical address to the GMSMember
-    UUID uuid = this.jgAddress;
-    GMSMember gmsMember = (GMSMember) localAddress.getNetMember();
-    gmsMember.setUUID(uuid);
+    String hostname =
+        SocketCreator.resolve_dns ? SocketCreator.getHostName(jgAddress.getInetAddress())
+            : jgAddress.getInetAddress().getHostAddress();
+    GMSMember gmsMember = new GMSMember(jgAddress.getInetAddress(),
+        hostname, jgAddress.getPort(),
+        OSProcess.getId(), (byte) services.getConfig().getTransport().getVmKind(),
+        -1 /* directport */, -1 /* viewID */, config.getName(),
+        GMSUtil.parseGroups(config.getRoles(), config.getGroups()), config.getDurableClientId(),
+        config.getDurableClientTimeout(),
+        config.getEnableNetworkPartitionDetection(), isLocator, Version.CURRENT_ORDINAL,
+        jgAddress.getUUIDMsbs(), jgAddress.getUUIDLsbs());
-    logger.info("Established local address {} with net-member {}", localAddress,
-        localAddress.getNetMember());
+    localAddress = gmsMember;
+    logger.info("Established local address {}", localAddress);
-  public void getMessageState(InternalDistributedMember target, Map<String, Long> state,
+  public void getMessageState(GMSMember target, Map<String, Long> state,
-  public void waitForMessageState(InternalDistributedMember sender, Map<String, Long> state)
+  public void waitForMessageState(GMSMember sender, Map<String, Long> state)
-  public Set<InternalDistributedMember> sendUnreliably(DistributionMessage msg) {
+  public Set<GMSMember> sendUnreliably(GMSMessage msg) {
-  public Set<InternalDistributedMember> send(DistributionMessage msg) {
+  public Set<GMSMember> send(GMSMessage msg) {
-  private Set<InternalDistributedMember> send(DistributionMessage msg, boolean reliably) {
+  private Set<GMSMember> send(GMSMessage msg, boolean reliably) {
-    NetView oldView = this.view;
+    GMSMembershipView oldView = this.view;
-    // JGroupsMessenger does not support direct-replies, so register
-    // the message's processor if necessary
-    if ((msg instanceof DirectReplyMessage) && msg.isDirectAck() && msg.getProcessorId() <= 0) {
-      ((DirectReplyMessage) msg).registerProcessor();
-    }
-
-    InternalDistributedMember[] destinations = msg.getRecipients();
+    List<GMSMember> destinations = msg.getRecipients();
-      String recips = useMcast ? "multicast" : Arrays.toString(msg.getRecipients());
+      String recips = useMcast ? "multicast" : destinations.toString();
-      Message jmsg = createJGMessage(msg, local, Version.CURRENT_ORDINAL);
+      Message jmsg = createJGMessage(msg, local, null, Version.CURRENT_ORDINAL);
-      int len = destinations.length;
+      int len = destinations.size();
-      if (len == 1 && destinations[0] == DistributionMessage.ALL_RECIPIENTS) { // send to all
+      if (len == 1 && destinations.get(0) == ALL_RECIPIENTS) { // send to all
-        NetView v = services.getJoinLeave().getView();
+        GMSMembershipView v = services.getJoinLeave().getView();
-          InternalDistributedMember m = (InternalDistributedMember) v.get(i);
-          calculatedMembers.add((GMSMember) m.getNetMember());
+          GMSMember m = (GMSMember) v.get(i);
+          calculatedMembers.add((GMSMember) m);
-          calculatedMembers.add((GMSMember) destinations[i].getNetMember());
+          calculatedMembers.add((GMSMember) destinations.get(i));
-          Message jmsg = createJGMessage(msg, local, version);
+          Message jmsg = createJGMessage(msg, local, mbr, version);
-    Set<InternalDistributedMember> result = new HashSet<>();
-    NetView newView = this.view;
+    Set<GMSMember> result = new HashSet<>();
+    GMSMembershipView newView = this.view;
-      for (InternalDistributedMember d : destinations) {
+      for (GMSMember d : destinations) {
-  Message createJGMessage(DistributionMessage gfmsg, JGAddress src, short version) {
-    if (gfmsg instanceof DirectReplyMessage) {
-      ((DirectReplyMessage) gfmsg).registerProcessor();
-    }
+  Message createJGMessage(GMSMessage gfmsg, JGAddress src, GMSMember dst, short version) {
+    gfmsg.registerProcessor();
-        writeEncryptedMessage(gfmsg, version, out_stream);
+        writeEncryptedMessage(gfmsg, dst, version, out_stream);
-  void writeEncryptedMessage(DistributionMessage gfmsg, short version, HeapDataOutputStream out)
+  void writeEncryptedMessage(GMSMessage gfmsg, GMSMember recipient, short version,
+      HeapDataOutputStream out)
-      InternalDistributedMember pkMbr = null;
+      GMSMember pkMbr = null;
-
-          pkMbr = gfmsg.getRecipients()[0];
-          requestId = getRequestId(gfmsg, true);
+          pkMbr = recipient;
+          requestId = getRequestId(gfmsg, pkMbr, true);
-          pkMbr = gfmsg.getRecipients()[0];
-          requestId = getRequestId(gfmsg, false);
+          pkMbr = recipient;
+          requestId = getRequestId(gfmsg, pkMbr, false);
-      logger.debug("writeEncryptedMessage gfmsg.getDSFID() = {}  for {} with requestid  {}",
-          gfmsg.getDSFID(), pkMbr, requestId);
+      if (logger.isDebugEnabled()) {
+        logger.debug("writeEncryptedMessage gfmsg.getDSFID() = {} for {} with requestid {}",
+            gfmsg.getDSFID(), pkMbr, requestId);
+      }
-  int getRequestId(DistributionMessage gfmsg, boolean add) {
+  int getRequestId(GMSMessage gfmsg, GMSMember destination, boolean add) {
-      addRequestId(requestId, gfmsg.getRecipients()[0]);
+      addRequestId(requestId, destination);
-  byte[] serializeMessage(DistributionMessage gfmsg, HeapDataOutputStream out_stream)
+  byte[] serializeMessage(GMSMessage gfmsg, HeapDataOutputStream out_stream)
-    GMSMember m = (GMSMember) this.localAddress.getNetMember();
+    GMSMember m = this.localAddress;
-    DataSerializer.writeObject(gfmsg, out_stream);
+    DataSerializer.writeObject(services.getManager().unwrapMessage(gfmsg), out_stream);
-  void setMessageFlags(DistributionMessage gfmsg, Message msg) {
+  void setMessageFlags(GMSMessage gfmsg, Message msg) {
-    if (gfmsg.getProcessorType() == ClusterDistributionManager.HIGH_PRIORITY_EXECUTOR
-        || gfmsg instanceof HighPriorityDistributionMessage || AlertingAction.isThreadAlerting()) {
+    if (gfmsg.isHighPriority() || AlertingAction.isThreadAlerting()) {
-    if (gfmsg instanceof DistributedCacheOperation.CacheOperationMessage) {
-      // we don't want to see our own cache operation messages
-      msg.setTransientFlag(Message.TransientFlag.DONT_LOOPBACK);
-    }
+    msg.setTransientFlag(Message.TransientFlag.DONT_LOOPBACK);
-  void setSender(DistributionMessage dm, GMSMember m, short ordinal) {
-    InternalDistributedMember sender = null;
+  void setSender(GMSMessage dm, GMSMember m, short ordinal) {
+    GMSMember sender = null;
-  DistributionMessage readEncryptedMessage(DataInputStream dis, short ordinal,
+  GMSMessage readEncryptedMessage(DataInputStream dis, short ordinal,
-      logger.debug("readEncryptedMessage Reading Request id " + dfsid + " and requestid is "
-          + requestId + " myid " + this.localAddress);
-      InternalDistributedMember pkMbr = null;
+      if (logger.isDebugEnabled()) {
+        logger.debug("readEncryptedMessage Reading Request id " + dfsid + " and requestid is "
+            + requestId + " myid " + this.localAddress);
+      }
+      GMSMember pkMbr = null;
-        DistributionMessage result = deserializeMessage(in, ordinal);
+        GMSMessage result = deserializeMessage(in, ordinal);
-          setPublicKey(pk, result.getSender());
+          setPublicKey(pk, (GMSMember) result.getSender());
-  DistributionMessage deserializeMessage(DataInputStream in, short ordinal)
+  GMSMessage deserializeMessage(DataInputStream in, short ordinal)
-    DistributionMessage result = DataSerializer.readObject(in);
+    GMSMessage result = services.getManager().wrapMessage(DataSerializer.readObject(in));
-  void filterOutgoingMessage(DistributionMessage m) {
+  void filterOutgoingMessage(GMSMessage m) {
-  void filterIncomingMessage(DistributionMessage m) {
+  void filterIncomingMessage(GMSMessage m) {
-  public InternalDistributedMember getMemberID() {
+  public GMSMember getMemberID() {
-  private InternalDistributedMember getMemberFromView(GMSMember jgId, short version) {
+  private GMSMember getMemberFromView(GMSMember jgId, short version) {
-      usedDistributedMemberIdentifiers.add(localAddress);
+      usedMemberIdentifiers.add(localAddress);
-  public QuorumChecker getQuorumChecker() {
-    NetView view = this.view;
+  public GMSQuorumChecker getQuorumChecker() {
+    GMSMembershipView view = this.view;
-            usedDistributedMemberIdentifiers);
+            usedMemberIdentifiers);
-        DistributionMessage msg = (DistributionMessage) o;
-        assert msg.getSender() != null;
+        GMSMessage msg = services.getManager().wrapMessage(o);
-            .getVmKind() == ClusterDistributionManager.ADMIN_ONLY_DM_TYPE)
+            .getVmKind() == GMSMember.ADMIN_ONLY_DM_TYPE)
-    private void recordScheduledSeqno(DistributedMember member, long seqno) {
+    private void recordScheduledSeqno(GMSMember member, long seqno) {
-    private MessageHandler getMessageHandler(DistributionMessage msg) {
+    private MessageHandler getMessageHandler(GMSMessage msg) {
-  public Set<InternalDistributedMember> send(DistributionMessage msg, NetView alternateView) {
+  public Set<GMSMember> send(GMSMessage msg, GMSMembershipView alternateView) {
-  public byte[] getPublicKey(InternalDistributedMember mbr) {
+  public byte[] getPublicKey(GMSMember mbr) {
-  public void setPublicKey(byte[] publickey, InternalDistributedMember mbr) {
+  public void setPublicKey(byte[] publickey, GMSMember mbr) {
-  private HashMap<Integer, InternalDistributedMember> requestIdVsRecipients = new HashMap<>();
+  private HashMap<Integer, GMSMember> requestIdVsRecipients = new HashMap<>();
-  InternalDistributedMember getRequestedMember(int requestId) {
+  GMSMember getRequestedMember(int requestId) {
-  void addRequestId(int requestId, InternalDistributedMember mbr) {
+  void addRequestId(int requestId, GMSMember mbr) {

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 UPD74 UPD74 UPD74 MOV74 UPD74 UPD74 MOV74 INS44 INS44 INS44 UPD43 UPD43 UPD43 UPD43 UPD43 UPD74 UPD74 UPD43 UPD42 UPD42 UPD43 UPD43 UPD42 UPD43 UPD43 UPD43 UPD43 INS60 INS21 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS43 INS42 MOV21 UPD43 INS43 INS42 UPD43 MOV43 INS42 UPD43 UPD43 MOV21 UPD43 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 UPD43 UPD66 UPD42 UPD66 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD43 MOV43 INS59 MOV43 INS7 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 INS74 UPD74 UPD43 UPD42 INS42 UPD42 INS42 UPD42 UPD42 MOV43 UPD42 INS27 UPD42 UPD43 UPD43 UPD42 UPD42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV32 UPD42 UPD42 UPD42 MOV42 INS16 UPD42 MOV42 UPD42 MOV38 INS42 INS42 UPD45 UPD42 INS43 INS43 UPD43 UPD42 INS42 INS25 MOV22 INS32 MOV32 MOV32 UPD42 INS25 UPD42 INS32 UPD42 UPD42 UPD42 UPD74 UPD43 INS40 INS32 INS32 MOV43 MOV32 INS42 MOV32 INS11 MOV32 MOV32 MOV32 INS42 INS40 INS32 INS32 INS42 UPD42 MOV42 UPD42 UPD43 INS32 INS8 INS32 INS42 MOV42 UPD42 INS32 INS8 UPD43 INS32 INS42 MOV32 UPD42 UPD42 UPD43 UPD43 UPD43 MOV42 MOV43 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS39 MOV32 UPD42 INS42 INS42 INS42 INS42 INS32 UPD43 UPD42 INS42 INS42 MOV21 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV21 UPD42 UPD43 INS42 INS42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD40 MOV42 MOV42 MOV42 UPD42 MOV42 INS33 INS42 INS42 INS32 INS42 UPD43 UPD42 INS42 INS42 UPD42 UPD42 INS32 UPD42 UPD42 INS42 INS42 INS34 UPD42 INS42 INS42 INS42 UPD45 INS32 INS42 INS42 UPD43 INS11 INS42 INS42 UPD40 UPD42 UPD42 INS43 MOV32 UPD43 MOV43 INS42 MOV43 INS42 INS42 UPD42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL36 DEL59 DEL60 DEL33 DEL59 DEL60 DEL32 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL36 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL21 DEL8 DEL25 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL40 DEL42 DEL34 DEL2 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL43 DEL62 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL2 DEL42 DEL42 DEL32 DEL34 DEL2 DEL42 DEL32 DEL34 DEL2 DEL42 DEL32 DEL11 DEL40 DEL27 DEL42 DEL42 DEL43 DEL62 DEL27 DEL27 DEL42 DEL40 DEL43 DEL62 DEL8 DEL25 DEL42 DEL43 DEL42 DEL11 DEL42 DEL42 DEL32 DEL33 DEL27 DEL6