Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This cache deserializable always keeps its byte[] in serialized form
- * and the object form.
+ * This cache deserializable always keeps its byte[] in serialized form and the object form.
-  public StoreAllCachedDeserializable() {
-  }
-  
-  
-  private /*final*/ Object objValue;
+  public StoreAllCachedDeserializable() {}
+
+
+  private /* final */ Object objValue;
-  private /*final*/ byte[] value;
-  
+  private /* final */ byte[] value;
+
-   * +PER_OBJECT_OVERHEAD for VMCachedDeserializable object
-   * +4 for value field
+   * +PER_OBJECT_OVERHEAD for VMCachedDeserializable object +4 for value field
-  /** 
+  /**
-   * Note that, in general, instances of this class should be obtained
-   * via {@link CachedDeserializableFactory}.
+   * Note that, in general, instances of this class should be obtained via
+   * {@link CachedDeserializableFactory}.
-        LocalizedStrings.StoreAllCachedDeserializable_VALUE_MUST_NOT_BE_NULL.toLocalizedString());
+          LocalizedStrings.StoreAllCachedDeserializable_VALUE_MUST_NOT_BE_NULL.toLocalizedString());
-  
+
-  
+
-  
+
-  
+
-    wrapper
-      .setData(this.value, userBits, this.value.length, 
-               false /* Not Reusable as it refers to underlying value */);
+    wrapper.setData(this.value, userBits, this.value.length,
+        false /* Not Reusable as it refers to underlying value */);
-   * Return current value regardless of whether it is serialized or
-   * deserialized: if it was serialized than it is a byte[], otherwise
-   * it is not a byte[].
+   * Return current value regardless of whether it is serialized or deserialized: if it was
+   * serialized than it is a byte[], otherwise it is not a byte[].
-    return MEM_OVERHEAD + CachedDeserializableFactory.getByteSize(this.value)*2;
+    return MEM_OVERHEAD + CachedDeserializableFactory.getByteSize(this.value) * 2;
-  
+
-  
+
-    return cname.substring(getClass().getPackage().getName().length()+1);
+    return cname.substring(getClass().getPackage().getName().length() + 1);
-    return getShortClassName()+"@"+this.hashCode();
+    return getShortClassName() + "@" + this.hashCode();

UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66