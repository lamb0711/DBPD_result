GEODE-2113 Implement SSL over NIO

This fixes several bugs in the original implementation of SSL over NIO.
Notably there were buffer handling problems in MsgReader and the
NioFilters.  This new commit includes code coverage for these classes
in new tests.

Original commit message:

This removes old-I/O use in TCPConduit peer-to-peer communications.
This was used for SSL/TLS secure commuications but Java has had an
SSLEngine implementation that allows you to implement secure communications
on new-I/O SocketChannels or any other transport mechanism.

A new NioSSLEngine class wraps the JDK's SSLEngine and provides the
SSL handshake as well as encryption/decryption of messages. SocketCreator
performs the SSL handshake and returns a NioSslEngine that TCPConduit
then uses for messaging.

The SSL handshake needs to be done in Connection.java now because the
ByteBuffer used to do the handshake is also used for reading messages
in Receivers. Because of this the Handshake pool in TCPConduit became
obsolete and I deleted it.

I've also done a lot of cleanup of compilation warnings in Connection.java
and removed references to "NIO". The primary SSL/TLS changes in that class
are in writeFully (renamed from nioWriteFully) and processBuffer (renamed
from processNIOBuffer).

While testing I noticed some places where we're creating non-daemon
threads that were keeping DUnit ChildVM processes from exiting.  I've
changed these places to use daemon threads.  Very few threads in Geode
should be non-daemon.

Porting client/server to use NioSSLEngine will be done under a separate
ticket and a different version of NioEngine may be created to secure
UDP messaging.

+      if (logger.isDebugEnabled()) {
+        logger.debug("created PendingConnection {}", pc);
+      }
+      int attempt = 0;
-        if (!this.pending)
+        if (!this.pending) {
+        }
-          if (logger.isDebugEnabled()) {
+          attempt += 1;
+          if (logger.isDebugEnabled() && (attempt % 20 == 1)) {
+
+    public String toString() {
+      return super.toString() + " created by " + connectingThread.getName();
+    }

INS31 INS83 INS43 INS42 INS8 INS60 INS42 INS41 INS25 INS39 INS59 INS27 INS32 INS8 INS42 INS34 INS48 INS45 INS32 INS42 INS42 INS21 INS8 INS42 INS42 INS42 INS32 INS10 INS21 INS42 INS42 INS45 INS42 INS7 INS27 INS42 INS34 MOV32 INS36 INS27 INS27 INS34 INS42 INS34 DEL10