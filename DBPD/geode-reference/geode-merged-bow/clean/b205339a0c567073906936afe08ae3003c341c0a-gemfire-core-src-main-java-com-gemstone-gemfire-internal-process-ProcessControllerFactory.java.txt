Merge branch 'feature/GEODE-8' into develop

+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+import com.gemstone.gemfire.internal.util.StopWatch;
+    if (arguments == null) {
+      throw new NullPointerException("ProcessControllerParameters must not be null");
+    }
-  public ProcessController createProcessController(final ProcessControllerParameters arguments, final File pidFile) throws IOException {
-    return createProcessController(arguments, readPid(pidFile));
+  public ProcessController createProcessController(final ProcessControllerParameters arguments, final File pidFile, final long timeout, final TimeUnit unit) throws IOException, InterruptedException, TimeoutException {
+    if (arguments == null) {
+      throw new NullPointerException("ProcessControllerParameters must not be null");
+    }
+    if (pidFile == null) {
+      throw new NullPointerException("Pid file must not be null");
+    }
+    return createProcessController(arguments, new PidFile(pidFile).readPid(timeout, unit));
-  public ProcessController createProcessController(final ProcessControllerParameters arguments, final File directory, final String pidFilename) throws IOException {
-    return createProcessController(arguments, readPid(directory, pidFilename));
+  public ProcessController createProcessController(final ProcessControllerParameters arguments, final File directory, final String pidFilename, final long timeout, final TimeUnit unit) throws IOException, InterruptedException, TimeoutException {
+    if (arguments == null) {
+      throw new NullPointerException("ProcessControllerParameters must not be null");
+    }
+    if (directory == null) {
+      throw new NullPointerException("Directory must not be null");
+    }
+    if (pidFilename == null) {
+      throw new NullPointerException("Pid file name must not be null");
+    }
+    return createProcessController(arguments, new PidFile(directory, pidFilename).readPid(timeout, unit));
-  
-  /**
-   * Reads in the pid from the specified file.
-   * 
-   * @param pidFile the file containing the pid of the process to stop
-   * 
-   * @return the process id (pid) contained within the pidFile
-   * 
-   * @throws IllegalArgumentException if the pid in the pidFile is not a positive integer
-   * @throws IOException if unable to read from the specified file
-   * @throws NumberFormatException if the pid file does not contain a parsable integer
-   */
-  private static int readPid(File pidFile) throws IOException {
-    BufferedReader fileReader = null;
-    String pidValue = null;
-
-    try {
-      fileReader = new BufferedReader(new FileReader(pidFile));
-      pidValue = fileReader.readLine();
-
-      final int pid = Integer.parseInt(pidValue);
-
-      if (pid < 1) {
-        throw new IllegalArgumentException("Invalid pid '" + pid + "' found in " + pidFile.getCanonicalPath());
-      }
-
-      return pid;
-    }
-    catch (NumberFormatException e) {
-      throw new IllegalArgumentException("Invalid pid '" + pidValue + "' found in " + pidFile.getCanonicalPath());
-    }
-    finally {
-      IOUtils.close(fileReader);
-    }
-  }
-
-  /**
-   * Reads in the pid from the named file contained within the specified
-   * directory.
-   * 
-   * @param directory directory containing a file of name pidFileName
-   * @param pidFilename name of the file containing the pid of the process to stop
-   * 
-   * @return the process id (pid) contained within the pidFile
-   * 
-   * @throws FileNotFoundException if the specified file name is not found within the directory
-   * @throws IllegalArgumentException if the pid in the pidFile is not a positive integer
-   * @throws IllegalStateException if dir is not an existing directory
-   * @throws IOException if an I/O error occurs
-   * @throws NumberFormatException if the pid file does not contain a parsable integer
-   */
-  private static int readPid(final File directory, final String pidFilename) throws IOException {
-    if (!directory.isDirectory() && directory.exists()) {
-      throw new IllegalArgumentException("Argument '" + directory + "' must be an existing directory!");
-    }
-
-    final File[] files = directory.listFiles(new FilenameFilter() {
-      @Override
-      public boolean accept(File file, String filename) {
-        return filename.equals(pidFilename);
-      }
-    });
-
-    if (files.length == 0) {
-      throw new FileNotFoundException("Unable to find PID file '" + pidFilename + "' in directory " + directory);
-    }
-
-    return readPid(files[0]);
-  }

INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS31 MOV83 MOV43 MOV42 MOV44 MOV44 INS44 MOV44 MOV43 UPD43 MOV43 INS43 INS8 UPD83 MOV43 INS42 MOV44 MOV44 MOV44 INS44 INS43 INS43 INS25 INS83 INS39 INS42 INS83 UPD43 UPD42 UPD42 UPD42 MOV42 INS25 MOV25 INS41 INS83 INS39 INS42 UPD43 UPD42 UPD42 MOV42 INS42 INS25 INS27 INS8 UPD42 INS27 INS8 UPD27 INS32 UPD42 UPD27 INS27 INS8 INS32 INS42 INS33 INS53 INS42 INS33 INS53 UPD42 INS33 INS42 INS42 INS32 INS42 INS33 INS42 INS33 INS53 INS42 INS33 INS42 INS42 INS32 INS14 INS14 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS14 INS14 MOV42 INS42 INS42 INS43 INS45 UPD43 MOV43 INS45 UPD43 INS45 UPD43 MOV43 INS42 UPD43 INS45 UPD43 MOV43 INS45 UPD43 INS45 INS43 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 DEL34 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL12 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL45 DEL42 DEL45 DEL27 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL59 DEL60 DEL40 DEL34 DEL45 DEL42 DEL45 DEL42 DEL27 DEL42 DEL34 DEL2 DEL32