Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

+import org.apache.geode.redis.internal.ByteArrayWrapper;
+import org.apache.geode.redis.internal.ByteToCommandDecoder;
+import org.apache.geode.redis.internal.Coder;
+import org.apache.geode.redis.internal.ExecutionHandlerContext;
+import org.apache.geode.redis.internal.RedisDataType;
+import org.apache.geode.redis.internal.RegionProvider;
+
+import com.gemstone.gemfire.InternalGemFireError;
+import com.gemstone.gemfire.LogWriter;
+import com.gemstone.gemfire.cache.AttributesFactory;
+import com.gemstone.gemfire.cache.Cache;
+import com.gemstone.gemfire.cache.CacheFactory;
+import com.gemstone.gemfire.cache.DataPolicy;
+import com.gemstone.gemfire.cache.EntryEvent;
+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.cache.RegionAttributes;
+import com.gemstone.gemfire.cache.RegionDestroyedException;
+import com.gemstone.gemfire.cache.RegionShortcut;
+import com.gemstone.gemfire.cache.Scope;
+import com.gemstone.gemfire.cache.util.CacheListenerAdapter;
+import com.gemstone.gemfire.distributed.internal.InternalDistributedSystem;
+import com.gemstone.gemfire.internal.SocketCreator;
+import com.gemstone.gemfire.internal.cache.GemFireCacheImpl;
+import com.gemstone.gemfire.internal.cache.InternalRegionArguments;
+import com.gemstone.gemfire.internal.hll.HyperLogLogPlus;
+import com.gemstone.gemfire.internal.i18n.LocalizedStrings;
-      RegionFactory<String, RedisDataType> rfMeta = cache.createRegionFactory(RegionShortcut.REPLICATE);
-      rfMeta.addCacheListener(this.metaListener);
-      RegionFactory<ByteArrayWrapper, ByteArrayWrapper> rfString = cache.createRegionFactory(DEFAULT_REGION_TYPE);
-      RegionFactory<ByteArrayWrapper, HyperLogLogPlus> rfHLL = cache.createRegionFactory(DEFAULT_REGION_TYPE);
-      if ((stringsRegion = this.cache.getRegion(STRING_REGION)) == null)
-        stringsRegion = rfString.create(GeodeRedisServer.STRING_REGION);
+      InternalRegionArguments ira = new InternalRegionArguments().setInternalRegion(true);
+      AttributesFactory af = new AttributesFactory();
+      af.setScope(Scope.LOCAL);
+      RegionAttributes ra = af.create();
-      if ((hLLRegion = this.cache.getRegion(HLL_REGION)) == null)
-        hLLRegion = rfHLL.create(HLL_REGION);
-      if ((redisMetaData = this.cache.getRegion(REDIS_META_DATA_REGION)) == null)
-        redisMetaData = rfMeta.create(REDIS_META_DATA_REGION);
+      GemFireCacheImpl gemFireCache = (GemFireCacheImpl) cache;
+      try {
+        if ((stringsRegion = cache.getRegion(STRING_REGION)) == null) {
+          stringsRegion = gemFireCache.createVMRegion(GeodeRedisServer.STRING_REGION, ra, ira);
+        }
+        if ((hLLRegion = cache.getRegion(HLL_REGION)) == null) {
+          hLLRegion = gemFireCache.createVMRegion(HLL_REGION, ra, ira);
+        }
+        if ((redisMetaData = cache.getRegion(REDIS_META_DATA_REGION)) == null) {
+          af.addCacheListener(metaListener);
+          af.setDataPolicy(DataPolicy.REPLICATE);
+          redisMetaData = gemFireCache.createVMRegion(REDIS_META_DATA_REGION, af.create(), ira);
+        }
+      } catch (IOException | ClassNotFoundException e) {
+        // only if loading snapshot, not here
+        InternalGemFireError assErr = new InternalGemFireError(LocalizedStrings.GemFireCache_UNEXPECTED_EXCEPTION.toLocalizedString());
+        assErr.initCause(e);
+        throw assErr;
+      }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 MOV60 MOV60 INS60 INS60 INS54 INS43 INS59 INS43 MOV59 INS43 INS43 INS59 INS8 INS12 UPD42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 INS14 UPD42 INS42 INS40 UPD42 MOV42 UPD42 UPD42 MOV42 INS42 INS11 MOV25 MOV25 MOV25 INS44 INS8 INS14 INS42 INS9 INS43 UPD42 UPD42 INS43 INS42 INS8 INS8 INS8 INS84 INS42 INS60 INS21 INS53 INS43 INS42 UPD42 MOV42 INS21 INS21 INS21 INS21 INS21 INS43 INS43 INS43 INS59 INS32 INS42 UPD42 MOV42 MOV7 MOV7 INS32 INS32 MOV7 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS43 INS32 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 DEL42 DEL42 DEL40 DEL32 DEL43 DEL43 DEL43 DEL74 DEL60 DEL42 DEL52 DEL42 DEL22 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL52 DEL42 DEL22 DEL21 DEL52 DEL42 DEL22 DEL21 DEL52 DEL42 DEL22 DEL21