Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
+
-public class ClassLoadUtil  {
-  
+public class ClassLoadUtil {
+
-  
+
-    
+
-    
+
+
-   * Resolve the class from the given name.  Supports primitive
-   * types, too.
+   * Resolve the class from the given name. Supports primitive types, too.
-  public static Class classFromName(String className) 
-  throws ClassNotFoundException 
-  {
+  public static Class classFromName(String className) throws ClassNotFoundException {
-  public static Method methodFromName(String fullyQualifiedMethodName,
-      Class[] parameterTypes) throws ClassNotFoundException,
-      NoSuchMethodException, SecurityException {
+  public static Method methodFromName(String fullyQualifiedMethodName, Class[] parameterTypes)
+      throws ClassNotFoundException, NoSuchMethodException, SecurityException {
-      throw new ClassNotFoundException("Static creation function ["
-          + fullyQualifiedMethodName + "] should be fully qualified");
+      throw new ClassNotFoundException(
+          "Static creation function [" + fullyQualifiedMethodName + "] should be fully qualified");
-      throw new NoSuchMethodException(className
-          + " cannot be one of the primitive types");
+      throw new NoSuchMethodException(className + " cannot be one of the primitive types");
-   * Resolve the method from the given qualified name. Only zero argument
-   * methods are supported.
+   * Resolve the method from the given qualified name. Only zero argument methods are supported.
-    return methodFromName(fullyQualifiedMethodName, (Class[])null);
+    return methodFromName(fullyQualifiedMethodName, (Class[]) null);
-   * If the argument className is the name of a primitive type (including
-   * "void"), return the primitive type class (ex, boolean.class).  Otherwise,
-   * return null.
+   * If the argument className is the name of a primitive type (including "void"), return the
+   * primitive type class (ex, boolean.class). Otherwise, return null.
-    
-    return (Class)primTypes.get(className);
+
+    return (Class) primTypes.get(className);
-   * If the argument className is the name of a primitive type (not including
-   * "void"), return the wrapper class for that type (ex, Boolean.class).  
-   * Otherwise, return null.
+   * If the argument className is the name of a primitive type (not including "void"), return the
+   * wrapper class for that type (ex, Boolean.class). Otherwise, return null.
-    
-    return (Class)wrapperTypes.get(className);
+
+    return (Class) wrapperTypes.get(className);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66