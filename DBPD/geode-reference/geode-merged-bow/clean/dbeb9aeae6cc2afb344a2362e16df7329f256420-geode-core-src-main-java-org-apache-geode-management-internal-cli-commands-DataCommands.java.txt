Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_DATA,
-      CliStrings.TOPIC_GEODE_REGION })
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-      @CliOption(key = CliStrings.REBALANCE__INCLUDEREGION, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.REBALANCE__INCLUDEREGION__HELP) String[] includeRegions,
-      @CliOption(key = CliStrings.REBALANCE__EXCLUDEREGION, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.REBALANCE__EXCLUDEREGION__HELP) String[] excludeRegions,
-      @CliOption(key = CliStrings.REBALANCE__TIMEOUT, unspecifiedDefaultValue = "-1", help = CliStrings.REBALANCE__TIMEOUT__HELP) long timeout,
-      @CliOption(key = CliStrings.REBALANCE__SIMULATE, specifiedDefaultValue = "true", unspecifiedDefaultValue = "false", help = CliStrings.REBALANCE__SIMULATE__HELP) boolean simulate) {
+      @CliOption(key = CliStrings.REBALANCE__INCLUDEREGION,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.REBALANCE__INCLUDEREGION__HELP) String[] includeRegions,
+      @CliOption(key = CliStrings.REBALANCE__EXCLUDEREGION,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.REBALANCE__EXCLUDEREGION__HELP) String[] excludeRegions,
+      @CliOption(key = CliStrings.REBALANCE__TIMEOUT, unspecifiedDefaultValue = "-1",
+          help = CliStrings.REBALANCE__TIMEOUT__HELP) long timeout,
+      @CliOption(key = CliStrings.REBALANCE__SIMULATE, specifiedDefaultValue = "true",
+          unspecifiedDefaultValue = "false",
+          help = CliStrings.REBALANCE__SIMULATE__HELP) boolean simulate) {
-          .submit(new ExecuteRebalanceWithTimeout(includeRegions,
-              excludeRegions, simulate)));
+          .submit(new ExecuteRebalanceWithTimeout(includeRegions, excludeRegions, simulate)));
-      result = ResultBuilder
-          .createInfoResult(CliStrings.REBALANCE__MSG__REBALANCE_WILL_CONTINUE);
+      result = ResultBuilder.createInfoResult(CliStrings.REBALANCE__MSG__REBALANCE_WILL_CONTINUE);
-          CliStrings.REBALANCE__MSG__EXCEPTION_OCCRED_WHILE_REBALANCING_0,
-          ex.getMessage()));
+          CliStrings.REBALANCE__MSG__EXCEPTION_OCCRED_WHILE_REBALANCING_0, ex.getMessage()));
-    
-    
+
+
-  
-  private class ExecuteRebalanceWithTimeout implements
-    Callable<Result> {
-  String[] includeRegions = null;
-  String[] excludeRegions = null;
-  boolean simulate;
-  Cache cache = CacheFactory.getAnyInstance();;
-  
-  @Override
-  public Result call() throws Exception {
-    return executeRebalanceWithTimeout(includeRegions, excludeRegions,
-        simulate);
-  }
-  
-  public ExecuteRebalanceWithTimeout(String[] includedRegions,
-      String[] excludedRegions, boolean toSimulate) {
-    includeRegions = includedRegions;
-    excludeRegions = excludedRegions;
-    simulate = toSimulate;
-  }
-  
-  public Result executeRebalanceWithTimeout(String[] includeRegions,
-      String[] excludeRegions, boolean simulate) {
-  
-    Result result = null;
-    try {
-      RebalanceOperation op = null;
-      new HashSet<String>();
-      new HashSet<String>();
-  
-      if (includeRegions != null && includeRegions.length > 0) {
-        CompositeResultData rebalanceResulteData = ResultBuilder
-            .createCompositeResultData();
-        int index = 0;
-  
-        for (String regionName : includeRegions) {
-          
-          //To be removed after region Name specification with "/" is fixed
-          regionName= regionName.startsWith("/") == true ? regionName : ("/"+regionName);
-          Region region = cache.getRegion(regionName);
-  
-          if (region == null) {
-            DistributedMember member = getAssociatedMembers(regionName, cache);
-  
-            if (member == null) {
-              LogWrapper
-                  .getInstance()
-                  .info(
-                      CliStrings
-                          .format(
-                              CliStrings.REBALANCE__MSG__NO_ASSOCIATED_DISTRIBUTED_MEMBER,
-                              regionName));
-              continue;
-            }
-  
-            Function rebalanceFunction = new RebalanceFunction();
-            Object[] functionArgs = new Object[3];
-            functionArgs[0] = simulate ? "true" : "false";
-            Set<String> setRegionName = new HashSet<String>();
-            setRegionName.add(regionName);
-            functionArgs[1] = setRegionName;
-  
-            Set<String> excludeRegionSet = new HashSet<String>();
-            if (excludeRegions != null && excludeRegions.length > 0) {
-  
-              for (String str : excludeRegions) {
-                excludeRegionSet.add(str);
-              }
-            }
-            functionArgs[2] = excludeRegionSet;
-  
-            if (simulate == true) {
-              List resultList = null;
-              try {
-                resultList = (ArrayList) CliUtil.executeFunction(
-                    rebalanceFunction, functionArgs, member).getResult();
-              } catch (Exception ex) {
-                LogWrapper
-                    .getInstance()
-                    .info(
-                        CliStrings.format(
-                            CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception_1,
-                            member.getId(), ex.getMessage()), ex);
-                rebalanceResulteData
-                    .addSection()
-                    .addData(
-                        CliStrings.format(
-                            CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
-                            member.getId()), ex.getMessage());
-                result = ResultBuilder.buildResult(rebalanceResulteData);
+
+  private class ExecuteRebalanceWithTimeout implements Callable<Result> {
+    String[] includeRegions = null;
+    String[] excludeRegions = null;
+    boolean simulate;
+    Cache cache = CacheFactory.getAnyInstance();;
+
+    @Override
+    public Result call() throws Exception {
+      return executeRebalanceWithTimeout(includeRegions, excludeRegions, simulate);
+    }
+
+    public ExecuteRebalanceWithTimeout(String[] includedRegions, String[] excludedRegions,
+        boolean toSimulate) {
+      includeRegions = includedRegions;
+      excludeRegions = excludedRegions;
+      simulate = toSimulate;
+    }
+
+    public Result executeRebalanceWithTimeout(String[] includeRegions, String[] excludeRegions,
+        boolean simulate) {
+
+      Result result = null;
+      try {
+        RebalanceOperation op = null;
+        new HashSet<String>();
+        new HashSet<String>();
+
+        if (includeRegions != null && includeRegions.length > 0) {
+          CompositeResultData rebalanceResulteData = ResultBuilder.createCompositeResultData();
+          int index = 0;
+
+          for (String regionName : includeRegions) {
+
+            // To be removed after region Name specification with "/" is fixed
+            regionName = regionName.startsWith("/") == true ? regionName : ("/" + regionName);
+            Region region = cache.getRegion(regionName);
+
+            if (region == null) {
+              DistributedMember member = getAssociatedMembers(regionName, cache);
+
+              if (member == null) {
+                LogWrapper.getInstance().info(CliStrings.format(
+                    CliStrings.REBALANCE__MSG__NO_ASSOCIATED_DISTRIBUTED_MEMBER, regionName));
-  
-              if (checkResultList(rebalanceResulteData, resultList, member) == true) {
-                result = ResultBuilder.buildResult(rebalanceResulteData);
-                continue;
+
+              Function rebalanceFunction = new RebalanceFunction();
+              Object[] functionArgs = new Object[3];
+              functionArgs[0] = simulate ? "true" : "false";
+              Set<String> setRegionName = new HashSet<String>();
+              setRegionName.add(regionName);
+              functionArgs[1] = setRegionName;
+
+              Set<String> excludeRegionSet = new HashSet<String>();
+              if (excludeRegions != null && excludeRegions.length > 0) {
+
+                for (String str : excludeRegions) {
+                  excludeRegionSet.add(str);
+                }
-              List<String> rstList = tokenize((String) resultList.get(0), ",");
-  
-              result = ResultBuilder.buildResult(toCompositeResultData(
-                  rebalanceResulteData, (ArrayList) rstList, index, simulate,
-                  cache));
+              functionArgs[2] = excludeRegionSet;
+
+              if (simulate == true) {
+                List resultList = null;
+                try {
+                  resultList = (ArrayList) CliUtil
+                      .executeFunction(rebalanceFunction, functionArgs, member).getResult();
+                } catch (Exception ex) {
+                  LogWrapper.getInstance()
+                      .info(CliStrings.format(
+                          CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception_1,
+                          member.getId(), ex.getMessage()), ex);
+                  rebalanceResulteData.addSection()
+                      .addData(CliStrings.format(
+                          CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
+                          member.getId()), ex.getMessage());
+                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  continue;
+                }
+
+                if (checkResultList(rebalanceResulteData, resultList, member) == true) {
+                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  continue;
+                }
+                List<String> rstList = tokenize((String) resultList.get(0), ",");
+
+                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
+                    (ArrayList) rstList, index, simulate, cache));
+              } else {
+                List resultList = null;
+                try {
+                  resultList = (ArrayList) CliUtil
+                      .executeFunction(rebalanceFunction, functionArgs, member).getResult();
+                } catch (Exception ex) {
+                  LogWrapper.getInstance()
+                      .info(CliStrings.format(
+                          CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception_1,
+                          member.getId(), ex.getMessage()), ex);
+                  rebalanceResulteData.addSection()
+                      .addData(CliStrings.format(
+                          CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
+                          member.getId()), ex.getMessage());
+                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  continue;
+                }
+
+                if (checkResultList(rebalanceResulteData, resultList, member) == true) {
+                  result = ResultBuilder.buildResult(rebalanceResulteData);
+                  continue;
+                }
+                List<String> rstList = tokenize((String) resultList.get(0), ",");
+
+                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
+                    (ArrayList) rstList, index, simulate, cache));
+
+              }
+
-              List resultList = null;
-              try {
-                resultList = (ArrayList) CliUtil.executeFunction(
-                    rebalanceFunction, functionArgs, member).getResult();
-              } catch (Exception ex) {
-                LogWrapper
-                    .getInstance()
-                    .info(
-                        CliStrings.format(
-                            CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception_1,
-                            member.getId(), ex.getMessage()), ex);
-                rebalanceResulteData
-                    .addSection()
-                    .addData(
-                        CliStrings.format(
-                            CliStrings.REBALANCE__MSG__EXCEPTION_IN_REBALANCE_FOR_MEMBER_0_Exception,
-                            member.getId()), ex.getMessage());
-                result = ResultBuilder.buildResult(rebalanceResulteData);
-                continue;
+              ResourceManager manager = cache.getResourceManager();
+              RebalanceFactory rbFactory = manager.createRebalanceFactory();
+              Set<String> excludeRegionSet = new HashSet<String>();
+              if (excludeRegions != null) {
+                for (String excludeRegion : excludeRegions)
+                  excludeRegionSet.add(excludeRegion);
-  
-              if (checkResultList(rebalanceResulteData, resultList, member) == true) {
-                result = ResultBuilder.buildResult(rebalanceResulteData);
-                continue;
+              rbFactory.excludeRegions(excludeRegionSet);
+              Set<String> includeRegionSet = new HashSet<String>();
+              includeRegionSet.add(regionName);
+              rbFactory.includeRegions(includeRegionSet);
+
+              if (simulate == true) {
+                op = manager.createRebalanceFactory().simulate();
+                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResulteData,
+                    op.getResults(), index, simulate, cache));
+
+              } else {
+                op = manager.createRebalanceFactory().start();
+                // Wait until the rebalance is complete and then get the results
+                result = ResultBuilder.buildResult(buildResultForRebalance(rebalanceResulteData,
+                    op.getResults(), index, simulate, cache));
+
-              List<String> rstList = tokenize((String) resultList.get(0), ",");
-  
-              result = ResultBuilder.buildResult(toCompositeResultData(
-                  rebalanceResulteData, (ArrayList) rstList, index, simulate,
-                  cache));
-  
-  
-          } else {
-            ResourceManager manager = cache.getResourceManager();
-            RebalanceFactory rbFactory = manager.createRebalanceFactory();
-            Set<String> excludeRegionSet = new HashSet<String>();
-            if (excludeRegions != null) {
-              for (String excludeRegion : excludeRegions)
-                excludeRegionSet.add(excludeRegion);
-            }
-            rbFactory.excludeRegions(excludeRegionSet);
-            Set<String> includeRegionSet = new HashSet<String>();
-            includeRegionSet.add(regionName);
-            rbFactory.includeRegions(includeRegionSet);
-  
-            if (simulate == true) {
-              op = manager.createRebalanceFactory().simulate();
-              result = ResultBuilder.buildResult(buildResultForRebalance(
-                  rebalanceResulteData, op.getResults(), index, simulate,
-                  cache));
-  
-            } else {
-              op = manager.createRebalanceFactory().start();
-              // Wait until the rebalance is complete and then get the results
-              result = ResultBuilder.buildResult(buildResultForRebalance(
-                  rebalanceResulteData, op.getResults(), index, simulate,
-                  cache));
-  
-            }
+            index++;
-          index++;
+          LogWrapper.getInstance().info("Rebalance returning result" + result);
+          return result;
+        } else {
+          result = executeRebalanceOnDS(cache, String.valueOf(simulate), excludeRegions);
+          LogWrapper.getInstance().info("Starting Rebalance simulate false result >> " + result);
-        LogWrapper.getInstance().info("Rebalance returning result" + result);
-        return result;
-      } else {
-        result = executeRebalanceOnDS(cache, String.valueOf(simulate),
-            excludeRegions);
-        LogWrapper.getInstance().info(
-            "Starting Rebalance simulate false result >> " + result);
+      } catch (Exception e) {
+        result = ResultBuilder.createGemFireErrorResult(e.getMessage());
-    } catch (Exception e) {
-      result = ResultBuilder.createGemFireErrorResult(e.getMessage());
+      LogWrapper.getInstance().info("Rebalance returning result >>>" + result);
+      return result;
-    LogWrapper.getInstance().info("Rebalance returning result >>>" + result);
-    return result;
-}
-  boolean checkResultList(CompositeResultData rebalanceResulteData,
-      List resultList, DistributedMember member) {
+  boolean checkResultList(CompositeResultData rebalanceResulteData, List resultList,
+      DistributedMember member) {
-              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION,
-                  member.getId()), ((Exception) object).getMessage());
+              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION, member.getId()),
+              ((Exception) object).getMessage());
-          LogWrapper.getInstance().info(
-              CliStrings.REBALANCE__MSG__NO_EXECUTION + member.getId()
-                  + " exception=" + ((Throwable) object).getMessage(),
-              ((Throwable) object));
+          LogWrapper.getInstance().info(CliStrings.REBALANCE__MSG__NO_EXECUTION + member.getId()
+              + " exception=" + ((Throwable) object).getMessage(), ((Throwable) object));
-              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION,
-                  member.getId()), ((Throwable) object).getMessage());
+              CliStrings.format(CliStrings.REBALANCE__MSG__NO_EXECUTION, member.getId()),
+              ((Throwable) object).getMessage());
-          LogWrapper.getInstance().info(
-              CliStrings.REBALANCE__MSG__NO_EXECUTION + member.getId()
-                  + " exception=" + ((Throwable) object).getMessage(),
-              ((Throwable) object));
+          LogWrapper.getInstance().info(CliStrings.REBALANCE__MSG__NO_EXECUTION + member.getId()
+              + " exception=" + ((Throwable) object).getMessage(), ((Throwable) object));
-          "Rebalancing for member=" + member.getId()
-              + ", resultList is either null or empty");
-      rebalanceResulteData.addSection().addData(
-          "Rebalancing for member=" + member.getId(),
+          "Rebalancing for member=" + member.getId() + ", resultList is either null or empty");
+      rebalanceResulteData.addSection().addData("Rebalancing for member=" + member.getId(),
-  Result executeRebalanceOnDS(Cache cache, String simulate,
-      String[] excludeRegionsList) {
+  Result executeRebalanceOnDS(Cache cache, String simulate, String[] excludeRegionsList) {
-    CompositeResultData rebalanceResulteData = ResultBuilder
-        .createCompositeResultData();
+    CompositeResultData rebalanceResulteData = ResultBuilder.createCompositeResultData();
-    
+
-   
+
-    
+
-        // rebalancing        
-        if (memberPR.dsMemberList.size() > 1) {        
+        // rebalancing
+        if (memberPR.dsMemberList.size() > 1) {
-                resultList = (ArrayList) CliUtil.executeFunction(
-                    rebalanceFunction, functionArgs, dsMember).getResult();
+                resultList = (ArrayList) CliUtil
+                    .executeFunction(rebalanceFunction, functionArgs, dsMember).getResult();
-                result = ResultBuilder.buildResult(toCompositeResultData(
-                    rebalanceResulteData, (ArrayList) rstList, index,
-                    simulate.equals("true") ? true : false, cache));
+                result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
+                    (ArrayList) rstList, index, simulate.equals("true") ? true : false, cache));
-                  rebalanceResulteData
-                      .addSection()
-                      .addData(
-                          CliStrings.format(
-                              CliStrings.REBALANCE__MSG__NO_EXECUTION_FOR_REGION_0_ON_MEMBERS_1,
-                              memberPR.region,
-                              listOfAllMembers(memberPR.dsMemberList)),
-                          CliStrings.REBALANCE__MSG__MEMBERS_MIGHT_BE_DEPARTED);
+                  rebalanceResulteData.addSection().addData(
+                      CliStrings.format(
+                          CliStrings.REBALANCE__MSG__NO_EXECUTION_FOR_REGION_0_ON_MEMBERS_1,
+                          memberPR.region, listOfAllMembers(memberPR.dsMemberList)),
+                      CliStrings.REBALANCE__MSG__MEMBERS_MIGHT_BE_DEPARTED);
-                rebalanceResulteData
-                    .addSection()
-                    .addData(
-                        CliStrings.format(
-                            CliStrings.REBALANCE__MSG__NO_EXECUTION_FOR_REGION_0_ON_MEMBERS_1,
-                            memberPR.region,
-                            listOfAllMembers(memberPR.dsMemberList)),
-                        CliStrings.REBALANCE__MSG__REASON + ex.getMessage());
+                rebalanceResulteData.addSection().addData(
+                    CliStrings.format(
+                        CliStrings.REBALANCE__MSG__NO_EXECUTION_FOR_REGION_0_ON_MEMBERS_1,
+                        memberPR.region, listOfAllMembers(memberPR.dsMemberList)),
+                    CliStrings.REBALANCE__MSG__REASON + ex.getMessage());
-            result = ResultBuilder.buildResult(toCompositeResultData(
-                rebalanceResulteData, (ArrayList) rstList, index,
-                simulate.equals("true") ? true : false, cache));
+            result = ResultBuilder.buildResult(toCompositeResultData(rebalanceResulteData,
+                (ArrayList) rstList, index, simulate.equals("true") ? true : false, cache));
-            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-            .addLine(e.getMessage());
+            .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-    StringBuilder listMembersId = new StringBuilder();    
+    StringBuilder listMembersId = new StringBuilder();
-      listMembersId.append(dsMemberList.get(j).getId());      
+      listMembersId.append(dsMemberList.get(j).getId());
-  protected CompositeResultData toCompositeResultData(
-      CompositeResultData rebalanceResulteData, ArrayList<String> rstlist,
-      int index, boolean simulate, Cache cache) {
+  protected CompositeResultData toCompositeResultData(CompositeResultData rebalanceResulteData,
+      ArrayList<String> rstlist, int index, boolean simulate, Cache cache) {
-    if (rstlist.size() > resultItemCount
-        && rstlist.get(resultItemCount) != null
+    if (rstlist.size() > resultItemCount && rstlist.get(resultItemCount) != null
-      TabularResultData table1 = rebalanceResulteData.addSection().addTable(
-          "Table" + index);
+      TabularResultData table1 = rebalanceResulteData.addSection().addTable("Table" + index);
-      table1.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES);
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES
-          + " = " + rstlist.get(0));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES + " = " + rstlist.get(0));
-      table1.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM);
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM + " = "
-          + rstlist.get(1));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM + " = " + rstlist.get(1));
-      table1.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED);
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED
-          + " = " + rstlist.get(2));
+      resultStr
+          .append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED + " = " + rstlist.get(2));
-      table1.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES);
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES
-          + " = " + rstlist.get(3));
+      resultStr
+          .append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES + " = " + rstlist.get(3));
-      table1.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME);
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME
-          + " = " + rstlist.get(4));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME + " = " + rstlist.get(4));
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED
-          + " = " + rstlist.get(5));
+      resultStr.append(
+          CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED + " = " + rstlist.get(5));
-      table1.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME);
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME
-          + " = " + rstlist.get(6));
+      resultStr
+          .append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME + " = " + rstlist.get(6));
-      resultStr
-          .append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED
-              + " = " + rstlist.get(7));
+      resultStr.append(
+          CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED + " = " + rstlist.get(7));
-      table1.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALTIME);
+      table1.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALTIME);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME + " = "
-          + rstlist.get(8));
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME + " = " + rstlist.get(8));
-  CompositeResultData buildResultForRebalance(
-      CompositeResultData rebalanceResulteData, RebalanceResults results,
-      int index, boolean simulate, Cache cache) {
-    Set<PartitionRebalanceInfo> regions = results
-        .getPartitionRebalanceDetails();
+  CompositeResultData buildResultForRebalance(CompositeResultData rebalanceResulteData,
+      RebalanceResults results, int index, boolean simulate, Cache cache) {
+    Set<PartitionRebalanceInfo> regions = results.getPartitionRebalanceDetails();
-    if (regions.size() > 0
-        && ((PartitionRebalanceInfo) iterator.next()).getRegionPath() != null
+    if (regions.size() > 0 && ((PartitionRebalanceInfo) iterator.next()).getRegionPath() != null
-      final TabularResultData resultData = rebalanceResulteData.addSection()
-          .addTable("Table" + index);
+      final TabularResultData resultData =
+          rebalanceResulteData.addSection().addTable("Table" + index);
-      resultData.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES);
+      resultData.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES
-          + " = " + results.getTotalBucketCreateBytes());
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATEBYTES + " = "
+          + results.getTotalBucketCreateBytes());
-      resultData.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM);
+      resultData.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETCREATETIM);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED
-          + " = " + results.getTotalBucketCreatesCompleted());
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETCREATESCOMPLETED + " = "
+          + results.getTotalBucketCreatesCompleted());
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES
-          + " = " + results.getTotalBucketTransferBytes());
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERBYTES + " = "
+          + results.getTotalBucketTransferBytes());
-      resultData.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME);
+      resultData.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME
-          + " = " + results.getTotalBucketTransferTime());
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERTIME + " = "
+          + results.getTotalBucketTransferTime());
-      resultData
-          .accumulate("Value", results.getTotalBucketTransfersCompleted());
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED
-          + " = " + results.getTotalBucketTransfersCompleted());
+      resultData.accumulate("Value", results.getTotalBucketTransfersCompleted());
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALBUCKETTRANSFERSCOMPLETED + " = "
+          + results.getTotalBucketTransfersCompleted());
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME
-          + " = " + results.getTotalPrimaryTransferTime());
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERTIME + " = "
+          + results.getTotalPrimaryTransferTime());
-      resultData.accumulate("Value",
-          results.getTotalPrimaryTransfersCompleted());
-      resultStr
-          .append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED
-              + " = " + results.getTotalPrimaryTransfersCompleted());
+      resultData.accumulate("Value", results.getTotalPrimaryTransfersCompleted());
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALPRIMARYTRANSFERSCOMPLETED + " = "
+          + results.getTotalPrimaryTransfersCompleted());
-      resultData.accumulate("Rebalanced Stats",
-          CliStrings.REBALANCE__MSG__TOTALTIME);
+      resultData.accumulate("Rebalanced Stats", CliStrings.REBALANCE__MSG__TOTALTIME);
-      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME + " = "
-          + results.getTotalTime());
+      resultStr.append(CliStrings.REBALANCE__MSG__TOTALTIME + " = " + results.getTotalTime());
-    DistributedRegionMXBean bean = ManagementService.getManagementService(
-        GemFireCacheImpl.getInstance()).getDistributedRegionMXBean(region);
+    DistributedRegionMXBean bean = ManagementService
+        .getManagementService(GemFireCacheImpl.getInstance()).getDistributedRegionMXBean(region);
-  
+
-    String[] listDSRegions = ManagementService.getManagementService(cache)
-        .getDistributedSystemMXBean().listRegions();
+    String[] listDSRegions =
+        ManagementService.getManagementService(cache).getDistributedSystemMXBean().listRegions();
-      //check for excluded regions
+      // check for excluded regions
-      Iterator<String> it = listExcludedRegion.iterator();      
+      Iterator<String> it = listExcludedRegion.iterator();
-        // also        
-        String excludedRegion = it.next().trim();     
-        if(regionName.startsWith("/")){
-          if(!excludedRegion.startsWith("/")){
-            excludedRegion = "/"+excludedRegion;
-          }              
+        // also
+        String excludedRegion = it.next().trim();
+        if (regionName.startsWith("/")) {
+          if (!excludedRegion.startsWith("/")) {
+            excludedRegion = "/" + excludedRegion;
+          }
-        if(excludedRegion.startsWith("/")){
-          if(!regionName.startsWith("/")){
-            regionName = "/"+regionName;
-          }              
-        }  
+        if (excludedRegion.startsWith("/")) {
+          if (!regionName.startsWith("/")) {
+            regionName = "/" + regionName;
+          }
+        }
-        if(excludedRegion.equals(regionName)){
+        if (excludedRegion.equals(regionName)) {
-      
-      if(excludedRegionMatch == true){
-        //ignore this region
+
+      if (excludedRegionMatch == true) {
+        // ignore this region
-      }      
-      
-      if(!regionName.startsWith("/")){
-        regionName = Region.SEPARATOR+regionName;
-        
-    //remove this prefix / once Rishi fixes this      
-      DistributedRegionMXBean bean = ManagementService.getManagementService(
-          GemFireCacheImpl.getInstance())
-          .getDistributedRegionMXBean(regionName);   
-       
-      if (bean != null) {          
-        //TODO: Ajay to call a method once Rishi provides
-        if (bean.getRegionType().equals(DataPolicy.PARTITION.toString()) || 
-            bean.getRegionType().equals(DataPolicy.PERSISTENT_PARTITION.toString() )) {
-          
+
+      if (!regionName.startsWith("/")) {
+        regionName = Region.SEPARATOR + regionName;
+
+      }
+      // remove this prefix / once Rishi fixes this
+      DistributedRegionMXBean bean =
+          ManagementService.getManagementService(GemFireCacheImpl.getInstance())
+              .getDistributedRegionMXBean(regionName);
+
+      if (bean != null) {
+        // TODO: Ajay to call a method once Rishi provides
+        if (bean.getRegionType().equals(DataPolicy.PARTITION.toString())
+            || bean.getRegionType().equals(DataPolicy.PERSISTENT_PARTITION.toString())) {
+
-          for (DistributedMember dsmember: dsMembers) {
+          for (DistributedMember dsmember : dsMembers) {
-              if (MBeanJMXAdapter.getMemberNameOrId(
-                  dsmember).equals(memberName)) {               
+              if (MBeanJMXAdapter.getMemberNameOrId(dsmember).equals(memberName)) {
-                memberAndItsPRRegions.region  = regionName;
-                memberAndItsPRRegions.dsMemberList.add(dsmember);               
-                if (listMemberPRInfo.contains(memberAndItsPRRegions)){
-                  //add member for appropriate region                  
-                  int index = listMemberPRInfo.indexOf(memberAndItsPRRegions);                  
+                memberAndItsPRRegions.region = regionName;
+                memberAndItsPRRegions.dsMemberList.add(dsmember);
+                if (listMemberPRInfo.contains(memberAndItsPRRegions)) {
+                  // add member for appropriate region
+                  int index = listMemberPRInfo.indexOf(memberAndItsPRRegions);
-                }else{
+                } else {
-               
-                }               
+
+                }
-  
+
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_DATA,
-      CliStrings.TOPIC_GEODE_REGION
-  })
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-      @CliOption(key = CliStrings.EXPORT_DATA__REGION, mandatory = true, optionContext = ConverterHint.REGIONPATH, help = CliStrings.EXPORT_DATA__REGION__HELP) String regionName,
-      @CliOption(key = CliStrings.EXPORT_DATA__FILE, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, mandatory = true, help = CliStrings.EXPORT_DATA__FILE__HELP) String filePath,
-      @CliOption(key = CliStrings.EXPORT_DATA__MEMBER, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, optionContext = ConverterHint.MEMBERIDNAME, mandatory = true, help = CliStrings.EXPORT_DATA__MEMBER__HELP) String memberNameOrId) {
+      @CliOption(key = CliStrings.EXPORT_DATA__REGION, mandatory = true,
+          optionContext = ConverterHint.REGIONPATH,
+          help = CliStrings.EXPORT_DATA__REGION__HELP) String regionName,
+      @CliOption(key = CliStrings.EXPORT_DATA__FILE,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, mandatory = true,
+          help = CliStrings.EXPORT_DATA__FILE__HELP) String filePath,
+      @CliOption(key = CliStrings.EXPORT_DATA__MEMBER,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          optionContext = ConverterHint.MEMBERIDNAME, mandatory = true,
+          help = CliStrings.EXPORT_DATA__MEMBER__HELP) String memberNameOrId) {
-    final DistributedMember targetMember = CliUtil
-        .getDistributedMemberByNameOrId(memberNameOrId);
+    final DistributedMember targetMember = CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
-      return ResultBuilder.createUserErrorResult(CliStrings.format(
-          CliStrings.INVALID_FILE_EXTENTION,
-          CliStrings.GEODE_DATA_FILE_EXTENSION));
+      return ResultBuilder.createUserErrorResult(CliStrings
+          .format(CliStrings.INVALID_FILE_EXTENSION, CliStrings.GEODE_DATA_FILE_EXTENSION));
-        final String args[] = { regionName, filePath };
+        final String args[] = {regionName, filePath};
-        ResultCollector<?, ?> rc = CliUtil.executeFunction(exportDataFunction,
-            args, targetMember);
+        ResultCollector<?, ?> rc = CliUtil.executeFunction(exportDataFunction, args, targetMember);
-            result = ResultBuilder
-                .createGemFireErrorResult(((Exception) resultObj).getMessage());
+            result = ResultBuilder.createGemFireErrorResult(((Exception) resultObj).getMessage());
-            result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
-                CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.EXPORT_DATA));
+            result = ResultBuilder.createGemFireErrorResult(
+                CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.EXPORT_DATA));
-          result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
-              CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.EXPORT_DATA));
+          result = ResultBuilder.createGemFireErrorResult(
+              CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.EXPORT_DATA));
-        result = ResultBuilder.createUserErrorResult(CliStrings.format(
-            CliStrings.EXPORT_DATA__MEMBER__NOT__FOUND, memberNameOrId));
+        result = ResultBuilder.createUserErrorResult(
+            CliStrings.format(CliStrings.EXPORT_DATA__MEMBER__NOT__FOUND, memberNameOrId));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
+      result = ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
-  @CliMetaData(relatedTopic = { CliStrings.TOPIC_GEODE_DATA,
-      CliStrings.TOPIC_GEODE_REGION
-  })
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-      @CliOption(key = CliStrings.IMPORT_DATA__REGION, optionContext = ConverterHint.REGIONPATH, mandatory = true, help = CliStrings.IMPORT_DATA__REGION__HELP) String regionName,
-      @CliOption(key = CliStrings.IMPORT_DATA__FILE, mandatory = true, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, help = CliStrings.IMPORT_DATA__FILE__HELP) String filePath,
-      @CliOption(key = CliStrings.IMPORT_DATA__MEMBER, mandatory = true, unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE, optionContext = ConverterHint.MEMBERIDNAME, help = CliStrings.IMPORT_DATA__MEMBER__HELP) String memberNameOrId) {
+      @CliOption(key = CliStrings.IMPORT_DATA__REGION, optionContext = ConverterHint.REGIONPATH,
+          mandatory = true, help = CliStrings.IMPORT_DATA__REGION__HELP) String regionName,
+      @CliOption(key = CliStrings.IMPORT_DATA__FILE, mandatory = true,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          help = CliStrings.IMPORT_DATA__FILE__HELP) String filePath,
+      @CliOption(key = CliStrings.IMPORT_DATA__MEMBER, mandatory = true,
+          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+          optionContext = ConverterHint.MEMBERIDNAME,
+          help = CliStrings.IMPORT_DATA__MEMBER__HELP) String memberNameOrId) {
-      final DistributedMember targetMember = CliUtil
-          .getDistributedMemberByNameOrId(memberNameOrId);
+      final DistributedMember targetMember = CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
-        return ResultBuilder.createUserErrorResult(CliStrings.format(
-            CliStrings.INVALID_FILE_EXTENTION,
-            CliStrings.GEODE_DATA_FILE_EXTENSION));
+        return ResultBuilder.createUserErrorResult(CliStrings
+            .format(CliStrings.INVALID_FILE_EXTENSION, CliStrings.GEODE_DATA_FILE_EXTENSION));
-        final String args[] = { regionName, filePath };
-        ResultCollector<?, ?> rc = CliUtil.executeFunction(importDataFunction,
-            args, targetMember);
+        final String args[] = {regionName, filePath};
+        ResultCollector<?, ?> rc = CliUtil.executeFunction(importDataFunction, args, targetMember);
-            result = ResultBuilder
-                .createGemFireErrorResult(((Exception) resultObj).getMessage());
+            result = ResultBuilder.createGemFireErrorResult(((Exception) resultObj).getMessage());
-            result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
-                CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
+            result = ResultBuilder.createGemFireErrorResult(
+                CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
-          result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
-              CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
+          result = ResultBuilder.createGemFireErrorResult(
+              CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
-        result = ResultBuilder.createUserErrorResult(CliStrings.format(
-            CliStrings.IMPORT_DATA__MEMBER__NOT__FOUND, memberNameOrId));
+        result = ResultBuilder.createUserErrorResult(
+            CliStrings.format(CliStrings.IMPORT_DATA__MEMBER__NOT__FOUND, memberNameOrId));
-      result = ResultBuilder.createGemFireErrorResult(CliStrings.format(
-          CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
+      result = ResultBuilder.createGemFireErrorResult(
+          CliStrings.format(CliStrings.COMMAND_FAILURE_MESSAGE, CliStrings.IMPORT_DATA));
-  @CliMetaData(shellOnly = false, relatedTopic = {
-      CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION
-  })
-  @CliCommand(value = { CliStrings.PUT }, help = CliStrings.PUT__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliCommand(value = {CliStrings.PUT}, help = CliStrings.PUT__HELP)
-      @CliOption(key = { CliStrings.PUT__KEY }, mandatory = true, help = CliStrings.PUT__KEY__HELP) String key,
-      @CliOption(key = { CliStrings.PUT__VALUE }, mandatory = true, help = CliStrings.PUT__VALUE__HELP) String value,
-      @CliOption(key = { CliStrings.PUT__REGIONNAME }, mandatory = true, help = CliStrings.PUT__REGIONNAME__HELP, optionContext = ConverterHint.REGIONPATH) String regionPath,
-      @CliOption(key = { CliStrings.PUT__KEYCLASS }, help = CliStrings.PUT__KEYCLASS__HELP) String keyClass,
-      @CliOption(key = { CliStrings.PUT__VALUEKLASS }, help = CliStrings.PUT__VALUEKLASS__HELP) String valueClass,
-      @CliOption(key = { CliStrings.PUT__PUTIFABSENT }, help = CliStrings.PUT__PUTIFABSENT__HELP, unspecifiedDefaultValue = "false") boolean putIfAbsent) {
+      @CliOption(key = {CliStrings.PUT__KEY}, mandatory = true,
+          help = CliStrings.PUT__KEY__HELP) String key,
+      @CliOption(key = {CliStrings.PUT__VALUE}, mandatory = true,
+          help = CliStrings.PUT__VALUE__HELP) String value,
+      @CliOption(key = {CliStrings.PUT__REGIONNAME}, mandatory = true,
+          help = CliStrings.PUT__REGIONNAME__HELP,
+          optionContext = ConverterHint.REGIONPATH) String regionPath,
+      @CliOption(key = {CliStrings.PUT__KEYCLASS},
+          help = CliStrings.PUT__KEYCLASS__HELP) String keyClass,
+      @CliOption(key = {CliStrings.PUT__VALUEKLASS},
+          help = CliStrings.PUT__VALUEKLASS__HELP) String valueClass,
+      @CliOption(key = {CliStrings.PUT__PUTIFABSENT}, help = CliStrings.PUT__PUTIFABSENT__HELP,
+          unspecifiedDefaultValue = "false") boolean putIfAbsent) {
-      return makePresentationResult(DataCommandResult.createPutResult(key,
-          null, null, CliStrings.PUT__MSG__REGIONNAME_EMPTY, false));
+      return makePresentationResult(DataCommandResult.createPutResult(key, null, null,
+          CliStrings.PUT__MSG__REGIONNAME_EMPTY, false));
-      return makePresentationResult(dataResult = DataCommandResult
-          .createPutResult(key, null, null, CliStrings.PUT__MSG__KEY_EMPTY,
-              false));
+      return makePresentationResult(dataResult = DataCommandResult.createPutResult(key, null, null,
+          CliStrings.PUT__MSG__KEY_EMPTY, false));
-      return makePresentationResult(dataResult = DataCommandResult
-          .createPutResult(value, null, null, CliStrings.PUT__MSG__VALUE_EMPTY,
-              false));
+      return makePresentationResult(dataResult = DataCommandResult.createPutResult(value, null,
+          null, CliStrings.PUT__MSG__VALUE_EMPTY, false));
-      Set<DistributedMember> memberList = getRegionAssociatedMembers(
-          regionPath, CacheFactory.getAnyInstance(), false);
+      Set<DistributedMember> memberList =
+          getRegionAssociatedMembers(regionPath, CacheFactory.getAnyInstance(), false);
-            CliStrings.format(
-                CliStrings.PUT__MSG__REGION_NOT_FOUND_ON_ALL_MEMBERS,
-                regionPath), false);
+            CliStrings.format(CliStrings.PUT__MSG__REGION_NOT_FOUND_ON_ALL_MEMBERS, regionPath),
+            false);
-      dataResult = putfn.put(key, value, putIfAbsent, keyClass, valueClass,
-          regionPath);
+      dataResult = putfn.put(key, value, putIfAbsent, keyClass, valueClass, regionPath);
-      return ResultBuilder
-          .createGemFireErrorResult("Error executing data command");
+      return ResultBuilder.createGemFireErrorResult("Error executing data command");
-  @CliMetaData(shellOnly = false, relatedTopic = {
-      CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION
-  })
-  @CliCommand(value = { CliStrings.GET }, help = CliStrings.GET__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliCommand(value = {CliStrings.GET}, help = CliStrings.GET__HELP)
-      @CliOption(key = { CliStrings.GET__KEY }, mandatory = true, help = CliStrings.GET__KEY__HELP) String key,
-      @CliOption(key = { CliStrings.GET__REGIONNAME }, mandatory = true, help = CliStrings.GET__REGIONNAME__HELP, optionContext = ConverterHint.REGIONPATH) String regionPath,
-      @CliOption(key = { CliStrings.GET__KEYCLASS }, help = CliStrings.GET__KEYCLASS__HELP) String keyClass,
-      @CliOption(key = { CliStrings.GET__VALUEKLASS }, help = CliStrings.GET__VALUEKLASS__HELP) String valueClass,
-      @CliOption(key = CliStrings.GET__LOAD, unspecifiedDefaultValue = "true", specifiedDefaultValue = "true", help = CliStrings.GET__LOAD__HELP) Boolean loadOnCacheMiss)
-  {
+      @CliOption(key = {CliStrings.GET__KEY}, mandatory = true,
+          help = CliStrings.GET__KEY__HELP) String key,
+      @CliOption(key = {CliStrings.GET__REGIONNAME}, mandatory = true,
+          help = CliStrings.GET__REGIONNAME__HELP,
+          optionContext = ConverterHint.REGIONPATH) String regionPath,
+      @CliOption(key = {CliStrings.GET__KEYCLASS},
+          help = CliStrings.GET__KEYCLASS__HELP) String keyClass,
+      @CliOption(key = {CliStrings.GET__VALUEKLASS},
+          help = CliStrings.GET__VALUEKLASS__HELP) String valueClass,
+      @CliOption(key = CliStrings.GET__LOAD, unspecifiedDefaultValue = "true",
+          specifiedDefaultValue = "true",
+          help = CliStrings.GET__LOAD__HELP) Boolean loadOnCacheMiss) {
-      return makePresentationResult(dataResult = DataCommandResult
-          .createGetResult(key, null, null,
-              CliStrings.GET__MSG__REGIONNAME_EMPTY, false));
+      return makePresentationResult(dataResult = DataCommandResult.createGetResult(key, null, null,
+          CliStrings.GET__MSG__REGIONNAME_EMPTY, false));
-      return makePresentationResult(dataResult = DataCommandResult
-          .createGetResult(key, null, null, CliStrings.GET__MSG__KEY_EMPTY,
-              false));
+      return makePresentationResult(dataResult = DataCommandResult.createGetResult(key, null, null,
+          CliStrings.GET__MSG__KEY_EMPTY, false));
-      Set<DistributedMember> memberList = getRegionAssociatedMembers(
-          regionPath, CacheFactory.getAnyInstance(), false);
+      Set<DistributedMember> memberList =
+          getRegionAssociatedMembers(regionPath, CacheFactory.getAnyInstance(), false);
-        if(subject!=null){
-          request.setPrincipal((Serializable)subject.getPrincipal());
+        if (subject != null) {
+          request.setPrincipal((Serializable) subject.getPrincipal());
-            CliStrings.format(
-                CliStrings.GET__MSG__REGION_NOT_FOUND_ON_ALL_MEMBERS,
-                regionPath), false);
+            CliStrings.format(CliStrings.GET__MSG__REGION_NOT_FOUND_ON_ALL_MEMBERS, regionPath),
+            false);
-  @CliMetaData(shellOnly = false, relatedTopic = {
-      CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION
-  })
-  @CliCommand(value = { CliStrings.LOCATE_ENTRY }, help = CliStrings.LOCATE_ENTRY__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliCommand(value = {CliStrings.LOCATE_ENTRY}, help = CliStrings.LOCATE_ENTRY__HELP)
-      @CliOption(key = { CliStrings.LOCATE_ENTRY__KEY }, mandatory = true, help = CliStrings.LOCATE_ENTRY__KEY__HELP) String key,
-      @CliOption(key = { CliStrings.LOCATE_ENTRY__REGIONNAME }, mandatory = true, help = CliStrings.LOCATE_ENTRY__REGIONNAME__HELP, optionContext = ConverterHint.REGIONPATH) String regionPath,
-      @CliOption(key = { CliStrings.LOCATE_ENTRY__KEYCLASS }, help = CliStrings.LOCATE_ENTRY__KEYCLASS__HELP) String keyClass,
-      @CliOption(key = { CliStrings.LOCATE_ENTRY__VALUEKLASS }, help = CliStrings.LOCATE_ENTRY__VALUEKLASS__HELP) String valueClass,
-      @CliOption(key = { CliStrings.LOCATE_ENTRY__RECURSIVE }, help = CliStrings.LOCATE_ENTRY__RECURSIVE__HELP, unspecifiedDefaultValue = "false") boolean recursive) {
+      @CliOption(key = {CliStrings.LOCATE_ENTRY__KEY}, mandatory = true,
+          help = CliStrings.LOCATE_ENTRY__KEY__HELP) String key,
+      @CliOption(key = {CliStrings.LOCATE_ENTRY__REGIONNAME}, mandatory = true,
+          help = CliStrings.LOCATE_ENTRY__REGIONNAME__HELP,
+          optionContext = ConverterHint.REGIONPATH) String regionPath,
+      @CliOption(key = {CliStrings.LOCATE_ENTRY__KEYCLASS},
+          help = CliStrings.LOCATE_ENTRY__KEYCLASS__HELP) String keyClass,
+      @CliOption(key = {CliStrings.LOCATE_ENTRY__VALUEKLASS},
+          help = CliStrings.LOCATE_ENTRY__VALUEKLASS__HELP) String valueClass,
+      @CliOption(key = {CliStrings.LOCATE_ENTRY__RECURSIVE},
+          help = CliStrings.LOCATE_ENTRY__RECURSIVE__HELP,
+          unspecifiedDefaultValue = "false") boolean recursive) {
-      return makePresentationResult(dataResult = DataCommandResult
-          .createLocateEntryResult(key, null, null,
-              CliStrings.LOCATE_ENTRY__MSG__REGIONNAME_EMPTY, false));
+      return makePresentationResult(dataResult = DataCommandResult.createLocateEntryResult(key,
+          null, null, CliStrings.LOCATE_ENTRY__MSG__REGIONNAME_EMPTY, false));
-      return makePresentationResult(dataResult = DataCommandResult
-          .createLocateEntryResult(key, null, null,
-              CliStrings.LOCATE_ENTRY__MSG__KEY_EMPTY, false));
+      return makePresentationResult(dataResult = DataCommandResult.createLocateEntryResult(key,
+          null, null, CliStrings.LOCATE_ENTRY__MSG__KEY_EMPTY, false));
-    Set<DistributedMember> memberList = getRegionAssociatedMembers(regionPath,
-        CacheFactory.getAnyInstance(), true);
+    Set<DistributedMember> memberList =
+        getRegionAssociatedMembers(regionPath, CacheFactory.getAnyInstance(), true);
-      dataResult = DataCommandResult.createLocateEntryInfoResult(key, null,
-          null, CliStrings.format(
-              CliStrings.LOCATE_ENTRY__MSG__REGION_NOT_FOUND_ON_ALL_MEMBERS,
-              regionPath), false);
+      dataResult = DataCommandResult.createLocateEntryInfoResult(key, null, null, CliStrings.format(
+          CliStrings.LOCATE_ENTRY__MSG__REGION_NOT_FOUND_ON_ALL_MEMBERS, regionPath), false);
-  @CliMetaData(shellOnly = false, relatedTopic = {
-      CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION
-  })
-  @CliCommand(value = { CliStrings.REMOVE }, help = CliStrings.REMOVE__HELP)
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
+  @CliCommand(value = {CliStrings.REMOVE}, help = CliStrings.REMOVE__HELP)
-      @CliOption(key = { CliStrings.REMOVE__KEY }, help = CliStrings.REMOVE__KEY__HELP) String key,
-      @CliOption(key = { CliStrings.REMOVE__REGION }, mandatory = true, help = CliStrings.REMOVE__REGION__HELP, optionContext = ConverterHint.REGIONPATH) String regionPath,
-      @CliOption(key = CliStrings.REMOVE__ALL, help = CliStrings.REMOVE__ALL__HELP, specifiedDefaultValue = "true", unspecifiedDefaultValue = "false") boolean removeAllKeys,
-      @CliOption(key = { CliStrings.REMOVE__KEYCLASS }, help = CliStrings.REMOVE__KEYCLASS__HELP) String keyClass) {
+      @CliOption(key = {CliStrings.REMOVE__KEY}, help = CliStrings.REMOVE__KEY__HELP) String key,
+      @CliOption(key = {CliStrings.REMOVE__REGION}, mandatory = true,
+          help = CliStrings.REMOVE__REGION__HELP,
+          optionContext = ConverterHint.REGIONPATH) String regionPath,
+      @CliOption(key = CliStrings.REMOVE__ALL, help = CliStrings.REMOVE__ALL__HELP,
+          specifiedDefaultValue = "true", unspecifiedDefaultValue = "false") boolean removeAllKeys,
+      @CliOption(key = {CliStrings.REMOVE__KEYCLASS},
+          help = CliStrings.REMOVE__KEYCLASS__HELP) String keyClass) {
-      return makePresentationResult(dataResult = DataCommandResult
-          .createRemoveResult(key, null, null,
-              CliStrings.REMOVE__MSG__REGIONNAME_EMPTY, false));
+      return makePresentationResult(dataResult = DataCommandResult.createRemoveResult(key, null,
+          null, CliStrings.REMOVE__MSG__REGIONNAME_EMPTY, false));
-      return makePresentationResult(dataResult = DataCommandResult
-          .createRemoveResult(key, null, null,
-              CliStrings.REMOVE__MSG__KEY_EMPTY, false));
+      return makePresentationResult(dataResult = DataCommandResult.createRemoveResult(key, null,
+          null, CliStrings.REMOVE__MSG__KEY_EMPTY, false));
-    if(removeAllKeys){
+    if (removeAllKeys) {
-    }
-    else {
+    } else {
-      Set<DistributedMember> memberList = getRegionAssociatedMembers(
-          regionPath, CacheFactory.getAnyInstance(), false);
+      Set<DistributedMember> memberList =
+          getRegionAssociatedMembers(regionPath, CacheFactory.getAnyInstance(), false);
-            CliStrings.format(
-                CliStrings.REMOVE__MSG__REGION_NOT_FOUND_ON_ALL_MEMBERS,
-                regionPath), false);
+            CliStrings.format(CliStrings.REMOVE__MSG__REGION_NOT_FOUND_ON_ALL_MEMBERS, regionPath),
+            false);
-      dataResult = removefn.remove(key, keyClass, regionPath,
-          removeAllKeys ? "ALL" : null);
+      dataResult = removefn.remove(key, keyClass, regionPath, removeAllKeys ? "ALL" : null);
-  @CliMetaData(shellOnly = false, relatedTopic = {
-      CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION
-  })
+  @CliMetaData(shellOnly = false,
+      relatedTopic = {CliStrings.TOPIC_GEODE_DATA, CliStrings.TOPIC_GEODE_REGION})
-  @CliCommand(value = { CliStrings.QUERY }, help = CliStrings.QUERY__HELP)
+  @CliCommand(value = {CliStrings.QUERY}, help = CliStrings.QUERY__HELP)
-      @CliOption(key = CliStrings.QUERY__QUERY, help = CliStrings.QUERY__QUERY__HELP, mandatory = true) final String query,
-      @CliOption(key = CliStrings.QUERY__STEPNAME, mandatory = false, help = "Step name", unspecifiedDefaultValue = CliStrings.QUERY__STEPNAME__DEFAULTVALUE) String stepName,
-      @CliOption(key = CliStrings.QUERY__INTERACTIVE, mandatory = false, help = CliStrings.QUERY__INTERACTIVE__HELP, unspecifiedDefaultValue = "true") final boolean interactive) {
+      @CliOption(key = CliStrings.QUERY__QUERY, help = CliStrings.QUERY__QUERY__HELP,
+          mandatory = true) final String query,
+      @CliOption(key = CliStrings.QUERY__STEPNAME, mandatory = false, help = "Step name",
+          unspecifiedDefaultValue = CliStrings.QUERY__STEPNAME__DEFAULTVALUE) String stepName,
+      @CliOption(key = CliStrings.QUERY__INTERACTIVE, mandatory = false,
+          help = CliStrings.QUERY__INTERACTIVE__HELP,
+          unspecifiedDefaultValue = "true") final boolean interactive) {
-    if (!CliUtil.isGfshVM()
-        && stepName.equals(CliStrings.QUERY__STEPNAME__DEFAULTVALUE)) {
-      return ResultBuilder
-          .createInfoResult(CliStrings.QUERY__MSG__NOT_SUPPORTED_ON_MEMBERS);
+    if (!CliUtil.isGfshVM() && stepName.equals(CliStrings.QUERY__STEPNAME__DEFAULTVALUE)) {
+      return ResultBuilder.createInfoResult(CliStrings.QUERY__MSG__NOT_SUPPORTED_ON_MEMBERS);
-    Object[] arguments = new Object[] { query, stepName, interactive };
+    Object[] arguments = new Object[] {query, stepName, interactive};
-    CLIStep[] steps = { exec, display, move, quit };
+    CLIStep[] steps = {exec, display, move, quit};
-  @CliAvailabilityIndicator({ CliStrings.REBALANCE, CliStrings.GET,
-      CliStrings.PUT, CliStrings.REMOVE, CliStrings.LOCATE_ENTRY,
-      CliStrings.QUERY, CliStrings.IMPORT_DATA, CliStrings.EXPORT_DATA })
+  @CliAvailabilityIndicator({CliStrings.REBALANCE, CliStrings.GET, CliStrings.PUT,
+      CliStrings.REMOVE, CliStrings.LOCATE_ENTRY, CliStrings.QUERY, CliStrings.IMPORT_DATA,
+      CliStrings.EXPORT_DATA})
-  public static DataCommandResult callFunctionForRegion(
-      DataCommandRequest request, DataCommandFunction putfn,
-      Set<DistributedMember> members) {
+  public static DataCommandResult callFunctionForRegion(DataCommandRequest request,
+      DataCommandFunction putfn, Set<DistributedMember> members) {
-      ResultCollector collector = FunctionService.onMember(member)
-          .withArgs(request).execute(putfn);
+      ResultCollector collector = FunctionService.onMember(member).withArgs(request).execute(putfn);
-      ResultCollector collector = FunctionService.onMembers(members)
-          .withArgs(request).execute(putfn);
+      ResultCollector collector =
+          FunctionService.onMembers(members).withArgs(request).execute(putfn);
-  public static Set<DistributedMember> getQueryRegionsAssociatedMembers(
-      Set<String> regions, final Cache cache, boolean returnAll) {
+  public static Set<DistributedMember> getQueryRegionsAssociatedMembers(Set<String> regions,
+      final Cache cache, boolean returnAll) {
-            logger.fine("Members for region " + region + " Members "
-                + newMembers);
+            logger.fine("Members for region " + region + " Members " + newMembers);
-            logger.fine("Members after anding for regions " + regionAndingList
-                + " List : " + newMembers);
+            logger.fine(
+                "Members after anding for regions " + regionAndingList + " List : " + newMembers);
-  public static Set<DistributedMember> getRegionAssociatedMembers(
-      String region, final Cache cache, boolean returnAll) {
+  public static Set<DistributedMember> getRegionAssociatedMembers(String region, final Cache cache,
+      boolean returnAll) {
-    DistributedRegionMXBean bean = ManagementService
-        .getManagementService(cache).getDistributedRegionMXBean(region);
+    DistributedRegionMXBean bean =
+        ManagementService.getManagementService(cache).getDistributedRegionMXBean(region);
-    dsMembersWithThisMember.add(cache.getDistributedSystem()
-        .getDistributedMember());
+    dsMembersWithThisMember.add(cache.getDistributedSystem().getDistributedMember());
-    
-    //try with function calls
-    if(matchedMembers.size() == 0){
-      matchedMembers = CliUtil.getMembersForeRegionViaFunction(cache, region );
+
+    // try with function calls
+    if (matchedMembers.size() == 0) {
+      matchedMembers = CliUtil.getMembersForeRegionViaFunction(cache, region, true);
-  public static Object[] replaceGfshEnvVar(String query,
-      Map<String, String> gfshEnvVarMap) {
+  public static Object[] replaceGfshEnvVar(String query, Map<String, String> gfshEnvVarMap) {
-    return new Object[] { replacedVars, query };
+    return new Object[] {replacedVars, query};

UPD40 INS9 UPD40