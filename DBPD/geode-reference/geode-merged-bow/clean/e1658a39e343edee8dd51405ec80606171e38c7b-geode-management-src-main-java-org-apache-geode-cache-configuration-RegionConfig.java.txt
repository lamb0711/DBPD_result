Revert "GEODE-6612: move attributes that can not be configured in v2 â€¦ (#3461)

This reverts commit 2402cac0

* document what's supported in management v2 api.

+import com.fasterxml.jackson.annotation.JsonIgnore;
+
+import org.apache.geode.management.api.RestfulEndpoint;
- * this holds the attributes that belongs to region element in cache.xml, but can not be
- * configured through manage v2 API (yet)
+ * A "region" element describes a region (and its entries) in Geode distributed cache.
+ * It may be used to create a new region or may be used to add new entries to an existing
+ * region. Note that the "name" attribute specifies the simple name of the region; it
+ * cannot contain a "/". If "refid" is set then it defines the default region attributes
+ * to use for this region. A nested "region-attributes" element can override these defaults.
+ * If the nested "region-attributes" element has its own "refid" then it will cause the
+ * "refid" on the region to be ignored. "refid" can be set to the name of a RegionShortcut
+ * or a ClientRegionShortcut (see the javadocs of those enum classes for their names).
+ *
+ *
+ * <p>
+ * Java class for region-type complex type.
+ *
+ * <p>
+ * The following schema fragment specifies the expected content contained within this class.
+ *
+ * <pre>
+ * &lt;complexType name="region-type">
+ *   &lt;complexContent>
+ *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *       &lt;sequence>
+ *         &lt;element name="region-attributes" type="{http://geode.apache.org/schema/cache}region-attributes-type" maxOccurs="unbounded" minOccurs="0"/>
+ *         &lt;element name="index" maxOccurs="unbounded" minOccurs="0">
+ *           &lt;complexType>
+ *             &lt;complexContent>
+ *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *                 &lt;choice minOccurs="0">
+ *                   &lt;element name="functional">
+ *                     &lt;complexType>
+ *                       &lt;complexContent>
+ *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *                           &lt;attribute name="expression" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                           &lt;attribute name="from-clause" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                           &lt;attribute name="imports" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                         &lt;/restriction>
+ *                       &lt;/complexContent>
+ *                     &lt;/complexType>
+ *                   &lt;/element>
+ *                   &lt;element name="primary-key">
+ *                     &lt;complexType>
+ *                       &lt;complexContent>
+ *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *                           &lt;attribute name="field" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                         &lt;/restriction>
+ *                       &lt;/complexContent>
+ *                     &lt;/complexType>
+ *                   &lt;/element>
+ *                 &lt;/choice>
+ *                 &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                 &lt;attribute name="expression" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                 &lt;attribute name="from-clause" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                 &lt;attribute name="imports" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *                 &lt;attribute name="key-index" type="{http://www.w3.org/2001/XMLSchema}boolean" />
+ *                 &lt;attribute name="type" default="range">
+ *                   &lt;simpleType>
+ *                     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
+ *                       &lt;enumeration value="range"/>
+ *                       &lt;enumeration value="hash"/>
+ *                     &lt;/restriction>
+ *                   &lt;/simpleType>
+ *                 &lt;/attribute>
+ *               &lt;/restriction>
+ *             &lt;/complexContent>
+ *           &lt;/complexType>
+ *         &lt;/element>
+ *         &lt;element name="entry" maxOccurs="unbounded" minOccurs="0">
+ *           &lt;complexType>
+ *             &lt;complexContent>
+ *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *                 &lt;sequence>
+ *                   &lt;element name="key">
+ *                     &lt;complexType>
+ *                       &lt;complexContent>
+ *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *                           &lt;choice>
+ *                             &lt;element name="string" type="{http://geode.apache.org/schema/cache}string-type"/>
+ *                             &lt;element name="declarable" type="{http://geode.apache.org/schema/cache}declarable-type"/>
+ *                           &lt;/choice>
+ *                         &lt;/restriction>
+ *                       &lt;/complexContent>
+ *                     &lt;/complexType>
+ *                   &lt;/element>
+ *                   &lt;element name="value">
+ *                     &lt;complexType>
+ *                       &lt;complexContent>
+ *                         &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
+ *                           &lt;choice>
+ *                             &lt;element name="string" type="{http://geode.apache.org/schema/cache}string-type"/>
+ *                             &lt;element name="declarable" type="{http://geode.apache.org/schema/cache}declarable-type"/>
+ *                           &lt;/choice>
+ *                         &lt;/restriction>
+ *                       &lt;/complexContent>
+ *                     &lt;/complexType>
+ *                   &lt;/element>
+ *                 &lt;/sequence>
+ *               &lt;/restriction>
+ *             &lt;/complexContent>
+ *           &lt;/complexType>
+ *         &lt;/element>
+ *         &lt;any processContents='lax' namespace='##other' maxOccurs="unbounded" minOccurs="0"/>
+ *         &lt;element name="region" type="{http://geode.apache.org/schema/cache}region-type" maxOccurs="unbounded" minOccurs="0"/>
+ *       &lt;/sequence>
+ *       &lt;attribute name="name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *       &lt;attribute name="refid" type="{http://www.w3.org/2001/XMLSchema}string" />
+ *     &lt;/restriction>
+ *   &lt;/complexContent>
+ * &lt;/complexType>
+ * </pre>
+ *
+ *
-    propOrder = {"indexes", "regionElements", "entries", "regions"})
+    propOrder = {"regionAttributes", "indexes", "entries", "regionElements", "regions"})
-public class RegionConfig extends BasicRegionConfig {
+public class RegionConfig extends CacheElement implements RestfulEndpoint {
+
+  public static final String REGION_CONFIG_ENDPOINT = "/regions";
+
+  @XmlElement(name = "region-attributes", namespace = "http://geode.apache.org/schema/cache")
+  protected RegionAttributesType regionAttributes;
-  @XmlAnyElement(lax = true)
-  protected List<CacheElement> regionElements;
-
-
+  @XmlAnyElement(lax = true)
+  protected List<CacheElement> regionElements;
+  @XmlAttribute(name = "name", required = true)
+  protected String name;
+  @XmlAttribute(name = "refid")
+  protected String type;
-  public RegionConfig(String name, String type) {
-    super(name, type);
+  public RegionConfig(String name, String refid) {
+    this.name = name;
+    this.type = refid;
-  // a convenience constructor to turn a BasicRegionConfig into RegionConfig
-  public RegionConfig(BasicRegionConfig regionConfig) {
-    this.name = regionConfig.getName();
-    this.type = regionConfig.getType();
-    this.regionAttributes = regionConfig.getRegionAttributes();
+  @Override
+  public String getEndpoint() {
+    return REGION_CONFIG_ENDPOINT;
+  }
+
+  public RegionAttributesType getRegionAttributes() {
+    return regionAttributes;
+  }
+
+  public void setRegionAttributes(RegionAttributesType regionAttributes) {
+    this.regionAttributes = regionAttributes;
+   *
+   *
+   * <p>
+   * Objects of the following type(s) are allowed in the list
+   * {@link RegionConfig.Index }
+   *
+   *
-   * Gets the value of the any property.
-   *
-   * <p>
-   * This accessor method returns a reference to the live list,
-   * not a snapshot. Therefore any modification you make to the
-   * returned list will be present inside the JAXB object.
-   * This is why there is not a <CODE>set</CODE> method for the any property.
-   *
-   * <p>
-   * For example, to add a new item, do as follows:
-   *
-   * <pre>
-   * getCustomRegionElements().add(newItem);
-   * </pre>
-   *
-   *
-   * <p>
-   * Objects of the following type(s) are allowed in the list
+   * Gets the value of the entry property.
+   * Currently, users can not create regions with initial entries using management v2 api.
+   * this entry list will be ignored when creating the region
+   */
+  public List<Entry> getEntries() {
+    if (entries == null) {
+      entries = new ArrayList<>();
+    }
+    return this.entries;
+  }
+
+  /**
+   * Gets the list of custom region elements
+   * Currently, users can not create regions with custom region elements using management v2 api.
+   * this cache element list will be ignored when creating the region
-
-   * Gets the value of the entry property.
-   *
-   * <p>
-   * This accessor method returns a reference to the live list,
-   * not a snapshot. Therefore any modification you make to the
-   * returned list will be present inside the JAXB object.
-   * This is why there is not a <CODE>set</CODE> method for the entry property.
-   *
-   * <p>
-   * For example, to add a new item, do as follows:
-   *
-   * <pre>
-   * getEntries().add(newItem);
-   * </pre>
-   *
-   *
-   * <p>
-   * Objects of the following type(s) are allowed in the list
-   * {@link RegionConfig.Entry }
-   *
-   *
-   */
-  public List<Entry> getEntries() {
-    if (entries == null) {
-      entries = new ArrayList<Entry>();
-    }
-    return this.entries;
-  }
-
-  /**
-   * Gets the value of the region property.
-   *
-   * <p>
-   * This accessor method returns a reference to the live list,
-   * not a snapshot. Therefore any modification you make to the
-   * returned list will be present inside the JAXB object.
-   * This is why there is not a <CODE>set</CODE> method for the region property.
-   *
-   * <p>
-   * For example, to add a new item, do as follows:
-   *
-   * <pre>
-   * getRegions().add(newItem);
-   * </pre>
-   *
-   *
-   * <p>
-   * Objects of the following type(s) are allowed in the list
-   * {@link RegionConfig }
-   *
-   *
+   * Gets the list of the sub regions
+   * Currently, users can not create regions with sub regions using management v2 api.
+   * This sub region list will be ignored when creating the region.
-      regions = new ArrayList<RegionConfig>();
+      regions = new ArrayList<>();
+   * Gets the value of the name property.
+   *
+   * possible object is
+   * {@link String }
+   *
+   */
+  public String getName() {
+    return name;
+  }
+
+  /**
+   * Sets the value of the name property.
+   *
+   * allowed object is
+   * {@link String }
+   *
+   */
+  public void setName(String value) throws IllegalArgumentException {
+    if (value == null) {
+      return;
+    }
+
+    boolean regionPrefixedWithSlash = value.startsWith("/");
+    String[] regionSplit = value.split("/");
+
+    boolean hasSubRegions =
+        regionPrefixedWithSlash ? regionSplit.length > 2 : regionSplit.length > 1;
+    if (hasSubRegions) {
+      throw new IllegalArgumentException("Sub-regions are unsupported");
+    }
+
+    this.name = regionPrefixedWithSlash ? regionSplit[1] : value;
+  }
+
+  /**
+   * Gets the value of the type property.
+   *
+   * possible object is
+   * {@link String }
+   *
+   */
+  public String getType() {
+    return type;
+  }
+
+  /**
+   * Sets the value of the type property.
+   *
+   * allowed object is
+   * {@link String }
+   *
+   */
+  public void setType(RegionType regionType) {
+    if (regionType != null) {
+      setType(regionType.name());
+    }
+  }
+
+  public void setType(String regionType) {
+    if (regionType != null) {
+      this.type = regionType.toUpperCase();
+      setShortcutAttributes();
+    }
+  }
+
+  private void setShortcutAttributes() {
+    if (regionAttributes == null) {
+      regionAttributes = new RegionAttributesType();
+    }
+
+    switch (type) {
+      case "PARTITION": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
+        break;
+      }
+      case "REPLICATE": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.REPLICATE);
+        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
+        break;
+      }
+      case "PARTITION_REDUNDANT": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
+        regionAttributes.setRedundantCopy("1");
+        break;
+      }
+      case "PARTITION_PERSISTENT": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION);
+        break;
+      }
+      case "PARTITION_REDUNDANT_PERSISTENT": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION);
+        regionAttributes.setRedundantCopy("1");
+        break;
+      }
+      case "PARTITION_OVERFLOW": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.OVERFLOW_TO_DISK);
+        break;
+      }
+      case "PARTITION_REDUNDANT_OVERFLOW": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
+        regionAttributes.setRedundantCopy("1");
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.OVERFLOW_TO_DISK);
+        break;
+      }
+      case "PARTITION_PERSISTENT_OVERFLOW": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION);
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.OVERFLOW_TO_DISK);
+        break;
+      }
+      case "PARTITION_REDUNDANT_PERSISTENT_OVERFLOW": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_PARTITION);
+        regionAttributes.setRedundantCopy("1");
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.OVERFLOW_TO_DISK);
+        break;
+      }
+      case "PARTITION_HEAP_LRU": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.LOCAL_DESTROY);
+        break;
+
+      }
+      case "PARTITION_REDUNDANT_HEAP_LRU": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
+        regionAttributes.setRedundantCopy("1");
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.LOCAL_DESTROY);
+        break;
+      }
+
+      case "REPLICATE_PERSISTENT": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE);
+        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
+        break;
+      }
+      case "REPLICATE_OVERFLOW": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.REPLICATE);
+        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.OVERFLOW_TO_DISK);
+        break;
+
+      }
+      case "REPLICATE_PERSISTENT_OVERFLOW": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE);
+        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.OVERFLOW_TO_DISK);
+        break;
+      }
+      case "REPLICATE_HEAP_LRU": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PRELOADED);
+        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
+        regionAttributes.setInterestPolicy("all");
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.LOCAL_DESTROY);
+        break;
+      }
+      case "LOCAL": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.NORMAL);
+        regionAttributes.setScope(RegionAttributesScope.LOCAL);
+        break;
+      }
+      case "LOCAL_PERSISTENT": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE);
+        regionAttributes.setScope(RegionAttributesScope.LOCAL);
+        break;
+      }
+      case "LOCAL_HEAP_LRU": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.NORMAL);
+        regionAttributes.setScope(RegionAttributesScope.LOCAL);
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.LOCAL_DESTROY);
+        break;
+      }
+      case "LOCAL_OVERFLOW": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.NORMAL);
+        regionAttributes.setScope(RegionAttributesScope.LOCAL);
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.OVERFLOW_TO_DISK);
+        break;
+      }
+      case "LOCAL_PERSISTENT_OVERFLOW": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PERSISTENT_REPLICATE);
+        regionAttributes.setScope(RegionAttributesScope.LOCAL);
+        regionAttributes.setLruHeapPercentage(EnumActionDestroyOverflow.OVERFLOW_TO_DISK);
+        break;
+      }
+      case "PARTITION_PROXY": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
+        regionAttributes.setLocalMaxMemory("0");
+        break;
+      }
+      case "PARTITION_PROXY_REDUNDANT": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.PARTITION);
+        regionAttributes.setLocalMaxMemory("0");
+        regionAttributes.setRedundantCopy("1");
+        break;
+      }
+      case "REPLICATE_PROXY": {
+        regionAttributes.setDataPolicy(RegionAttributesDataPolicy.EMPTY);
+        regionAttributes.setScope(RegionAttributesScope.DISTRIBUTED_ACK);
+        break;
+      }
+      default:
+        throw new IllegalArgumentException("invalid type " + type);
+    }
+  }
+
+  @Override
+  @JsonIgnore
+  public String getId() {
+    return getName();
+  }
+
+
+  /**
+

INS26 INS26 MOV23 INS40 INS40 UPD43 INS43 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 INS42 INS83 INS83 INS83 INS43 INS59 INS77 INS83 INS43 INS59 INS77 INS83 INS43 INS59 INS77 INS83 INS43 INS59 INS83 INS42 MOV44 MOV44 MOV8 INS78 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS39 UPD42 INS8 INS29 INS83 MOV74 INS42 MOV8 INS29 INS83 MOV74 INS42 MOV8 INS29 INS83 INS43 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS43 INS8 INS29 MOV83 INS43 UPD42 MOV42 INS8 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS78 INS78 INS83 INS43 INS42 INS8 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS45 INS42 INS80 INS80 INS42 INS42 INS42 INS80 INS80 INS42 INS42 INS42 INS80 INS42 INS42 UPD42 INS42 INS42 INS41 INS42 INS41 UPD43 UPD42 MOV21 INS65 MOV41 INS65 MOV41 INS65 INS42 INS41 INS65 INS43 INS42 INS42 INS25 INS60 INS60 INS60 INS25 INS21 INS65 INS42 INS41 INS43 INS42 INS25 INS43 INS42 INS25 INS25 INS50 INS42 INS42 INS42 INS41 INS45 UPD45 UPD45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS9 INS42 INS45 INS42 INS42 UPD42 INS66 INS66 INS65 MOV66 UPD66 MOV66 INS66 MOV27 UPD66 UPD66 UPD66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 MOV27 UPD66 MOV66 UPD66 MOV66 INS65 INS42 UPD66 MOV66 UPD66 MOV66 INS65 INS42 INS27 INS8 INS39 INS59 INS5 INS59 INS39 INS59 INS42 INS8 INS7 UPD66 MOV66 UPD66 MOV66 MOV65 INS42 UPD66 UPD66 INS42 INS27 INS8 INS42 INS27 INS8 INS27 INS8 INS42 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS8 INS49 INS53 INS32 INS42 INS42 INS42 INS40 INS66 INS42 UPD66 MOV66 INS42 UPD66 MOV66 INS42 INS33 INS41 INS42 INS32 INS43 INS85 INS42 INS32 INS42 INS16 INS53 INS22 INS16 INS42 UPD42 INS42 INS33 INS21 INS42 INS33 INS21 INS21 INS42 INS33 INS21 INS45 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS45 INS21 INS21 INS21 INS10 INS45 INS21 INS21 INS10 INS14 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS27 INS27 INS14 INS52 INS42 INS42 INS2 INS42 INS32 INS7 INS32 INS7 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS27 UPD42 UPD42 INS40 INS34 INS40 INS34 INS43 INS45 INS42 INS34 INS42 INS32 INS22 INS32 INS42 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS45 INS42 UPD74 UPD74 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL83 DEL42 DEL42 DEL42 DEL46 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL43 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42 DEL43 DEL40 DEL65 DEL29 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL42