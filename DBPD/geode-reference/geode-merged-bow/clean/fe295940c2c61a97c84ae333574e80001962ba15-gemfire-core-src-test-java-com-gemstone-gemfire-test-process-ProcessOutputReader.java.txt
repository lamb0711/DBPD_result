GEODE-291: Prevent stderr noise from com.gemstone.gemfire.test.process

Change classes in com.gemstone.gemfire.test.process package:

* Remove unused methods and variables..

* Change waitFor() to match the Process.waitFor(long, TimeUnit) method in
JDK 1.8. Pass in timeout parameters from ProcessWrapper instead of
hardcoding it.

* Separate waitFor() into waitFor(long, TimeUnit) and start(). Previously
waitFor() was performing both of these actions.

* Improve debugging by: 1) adding minor lifecycle to ProcessOutputReader,
2) include command string in stack trace of ProcessStreamReader. This
enabled identification of the source of unwanted stderr output.

Change DistributedSystem to enable testing:

* Change DistributedSystem to enable better unit testing by allowing tests
to provide different locations for gemfire.properties with
gemfirePropertyFile. Make same changes for gfsecurity.properties and
gemfireSecurityPropertyFile.

* Create unit and integration tests for DistributedSystem class.

Change tests that use com.gemstone.gemfire.test.process package:

* Use DistributedSystem.PROPERTIES_FILE_PROPERTY to override location of
gemfire.properties.

* Separate integration tests from UnitTest files to IntegrationTests.

* Add and use Catch-Exception for better unit testing.

* Remove unused code and class.

-import java.util.List;
+import java.util.concurrent.TimeUnit;
- * Reads the stdout and stderr from a running process and stores then for test 
- * validation. Also provides a mechanism to waitFor the process to terminate. 
+ * Starts the stdout and stderr reader threads for a running process. Provides
+ * a mechanism to waitFor the process to terminate.
+ * </p>
-  private static final long PROCESS_TIMEOUT_MILLIS = 10 * 60 * 1000L; // 10 minutes
-
-  private int exitCode;
+  private boolean started;
-  private final Process p;
+  private final Process process;
-  private final List<String> lines;
-  public ProcessOutputReader(final Process p, final ProcessStreamReader stdout, final ProcessStreamReader stderr, final List<String> lines) {
-    this.p = p;
+  public ProcessOutputReader(final Process process, final ProcessStreamReader stdout, final ProcessStreamReader stderr) {
+    this.process = process;
-    this.lines = lines;
+  }
+
+  public void start() {
+    synchronized(this) {
+      this.stdout.start();
+      this.stderr.start();
+      this.started = true;
+    }
-  public void waitFor() {
-    stdout.start();
-    stderr.start();
-
-    long startMillis = System.currentTimeMillis();
-    try {
-      stderr.join(PROCESS_TIMEOUT_MILLIS);
-    } catch (Exception ignore) {
-    }
-
-    long timeLeft = System.currentTimeMillis() + PROCESS_TIMEOUT_MILLIS - startMillis;
-    try {
-      stdout.join(timeLeft);
-    } catch (Exception ignore) {
-    }
-
-    this.exitCode = 0;
-    int retryCount = 9;
-    while (retryCount > 0) {
-      retryCount--;
-      try {
-        exitCode = p.exitValue();
-        break;
-      } catch (IllegalThreadStateException e) {
-        // due to bugs in Process we may not be able to get
-        // a process's exit value.
-        // We can't use Process.waitFor() because it can hang forever
-        if (retryCount == 0) {
-          if (stderr.linecount > 0) {
-            // The process wrote to stderr so manufacture
-            // an error exist code
-            synchronized (lines) {
-              lines.add("Failed to get exit status and it wrote"
-                  + " to stderr so setting exit status to 1.");
-            }
-            exitCode = 1;
-          }
-        } else {
-          // We need to wait around to give a chance for
-          // the child to be reaped.See bug 19682
-          try {
-            Thread.sleep(1000);
-          } catch (InterruptedException ignore) {
-          }
-        }
+  public boolean waitFor(final long timeout, final TimeUnit unit) throws InterruptedException {
+    synchronized(this) {
+      if (!this.started) {
+        throw new IllegalStateException("Must be started before waitFor");
+    
+    final long startTime = System.nanoTime();
+    
+    long millisToJoin = unit.toMillis(timeout);
+    this.stderr.join(millisToJoin);
+
+    long nanosRemaining = unit.toNanos(timeout) - (System.nanoTime() - startTime);
+    millisToJoin = unit.toMillis(nanosRemaining);
+    this.stdout.join(millisToJoin);
+
+    nanosRemaining = unit.toNanos(timeout) - (System.nanoTime() - startTime);
+    return waitForProcess(nanosRemaining, unit);
-  public int getExitCode() {
-    return exitCode;
+  private boolean waitForProcess(final long timeout, final TimeUnit unit) throws InterruptedException {
+    long startTime = System.nanoTime();
+    long nanosRemaining = unit.toNanos(timeout);
+
+    while (nanosRemaining > 0) {
+      try {
+        this.process.exitValue();
+        return true;
+      } catch(IllegalThreadStateException ex) {
+        if (nanosRemaining > 0) {
+          long millisToSleep =Math.min(TimeUnit.NANOSECONDS.toMillis(nanosRemaining) + 1, 100);
+          Thread.sleep(millisToSleep);
+        }
+      }
+      nanosRemaining = unit.toNanos(timeout) - (System.nanoTime() - startTime);
+    }
+    return false;

UPD40 INS31 INS31 INS31 UPD39 MOV83 MOV39 UPD42 MOV42 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS44 MOV43 INS8 UPD66 UPD66 INS66 UPD42 UPD42 UPD42 INS51 INS83 INS39 INS42 INS83 INS43 INS42 INS42 INS51 MOV60 INS60 MOV21 MOV60 INS21 MOV21 INS21 INS41 INS83 INS39 INS42 INS83 UPD43 MOV43 UPD42 MOV42 INS60 MOV60 MOV61 MOV41 INS52 INS8 INS42 INS52 INS8 INS83 INS39 INS59 INS7 INS7 INS32 UPD42 INS39 INS59 UPD39 INS9 UPD42 MOV21 MOV21 INS21 INS25 UPD42 INS42 INS32 INS22 UPD42 UPD42 INS42 INS32 INS22 UPD42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 INS21 UPD42 INS7 INS38 INS8 UPD42 INS42 INS42 INS42 INS52 INS42 INS32 INS36 INS42 INS42 INS42 INS52 INS42 INS32 INS36 INS42 INS42 INS42 INS42 INS42 INS7 INS22 INS22 INS22 INS9 INS22 INS53 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS27 INS41 INS42 INS27 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS14 MOV32 UPD42 MOV42 INS32 INS42 INS32 INS9 UPD42 INS32 INS36 INS43 INS45 UPD42 INS42 INS42 INS22 MOV42 UPD27 INS8 INS42 INS42 INS42 INS27 INS42 INS52 INS42 UPD42 INS60 MOV21 INS32 INS42 INS39 INS59 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 MOV27 INS34 INS32 INS34 INS40 INS42 INS42 DEL83 DEL83 DEL34 DEL34 DEL34 DEL27 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL37 DEL21 DEL42 DEL42 DEL32 DEL7 DEL10 DEL45 DEL45 DEL34 DEL40 DEL34 DEL27 DEL42 DEL32 DEL21 DEL8 DEL51 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL8 DEL8 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL44 DEL8 DEL12 DEL54 DEL52 DEL42 DEL22 DEL34 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL8 DEL31