Merge branch 'release/1.0.0-incubating.M3'

+import com.gemstone.gemfire.cache.AttributesFactory;
+import com.gemstone.gemfire.cache.Region;
-import com.gemstone.gemfire.cache.asyncqueue.internal.AsyncEventQueueImpl;
+import com.gemstone.gemfire.cache.execute.FunctionService;
+import com.gemstone.gemfire.cache.execute.ResultCollector;
+import com.gemstone.gemfire.cache.lucene.internal.directory.DumpDirectoryFiles;
-import com.gemstone.gemfire.cache.lucene.internal.repository.serializer.HeterogenousLuceneSerializer;
+import com.gemstone.gemfire.cache.lucene.internal.filesystem.FileSystemStats;
+import com.gemstone.gemfire.cache.lucene.internal.repository.serializer.HeterogeneousLuceneSerializer;
-  private final Cache cache;
-
-    this.indexName = indexName;
-    this.regionPath = regionPath;
-    this.cache = cache;
+    super(indexName, regionPath, cache);
-  
+
-      PartitionedRegion dataRegion = (PartitionedRegion)cache.getRegion(regionPath);
-      assert dataRegion != null;
-      RegionAttributes ra = dataRegion.getAttributes();
-      DataPolicy dp = ra.getDataPolicy();
-      final boolean isPartitionedRegion = (ra.getPartitionAttributes() == null) ? false : true;
+      PartitionedRegion dataRegion = getDataRegion();
+      //assert dataRegion != null;
+      RegionAttributes regionAttributes = dataRegion.getAttributes();
+      DataPolicy dp = regionAttributes.getDataPolicy();
-      final boolean withStorage = isPartitionedRegion?ra.getPartitionAttributes().getLocalMaxMemory()>0:dp.withStorage();
+      final boolean withStorage = regionAttributes.getPartitionAttributes().getLocalMaxMemory()>0;
-      if (isPartitionedRegion) {
-        if (withPersistence) {
-          // TODO: add PartitionedRegionAttributes instead
-          regionShortCut = RegionShortcut.PARTITION_PERSISTENT;
-        } else {
-          regionShortCut = RegionShortcut.PARTITION;
-        }
+      if (withPersistence) {
+        // TODO: add PartitionedRegionAttributes instead
+        regionShortCut = RegionShortcut.PARTITION_PERSISTENT;
-        if (withPersistence) {
-          regionShortCut = RegionShortcut.REPLICATE_PERSISTENT;
-        } else {
-          regionShortCut = RegionShortcut.REPLICATE;
-        }
+        regionShortCut = RegionShortcut.PARTITION;
-      // final boolean isOffHeap = ra.getOffHeap();
-
-      final String fileRegionName = LuceneServiceImpl.getUniqueIndexName(indexName, regionPath)+".files";
-      fileRegion = cache.<String, File> getRegion(fileRegionName);
+      final String fileRegionName = createFileRegionName();
-      if (null == fileRegion) {
-        fileRegion = cache.<String, File> createRegionFactory(regionShortCut)
-            .setPartitionAttributes(new PartitionAttributesFactory<String, File>().setColocatedWith(regionPath)
-                .setTotalNumBuckets(partitionAttributes.getTotalNumBuckets())
-                .create())
-                .create(fileRegionName);
+      if (!fileRegionExists(fileRegionName)) {
+        fileRegion = createFileRegion(regionShortCut, fileRegionName, partitionAttributes, regionAttributes);
-      final String chunkRegionName = LuceneServiceImpl.getUniqueIndexName(indexName, regionPath) + ".chunks";
-      chunkRegion = cache.<ChunkKey, byte[]> getRegion(chunkRegionName);
-      if (null == chunkRegion) {
-        chunkRegion = cache.<ChunkKey, byte[]> createRegionFactory(regionShortCut)
-            .setPartitionAttributes(new PartitionAttributesFactory<ChunkKey, byte[]>().setColocatedWith(fileRegionName)
-                .setTotalNumBuckets(partitionAttributes.getTotalNumBuckets())
-                .create())
-                .create(chunkRegionName);
+      final String chunkRegionName = createChunkRegionName();
+      if (!chunkRegionExists(chunkRegionName)) {
+        chunkRegion = createChunkRegion(regionShortCut, fileRegionName, partitionAttributes, chunkRegionName, regionAttributes);
+      fileSystemStats.setFileSupplier(() -> (int) getFileRegion().getLocalSize());
+      fileSystemStats.setChunkSupplier(() -> (int) getChunkRegion().getLocalSize());
+      fileSystemStats.setBytesSupplier(() -> getChunkRegion().getPrStats().getDataStoreBytesInUse());
-      // we will create RegionDirectorys on the fly when data coming
-      HeterogenousLuceneSerializer mapper = new HeterogenousLuceneSerializer(getFieldNames());
-      repositoryManager = new PartitionedRepositoryManager(dataRegion, (PartitionedRegion)fileRegion, (PartitionedRegion)chunkRegion, mapper, analyzer);
+      // we will create RegionDirectories on the fly when data comes in
+      HeterogeneousLuceneSerializer mapper = new HeterogeneousLuceneSerializer(getFieldNames());
+      repositoryManager = new PartitionedRepositoryManager(dataRegion, (PartitionedRegion) fileRegion,
+        (PartitionedRegion) chunkRegion, mapper, analyzer, this.indexStats, this.fileSystemStats);
-      // create AEQ, AEQ listner and specify the listener to repositoryManager
-      AsyncEventQueueFactoryImpl factory = (AsyncEventQueueFactoryImpl) cache.createAsyncEventQueueFactory();
-      if (withPersistence) {
-        factory.setPersistent(true);
-      }
-      factory.setParallel(true); // parallel AEQ for PR
-      factory.setMaximumQueueMemory(1000);
-      factory.setDispatcherThreads(1);
-      factory.setIsMetaQueue(true);
-      
-      LuceneEventListener listener = new LuceneEventListener(repositoryManager);
-      String aeqId = LuceneServiceImpl.getUniqueIndexName(getName(), regionPath);
-      AsyncEventQueueImpl aeq = (AsyncEventQueueImpl)cache.getAsyncEventQueue(aeqId);
-      AsyncEventQueue indexQueue = factory.create(aeqId, listener);
+      // create AEQ, AEQ listener and specify the listener to repositoryManager
+      createAEQ(dataRegion);
+  private PartitionedRegion getDataRegion() {
+    return (PartitionedRegion) cache.getRegion(regionPath);
+  }
+
+  private PartitionedRegion getFileRegion() {
+    return (PartitionedRegion) fileRegion;
+  }
+
+  private PartitionedRegion getChunkRegion() {
+    return (PartitionedRegion) chunkRegion;
+  }
+
+  private AsyncEventQueueFactoryImpl createAEQFactory(final Region dataRegion) {
+    AsyncEventQueueFactoryImpl factory = (AsyncEventQueueFactoryImpl) cache.createAsyncEventQueueFactory();
+    factory.setParallel(true); // parallel AEQ for PR
+    factory.setMaximumQueueMemory(1000);
+    factory.setDispatcherThreads(1);
+    factory.setIsMetaQueue(true);
+    if(dataRegion.getAttributes().getDataPolicy().withPersistence()) {
+      factory.setPersistent(true);
+    }
+    factory.setDiskStoreName(dataRegion.getAttributes().getDiskStoreName());
+    factory.setDiskSynchronous(dataRegion.getAttributes().isDiskSynchronous());
+    factory.setForwardExpirationDestroy(true);
+    return factory;
+  }
+
+  AsyncEventQueue createAEQ(Region dataRegion) {
+    return createAEQ(createAEQFactory(dataRegion));
+  }
+
+  private AsyncEventQueue createAEQ(AsyncEventQueueFactoryImpl factory) {
+    LuceneEventListener listener = new LuceneEventListener(repositoryManager);
+    String aeqId = LuceneServiceImpl.getUniqueIndexName(getName(), regionPath);
+    AsyncEventQueue indexQueue = factory.create(aeqId, listener);
+    return indexQueue;
+  }
+
+  boolean fileRegionExists(String fileRegionName) {
+    return cache.<String, File> getRegion(fileRegionName) != null;
+  }
+
+  Region createFileRegion(final RegionShortcut regionShortCut,
+                                final String fileRegionName,
+                                final PartitionAttributes partitionAttributes,
+                                final RegionAttributes regionAttributes) {
+    return createRegion(fileRegionName, regionShortCut, this.regionPath, partitionAttributes, regionAttributes);
+  }
+
+  public String createFileRegionName() {
+    return LuceneServiceImpl.getUniqueIndexName(indexName, regionPath)+".files";
+  }
+
+  boolean chunkRegionExists(String chunkRegionName) {
+    return cache.<ChunkKey, byte[]> getRegion(chunkRegionName) != null;
+  }
+
+  Region<ChunkKey, byte[]> createChunkRegion(final RegionShortcut regionShortCut,
+                           final String fileRegionName,
+                           final PartitionAttributes partitionAttributes, final String chunkRegionName, final RegionAttributes regionAttributes) {
+    return createRegion(chunkRegionName, regionShortCut, fileRegionName, partitionAttributes, regionAttributes);
+  }
+
+  public String createChunkRegionName() {
+    return LuceneServiceImpl.getUniqueIndexName(indexName, regionPath) + ".chunks";
+  }
+
+  private PartitionAttributesFactory configureLuceneRegionAttributesFactory(PartitionAttributesFactory attributesFactory, PartitionAttributes<?,?> dataRegionAttributes) {
+    attributesFactory.setTotalNumBuckets(dataRegionAttributes.getTotalNumBuckets());
+    attributesFactory.setRedundantCopies(dataRegionAttributes.getRedundantCopies());
+    return attributesFactory;
+  }
+
+  protected <K, V> Region<K, V> createRegion(final String regionName,
+                                             final RegionShortcut regionShortCut,
+                                             final String colocatedWithRegionName,
+                                             final PartitionAttributes partitionAttributes,
+                                             final RegionAttributes regionAttributes)
+  {
+    PartitionAttributesFactory partitionAttributesFactory = new PartitionAttributesFactory<String, File>();
+    partitionAttributesFactory.setColocatedWith(colocatedWithRegionName);
+    configureLuceneRegionAttributesFactory(partitionAttributesFactory, partitionAttributes);
+
+    // Create AttributesFactory based on input RegionShortcut
+    RegionAttributes baseAttributes = this.cache.getRegionAttributes(regionShortCut.toString());
+    AttributesFactory factory = new AttributesFactory(baseAttributes);
+    factory.setPartitionAttributes(partitionAttributesFactory.create());
+    factory.setDiskStoreName(regionAttributes.getDiskStoreName());
+    RegionAttributes<K, V> attributes = factory.create();
+
+    return createRegion(regionName, attributes);
+  }
+
-  
+
+  @Override
+  public void dumpFiles(final String directory) {
+    ResultCollector results = FunctionService.onRegion(getDataRegion())
+      .withArgs(new String[] {directory, indexName})
+      .execute(DumpDirectoryFiles.ID);
+    results.getResult();
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 UPD40 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV78 MOV83 MOV39 MOV42 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS8 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS39 INS42 INS44 INS8 INS43 INS42 INS44 INS44 INS44 INS44 INS8 INS83 MOV43 INS42 INS8 INS39 INS42 INS44 INS8 UPD74 MOV74 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS83 MOV43 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS73 INS73 INS74 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS46 INS25 INS41 INS42 INS41 INS42 INS41 UPD42 MOV42 INS83 INS43 INS42 MOV60 MOV21 MOV21 MOV21 MOV21 MOV25 INS21 INS21 INS21 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 MOV60 MOV60 MOV60 INS41 INS43 INS42 INS41 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS41 INS43 INS42 INS41 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS41 INS41 UPD42 MOV42 MOV43 INS42 INS74 INS42 INS21 INS21 INS41 INS42 INS42 INS43 INS43 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS21 INS21 INS60 INS60 INS21 INS21 INS60 INS41 INS42 INS83 INS43 INS42 MOV60 INS21 INS42 INS42 INS42 MOV38 INS8 MOV11 INS11 INS11 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS32 MOV27 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV27 INS43 INS76 INS76 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS74 INS59 INS32 INS42 UPD43 INS32 INS60 MOV60 MOV60 MOV60 INS60 MOV60 MOV25 MOV25 INS60 MOV60 MOV25 MOV60 INS25 INS21 INS21 INS21 MOV60 MOV21 INS21 MOV21 MOV21 INS43 INS42 INS43 INS42 INS32 INS42 INS42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 MOV32 INS42 INS42 INS9 UPD42 MOV42 INS32 MOV32 INS33 INS42 INS42 INS42 MOV22 INS42 INS42 MOV32 MOV33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 MOV14 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS32 INS42 UPD42 MOV42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS43 MOV59 MOV43 MOV83 MOV39 INS59 INS83 INS43 INS59 INS38 MOV43 INS38 INS8 INS32 INS32 INS32 UPD43 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 MOV22 UPD42 MOV42 INS32 INS43 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS32 UPD42 MOV42 INS40 INS42 UPD42 UPD42 UPD42 INS32 MOV42 INS27 INS42 INS42 INS32 INS32 UPD42 INS32 INS32 MOV21 INS42 INS42 INS86 INS42 INS42 INS86 INS42 INS42 INS86 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS3 UPD42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV34 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS11 INS32 UPD43 INS22 INS22 INS42 INS42 INS32 INS5 INS4 INS42 INS32 INS42 INS32 INS39 INS32 INS39 INS32 INS32 INS42 UPD42 INS52 INS42 INS52 INS42 INS42 INS43 INS85 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL7 DEL21 DEL42 DEL83 DEL39 DEL32 DEL33 DEL27 DEL36 DEL9 DEL9 DEL16 DEL42 DEL42 DEL40 DEL7 DEL21 DEL8 DEL42 DEL40 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL6 DEL60 DEL42 DEL27 DEL42 DEL42 DEL32 DEL16 DEL59 DEL60 DEL42 DEL8 DEL8 DEL25 DEL33 DEL42 DEL27 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL83 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL27 DEL42 DEL42 DEL43 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL42 DEL14 DEL32 DEL42 DEL32 DEL32 DEL32 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL43 DEL42 DEL42 DEL32 DEL11