GEODE-4693: fix JDBCLoader on non-object pdx fields (#1517)

If the region mapping has a pdxClassName then the JdbcLoader will look for a pdx type that is already defined and use its field types when creating the PdxInstance. If the pdx type does not have a field that corresponds to an existing column then an exception is thrown.

A pdx field of type "char" or an instance of "java.lang.Character" will be sent to SQL as a String of size 1.
A pdx field of type "Date" will be sent to SQL as a java.sql.Timestamp.

A new external API was added to GemFireCache. It is the method "registerPdxMetaData".
It only needs to be called on clients if they are going to do reads using a JdbcLoader of data that wa s not written using the JdbcWriter or JdbcAsyncWriter.
-    String message;
-      message = e.getMessage() + System.lineSeparator() + ExceptionUtils.getFullStackTrace(e);
+      String message =
+          e.getMessage() + System.lineSeparator() + ExceptionUtils.getFullStackTrace(e);
+  /**
+   * Create a new JdbcConnectorException by first checking to see if the causing exception is or
+   * contains an exception that potentially could not be deserialized by remote systems receiving
+   * the serialized exception.
+   *
+   * @param message message of this Exception
+   * @param e cause of this Exception
+   * @return a new JdbcConnectorException containing either the causing exception, if it can be
+   *         serialized/deserialized by Geode, or containing the causing exception stack trace in
+   *         its message if not
+   */
+  public static JdbcConnectorException createException(String message, Exception e) {
+    if (containsNonSerializableException(e)) {
+      message += e.getMessage() + System.lineSeparator() + ExceptionUtils.getFullStackTrace(e);
+      return new JdbcConnectorException(message);
+    } else {
+      return new JdbcConnectorException(message, e);
+    }
+  }
+
+  public JdbcConnectorException(String message) {
+    super(message);
+  }
+
-    Throwable cause;
-    while ((cause = e.getCause()) != null) {
+    Throwable cause = e.getCause();
+    while (cause != null) {
+      cause = cause.getCause();
-  public JdbcConnectorException(String message) {
-    super(message);
+  private JdbcConnectorException(String message, Exception e) {
+    super(message, e);

MOV31 INS31 INS31 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS42 INS44 INS44 INS8 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS43 INS42 INS46 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 INS66 INS42 INS42 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS60 INS42 INS42 INS21 INS41 INS41 MOV32 INS42 INS21 MOV43 INS59 INS7 INS14 INS14 INS7 INS42 MOV27 INS42 INS27 INS43 INS42 INS43 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL7 DEL36