GEODE-4822 The second server instance startup error: Could not create an instance of PartitionRegionConfig

Fixed deserialization issue in a streaming result collector.

-  private static Object readUserObject(DataInput in, int serializerId)
+  private static Object readUserClass(DataInput in, int serializerId)
-    Boolean v = DISALLOW_JAVA_SERIALIZATION.get();
+    Boolean v = disallowJavaSerializationForThread.get();
-    Class c = readClass(in);
+    boolean readSerializedOverride = TypeRegistry.getPdxReadSerialized();
+    TypeRegistry.setPdxReadSerialized(false);
-      Constructor init = c.getConstructor(new Class[0]);
-      init.setAccessible(true);
-      Object o = init.newInstance(new Object[0]);
+      Class c = readClass(in);
+      try {
+        Constructor init = c.getConstructor(new Class[0]);
+        init.setAccessible(true);
+        Object o = init.newInstance(new Object[0]);
-      invokeFromData(o, in);
+        invokeFromData(o, in);
-      if (logger.isTraceEnabled(LogMarker.SERIALIZER)) {
-        logger.trace(LogMarker.SERIALIZER, "Read DataSerializableFixedID {}", o);
+        if (logger.isTraceEnabled(LogMarker.SERIALIZER)) {
+          logger.trace(LogMarker.SERIALIZER, "Read DataSerializableFixedID {}", o);
+        }
+
+        return o;
+
+      } catch (Exception ex) {
+        throw new SerializationException(
+            LocalizedStrings.DataSerializer_COULD_NOT_CREATE_AN_INSTANCE_OF_0
+                .toLocalizedString(c.getName()),
+            ex);
-
-      return o;
-
-    } catch (Exception ex) {
-      throw new SerializationException(
-          LocalizedStrings.DataSerializer_COULD_NOT_CREATE_AN_INSTANCE_OF_0
-              .toLocalizedString(c.getName()),
-          ex);
+    } finally {
+      TypeRegistry.setPdxReadSerialized(readSerializedOverride);
-  private static DataSerializer dvddeserializer;
-
-  // TODO: registerDVDDeserializer is unused
-  public static void registerDVDDeserializer(DataSerializer dvddeslzr) {
-    dvddeserializer = dvddeslzr;
-  }
-
-  public static <T> T readNonPdxInstanceObject(final DataInput in)
+  public static <T> T readDeserializedObject(final DataInput in)
-    boolean wouldReadSerialized = PdxInstanceImpl.getPdxReadSerialized();
+    boolean wouldReadSerialized = TypeRegistry.getPdxReadSerialized();
-      PdxInstanceImpl.setPdxReadSerialized(false);
+      TypeRegistry.setPdxReadSerialized(false);
-        PdxInstanceImpl.setPdxReadSerialized(true);
+        TypeRegistry.setPdxReadSerialized(true);
+  /**
+   * Just like readObject but override PdxInstanceImpl.getPdxReadSerialized(), allowing
+   * the result to be a PdxInstance if pdx-read-serialized is enabled on the cache.
+   * Use this to read cache keys, values and callback values in DataSerializableFixedID
+   * fromData methods, which have pdx-read-serialize disabled.
+   */
+  public static <T> T readUserObject(final DataInput in)
+      throws IOException, ClassNotFoundException {
+    boolean wouldReadSerialized = TypeRegistry.getPdxReadSerialized();
+    if (wouldReadSerialized) {
+      return DataSerializer.readObject(in);
+    } else {
+      TypeRegistry.setPdxReadSerialized(true);
+      try {
+        return DataSerializer.readObject(in);
+      } finally {
+        TypeRegistry.setPdxReadSerialized(false);
+      }
+    }
+  }
+
+  /**
+   * This method is used by DataSerializableFixedID objects in their fromData methods
+   * to deserialize application objects such as keys, values and callback arguments.
+   * It allows the value to be read as a PdxInstance instead of being completely
+   * deserialized into a POJO.
+   *
+   * @param runnable code performing deserialization with PdxInstanceImpl.setPdxReadSerialized set
+   *        to true
+   * @throws ClassNotFoundException
+   * @throws IOException
+   */
+  public static void doWithPdxReadSerialized(RunnableThrowingException runnable)
+      throws ClassNotFoundException, IOException {
+    boolean isAlreadySet = TypeRegistry.getPdxReadSerialized();
+    if (!isAlreadySet) {
+      TypeRegistry.setPdxReadSerialized(true);
+    }
+    try {
+      runnable.run();
+    } finally {
+      if (!isAlreadySet) {
+        TypeRegistry.setPdxReadSerialized(false);
+      }
+    }
+
+  }
+
-        return readUserObject(in, in.readByte());
+        return readUserClass(in, in.readByte());
-        return readUserObject(in, in.readShort());
+        return readUserClass(in, in.readShort());
-        return readUserObject(in, in.readInt());
+        return readUserClass(in, in.readInt());
+
+
+  /**
+   * @see #doWithPdxReadSerialized
+   */
+  @FunctionalInterface
+  public interface RunnableThrowingException {
+    void run() throws ClassNotFoundException, IOException;
+  }
+

MOV31 INS31 INS55 UPD42 INS8 UPD42 INS29 INS83 INS83 INS73 INS43 INS42 INS44 INS43 INS43 INS8 INS29 UPD42 INS43 INS43 INS8 INS29 INS78 INS83 INS42 INS31 INS60 INS21 INS54 INS65 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS60 INS25 INS65 INS65 INS65 INS65 UPD43 UPD42 INS42 INS42 INS60 INS25 INS54 INS65 INS42 INS39 INS42 INS43 INS43 INS39 INS59 INS32 MOV8 INS8 INS66 INS66 INS66 INS66 UPD42 MOV42 INS39 INS59 INS42 INS8 INS8 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 UPD42 INS39 INS59 INS38 INS8 INS8 INS8 INS67 INS42 INS42 INS42 INS32 INS42 INS42 INS9 INS21 UPD42 MOV42 INS32 INS41 INS21 INS54 INS42 INS32 INS42 MOV21 INS21 INS25 INS42 UPD42 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS32 INS8 INS8 INS42 INS42 INS32 INS32 INS38 INS8 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS9 INS41 INS21 INS42 INS42 INS9 INS42 INS42 INS42 INS21 INS32 INS32 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 DEL83 DEL83 DEL43 DEL59 DEL23 DEL42 DEL42 DEL7 DEL8