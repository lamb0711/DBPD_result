Merge branch 'release/1.5.0'

-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
-    setIfTransactionDistributed();
-    setIfTransactionDistributed();
-      return DistributionManager.SERIAL_EXECUTOR;
+      return ClusterDistributionManager.SERIAL_EXECUTOR;
-      return DistributionManager.PARTITIONED_REGION_EXECUTOR;
+      return ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR;
-  public boolean checkCacheClosing(DistributionManager dm) {
-    InternalCache cache = getInternalCache();
-    // return (cache != null && cache.isClosed());
+  public boolean checkCacheClosing(ClusterDistributionManager dm) {
+    if (dm == null) {
+      return true;
+    }
+    InternalCache cache = dm.getCache();
-  public boolean checkDSClosing(DistributionManager dm) {
+  public boolean checkDSClosing(ClusterDistributionManager dm) {
-  InternalCache getInternalCache() {
-    return GemFireCacheImpl.getInstance();
-  }
-
-  public void process(final DistributionManager dm) {
+  public void process(final ClusterDistributionManager dm) {
+      InternalCache cache = dm.getCache();
-        thr = new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0
-            .toLocalizedString(dm.getId()));
+        if (cache != null) {
+          thr = cache
+              .getCacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0
+                  .toLocalizedString(dm.getId()));
+        } else {
+          thr = new CacheClosedException(LocalizedStrings.PartitionMessage_REMOTE_CACHE_IS_CLOSED_0
+              .toLocalizedString(dm.getId()));
+        }
-      InternalCache cache = getInternalCache();
-  protected void sendReply(InternalDistributedMember member, int procId, DM dm, ReplyException ex,
-      PartitionedRegion pr, long startTime) {
+  protected void sendReply(InternalDistributedMember member, int procId, DistributionManager dm,
+      ReplyException ex, PartitionedRegion pr, long startTime) {
-  protected boolean operateOnRegion(DistributionManager dm, PartitionedRegion pr) {
+  protected boolean operateOnRegion(ClusterDistributionManager dm, PartitionedRegion pr) {
-  protected abstract boolean operateOnPartitionedRegion(DistributionManager dm,
+  protected abstract boolean operateOnPartitionedRegion(ClusterDistributionManager dm,
-  protected boolean _mayAddToMultipleSerialGateways(DistributionManager dm) {
+  protected boolean _mayAddToMultipleSerialGateways(ClusterDistributionManager dm) {
-    public void memberDeparted(final InternalDistributedMember id, final boolean crashed) {
+    public void memberDeparted(DistributionManager distributionManager,
+        final InternalDistributedMember id, final boolean crashed) {
-        e.handleAsUnexpected();
+        e.handleCause();
-
-  /*
-   * For Distributed Tx
-   */
-  private void setIfTransactionDistributed() {
-    InternalCache cache = GemFireCacheImpl.getInstance();
-    if (cache != null) {
-      if (cache.getTxManager() != null) {
-        this.isTransactionDistributed = cache.getTxManager().isDistributed();
-      }
-    }
-  }

UPD40 INS44 UPD43 INS25 UPD43 INS83 INS43 INS42 UPD43 UPD43 UPD43 UPD43 MOV44 UPD42 INS27 INS8 UPD42 INS42 MOV60 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS33 INS41 UPD40 UPD40 INS9 INS42 UPD42 INS8 INS25 INS41 INS42 UPD42 MOV27 INS8 MOV8 INS21 UPD42 INS7 INS42 INS32 INS42 INS42 INS32 INS40 INS42 INS32 INS42 INS42 DEL40 DEL26 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL41 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31