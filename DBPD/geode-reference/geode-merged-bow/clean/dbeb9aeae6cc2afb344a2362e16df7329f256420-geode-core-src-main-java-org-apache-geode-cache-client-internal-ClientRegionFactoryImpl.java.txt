Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class ClientRegionFactoryImpl<K,V> implements ClientRegionFactory<K,V>
-{
-  private final AttributesFactory<K,V> attrsFactory;
+public class ClientRegionFactoryImpl<K, V> implements ClientRegionFactory<K, V> {
+  private final AttributesFactory<K, V> attrsFactory;
-   * Constructs a ClientRegionFactory by creating a DistributedSystem and a Cache. If
-   * no DistributedSystem exists it creates a loner DistributedSystem,
-   * otherwise it uses the existing DistributedSystem.
-   * A default pool will be used unless ...
-   * The Region
-   * configuration is initialized using the given region shortcut.
+   * Constructs a ClientRegionFactory by creating a DistributedSystem and a Cache. If no
+   * DistributedSystem exists it creates a loner DistributedSystem, otherwise it uses the existing
+   * DistributedSystem. A default pool will be used unless ... The Region configuration is
+   * initialized using the given region shortcut.
-   * @param pra
-   *          the region shortcut to use
+   * @param pra the region shortcut to use
-      throw new IllegalStateException("The region shortcut " + pra
-                                      + " has been removed from " + cache.listRegionAttributes());
+      throw new IllegalStateException(
+          "The region shortcut " + pra + " has been removed from " + cache.listRegionAttributes());
-    this.attrsFactory = new AttributesFactory<K,V>(ra);
+    this.attrsFactory = new AttributesFactory<K, V>(ra);
-   * Constructs a ClientRegionFactory by creating a DistributedSystem and a Cache. If
-   * no DistributedSystem exists it creates a loner DistributedSystem,
-   * otherwise it uses the existing DistributedSystem.
-   * A default pool will be used unless ...
-   * The region configuration is initialized using a region attributes
-   * whose name was given as the refid.
+   * Constructs a ClientRegionFactory by creating a DistributedSystem and a Cache. If no
+   * DistributedSystem exists it creates a loner DistributedSystem, otherwise it uses the existing
+   * DistributedSystem. A default pool will be used unless ... The region configuration is
+   * initialized using a region attributes whose name was given as the refid.
-   * @param refid
-   *          the name of the region attributes to use
+   * @param refid the name of the region attributes to use
-      throw new IllegalStateException("The named region attributes \"" + refid
-                                      + "\" has not been defined.");
+      throw new IllegalStateException(
+          "The named region attributes \"" + refid + "\" has not been defined.");
-    this.attrsFactory = new AttributesFactory<K,V>(ra);
+    this.attrsFactory = new AttributesFactory<K, V>(ra);
-//    this.attrsFactory.setIgnoreJTA(true);  in 6.6 and later releases client regions support JTA
+    // this.attrsFactory.setIgnoreJTA(true); in 6.6 and later releases client regions support JTA
-  
+
-  public ClientRegionFactory<K,V> addCacheListener(CacheListener<K,V> aListener)
-  {
+  public ClientRegionFactory<K, V> addCacheListener(CacheListener<K, V> aListener) {
-  public ClientRegionFactory<K,V> initCacheListeners(CacheListener<K,V>[] newListeners)
-  {
+  public ClientRegionFactory<K, V> initCacheListeners(CacheListener<K, V>[] newListeners) {
-  public ClientRegionFactory<K,V> setEvictionAttributes(EvictionAttributes evictionAttributes) {
+  public ClientRegionFactory<K, V> setEvictionAttributes(EvictionAttributes evictionAttributes) {
-  public ClientRegionFactory<K,V> setEntryIdleTimeout(ExpirationAttributes idleTimeout)
-  {
+  public ClientRegionFactory<K, V> setEntryIdleTimeout(ExpirationAttributes idleTimeout) {
-  public ClientRegionFactory<K,V> setCustomEntryIdleTimeout(CustomExpiry<K,V> custom) {
+  public ClientRegionFactory<K, V> setCustomEntryIdleTimeout(CustomExpiry<K, V> custom) {
-  
-  public ClientRegionFactory<K,V> setEntryTimeToLive(ExpirationAttributes timeToLive)
-  {
+
+  public ClientRegionFactory<K, V> setEntryTimeToLive(ExpirationAttributes timeToLive) {
-  public ClientRegionFactory<K,V> setCustomEntryTimeToLive(CustomExpiry<K,V> custom) {
+  public ClientRegionFactory<K, V> setCustomEntryTimeToLive(CustomExpiry<K, V> custom) {
-  
-  public ClientRegionFactory<K,V> setRegionIdleTimeout(ExpirationAttributes idleTimeout)
-  {
+
+  public ClientRegionFactory<K, V> setRegionIdleTimeout(ExpirationAttributes idleTimeout) {
-  public ClientRegionFactory<K,V> setRegionTimeToLive(ExpirationAttributes timeToLive)
-  {
+  public ClientRegionFactory<K, V> setRegionTimeToLive(ExpirationAttributes timeToLive) {
-  public ClientRegionFactory<K,V> setKeyConstraint(Class<K> keyConstraint)
-  {
+  public ClientRegionFactory<K, V> setKeyConstraint(Class<K> keyConstraint) {
-  public ClientRegionFactory<K,V> setValueConstraint(Class<V> valueConstraint)
-  {
+  public ClientRegionFactory<K, V> setValueConstraint(Class<V> valueConstraint) {
-  public ClientRegionFactory<K,V> setInitialCapacity(int initialCapacity)
-  {
+  public ClientRegionFactory<K, V> setInitialCapacity(int initialCapacity) {
-  public ClientRegionFactory<K,V> setLoadFactor(float loadFactor)
-  {
+  public ClientRegionFactory<K, V> setLoadFactor(float loadFactor) {
-  public ClientRegionFactory<K,V> setConcurrencyLevel(int concurrencyLevel)
-  {
+  public ClientRegionFactory<K, V> setConcurrencyLevel(int concurrencyLevel) {
-  public ClientRegionFactory<K,V> setDiskStoreName(String name) {
+  public ClientRegionFactory<K, V> setDiskStoreName(String name) {
-  
-  public ClientRegionFactory<K,V> setDiskSynchronous(boolean isSynchronous)
-  {
+
+  public ClientRegionFactory<K, V> setDiskSynchronous(boolean isSynchronous) {
-  public ClientRegionFactory<K,V> setStatisticsEnabled(boolean statisticsEnabled)
-  {
+  public ClientRegionFactory<K, V> setStatisticsEnabled(boolean statisticsEnabled) {
-  public ClientRegionFactory<K,V> setCloningEnabled(boolean cloningEnable) {
+  public ClientRegionFactory<K, V> setCloningEnabled(boolean cloningEnable) {
-  public ClientRegionFactory<K,V> setPoolName(String poolName) {
+  public ClientRegionFactory<K, V> setPoolName(String poolName) {
-  }  
-  
+  }
+
-  public Region<K,V> create(String name) throws RegionExistsException {
+  public Region<K, V> create(String name) throws RegionExistsException {
-  public Region<K,V> createSubregion(Region<?,?> parent, String name) throws RegionExistsException {
-    return ((LocalRegion)parent).createSubregion(name, createRegionAttributes());
+  public Region<K, V> createSubregion(Region<?, ?> parent, String name)
+      throws RegionExistsException {
+    return ((LocalRegion) parent).createSubregion(name, createRegionAttributes());
-  
+
-  private RegionAttributes<K,V> createRegionAttributes() {
-    RegionAttributes<K,V> ra = this.attrsFactory.create();
+  private RegionAttributes<K, V> createRegionAttributes() {
+    RegionAttributes<K, V> ra = this.attrsFactory.create();
-      UserSpecifiedRegionAttributes<K, V> ura = (UserSpecifiedRegionAttributes<K, V>)ra;
+      UserSpecifiedRegionAttributes<K, V> ura = (UserSpecifiedRegionAttributes<K, V>) ra;
-  //  public ClientRegionFactory<K, V> addParallelGatewaySenderId(
-//      String parallelGatewaySenderId) {
-//    this.attrsFactory.addParallelGatewaySenderId(parallelGatewaySenderId);
-//    return this;
-//  }
-//
-//  public ClientRegionFactory<K, V> addSerialGatewaySenderId(
-//      String serialGatewaySenderId) {
-//    this.attrsFactory.addSerialGatewaySenderId(serialGatewaySenderId);
-//    return this;
-//  }
-  
+  // public ClientRegionFactory<K, V> addParallelGatewaySenderId(
+  // String parallelGatewaySenderId) {
+  // this.attrsFactory.addParallelGatewaySenderId(parallelGatewaySenderId);
+  // return this;
+  // }
+  //
+  // public ClientRegionFactory<K, V> addSerialGatewaySenderId(
+  // String serialGatewaySenderId) {
+  // this.attrsFactory.addSerialGatewaySenderId(serialGatewaySenderId);
+  // return this;
+  // }
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66