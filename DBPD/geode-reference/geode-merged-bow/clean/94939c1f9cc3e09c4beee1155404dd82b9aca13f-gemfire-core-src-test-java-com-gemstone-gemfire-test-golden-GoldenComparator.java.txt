GEODE-127: Improve test reliability and execution speed.

Recategorize tests involving spawned processes and file system I/O as
IntegrationTests.

Improve reliability and shorten execution time. Fix up asynchronous waits,
correct JUnit 4 syntax and misc code tidying.

Add new TestSuite classes for targeted testing of test.golden and
test.process packages.

+import static org.junit.Assert.*;
+
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.internal.logging.LogService;
-import junit.framework.Assert;
-
-public abstract class GoldenComparator extends Assert {
+public abstract class GoldenComparator {
-  //private static final boolean ALLOW_EXTRA_WHITESPACE = true;
-  
-  protected final Logger logger = LogService.getLogger();
+  //TODO: private static final boolean ALLOW_EXTRA_WHITESPACE = true;
-  protected GoldenComparator(String[] expectedProblemLines) {
+  protected GoldenComparator(final String[] expectedProblemLines) {
-  protected Reader readGoldenFile(String goldenFileName) throws IOException {
-    InputStream goldenStream = ClassLoader.getSystemResourceAsStream(goldenFileName);
+  protected Reader readGoldenFile(final String goldenFileName) throws IOException {
+    final InputStream goldenStream = ClassLoader.getSystemResourceAsStream(goldenFileName);
-  public void assertOutputMatchesGoldenFile(String actualOutput, String goldenFileName) throws IOException {
-    logger.debug(GoldenTestCase.GOLDEN_TEST, "GoldenComparator:assertOutputMatchesGoldenFile");
-    BufferedReader goldenReader = new BufferedReader(readGoldenFile(goldenFileName));
-    BufferedReader actualReader = new BufferedReader(new StringReader(actualOutput));
+  public void assertOutputMatchesGoldenFile(final String actualOutput, final String goldenFileName) throws IOException {
+    debug("GoldenComparator:assertOutputMatchesGoldenFile");
+    final BufferedReader goldenReader = new BufferedReader(readGoldenFile(goldenFileName));
+    final BufferedReader actualReader = new BufferedReader(new StringReader(actualOutput));
-    List<String> goldenStrings = readLines(goldenReader);
-    List<String> actualStrings = readLines(actualReader);
+    final List<String> goldenStrings = readLines(goldenReader);
+    final List<String> actualStrings = readLines(actualReader);
-      logger.debug(GoldenTestCase.GOLDEN_TEST, "GoldenComparator comparing line {}", lineCount);
+      debug("GoldenComparator comparing line " + lineCount);
-      //checkForProblem(lineCount, actualLine);
-        assertTrue("Actual output \"" + actualLine
-            + "\" did not match expected pattern \"" + goldenLine
-            + "\" at line " + lineCount + " in " + goldenFileName 
-            + ": " + new OutputFormatter(actualStrings), 
-            compareLines(actualLine, goldenLine));
+        assertTrue("Actual output \"" + actualLine + "\" did not match expected pattern \"" + goldenLine + "\" at line " + lineCount + " in " + goldenFileName + ": " + new OutputFormatter(actualStrings), compareLines(actualLine, goldenLine));
-  protected abstract boolean compareLines(String actualLine, String goldenLine);
+  protected abstract boolean compareLines(final String actualLine, final String goldenLine);
-  private List<String> readLines(BufferedReader reader) throws IOException {
-    List<String> listOfLines = new ArrayList<String>();
+  private List<String> readLines(final BufferedReader reader) throws IOException {
+    final List<String> listOfLines = new ArrayList<String>();
-  private void scanForProblems(List<String> lines) throws IOException {
-    logger.debug(GoldenTestCase.GOLDEN_TEST, "GoldenComparator:scanForProblems");
+  private void scanForProblems(final List<String> lines) throws IOException {
+    debug("GoldenComparator:scanForProblems");
-      logger.debug(GoldenTestCase.GOLDEN_TEST, "GoldenComparator:scanForProblems scanning line {}", lineCount);
+      debug("GoldenComparator:scanForProblems scanning line " + lineCount);
-  private void checkForProblem(int lineCount, String line) {
+  private void checkForProblem(final int lineCount, final String line) {
-  private void checkLineFor(int lineCount, String line, String problem) {
+  private void checkLineFor(final int lineCount, final String line, final String problem) {
-          logger.debug(GoldenTestCase.GOLDEN_TEST, "Comparing \"{}\" against expected \"{}\"", line, this.expectedProblemLines[i]);
+          debug("Comparing \" + line + \" against expected \" + this.expectedProblemLines[i] + \"");
-      logger.debug(GoldenTestCase.GOLDEN_TEST, "About to fail because of {}", line);
+      debug("About to fail because of " + line);
+
+  protected static void debug(final String string) {
+    GoldenTestCase.debug(string);
+  }

MOV26 UPD40 MOV44 MOV44 INS31 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 UPD42 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS83 INS43 INS42 INS21 INS83 INS83 INS83 INS83 INS83 INS83 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS27 INS27 INS27 INS45 INS42 INS45 INS42 INS45 INS42 UPD45 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL83 DEL43 DEL42 DEL32 DEL59 DEL23 DEL42 DEL40 DEL42 DEL40 DEL45 DEL42 DEL42 DEL40 DEL42 DEL40 DEL45 DEL42 DEL42 DEL40 DEL42 DEL52 DEL42 DEL22 DEL42 DEL2 DEL42 DEL40 DEL45 DEL42