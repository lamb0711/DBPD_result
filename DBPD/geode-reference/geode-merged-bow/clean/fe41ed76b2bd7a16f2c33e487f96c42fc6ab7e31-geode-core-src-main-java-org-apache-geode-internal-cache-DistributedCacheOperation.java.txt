GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
+import org.apache.geode.cache.EntryOperation;
-import org.apache.geode.internal.Version;
-import org.apache.geode.internal.cache.DistributedPutAllOperation.PutAllMessage;
+import org.apache.geode.internal.cache.partitioned.Bucket;
+import org.apache.geode.internal.offheap.Releasable;
-/**
- * 
- */
+
+
-  public final static byte DESERIALIZATION_POLICY_NUMBITS =
+  public static final byte DESERIALIZATION_POLICY_NUMBITS =
+
-      if (logger.isDebugEnabled()) {
+      if (logger.isTraceEnabled()) {
-      if (logger.isDebugEnabled()) {
+      if (logger.isTraceEnabled()) {
-      } catch (InterruptedException e) {
+      } catch (InterruptedException ignore) {
-      Set needsOldValueInCacheOp = Collections.EMPTY_SET;
+      Set needsOldValueInCacheOp = Collections.emptySet();
-      Set twoMessages = Collections.EMPTY_SET;
+      Set twoMessages = Collections.emptySet();
-        twoMessages = ((BucketRegion) region).getBucketAdvisor().adviseRequiresTwoMessages();
+        twoMessages = ((Bucket) region).getBucketAdvisor().adviseRequiresTwoMessages();
-      Set adjunctRecipients = Collections.EMPTY_SET;
+      Set adjunctRecipients = Collections.emptySet();
-      Set cachelessNodes = Collections.EMPTY_SET;
-      Set adviseCacheServers = Collections.EMPTY_SET;
-      Set<InternalDistributedMember> cachelessNodesWithNoCacheServer =
-          new HashSet<InternalDistributedMember>();
+      Set cachelessNodes = Collections.emptySet();
+      Set adviseCacheServers;
+      Set<InternalDistributedMember> cachelessNodesWithNoCacheServer = new HashSet<>();
-            if (!recipients.contains(member)) {
+            if (!recipients.contains(member) || adjunctRecipients.contains(member)) {
-            } else if (adjunctRecipients.contains(member)) {
-              list.remove(member);
-          region.handleReliableDistribution(Collections.EMPTY_SET);
+          region.handleReliableDistribution(Collections.emptySet());
-        /** compute local client routing before waiting for an ack only for a bucket */
+        // compute local client routing before waiting for an ack only for a bucket
-            && region.getSystem().getConfig().getMcastPort() != 0 && this.supportsMulticast();;
+            && region.getSystem().getConfig().getMcastPort() != 0 && this.supportsMulticast();
-              recipients = Collections.EMPTY_SET;
+              recipients = Collections.emptySet();
-          adviseCacheServers = ((BucketRegion) region).getPartitionedRegion()
+          adviseCacheServers = ((Bucket) region).getPartitionedRegion()
-        /** compute local client routing before waiting for an ack only for a bucket */
+        // compute local client routing before waiting for an ack only for a bucket
-
-      CacheProfile cf = (CacheProfile) ((BucketRegion) getRegion()).getPartitionedRegion()
+      CacheProfile cf = (CacheProfile) ((Bucket) getRegion()).getPartitionedRegion()
-
-          if (cq.getFilterID() == cqID
-              && (e.getValue().equals(Integer.valueOf(MessageType.LOCAL_DESTROY)))) {
-            cq.removeFromCqResultKeys(((EntryEventImpl) event).getKey(), true);
+          if (cq.getFilterID() == cqID && (e.getValue().equals(MessageType.LOCAL_DESTROY))) {
+            cq.removeFromCqResultKeys(((EntryOperation) event).getKey(), true);
-
-   * 
-   * @param p
-   * @param msg
-  /**
-   * @param closedMembers
-   */
-    // if (region.isUsedForPartitionedRegionBucket()) {
-    advisor = ((BucketRegion) region).getPartitionedRegion().getCacheDistributionAdvisor();
-    // } else {
-    // advisor = ((DistributedRegion)region).getCacheDistributionAdvisor();
-    // }
+    advisor = region.getPartitionedRegion().getCacheDistributionAdvisor();
-
-
-     * @param reply
-     * @param processor
-      {
-        @Unretained
-        Object val = event.getRawOldValue();
-        if (val == null || val == Token.NOT_AVAILABLE || val == Token.REMOVED_PHASE1
-            || val == Token.REMOVED_PHASE2 || val == Token.DESTROYED || val == Token.TOMBSTONE) {
-          return;
-        }
+      @Unretained
+      Object val = event.getRawOldValue();
+      if (val == null || val == Token.NOT_AVAILABLE || val == Token.REMOVED_PHASE1
+          || val == Token.REMOVED_PHASE2 || val == Token.DESTROYED || val == Token.TOMBSTONE) {
+        return;
-      GemFireCacheImpl gfc = (GemFireCacheImpl) CacheFactory.getInstance(dm.getSystem());
+      InternalCache gfc = (InternalCache) CacheFactory.getInstance(dm.getSystem());
-      } catch (CancelException e) {
+      } catch (CancelException ignore) {
-              if (logger.isDebugEnabled()) {
+              if (logger.isTraceEnabled()) {
-            ((EntryEventImpl) event).release();
+            ((Releasable) event).release();
-      } catch (RegionDestroyedException e) {
+      } catch (RegionDestroyedException ignore) {
-      } catch (CancelException e) {
+      } catch (CancelException ignore) {
-      } catch (EntryNotFoundException e) {
+      } catch (EntryNotFoundException ignore) {
-        ReplyException exception = rex;
-        ReplyMessage.send(recipient, pId, exception, dm, !this.appliedOperation, this.closed, false,
+        ReplyMessage.send(recipient, pId, rex, dm, !this.appliedOperation, this.closed, false,
-     * 
-     * @param rgn
-     * @param ev
-    // protected LocalRegion getRegionFromPath(InternalDistributedSystem sys,
-    // String path) {
-    // return LocalRegion.getRegionFromPath(sys, path);
-    // }
-
-      // super.fromData(in);
-      // super.toData(out);
-
-    public CopyOnWriteHashSet<InternalDistributedMember> closedMembers =
-        new CopyOnWriteHashSet<InternalDistributedMember>();
+    public CopyOnWriteHashSet<InternalDistributedMember> closedMembers = new CopyOnWriteHashSet<>();

MOV26 MOV26 INS26 UPD40 UPD40 INS40 INS83 MOV8 MOV21 UPD43 UPD74 MOV43 MOV43 UPD42 UPD42 INS32 INS32 INS32 INS32 INS42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD74 UPD42 UPD42 INS32 INS27 INS42 INS42 UPD43 MOV38 MOV32 UPD43 MOV40 UPD42 UPD42 UPD42 UPD43 INS32 UPD42 INS42 INS42 UPD43 UPD43 UPD42 UPD42 DEL29 DEL83 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL40 DEL20 DEL40 DEL42 DEL42 DEL32 DEL42 DEL65 DEL42 DEL65 DEL42 DEL65 DEL29 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL65 DEL42 DEL65 DEL8 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL65 DEL42 DEL65 DEL42 DEL43