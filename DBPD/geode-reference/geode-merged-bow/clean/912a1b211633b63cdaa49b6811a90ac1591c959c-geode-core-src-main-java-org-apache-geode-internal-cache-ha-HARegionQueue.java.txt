GEODE-4902: Refactor LogMarker class and usage (#1678)

* GEODE-4902: Refactor LogMarker and usage
* Distinguish those markers at the TRACE and DEBUG levels (now Markers named *_VERBOSE) from those that log at a coarser grainularity (now Markers named *_MARKER)
* Suppress only *_VERBOSE markers by default, from previous behavior of suppressing all markers.
* Refactor some pathological log checks, e.g., change a log from debug to trace when it is gated behind ifTraceEnabled block.
* Remove unused Markers.
* Remove any log marker logic from AdminWaiters exception message generation.  Exceptions now always include a full message.
* Remove marker-gated print to System.out in PersistentOplogSet -- direct calls to System.out should not exist in that class.
* Add marker EVENT_ID_TO_STRING_VERBOSE to explicitly distinguish instance of marker used in logic not immediately consumed by a logger.  The consumption of EventId::toString should only exist at logging in any event.
**
* Remove nearby dead code and dead code detected during marker removal.
* Expand wildcard imports in touched files.
* Remove TODO comments, at least one of which was a decade old.
* Collapse nearby, redundant catch blocks
* Remove empty finally blocks
* Update documentation page to refer to GEODE_VERBOSE, from deprecated GEMFIRE_VERBOSE
* The change in log marker names causes one class to compile larger.  Updated sanctionedDataSerializables.

-    } catch (IOException e) {
-      problem = e;
-    } catch (ClassNotFoundException e) {
+    } catch (IOException | ClassNotFoundException e) {
-    final boolean isDebugEnabled_BS = logger.isTraceEnabled(LogMarker.BRIDGE_SERVER);
+    final boolean isDebugEnabled_BS = logger.isTraceEnabled(LogMarker.BRIDGE_SERVER_VERBOSE);
-      logger.trace(LogMarker.BRIDGE_SERVER, sb.toString());
+      logger.trace(LogMarker.BRIDGE_SERVER_VERBOSE, sb.toString());
-              // putInQueue(val);
-              // logger.info(LocalizedStrings.DEBUG, this + " putting GII entry #" + counterInRegion
-              // + " into queue: " + val);
-          if (logger.isTraceEnabled(LogMarker.BRIDGE_SERVER)) {
-            logger.trace(LogMarker.BRIDGE_SERVER, "{}: Adding message to queue: {}", this, object);
+          if (logger.isTraceEnabled(LogMarker.BRIDGE_SERVER_VERBOSE)) {
+            logger.trace(LogMarker.BRIDGE_SERVER_VERBOSE, "{}: Adding message to queue: {}", this,
+                object);
-        if (logger.isTraceEnabled(LogMarker.BRIDGE_SERVER)) {
-          logger.trace(LogMarker.BRIDGE_SERVER, "{}: Adding message to queue: {}", this, object);
+        if (logger.isTraceEnabled(LogMarker.BRIDGE_SERVER_VERBOSE)) {
+          logger.trace(LogMarker.BRIDGE_SERVER_VERBOSE, "{}: Adding message to queue: {}", this,
+              object);
-    // slow GII serving for debugging #43609
-    // try {Thread.sleep(5000);} catch (InterruptedException e) {
-    // Thread.currentThread().interrupt(); }
-      final boolean isDebugEnabled_BS = logger.isTraceEnabled(LogMarker.BRIDGE_SERVER);
+      final boolean isDebugEnabled_BS = logger.isTraceEnabled(LogMarker.BRIDGE_SERVER_VERBOSE);
-        logger.trace(LogMarker.BRIDGE_SERVER,
+        logger.trace(LogMarker.BRIDGE_SERVER_VERBOSE,
-            logger.trace(LogMarker.BRIDGE_SERVER,
+            logger.trace(LogMarker.BRIDGE_SERVER_VERBOSE,
-      } catch (RegionDestroyedException ignore) {
-        // keep going
-      } catch (CancelException ignore) {
+      } catch (RegionDestroyedException | CancelException ignore) {

INS84 UPD40 MOV43 MOV43 UPD40 UPD40 UPD40 INS84 UPD40 MOV43 MOV43 UPD40 UPD40 UPD40 UPD40 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL8 DEL12 DEL42 DEL44 DEL8 DEL12