Merge branch 'feature/GEODE-17-2' into develop

+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.URI;
+import java.util.Map;
+import java.util.Properties;
+import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.http.client.ClientHttpRequest;
+import org.springframework.http.client.ClientHttpResponse;
+import org.springframework.web.client.RequestCallback;
+import org.springframework.web.client.ResponseErrorHandler;
+import org.springframework.web.client.RestClientException;
+import com.gemstone.gemfire.internal.lang.StringUtils;
+import com.gemstone.gemfire.internal.util.IOUtils;
+import com.gemstone.gemfire.management.internal.cli.shell.Gfsh;
+import com.gemstone.gemfire.management.internal.security.ResourceConstants;
+
+
+  private String user;
+
+  private String pwd;
+
+  private Map<String,String> securityProperties;
-  public SimpleHttpRequester() {
-    this(DEFAULT_CONNECT_TIMEOUT);
+  public SimpleHttpRequester(Gfsh gfsh,Map<String,String> securityProperties) {
+    this(gfsh, DEFAULT_CONNECT_TIMEOUT, securityProperties);
-  public SimpleHttpRequester(final int connectTimeout) {
+  public SimpleHttpRequester(final Gfsh gfsh, final int connectTimeout, Map<String,String> securityProperties) {
+    this.securityProperties = securityProperties;
+
+    this.restTemplate.setErrorHandler(new ResponseErrorHandler() {
+      @Override
+      public boolean hasError(final ClientHttpResponse response) throws IOException {
+        final HttpStatus status = response.getStatusCode();
+
+        switch (status) {
+        case BAD_REQUEST: // 400 *
+        case UNAUTHORIZED: // 401
+        case FORBIDDEN: // 403
+        case NOT_FOUND: // 404 *
+        case METHOD_NOT_ALLOWED: // 405 *
+        case NOT_ACCEPTABLE: // 406 *
+        case REQUEST_TIMEOUT: // 408
+        case CONFLICT: // 409
+        case REQUEST_ENTITY_TOO_LARGE: // 413
+        case REQUEST_URI_TOO_LONG: // 414
+        case UNSUPPORTED_MEDIA_TYPE: // 415 *
+        case TOO_MANY_REQUESTS: // 429
+        case INTERNAL_SERVER_ERROR: // 500 *
+        case NOT_IMPLEMENTED: // 501
+        case BAD_GATEWAY: // 502 ?
+        case SERVICE_UNAVAILABLE: // 503
+          return true;
+        default:
+          return false;
+        }
+      }
+
+      @Override
+      public void handleError(final ClientHttpResponse response) throws IOException {
+        final String message = String.format("The HTTP request failed with: %1$d - %2$s", response.getRawStatusCode(),
+            response.getStatusText());
+
+        throw new RuntimeException(message);
+
+      }
+
+
+    });
+
-   * Performs an HTTP PUT operation on the requested resource identified/located by the specified URL.
+   * Performs an HTTP PUT operation on the requested resource identifiedR/located by the specified URL.
+  /**
+   * Performs an HTTP GET operation on the requested resource identified/located
+   * by the specified URL.
+   * <p/>
+   *
+   * @param url
+   *          a String value identifying or locating the resource intended for
+   *          the HTTP operation.
+   * @param urlVariables
+   *          an array of variables to substitute in the URI/URL template.
+   * @see org.springframework.web.client.RestTemplate#getForObject(String,
+   *      Class, Object...)
+   */
+  public <T> T exchange(final String url, final Class<T> responseType, final Object... urlVariables) {
+    ResponseEntity<T> response = getRestTemplate().exchange(url, HttpMethod.GET, getRequestEntity(), responseType);
+    return response.getBody();
+  }
+
+  protected HttpEntity<?> getRequestEntity() {
+    HttpHeaders requestHeaders = new HttpHeaders();
+    if(this.securityProperties != null){
+      requestHeaders.setAll(securityProperties);
+    }
+
+    HttpEntity<?> requestEntity = new HttpEntity(requestHeaders);
+
+    return requestEntity;
+
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS74 INS59 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS73 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS74 INS42 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS43 INS42 INS74 INS42 INS83 INS43 INS42 INS74 INS42 MOV60 MOV21 INS21 MOV21 INS21 INS65 INS65 INS65 INS65 INS42 INS42 INS83 INS43 INS42 INS83 INS74 INS42 INS83 INS43 INS42 INS60 INS41 INS43 INS76 INS60 INS25 INS60 INS41 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS43 INS43 INS43 INS7 INS32 UPD66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS68 INS42 INS43 INS43 INS42 INS74 INS59 INS32 INS42 INS43 INS59 INS27 INS8 INS74 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS14 INS40 INS42 INS69 INS69 INS69 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS22 INS33 INS21 INS43 INS76 INS42 INS14 INS52 INS42 INS52 INS42 INS43 INS1 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS40 INS32 INS42 INS43 INS52 INS42 INS32 INS42 INS43 INS42 INS42 INS31 INS31 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS44 INS43 MOV8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS83 INS43 INS42 INS42 INS60 INS50 INS42 INS83 INS43 INS42 INS42 INS60 INS53 INS42 INS83 INS43 INS59 INS42 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS49 INS41 INS49 INS41 INS42 INS83 INS43 INS59 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS9 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS32 INS42 INS42 INS42 INS42 INS42