GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-/**
- * 
- */
-   * Constructs an instance of <code>PartitionAttributes</code> with default settings.
+   * Constructs an instance of {@code PartitionAttributes} with default settings.
-  public PartitionAttributesImpl() {}
+  public PartitionAttributesImpl() {
+    // do nothing
+  }
-
+  @Override
-  // public ExpirationAttributes getEntryTimeToLive()
-  // {
-  // return new ExpirationAttributes(this.entryTimeToLiveExpiration.getTimeout(),
-  // this.entryTimeToLiveExpiration.getAction());
-  // }
-  //
-  // public ExpirationAttributes getEntryIdleTimeout()
-  // {
-  // return new ExpirationAttributes(this.entryIdleTimeoutExpiration.getTimeout(),
-  // this.entryIdleTimeoutExpiration.getAction());
-  // }
-
+  @Override
+  @Override
-  // deprecated method
+  @Override
+  @Override
+  @Override
-      if (this.localMaxMemoryExists) { // real value now exists so set it and return
+      if (this.localMaxMemoryExists) {
+        // real value now exists so set it and return
-    if (this.offHeap && !this.localMaxMemoryExists) { // real value does NOT yet exist so throw
-                                                      // IllegalStateException
+    if (this.offHeap && !this.localMaxMemoryExists) {
+      // real value does NOT yet exist so throw IllegalStateException
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-    } catch (CloneNotSupportedException e) {
+    } catch (CloneNotSupportedException ignore) {
-    StringBuffer s = new StringBuffer();
-    return s.append("PartitionAttributes@").append(System.identityHashCode(this))
+    StringBuilder sb = new StringBuilder();
+    return sb.append("PartitionAttributes@").append(System.identityHashCode(this))
+  @Override
+  @Override
-        // || ! this.localProperties.equals(other.getLocalProperties())
-        // || ! this.globalProperties.equals(other.getGlobalProperties())
-      // throw new RuntimeException("this="+this.toString() + " other=" + other.toString());
-    Set<String> otherListenerClassName = new HashSet<String>();
+    Set<String> otherListenerClassName = new HashSet<>();
-    Set<String> thisListenerClassName = new HashSet<String>();
+    Set<String> thisListenerClassName = new HashSet<>();
-      } catch (RuntimeException e) {
+      } catch (RuntimeException ignore) {
-      } catch (RuntimeException e) {
+      } catch (RuntimeException ignore) {
-      this.fixedPAttrs = new ArrayList<FixedPartitionAttributesImpl>(1);
+      this.fixedPAttrs = new ArrayList<>(1);
-              .toLocalizedString(Integer.valueOf(this.totalNumBuckets)));
+              .toLocalizedString(this.totalNumBuckets));
-              .toLocalizedString(Integer.valueOf(this.redundancy)));
+              .toLocalizedString(this.redundancy));
-      {
-        if (region == null) {
-          throw new IllegalStateException(
-              LocalizedStrings.PartitionAttributesImpl_REGION_SPECIFIED_IN_COLOCATEDWITH_IS_NOT_PRESENT_IT_SHOULD_BE_CREATED_BEFORE_SETTING_COLOCATED_WITH_THIS_REGION
-                  .toLocalizedString());
-        }
-        if (!(region instanceof PartitionedRegion)) {
-          throw new IllegalStateException(
-              LocalizedStrings.PartitionAttributesImpl_SETTING_THE_ATTRIBUTE_COLOCATEDWITH_IS_SUPPORTED_ONLY_FOR_PARTITIONEDREGIONS
-                  .toLocalizedString());
-        }
-        PartitionedRegion colocatedRegion = (PartitionedRegion) region;
-        if (this.getTotalNumBuckets() != colocatedRegion.getPartitionAttributes()
-            .getTotalNumBuckets()) {
-          throw new IllegalStateException(
-              LocalizedStrings.PartitionAttributesImpl_CURRENT_PARTITIONEDREGIONS_TOTALNUMBUCKETS_SHOULD_BE_SAME_AS_TOTALNUMBUCKETS_OF_COLOCATED_PARTITIONEDREGION
-                  .toLocalizedString());
-        }
-        if (this.getRedundancy() != colocatedRegion.getPartitionAttributes().getRedundantCopies()) {
-          throw new IllegalStateException(
-              LocalizedStrings.PartitionAttributesImpl_CURRENT_PARTITIONEDREGIONS_REDUNDANCY_SHOULD_BE_SAME_AS_THE_REDUNDANCY_OF_COLOCATED_PARTITIONEDREGION
-                  .toLocalizedString());
-        }
+      if (region == null) {
+        throw new IllegalStateException(
+            LocalizedStrings.PartitionAttributesImpl_REGION_SPECIFIED_IN_COLOCATEDWITH_IS_NOT_PRESENT_IT_SHOULD_BE_CREATED_BEFORE_SETTING_COLOCATED_WITH_THIS_REGION
+                .toLocalizedString());
+      }
+      if (!(region instanceof PartitionedRegion)) {
+        throw new IllegalStateException(
+            LocalizedStrings.PartitionAttributesImpl_SETTING_THE_ATTRIBUTE_COLOCATEDWITH_IS_SUPPORTED_ONLY_FOR_PARTITIONEDREGIONS
+                .toLocalizedString());
+      }
+      PartitionedRegion colocatedRegion = (PartitionedRegion) region;
+      if (this.getTotalNumBuckets() != colocatedRegion.getPartitionAttributes()
+          .getTotalNumBuckets()) {
+        throw new IllegalStateException(
+            LocalizedStrings.PartitionAttributesImpl_CURRENT_PARTITIONEDREGIONS_TOTALNUMBUCKETS_SHOULD_BE_SAME_AS_TOTALNUMBUCKETS_OF_COLOCATED_PARTITIONEDREGION
+                .toLocalizedString());
+      }
+      if (this.getRedundancy() != colocatedRegion.getPartitionAttributes().getRedundantCopies()) {
+        throw new IllegalStateException(
+            LocalizedStrings.PartitionAttributesImpl_CURRENT_PARTITIONEDREGIONS_REDUNDANCY_SHOULD_BE_SAME_AS_THE_REDUNDANCY_OF_COLOCATED_PARTITIONEDREGION
+                .toLocalizedString());
-  public void setAll(@SuppressWarnings("rawtypes") PartitionAttributes pa) {
+  public void setAll(PartitionAttributes pa) {
-      return OFF_HEAP_LOCAL_MAX_MEMORY_PLACEHOLDER; // fix 52033: return non-negative, non-zero
-                                                    // temporary placeholder for
-                                                    // offHeapLocalMaxMemory
+      // fix 52033: return non-negative, non-zero temporary placeholder for offHeapLocalMaxMemory
+      return OFF_HEAP_LOCAL_MAX_MEMORY_PLACEHOLDER;

INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 INS78 MOV60 MOV24 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV25 MOV60 INS25 UPD66 INS65 INS66 UPD43 MOV27 MOV8 INS66 UPD42 UPD42 UPD42 UPD42 MOV60 UPD42 UPD43 UPD74 UPD74 UPD42 INS44 MOV44 MOV32 MOV32 MOV43 INS42 UPD42 UPD74 INS40 UPD42 INS40 UPD42 UPD42 DEL29 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL40 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL25 DEL8 DEL42 DEL45 DEL79