Revert " GEODE-6580: Cleanup static analyzer warnings. (#3415)"

This reverts commit 80a32b19c3cdbfe75c37d7b70104ea708739d2cd.

+import org.apache.geode.distributed.Role;
-  static CacheDistributionAdvisor createCacheDistributionAdvisor(
+  public static CacheDistributionAdvisor createCacheDistributionAdvisor(
-  private Set<InternalDistributedMember> adviseAllEventsOrCached(final boolean excludeInRecovery)
+  private Set adviseAllEventsOrCached(final boolean excludeInRecovery)
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      if (excludeInRecovery && cp.inRecovery) {
-        return false;
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        if (excludeInRecovery && cp.inRecovery) {
+          return false;
+        }
+        return cp.cachedOrAllEventsWithListener();
-      return cp.cachedOrAllEventsWithListener();
-      return adviseFilter(profile -> {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        DataPolicy dp = cp.dataPolicy;
-        return dp.withReplication()
-            || (cp.allEvents() && (dp.withStorage() || cp.hasCacheListener));
+      return adviseFilter(new Filter() {
+        @Override
+        public boolean include(Profile profile) {
+          assert profile instanceof CacheProfile;
+          CacheProfile cp = (CacheProfile) profile;
+          DataPolicy dp = cp.dataPolicy;
+          return dp.withReplication()
+              || (cp.allEvents() && (dp.withStorage() || cp.hasCacheListener));
+        }
-  Set<InternalDistributedMember> adviseTX() throws IllegalStateException {
+  public Set<InternalDistributedMember> adviseTX() throws IllegalStateException {
-      badList = adviseFilter(profile -> {
-        assert profile instanceof CacheProfile;
-        CacheProfile prof = (CacheProfile) profile;
-        return (prof.isPersistent());
+      badList = adviseFilter(new Filter() {
+        @Override
+        public boolean include(Profile profile) {
+          assert profile instanceof CacheProfile;
+          CacheProfile prof = (CacheProfile) profile;
+          return (prof.isPersistent());
+        }
-      return adviseFilter(profile -> {
-        assert profile instanceof CacheProfile;
-        CacheProfile cp = (CacheProfile) profile;
-        return cp.cachedOrAllEvents();
+      return adviseFilter(new Filter() {
+        @Override
+        public boolean include(Profile profile) {
+          assert profile instanceof CacheProfile;
+          CacheProfile cp = (CacheProfile) profile;
+          return cp.cachedOrAllEvents();
+        }
-      StringBuilder badIds = new StringBuilder();
+      StringBuffer badIds = new StringBuffer();
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile prof = (CacheProfile) profile;
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile prof = (CacheProfile) profile;
-      // if region in cache is not yet initialized, exclude
-      if (!prof.regionInitialized) { // fix for bug 41102
-        return false;
+        // if region in cache is not yet initialized, exclude
+        if (!prof.regionInitialized) { // fix for bug 41102
+          return false;
+        }
+
+        return prof.hasCacheLoader;
-
-      return prof.hasCacheLoader;
-      return fp.getFilterRoutingInfoPart1(event, profiles, cacheOpRecipients);
+      return fp.getFilterRoutingInfoPart1(event, this.profiles, cacheOpRecipients);
-  public Set<InternalDistributedMember> adviseCacheOp() {
+  public Set adviseCacheOp() {
+  /**
+   * Same as adviseCacheOp but only includes members that are playing the specified role.
+   *
+   * @since GemFire 5.0
+   */
+  public Set adviseCacheOpRole(final Role role) {
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        // if region in cache is not yet initialized, exclude
+        if (!cp.regionInitialized) {
+          return false;
+        }
+        if (!cp.cachedOrAllEventsWithListener()) {
+          return false;
+        }
+        return cp.getDistributedMember().getRoles().contains(role);
+      }
+    });
+  }
+
+
-  Set<InternalDistributedMember> adviseInvalidateRegion() {
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      return !cp.inRecovery;
+  public Set adviseInvalidateRegion() {
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        return !cp.inRecovery;
+      }
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile prof = (CacheProfile) profile;
-      // if region in cache is in recovery, exclude
-      if (prof.inRecovery) {
-        return false;
-      }
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile prof = (CacheProfile) profile;
+        // if region in cache is in recovery, exclude
+        if (prof.inRecovery) {
+          return false;
+        }
-      return prof.hasCacheWriter;
+        return prof.hasCacheWriter;
+      }
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      return cp.dataPolicy.withReplication() && cp.regionInitialized;
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        if (cp.dataPolicy.withReplication() && cp.regionInitialized) {
+          return true;
+        }
+        return false;
+      }
-  Set adviseNetSearch() {
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      // if region in cache is not yet initialized, exclude
-      if (!cp.regionInitialized) {
-        return false;
+  public Set adviseNetSearch() {
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        // if region in cache is not yet initialized, exclude
+        if (!cp.regionInitialized) {
+          return false;
+        }
+        DataPolicy dp = cp.dataPolicy;
+        return dp.withStorage();
-      DataPolicy dp = cp.dataPolicy;
-      return dp.withStorage();
-    Profile[] allProfiles = profiles; // volatile read
+    Profile[] allProfiles = this.profiles; // volatile read
-    Set<InternalDistributedMember> replicates = new HashSet<>();
-    Set<InternalDistributedMember> others = new HashSet<>();
-    Set<InternalDistributedMember> preloaded = new HashSet<>();
-    Set<InternalDistributedMember> empties = new HashSet<>();
-    Set<InternalDistributedMember> uninitialized = new HashSet<>();
-    Set<InternalDistributedMember> nonPersistent = new HashSet<>();
+    Set<InternalDistributedMember> replicates = new HashSet<InternalDistributedMember>();
+    Set<InternalDistributedMember> others = new HashSet<InternalDistributedMember>();
+    Set<InternalDistributedMember> preloaded = new HashSet<InternalDistributedMember>();
+    Set<InternalDistributedMember> empties = new HashSet<InternalDistributedMember>();
+    Set<InternalDistributedMember> uninitialized = new HashSet<InternalDistributedMember>();
+    Set<InternalDistributedMember> nonPersistent = new HashSet<InternalDistributedMember>();
-        new HashMap<>();
+        new HashMap<InternalDistributedMember, CacheProfile>();
-    for (Profile allProfile : allProfiles) {
-      CacheProfile profile = (CacheProfile) allProfile;
+    for (int i = 0; i < allProfiles.length; i++) {
+      CacheProfile profile = (CacheProfile) allProfiles[i];
-  Set adviseRequiresOldValueInCacheOp() {
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      return cp.requiresOldValueInEvents && !cp.regionInitialized;
+  public Set adviseRequiresOldValueInCacheOp() {
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        return cp.requiresOldValueInEvents && !cp.regionInitialized;
+      }
-    boolean requiresOldValueInEvents;
+    public boolean requiresOldValueInEvents;
-    List<CacheServiceProfile> cacheServiceProfiles = new ArrayList<>();
+    public List<CacheServiceProfile> cacheServiceProfiles = new ArrayList<>();
-      filterProfile = localProfile;
+      this.filterProfile = localProfile;
-      if (dataPolicy.withReplication()) {
+      if (this.dataPolicy.withReplication()) {
-        if (dataPolicy.isPersistentReplicate()) {
+        if (this.dataPolicy.isPersistentReplicate()) {
-        if (dataPolicy.isEmpty())
+        if (this.dataPolicy.isEmpty())
-        if (dataPolicy.isPreloaded())
+        if (this.dataPolicy.isPreloaded())
-      if (subscriptionAttributes != null
-          && subscriptionAttributes.getInterestPolicy().isAll()) {
+      if (this.subscriptionAttributes != null
+          && this.subscriptionAttributes.getInterestPolicy().isAll()) {
-      if (hasCacheLoader)
+      if (this.hasCacheLoader)
-      if (hasCacheWriter)
+      if (this.hasCacheWriter)
-      if (hasCacheListener)
+      if (this.hasCacheListener)
-      if (scope.isDistributedAck())
+      if (this.scope.isDistributedAck())
-      if (scope.isGlobal())
+      if (this.scope.isGlobal())
-      if (inRecovery)
+      if (this.inRecovery)
-      if (isPartitioned)
+      if (this.isPartitioned)
-      if (isGatewayEnabled)
+      if (this.isGatewayEnabled)
-      if (isPersistent)
+      if (this.isPersistent)
-      if (regionInitialized)
+      if (this.regionInitialized)
-      if (persistentID != null)
+      if (this.persistentID != null)
-      if (hasCacheServer)
+      if (this.hasCacheServer)
-      if (requiresOldValueInEvents)
+      if (this.requiresOldValueInEvents)
-      if (persistenceInitialized)
+      if (this.persistenceInitialized)
-      if (!gatewaySenderIds.isEmpty())
+      if (!this.gatewaySenderIds.isEmpty())
-      if (!asyncEventQueueIds.isEmpty())
+      if (!this.asyncEventQueueIds.isEmpty())
-      if (isOffHeap)
+      if (this.isOffHeap)
-      if (!cacheServiceProfiles.isEmpty())
+      if (!this.cacheServiceProfiles.isEmpty())
-      Assert.assertTrue(!scope.isLocal());
+      Assert.assertTrue(!this.scope.isLocal());
-      return dataPolicy.withPersistence();
+      return this.dataPolicy.withPersistence();
-          dataPolicy = DataPolicy.PERSISTENT_REPLICATE;
+          this.dataPolicy = DataPolicy.PERSISTENT_REPLICATE;
-          dataPolicy = DataPolicy.REPLICATE;
+          this.dataPolicy = DataPolicy.REPLICATE;
-        dataPolicy = DataPolicy.EMPTY;
+        this.dataPolicy = DataPolicy.EMPTY;
-        dataPolicy = DataPolicy.PRELOADED;
+        this.dataPolicy = DataPolicy.PRELOADED;
-        dataPolicy = DataPolicy.NORMAL;
+        this.dataPolicy = DataPolicy.NORMAL;
-          dataPolicy = DataPolicy.PERSISTENT_PARTITION;
+          this.dataPolicy = DataPolicy.PERSISTENT_PARTITION;
-          dataPolicy = DataPolicy.PARTITION;
+          this.dataPolicy = DataPolicy.PARTITION;
-        subscriptionAttributes = new SubscriptionAttributes(InterestPolicy.ALL);
+        this.subscriptionAttributes = new SubscriptionAttributes(InterestPolicy.ALL);
-        subscriptionAttributes = new SubscriptionAttributes(InterestPolicy.CACHE_CONTENT);
+        this.subscriptionAttributes = new SubscriptionAttributes(InterestPolicy.CACHE_CONTENT);
-      hasCacheLoader = (s & LOADER_MASK) != 0;
-      hasCacheWriter = (s & WRITER_MASK) != 0;
-      hasCacheListener = (s & LISTENER_MASK) != 0;
-      scope = (s & DIST_ACK_MASK) != 0 ? Scope.DISTRIBUTED_ACK
+      this.hasCacheLoader = (s & LOADER_MASK) != 0;
+      this.hasCacheWriter = (s & WRITER_MASK) != 0;
+      this.hasCacheListener = (s & LISTENER_MASK) != 0;
+      this.scope = (s & DIST_ACK_MASK) != 0 ? Scope.DISTRIBUTED_ACK
-      inRecovery = (s & IN_RECOVERY_MASK) != 0;
-      isPartitioned = (s & IS_PARTITIONED_MASK) != 0;
-      isGatewayEnabled = (s & IS_GATEWAY_ENABLED_MASK) != 0;
-      isPersistent = (s & PERSISTENT_MASK) != 0;
-      regionInitialized = ((s & REGION_INITIALIZED_MASK) != 0);
-      hasCacheServer = ((s & HAS_CACHE_SERVER_MASK) != 0);
-      requiresOldValueInEvents = ((s & REQUIRES_OLD_VALUE_MASK) != 0);
-      persistenceInitialized = (s & PERSISTENCE_INITIALIZED_MASK) != 0;
-      isOffHeap = (s & IS_OFF_HEAP_MASK) != 0;
+      this.inRecovery = (s & IN_RECOVERY_MASK) != 0;
+      this.isPartitioned = (s & IS_PARTITIONED_MASK) != 0;
+      this.isGatewayEnabled = (s & IS_GATEWAY_ENABLED_MASK) != 0;
+      this.isPersistent = (s & PERSISTENT_MASK) != 0;
+      this.regionInitialized = ((s & REGION_INITIALIZED_MASK) != 0);
+      this.hasCacheServer = ((s & HAS_CACHE_SERVER_MASK) != 0);
+      this.requiresOldValueInEvents = ((s & REQUIRES_OLD_VALUE_MASK) != 0);
+      this.persistenceInitialized = (s & PERSISTENCE_INITIALIZED_MASK) != 0;
+      this.isOffHeap = (s & IS_OFF_HEAP_MASK) != 0;
-      subscriptionAttributes = sa;
+      this.subscriptionAttributes = sa;
-    boolean cachedOrAllEventsWithListener() {
+    public boolean cachedOrAllEventsWithListener() {
-    boolean cachedOrAllEvents() {
-      return dataPolicy.withStorage() || allEvents();
+    public boolean cachedOrAllEvents() {
+      return this.dataPolicy.withStorage() || allEvents();
-    boolean allEvents() {
-      return subscriptionAttributes.getInterestPolicy().isAll();
+    public boolean allEvents() {
+      return this.subscriptionAttributes.getInterestPolicy().isAll();
-      cacheServiceProfiles.add(profile);
+      this.cacheServiceProfiles.add(profile);
-      if (filterProfile != null) {
-        filterProfile.cleanUp();
+      if (this.filterProfile != null) {
+        this.filterProfile.cleanUp();
-      DataSerializer.writeObject(filterProfile, out);
+      DataSerializer.writeObject(this.filterProfile, out);
-      filterProfile = DataSerializer.readObject(in);
+      this.filterProfile = DataSerializer.readObject(in);
-      sb.append("; dataPolicy=").append(dataPolicy);
-      sb.append("; hasCacheLoader=").append(hasCacheLoader);
-      sb.append("; hasCacheWriter=").append(hasCacheWriter);
-      sb.append("; hasCacheListener=").append(hasCacheListener);
-      sb.append("; hasCacheServer=").append(hasCacheServer);
-      sb.append("; scope=").append(scope);
-      sb.append("; regionInitialized=").append(regionInitialized);
-      sb.append("; inRecovery=").append(inRecovery);
-      sb.append("; subcription=").append(subscriptionAttributes);
-      sb.append("; isPartitioned=").append(isPartitioned);
-      sb.append("; isGatewayEnabled=").append(isGatewayEnabled);
-      sb.append("; isPersistent=").append(isPersistent);
-      sb.append("; persistentID=").append(persistentID);
-      if (filterProfile != null) {
-        sb.append("; ").append(filterProfile);
+      sb.append("; dataPolicy=" + this.dataPolicy);
+      sb.append("; hasCacheLoader=" + this.hasCacheLoader);
+      sb.append("; hasCacheWriter=" + this.hasCacheWriter);
+      sb.append("; hasCacheListener=" + this.hasCacheListener);
+      sb.append("; hasCacheServer=").append(this.hasCacheServer);
+      sb.append("; scope=" + this.scope);
+      sb.append("; regionInitialized=").append(String.valueOf(this.regionInitialized));
+      sb.append("; inRecovery=" + this.inRecovery);
+      sb.append("; subcription=" + this.subscriptionAttributes);
+      sb.append("; isPartitioned=" + this.isPartitioned);
+      sb.append("; isGatewayEnabled=" + this.isGatewayEnabled);
+      sb.append("; isPersistent=" + this.isPersistent);
+      sb.append("; persistentID=" + this.persistentID);
+      if (this.filterProfile != null) {
+        sb.append("; ").append(this.filterProfile);
-      sb.append("; gatewaySenderIds =").append(gatewaySenderIds);
-      sb.append("; asyncEventQueueIds =").append(asyncEventQueueIds);
-      sb.append("; IsOffHeap=").append(isOffHeap);
-      sb.append("; cacheServiceProfiles=").append(cacheServiceProfiles);
+      sb.append("; gatewaySenderIds =" + this.gatewaySenderIds);
+      sb.append("; asyncEventQueueIds =" + this.asyncEventQueueIds);
+      sb.append("; IsOffHeap=" + this.isOffHeap);
+      sb.append("; cacheServiceProfiles=" + this.cacheServiceProfiles);
-      return others;
+      return this.others;
-      return replicates;
+      return this.replicates;
-      return nonPersistent;
+      return this.nonPersistent;
-      return preloaded;
+      return this.preloaded;
-      return empties;
+      return this.empties;
-      return uninitialized;
+      return this.uninitialized;
-    final Set<InternalDistributedMember> nonPersistent;
+    protected final Set<InternalDistributedMember> nonPersistent;
-      this(Collections.emptySet(), Collections.emptySet(), Collections.emptySet(),
-          Collections.emptySet(), Collections.emptySet(), Collections.emptySet(),
-          Collections.emptyMap());
+      this(Collections.EMPTY_SET, Collections.EMPTY_SET, Collections.EMPTY_SET,
+          Collections.EMPTY_SET, Collections.EMPTY_SET, Collections.EMPTY_SET,
+          Collections.<InternalDistributedMember, CacheProfile>emptyMap());
-      return "InitialImageAdvice(" + "replicates=" + replicates + "; others=" + others
-          + "; preloaded=" + preloaded + "; empty=" + empties + "; initializing="
-          + uninitialized + ")";
+      return "InitialImageAdvice(" + "replicates=" + this.replicates + "; others=" + this.others
+          + "; preloaded=" + this.preloaded + "; empty=" + this.empties + "; initializing="
+          + this.uninitialized + ")";
+  // moved putProfile, doPutProfile, and putProfile to DistributionAdvisor
+
+  // moved isNewerProfile to DistributionAdvisor
+
+  // moved isNewerSerialNumber to DistributionAdvisor
+
+  // moved forceNewMembershipVersion to DistributionAdvisor
+
+  // moved startOperation to DistributionAdvisor
+
+  // moved endOperation to DistributionAdvisor
+
+  /**
+   * Provide only the new replicates given a set of existing memberIds
+   *
+   * @param oldRecipients the <code>Set</code> of memberIds that have received the message
+   * @return the set of new replicate's memberIds
+   * @since GemFire 5.1
+   */
+  public Set adviseNewReplicates(final Set oldRecipients) {
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        if (cp.dataPolicy.withReplication() && !oldRecipients.contains(cp.getDistributedMember())) {
+          return true;
+        }
+        return false;
+      }
+    });
+  }
+
+  // moved waitForCurrentOperations to DistributionAdvisor
+
+  // moved removeId, doRemoveId, removeIdWithSerial, and updateRemovedProfiles to
+  // DistributionAdvisor
+
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      return cp.dataPolicy.withReplication();
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        if (cp.dataPolicy.withReplication()) {
+          return true;
+        }
+        return false;
+      }
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      return cp.dataPolicy.withPreloaded();
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        if (cp.dataPolicy.withPreloaded()) {
+          return true;
+        }
+        return false;
+      }
-  Set adviseEmptys() {
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      return cp.dataPolicy.isEmpty();
+  public Set adviseEmptys() {
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        if (cp.dataPolicy.isEmpty()) {
+          return true;
+        }
+        return false;
+      }
+    });
+  }
+
+  /**
+   * Provide only the normals (having DataPolicy.NORMAL) given a set of existing memberIds
+   *
+   * @return the set of normal's memberIds
+   * @since GemFire 5.8
+   */
+  public Set adviseNormals() {
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        if (cp.dataPolicy.isNormal()) {
+          return true;
+        }
+        return false;
+      }
-        new HashMap<>();
-    Profile[] snapshot = profiles;
+        new HashMap<InternalDistributedMember, PersistentMemberID>();
+    Profile[] snapshot = this.profiles;
-        new HashMap<>();
-    Profile[] snapshot = profiles;
+        new HashMap<InternalDistributedMember, PersistentMemberID>();
+    Profile[] snapshot = this.profiles;
-  Set adviseCacheServers() {
+  public Set adviseCacheServers() {
-    return adviseFilter(profile -> {
-      assert profile instanceof CacheProfile;
-      CacheProfile cp = (CacheProfile) profile;
-      return cp.hasCacheServer;
+    return adviseFilter(new Filter() {
+      @Override
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        return cp.hasCacheServer;
+      }
-    final List<Set<String>> differSenderIds = new ArrayList<>();
-    fetchProfiles(profile -> {
-      if (profile instanceof CacheProfile) {
-        final CacheProfile cp = (CacheProfile) profile;
-        if (allGatewaySenderIds.equals(cp.gatewaySenderIds)) {
-          return true;
-        } else {
-          differSenderIds.add(allGatewaySenderIds);
-          differSenderIds.add(cp.gatewaySenderIds);
-          return false;
+    final List<Set<String>> differSenderIds = new ArrayList<Set<String>>();
+    fetchProfiles(new Filter() {
+      @Override
+      public boolean include(final Profile profile) {
+        if (profile instanceof CacheProfile) {
+          final CacheProfile cp = (CacheProfile) profile;
+          if (allGatewaySenderIds.equals(cp.gatewaySenderIds)) {
+            return true;
+          } else {
+            differSenderIds.add(allGatewaySenderIds);
+            differSenderIds.add(cp.gatewaySenderIds);
+            return false;
+          }
+        return false;
-      return false;
-    final List<Set<String>> differAsycnQueueIds = new ArrayList<>();
-    fetchProfiles(profile -> {
-      if (profile instanceof CacheProfile) {
-        final CacheProfile cp = (CacheProfile) profile;
-        if (allAsyncEventIds.equals(cp.asyncEventQueueIds)) {
-          return true;
-        } else {
-          differAsycnQueueIds.add(allAsyncEventIds);
-          differAsycnQueueIds.add(cp.asyncEventQueueIds);
-          return false;
+    final List<Set<String>> differAsycnQueueIds = new ArrayList<Set<String>>();
+    List l = fetchProfiles(new Filter() {
+      @Override
+      public boolean include(final Profile profile) {
+        if (profile instanceof CacheProfile) {
+          final CacheProfile cp = (CacheProfile) profile;
+          if (allAsyncEventIds.equals(cp.asyncEventQueueIds)) {
+            return true;
+          } else {
+            differAsycnQueueIds.add(allAsyncEventIds);
+            differAsycnQueueIds.add(cp.asyncEventQueueIds);
+            return false;
+          }
+        return false;
-      return false;

INS26 INS40 INS31 INS31 INS31 INS83 INS43 INS83 INS43 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS83 MOV60 MOV60 MOV60 MOV60 MOV60 INS83 INS29 INS83 INS43 INS42 INS44 MOV8 INS8 INS83 INS29 INS83 INS43 INS42 INS8 INS83 MOV42 MOV42 INS65 INS65 INS42 INS83 INS43 INS42 INS41 MOV42 INS24 INS83 INS83 INS83 INS83 INS83 MOV74 MOV74 MOV74 MOV74 MOV74 MOV74 INS83 INS65 INS65 INS65 INS65 INS42 INS83 INS43 INS42 INS41 INS65 INS65 INS65 INS42 INS41 INS60 INS60 MOV60 MOV60 INS60 MOV60 INS66 INS66 INS42 INS32 INS58 INS27 INS37 MOV8 INS66 INS42 INS66 INS66 INS66 INS42 INS32 INS66 INS66 INS66 INS32 MOV74 INS59 MOV5 INS59 INS83 MOV74 INS59 INS43 INS14 INS14 INS42 INS14 INS14 INS14 INS14 INS14 INS22 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS39 INS59 INS42 INS40 INS42 INS14 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS40 INS40 INS40 INS40 INS40 INS40 INS32 INS14 INS42 INS14 INS14 INS14 INS42 INS14 INS42 INS14 INS42 INS22 INS22 INS14 INS42 INS14 INS14 UPD42 MOV42 UPD42 MOV32 INS43 INS1 UPD43 INS43 INS1 INS43 INS1 INS43 INS1 INS43 INS1 INS43 INS1 INS43 INS1 INS52 INS42 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 UPD74 INS42 INS34 MOV43 INS43 INS1 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 INS22 MOV42 MOV42 INS27 MOV42 MOV42 INS27 MOV42 MOV42 INS27 MOV42 MOV42 INS27 INS22 MOV42 MOV42 INS27 INS32 MOV42 MOV42 INS27 MOV42 MOV42 INS27 MOV42 MOV42 INS27 MOV42 MOV42 INS27 MOV42 MOV42 INS27 MOV42 MOV42 INS27 INS22 MOV42 MOV42 INS27 MOV42 MOV42 INS27 MOV42 MOV42 INS27 MOV42 MOV42 INS27 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV42 INS43 INS43 MOV42 INS22 INS22 INS22 INS22 INS22 INS43 INS1 INS43 INS1 INS43 INS1 INS43 INS1 INS43 INS1 INS74 INS52 INS42 UPD74 INS52 INS42 INS43 INS1 INS42 INS74 INS43 INS1 UPD74 INS14 INS42 INS31 INS14 INS14 UPD42 INS42 INS31 INS22 INS42 INS31 INS42 INS31 INS42 INS31 INS42 INS31 INS42 INS31 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS31 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS52 INS42 MOV27 MOV27 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS45 INS22 INS45 INS22 INS45 INS22 INS45 INS22 INS52 INS42 INS45 INS22 INS42 INS42 INS22 INS45 INS22 INS45 INS22 INS45 INS22 INS45 INS22 INS45 INS22 INS45 INS22 INS52 INS42 INS45 INS22 INS45 INS22 INS45 INS22 INS45 INS22 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS31 INS42 INS31 INS42 INS31 INS42 INS31 INS42 INS31 MOV43 INS43 INS43 INS43 INS43 INS42 INS31 MOV43 INS74 INS42 INS31 INS74 INS43 INS1 INS78 INS83 INS39 INS42 INS44 MOV8 INS43 INS1 INS14 INS43 INS1 UPD43 INS78 INS83 INS39 INS42 INS44 MOV8 INS52 INS42 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS44 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS2 INS78 INS83 INS39 INS42 INS44 MOV8 INS22 INS22 INS22 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS22 INS22 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS78 INS83 INS39 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS44 MOV8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS44 MOV8 INS43 INS43 INS78 INS83 INS39 INS42 INS44 MOV8 INS43 INS43 INS42 INS31 INS42 INS43 INS42 INS42 INS31 INS43 INS1 INS42 INS31 UPD42 INS42 INS43 INS42 INS42 INS43 INS42 INS6 INS60 INS25 INS25 INS41 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS25 INS41 INS42 MOV43 INS42 INS42 INS42 INS42 INS43 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS6 INS60 INS25 INS41 INS42 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS25 INS41 INS42 INS43 INS42 INS6 INS60 INS25 INS41 INS42 INS43 INS42 INS42 INS42 INS42 INS83 INS43 INS42 INS42 INS42 INS78 INS83 INS39 INS42 INS44 MOV8 INS42 INS78 INS83 INS39 INS42 INS44 MOV8 INS42 INS31 INS78 INS83 INS39 INS42 INS44 MOV8 INS42 INS42 INS62 INS43 INS59 INS38 INS8 INS38 INS8 INS32 INS42 INS42 INS42 MOV27 INS8 INS9 INS42 INS22 INS22 INS52 INS42 INS22 INS22 INS22 INS22 INS42 INS27 INS8 INS9 INS42 INS62 INS43 INS59 INS32 INS8 INS9 INS42 MOV32 INS8 INS9 INS42 MOV32 INS8 INS9 INS42 INS62 INS43 INS59 INS32 INS8 INS9 INS42 INS42 INS42 INS83 INS43 INS42 INS42 INS43 INS42 INS78 INS83 INS39 INS42 INS44 MOV8 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS11 INS40 INS41 INS32 INS41 INS32 INS42 INS42 MOV41 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV32 INS38 MOV41 INS42 INS43 INS42 INS42 INS11 INS40 INS42 INS41 MOV41 MOV41 INS42 INS43 INS42 INS42 INS11 INS40 INS42 INS41 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS9 INS42 INS42 INS9 INS32 INS42 INS9 INS32 INS9 INS42 INS43 INS42 INS9 INS9 INS9 INS42 INS43 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL42 DEL43 DEL42 DEL43 DEL74 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL42 DEL42 DEL42 DEL44 DEL42 DEL70 DEL42 DEL59 DEL86 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL42 DEL42 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL59 DEL60 DEL42 DEL59 DEL86 DEL42 DEL59 DEL86 DEL83 DEL42 DEL59 DEL86 DEL74 DEL14 DEL21