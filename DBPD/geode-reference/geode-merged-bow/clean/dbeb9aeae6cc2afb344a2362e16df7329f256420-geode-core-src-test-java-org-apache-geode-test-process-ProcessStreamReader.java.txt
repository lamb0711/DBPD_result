Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Reads the output from a process stream and stores it for test validation. 
+ * Reads the output from a process stream and stores it for test validation.
- * 
+@SuppressWarnings("unused")
-  
+
-  
+  private volatile IOException streamClosedStack;
+
-  public int linecount = 0;
+  private int lineCount = 0;
-  public ProcessStreamReader(final String command, final InputStream stream, final Queue<String> lineBuffer, final List<String> allLines) {
+  public ProcessStreamReader(final String command, final InputStream stream,
+      final Queue<String> lineBuffer, final List<String> allLines) {
-  
+
-        this.linecount++;
+        this.lineCount++;
-      this.startStack.initCause(streamClosed);
-      throw this.startStack;
+      this.streamClosedStack = streamClosed;
+
+  // a test can use this to check if stream was closed cleanly or by tear-down
+  public IOException getStreamClosedStack() {
+    return this.streamClosedStack;
+  }

INS79 INS23 INS31 INS42 INS45 INS83 INS83 INS43 INS59 UPD83 INS83 INS43 INS42 INS8 UPD66 INS42 INS42 UPD42 INS42 INS41 INS22 INS52 INS42 INS7 INS22 INS42 MOV52 UPD42 MOV42 UPD42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL53