Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Thrown to indicate an error or exceptional condition during the execution of 
- * {@linkplain Function}s in GemFire. This exception can be thrown by GemFire 
- * as well as user code, in the implementation of {@linkplain Function#execute(FunctionContext)}.
- * When FunctionException is thrown in an implementation of 
- * {@linkplain Function#execute(FunctionContext)}, GemFire will transmit it back 
- * to, and throw it on, the calling side. For example, if a GemFire client 
- * executes a Function on a server, and the function's execute method throws a
- * FunctionException, the server logs the exception as a warning, and transmits
- * it back to the calling client, which throws it. This allows for separation of
- * business and error handling logic, as client code that processes function 
- * execution results does not have to deal with errors; errors can be dealt with
- * in the exception handling logic, by catching this exception.
+ * Thrown to indicate an error or exceptional condition during the execution of
+ * {@linkplain Function}s in GemFire. This exception can be thrown by GemFire as well as user code,
+ * in the implementation of {@linkplain Function#execute(FunctionContext)}. When FunctionException
+ * is thrown in an implementation of {@linkplain Function#execute(FunctionContext)}, GemFire will
+ * transmit it back to, and throw it on, the calling side. For example, if a GemFire client executes
+ * a Function on a server, and the function's execute method throws a FunctionException, the server
+ * logs the exception as a warning, and transmits it back to the calling client, which throws it.
+ * This allows for separation of business and error handling logic, as client code that processes
+ * function execution results does not have to deal with errors; errors can be dealt with in the
+ * exception handling logic, by catching this exception.
- * <p>The exception string provides details on the cause of failure.
+ * <p>
+ * The exception string provides details on the cause of failure.
-  public FunctionException() {
-  }
+  public FunctionException() {}
-   * Creates new function exception with given error message and optional nested
-   * exception.
+   * Creates new function exception with given error message and optional nested exception.
-   * Creates new function exception given throwable as a cause and source of
-   * error message.
+   * Creates new function exception given throwable as a cause and source of error message.
-    Assert.assertTrue(cause != null,
-        "unexpected null exception to add to FunctionException");
+    Assert.assertTrue(cause != null, "unexpected null exception to add to FunctionException");

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66