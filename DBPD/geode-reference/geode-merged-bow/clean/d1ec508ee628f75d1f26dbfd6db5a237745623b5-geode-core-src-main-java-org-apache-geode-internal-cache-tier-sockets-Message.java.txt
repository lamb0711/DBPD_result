GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

-import java.net.SocketTimeoutException;
- * msgType       - int   - 4 bytes type of message, types enumerated below
+ * messageType       - int   - 4 bytes type of message, types enumerated below
- * transId       - int - 4 bytes  filled in by the requestor, copied back into
+ * transId       - int - 4 bytes  filled in by the requester, copied back into
- * flags         - byte- 1 byte   filled in by the requestor
+ * flags         - byte- 1 byte   filled in by the requester
- * @see org.apache.geode.internal.cache.tier.MessageType
- *
+ * @see MessageType
-  public static final int DEFAULT_MAX_MESSAGE_SIZE = 1073741824;
-  /**
-   * maximum size of an outgoing message. See GEODE-478
-   */
-  public static int MAX_MESSAGE_SIZE =
-      Integer.getInteger(DistributionConfig.GEMFIRE_PREFIX + "client.max-message-size",
-          DEFAULT_MAX_MESSAGE_SIZE).intValue();
+  // Tentative workaround to avoid OOM stated in #46754.
+  public static final ThreadLocal<Integer> MESSAGE_TYPE = new ThreadLocal<>();
+
+  public static final String MAX_MESSAGE_SIZE_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "client.max-message-size";
+
+  static final int DEFAULT_MAX_MESSAGE_SIZE = 1073741824;
-  private static final byte[] TRUE;
-  private static final byte[] FALSE;
+  // These two statics are fields shoved into the flags byte for transmission.
+  // The MESSAGE_IS_RETRY bit is stripped out during deserialization but the other
+  // is left in place
+  private static final byte MESSAGE_HAS_SECURE_PART = (byte) 0x02;
+  private static final byte MESSAGE_IS_RETRY = (byte) 0x04;
-  static {
-    try {
-      HeapDataOutputStream hdos = new HeapDataOutputStream(10, null);
+  private static final byte MESSAGE_IS_RETRY_MASK = (byte) 0xFB;
+
+  private static final int DEFAULT_CHUNK_SIZE = 1024;
+
+  private static final byte[] TRUE = defineTrue();
+  private static final byte[] FALSE = defineFalse();
+
+  private static byte[] defineTrue() {
+    try (HeapDataOutputStream hdos = new HeapDataOutputStream(10, null)) {
-      TRUE = hdos.toByteArray();
-    } catch (Exception e) {
-      throw new IllegalStateException(e);
-    }
-
-    try {
-      HeapDataOutputStream hdos = new HeapDataOutputStream(10, null);
-      BlobHelper.serializeTo(Boolean.FALSE, hdos);
-      FALSE = hdos.toByteArray();
-    } catch (Exception e) {
+      return hdos.toByteArray();
+    } catch (IOException e) {
-  protected int msgType;
-  protected int payloadLength = 0;
-  protected int numberOfParts = 0;
+  private static byte[] defineFalse() {
+    try (HeapDataOutputStream hdos = new HeapDataOutputStream(10, null)) {
+      BlobHelper.serializeTo(Boolean.FALSE, hdos);
+      return hdos.toByteArray();
+    } catch (IOException e) {
+      throw new IllegalStateException(e);
+    }
+  }
+
+  /**
+   * maximum size of an outgoing message. See GEODE-478
+   */
+  private final int maxMessageSize;
+
+  protected int messageType;
+  private int payloadLength = 0;
+  int numberOfParts = 0;
-  protected int currentPart = 0;
-  protected Part[] partsList = null;
-  protected ByteBuffer cachedCommBuffer;
+  int currentPart = 0;
+  private Part[] partsList = null;
+  private ByteBuffer cachedCommBuffer;
-  protected SocketChannel sockCh = null;
-  protected OutputStream os = null;
-  protected InputStream is = null;
-  protected boolean messageModified = true;
+  private SocketChannel socketChannel = null;
+  private OutputStream outputStream = null;
+  protected InputStream inputStream = null;
+  private boolean messageModified = true;
+
-  protected boolean isRetry;
+  private boolean isRetry;
+
-  protected MessageStats msgStats = null;
-  protected ServerConnection sc = null;
+  MessageStats messageStats = null;
+  protected ServerConnection serverConnection = null;
-  // private int MAX_MSGS = -1;
-  private Semaphore msgLimiter = null;
-  private boolean hdrRead = false;
-  private int chunkSize = 1024;// Default Chunk Size.
+  private Semaphore messageLimiter = null;
+  private boolean readHeader = false;
+  private int chunkSize = DEFAULT_CHUNK_SIZE;
-  protected Part securePart = null;
+  Part securePart = null;
-
-  // These two statics are fields shoved into the flags byte for transmission.
-  // The MESSAGE_IS_RETRY bit is stripped out during deserialization but the other
-  // is left in place
-  public static final byte MESSAGE_HAS_SECURE_PART = (byte) 0x02;
-  public static final byte MESSAGE_IS_RETRY = (byte) 0x04;
-
-  public static final byte MESSAGE_IS_RETRY_MASK = (byte) 0xFB;
-
-  // Tentative workaround to avoid OOM stated in #46754.
-  public static final ThreadLocal<Integer> messageType = new ThreadLocal<Integer>();
-
-  Version version;
+  private Version version;
+    this.maxMessageSize = Integer.getInteger(MAX_MESSAGE_SIZE_PROPERTY, DEFAULT_MAX_MESSAGE_SIZE);
-    partsList = new Part[numberOfParts];
+    this.partsList = new Part[numberOfParts];
-    for (int i = 0; i < partsList.length; i++) {
-      partsList[i] = new Part();
+    int partsListLength = this.partsList.length;
+    for (int i = 0; i < partsListLength; i++) {
+      this.partsList[i] = new Part();
-    return securePart != null;
+    return this.securePart != null;
-    this.msgType = msgType;
+    this.messageType = msgType;
-    this.flags = (byte) (this.flags | MESSAGE_HAS_SECURE_PART);
+    this.flags |= MESSAGE_HAS_SECURE_PART;
-    this.flags = (byte) (this.flags & MESSAGE_HAS_SECURE_PART);
+    this.flags &= MESSAGE_HAS_SECURE_PART;
-   * 
-   * @param numberOfParts
-   * For boundary testing we may need to inject mock parts
-   * 
-   * @param parts
+   * For boundary testing we may need to inject mock parts. For testing only.
-  public int getNextPartNumber() {
+  int getNextPartNumber() {
-  private static final Map<String, byte[]> CACHED_STRINGS = new ConcurrentHashMap<String, byte[]>();
+  private static final Map<String, byte[]> CACHED_STRINGS = new ConcurrentHashMap<>();
-      addRawPart((byte[]) null, false);
-    } else {
-      Part part = partsList[this.currentPart];
-      if (enableCaching) {
-        byte[] bytes = CACHED_STRINGS.get(str);
-        if (bytes == null) {
-          HeapDataOutputStream hdos = new HeapDataOutputStream(str);
+      addRawPart(null, false);
+      return;
+    }
+
+    Part part = this.partsList[this.currentPart];
+    if (enableCaching) {
+      byte[] bytes = CACHED_STRINGS.get(str);
+      if (bytes == null) {
+        try (HeapDataOutputStream hdos = new HeapDataOutputStream(str)) {
-        part.setPartState(bytes, false);
-      } else {
-        HeapDataOutputStream hdos = new HeapDataOutputStream(str);
-        this.messageModified = true;
-        part.setPartState(hdos, false);
-      this.currentPart++;
+      part.setPartState(bytes, false);
+
+    } else {
+      // do NOT close the HeapDataOutputStream
+      this.messageModified = true;
+      part.setPartState(new HeapDataOutputStream(str), false);
+    this.currentPart++;
-   * Adds a new part to this message that contains a <code>byte</code> array (as opposed to a
-   * serialized object).
+   * Adds a new part to this message that contains a {@code byte} array (as opposed to a serialized
+   * object).
-  public void addDeltaPart(HeapDataOutputStream hdos) {
-    this.messageModified = true;
-    Part part = partsList[this.currentPart];
-    part.setPartState(hdos, false);
-    this.currentPart++;
-  }
-
+  /**
+   * Object o is always null
+   */
-      Part part = partsList[this.currentPart];
+      Part part = this.partsList[this.currentPart];
-    HeapDataOutputStream hdos;
-    Version v = version;
-    if (version.equals(Version.CURRENT)) {
+    Version v = this.version;
+    if (this.version.equals(Version.CURRENT)) {
-    // create the HDOS with a flag telling it that it can keep any byte[] or ByteBuffers/ByteSources
-    // passed to it.
-    hdos = new HeapDataOutputStream(chunkSize, v, true);
+
+    // Create the HDOS with a flag telling it that it can keep any byte[] or ByteBuffers/ByteSources
+    // passed to it. Do NOT close the HeapDataOutputStream!
+    HeapDataOutputStream hdos = new HeapDataOutputStream(this.chunkSize, v, true);
-    Part part = partsList[this.currentPart];
+    Part part = this.partsList[this.currentPart];
-
-
-    } else {
-      HeapDataOutputStream hdos;
-      Version v = version;
-      if (version.equals(Version.CURRENT)) {
-        v = null;
-      }
-      hdos = new HeapDataOutputStream(chunkSize, v);
-      try {
-        BlobHelper.serializeTo(o, hdos);
-      } catch (IOException ex) {
-        throw new SerializationException("failed serializing object", ex);
-      }
-      this.messageModified = true;
-      Part part = partsList[this.currentPart];
-      part.setPartState(hdos, true);
-      this.currentPart++;
+
+    Version v = this.version;
+    if (this.version.equals(Version.CURRENT)) {
+      v = null;
+    }
+
+    // do NOT close the HeapDataOutputStream
+    HeapDataOutputStream hdos = new HeapDataOutputStream(this.chunkSize, v);
+    try {
+      BlobHelper.serializeTo(o, hdos);
+    } catch (IOException ex) {
+      throw new SerializationException("failed serializing object", ex);
+    }
+    this.messageModified = true;
+    Part part = this.partsList[this.currentPart];
+    part.setPartState(hdos, true);
+    this.currentPart++;
-    Part part = partsList[this.currentPart];
+    Part part = this.partsList[this.currentPart];
-    Part part = partsList[this.currentPart];
+    Part part = this.partsList[this.currentPart];
-    Part part = partsList[this.currentPart];
+    Part part = this.partsList[this.currentPart];
-    return this.msgType;
+    return this.messageType;
-      Part p = partsList[index];
+      Part p = this.partsList[index];
-    if (this.hdrRead) {
-      if (this.msgStats != null) {
-        this.msgStats.decMessagesBeingReceived(len);
+    if (this.readHeader) {
+      if (this.messageStats != null) {
+        this.messageStats.decMessagesBeingReceived(len);
-    if (this.hdrRead) {
-      if (this.msgLimiter != null) {
-        this.msgLimiter.release(1);
-        this.msgLimiter = null;
+    if (this.readHeader) {
+      if (this.messageLimiter != null) {
+        this.messageLimiter.release(1);
+        this.messageLimiter = null;
-      this.hdrRead = false;
+      this.readHeader = false;
-    // hitesh: setting second bit of flags byte for client
-    // this is not require but this makes all changes easily at client side right now
-    // just see this bit and process security header
+    // setting second bit of flags byte for client this is not require but this makes all changes
+    // easily at client side right now just see this bit and process security header
-    getCommBuffer().putInt(this.msgType).putInt(msgLen).putInt(this.numberOfParts)
+    getCommBuffer().putInt(this.messageType).putInt(msgLen).putInt(this.numberOfParts)
-    if (this.sc != null) {
+    if (this.serverConnection != null) {
-      return this.sc.updateAndGetSecurityPart();
+      return this.serverConnection.updateAndGetSecurityPart();
-  public boolean getAndResetIsMetaRegion() {
+  boolean getAndResetIsMetaRegion() {
-  protected void sendBytes(boolean clearMessage) throws IOException {
-    if (this.sc != null) {
+  void sendBytes(boolean clearMessage) throws IOException {
+    if (this.serverConnection != null) {
-      this.sc.updateProcessingMessage();
+      this.serverConnection.updateProcessingMessage();
-      final ByteBuffer cb = getCommBuffer();
-      if (cb == null) {
+      final ByteBuffer commBuffer = getCommBuffer();
+      if (commBuffer == null) {
-      int msgLen = 0;
-      synchronized (cb) {
+      synchronized (commBuffer) {
-        if ((headerLen + totalPartLen) > Integer.MAX_VALUE) {
+        if (headerLen + totalPartLen > Integer.MAX_VALUE) {
-        msgLen = (int) (headerLen + totalPartLen);
+        int msgLen = (int) (headerLen + totalPartLen);
-        if (msgLen > MAX_MESSAGE_SIZE) {
+        if (msgLen > this.maxMessageSize) {
-              + ") exceeds gemfire.client.max-message-size setting (" + MAX_MESSAGE_SIZE + ")");
+              + ") exceeds gemfire.client.max-message-size setting (" + this.maxMessageSize + ")");
-        cb.clear();
-        packHeaderInfoForSending(msgLen, (securityPart != null));
+        commBuffer.clear();
+        packHeaderInfoForSending(msgLen, securityPart != null);
-          Part part = (i == this.numberOfParts) ? securityPart : partsList[i];
+          Part part = i == this.numberOfParts ? securityPart : this.partsList[i];
-          if (cb.remaining() < PART_HEADER_SIZE) {
+          if (commBuffer.remaining() < PART_HEADER_SIZE) {
-          cb.putInt(partLen);
-          cb.put(part.getTypeCode());
-          if (partLen <= cb.remaining()) {
-            part.writeTo(cb);
+          commBuffer.putInt(partLen);
+          commBuffer.put(part.getTypeCode());
+          if (partLen <= commBuffer.remaining()) {
+            part.writeTo(commBuffer);
-            if (this.sockCh != null) {
-              part.writeTo(this.sockCh, cb);
+            if (this.socketChannel != null) {
+              part.writeTo(this.socketChannel, commBuffer);
-              part.writeTo(this.os, cb);
+              part.writeTo(this.outputStream, commBuffer);
-            if (this.msgStats != null) {
-              this.msgStats.incSentBytes(partLen);
+            if (this.messageStats != null) {
+              this.messageStats.incSentBytes(partLen);
-        if (cb.position() != 0) {
+        if (commBuffer.position() != 0) {
-        if (this.sockCh == null) {
-          this.os.flush();
+        if (this.socketChannel == null) {
+          this.outputStream.flush();
-  protected void flushBuffer() throws IOException {
+  void flushBuffer() throws IOException {
-    if (this.sockCh != null) {
+    if (this.socketChannel != null) {
-        this.sockCh.write(cb);
+        this.socketChannel.write(cb);
-      this.os.write(cb.array(), 0, cb.position());
+      this.outputStream.write(cb.array(), 0, cb.position());
-    if (this.msgStats != null) {
-      this.msgStats.incSentBytes(cb.position());
+    if (this.messageStats != null) {
+      this.messageStats.incSentBytes(cb.position());
-    // TODO:Hitesh ??? for server changes make sure sc is not null as this class also used by client
-    // :(
+    // TODO: for server changes make sure sc is not null as this class also used by client
-  protected void fetchHeader() throws IOException {
+  void fetchHeader() throws IOException {
-    // msgType is invalidated here and can be used as an indicator
-    // of problems reading the message
-    this.msgType = MessageType.INVALID;
-    int hdr = 0;
+    // messageType is invalidated here and can be used as an indicator
+    // of problems reading the message
+    this.messageType = MessageType.INVALID;
-    if (this.sockCh != null) {
+    if (this.socketChannel != null) {
-        int bytesRead = this.sockCh.read(cb);
-        // System.out.println("DEBUG: fetchHeader read " + bytesRead + " bytes commBuffer=" + cb);
+        int bytesRead = this.socketChannel.read(cb);
-        if (this.msgStats != null) {
-          this.msgStats.incReceivedBytes(bytesRead);
+        if (this.messageStats != null) {
+          this.messageStats.incReceivedBytes(bytesRead);
+
+      int hdr = 0;
-        int bytesRead = -1;
-        bytesRead = this.is.read(cb.array(), hdr, headerLength - hdr);
+        int bytesRead = this.inputStream.read(cb.array(), hdr, headerLength - hdr);
-        if (this.msgStats != null) {
-          this.msgStats.incReceivedBytes(bytesRead);
+        if (this.messageStats != null) {
+          this.messageStats.incReceivedBytes(bytesRead);
-          .toLocalizedString(Integer.valueOf(type)));
+          .toLocalizedString(type));
+
-    if (this.sc != null) {
+    if (this.serverConnection != null) {
-      this.sc.setProcessingMessage();
-      timeToWait = sc.getClientReadTimeout();
+      this.serverConnection.setProcessingMessage();
+      timeToWait = this.serverConnection.getClientReadTimeout();
-    this.hdrRead = true;
-    if (this.msgLimiter != null) {
+    this.readHeader = true;
+
+    if (this.messageLimiter != null) {
-        this.sc.getCachedRegionHelper().checkCancelInProgress(null);
+        this.serverConnection.getCachedRegionHelper().checkCancelInProgress(null);
-            this.msgLimiter.acquire(1);
+            this.messageLimiter.acquire(1);
-            if (!this.msgLimiter.tryAcquire(1, timeToWait, TimeUnit.MILLISECONDS)) {
-              if (this.msgStats != null && this.msgStats instanceof CacheServerStats) {
-                ((CacheServerStats) this.msgStats).incConnectionsTimedOut();
+            if (!this.messageLimiter.tryAcquire(1, timeToWait, TimeUnit.MILLISECONDS)) {
+              if (this.messageStats instanceof CacheServerStats) {
+                ((CacheServerStats) this.messageStats).incConnectionsTimedOut();
-                      .toLocalizedString(Integer.valueOf(timeToWait)));
+                      .toLocalizedString(timeToWait));
-        } catch (InterruptedException e) {
+        } catch (InterruptedException ignore) {
+
-            .toLocalizedString(new Object[] {Integer.valueOf(len),
-                Integer.valueOf(this.maxIncomingMessageLength)}));
+            .toLocalizedString(new Object[] {len, this.maxIncomingMessageLength}));
+
-          if (sc != null) {
-            this.sc.getCachedRegionHelper().checkCancelInProgress(null);
+          if (this.serverConnection != null) {
+            this.serverConnection.getCachedRegionHelper().checkCancelInProgress(null);
-              if (this.msgLimiter != null) {
+              if (this.messageLimiter != null) {
-                newTimeToWait -= (int) sc.getCurrentMessageProcessingTime();
+                newTimeToWait -= (int) this.serverConnection.getCurrentMessageProcessingTime();
-                  || !this.msgLimiter.tryAcquire(1, newTimeToWait, TimeUnit.MILLISECONDS)) {
+                  || !this.messageLimiter.tryAcquire(1, newTimeToWait, TimeUnit.MILLISECONDS)) {
-            this.payloadLength = len; // makes sure payloadLength gets set now so we will release
-                                      // the semaphore
+            // makes sure payloadLength gets set now so we will release the semaphore
+            this.payloadLength = len;
-          } catch (InterruptedException e) {
+          } catch (InterruptedException ignore) {
-    if (this.msgStats != null) {
-      this.msgStats.incMessagesBeingReceived(len);
+    if (this.messageStats != null) {
+      this.messageStats.incMessagesBeingReceived(len);
-    bits = (byte) (bits & MESSAGE_IS_RETRY_MASK);
+    bits &= MESSAGE_IS_RETRY_MASK;
-    this.msgType = type;
+    this.messageType = type;
-    if (this.sc != null) {
+    if (this.serverConnection != null) {
-      this.sc.updateProcessingMessage();
+      this.serverConnection.updateProcessingMessage();
-  protected void readPayloadFields(final int numParts, final int len) throws IOException {
+  /**
+   * TODO: refactor overly long method readPayloadFields
+   */
+  void readPayloadFields(final int numParts, final int len) throws IOException {
-              .toLocalizedString(new Object[] {Integer.valueOf(len), Integer.valueOf(numParts)}));
+              .toLocalizedString(new Object[] {len, numParts}));
-    Integer msgType = messageType.get();
+    Integer msgType = MESSAGE_TYPE.get();
-      messageType.set(null); // set it to null right away.
-      int pingParts = 10; // Some number which will not throw OOM but still be acceptable for a ping
-                          // operation.
+      // set it to null right away.
+      MESSAGE_TYPE.set(null);
+      // Some number which will not throw OOM but still be acceptable for a ping operation.
+      int pingParts = 10;
+
-    if (numParts <= 0)
+    if (numParts <= 0) {
+    }
-    int readSecurePart = 0;
-    readSecurePart = checkAndSetSecurityPart();
+    int readSecurePart = checkAndSetSecurityPart();
-    for (int i = 0; ((i < numParts + readSecurePart)
-        || ((readSecurePart == 1) && (cb.remaining() > 0))); i++) {
+    for (int i = 0; i < numParts + readSecurePart
+        || readSecurePart == 1 && cb.remaining() > 0; i++) {
+
+
-          if (this.sockCh != null) {
+          if (this.socketChannel != null) {
-            int res = this.sockCh.read(cb);
+            int res = this.socketChannel.read(cb);
-              if (this.msgStats != null) {
-                this.msgStats.incReceivedBytes(res);
+              if (this.messageStats != null) {
+                this.messageStats.incReceivedBytes(res);
-            int res = 0;
-            res = this.is.read(partBytes, off, remaining);
+            int res = this.inputStream.read(partBytes, off, remaining);
-              if (this.msgStats != null) {
-                this.msgStats.incReceivedBytes(res);
+              if (this.messageStats != null) {
+                this.messageStats.incReceivedBytes(res);
-    final ByteBuffer cb = getCommBuffer();
-    if (cb.remaining() >= PART_HEADER_SIZE) {
+    final ByteBuffer commBuffer = getCommBuffer();
+    if (commBuffer.remaining() >= PART_HEADER_SIZE) {
-    if (cb.position() != 0) {
-      cb.compact();
+
+    if (commBuffer.position() != 0) {
+      commBuffer.compact();
-      cb.position(cb.limit());
-      cb.limit(cb.capacity());
+      commBuffer.position(commBuffer.limit());
+      commBuffer.limit(commBuffer.capacity());
+    }
+
+    if (this.serverConnection != null) {
+      // Keep track of the fact that we are making progress
+      this.serverConnection.updateProcessingMessage();
-    if (this.sc != null) {
-      // Keep track of the fact that we are making progress
-      this.sc.updateProcessingMessage();
-    }
-    if (this.sockCh != null) {
-      int remaining = cb.remaining();
+
+    if (this.socketChannel != null) {
+      int remaining = commBuffer.remaining();
-        cb.limit(cb.position() + bytesRemaining);
+        commBuffer.limit(commBuffer.position() + bytesRemaining);
-        int res = this.sockCh.read(cb);
+        int res = this.socketChannel.read(commBuffer);
-          if (this.msgStats != null) {
-            this.msgStats.incReceivedBytes(res);
+          if (this.messageStats != null) {
+            this.messageStats.incReceivedBytes(res);
-      int bufSpace = cb.capacity() - cb.position();
-      int bytesToRead = bufSpace;
+      int bytesToRead = commBuffer.capacity() - commBuffer.position();
-      int pos = cb.position();
+      int pos = commBuffer.position();
+
-        int res = 0;
-        res = this.is.read(cb.array(), pos, bytesToRead);
+        int res = this.inputStream.read(commBuffer.array(), pos, bytesToRead);
-          if (this.msgStats != null) {
-            this.msgStats.incReceivedBytes(res);
+          if (this.messageStats != null) {
+            this.messageStats.incReceivedBytes(res);
-      cb.position(pos);
+
+      commBuffer.position(pos);
-    cb.flip();
+    commBuffer.flip();
-    for (int i = 0; i < partsList.length; i++) {
-      partsList[i].clear();
+    for (Part part : this.partsList) {
+      part.clear();
-    StringBuffer sb = new StringBuffer();
-    sb.append("type=").append(MessageType.getString(msgType));
-    sb.append("; payloadLength=").append(payloadLength);
-    sb.append("; numberOfParts=").append(numberOfParts);
-    sb.append("; transactionId=").append(transactionId);
-    sb.append("; currentPart=").append(currentPart);
-    sb.append("; messageModified=").append(messageModified);
-    sb.append("; flags=").append(Integer.toHexString(flags));
-    for (int i = 0; i < numberOfParts; i++) {
+    StringBuilder sb = new StringBuilder();
+    sb.append("type=").append(MessageType.getString(this.messageType));
+    sb.append("; payloadLength=").append(this.payloadLength);
+    sb.append("; numberOfParts=").append(this.numberOfParts);
+    sb.append("; transactionId=").append(this.transactionId);
+    sb.append("; currentPart=").append(this.currentPart);
+    sb.append("; messageModified=").append(this.messageModified);
+    sb.append("; flags=").append(Integer.toHexString(this.flags));
+    for (int i = 0; i < this.numberOfParts; i++) {
-      sb.append(this.partsList[i].toString());
+      sb.append(this.partsList[i]);
-
-  public void setComms(ServerConnection sc, Socket socket, ByteBuffer bb, MessageStats msgStats)
+  void setComms(ServerConnection sc, Socket socket, ByteBuffer bb, MessageStats msgStats)
-    this.sc = sc;
+    this.serverConnection = sc;
-  public void setComms(Socket socket, ByteBuffer bb, MessageStats msgStats) throws IOException {
-    this.sockCh = socket.getChannel();
-    if (this.sockCh == null) {
+  void setComms(Socket socket, ByteBuffer bb, MessageStats msgStats) throws IOException {
+    this.socketChannel = socket.getChannel();
+    if (this.socketChannel == null) {
-      MessageStats msgStats) throws IOException {
+      MessageStats msgStats) {
-    this.sockCh = socket.getChannel();
-    this.is = is;
-    this.os = os;
+    this.socketChannel = socket.getChannel();
+    this.inputStream = is;
+    this.outputStream = os;
-    this.msgStats = msgStats;
+    this.messageStats = msgStats;
-    this.sockCh = null;
-    this.is = null;
-    this.os = null;
+    this.socketChannel = null;
+    this.inputStream = null;
+    this.outputStream = null;
-    this.msgStats = null;
+    this.messageStats = null;
-    if (this.sc != servConn)
+    if (this.serverConnection != servConn)
-   * Populates the stats of this <code>Message</code> with information received via its socket
+   * Populates the stats of this {@code Message} with information received via its socket
-    this.sc = sc;
+    this.serverConnection = sc;
-    this.msgLimiter = msgLimiter;
+    this.messageLimiter = msgLimiter;

MOV23 MOV23 MOV23 INS23 INS23 INS23 INS31 INS31 INS23 MOV83 MOV83 INS83 MOV74 INS59 INS83 INS83 INS83 MOV43 INS59 UPD83 UPD83 UPD83 INS83 INS83 INS83 INS39 INS59 MOV5 MOV5 INS83 INS83 MOV5 INS42 INS8 INS83 INS83 MOV5 INS42 MOV8 MOV29 INS83 INS83 INS39 INS59 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS83 MOV8 INS29 MOV8 INS29 MOV60 UPD66 UPD66 UPD66 INS42 UPD42 MOV42 INS14 INS42 MOV27 INS42 INS34 INS32 INS32 MOV54 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS21 INS60 INS25 INS65 INS60 INS25 INS60 INS65 INS70 INS21 MOV21 INS74 INS42 INS42 INS58 INS58 INS7 INS39 INS59 UPD7 UPD7 UPD66 UPD74 MOV27 INS8 INS66 MOV43 INS59 INS42 MOV8 MOV43 INS59 UPD7 INS66 INS8 MOV27 INS44 INS22 INS8 UPD43 INS7 INS66 INS65 UPD66 INS43 MOV43 MOV59 MOV21 INS41 MOV43 MOV59 MOV21 INS41 INS22 INS32 INS22 INS42 INS22 INS42 INS22 MOV22 INS42 INS42 INS21 INS41 MOV21 INS22 INS22 INS42 INS14 INS22 INS22 INS42 INS14 UPD42 UPD42 UPD42 MOV60 INS42 INS41 MOV32 MOV27 MOV27 UPD42 UPD42 MOV43 INS42 INS52 INS42 MOV21 UPD42 INS22 INS22 INS22 MOV22 INS22 INS22 INS22 MOV32 INS66 INS42 MOV32 UPD43 MOV32 MOV43 INS52 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS52 INS42 UPD42 INS32 INS22 INS8 MOV7 INS52 INS42 INS52 INS42 MOV43 INS22 MOV42 MOV9 INS22 INS52 INS42 INS52 INS42 MOV43 INS22 MOV42 INS22 INS22 INS22 INS22 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV27 MOV27 UPD42 UPD42 UPD42 UPD42 UPD43 INS22 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV22 INS52 INS42 UPD42 INS52 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS52 INS42 INS42 INS33 INS9 INS52 INS42 INS54 MOV9 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 UPD42 INS60 UPD42 UPD42 UPD42 UPD42 UPD42 INS60 UPD42 INS42 UPD42 INS52 INS42 MOV2 INS22 INS58 MOV8 MOV52 MOV43 INS42 INS22 UPD42 UPD42 UPD42 UPD42 UPD42 INS39 INS59 UPD42 UPD42 MOV42 UPD42 INS22 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV39 INS59 INS52 INS42 MOV43 MOV59 INS52 INS42 MOV27 INS42 MOV11 INS22 UPD42 MOV27 MOV32 INS52 INS42 UPD42 UPD42 UPD42 MOV42 INS32 INS22 UPD42 UPD42 UPD42 UPD42 INS52 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 MOV22 MOV42 MOV32 MOV42 MOV42 INS52 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS22 INS60 UPD42 UPD42 UPD42 UPD42 INS22 MOV27 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 MOV22 INS52 INS42 UPD42 UPD42 MOV39 INS59 UPD42 UPD42 INS52 INS42 INS22 UPD42 MOV42 INS32 INS52 INS42 UPD42 UPD42 UPD42 INS62 MOV22 MOV42 MOV42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV22 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS22 UPD42 INS52 INS42 DEL40 DEL26 DEL40 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL23 DEL60 DEL42 DEL7 DEL21 DEL60 DEL42 DEL7 DEL83 DEL28 DEL83 DEL83 DEL83 DEL34 DEL83 DEL83 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL42 DEL40 DEL42 DEL42 DEL52 DEL42 DEL22 DEL39 DEL42 DEL27 DEL36 DEL11 DEL39 DEL42 DEL27 DEL36 DEL11 DEL42 DEL65 DEL42 DEL65 DEL83 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL60 DEL42 DEL42 DEL33 DEL11 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL52 DEL42 DEL22 DEL37 DEL21 DEL8 DEL31 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL60 DEL36 DEL42 DEL7 DEL21 DEL42 DEL42 DEL36 DEL36 DEL42 DEL83 DEL83 DEL34 DEL38 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL62 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL39 DEL42 DEL42 DEL27 DEL36 DEL11 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL41 DEL34 DEL42 DEL7 DEL21 DEL36 DEL36 DEL36 DEL36 DEL36 DEL34 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL39 DEL42 DEL42 DEL59 DEL60 DEL34 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL83 DEL83 DEL52 DEL42 DEL22 DEL7 DEL21