Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/incubator-geode into develop

-import java.io.InvalidObjectException;
-import java.io.ObjectInputStream;
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.security.AccessController;
+import java.util.Set;
+import org.apache.commons.lang.SerializationException;
+import org.apache.commons.lang.StringUtils;
+import org.apache.geode.security.PostProcessor;
+import org.apache.geode.security.ResourcePermission.Operation;
+import org.apache.geode.security.ResourcePermission.Resource;
+import org.apache.geode.security.SecurableComponents;
+import org.apache.shiro.SecurityUtils;
+import org.apache.shiro.ShiroException;
+import org.apache.shiro.config.Ini.Section;
+import org.apache.shiro.config.IniSecurityManagerFactory;
+import org.apache.shiro.mgt.DefaultSecurityManager;
+import org.apache.shiro.realm.Realm;
+import org.apache.shiro.subject.support.SubjectThreadState;
+import org.apache.shiro.util.ThreadContext;
+import com.gemstone.gemfire.GemFireIOException;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.internal.ClassLoadUtil;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl;
+import com.gemstone.gemfire.internal.security.shiro.CustomAuthRealm;
+import com.gemstone.gemfire.internal.security.shiro.GeodeAuthenticationToken;
+import com.gemstone.gemfire.internal.security.shiro.ShiroPrincipal;
+import com.gemstone.gemfire.internal.util.BlobHelper;
+import com.gemstone.gemfire.management.internal.security.ResourceConstants;
+import com.gemstone.gemfire.security.AuthenticationFailedException;
+import com.gemstone.gemfire.security.GemFireSecurityException;
+import com.gemstone.gemfire.security.NotAuthorizedException;
-/**
- * Default implementation of {@code SecurityService} for Integrated Security.
- *
- * <p>This class is serializable but always deserializes the singleton {@code defaultInstance}.
- */
-public class IntegratedSecurityService implements SecurityService, Serializable {
+public class IntegratedSecurityService implements SecurityService{
-  @Override
-  public ThreadState bindSubject(final Subject subject) {
-    return GeodeSecurityUtil.bindSubject(subject);
-  }
+  private PostProcessor postProcessor;
+  private SecurityManager securityManager;
-  @Override
+  private boolean isIntegratedSecurity;
+
+  private boolean isClientAuthenticator; // is there a SECURITY_CLIENT_AUTHENTICATOR
+  private boolean isPeerAuthenticator; // is there a SECURITY_PEER_AUTHENTICATOR
+
+  private boolean isJmxSecurityRequired;
+  private boolean isHttpSecurityRequired;
+  private boolean isGatewaySecurityRequired;
+  private boolean isClusterSecurityRequired;
+  private boolean isServerSecurityRequired;
+
+  /**
+   * It first looks the shiro subject in AccessControlContext since JMX will
+   * use multiple threads to process operations from the same client, then it
+   * looks into Shiro's thead context.
+   *
+   * @return the shiro subject, null if security is not enabled
+   */
-    return GeodeSecurityUtil.getSubject();
-  }
+    if (!isIntegratedSecurity) {
+      return null;
+    }
-  @Override
-  public Subject login(final Properties credentials) {
-    return GeodeSecurityUtil.login(credentials);
-  }
+    Subject currentUser = null;
-  @Override
-  public Subject login(final String username, final String password) {
-    return GeodeSecurityUtil.login(username, password);
-  }
+    // First try get the principal out of AccessControlContext instead of Shiro's Thread context
+    // since threads can be shared between JMX clients.
+    javax.security.auth.Subject jmxSubject =
+      javax.security.auth.Subject.getSubject(AccessController.getContext());
-  @Override
-  public void logout() {
-    GeodeSecurityUtil.logout();
-  }
+    if (jmxSubject != null) {
+      Set<ShiroPrincipal> principals = jmxSubject.getPrincipals(ShiroPrincipal.class);
+      if (principals.size() > 0) {
+        ShiroPrincipal principal = principals.iterator().next();
+        currentUser = principal.getSubject();
+        ThreadContext.bind(currentUser);
+        return currentUser;
+      }
+    }
-  @Override
-  public Callable associateWith(final Callable callable) {
-    return GeodeSecurityUtil.associateWith(callable);
-  }
+    // in other cases like admin rest call or pulse authorization
+    currentUser = SecurityUtils.getSubject();
-  @Override
-  public void authorize(final ResourceOperation resourceOperation) {
-    GeodeSecurityUtil.authorize(resourceOperation);
-  }
+    if (currentUser == null || currentUser.getPrincipal() == null) {
+      throw new GemFireSecurityException("Error: Anonymous User");
+    }
-  @Override
-  public void authorizeClusterManage() {
-    GeodeSecurityUtil.authorizeClusterManage();
-  }
-
-  @Override
-  public void authorizeClusterWrite() {
-    GeodeSecurityUtil.authorizeClusterWrite();
-  }
-
-  @Override
-  public void authorizeClusterRead() {
-    GeodeSecurityUtil.authorizeClusterRead();
-  }
-
-  @Override
-  public void authorizeDataManage() {
-    GeodeSecurityUtil.authorizeDataManage();
-  }
-
-  @Override
-  public void authorizeDataWrite() {
-    GeodeSecurityUtil.authorizeDataWrite();
-  }
-
-  @Override
-  public void authorizeDataRead() {
-    GeodeSecurityUtil.authorizeDataRead();
-  }
-
-  @Override
-  public void authorizeRegionManage(final String regionName) {
-    GeodeSecurityUtil.authorizeRegionManage(regionName);
-  }
-
-  @Override
-  public void authorizeRegionManage(final String regionName, final String key) {
-    GeodeSecurityUtil.authorizeRegionManage(regionName, key);
-  }
-
-  @Override
-  public void authorizeRegionWrite(final String regionName) {
-    GeodeSecurityUtil.authorizeRegionWrite(regionName);
-  }
-
-  @Override
-  public void authorizeRegionWrite(final String regionName, final String key) {
-    GeodeSecurityUtil.authorizeRegionWrite(regionName, key);
-  }
-
-  @Override
-  public void authorizeRegionRead(final String regionName) {
-    GeodeSecurityUtil.authorizeRegionRead(regionName);
-  }
-
-  @Override
-  public void authorizeRegionRead(final String regionName, final String key) {
-    GeodeSecurityUtil.authorizeRegionRead(regionName, key);
-  }
-
-  @Override
-  public void authorize(final String resource, final String operation) {
-    GeodeSecurityUtil.authorize(resource, operation);
-  }
-
-  @Override
-  public void authorize(final ResourcePermission context) {
-    GeodeSecurityUtil.authorize(context);
-  }
-
-  @Override
-  public void initSecurity(final Properties securityProps) {
-    GeodeSecurityUtil.initSecurity(securityProps);
-  }
-
-  @Override
-  public void close() {
-    GeodeSecurityUtil.close();
-  }
-
-  @Override
-  public boolean needPostProcess() {
-    return GeodeSecurityUtil.needPostProcess();
-  }
-
-  @Override
-  public Object postProcess(final String regionPath, final Object key, final Object value, final boolean valueIsSerialized) {
-    return GeodeSecurityUtil.postProcess(regionPath, key, value, valueIsSerialized);
-  }
-
-  @Override
-  public Object postProcess(final Serializable principal, final String regionPath, final Object key, final Object value, final boolean valueIsSerialized) {
-    return GeodeSecurityUtil.postProcess(principal, regionPath, key, value, valueIsSerialized);
-  }
-
-  @Override
-  public boolean isClientSecurityRequired() {
-    return GeodeSecurityUtil.isClientSecurityRequired();
-  }
-
-  @Override
-  public boolean isJmxSecurityRequired() {
-    return GeodeSecurityUtil.isJmxSecurityRequired();
-  }
-
-  @Override
-  public boolean isGatewaySecurityRequired() {
-    return GeodeSecurityUtil.isGatewaySecurityRequired();
-  }
-
-  @Override
-  public boolean isHttpSecurityRequired() {
-    return GeodeSecurityUtil.isHttpServiceSecurityRequired();
-  }
-
-  @Override
-  public boolean isPeerSecurityRequired() {
-    return GeodeSecurityUtil.isPeerSecurityRequired();
-  }
-
-  @Override
-  public boolean isIntegratedSecurity() {
-    return GeodeSecurityUtil.isIntegratedSecurity();
-  }
-
-  @Override
-  public SecurityManager getSecurityManager() {
-    return GeodeSecurityUtil.getSecurityManager();
-  }
-
-
-  private void readObject(final ObjectInputStream stream) throws InvalidObjectException {
-    throw new InvalidObjectException("SerializationProxy required");
-  }
-
-  private Object writeReplace() {
-    return new SerializationProxy();
+    return currentUser;
-   * Serialization proxy for {@code IntegratedSecurityService}.
+   * convenient method for testing
+   * @param username
+   * @param password
+   * @return
-  private static class SerializationProxy implements Serializable {
+  public Subject login(String username, String password){
+    if(StringUtils.isBlank(username) || StringUtils.isBlank(password))
+      return null;
-    SerializationProxy() {
+    Properties credentials = new Properties();
+    credentials.setProperty(ResourceConstants.USER_NAME, username);
+    credentials.setProperty(ResourceConstants.PASSWORD, password);
+    return login(credentials);
+  }
+
+  /**
+   * @return null if security is not enabled, otherwise return a shiro subject
+   */
+  public Subject login(Properties credentials) {
+    if (!isIntegratedSecurity) {
+      return null;
-    private Object readResolve() {
-      return getSecurityService();
+    if(credentials == null)
+      return null;
+
+    // this makes sure it starts with a clean user object
+    ThreadContext.remove();
+
+    Subject currentUser = SecurityUtils.getSubject();
+    GeodeAuthenticationToken token = new GeodeAuthenticationToken(credentials);
+    try {
+      logger.info("Logging in " + token.getPrincipal());
+      currentUser.login(token);
+    catch (ShiroException e) {
+      logger.info(e.getMessage(), e);
+      throw new AuthenticationFailedException("Authentication error. Please check your credentials.", e);
+    }
+
+    return currentUser;
+  }
+
+  public void logout() {
+    Subject currentUser = getSubject();
+    if (currentUser == null) {
+      return;
+    }
+
+    try {
+      logger.info("Logging out " + currentUser.getPrincipal());
+      currentUser.logout();
+    }
+    catch (ShiroException e) {
+      logger.info(e.getMessage(), e);
+      throw new GemFireSecurityException(e.getMessage(), e);
+    }
+    // clean out Shiro's thread local content
+    ThreadContext.remove();
+  }
+
+  public Callable associateWith(Callable callable) {
+    Subject currentUser = getSubject();
+    if (currentUser == null) {
+      return callable;
+    }
+
+    return currentUser.associateWith(callable);
+  }
+
+  /**
+   * this binds the passed-in subject to the executing thread, normally, you
+   * would do this:
+   *
+   * ThreadState state = null;
+   * try{
+   *   state = IntegratedSecurityService.bindSubject(subject);
+   *   //do the rest of the work as this subject
+   * }
+   * finally{
+   *   if(state!=null)
+   *      state.clear();
+   * }
+   */
+  public ThreadState bindSubject(Subject subject){
+    if (subject == null) {
+      return null;
+    }
+
+    ThreadState threadState = new SubjectThreadState(subject);
+    threadState.bind();
+    return threadState;
+  }
+
+  public void authorize(ResourceOperation resourceOperation) {
+    if (resourceOperation == null) {
+      return;
+    }
+
+    authorize(resourceOperation.resource().name(),
+      resourceOperation.operation().name(),
+      null);
+  }
+
+  public void authorizeClusterManage() {
+    authorize("CLUSTER", "MANAGE");
+  }
+
+  public void authorizeClusterWrite() {
+    authorize("CLUSTER", "WRITE");
+  }
+
+  public void authorizeClusterRead() {
+    authorize("CLUSTER", "READ");
+  }
+
+  public void authorizeDataManage() {
+    authorize("DATA", "MANAGE");
+  }
+
+  public void authorizeDataWrite() {
+    authorize("DATA", "WRITE");
+  }
+
+  public void authorizeDataRead() {
+    authorize("DATA", "READ");
+  }
+
+  public void authorizeRegionManage(String regionName) {
+    authorize("DATA", "MANAGE", regionName);
+  }
+
+  public void authorizeRegionManage(String regionName, String key) {
+    authorize("DATA", "MANAGE", regionName, key);
+  }
+
+  public void authorizeRegionWrite(String regionName) {
+    authorize("DATA", "WRITE", regionName);
+  }
+
+  public void authorizeRegionWrite(String regionName, String key) {
+    authorize("DATA", "WRITE", regionName, key);
+  }
+
+  public void authorizeRegionRead(String regionName) {
+    authorize("DATA", "READ", regionName);
+  }
+
+  public void authorizeRegionRead(String regionName, String key) {
+    authorize("DATA", "READ", regionName, key);
+  }
+
+  public void authorize(String resource, String operation) {
+    authorize(resource, operation, null);
+  }
+
+  private void authorize(String resource, String operation, String regionName){
+    authorize(resource, operation, regionName, null);
+  }
+
+  private void authorize(String resource, String operation, String regionName, String key) {
+    regionName = StringUtils.stripStart(regionName, "/");
+    authorize(new ResourcePermission(resource, operation, regionName, key));
+  }
+
+  public void authorize(ResourcePermission context) {
+    Subject currentUser = getSubject();
+    if (currentUser == null) {
+      return;
+    }
+
+    if (context == null) {
+      return;
+    }
+
+    if (context.getResource() == Resource.NULL && context.getOperation() == Operation.NULL) {
+      return;
+    }
+
+    try {
+      currentUser.checkPermission(context);
+    }
+    catch (ShiroException e) {
+      String msg = currentUser.getPrincipal() + " not authorized for " + context;
+      logger.info(msg);
+      throw new NotAuthorizedException(msg, e);
+    }
+  }
+
+  /**
+   * initialize Shiro's Security Manager and Security Utilities
+   */
+  public void initSecurity(Properties securityProps) {
+    if (securityProps == null) {
+      return;
+    }
+
+    String enabledComponentsString = securityProps.getProperty(SECURITY_ENABLED_COMPONENTS);
+    if (enabledComponentsString == null) {
+      enabledComponentsString = DistributionConfig.DEFAULT_SECURITY_ENABLED_COMPONENTS;
+    }
+
+    boolean isClusterSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.CLUSTER);
+    boolean isGatewaySecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.GATEWAY);
+    boolean isHttpSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.HTTP_SERVICE);
+    boolean isJmxSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.JMX);
+    boolean isServerSecured = enabledComponentsString.contains(SecurableComponents.ALL) || enabledComponentsString.contains(SecurableComponents.SERVER);
+
+    String shiroConfig = securityProps.getProperty(SECURITY_SHIRO_INIT);
+    String securityConfig = securityProps.getProperty(SECURITY_MANAGER);
+    String clientAuthenticatorConfig = securityProps.getProperty(SECURITY_CLIENT_AUTHENTICATOR);
+    String peerAuthenticatorConfig = securityProps.getProperty(SECURITY_PEER_AUTHENTICATOR);
+
+    if (!StringUtils.isBlank(shiroConfig)) {
+      IniSecurityManagerFactory factory = new IniSecurityManagerFactory("classpath:" + shiroConfig);
+
+      // we will need to make sure that shiro uses a case sensitive permission resolver
+      Section main = factory.getIni().addSection("main");
+      main.put("geodePermissionResolver", "com.gemstone.gemfire.internal.security.shiro.GeodePermissionResolver");
+      if (!main.containsKey("iniRealm.permissionResolver")) {
+        main.put("iniRealm.permissionResolver", "$geodePermissionResolver");
+      }
+
+      org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();
+      SecurityUtils.setSecurityManager(securityManager);
+      isIntegratedSecurity = true;
+    }
+    // only set up shiro realm if user has implemented SecurityManager
+    else if (!StringUtils.isBlank(securityConfig)) {
+      securityManager = getObjectOfTypeFromClassName(securityConfig, SecurityManager.class);
+      securityManager.init(securityProps);
+      Realm realm = new CustomAuthRealm(securityManager);
+      org.apache.shiro.mgt.SecurityManager shiroManager = new DefaultSecurityManager(realm);
+      SecurityUtils.setSecurityManager(shiroManager);
+      isIntegratedSecurity = true;
+    }
+    else if( !StringUtils.isBlank(clientAuthenticatorConfig)) {
+      isClientAuthenticator = true;
+    }
+    else if (!StringUtils.isBlank(peerAuthenticatorConfig)) {
+      isPeerAuthenticator = true;
+    }
+    else {
+      isIntegratedSecurity = false;
+      isClientAuthenticator = false;
+      isPeerAuthenticator = false;
+    }
+
+    isServerSecurityRequired = isClientAuthenticator || (isIntegratedSecurity && isServerSecured);
+    isClusterSecurityRequired = isPeerAuthenticator || (isIntegratedSecurity && isClusterSecured);
+
+    isGatewaySecurityRequired = isClientAuthenticator || (isIntegratedSecurity && isGatewaySecured);
+    isHttpSecurityRequired = isIntegratedSecurity && isHttpSecured;
+    isJmxSecurityRequired = isIntegratedSecurity && isJmxSecured;
+
+    // this initializes the post processor
+    String customPostProcessor = securityProps.getProperty(SECURITY_POST_PROCESSOR);
+    if( !StringUtils.isBlank(customPostProcessor)) {
+      postProcessor = getObjectOfTypeFromClassName(customPostProcessor, PostProcessor.class);
+      postProcessor.init(securityProps);
+    }
+    else{
+      postProcessor = null;
+    }
+  }
+
+  public void close() {
+    if (securityManager != null) {
+      securityManager.close();
+      securityManager = null;
+    }
+
+    if (postProcessor != null) {
+      postProcessor.close();
+      postProcessor = null;
+    }
+    ThreadContext.remove();
+    isIntegratedSecurity = false;
+    isClientAuthenticator = false;
+    isPeerAuthenticator = false;
+  }
+
+  /**
+   * postProcess call already has this logic built in, you don't need to call
+   * this everytime you call postProcess. But if your postProcess is pretty
+   * involved with preparations and you need to bypass it entirely, call this
+   * first.
+   */
+  public boolean needPostProcess(){
+    return (isIntegratedSecurity && postProcessor != null);
+  }
+
+  public Object postProcess(String regionPath, Object key, Object value, boolean valueIsSerialized){
+    return postProcess(null, regionPath, key, value, valueIsSerialized);
+  }
+
+  public Object postProcess(Object principal, String regionPath, Object key, Object value, boolean valueIsSerialized) {
+    if (!needPostProcess())
+      return value;
+
+    if (principal == null) {
+      Subject subject = getSubject();
+      if (subject == null)
+        return value;
+      principal = (Serializable) subject.getPrincipal();
+    }
+
+    String regionName = StringUtils.stripStart(regionPath, "/");
+    Object newValue = null;
+
+    // if the data is a byte array, but the data itself is supposed to be an object, we need to desearized it before we pass
+    // it to the callback.
+    if (valueIsSerialized && value instanceof byte[]) {
+      try {
+        Object oldObj = EntryEventImpl.deserialize((byte[]) value);
+        Object newObj = postProcessor.processRegionValue(principal, regionName, key,  oldObj);
+        newValue = BlobHelper.serializeToBlob(newObj);
+      } catch (IOException|SerializationException e) {
+        throw new GemFireIOException("Exception de/serializing entry value", e);
+      }
+    }
+    else {
+      newValue = postProcessor.processRegionValue(principal, regionName, key, value);
+    }
+
+    return newValue;
+  }
+
+  private static void checkSameClass(Object obj1, Object obj2){
+
+  }
+
+  /**
+   * this method would never return null, it either throws an exception or
+   * returns an object
+   */
+  public static <T> T getObjectOfTypeFromClassName(String className, Class<T> expectedClazz) {
+    Class actualClass = null;
+    try {
+      actualClass = ClassLoadUtil.classFromName(className);
+    }
+    catch (Exception ex) {
+      throw new GemFireSecurityException("Instance could not be obtained, "+ex.toString(), ex);
+    }
+
+    if(!expectedClazz.isAssignableFrom(actualClass)){
+      throw new GemFireSecurityException("Instance could not be obtained. Expecting a "+expectedClazz.getName()+" class.");
+    }
+
+    T actualObject = null;
+    try {
+      actualObject =  (T)actualClass.newInstance();
+    } catch (Exception e) {
+      throw new GemFireSecurityException("Instance could not be obtained. Error instantiating "+actualClass.getName(), e);
+    }
+    return actualObject;
+  }
+
+  /**
+   * this method would never return null, it either throws an exception or
+   * returns an object
+   */
+  public static <T> T getObjectOfTypeFromFactoryMethod(String factoryMethodName, Class<T> expectedClazz){
+    T actualObject = null;
+    try {
+      Method factoryMethod = ClassLoadUtil.methodFromName(factoryMethodName);
+      actualObject = (T)factoryMethod.invoke(null, (Object[])null);
+    } catch (Exception e) {
+      throw new GemFireSecurityException("Instance could not be obtained from "+factoryMethodName, e);
+    }
+
+    if(actualObject == null){
+      throw new GemFireSecurityException("Instance could not be obtained from "+factoryMethodName);
+    }
+
+    return actualObject;
+  }
+
+  /**
+   * this method would never return null, it either throws an exception or
+   * returns an object
+   *
+   * @return an object of type expectedClazz. This method would never return
+   * null. It either returns an non-null object or throws exception.
+   */
+  public static <T> T getObjectOfType(String classOrMethod, Class<T> expectedClazz) {
+    T object = null;
+    try{
+      object = getObjectOfTypeFromClassName(classOrMethod, expectedClazz);
+    }
+    catch (Exception e){
+      object = getObjectOfTypeFromFactoryMethod(classOrMethod, expectedClazz);
+    }
+    return object;
+  }
+
+  public SecurityManager getSecurityManager(){
+    return securityManager;
+  }
+
+  public PostProcessor getPostProcessor() {
+    return postProcessor;
+  }
+
+  public boolean isIntegratedSecurity(){
+    return isIntegratedSecurity;
+  }
+
+  public boolean isClientSecurityRequired() { // TODO: rename as isServerSecurityRequired
+    return isServerSecurityRequired;
+  }
+
+  public boolean isPeerSecurityRequired() { // TODO: rename as isClusterSecurityRequired
+    return isClusterSecurityRequired;
+  }
+
+  public boolean isJmxSecurityRequired() {
+    return isJmxSecurityRequired;
+  }
+
+  public boolean isGatewaySecurityRequired() {
+    return isGatewaySecurityRequired;
+  }
+
+  public boolean isHttpSecurityRequired() {
+    return isHttpSecurityRequired;

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV31 INS31 MOV31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS29 INS83 MOV43 INS42 INS8 INS29 MOV44 MOV44 INS8 INS29 MOV43 MOV44 INS8 MOV43 INS29 INS83 MOV43 INS42 INS44 INS8 MOV83 MOV39 MOV42 MOV44 MOV8 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 INS83 INS39 INS42 MOV44 MOV44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 MOV83 MOV39 MOV42 MOV44 INS8 INS29 MOV83 MOV39 MOV42 INS44 INS8 MOV83 MOV39 MOV42 INS8 INS29 MOV83 MOV39 MOV42 MOV8 MOV43 INS44 INS44 MOV83 MOV43 MOV42 MOV44 MOV44 MOV44 MOV44 MOV44 INS8 INS83 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 INS44 INS44 INS8 INS29 MOV83 INS83 INS73 INS43 INS42 INS44 INS44 INS8 INS29 UPD83 MOV83 INS83 INS73 INS43 UPD42 MOV42 MOV44 INS44 INS8 INS29 INS83 INS83 INS73 INS43 INS42 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS83 INS39 INS42 INS8 UPD83 INS39 UPD42 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS65 INS65 INS25 INS60 INS60 INS25 INS21 INS25 INS41 INS65 INS65 INS65 INS65 UPD42 UPD42 INS25 INS60 INS21 INS21 MOV41 INS65 UPD42 INS25 INS25 INS21 INS60 INS60 INS54 INS41 INS60 INS25 INS54 INS21 MOV43 INS60 INS25 INS65 INS43 INS42 INS25 INS60 INS21 INS41 INS25 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS43 INS42 INS21 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS43 INS60 INS25 INS25 INS25 INS54 INS65 INS43 INS42 INS25 INS60 INS25 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS60 INS25 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS25 INS25 INS21 INS21 INS21 INS21 INS65 INS43 INS42 MOV43 MOV43 INS42 UPD42 UPD43 UPD42 INS25 INS25 INS60 INS60 INS25 INS41 INS43 INS42 INS43 INS42 INS65 INS42 INS42 INS43 INS42 INS74 INS42 INS60 INS54 INS25 INS60 INS54 INS41 INS65 INS42 INS42 UPD43 UPD42 INS74 INS42 INS60 INS54 INS25 INS41 INS65 INS65 INS42 INS42 INS43 INS42 INS74 INS42 INS60 INS54 INS41 UPD42 MOV42 INS41 INS42 INS41 INS41 INS41 INS41 INS41 INS41 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 UPD66 MOV66 INS38 INS8 MOV43 INS59 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS42 INS66 INS42 INS42 INS27 INS41 MOV43 INS59 INS32 INS32 INS66 INS38 INS8 INS27 INS41 INS32 INS43 INS59 INS43 INS59 INS8 INS12 INS42 INS43 INS59 INS27 INS8 INS8 INS12 INS32 INS43 INS59 INS27 INS8 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS27 INS8 INS43 INS59 INS32 INS42 INS27 INS8 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS32 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS27 INS8 INS8 INS12 INS66 INS42 INS27 INS8 INS43 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS39 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS38 INS8 INS25 INS7 INS7 INS7 INS7 INS7 INS43 INS59 INS38 INS8 INS8 INS27 INS8 INS27 INS8 INS32 INS7 INS7 INS7 INS66 INS66 INS66 INS66 INS36 INS42 UPD42 INS38 INS41 INS27 INS8 INS43 INS59 MOV43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS66 INS66 INS42 INS43 INS43 INS43 INS59 INS8 INS12 INS38 INS8 INS43 INS59 INS8 INS12 INS42 INS66 INS66 UPD42 INS43 INS43 INS43 INS59 INS8 INS12 INS27 INS8 INS42 UPD66 MOV66 INS66 UPD66 MOV66 INS66 INS42 INS43 INS43 INS43 INS59 INS8 INS12 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS33 INS40 INS42 INS32 INS42 INS33 INS60 INS25 INS42 INS32 INS27 INS27 INS53 INS32 INS32 INS33 INS42 INS14 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS42 INS41 INS42 INS33 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS21 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS33 INS41 INS21 MOV21 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 UPD42 INS42 INS33 INS41 INS42 INS42 INS14 INS42 INS42 INS42 INS33 INS41 UPD42 INS32 INS32 INS33 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 UPD42 INS45 INS45 INS33 INS42 INS42 INS42 INS42 INS33 INS42 INS32 INS42 INS14 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS33 INS41 INS27 INS27 INS41 MOV21 INS44 INS8 INS42 INS33 INS41 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS60 INS60 INS21 INS25 INS60 INS21 INS21 INS38 INS8 INS25 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS27 INS42 INS42 INS32 INS32 INS21 INS21 INS21 INS42 INS33 MOV21 INS21 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS9 INS27 INS33 INS32 INS42 INS42 INS33 INS60 INS25 INS21 INS42 INS42 INS32 INS42 INS33 INS42 INS62 INS54 INS21 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS32 INS53 INS42 INS42 INS33 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS33 INS60 INS21 INS44 INS8 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS33 INS21 INS44 INS8 INS33 INS40 INS42 INS32 INS74 INS59 INS27 INS8 UPD42 MOV42 MOV42 INS42 INS33 INS32 INS33 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS33 UPD42 MOV42 INS42 INS43 INS42 INS32 INS32 INS43 INS42 INS21 INS53 INS42 INS32 INS43 INS42 INS21 INS53 INS42 INS42 INS33 INS43 INS42 INS32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS45 MOV43 INS42 INS42 INS42 INS42 INS42 INS32 INS40 INS32 INS40 INS43 INS42 INS60 INS21 INS53 INS42 INS42 INS42 INS7 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS38 INS8 INS43 INS59 INS32 INS7 INS32 INS21 MOV21 INS60 INS60 INS21 INS21 INS38 INS8 INS25 INS42 INS36 INS42 INS36 INS42 INS36 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS32 INS7 INS7 INS32 INS7 INS42 INS27 INS42 INS43 INS59 INS27 INS41 INS7 INS42 INS42 INS42 INS45 INS42 INS5 INS8 INS12 INS7 INS7 INS43 INS42 INS53 INS42 INS42 INS42 INS14 INS7 INS43 INS42 INS53 INS43 INS59 INS7 INS43 INS42 MOV53 INS14 INS7 INS43 INS42 INS21 UPD42 MOV42 INS42 INS43 INS43 INS42 INS32 INS32 INS34 INS60 INS21 INS21 INS41 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS27 INS42 MOV42 INS42 INS42 INS32 INS14 INS42 INS42 INS27 UPD42 INS42 INS32 INS14 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS43 INS59 INS32 INS14 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS32 INS21 INS40 INS42 INS32 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS7 INS43 INS59 INS43 INS59 INS32 INS7 INS32 INS21 INS38 INS8 INS8 INS27 INS27 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS33 UPD42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS11 INS39 INS85 INS60 INS60 INS21 INS44 INS8 INS42 INS32 INS42 INS32 INS42 INS14 INS43 INS27 INS42 INS11 INS42 INS14 INS42 INS42 INS32 INS42 INS11 UPD42 MOV42 UPD43 MOV43 INS27 INS42 INS32 INS42 INS7 INS42 INS42 UPD42 MOV42 INS42 INS57 INS42 INS42 INS43 INS59 INS7 INS32 INS42 INS42 INS45 INS32 UPD42 MOV42 INS42 INS32 INS42 INS43 INS45 INS42 INS45 INS32 INS42 INS42 INS32 INS42 INS43 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS27 INS32 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS14 INS40 INS42 INS14 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS7 INS32 INS21 INS21 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS57 INS42 MOV43 INS32 INS43 INS59 INS43 INS59 INS7 INS84 INS42 INS53 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS43 INS27 INS42 INS42 INS45 INS32 INS45 INS43 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS43 INS32 UPD43 INS27 INS42 UPD42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS57 INS43 INS42 INS43 INS42 INS42 INS9 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS14 INS42 INS45 INS32 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS45 INS32 INS42 INS42 INS42 INS33 INS11 UPD42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS9 INS42 INS9 INS42 INS9 INS42 INS9 INS42 UPD42 MOV42 INS42 INS11 UPD42 MOV42 INS42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS45 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS5 INS33 INS42 INS42 INS42 INS5 INS42 INS42 INS43 INS85 INS39 INS85 INS42 DEL66 DEL65 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL78 DEL83 DEL42 DEL83 DEL42 DEL44 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL83 DEL42 DEL83 DEL42 DEL44 DEL8 DEL42 DEL78 DEL83 DEL42 DEL32 DEL41 DEL42 DEL78 DEL8 DEL42 DEL78 DEL83 DEL83 DEL42 DEL78 DEL31 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL42 DEL42 DEL78 DEL83 DEL42 DEL42 DEL78 DEL83 DEL83 DEL42 DEL42 DEL78 DEL83 DEL42 DEL42 DEL78 DEL83 DEL83 DEL42 DEL42 DEL78 DEL83 DEL42 DEL42 DEL78 DEL83 DEL83 DEL42 DEL42 DEL78 DEL83 DEL83 DEL42 DEL83 DEL83 DEL83 DEL42 DEL42 DEL32 DEL42 DEL78 DEL8 DEL31 DEL42 DEL78 DEL8 DEL31 DEL42 DEL78 DEL8 DEL31 DEL42 DEL78 DEL31 DEL42 DEL78 DEL83 DEL83 DEL42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL45 DEL42 DEL42 DEL32 DEL42 DEL78 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL39 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL32 DEL41 DEL8 DEL31 DEL39 DEL43 DEL8 DEL31 DEL83 DEL42 DEL14 DEL41 DEL8 DEL31 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL55