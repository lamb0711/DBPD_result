GEODE-1740: Correct potential region inconsistencies with concurrent clear and transaction commit

+  protected Runnable internalDuringApplyChanges;
-        // apply changes to the cache
-        applyChanges(entries);
-        // For internal testing
-        if (this.internalAfterApplyChanges != null) {
-          this.internalAfterApplyChanges.run();
+        lockTXRegions(regions);
+
+        try {
+          // apply changes to the cache
+          applyChanges(entries);
+          // For internal testing
+          if (this.internalAfterApplyChanges != null) {
+            this.internalAfterApplyChanges.run();
+          }
+
+          // build and send the message
+          msg = buildMessage();
+          this.commitMessage = msg;
+          if (this.internalBeforeSend != null) {
+            this.internalBeforeSend.run();
+          }
+
+          msg.send(this.locks.getDistributedLockId());
+          // For internal testing
+          if (this.internalAfterSend != null) {
+            this.internalAfterSend.run();
+          }
+
+          firePendingCallbacks();
+          /*
+           * This is to prepare the commit message for the caller, make sure all events are in
+           * there.
+           */
+          this.commitMessage = buildCompleteMessage();
+        } finally {
+          unlockTXRegions(regions);
-
-        // build and send the message
-        msg = buildMessage();
-        this.commitMessage = msg;
-        if (this.internalBeforeSend != null) {
-          this.internalBeforeSend.run();
-        }
-
-
-
-        msg.send(this.locks.getDistributedLockId());
-        // For internal testing
-        if (this.internalAfterSend != null) {
-          this.internalAfterSend.run();
-        }
-
-        firePendingCallbacks();
-        /*
-         * This is to prepare the commit message for the caller, make sure all events are in there.
-         */
-        this.commitMessage = buildCompleteMessage();
-
+  private void lockTXRegions(IdentityHashMap<LocalRegion, TXRegionState> regions) {
+    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = regions.entrySet().iterator();
+    while (it.hasNext()) {
+      Map.Entry<LocalRegion, TXRegionState> me = it.next();
+      LocalRegion r = me.getKey();
+      r.getRegionMap().lockRegionForAtomicTX(r);
+    }
+  }
+
+  private void unlockTXRegions(IdentityHashMap<LocalRegion, TXRegionState> regions) {
+    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = regions.entrySet().iterator();
+    while (it.hasNext()) {
+      Map.Entry<LocalRegion, TXRegionState> me = it.next();
+      LocalRegion r = me.getKey();
+      r.getRegionMap().unlockRegionForAtomicTX(r);
+    }
+  }
+
+        if (this.internalDuringApplyChanges != null) {
+          this.internalDuringApplyChanges.run();
+        }
+   * Add an internal callback which is run as each transaction change is applied.
+   */
+  public void setDuringApplyChanges(Runnable duringApplyChanges) {
+    this.internalDuringApplyChanges = duringApplyChanges;
+  }
+
+  /**

INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS74 INS42 INS60 INS61 INS74 INS42 INS60 INS61 INS65 INS43 INS42 INS21 INS43 INS43 INS43 INS74 INS59 INS32 INS8 INS43 INS43 INS43 INS74 INS59 INS32 INS8 INS66 INS42 INS7 INS42 INS42 INS42 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS42 INS42 INS42 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS60 INS21 INS22 INS42 INS8 INS42 INS43 INS43 INS43 INS32 INS42 INS74 INS59 INS43 INS59 INS32 INS42 INS43 INS43 INS43 INS32 INS42 INS74 INS59 INS43 INS59 INS32 INS25 INS52 INS42 MOV21 INS21 INS54 INS40 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS27 INS8 INS32 MOV8 INS8 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS33 INS21 INS42 INS42 INS21 INS52 INS42 INS32 INS32 INS22 INS42 INS42 INS42 INS52 INS42