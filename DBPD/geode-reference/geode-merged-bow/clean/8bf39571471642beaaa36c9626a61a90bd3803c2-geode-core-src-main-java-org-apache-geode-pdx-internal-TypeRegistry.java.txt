Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private static final boolean DISABLE_TYPE_REGISTRY
-      = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "TypeRegistry.DISABLE_PDX_REGISTRY");
+  private static final boolean DISABLE_TYPE_REGISTRY =
+      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "TypeRegistry.DISABLE_PDX_REGISTRY");
-  private final Map<Class<?>, PdxType> localTypeIds = new CopyOnWriteWeakHashMap<Class<?>, PdxType>();
-  private final Map<Class<?>, Map<Integer, UnreadPdxType>> localTypeIdMaps = new CopyOnWriteWeakHashMap<Class<?>, Map<Integer, UnreadPdxType>>();
-  private final WeakConcurrentIdentityHashMap<Object, PdxUnreadData> unreadDataMap = WeakConcurrentIdentityHashMap.make();
+  private final Map<Class<?>, PdxType> localTypeIds =
+      new CopyOnWriteWeakHashMap<Class<?>, PdxType>();
+  private final Map<Class<?>, Map<Integer, UnreadPdxType>> localTypeIdMaps =
+      new CopyOnWriteWeakHashMap<Class<?>, Map<Integer, UnreadPdxType>>();
+  private final WeakConcurrentIdentityHashMap<Object, PdxUnreadData> unreadDataMap =
+      WeakConcurrentIdentityHashMap.make();
-  
+
-    if(DISABLE_TYPE_REGISTRY || disableTypeRegistry) {
+    if (DISABLE_TYPE_REGISTRY || disableTypeRegistry) {
- 
+
-  public void testClearTypeRegistry(){
+  public void testClearTypeRegistry() {
+
- 
+
+
-  
+
-    if(!cache.getPdxPersistent() 
-        || cache.getPdxDiskStore() == null 
+    if (!cache.getPdxPersistent() || cache.getPdxDiskStore() == null
-    for (EnumInfo ei: this.idToEnum.values()) {
+    for (EnumInfo ei : this.idToEnum.values()) {
-  
+
-    if(pdxType != null) {
+    if (pdxType != null) {
-    
+
-      if(pdxType != null) {
+      if (pdxType != null) {
-    
+
-      return this.localTypeIds.get(c);
+    return this.localTypeIds.get(c);
-  
+
-   * Returns the local type that should be used for deserializing
-   * blobs of the given typeId for the given local class.
-   * Returns null if no such local type exists.
+   * Returns the local type that should be used for deserializing blobs of the given typeId for the
+   * given local class. Returns null if no such local type exists.
+
-   * Create a type id for a type that may come locally, or
-   * from a remote member.
+   * Create a type id for a type that may come locally, or from a remote member.
-    if(oldType == null) {
+    if (oldType == null) {
-    } else if ( !oldType.equals(newType) ) {
-      Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType + " new type=" + newType);
+    } else if (!oldType.equals(newType)) {
+      Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType
+          + " new type=" + newType);
-    
+
-  
+
-    if(oldType == null) {
+    if (oldType == null) {
-    } else if ( !oldType.equals(newType) ) {
-      Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType + " new type=" + newType);
+    } else if (!oldType.equals(newType)) {
+      Assert.fail("Old type does not equal new type for the same id. oldType=" + oldType
+          + " new type=" + newType);
-    
+
-  
+
-    if(distributedTypeRegistry != null) {
+    if (distributedTypeRegistry != null) {
-  
+
-    if(cache.getPdxDiskStore() != null && dsi.getName().equals(cache.getPdxDiskStore())) {
+    if (cache.getPdxDiskStore() != null && dsi.getName().equals(cache.getPdxDiskStore())) {
-  
+
-  
+
-  
+
-  
-  private static final AtomicReference<PdxSerializer> pdxSerializer = new AtomicReference<PdxSerializer>(null);
-  private static final AtomicReference<AutoSerializableManager> asm = new AtomicReference<AutoSerializableManager>(null);
+
+  private static final AtomicReference<PdxSerializer> pdxSerializer =
+      new AtomicReference<PdxSerializer>(null);
+  private static final AtomicReference<AutoSerializableManager> asm =
+      new AtomicReference<AutoSerializableManager>(null);
-   * To fix bug 45116 we want any attempt to get the PdxSerializer after it has been closed to fail with an exception.
+   * To fix bug 45116 we want any attempt to get the PdxSerializer after it has been closed to fail
+   * with an exception.
-   * If the pdxSerializer is ever set to a non-null value then set this to true.
-   * It gets reset to false when init() is called.
-   * This was added to fix bug 45116.
+   * If the pdxSerializer is ever set to a non-null value then set this to true. It gets reset to
+   * false when init() is called. This was added to fix bug 45116.
-  
+
+
+
-  
+
+
+
-        asm.compareAndSet((AutoSerializableManager) ((ReflectionBasedAutoSerializer) oldValue).getManager(), null);
+        asm.compareAndSet(
+            (AutoSerializableManager) ((ReflectionBasedAutoSerializer) oldValue).getManager(),
+            null);
-    if(oldInfo == null) {
+    if (oldInfo == null) {
-    } else if ( !oldInfo.equals(newInfo) ) {
-      Assert.fail("Old enum does not equal new enum for the same id. oldEnum=" + oldInfo + " new enum=" + newInfo);
+    } else if (!oldInfo.equals(newInfo)) {
+      Assert.fail("Old enum does not equal new enum for the same id. oldEnum=" + oldInfo
+          + " new enum=" + newInfo);
-    if(oldInfo == null) {
+    if (oldInfo == null) {
-    } else if ( !oldInfo.equals(newInfo) ) {
-      Assert.fail("Old enum does not equal new enum for the same id. oldEnum=" + oldInfo + " newEnum=" + newInfo);
+    } else if (!oldInfo.equals(newInfo)) {
+      Assert.fail("Old enum does not equal new enum for the same id. oldEnum=" + oldInfo
+          + " newEnum=" + newInfo);
-      throw new PdxSerializationException("Could not find a PDX registration for the enum with id " + enumId);
+      throw new PdxSerializationException(
+          "Could not find a PDX registration for the enum with id " + enumId);
-        throw new PdxSerializationException("PDX enum field could not be read because the enum class could not be loaded", ex);
+        throw new PdxSerializationException(
+            "PDX enum field could not be read because the enum class could not be loaded", ex);
+
-    
+
-  
+
-   * Clear all of the cached PDX types in this registry. This method
-   * is used on a client when the server side distributed system
-   * is cycled
+   * Clear all of the cached PDX types in this registry. This method is used on a client when the
+   * server side distributed system is cycled
-    if(distributedTypeRegistry.isClient())  {
+    if (distributedTypeRegistry.isClient()) {
-      if(autoSerializer != null) {
+      if (autoSerializer != null) {
-    
+
+   * 
-  
+
+   * 
-  
+
-   * searches a field in different versions (PdxTypes) of a class in 
-   * the distributed type registry 
+   * searches a field in different versions (PdxTypes) of a class in the distributed type registry
-   * @param fieldName
-   *          the field to look for in the PdxTypes
-   * @param className
-   *          the PdxTypes for this class would be searched
+   * @param fieldName the field to look for in the PdxTypes
+   * @param className the PdxTypes for this class would be searched
-  
+
-      throw new PdxSerializationException(LocalizedStrings.Snapshot_PDX_CONFLICT_0_1.toLocalizedString(importedType, existing));
+      throw new PdxSerializationException(
+          LocalizedStrings.Snapshot_PDX_CONFLICT_0_1.toLocalizedString(importedType, existing));
-    
+
-      throw new PdxSerializationException(LocalizedStrings.Snapshot_PDX_CONFLICT_0_1.toLocalizedString(importedEnum, existing));
+      throw new PdxSerializationException(
+          LocalizedStrings.Snapshot_PDX_CONFLICT_0_1.toLocalizedString(importedEnum, existing));
-    
+
-    if(result == 0) {
-      //If this is the client, go ahead and return the number of cached types we have
+    if (result == 0) {
+      // If this is the client, go ahead and return the number of cached types we have

UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66