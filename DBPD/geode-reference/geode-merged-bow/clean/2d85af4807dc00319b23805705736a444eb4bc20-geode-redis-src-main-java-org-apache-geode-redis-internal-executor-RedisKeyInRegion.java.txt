GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

-import org.apache.geode.redis.internal.RegionProvider;
-class RedisKeyInRegion {
-  private Region localRegion;
-  private RegionProvider regionProvider;
+public class RedisKeyInRegion implements RedisKeyCommands {
+  protected final Region<ByteArrayWrapper, RedisData> region;
-  public RedisKeyInRegion(Region localRegion, RegionProvider regionProvider) {
-    this.localRegion = localRegion;
-    this.regionProvider = regionProvider;
+  @SuppressWarnings("unchecked")
+  public RedisKeyInRegion(Region region) {
+    this.region = region;
+  @Override
-    RedisData redisData = (RedisData) localRegion.get(key);
+    RedisData redisData = getRedisData(key);
-    boolean result = localRegion.remove(key) != null;
-    if (result) {
-      regionProvider.cancelKeyExpiration(key);
-    }
-    return result;
+    return region.remove(key) != null;
+  @Override
-    return localRegion.containsKey(key);
+    return getRedisData(key) != null;
+  }
+
+  @Override
+  public long pttl(ByteArrayWrapper key) {
+    RedisData redisData = getRedisData(key);
+    if (redisData == null) {
+      return -2;
+    }
+    return redisData.pttl(region, key);
+  }
+
+  @Override
+  public int pexpireat(ByteArrayWrapper key, long timestamp) {
+    RedisData redisData = getRedisData(key);
+    if (redisData == null) {
+      return 0;
+    }
+    long now = System.currentTimeMillis();
+    if (now >= timestamp) {
+      // already expired
+      del(key);
+    } else {
+      redisData.setExpirationTimestamp(region, key, timestamp);
+    }
+    return 1;
+  }
+
+  @Override
+  public int persist(ByteArrayWrapper key) {
+    RedisData redisData = getRedisData(key);
+    if (redisData == null) {
+      return 0;
+    }
+    return redisData.persist(region, key);
+  }
+
+  @Override
+  public String type(ByteArrayWrapper key) {
+    RedisData redisData = getRedisData(key);
+    if (redisData == null) {
+      return "none";
+    }
+    return redisData.getType().toString();
+  }
+
+  protected RedisData getRedisData(ByteArrayWrapper key) {
+    return getRedisDataOrDefault(key, null);
+  }
+
+  protected RedisData getRedisDataOrDefault(ByteArrayWrapper key, RedisData defaultValue) {
+    RedisData result = region.get(key);
+    if (result != null) {
+      if (result.hasExpired()) {
+        region.remove(key);
+        result = null;
+      }
+    }
+    if (result == null) {
+      return defaultValue;
+    } else {
+      return result;
+    }

INS83 INS43 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 UPD83 INS83 INS74 INS79 INS78 MOV83 MOV39 MOV42 MOV44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 UPD39 UPD42 INS44 INS78 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 MOV44 INS8 INS83 INS43 INS42 INS44 INS44 INS8 MOV43 INS43 INS43 UPD42 INS42 INS45 UPD42 INS42 MOV60 MOV25 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS39 INS42 INS60 INS25 INS60 MOV25 INS41 INS42 INS43 INS42 INS60 INS25 INS42 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS60 INS25 INS25 INS42 UPD42 MOV42 INS27 INS42 INS27 INS42 MOV43 INS59 INS27 INS8 INS32 INS42 INS43 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS34 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS59 INS27 INS8 INS32 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS27 INS8 INS8 UPD42 INS32 INS32 INS33 MOV32 MOV33 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS32 INS42 INS33 INS41 UPD42 UPD42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS32 INS42 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS33 INS41 MOV41 UPD42 UPD42 MOV42 MOV42 INS42 INS42 INS42 UPD42 INS42 INS42 INS38 INS42 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS34 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS21 INS21 INS32 INS7 INS42 INS42 INS42 INS42 INS33 DEL40 DEL26 DEL83 DEL42 DEL59 DEL23 DEL43 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL32 DEL11 DEL42 DEL42 DEL39 DEL42 DEL27 DEL59 DEL60 DEL8 DEL31