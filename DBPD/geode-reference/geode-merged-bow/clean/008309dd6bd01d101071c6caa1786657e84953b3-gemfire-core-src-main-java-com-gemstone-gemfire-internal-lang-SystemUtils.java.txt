Merge branch 'release/1.0.0-incubating.M1'

- * =========================================================================
- *  Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- *  This product is protected by U.S. and international copyright
- *  and intellectual property laws. Pivotal products are covered by
- *  more patents listed at http://www.pivotal.io/patents.
- * =========================================================================
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.io.File;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.StringTokenizer;
+
+  public static final String AZUL_JVM_VENDOR_NAME = "Azul";
+   * In the Azul JVM java.version does not have the "_NN" suffix. Instead it has the azul product version
+   * as the suffix like so "-zing_NN.NN.N.N". So on azul we instead use the "java.specification.version" sys prop
+   * and only compare the major and minor version numbers. All the stuff after the second "." in expectedVersion
+   * is ignored.
-   * @param expectedVersion an int value specifying the minimum expected version of the Java Runtime.
+   * @param expectedVersion an string value specifying the minimum expected version of the Java Runtime.
-  public static boolean isJavaVersionAtLeast(final String expectedVersion) {
-    String actualVersionDigits = StringUtils.getDigitsOnly(System.getProperty("java.version"));
+  public static boolean isJavaVersionAtLeast(String expectedVersion) {
+    String actualVersionDigits;
+    if (isAzulJVM()) {
+      actualVersionDigits = StringUtils.getDigitsOnly(System.getProperty("java.specification.version"));
+      int dotIdx = expectedVersion.indexOf('.');
+      if (dotIdx != -1) {
+        dotIdx = expectedVersion.indexOf('.', dotIdx+1);
+        if (dotIdx != -1) {
+          // strip off everything after the second dot.
+          expectedVersion = expectedVersion.substring(0, dotIdx);
+        }
+      }
+    } else {
+      actualVersionDigits = StringUtils.getDigitsOnly(System.getProperty("java.version"));
+    }
+  /**
+   * Utility method to determine whether the Java application process is executing on the Azul JVM.
+   *
+   * @return a boolean value indicating whether the Java application process is executing and running 
+   * on the Azul JVM.
+   * @see #isJvmVendor(String)
+   */
+  public static boolean isAzulJVM() {
+    return isJvmVendor(AZUL_JVM_VENDOR_NAME);
+  }
+  
+
+  /**
+   * Returns true if the specified location is in the JVM classpath. This may
+   * ignore additions to the classpath that are not reflected by the value in
+   * <code>System.getProperty("java.class.path")</code>.
+   * 
+   * @param location the directory or jar name to test for
+   * @return true if location is in the JVM classpath
+   * @throws MalformedURLException
+   */
+  public static boolean isInClassPath(String location) throws MalformedURLException {
+    return isInClassPath(new File(location).toURI().toURL());
+  }
+  
+  /**
+   * Returns true if the specified location is in the JVM classpath. This may
+   * ignore additions to the classpath that are not reflected by the value in
+   * <code>System.getProperty("java.class.path")</code>.
+   * 
+   * @param location the directory or jar URL to test for
+   * @return true if location is in the JVM classpath
+   * @throws MalformedURLException
+   */
+  public static boolean isInClassPath(URL location) throws MalformedURLException {
+    String classPath = System.getProperty("java.class.path");
+    StringTokenizer st = new StringTokenizer(classPath, File.pathSeparator);
+    while (st.hasMoreTokens()) {
+      String path =st.nextToken();
+      if (location.equals(new File(path).toURI().toURL())) {
+        return true;
+      }
+    }
+    return false;
+  }
+  

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS43 INS8 INS42 INS42 INS45 MOV43 INS25 INS65 INS65 INS65 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS41 INS65 INS65 INS65 INS65 INS43 INS42 INS42 INS60 INS60 INS61 INS41 INS66 INS66 INS66 INS66 UPD66 MOV43 INS32 INS8 INS8 INS66 INS66 INS66 INS68 INS32 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS9 INS42 INS21 INS60 INS25 INS21 INS42 INS69 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS60 INS25 INS7 INS39 INS59 INS27 INS8 INS7 INS43 INS32 INS42 INS42 INS42 INS45 INS43 INS42 INS40 INS43 INS59 INS32 INS8 INS42 INS32 INS42 INS32 INS42 INS38 INS21 INS25 INS42 MOV32 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS41 INS42 INS42 INS32 INS42 INS42 INS13 INS34 INS7 INS27 INS8 INS43 INS42 INS42 INS42 INS32 INS42 INS9 INS42 INS42 INS45 INS42 INS32 INS42 INS38 INS21 INS42 INS14 INS42 INS42 INS42 INS13 INS27 INS34 INS7 INS43 INS42 INS42 INS34 INS42 INS32 INS42 INS42 INS42 INS34 INS42 DEL83