Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-    if ( type.equals("junit") 
-        || type.equals("java")
-        || type.equals("query") 
+    if (type.equals("junit") || type.equals("java") || type.equals("query")
-    }else {
+    } else {
-    }    
+    }
+
-    //Exclude this since the only tests with securty enabled, expect to see 
-    //these and if they don't then the test fails
+    // Exclude this since the only tests with securty enabled, expect to see
+    // these and if they don't then the test fails
-    expected.add(Pattern.compile("ExpectedString")); 
-    expected.add(Pattern.compile("ExpectedStrings")); 
+    expected.add(Pattern.compile("ExpectedString"));
+    expected.add(Pattern.compile("ExpectedStrings"));
-    expected.add(Pattern.compile("PassWithExpectedSevereJUnitTest")); 
-    expected.add(Pattern.compile("FailWithErrorInOutputJUnitTest")); 
-    expected.add(Pattern.compile("PassWithExpectedErrorJUnitTest")); 
+    expected.add(Pattern.compile("PassWithExpectedSevereJUnitTest"));
+    expected.add(Pattern.compile("FailWithErrorInOutputJUnitTest"));
+    expected.add(Pattern.compile("PassWithExpectedErrorJUnitTest"));
-    
-    expected.add(Pattern.compile("org.apache.geode.management.DependenciesNotFoundException")); 
-    //expected.add(Pattern.compile("Java version older than"));
-    //expected.add(Pattern.compile("Minimum system requirements not met. Unexpected behavior may result in additional errors."));
-    
-    if ( type.equals("junit") || type.equals("java") || type.equals("query")) {
+    expected.add(Pattern.compile("org.apache.geode.management.DependenciesNotFoundException"));
+
+    // expected.add(Pattern.compile("Java version older than"));
+    // expected.add(Pattern.compile("Minimum system requirements not met. Unexpected behavior may
+    // result in additional errors."));
+
+    if (type.equals("junit") || type.equals("java") || type.equals("query")) {
-      expected.add(Pattern.compile("signal count"));  
-      //Remove when davidw fixes
-      expected.add(Pattern.compile("Expected")); 
-      //below here for gfx unit tests
+      expected.add(Pattern.compile("signal count"));
+      // Remove when davidw fixes
+      expected.add(Pattern.compile("Expected"));
+      // below here for gfx unit tests
-    } else if ( type.equals("dunit")) {
+    } else if (type.equals("dunit")) {
-      expected.add(Pattern.compile("WARNING: Failed to check connection: java.net.ConnectException: Connection refused"));
-      expected.add(Pattern.compile("WARNING: Failed to call the method close..:java.rmi.ConnectException:"));
-      expected.add(Pattern.compile("WARNING: Failed to restart: java.rmi.NoSuchObjectException: no such object in table"));
-      expected.add(Pattern.compile("WARNING: Failed to restart: java.rmi.ConnectException: Connection refused to host: .* nested exception is:"));
-      expected.add(Pattern.compile("UnitTests terminating abnormally after a client had a fatal task error"));
+      expected.add(Pattern.compile(
+          "WARNING: Failed to check connection: java.net.ConnectException: Connection refused"));
+      expected.add(
+          Pattern.compile("WARNING: Failed to call the method close..:java.rmi.ConnectException:"));
+      expected.add(Pattern.compile(
+          "WARNING: Failed to restart: java.rmi.NoSuchObjectException: no such object in table"));
+      expected.add(Pattern.compile(
+          "WARNING: Failed to restart: java.rmi.ConnectException: Connection refused to host: .* nested exception is:"));
+      expected.add(Pattern
+          .compile("UnitTests terminating abnormally after a client had a fatal task error"));
-      expected.add(Pattern.compile("java.lang.IllegalArgumentException: Sample timestamp must be greater than previous timestamp"));
-      //The following 2 strings are ignored due to bug 52042
+      expected.add(Pattern.compile(
+          "java.lang.IllegalArgumentException: Sample timestamp must be greater than previous timestamp"));
+      // The following 2 strings are ignored due to bug 52042
-    } else if ( type.equals("smoke")) {
+    } else if (type.equals("smoke")) {
-    } else if ( type.equals("perf")) {
+    } else if (type.equals("perf")) {
-    } else if ( type.equals("moresmoke")) {
+    } else if (type.equals("moresmoke")) {

