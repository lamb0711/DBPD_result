GEODE-7157: SSLConfig&SSLConf..Factory thread-safe (#4285)

SSLConfig and SSLConfigFactory have been changed to be
thread-safe. SSLConfig is immutable now.
-import java.util.HashMap;
-import java.util.Map;
-import org.apache.geode.GemFireConfigException;
-  private DistributionConfig distributionConfig = null;
-  private Map<SecurableCommunicationChannel, SSLConfig> registeredSSLConfig = new HashMap<>();
-  private DistributionConfig getDistributionConfig() {
-    if (distributionConfig == null) {
-      throw new GemFireConfigException("SSL Configuration requires a valid distribution config.");
-    }
-    return distributionConfig;
-  }
-
-  public static void setDistributionConfig(final DistributionConfig distributionConfig) {
-    if (distributionConfig == null) {
-      throw new GemFireConfigException("SSL Configuration requires a valid distribution config.");
-    }
-    getInstance().distributionConfig = distributionConfig;
-  }
-
-  /**
-   * @deprecated since GEODE 1.3, use #{getSSLConfigForComponent({@link DistributionConfig} ,
-   *             {@link SecurableCommunicationChannel})} instead
-   */
-  @Deprecated
-  public static SSLConfig getSSLConfigForComponent(
-      SecurableCommunicationChannel sslEnabledComponent) {
-    SSLConfig sslConfig = getInstance().getRegisteredSSLConfigForComponent(sslEnabledComponent);
-    if (sslConfig == null) {
-      sslConfig = getInstance().createSSLConfigForComponent(sslEnabledComponent);
-      getInstance().registeredSSLConfigForComponent(sslEnabledComponent, sslConfig);
-    }
-    return sslConfig;
-  }
-
-  private synchronized void registeredSSLConfigForComponent(
-      final SecurableCommunicationChannel sslEnabledComponent, final SSLConfig sslConfig) {
-    registeredSSLConfig.put(sslEnabledComponent, sslConfig);
-  }
-
-  private SSLConfig createSSLConfigForComponent(
-      final SecurableCommunicationChannel sslEnabledComponent) {
-    return createSSLConfigForComponent(getDistributionConfig(), sslEnabledComponent);
-  }
-
-    SSLConfig sslConfig = createSSLConfig(distributionConfig, sslEnabledComponent);
+    SSLConfig.Builder sslConfigBuilder =
+        createSSLConfigBuilder(distributionConfig, sslEnabledComponent);
-      sslConfig = configureLegacyClusterSSL(distributionConfig, sslConfig);
+      configureLegacyClusterSSL(distributionConfig, sslConfigBuilder);
-    sslConfig.setSecurableCommunicationChannel(sslEnabledComponent);
+    sslConfigBuilder.setSecurableCommunicationChannel(sslEnabledComponent);
-        // Create a SSLConfig separate for HTTP Service. As the require-authentication might differ
-        createSSLConfigForComponent(distributionConfig, SecurableCommunicationChannel.WEB);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getClusterSSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getClusterSSLAlias());
-          sslConfig = configureLegacyClusterSSL(distributionConfig, sslConfig);
+          configureLegacyClusterSSL(distributionConfig, sslConfigBuilder);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getLocatorSSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getLocatorSSLAlias());
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getServerSSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getServerSSLAlias());
-          sslConfig = configureLegacyServerSSL(distributionConfig, sslConfig);
+          configureLegacyServerSSL(distributionConfig, sslConfigBuilder);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getGatewaySSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getGatewaySSLAlias());
-          sslConfig = configureLegacyGatewaySSL(distributionConfig, sslConfig);
+          configureLegacyGatewaySSL(distributionConfig, sslConfigBuilder);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getHTTPServiceSSLAlias());
-          sslConfig.setRequireAuth(distributionConfig.getSSLWebRequireAuthentication());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getHTTPServiceSSLAlias());
+          sslConfigBuilder.setRequireAuth(distributionConfig.getSSLWebRequireAuthentication());
-          sslConfig = configureLegacyHttpServiceSSL(distributionConfig, sslConfig);
+          configureLegacyHttpServiceSSL(distributionConfig, sslConfigBuilder);
-          sslConfig = setAliasForComponent(sslConfig, distributionConfig.getJMXSSLAlias());
+          setAliasForComponent(sslConfigBuilder, distributionConfig.getJMXSSLAlias());
-          sslConfig = configureLegacyJMXSSL(distributionConfig, sslConfig);
+          configureLegacyJMXSSL(distributionConfig, sslConfigBuilder);
-    configureSSLPropertiesFromSystemProperties(sslConfig);
-    return sslConfig;
+    configureSSLPropertiesFromSystemProperties(sslConfigBuilder);
+    return sslConfigBuilder.build();
-  private SSLConfig setAliasForComponent(final SSLConfig sslConfig, final String clusterSSLAlias) {
+  private SSLConfig.Builder setAliasForComponent(SSLConfig.Builder sslConfigBuilder,
+      final String clusterSSLAlias) {
-      sslConfig.setAlias(clusterSSLAlias);
+      sslConfigBuilder.setAlias(clusterSSLAlias);
-    return sslConfig;
+    return sslConfigBuilder;
-  private SSLConfig createSSLConfig(final DistributionConfig distributionConfig,
+  private SSLConfig.Builder createSSLConfigBuilder(final DistributionConfig distributionConfig,
-    SSLConfig sslConfig = new SSLConfig();
-    sslConfig.setCiphers(distributionConfig.getSSLCiphers());
-    sslConfig
+    SSLConfig.Builder sslConfigBuilder = new SSLConfig.Builder();
+    sslConfigBuilder.setCiphers(distributionConfig.getSSLCiphers());
+    sslConfigBuilder
-    sslConfig
+    sslConfigBuilder
-    sslConfig.setKeystore(distributionConfig.getSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getSSLTrustStoreType());
-    sslConfig.setProtocols(distributionConfig.getSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getSSLRequireAuthentication());
-    sslConfig.setAlias(distributionConfig.getSSLDefaultAlias());
-    sslConfig.setUseDefaultSSLContext(distributionConfig.getSSLUseDefaultContext());
+    sslConfigBuilder.setKeystore(distributionConfig.getSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getSSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getSSLTrustStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getSSLRequireAuthentication());
+    sslConfigBuilder.setAlias(distributionConfig.getSSLDefaultAlias());
+    sslConfigBuilder.setUseDefaultSSLContext(distributionConfig.getSSLUseDefaultContext());
-    return sslConfig;
+    return sslConfigBuilder;
-   * Configure a sslConfig for the cluster using the legacy configuration
+   * Configure a SSLConfig.Builder for the cluster using the legacy configuration
-   * @return A sslConfig object describing the ssl config for the server component
+   * @return A SSLConfig.Builder object describing the ssl config for the server component
-  private SSLConfig configureLegacyClusterSSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getClusterSSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getClusterSSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getClusterSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getClusterSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getClusterSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getClusterSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getClusterSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getClusterSSLKeyStoreType());
-    sslConfig.setProtocols(distributionConfig.getClusterSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getClusterSSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyClusterSSL(final DistributionConfig distributionConfig,
+      SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getClusterSSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getClusterSSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getClusterSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getClusterSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getClusterSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getClusterSSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getClusterSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getClusterSSLKeyStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getClusterSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getClusterSSLRequireAuthentication());
+    return sslConfigBuilder;
-   * Configure a sslConfig for the server using the legacy configuration
+   * Configure a SSLConfig.Builder for the server using the legacy configuration
-   * @return A sslConfig object describing the ssl config for the server component
+   * @return A SSLConfig.Builder object describing the ssl config for the server component
-  private SSLConfig configureLegacyServerSSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getServerSSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getServerSSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getServerSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getServerSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getServerSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getServerSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getServerSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getServerSSLKeyStoreType());
-    sslConfig.setProtocols(distributionConfig.getServerSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getServerSSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyServerSSL(final DistributionConfig distributionConfig,
+      final SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getServerSSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getServerSSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getServerSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getServerSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getServerSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getServerSSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getServerSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getServerSSLKeyStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getServerSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getServerSSLRequireAuthentication());
+    return sslConfigBuilder;
-   * Configure a sslConfig for the jmx using the legacy configuration
+   * Configure a SSLConfig.Builder for the jmx using the legacy configuration
-   * @return A sslConfig object describing the ssl config for the jmx component
+   * @return A SSLConfig.Builder object describing the ssl config for the jmx component
-  private SSLConfig configureLegacyJMXSSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getJmxManagerSSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getJmxManagerSSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getJmxManagerSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getJmxManagerSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getJmxManagerSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getJmxManagerSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getJmxManagerSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getJmxManagerSSLKeyStoreType());
-    sslConfig.setProtocols(distributionConfig.getJmxManagerSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getJmxManagerSSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyJMXSSL(final DistributionConfig distributionConfig,
+      SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getJmxManagerSSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getJmxManagerSSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getJmxManagerSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getJmxManagerSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getJmxManagerSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getJmxManagerSSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getJmxManagerSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getJmxManagerSSLKeyStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getJmxManagerSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getJmxManagerSSLRequireAuthentication());
+    return sslConfigBuilder;
-   * Configure a sslConfig for the gateway using the legacy configuration
+   * Configure a SSLConfig.Builder for the gateway using the legacy configuration
-  private SSLConfig configureLegacyGatewaySSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getGatewaySSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getGatewaySSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getGatewaySSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getGatewaySSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getGatewaySSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getGatewaySSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getGatewaySSLTrustStorePassword());
-    sslConfig.setProtocols(distributionConfig.getGatewaySSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getGatewaySSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyGatewaySSL(final DistributionConfig distributionConfig,
+      SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getGatewaySSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getGatewaySSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getGatewaySSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getGatewaySSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getGatewaySSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getGatewaySSLTrustStore());
+    sslConfigBuilder.setTruststorePassword(distributionConfig.getGatewaySSLTrustStorePassword());
+    sslConfigBuilder.setProtocols(distributionConfig.getGatewaySSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getGatewaySSLRequireAuthentication());
+    return sslConfigBuilder;
-   * Configure a sslConfig for the http service using the legacy configuration
+   * Configure a SSLConfig.Builder for the http service using the legacy configuration
-   * @return A sslConfig object describing the ssl config for the http service component
+   * @return A SSLConfig.Builder object describing the ssl config for the http service component
-  private SSLConfig configureLegacyHttpServiceSSL(final DistributionConfig distributionConfig,
-      final SSLConfig sslConfig) {
-    sslConfig.setCiphers(distributionConfig.getHttpServiceSSLCiphers());
-    sslConfig.setEnabled(distributionConfig.getHttpServiceSSLEnabled());
-    sslConfig.setKeystore(distributionConfig.getHttpServiceSSLKeyStore());
-    sslConfig.setKeystorePassword(distributionConfig.getHttpServiceSSLKeyStorePassword());
-    sslConfig.setKeystoreType(distributionConfig.getHttpServiceSSLKeyStoreType());
-    sslConfig.setTruststore(distributionConfig.getHttpServiceSSLTrustStore());
-    sslConfig.setTruststorePassword(distributionConfig.getHttpServiceSSLTrustStorePassword());
-    sslConfig.setTruststoreType(distributionConfig.getHttpServiceSSLKeyStoreType());
-    sslConfig.setProtocols(distributionConfig.getHttpServiceSSLProtocols());
-    sslConfig.setRequireAuth(distributionConfig.getHttpServiceSSLRequireAuthentication());
-    return sslConfig;
+  private SSLConfig.Builder configureLegacyHttpServiceSSL(
+      final DistributionConfig distributionConfig,
+      SSLConfig.Builder sslConfigBuilder) {
+    sslConfigBuilder.setCiphers(distributionConfig.getHttpServiceSSLCiphers());
+    sslConfigBuilder.setEnabled(distributionConfig.getHttpServiceSSLEnabled());
+    sslConfigBuilder.setKeystore(distributionConfig.getHttpServiceSSLKeyStore());
+    sslConfigBuilder.setKeystorePassword(distributionConfig.getHttpServiceSSLKeyStorePassword());
+    sslConfigBuilder.setKeystoreType(distributionConfig.getHttpServiceSSLKeyStoreType());
+    sslConfigBuilder.setTruststore(distributionConfig.getHttpServiceSSLTrustStore());
+    sslConfigBuilder
+        .setTruststorePassword(distributionConfig.getHttpServiceSSLTrustStorePassword());
+    sslConfigBuilder.setTruststoreType(distributionConfig.getHttpServiceSSLKeyStoreType());
+    sslConfigBuilder.setProtocols(distributionConfig.getHttpServiceSSLProtocols());
+    sslConfigBuilder.setRequireAuth(distributionConfig.getHttpServiceSSLRequireAuthentication());
+    return sslConfigBuilder;
-  private SSLConfig configureSSLPropertiesFromSystemProperties(SSLConfig sslConfig) {
-    return configureSSLPropertiesFromSystemProperties(sslConfig, null);
+  private SSLConfig.Builder configureSSLPropertiesFromSystemProperties(
+      SSLConfig.Builder sslConfigBuilder) {
+    return configureSSLPropertiesFromSystemProperties(sslConfigBuilder, null);
-  private SSLConfig configureSSLPropertiesFromSystemProperties(SSLConfig sslConfig,
+  private SSLConfig.Builder configureSSLPropertiesFromSystemProperties(
+      SSLConfig.Builder sslConfigBuilder,
-    if (StringUtils.isEmpty(sslConfig.getKeystore())) {
-      sslConfig.setKeystore(getValueFromSystemProperties(properties, JAVAX_KEYSTORE));
+    if (StringUtils.isEmpty(sslConfigBuilder.getKeystore())) {
+      sslConfigBuilder.setKeystore(getValueFromSystemProperties(properties, JAVAX_KEYSTORE));
-    if (StringUtils.isEmpty(sslConfig.getKeystoreType())) {
-      sslConfig.setKeystoreType(getValueFromSystemProperties(properties, JAVAX_KEYSTORE_TYPE));
+    if (StringUtils.isEmpty(sslConfigBuilder.getKeystoreType())) {
+      sslConfigBuilder
+          .setKeystoreType(getValueFromSystemProperties(properties, JAVAX_KEYSTORE_TYPE));
-    if (StringUtils.isEmpty(sslConfig.getKeystorePassword())) {
-      sslConfig
+    if (StringUtils.isEmpty(sslConfigBuilder.getKeystorePassword())) {
+      sslConfigBuilder
-    if (StringUtils.isEmpty(sslConfig.getTruststore())) {
-      sslConfig.setTruststore(getValueFromSystemProperties(properties, JAVAX_TRUSTSTORE));
+    if (StringUtils.isEmpty(sslConfigBuilder.getTruststore())) {
+      sslConfigBuilder.setTruststore(getValueFromSystemProperties(properties, JAVAX_TRUSTSTORE));
-    if (StringUtils.isEmpty(sslConfig.getTruststorePassword())) {
-      sslConfig.setTruststorePassword(
+    if (StringUtils.isEmpty(sslConfigBuilder.getTruststorePassword())) {
+      sslConfigBuilder.setTruststorePassword(
-    if (StringUtils.isEmpty(sslConfig.getTruststoreType())) {
-      sslConfig.setTruststoreType(getValueFromSystemProperties(properties, JAVAX_TRUSTSTORE_TYPE));
+    if (StringUtils.isEmpty(sslConfigBuilder.getTruststoreType())) {
+      sslConfigBuilder
+          .setTruststoreType(getValueFromSystemProperties(properties, JAVAX_TRUSTSTORE_TYPE));
-    return sslConfig;
+    return sslConfigBuilder;
-  private SSLConfig getRegisteredSSLConfigForComponent(
-      final SecurableCommunicationChannel sslEnabledComponent) {
-    return registeredSSLConfig.get(sslEnabledComponent);
-  }
-
-  public static void close() {
-    getInstance().clearSSLConfigForAllComponents();
-    getInstance().distributionConfig = null;
-  }
-
-  private void clearSSLConfigForAllComponents() {
-    registeredSSLConfig.clear();
-  }
-
-    SSLConfig sslConfig = new SSLConfig();
-    sslConfig.setAlias(alias);
-    sslConfig.setCiphers(ciphers);
-    sslConfig.setProtocols(protocols);
-    sslConfig.setRequireAuth(needClientAuth);
-    sslConfig.setEnabled(useSSL);
+    SSLConfig.Builder sslConfigBuilder = new SSLConfig.Builder();
+    sslConfigBuilder.setAlias(alias);
+    sslConfigBuilder.setCiphers(ciphers);
+    sslConfigBuilder.setProtocols(protocols);
+    sslConfigBuilder.setRequireAuth(needClientAuth);
+    sslConfigBuilder.setEnabled(useSSL);
-    sslConfig =
-        getInstance().configureSSLPropertiesFromSystemProperties(sslConfig, gfsecurityProps);
+    getInstance().configureSSLPropertiesFromSystemProperties(sslConfigBuilder, gfsecurityProps);
-    return sslConfig;
+    return sslConfigBuilder.build();

UPD43 UPD43 UPD42 UPD43 MOV21 MOV21 UPD43 MOV21 MOV21 UPD43 MOV21 MOV21 UPD43 UPD43 MOV21 MOV21 UPD43 UPD43 INS40 UPD43 UPD42 INS40 MOV65 INS40 UPD43 UPD42 INS40 UPD43 UPD42 MOV65 INS40 UPD43 UPD42 INS40 UPD43 UPD42 MOV65 INS40 UPD43 UPD42 INS40 UPD43 UPD42 INS40 UPD43 UPD42 MOV21 INS41 UPD43 INS32 INS40 UPD42 UPD43 UPD42 UPD66 UPD66 INS40 UPD42 UPD66 UPD66 INS40 UPD42 UPD66 UPD66 INS40 UPD42 UPD66 INS40 UPD42 UPD66 UPD66 INS40 UPD42 INS40 INS40 UPD42 UPD43 INS32 INS40 UPD42 UPD42 UPD42 INS42 INS42 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 MOV42 MOV42 UPD42 MOV42 UPD42 INS40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 MOV32 INS32 MOV32 MOV32 INS32 MOV32 INS32 MOV32 INS32 MOV32 INS32 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL7 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL7 DEL42 DEL32 DEL7 DEL42 DEL7 DEL42 DEL7 DEL42 DEL32 DEL7 DEL42 DEL7 DEL42 DEL32 DEL7 DEL42 DEL7 DEL42 DEL32 DEL7 DEL42 DEL7 DEL42 DEL32 DEL7 DEL42 DEL42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL42 DEL83 DEL42 DEL42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL32 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41