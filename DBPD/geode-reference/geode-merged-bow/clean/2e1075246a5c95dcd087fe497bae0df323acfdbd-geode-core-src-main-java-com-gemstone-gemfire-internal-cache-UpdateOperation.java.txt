Merge branch 'release/1.0.0-incubating.M3'

+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
-    if (CachedDeserializableFactory.preferObject() || ev.hasDelta()) {
-      m.deserializationPolicy = DESERIALIZATION_POLICY_EAGER;
-    } else {
-      m.deserializationPolicy = DESERIALIZATION_POLICY_LAZY;
-    }
+    m.deserializationPolicy = DESERIALIZATION_POLICY_LAZY;
+    @Retained
-      if (newValue == null
-          && deserializationPolicy != DESERIALIZATION_POLICY_EAGER) {
+      if (newValue == null) {
-        case DESERIALIZATION_POLICY_EAGER:
-          event.setNewValue(newValueObj);
-          break;
+    @Retained
-
-      if (rgn.keyRequiresRegionContext()) {
-        ((KeyWithRegionContext)this.key).setRegionContext(rgn);
-      }
-      EntryEventImpl result = EntryEventImpl.create(rgn, getOperation(), this.key,
+      @Retained EntryEventImpl result = EntryEventImpl.create(rgn, getOperation(), this.key,
-        if (this.deserializationPolicy
-            == DistributedCacheOperation.DESERIALIZATION_POLICY_EAGER) {
-          this.newValueObj = DataSerializer.readObject(in);
-        }
-        else {
-          this.newValue = DataSerializer.readByteArray(in);
-        }
+        this.newValue = DataSerializer.readByteArray(in);
-          // TODO OFFHEAP MERGE: add a writeValue that will cache in the event like so:
-          //byte[] newValueBytes = BlobHelper.serializeToBlob(this.newValueObj);
-          //this.event.setCachedSerializedNewValue(newValueBytes);
-        if (this.deserializationPolicy ==
-          DistributedCacheOperation.DESERIALIZATION_POLICY_EAGER) {
-          valueObj = this.newValueObj;
-        }
-        else {
-          valueBytes = EntryEventImpl.serialize(this.newValueObj);
-        }
+        valueBytes = EntryEventImpl.serialize(this.newValueObj);
+    @Retained
-
-      if (rgn.keyRequiresRegionContext()) {
-        ((KeyWithRegionContext)this.key).setRegionContext(rgn);
-      }
-      EntryEventImpl ev = EntryEventImpl.create(rgn, getOperation(), this.key,
+      @Retained EntryEventImpl ev = EntryEventImpl.create(rgn, getOperation(), this.key,

INS26 INS40 MOV21 INS78 INS78 INS78 INS42 INS42 MOV25 INS42 MOV27 INS78 MOV32 MOV8 MOV8 MOV8 INS78 INS42 INS25 INS42 MOV27 MOV8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL40 DEL42 DEL7 DEL21 DEL8 DEL8 DEL25 DEL42 DEL42 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL10 DEL49 DEL42 DEL42 DEL32 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL40 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL52 DEL42 DEL22 DEL40 DEL27 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL52 DEL42 DEL22 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25