GEODE-2593: add port range to AvailablePortHelper to fix testUDPPortRange

+import static org.apache.geode.distributed.internal.DistributionConfig.*;
+import static org.apache.geode.internal.AvailablePort.*;
+
+import java.net.InetAddress;
-          AvailablePort.getAddress(AvailablePort.SOCKET), useMembershipPortRange));
+          getAddress(AvailablePort.SOCKET), useMembershipPortRange));
+  public static int[] getRandomAvailableTCPPortRange(final int count) {
+    return getRandomAvailableTCPPortRange(count, false);
+  }
+
+  public static int[] getRandomAvailableTCPPortRange(final int count,
+      final boolean useMembershipPortRange) {
+    List<Keeper> list = getRandomAvailableTCPPortRangeKeepers(count, useMembershipPortRange);
+    int[] ports = new int[list.size()];
+    int i = 0;
+    for (Keeper k : list) {
+      ports[i] = k.getPort();
+      k.release();
+      i++;
+    }
+    return ports;
+  }
+
+  public static List<Keeper> getRandomAvailableTCPPortRangeKeepers(final int count) {
+    return getRandomAvailableTCPPortRangeKeepers(count, false);
+  }
+
+  public static List<Keeper> getRandomAvailableTCPPortRangeKeepers(final int count,
+      final boolean useMembershipPortRange) {
+    List<Keeper> result = new ArrayList<>();
+
+    InetAddress addr = getAddress(AvailablePort.SOCKET);
+
+    int lowerBound =
+        useMembershipPortRange ? DEFAULT_MEMBERSHIP_PORT_RANGE[0] : AVAILABLE_PORTS_LOWER_BOUND;
+
+    int upperBound =
+        useMembershipPortRange ? DEFAULT_MEMBERSHIP_PORT_RANGE[1] : AVAILABLE_PORTS_UPPER_BOUND;
+
+    for (int i = lowerBound; i <= upperBound; i++) {
+      for (int j = 0; j < count && ((i + j) <= upperBound); j++) {
+        int port = i + j;
+        Keeper keeper = isPortKeepable(port, SOCKET, addr);
+        if (keeper == null) {
+          releaseKeepers(result);
+          result.clear();
+          break;
+        }
+        result.add(keeper);
+        if (result.size() == count) {
+          return result;
+        }
+      }
+    }
+
+    return result;
+  }
+
+  private static void releaseKeepers(List<Keeper> keepers) {
+    for (Keeper keeper : keepers) {
+      keeper.release();
+    }
+  }
+

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS5 INS42 INS44 INS8 INS83 INS83 INS5 INS42 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS39 INS85 INS83 INS39 INS42 INS41 INS39 INS85 INS83 INS39 INS42 INS83 INS39 INS42 INS60 INS60 INS60 INS70 INS41 INS43 INS43 INS83 INS39 INS42 INS41 INS43 INS43 INS83 INS39 INS42 INS83 INS39 INS42 INS60 INS60 INS60 INS60 INS24 INS41 INS74 INS42 INS70 INS32 INS74 INS59 INS5 INS59 INS39 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS74 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS43 INS44 INS42 INS8 INS42 INS42 INS9 INS43 INS43 INS42 INS32 INS39 INS85 INS42 INS3 INS42 INS34 INS43 INS42 INS21 INS21 INS21 INS42 INS42 INS9 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS16 INS42 INS16 INS39 INS59 INS42 INS42 INS42 INS24 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS5 INS32 INS42 INS7 INS32 INS37 INS42 INS42 INS74 INS42 INS40 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS42 INS58 INS27 INS37 INS8 INS42 INS32 INS39 INS85 INS42 INS42 INS2 INS32 INS42 INS42 INS42 INS43 INS42 INS34 INS42 INS34 INS39 INS59 INS27 INS36 INS42 INS60 INS60 INS25 INS21 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS27 INS39 INS59 INS43 INS59 INS27 INS8 INS32 INS27 INS8 INS36 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS10 INS42 INS42 INS42 INS32 INS42 INS41 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42