Merge branch 'release/1.8.0'

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-    if (logger.isDebugEnabled()) {
+    if (logger.isDebugEnabled() && !rgn.isInternalRegion()) {
-                LocalizedStrings.AbstractRegionEntry_AN_IOEXCEPTION_WAS_THROWN_WHILE_SERIALIZING
-                    .toLocalizedString(),
+                "An IOException was thrown while serializing.",
-            LocalizedStrings.AbstractRegionEntry_AN_IOEXCEPTION_WAS_THROWN_WHILE_SERIALIZING
-                .toLocalizedString(),
+            "An IOException was thrown while serializing.",
-        LocalizedStrings.AbstractRegionEntry_CANNOT_GET_VALUE_ON_DISK_FOR_A_REGION_THAT_DOES_NOT_ACCESS_THE_DISK
-            .toLocalizedString());
+        "Cannot get value on disk for a region that does not access the disk.");
-        LocalizedStrings.AbstractRegionEntry_CANNOT_GET_VALUE_ON_DISK_FOR_A_REGION_THAT_DOES_NOT_ACCESS_THE_DISK
-            .toLocalizedString());
+        "Cannot get value on disk for a region that does not access the disk.");
-        LocalizedStrings.AbstractRegionEntry_CANNOT_GET_VALUE_ON_DISK_FOR_A_REGION_THAT_DOES_NOT_ACCESS_THE_DISK
-            .toLocalizedString());
+        "Cannot get value on disk for a region that does not access the disk.");
-                  LocalizedStrings.AbstractRegionEntry_DURING_THE_GII_PUT_OF_ENTRY_THE_REGION_GOT_CLEARED_SO_ABORTING_THE_OPERATION
-                      .toLocalizedString());
+                  "During the GII put of entry, the region got cleared so aborting the operation");
-              LocalizedStrings.AbstractRegionEntry_THE_CURRENT_VALUE_WAS_NOT_EQUAL_TO_EXPECTED_VALUE
-                  .toLocalizedString());
+              "The current value was not equal to expected value.");
-          // if the reused guy has a refcount then need to inc it
+          // if the reused StoredObject has a refcount then need to increment it
-          tagVersion += 0x1000000L;
+          tagVersion += 0x1000000;
-          stampVersion += 0x1000000L;
+          stampVersion += 0x1000000;
-    if (tagDsid == stampDsid || stampDsid == -1) {
+    // According to GatewayConflictResolver's java doc, it will only be used on tag with different
+    // distributed system id than stamp's
+    if (stampDsid == -1) {
+    } else if (tagDsid == stampDsid) {
+      if (tagTime >= stampTime) {
+        return true;
+      } else {
+        throw new ConcurrentCacheModificationException("conflicting WAN event detected");
+      }
-        logger.error(LocalizedMessage
-            .create(LocalizedStrings.LocalRegion_EXCEPTION_OCCURRED_IN_CONFLICTRESOLVER), t);
+        logger.error("Exception occurred in GatewayConflictResolver", t);

INS27 MOV27 INS25 MOV32 INS38 INS45 INS45 INS45 MOV27 INS8 INS32 INS25 INS42 INS42 UPD27 MOV27 INS8 INS8 INS42 INS42 INS41 INS53 INS9 INS14 INS43 INS45 INS45 INS45 UPD34 UPD34 INS42 INS45 INS45 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32