Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An authorization implementation for testing that checks for authorization
- * information in post-operation filtering, removes that field and allows the
- * operation only if the authorization field in {@link ObjectWithAuthz} object
- * allows the current principal.
+ * An authorization implementation for testing that checks for authorization information in
+ * post-operation filtering, removes that field and allows the operation only if the authorization
+ * field in {@link ObjectWithAuthz} object allows the current principal.
-    Instantiator.register(new Instantiator(ObjectWithAuthz.class,
-        ObjectWithAuthz.CLASSID) {
+    Instantiator.register(new Instantiator(ObjectWithAuthz.class, ObjectWithAuthz.CLASSID) {
-  public void init(Principal principal, DistributedMember remoteMember,
-      Cache cache) throws NotAuthorizedException {
+  public void init(Principal principal, DistributedMember remoteMember, Cache cache)
+      throws NotAuthorizedException {
-    }
-    catch (Exception ex) {
+    } catch (Exception ex) {
-        LocalizedStrings.FilterPostAuthorization_FILTERPOSTAUTHORIZATION_AN_EXCEPTION_WAS_THROWN_WHILE_TRYING_TO_DESERIALIZE,
-        ex);
+          LocalizedStrings.FilterPostAuthorization_FILTERPOSTAUTHORIZATION_AN_EXCEPTION_WAS_THROWN_WHILE_TRYING_TO_DESERIALIZE,
+          ex);
-      HeapDataOutputStream hos = new HeapDataOutputStream(
-          serializedObj.length + 32, Version.CURRENT);
+      HeapDataOutputStream hos =
+          new HeapDataOutputStream(serializedObj.length + 32, Version.CURRENT);
-      }
-      catch (Exception ex) {
+      } catch (Exception ex) {
-          LocalizedStrings.FilterPostAuthorization_FILTERPOSTAUTHORIZATION_AN_EXCEPTION_WAS_THROWN_WHILE_TRYING_TO_SERIALIZE,
-          ex);
+            LocalizedStrings.FilterPostAuthorization_FILTERPOSTAUTHORIZATION_AN_EXCEPTION_WAS_THROWN_WHILE_TRYING_TO_SERIALIZE,
+            ex);
-      obj = ((CqEntry)value).getValue();
+      obj = ((CqEntry) value).getValue();
-      int lastChar = this.principalName
-          .charAt(this.principalName.length() - 1)
-          - '0';
+      int lastChar = this.principalName.charAt(this.principalName.length() - 1) - '0';
-      ObjectWithAuthz authzObj = (ObjectWithAuthz)obj;
-      int authzIndex = ((Integer)authzObj.getAuthz()).intValue() - '0';
+      ObjectWithAuthz authzObj = (ObjectWithAuthz) obj;
+      int authzIndex = ((Integer) authzObj.getAuthz()).intValue() - '0';
-            LocalizedStrings.FilterPostAuthorization_FILTERPOSTAUTHORIZATION_THE_USER_0_IS_NOT_AUTHORIZED_FOR_THE_OBJECT_1, 
+            LocalizedStrings.FilterPostAuthorization_FILTERPOSTAUTHORIZATION_THE_USER_0_IS_NOT_AUTHORIZED_FOR_THE_OBJECT_1,
-      }
-      else {
+      } else {
-          this.logger.fine("FilterPostAuthorization: user ["
-              + this.principalName + "] authorized for object: "
-              + authzObj.getVal());
+          this.logger.fine("FilterPostAuthorization: user [" + this.principalName
+              + "] authorized for object: " + authzObj.getVal());
-          return new CqEntry(((CqEntry)value).getKey(),authzObj.getVal());
-        } else { 
+          return new CqEntry(((CqEntry) value).getKey(), authzObj.getVal());
+        } else {
-      GetOperationContext getContext = (GetOperationContext)context;
+      GetOperationContext getContext = (GetOperationContext) context;
-      }
-      else {
+      } else {
-    }
-    else if (opCode.isPut()) {
-      PutOperationContext putContext = (PutOperationContext)context;
+    } else if (opCode.isPut()) {
+      PutOperationContext putContext = (PutOperationContext) context;
-    }
-    else if (opCode.equals(OperationCode.PUTALL)) {
+    } else if (opCode.equals(OperationCode.PUTALL)) {
-    }
-    else if (opCode.isQuery() || opCode.isExecuteCQ()) {
-      QueryOperationContext queryContext = (QueryOperationContext)context;
+    } else if (opCode.isQuery() || opCode.isExecuteCQ()) {
+      QueryOperationContext queryContext = (QueryOperationContext) context;
-        SelectResults results = (SelectResults)value;
+        SelectResults results = (SelectResults) value;
-        }
-        else {
+        } else {
-      }
-      else {
+      } else {

UPD66 UPD66 UPD66 UPD66 DEL66