Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import org.apache.geode.cache.DataPolicy;
-   * Create one of these in the local case so that we have a snapshot of the state
-   * and can allow the bucket to move out from under us.
+   * Create one of these in the local case so that we have a snapshot of the state and can allow the
+   * bucket to move out from under us.
-    if (allowTombstones && re.isTombstone()) { // client get() operations need to see tombstone values
+    if (allowTombstones && re.isTombstone()) { // client get() operations need to see tombstone
+                                               // values
-    Assert.assertTrue(this.value != Token.NOT_AVAILABLE, "getEntry did not fault value in from disk");
+    Assert.assertTrue(this.value != Token.NOT_AVAILABLE,
+        "getEntry did not fault value in from disk");
-  
+
-   * Create one of these in the local case so that we have a snapshot of the state
-   * and can allow the bucket to move out from under us.
+   * Create one of these in the local case so that we have a snapshot of the state and can allow the
+   * bucket to move out from under us.
-  public NonLocalRegionEntry(LocalRegion br,Object key,Object value) {
+  public NonLocalRegionEntry(LocalRegion br, Object key, Object value) {
-    Assert.assertTrue(this.value != Token.NOT_AVAILABLE, "getEntry did not fault value in from disk");
-//    this.lastModified = re.getLastModified();
-//    this.isRemoved = re.isRemoved();
+    Assert.assertTrue(this.value != Token.NOT_AVAILABLE,
+        "getEntry did not fault value in from disk");
+    // this.lastModified = re.getLastModified();
+    // this.isRemoved = re.isRemoved();
-  
-  
-  
+
+
+
-   * Create one of these in the local case so that we have a snapshot of the state
-   * and can allow the bucket to move out from under us.
+   * Create one of these in the local case so that we have a snapshot of the state and can allow the
+   * bucket to move out from under us.
-      this.value = CachedDeserializableFactory.create((CachedDeserializable)this.value);
+      this.value = CachedDeserializableFactory.create((CachedDeserializable) this.value);
-    Assert.assertTrue(this.value != Token.NOT_AVAILABLE, "getEntry did not fault value in from disk");
-    this.lastModified = 0l;//re.getStatistics().getLastModifiedTime();
+    Assert.assertTrue(this.value != Token.NOT_AVAILABLE,
+        "getEntry did not fault value in from disk");
+    this.lastModified = 0l;// re.getStatistics().getLastModifiedTime();
-      this.versionTag = ((EntrySnapshot)re).getVersionTag();
+      this.versionTag = ((EntrySnapshot) re).getVersionTag();
+    }
-  }
-  
+
-    return "NonLocalRegionEntry("+this.key + "; value="  + this.value + "; version=" + this.versionTag;
+    return "NonLocalRegionEntry(" + this.key + "; value=" + this.value + "; version="
+        + this.versionTag;
-  
+
-  
+
-  
+
-  
+
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    this.versionTag = (VersionTag)DataSerializer.readObject(in);
+    this.versionTag = (VersionTag) DataSerializer.readObject(in);
-  
+
-  public boolean fillInValue(LocalRegion r,
-      InitialImageOperation.Entry entry, ByteArrayDataInput in, DM mgr) {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+  public boolean fillInValue(LocalRegion r, InitialImageOperation.Entry entry,
+      ByteArrayDataInput in, DM mgr) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  
+
-  
+
-  public void updateStatsForPut(long lastModifiedTime) {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+  public void updateStatsForPut(long lastModifiedTime, long lastAccessedTime) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  public void updateStatsForGet(boolean hit, long time)
-      throws StatisticsDisabledException {
+  public void updateStatsForGet(boolean hit, long time) throws StatisticsDisabledException {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  public void removePhase1(LocalRegion r, boolean isClear)
-  {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+  public void removePhase1(LocalRegion r, boolean isClear) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  public void removePhase2()
-  {
+  public void removePhase2() {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
+
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
+
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
+
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  public boolean initialImagePut(LocalRegion region, long lastModified1,
-      Object newValue, boolean wasRecovered, boolean versionTagAccepted) {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+  public boolean initialImagePut(LocalRegion region, long lastModified1, Object newValue,
+      boolean wasRecovered, boolean versionTagAccepted) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  public boolean initialImageInit(LocalRegion region, long lastModified1,
-      Object newValue, boolean create, boolean wasRecovered, boolean versionTagAccepted) {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+  public boolean initialImageInit(LocalRegion region, long lastModified1, Object newValue,
+      boolean create, boolean wasRecovered, boolean versionTagAccepted) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  public boolean destroy(LocalRegion region,
-                         EntryEventImpl event,
-                         boolean inTokenMode,
-                         boolean cacheWrite,
-                         Object expectedOldValue,
-                         boolean forceDestroy,
-                         boolean removeRecoveredEntry)
-  throws CacheWriterException, EntryNotFoundException, TimeoutException {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+  public boolean destroy(LocalRegion region, EntryEventImpl event, boolean inTokenMode,
+      boolean cacheWrite, Object expectedOldValue, boolean forceDestroy,
+      boolean removeRecoveredEntry)
+      throws CacheWriterException, EntryNotFoundException, TimeoutException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-   * @see org.apache.geode.internal.cache.RegionEntry#getValueOnDiskOrBuffer(org.apache.geode.internal.cache.LocalRegion)
+   * @see
+   * org.apache.geode.internal.cache.RegionEntry#getValueOnDiskOrBuffer(org.apache.geode.internal.
+   * cache.LocalRegion)
-  public Object getValueOnDiskOrBuffer(LocalRegion r)
-      throws EntryNotFoundException {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
-  }
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.RegionEntry#getSerializedValueOnDisk(org.apache.geode.internal.cache.LocalRegion)
-   */
-  public Object getSerializedValueOnDisk(LocalRegion localRegion) {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+  public Object getValueOnDiskOrBuffer(LocalRegion r) throws EntryNotFoundException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.RegionEntry#getSerializedValueOnDisk(org.apache.geode.internal.
+   * cache.LocalRegion)
+   */
+  public Object getSerializedValueOnDisk(LocalRegion localRegion) {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
+  }
+
+
+
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.RegionEntry#generateVersionTag(org.apache.geode.distributed.DistributedMember, boolean)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.RegionEntry#generateVersionTag(org.apache.geode.distributed.
+   * DistributedMember, boolean)
-  public VersionTag generateVersionTag(VersionSource member,
-      boolean withDelta, LocalRegion region, EntryEventImpl event) {
+  public VersionTag generateVersionTag(VersionSource member, boolean withDelta, LocalRegion region,
+      EntryEventImpl event) {
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.RegionEntry#concurrencyCheck(org.apache.geode.internal.cache.LocalRegion, org.apache.geode.internal.cache.versions.VersionTag, org.apache.geode.distributed.internal.membership.InternalDistributedMember, org.apache.geode.distributed.internal.membership.InternalDistributedMember)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.RegionEntry#concurrencyCheck(org.apache.geode.internal.cache.
+   * LocalRegion, org.apache.geode.internal.cache.versions.VersionTag,
+   * org.apache.geode.distributed.internal.membership.InternalDistributedMember,
+   * org.apache.geode.distributed.internal.membership.InternalDistributedMember)
-  public void processVersionTag(LocalRegion r, VersionTag tag,
-      InternalDistributedMember thisVM, InternalDistributedMember sender) {
+  public void processVersionTag(LocalRegion r, VersionTag tag, InternalDistributedMember thisVM,
+      InternalDistributedMember sender) {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.versions.VersionStamp#setMemberID(org.apache.geode.distributed.DistributedMember)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.versions.VersionStamp#setMemberID(org.apache.geode.distributed.
+   * DistributedMember)
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.versions.VersionStamp#setPreviousMemberID(org.apache.geode.distributed.DistributedMember)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.versions.VersionStamp#setPreviousMemberID(org.apache.geode.
+   * distributed.DistributedMember)
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.versions.VersionStamp#processVersionTag(org.apache.geode.internal.cache.LocalRegion, org.apache.geode.internal.cache.versions.VersionTag, boolean, org.apache.geode.distributed.internal.membership.InternalDistributedMember, org.apache.geode.distributed.internal.membership.InternalDistributedMember)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see org.apache.geode.internal.cache.versions.VersionStamp#processVersionTag(org.apache.geode.
+   * internal.cache.LocalRegion, org.apache.geode.internal.cache.versions.VersionTag, boolean,
+   * org.apache.geode.distributed.internal.membership.InternalDistributedMember,
+   * org.apache.geode.distributed.internal.membership.InternalDistributedMember)
-  public void processVersionTag(LocalRegion r, VersionTag tag,
-      boolean isTombstoneFromGII, boolean hasDelta,
-      VersionSource thisVM, InternalDistributedMember sender, boolean checkForConflicts) {
+  public void processVersionTag(LocalRegion r, VersionTag tag, boolean isTombstoneFromGII,
+      boolean hasDelta, VersionSource thisVM, InternalDistributedMember sender,
+      boolean checkForConflicts) {
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-    return this.versionTag != null? this.versionTag.getVersionTimeStamp() : 0;
+    return this.versionTag != null ? this.versionTag.getVersionTimeStamp() : 0;
-  
-  /** get rvv internal high byte.  Used by region entries for transferring to storage */
+
+  /** get rvv internal high byte. Used by region entries for transferring to storage */
-    return this.versionTag != null? this.versionTag.getRegionVersionHighBytes() : 0;
+    return this.versionTag != null ? this.versionTag.getRegionVersionHighBytes() : 0;
-  
-  /** get rvv internal low bytes.  Used by region entries for transferring to storage */
+
+  /** get rvv internal low bytes. Used by region entries for transferring to storage */
-    return this.versionTag != null? this.versionTag.getRegionVersionLowBytes() : 0;
+    return this.versionTag != null ? this.versionTag.getRegionVersionLowBytes() : 0;
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  
+
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());    
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    
+
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-    
+
-  public void setValue(RegionEntryContext context, Object value,
-      EntryEventImpl event) throws RegionClearedException {
-    throw new UnsupportedOperationException(LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY.toLocalizedString());
+  public void setValue(RegionEntryContext context, Object value, EntryEventImpl event)
+      throws RegionClearedException {
+    throw new UnsupportedOperationException(
+        LocalizedStrings.PartitionedRegion_NOT_APPROPRIATE_FOR_PARTITIONEDREGIONNONLOCALREGIONENTRY
+            .toLocalizedString());
-  
+
-  public void setInUseByTransaction(boolean v) {
-  }
+  public void setInUseByTransaction(boolean v) {}
-  public void incRefCount() {
-  }
+  public void incRefCount() {}
-  public void decRefCount(NewLRUClockHand lruList, LocalRegion lr) {
-  }
+  public void decRefCount(NewLRUClockHand lruList, LocalRegion lr) {}
-  public void resetRefCount(NewLRUClockHand lruList) {
-  }
+  public void resetRefCount(NewLRUClockHand lruList) {}
-  public Object prepareValueForCache(RegionEntryContext r, Object val,
-      EntryEventImpl event, boolean isEntryUpdate) {
+  public Object prepareValueForCache(RegionEntryContext r, Object val, EntryEventImpl event,
+      boolean isEntryUpdate) {

INS44 INS39 INS42 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL40 DEL26