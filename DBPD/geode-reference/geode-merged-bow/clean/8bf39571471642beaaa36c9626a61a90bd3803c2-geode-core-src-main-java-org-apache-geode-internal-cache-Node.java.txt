Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
- * Stores information about a PartitionedRegion singleton instance running
- * inside a virtual machine. This Node is said to be a participant, cooperating
- * with other Nodes to physically manage a logically named PartitionedRegion.
+ * Stores information about a PartitionedRegion singleton instance running inside a virtual machine.
+ * This Node is said to be a participant, cooperating with other Nodes to physically manage a
+ * logically named PartitionedRegion.
- * Nodes are stored in a list within PartitionedRegionConfig which is stored
- * globally as the value of an named entry in the
- * <code>DistributedHashMap.PARTITIONED_REGION_NAME</code>. Node must be
- * Serializable and have a no args Constructor. Since Nodes are used as keys in
- * each Thread's ThreadLocal map of Nodes to Connections, Node must implement
- * hashCode and equals.
+ * Nodes are stored in a list within PartitionedRegionConfig which is stored globally as the value
+ * of an named entry in the <code>DistributedHashMap.PARTITIONED_REGION_NAME</code>. Node must be
+ * Serializable and have a no args Constructor. Since Nodes are used as keys in each Thread's
+ * ThreadLocal map of Nodes to Connections, Node must implement hashCode and equals.
- * Node maintains a field for maxMemory (fixed) to enable other Nodes to
- * determine whether the Node should be the target of a canRebalance request. If
- * the Node's maxMemory is 0, then the Node is advertising that it never should
- * receive a request to rebalance.
+ * Node maintains a field for maxMemory (fixed) to enable other Nodes to determine whether the Node
+ * should be the target of a canRebalance request. If the Node's maxMemory is 0, then the Node is
+ * advertising that it never should receive a request to rebalance.
-public final class Node extends ExternalizableDSFID
-{
+public final class Node extends ExternalizableDSFID {
-  
+
-  
+
-  
+
-  
+
-  
+
-  
+
-  public Node() {
-  }
-  
-  public InternalDistributedMember getMemberId()
-  {
+  public Node() {}
+
+  public InternalDistributedMember getMemberId() {
-  
+
-  
-  @Override  
-  public String toString()
-  {
-    return ("Node=[memberId=" + this.memberId + "; prType=" + prType + "; isPersistent="+ isPersistent+"]");
+
+  @Override
+  public String toString() {
+    return ("Node=[memberId=" + this.memberId + "; prType=" + prType + "; isPersistent="
+        + isPersistent + "]");
-  @Override  
-  public int hashCode()
-  {
+  @Override
+  public int hashCode() {
-  
+
-  
+
-    if (this.cacheLoaderWriterByte == 0x01
-        || this.cacheLoaderWriterByte == 0x03) {
+    if (this.cacheLoaderWriterByte == 0x01 || this.cacheLoaderWriterByte == 0x03) {
-    }
-    else {
+    } else {
-    if (this.cacheLoaderWriterByte == 0x02
-        || this.cacheLoaderWriterByte == 0x03) {
+    if (this.cacheLoaderWriterByte == 0x02 || this.cacheLoaderWriterByte == 0x03) {
-    }
-    else {
+    } else {
-  
-  @Override  
-  public boolean equals(Object obj)
-  {
+
+  @Override
+  public boolean equals(Object obj) {
-      Node n = (Node)obj;
-      if (this.memberId.equals(n.memberId)
-          && this.serialNumber == n.serialNumber) {
+      Node n = (Node) obj;
+      if (this.memberId.equals(n.memberId) && this.serialNumber == n.serialNumber) {
-  @Override  
+  @Override
-  @Override  
-  public void toData(DataOutput out) throws IOException
-  {
+  @Override
+  public void toData(DataOutput out) throws IOException {
-  @Override  
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  @Override
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66