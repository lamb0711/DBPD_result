GEODE-1464: remove sqlf code

-   * The property used to specify the base directory for Sql Fabric persistence
-   * of Gateway Queues, Tables, Data Dictionary etc.
-   */
-  public static final String SYS_PERSISTENT_DIR = "sys-disk-dir";
-
-  /**
-   * The system property for {@link #SYS_PERSISTENT_DIR}.
-   */
-  public static final String SYS_PERSISTENT_DIR_PROP = "sqlfabric."
-      + SYS_PERSISTENT_DIR;
-
-  /**
-
-
-  // Asif: Sql Fabric related helper methods.
-  // These static functions need to be moved to a better place.
-  // preferably in sql Fabric source tree but since GatewayImpl is also
-  // utilizing it, we have no option but to keep it here.
-  public static String generateOverFlowDirName(String dirName) {
-    dirName = generatePersistentDirName(dirName);
-    final GemFireCacheImpl cache = GemFireCacheImpl.getInstance();
-    if (cache == null) {
-      throw new CacheClosedException(
-          "DiskWriteAttributesImpl::generateOverFlowDirName: no cache found.");
-    }
-    /* [sumedh] no need of below since sys-disk-dir is VM specific anyways
-    char fileSeparator = System.getProperty("file.separator").charAt(0);
-    DistributedMember member = cache.getDistributedSystem()
-        .getDistributedMember();
-    String host = member.getHost();
-    int pid = member.getProcessId();
-    final StringBuilder temp = new StringBuilder(dirName);
-    temp.append(fileSeparator);
-    temp.append(host);
-    temp.append('-');
-    temp.append(pid);
-    return temp.toString();
-    */
-    return dirName;
-  }
-
-  public static String generatePersistentDirName(String dirPath) {
-    String baseDir = System.getProperty(SYS_PERSISTENT_DIR_PROP);
-    if (baseDir == null) {
-    //Kishor : TODO : Removing old wan related code
-      //baseDir = GatewayQueueAttributes.DEFAULT_OVERFLOW_DIRECTORY;
-      baseDir = ".";
-    }
-    if (dirPath != null) {
-      File dirProvided = new File(dirPath);
-      // Is the directory path absolute?
-      // For Windows this will check for drive letter. However, we want
-      // to allow for no drive letter so prepend the drive.
-      boolean isAbsolute = dirProvided.isAbsolute();
-      if (!isAbsolute) {
-        String driveName;
-        // get the current drive for Windows and prepend
-        if ((dirPath.charAt(0) == '/' || dirPath.charAt(0) == '\\')
-            && (driveName = getCurrentDriveName()) != null) {
-          isAbsolute = true;
-          dirPath = driveName + dirPath;
-        }
-      }
-      if (!isAbsolute) {
-        // relative path so resolve it relative to parent dir
-        dirPath = new File(baseDir, dirPath).getAbsolutePath();
-      }
-    }
-    else {
-      dirPath = baseDir;
-    }
-    return dirPath;
-  }
-
-  /**
-   * Get the drive name of current working directory for windows else return
-   * null for non-Windows platform (somewhat of a hack -- see if something
-   * cleaner can be done for this).
-   */
-  public static String getCurrentDriveName() {
-    if (System.getProperty("os.name").startsWith("Windows")) {
-      try {
-        // get the current drive
-        return new File(".").getCanonicalPath().substring(0, 2);
-      } catch (IOException ex) {
-        throw new IllegalArgumentException(
-            "Failed in setting the overflow directory", ex);
-      }
-    }
-    return null;
-  }

DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL42 DEL67 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL42 DEL27 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL34 DEL32 DEL13 DEL27 DEL42 DEL42 DEL34 DEL32 DEL13 DEL27 DEL27 DEL36 DEL42 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL27 DEL42 DEL9 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL38 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL7 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL42 DEL43 DEL45 DEL14 DEL42 DEL32 DEL42 DEL34 DEL34 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL33 DEL41 DEL8 DEL31