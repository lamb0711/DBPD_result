Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-import javax.xml.transform.*; 
-//import javax.xml.transform.dom.DOMSource; 
-import javax.xml.transform.sax.SAXSource; 
-import javax.xml.transform.stream.StreamResult;  
+import javax.xml.transform.*;
+// import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.sax.SAXSource;
+import javax.xml.transform.stream.StreamResult;
-//import org.xml.sax.ext.*;
-import org.xml.sax.helpers.AttributesImpl; 
+// import org.xml.sax.ext.*;
+import org.xml.sax.helpers.AttributesImpl;
- * <code>AdminDistributedSystem</code>.  This class is used mainly for
- * testing.
+ * <code>AdminDistributedSystem</code>. This class is used mainly for testing.
-public class ManagedEntityConfigXmlGenerator
-  extends ManagedEntityConfigXml implements XMLReader {
+public class ManagedEntityConfigXmlGenerator extends ManagedEntityConfigXml implements XMLReader {
-  /////////////////////////  Instance Fields  ////////////////////////
+  ///////////////////////// Instance Fields ////////////////////////
-  /** The <code>AdminDistributedSystem</code> for which we are
-   * generating XML */
+  /**
+   * The <code>AdminDistributedSystem</code> for which we are generating XML
+   */
-  /////////////////////////  Static Methods  ////////////////////////
+  ///////////////////////// Static Methods ////////////////////////
-   * Generates an XML representation of all of the managed entities in
-   * the given <code>AdminDistributedSystem</code>.
+   * Generates an XML representation of all of the managed entities in the given
+   * <code>AdminDistributedSystem</code>.
-  public static void generate(AdminDistributedSystem system,
-                              PrintWriter pw) {
+  public static void generate(AdminDistributedSystem system, PrintWriter pw) {
-  /////////////////////////  Constructors  //////////////////////////
+  ///////////////////////// Constructors //////////////////////////
-   * Creates a new generator for the given
-   * <code>AdminDistributedSystem</code>. 
+   * Creates a new generator for the given <code>AdminDistributedSystem</code>.
-  private ManagedEntityConfigXmlGenerator(AdminDistributedSystem
-                                          system) {
+  private ManagedEntityConfigXmlGenerator(AdminDistributedSystem system) {
-  ///////////////////////  Instance Methods  ///////////////////////
+  /////////////////////// Instance Methods ///////////////////////
-      RuntimeException ex2 = new RuntimeException(LocalizedStrings.ManagedEntityConfigXmlGenerator_EXCEPTION_THROWN_WHILE_GENERATING_XML.toLocalizedString());
+      RuntimeException ex2 = new RuntimeException(
+          LocalizedStrings.ManagedEntityConfigXmlGenerator_EXCEPTION_THROWN_WHILE_GENERATING_XML
+              .toLocalizedString());
-   * Called by the transformer to parse the "input source".  We ignore
-   * the input source and, instead, generate SAX events to the {@link
-   * #setContentHandler ContentHandler}.
+   * Called by the transformer to parse the "input source". We ignore the input source and, instead,
+   * generate SAX events to the {@link #setContentHandler ContentHandler}.
-    atts.addAttribute("", "", ID, "",
-                      String.valueOf(this.system.getConfig().getSystemId()));
+    atts.addAttribute("", "", ID, "", String.valueOf(this.system.getConfig().getSystemId()));
-      throw new SAXException(LocalizedStrings.ManagedEntityConfigXmlGenerator_AN_ADMINEXCEPTION_WAS_THROWN_WHILE_GENERATING_XML.toLocalizedString(), ex);
+      throw new SAXException(
+          LocalizedStrings.ManagedEntityConfigXmlGenerator_AN_ADMINEXCEPTION_WAS_THROWN_WHILE_GENERATING_XML
+              .toLocalizedString(),
+          ex);
-    handler.characters(remoteCommand.toCharArray(), 0,
-                       remoteCommand.length());
+    handler.characters(remoteCommand.toCharArray(), 0, remoteCommand.length());
-    
+
-    DistributionLocator[] locators =
-      this.system.getDistributionLocators();
+    DistributionLocator[] locators = this.system.getDistributionLocators();
-  private void generateLocator(DistributionLocatorConfig config) 
-    throws SAXException {
-    
+  private void generateLocator(DistributionLocatorConfig config) throws SAXException {
+
-    atts.addAttribute("", "", PORT, "",
-                      String.valueOf(config.getPort()));
+    atts.addAttribute("", "", PORT, "", String.valueOf(config.getPort()));
-  private void generateEntityConfig(ManagedEntityConfig config) 
-    throws SAXException {
+  private void generateEntityConfig(ManagedEntityConfig config) throws SAXException {
-      handler.characters(remoteCommand.toCharArray(), 0,
-                         remoteCommand.length());
+      handler.characters(remoteCommand.toCharArray(), 0, remoteCommand.length());
-      handler.characters(workingDirectory.toCharArray(), 0,
-                         workingDirectory.length());
+      handler.characters(workingDirectory.toCharArray(), 0, workingDirectory.length());
-      handler.characters(productDirectory.toCharArray(), 0,
-                         productDirectory.length());
+      handler.characters(productDirectory.toCharArray(), 0, productDirectory.length());
-   * Generates XML for the SSL configuration of the distributed
-   * system.
+   * Generates XML for the SSL configuration of the distributed system.
-                      String.valueOf(config.isSSLAuthenticationRequired()));
+        String.valueOf(config.isSSLAuthenticationRequired()));
-      handler.characters(protocols.toCharArray(), 0,
-                         protocols.length());
+      handler.characters(protocols.toCharArray(), 0, protocols.length());
-      handler.characters(ciphers.toCharArray(), 0,
-                         ciphers.length());
+      handler.characters(ciphers.toCharArray(), 0, ciphers.length());
-    for (Iterator iter = sslProps.entrySet().iterator();
-         iter.hasNext(); ) {
+    for (Iterator iter = sslProps.entrySet().iterator(); iter.hasNext();) {
-      
+
-   * Generates an XML representation of the
-   * <code>CacheServer</code>s in the distributed system.
+   * Generates an XML representation of the <code>CacheServer</code>s in the distributed system.
-  private void generateCacheServers()
-    throws SAXException, AdminException {
+  private void generateCacheServers() throws SAXException, AdminException {
-   * Generates an XML representation of a
-   * <code>CacheServerConfig</code>.
+   * Generates an XML representation of a <code>CacheServerConfig</code>.
-  private void generateCacheServer(CacheServerConfig config) 
-    throws SAXException {
+  private void generateCacheServer(CacheServerConfig config) throws SAXException {
-      handler.characters(classpath.toCharArray(), 0,
-                         classpath.length());
+      handler.characters(classpath.toCharArray(), 0, classpath.length());
-  }  
+  }
-  }  
+  }
-  //////////  Inherited methods that don't do anything  //////////
+  ////////// Inherited methods that don't do anything //////////
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+      throws SAXNotRecognizedException, SAXNotSupportedException {
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+      throws SAXNotRecognizedException, SAXNotSupportedException {
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+      throws SAXNotRecognizedException, SAXNotSupportedException {
-    throws SAXNotRecognizedException, SAXNotSupportedException {
+      throws SAXNotRecognizedException, SAXNotSupportedException {
-  
+
-  public void parse(String systemId)
-    throws IOException, SAXException {
+  public void parse(String systemId) throws IOException, SAXException {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66