Merge branch 'develop' into feature/GEODE-7049

-import static org.apache.geode.cache.ssl.TestSSLUtils.createKeyStore;
-import static org.apache.geode.cache.ssl.TestSSLUtils.createTrustStore;
-import static org.apache.geode.cache.ssl.TestSSLUtils.generateKeyPair;
+import java.io.EOFException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.nio.file.Files;
+import java.nio.file.Paths;
-import java.security.KeyPair;
-import java.security.cert.X509Certificate;
+import java.security.KeyStore;
+import java.security.cert.Certificate;
+import java.util.ArrayList;
+import java.util.List;
+/**
+ * The {@code CertStores} class encapsulates the key and trust stores typically used by various
+ * components in a Geode cluster. It currently supports certificate collections for servers,
+ * locators and clients. All certificates are signed by a single Root Certificate Authority.
+ */
-  private final String alias;
-  private Map<String, X509Certificate> trustedCerts = new HashMap<>();
+  // Contents of keystore
+  private Map<String, CertificateMaterial> keyStoreEntries = new HashMap<>();
-  private File keyStoreFile;
+  // Contents of truststore
+  private Map<String, CertificateMaterial> trustedCerts = new HashMap<>();
-  private X509Certificate cert;
-
-    return new CertStores("locator", "locator");
+    return new CertStores("locator");
-    return new CertStores("server", "server");
+    return new CertStores("server");
-    return new CertStores("client", "client");
+    return new CertStores("client");
-  public CertStores(String alias, String storePrefix) {
-    this.alias = alias;
+  public CertStores(String storePrefix) {
-  public String alias() {
-    return alias;
-  }
-
-  public X509Certificate certificate() {
-    return cert;
-  }
-
-  public CertStores withCertificate(TestSSLUtils.CertificateBuilder certificateBuilder)
-      throws GeneralSecurityException, IOException {
-    keyStoreFile = File.createTempFile(storePrefix + "KS", ".jks");
-    withCertificate(certificateBuilder, keyStoreFile);
+  public CertStores withCertificate(String alias, CertificateMaterial material) {
+    keyStoreEntries.put(alias, material);
-  private void withCertificate(TestSSLUtils.CertificateBuilder certificateBuilder,
-      File keyStoreFile) throws GeneralSecurityException, IOException {
-    KeyPair keyPair = generateKeyPair("RSA");
-    cert = certificateBuilder.generate(keyPair);
-    createKeyStore(keyStoreFile.getPath(), keyStorePassword, alias, keyPair.getPrivate(), cert);
-  }
-
-  public CertStores trustSelf() {
-    this.trustedCerts.put(alias, cert);
-    return this;
-  }
-
-  public CertStores trust(String alias, X509Certificate certificate) {
-    this.trustedCerts.put(alias, certificate);
+  public CertStores trust(String alias, CertificateMaterial material) {
+    this.trustedCerts.put(alias, material);
-    File trustStoreFile = File.createTempFile(storePrefix + "TS", ".jks");
+    File trustStoreFile = File.createTempFile(storePrefix + "-TS-", ".jks");
+    createTrustStore(trustStoreFile.getPath(), trustStorePassword);
-    createTrustStore(trustStoreFile.getPath(), trustStorePassword, trustedCerts);
+    File keyStoreFile = File.createTempFile(storePrefix + "-KS-", ".jks");
+    keyStoreFile.deleteOnExit();
+    createKeyStore(keyStoreFile.getPath(), keyStorePassword);
+
+  private void createTrustStore(String filename, String password)
+      throws GeneralSecurityException, IOException {
+    KeyStore ks = KeyStore.getInstance("JKS");
+    try (InputStream in = Files.newInputStream(Paths.get(filename))) {
+      ks.load(in, password.toCharArray());
+    } catch (EOFException e) {
+      ks = createEmptyKeyStore();
+    }
+    for (Map.Entry<String, CertificateMaterial> cert : trustedCerts.entrySet()) {
+      ks.setCertificateEntry(cert.getKey(), cert.getValue().getCertificate());
+    }
+
+    try (OutputStream out = Files.newOutputStream(Paths.get(filename))) {
+      ks.store(out, password.toCharArray());
+    }
+  }
+
+  private void createKeyStore(String filename, String password)
+      throws GeneralSecurityException, IOException {
+    KeyStore ks = createEmptyKeyStore();
+
+    for (Map.Entry<String, CertificateMaterial> entry : keyStoreEntries.entrySet()) {
+      CertificateMaterial cert = entry.getValue();
+
+      List<Certificate> chain = new ArrayList<>();
+      chain.add(cert.getCertificate());
+
+      cert.getIssuer().ifPresent(chain::add);
+
+      ks.setKeyEntry(entry.getKey(), cert.getPrivateKey(), password.toCharArray(),
+          chain.toArray(new Certificate[] {}));
+    }
+    try (OutputStream out = Files.newOutputStream(Paths.get(filename))) {
+      ks.store(out, password.toCharArray());
+    }
+  }
+
+
+  private KeyStore createEmptyKeyStore() throws GeneralSecurityException, IOException {
+    KeyStore ks = KeyStore.getInstance("JKS");
+    ks.load(null, null); // initialize
+    return ks;
+  }
+

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 MOV31 MOV31 MOV31 INS40 UPD40 UPD40 UPD40 INS40 UPD40 UPD40 INS40 INS40 INS29 INS23 INS31 INS31 INS65 UPD74 INS59 MOV83 INS74 MOV59 UPD42 UPD42 UPD42 INS83 MOV43 INS42 MOV44 INS44 INS8 MOV43 UPD42 MOV44 INS44 INS83 INS39 INS42 INS44 INS44 MOV43 MOV43 INS8 UPD42 INS44 INS44 MOV43 MOV43 INS8 UPD83 UPD43 UPD42 INS43 INS43 INS8 INS66 INS65 INS66 INS66 INS66 UPD43 INS42 INS14 INS43 MOV43 INS43 INS43 INS42 INS21 MOV41 INS43 INS42 INS60 INS21 INS21 INS43 INS42 INS43 INS42 INS60 INS54 INS70 INS54 INS43 INS42 INS43 INS42 INS60 INS70 INS54 UPD42 UPD42 MOV42 INS42 INS60 MOV21 INS41 INS66 UPD42 INS74 INS42 INS42 INS42 INS32 INS42 INS42 MOV43 MOV43 INS59 INS32 INS32 INS42 INS42 INS43 INS59 INS58 INS8 INS12 INS44 INS32 INS8 INS58 INS8 INS42 INS42 INS43 INS59 INS44 INS32 INS8 INS58 INS8 INS43 INS59 INS42 INS43 UPD45 UPD45 UPD45 INS42 INS42 INS42 INS42 UPD42 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 UPD42 MOV42 INS42 INS32 INS43 INS59 INS21 INS44 INS8 INS74 INS42 INS42 INS42 INS21 INS43 INS59 MOV21 INS42 INS42 INS32 INS74 INS42 INS42 INS42 MOV60 INS60 INS21 INS21 MOV21 INS43 INS59 INS21 UPD42 MOV42 INS42 INS32 UPD42 UPD42 INS33 INS33 INS42 INS42 INS42 INS27 INS45 INS42 INS42 INS45 UPD42 MOV42 INS42 INS32 INS32 INS43 INS42 INS21 INS43 MOV43 INS43 INS32 INS42 INS42 INS32 INS42 INS43 INS43 INS43 UPD43 INS74 INS59 INS32 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS45 UPD45 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS7 INS40 UPD42 MOV42 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 UPD42 UPD42 INS32 UPD40 MOV40 INS42 INS42 UPD42 UPD42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS32 UPD42 MOV42 INS90 INS42 UPD42 INS32 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 UPD42 INS42 INS42 INS74 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 UPD42 MOV42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS5 INS4 INS42 INS43 INS85 INS42 DEL83 DEL42 DEL59 DEL23 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL43 DEL42 DEL59 DEL23 DEL45 DEL45 DEL45 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL27 DEL45 DEL32 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL42 DEL45 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL32 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL44 DEL8