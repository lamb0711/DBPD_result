GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.i18n.StringId;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.QueueManagerImpl_TIMEOUT_WAITING_FOR_RECOVERY_THREAD_TO_COMPLETE));
+          logger.warn("Timeout waiting for recovery thread to complete");
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.QueueManagerImpl_ERROR_CLOSING_PRIMARY_CONNECTION_TO_0,
-            primary.getEndpoint()), e);
+        logger.warn("Error closing primary connection to " +
+            primary.getEndpoint(),
+            e);
-          logger.warn(LocalizedMessage.create(
-              LocalizedStrings.QueueManagerImpl_ERROR_CLOSING_BACKUP_CONNECTION_TO_0,
-              backup.getEndpoint()), e);
+          logger.warn("Error closing backup connection to " +
+              backup.getEndpoint(),
+              e);
-          logger.info(LocalizedMessage.create(
-              LocalizedStrings.QueueManagerImpl_SENDING_READY_FOR_EVENTS_TO_PRIMARY_0, primary));
+          logger.info("Sending ready for events to primary: %s", primary);
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.QueueManagerImpl_SENDING_READY_FOR_EVENTS_TO_PRIMARY_0, primary));
+      logger.info("Sending ready for events to primary: {}", primary);
-          .info(LocalizedMessage.create(
-              LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_ENDPOINT_CRASHED_SCHEDULING_RECOVERY,
+          .info("{} subscription endpoint {} crashed. Scheduling recovery.",
-                  ? (deadConnection.getUpdater().isPrimary() ? "Primary" : "Redundant") : "Queue",
-                  endpoint}));
+                  ? (deadConnection.getUpdater().isPrimary() ? "Primary" : "Redundant")
+                  : "Queue",
+                  endpoint});
-        .info(
-            LocalizedMessage.create(
-                LocalizedStrings.QueueManagerImpl_CACHE_CLIENT_UPDATER_FOR_ON_ENDPOINT_EXITING_SCHEDULING_RECOVERY,
-                new Object[] {(deadConnection != null && deadConnection.getUpdater() != null)
-                    ? (deadConnection.getUpdater().isPrimary() ? "Primary" : "Redundant") : "Queue",
-                    endpoint}));
+        .info("Cache client updater for %s on endpoint %s exiting. Scheduling recovery.",
+            (deadConnection != null && deadConnection.getUpdater() != null)
+                ? (deadConnection.getUpdater().isPrimary() ? "Primary" : "Redundant")
+                : "Queue",
+            endpoint);
-          LocalizedStrings.QueueManagerImpl_COULD_NOT_CREATE_A_QUEUE_NO_QUEUE_SERVERS_AVAILABLE);
+          "Could not create a queue. No queue servers available.");
-      logger.error(LocalizedMessage.create(
-          LocalizedStrings.QueueManagerImpl_COULD_NOT_INITIALIZE_A_PRIMARY_QUEUE_ON_STARTUP_NO_QUEUE_SERVERS_AVAILABLE));
+      logger.error("Could not initialize a primary queue on startup. No queue servers available.");
-                LocalizedStrings.QueueManagerImpl_COULD_NOT_INITIALIZE_A_PRIMARY_QUEUE_ON_STARTUP_NO_QUEUE_SERVERS_AVAILABLE
-                    .toLocalizedString()));
+                "Could not initialize a primary queue on startup. No queue servers available."));
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.QueueManagerImpl_UNABLE_TO_INITIALIZE_ENOUGH_REDUNDANT_QUEUES_ON_STARTUP_THE_REDUNDANCY_COUNT_IS_CURRENTLY_0,
-          getCurrentRedundancy()));
+      logger.warn(
+          "Unable to initialize enough redundant queues on startup. The redundancy count is currently {}.",
+          getCurrentRedundancy());
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_REDUNDANT_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
+        logger.info(
+            "SubscriptionManager redundancy satisfier - redundant endpoint has been lost. Attempting to recover.");
-          LocalizedStrings.QueueManagerImpl_COULD_NOT_FIND_SERVER_TO_CREATE_REDUNDANT_CLIENT_QUEUE);
+          "Could not find any server to host redundant client queue. Number of excluded servers is %s and exception is %s");
-            logger.info(LocalizedMessage.create(
-                LocalizedStrings.QueueManagerImpl_REDUNDANCY_LEVEL_0_IS_NOT_SATISFIED_BUT_THERE_ARE_NO_MORE_SERVERS_AVAILABLE_REDUNDANCY_IS_CURRENTLY_1,
-                new Object[] {redundancyLevel, getCurrentRedundancy()}));
+            logger.info(
+                "Redundancy level {} is not satisfied, but there are no more servers available. Redundancy is currently {}.",
+                new Object[] {redundancyLevel, getCurrentRedundancy()});
-          LocalizedStrings.QueueManagerImpl_COULD_NOT_FIND_SERVER_TO_CREATE_PRIMARY_CLIENT_QUEUE);
+          "Could not find any server to host primary client queue. Number of excluded servers is %s and exception is %s");
-      boolean printErrorMessage, StringId msgId) {
+      boolean printErrorMessage, String msg) {
-        logger.error(LocalizedMessage.create(msgId,
+        logger.error(msg,
-                (ex != null ? ex.getMessage() : "no exception")}));
+                (ex != null ? ex.getMessage() : "no exception")});
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER));
+      logger.info(
+          "SubscriptionManager redundancy satisfier - primary endpoint has been lost. Attempting to recover.");
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.QueueManagerImpl_UNABLE_TO_CREATE_A_SUBSCRIPTION_CONNECTION_TO_SERVER_0,
-            connection.getEndpoint()));
+        logger.warn("unable to create a subscription connection to server {}",
+            connection.getEndpoint());
-      logger.warn(LocalizedMessage.create(
-          LocalizedStrings.QueueManagerImpl_QUEUEMANAGERIMPL_FAILED_TO_RECOVER_INTEREST_TO_SERVER_0,
-          newConnection.getServer()), t);
+      logger.warn("QueueManagerImpl failed to recover interest to server " +
+          newConnection.getServer(),
+          t);
-  protected void logError(StringId message, Throwable t) {
+  protected void logError(String message, Throwable t) {
-          logError(LocalizedStrings.QueueManagerImpl_ERROR_IN_REDUNDANCY_SATISFIER, t);
+          logError("Error in redundancy satisfier", t);

UPD43 UPD42 UPD43 MOV32 UPD42 UPD42 UPD42 UPD42 INS45 MOV16 INS42 MOV32 INS45 MOV42 UPD42 UPD42 INS45 INS45 INS45 INS45 MOV32 INS45 INS45 INS45 MOV32 MOV32 INS27 INS45 UPD42 UPD42 UPD42 UPD42 UPD42 INS45 INS45 MOV32 INS27 INS45 INS45 MOV32 INS45 MOV42 INS45 INS45 INS27 MOV32 INS45 MOV32 UPD42 UPD42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40