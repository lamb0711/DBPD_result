Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * {@link ClientMembershipListener}, providing a facade that makes both appear
- * as a single <code>MembershipListener</code> . This includes adapting
- * <code>ClientMembershipListener</code> events to appear as events for the
- * <code>MembershipListener</code>.
+ * {@link ClientMembershipListener}, providing a facade that makes both appear as a single
+ * <code>MembershipListener</code> . This includes adapting <code>ClientMembershipListener</code>
+ * events to appear as events for the <code>MembershipListener</code>.
- * <code>UniversalMembershipListenerAdapter</code> implements
- * <code>MembershipListener</code>, exposing the callback in that interface as
- * methods to be overridden by implementing classes.
+ * <code>UniversalMembershipListenerAdapter</code> implements <code>MembershipListener</code>,
+ * exposing the callback in that interface as methods to be overridden by implementing classes.
- * An internal implementation of <code>ClientMembershipListener</code> is
- * registered when this class is instantiated. This implementation creates a
- * {@link org.apache.geode.management.membership.MembershipEvent} and calls
- * the corresponding <code>MembershipListener</code> public methods on
- * <code>UniversalMembershipListenerAdapter</code>.The
- * <code>ClientMembershipEvent</code>s are wrapped to appear as
- * <code>MembershipEvent</code>s. In this way, both types of membership events
+ * An internal implementation of <code>ClientMembershipListener</code> is registered when this class
+ * is instantiated. This implementation creates a
+ * {@link org.apache.geode.management.membership.MembershipEvent} and calls the corresponding
+ * <code>MembershipListener</code> public methods on
+ * <code>UniversalMembershipListenerAdapter</code>.The <code>ClientMembershipEvent</code>s are
+ * wrapped to appear as <code>MembershipEvent</code>s. In this way, both types of membership events
- * Any CacheServer using the <code>UniversalMembershipListenerAdapter</code>
- * will receive notifications of peer membership changes and client membership
- * changes through a single listener.
+ * Any CacheServer using the <code>UniversalMembershipListenerAdapter</code> will receive
+ * notifications of peer membership changes and client membership changes through a single listener.
- * Any cache client using the <code>UniversalMembershipListenerAdapter</code>
- * would receive notifications of cache server connection changes. If that cache
- * client also creates a connection to the GemFire
- * {@link org.apache.geode.distributed.DistributedSystem}, then it will also
- * register the adapter for membership events. But it wont be an automatic
- * process. User needs to register the UniversalMembershipListenerAdapter with
- * ManagementService to receive membership events. How to register
- * UniversalMembershipListenerAdapter with ManagementService is explained below.
+ * Any cache client using the <code>UniversalMembershipListenerAdapter</code> would receive
+ * notifications of cache server connection changes. If that cache client also creates a connection
+ * to the GemFire {@link org.apache.geode.distributed.DistributedSystem}, then it will also register
+ * the adapter for membership events. But it wont be an automatic process. User needs to register
+ * the UniversalMembershipListenerAdapter with ManagementService to receive membership events. How
+ * to register UniversalMembershipListenerAdapter with ManagementService is explained below.
- * Subclasses of <code>UniversalMembershipListenerAdapter</code> may be
- * registered as a <code>MembershipListener</code> using
- * {@link org.apache.geode.management.ManagementService#addMembershipListener}
- * .It is best, however, to register the listener using
- * {@link #registerMembershipListener} since this allows the adapter to prevent
- * duplicate events for members that are both a peer member and a client.
+ * Subclasses of <code>UniversalMembershipListenerAdapter</code> may be registered as a
+ * <code>MembershipListener</code> using
+ * {@link org.apache.geode.management.ManagementService#addMembershipListener} .It is best, however,
+ * to register the listener using {@link #registerMembershipListener} since this allows the adapter
+ * to prevent duplicate events for members that are both a peer member and a client.
- * Simply constructing the <code>UniversalMembershipListenerAdapter</code>
- * results in the underlying <code>ClientMembershipListener</code> also being
- * registered.
+ * Simply constructing the <code>UniversalMembershipListenerAdapter</code> results in the underlying
+ * <code>ClientMembershipListener</code> also being registered.
- * <code>UniversalMembershipListenerAdapter</code>. The code in this example
- * assumes that the class MyMembershipListenerImpl extends
- * <code>UniversalMembershipListenerAdapter</code>:
+ * <code>UniversalMembershipListenerAdapter</code>. The code in this example assumes that the class
+ * MyMembershipListenerImpl extends <code>UniversalMembershipListenerAdapter</code>:
- * <code>MembershipEvent</code>s and <code>ClientMembershipEvent</code>s. The
- * latter will appear to be <code>MembershipEvent</code>s.
+ * <code>MembershipEvent</code>s and <code>ClientMembershipEvent</code>s. The latter will appear to
+ * be <code>MembershipEvent</code>s.
- * <code>UniversalMembershipListenerAdapter</code>, where
- * MyMembershipListenerImpl is a subclass.Simply by constructing this subclass
- * of <code>UniversalMembershipListenerAdapter</code> it is registering itself
- * as a <code>ClientMembershipListener</code>:
+ * <code>UniversalMembershipListenerAdapter</code>, where MyMembershipListenerImpl is a
+ * subclass.Simply by constructing this subclass of <code>UniversalMembershipListenerAdapter</code>
+ * it is registering itself as a <code>ClientMembershipListener</code>:
- * A client that also connects to the <code>DistributedSystem</code> could
- * register with the<code>ManagementService</code> as shown above.
+ * A client that also connects to the <code>DistributedSystem</code> could register with
+ * the<code>ManagementService</code> as shown above.
- * It is recommended that subclasses register with the
- * <code>ManagementService</code> using {@link #registerMembershipListener}, as
- * this will prevent duplicate events for members that are both clients and peer
- * members.If duplicate events are acceptable, you may register subclasses using
- * {@link org.apache.geode.management.ManagementService#addMembershipListener
+ * It is recommended that subclasses register with the <code>ManagementService</code> using
+ * {@link #registerMembershipListener}, as this will prevent duplicate events for members that are
+ * both clients and peer members.If duplicate events are acceptable, you may register subclasses
+ * using {@link org.apache.geode.management.ManagementService#addMembershipListener
-public abstract class UniversalMembershipListenerAdapter implements MembershipListener{
-  
+public abstract class UniversalMembershipListenerAdapter implements MembershipListener {
+
-   * Default number of historical events to track in order to avoid duplicate
-   * events for members that are both clients and peer members; value is 100.
+   * Default number of historical events to track in order to avoid duplicate events for members
+   * that are both clients and peer members; value is 100.
-  
+
-  private final Map<String,Boolean> eventJoined; // key: memberId, value: Boolean
-  
-  
+  private final Map<String, Boolean> eventJoined; // key: memberId, value: Boolean
+
+
-  
+
-   * @param historySize
-   *          number of historical events to track in order to avoid duplicate
-   *          events for members that are both client and peer members; must a
-   *          number between 10 and <code>Integer.MAX_INT</code>
-   * @throws IllegalArgumentException
-   *           if historySize is less than 10
+   * @param historySize number of historical events to track in order to avoid duplicate events for
+   *        members that are both client and peer members; must a number between 10 and
+   *        <code>Integer.MAX_INT</code>
+   * @throws IllegalArgumentException if historySize is less than 10
-      throw new IllegalArgumentException(LocalizedStrings.UniversalMembershipListenerAdapter_ARGUMENT_HISTORYSIZE_MUST_BE_BETWEEN_10_AND_INTEGERMAX_INT_0.toLocalizedString(Integer.valueOf(historySize)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.UniversalMembershipListenerAdapter_ARGUMENT_HISTORYSIZE_MUST_BE_BETWEEN_10_AND_INTEGERMAX_INT_0
+              .toLocalizedString(Integer.valueOf(historySize)));
-    this.eventJoined = new HashMap<String,Boolean>();
+    this.eventJoined = new HashMap<String, Boolean>();
-  
+
-   * Registers this adapter with the <code>ManagementService</code>. Registering
-   * in this way allows the adapter to ensure that callback will not be invoked
-   * twice for members that have a client connection and a peer connection. If
-   * you register with
-   * {@link org.apache.geode.management.ManagementService#addMembershipListener}
-   * then duplicate events may occur for members that are both client and peer.
+   * Registers this adapter with the <code>ManagementService</code>. Registering in this way allows
+   * the adapter to ensure that callback will not be invoked twice for members that have a client
+   * connection and a peer connection. If you register with
+   * {@link org.apache.geode.management.ManagementService#addMembershipListener} then duplicate
+   * events may occur for members that are both client and peer.
-   * Unregisters this adapter with the <code>ManagementService</code>. If
-   * registration is performed with {@link #registerMembershipListener} then
-   * this method must be used to successfully unregister the adapter.
+   * Unregisters this adapter with the <code>ManagementService</code>. If registration is performed
+   * with {@link #registerMembershipListener} then this method must be used to successfully
+   * unregister the adapter.
-   * Registers this adapter as a <code>ClientMembershipListener</code>.
-   * Registration is automatic when constructing this adapter, so this call is
-   * not necessary unless it was previously unregistered by calling
-   * {@link #unregisterClientMembershipListener}.
+   * Registers this adapter as a <code>ClientMembershipListener</code>. Registration is automatic
+   * when constructing this adapter, so this call is not necessary unless it was previously
+   * unregistered by calling {@link #unregisterClientMembershipListener}.
-  
+
-   * Invoked when a member has joined the distributed system. Also invoked when
-   * a client has connected to this process or when this process has connected
-   * to a <code>CacheServer</code>.
+   * Invoked when a member has joined the distributed system. Also invoked when a client has
+   * connected to this process or when this process has connected to a <code>CacheServer</code>.
-  public void memberJoined(MembershipEvent event) {
-  }
+  public void memberJoined(MembershipEvent event) {}
-   * Invoked when a member has gracefully left the distributed system. Also
-   * invoked when a client has gracefully disconnected from this process. or
-   * when this process has gracefully disconnected from a
-   * <code>CacheServer</code>.
+   * Invoked when a member has gracefully left the distributed system. Also invoked when a client
+   * has gracefully disconnected from this process. or when this process has gracefully disconnected
+   * from a <code>CacheServer</code>.
-  public void memberLeft(MembershipEvent event) {
-  }
+  public void memberLeft(MembershipEvent event) {}
-   * Invoked when a member has unexpectedly left the distributed system. Also
-   * invoked when a client has unexpectedly disconnected from this process or
-   * when this process has unexpectedly disconnected from a
-   * <code>CacheServer</code>.
+   * Invoked when a member has unexpectedly left the distributed system. Also invoked when a client
+   * has unexpectedly disconnected from this process or when this process has unexpectedly
+   * disconnected from a <code>CacheServer</code>.
-  public void memberCrashed(MembershipEvent event) {
-  }
-  
+  public void memberCrashed(MembershipEvent event) {}
+
-     * Returns true if the member is a client to a CacheServer hosted by this
-     * process. Returns false if the member is a CacheServer that this process
-     * is connected to.
+     * Returns true if the member is a client to a CacheServer hosted by this process. Returns false
+     * if the member is a CacheServer that this process is connected to.
-  private final ClientMembershipListener clientMembershipListener =
-  new ClientMembershipListener() {
+  private final ClientMembershipListener clientMembershipListener = new ClientMembershipListener() {
+
+
-  
+
-            Assert.assertTrue(eventHistory.remove(memberId), "Failed to replace entry in eventHistory for " + memberId);
-            Assert.assertTrue(eventJoined.remove(memberId) != null, "Failed to replace entry in eventJoined for "
-                + memberId);
+            Assert.assertTrue(eventHistory.remove(memberId),
+                "Failed to replace entry in eventHistory for " + memberId);
+            Assert.assertTrue(eventJoined.remove(memberId) != null,
+                "Failed to replace entry in eventJoined for " + memberId);
-          Assert.assertTrue(eventHistory.size() <= historySize, "Attempted to grow eventHistory beyond maximum of "
-              + historySize);
+          Assert.assertTrue(eventHistory.size() <= historySize,
+              "Attempted to grow eventHistory beyond maximum of " + historySize);

MOV44 MOV44 MOV44 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66