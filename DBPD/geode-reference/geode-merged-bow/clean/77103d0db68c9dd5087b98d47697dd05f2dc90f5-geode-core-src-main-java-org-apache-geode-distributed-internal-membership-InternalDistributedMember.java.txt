GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier (#4230)

* GEODE-7358: Membership code should use InternalDistributedMember as the membership identifier

Initial refactor: removal of NetMember, MemberAttributes and other classes that subordinated GMS
identifiers.  Repurposing GMSMember as a data packet to hold information required in a membership
identifer.

* fixing failing tests

* fixing failing unit tests

* picking up a change that IntelliJ didn't auto-save & fixing serializables test

* fixing problems with durable client ids

these identifiers morph after the client's membership identifier has been formed
so the member ID needs to be updated before serializing it

* fixing merge error

* updating sanctionedDataSerializables

* fixing lgtm complaint

* removing unnecessary serialization/deserialization methods in GMSUtil

* remove methods no longer needed for serializing an object with a different DSFID

* fixing serializables test

+import org.apache.geode.distributed.internal.membership.gms.api.MemberData;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberDataBuilder;
+import org.apache.geode.distributed.internal.membership.gms.api.MemberIdentifier;
-public class InternalDistributedMember implements DistributedMember, Externalizable,
+public class InternalDistributedMember
+    implements DistributedMember, MemberIdentifier, Externalizable,
-  protected NetMember netMbr; // the underlying member object
+  private MemberData memberData; // the underlying member object
-    return netMbr.getProcessId();
+    return memberData.getProcessId();
+  }
+
+  @Override
+  public int compareTo(DistributedMember o) {
+    return compareTo(o, false, true);
+  }
+
+  public void setDurableTimeout(int newValue) {
+    memberData.setDurableTimeout(newValue);
+  }
+
+  public void setDurableId(String id) {
+    memberData.setDurableId(id);
-    netMbr.setProcessId(OSProcess.getId());
+    memberData.setProcessId(OSProcess.getId());
-        netMbr.setHostName(SocketCreator.getHostName(SocketCreator.getLocalHost()));
+        memberData.setHostName(SocketCreator.getHostName(SocketCreator.getLocalHost()));
-        netMbr.setHostName(SocketCreator.getLocalHost().getHostAddress());
+        memberData.setHostName(SocketCreator.getLocalHost().getHostAddress());
-  // Used only by Externalization
+  // Used only by deserialization
-   * Construct a InternalDistributedMember. All fields are specified.
+   * Construct a InternalDistributedMember
-   * @param p the membership port
+   * @param membershipPort the membership port
-   * @param attr the member's attributes
-  public InternalDistributedMember(InetAddress i, int p, boolean splitBrainEnabled,
-      boolean canBeCoordinator, MemberAttributes attr) {
+  public InternalDistributedMember(InetAddress i, int membershipPort, boolean splitBrainEnabled,
+      boolean canBeCoordinator) {
-    this.netMbr = NetMemberFactory.newNetMember(i, hostName, p, splitBrainEnabled, canBeCoordinator,
-        Version.CURRENT_ORDINAL,
-        attr);
-
-    short version = netMbr.getVersionOrdinal();
-    try {
-      this.versionObj = Version.fromOrdinal(version);
-    } catch (UnsupportedSerializationVersionException e) {
-      this.versionObj = Version.CURRENT;
-    }
-    // checkHostName();
+    this.memberData = MemberDataBuilder.newBuilder(i, hostName)
+        .setMembershipPort(membershipPort)
+        .setNetworkPartitionDetectionEnabled(splitBrainEnabled)
+        .setPreferredForCoordinator(canBeCoordinator)
+        .build();
+    this.versionObj = Version.CURRENT;
-   * Construct a InternalDistributedMember based on the given NetMember.
+   * Construct a InternalDistributedMember based on the given member data.
-  public InternalDistributedMember(NetMember m) {
-    netMbr = m;
+  public InternalDistributedMember(MemberData m) {
+    memberData = m;
-    if (netMbr.getHostName() == null || netMbr.isPartial()) {
+    if (memberData.getHostName() == null || memberData.isPartial()) {
-      netMbr.setHostName(hostName);
+      memberData.setHostName(hostName);
-   * Replace the current NetMember with the given member. This can be used to fill out an
-   * InternalDistributedMember that was created from a partial NetMember created by
+   * Replace the current member data with the given member data. This can be used to fill out an
+   * InternalDistributedMember that was created from a partial data created by
-   * @param m the replacement NetMember
+   * @param m the replacement member data
-  public void setNetMember(NetMember m) {
-    this.netMbr = m;
+  public void setMemberData(MemberData m) {
+    this.memberData = m;
-   * @param i the hostname, must be for the current host
+   * @param i the hostname, stored in the member ID but not resolved - local host inet addr is used
-   * @throws UnknownHostException if the given hostname cannot be resolved
+   * @throws RuntimeException if the given hostname cannot be resolved
+  @VisibleForTesting
-    this(NetMemberFactory.newNetMember(i, p));
+    this(MemberDataBuilder.newBuilderForLocalHost(i)
+        .setMembershipPort(p)
+        .build());
-   * Creates a new InternalDistributedMember for use in notifying membership listeners. The version
-   * information in the ID is set to Version.CURRENT.
+   * Creates a new InternalDistributedMember for use in notifying listeners in client
+   * caches. The version information in the ID is set to Version.CURRENT.
-    netMbr =
-        NetMemberFactory.newNetMember(addr, location.getHostName(), location.getPort(), false, true,
-            Version.CURRENT_ORDINAL, MemberAttributes.DEFAULT);
+    memberData = MemberDataBuilder.newBuilder(addr, location.getHostName())
+        .setMembershipPort(location.getPort())
+        .setNetworkPartitionDetectionEnabled(false)
+        .setPreferredForCoordinator(true)
+        .build();
-   * @param p the membership listening port
-   * @param n gemfire properties connection name
+   * @param p the membership port
+   * @param n member name
-    MemberAttributes mattr = new MemberAttributes(p, org.apache.geode.internal.OSProcess.getId(),
-        vmKind, -1, n, groups, attr);
-    netMbr = NetMemberFactory
-        .newNetMember(addr, host, p, false, true, Version.CURRENT_ORDINAL, mattr);
+    MemberDataBuilder builder = MemberDataBuilder.newBuilder(addr, host)
+        .setName(n)
+        .setMembershipPort(p)
+        .setDirectChannelPort(p)
+        .setPreferredForCoordinator(false)
+        .setNetworkPartitionDetectionEnabled(true)
+        .setVmKind(vmKind)
+        .setGroups(groups);
+    if (attr != null) {
+      builder.setDurableId(attr.getId())
+          .setDurableTimeout(attr.getTimeout());
+    }
+    memberData = builder.build();
-    netMbr.setName(n);
-    netMbr.setVmKind(vmKind);
-    netMbr.setDirectPort(p);
-    netMbr.setDurableClientAttributes(attr);
-    netMbr.setGroups(groups);
-   * Create a InternalDistributedMember referring to the current host (as defined by the given
-   * address).
+   * Create a InternalDistributedMember
-   * @param i the hostname, must be for the current host
+   * @param i the host address
-    netMbr = NetMemberFactory.newNetMember(i, p);
+    memberData = MemberDataBuilder.newBuilder(i, "localhost")
+        .setMembershipPort(p)
+        .build();
-    netMbr = NetMemberFactory.newNetMember(addr, p);
+    memberData = MemberDataBuilder.newBuilder(addr, "localhost")
+        .setMembershipPort(p).build();
-    return netMbr.getInetAddress();
-  }
-
-  public NetMember getNetMember() {
-    return netMbr;
+    return memberData.getInetAddress();
-  public int getPort() {
-    return netMbr.getPort();
+  public int getMembershipPort() {
+    return memberData.getMembershipPort();
+  @Override
+  public short getVersionOrdinal() {
+    return versionObj == null ? memberData.getVersionOrdinal() : versionObj.ordinal();
+  }
-    return netMbr.getDirectPort();
+    return memberData.getDirectChannelPort();
-    return netMbr.getVmKind();
+    return memberData.getVmKind();
+  }
+
+  @Override
+  public int getMemberWeight() {
+    return memberData.getMemberWeight();
-    return netMbr.getVmViewId();
+    return memberData.getVmViewId();
+  }
+
+  @Override
+  public boolean preferredForCoordinator() {
+    return memberData.isPreferredForCoordinator();
-        final String[] tmpRoles = netMbr.getGroups();
+        final String[] tmpRoles = memberData.getGroups();
-    return Collections.unmodifiableList(Arrays.asList(netMbr.getGroups()));
+    return Collections.unmodifiableList(Arrays.asList(memberData.getGroups()));
-      netMbr.setGroups(newGroups);
+      memberData.setGroups(newGroups);
+  @Override
-    netMbr.setVmViewId(p);
+    memberData.setVmViewId(p);
+    cachedToString = null;
+  }
+
+  @Override
+  public void setPreferredForCoordinator(boolean preferred) {
+    memberData.setPreferredForCoordinator(preferred);
+    cachedToString = null;
+  }
+
+  @Override
+  public void setDirectChannelPort(int dcPort) {
+    memberData.setDirectChannelPort(dcPort);
+    cachedToString = null;
+  }
+
+  @Override
+  public void setVmKind(int dmType) {
+    memberData.setVmKind(dmType);
-    String result = netMbr.getName();
+    String result = memberData.getName();
-    DurableClientAttributes attributes = netMbr.getDurableClientAttributes();
-    if (attributes == null) {
-      attributes = new DurableClientAttributes("", 300);
-      netMbr.setDurableClientAttributes(attributes);
+    String durableId = memberData.getDurableId();
+    if (durableId == null || durableId.isEmpty()) {
+      return new DurableClientAttributes("", 300);
-    return netMbr.getDurableClientAttributes();
+    return new DurableClientAttributes(durableId, memberData.getDurableTimeout());
-  /**
-   * implements the java.lang.Comparable interface
-   *
-   * @see java.lang.Comparable
-   * @param o - the Object to be compared
-   * @return a negative integer, zero, or a positive integer as this object is less than, equal to,
-   *         or greater than the specified object.
-   * @exception java.lang.ClassCastException - if the specified object's type prevents it from being
-   *            compared to this Object.
-   */
-  @Override
-  public int compareTo(DistributedMember o) {
-    return compareTo(o, true);
-  }
-
-  public int compareTo(DistributedMember o, boolean checkNetMembersIfEqual) {
-    return compareTo(o, checkNetMembersIfEqual, true);
-  }
-
-  public int compareTo(DistributedMember o, boolean checkNetMembersIfEqual, boolean verifyViewId) {
+  public int compareTo(DistributedMember o, boolean compareMemberData, boolean compareViewIds) {
-    int myPort = getPort();
-    int otherPort = other.getPort();
+    int myPort = getMembershipPort();
+    int otherPort = other.getMembershipPort();
-      if (verifyViewId) {
+      if (compareViewIds) {
-    if (checkNetMembersIfEqual && this.netMbr != null && other.netMbr != null) {
-      return this.netMbr.compareAdditionalData(other.netMbr);
+    if (compareMemberData && this.memberData != null && other.memberData != null) {
+      return this.memberData.compareAdditionalData(other.memberData);
-
-    // purposely avoid comparing roles
-    // @todo Add durableClientAttributes to compare
-    int myPort = getPort();
-    int otherPort = other.getPort();
+    int myPort = getMembershipPort();
+    int otherPort = other.getMembershipPort();
-    if (this.netMbr != null && other.netMbr != null) {
-      if (0 != this.netMbr.compareAdditionalData(other.netMbr)) {
+    if (this.memberData != null && other.memberData != null) {
+      if (0 != this.memberData.compareAdditionalData(other.memberData)) {
-    result = result + netMbr.getInetAddress().hashCode();
-    result = result + getPort();
+    result = result + memberData.getInetAddress().hashCode();
+    result = result + getMembershipPort();
-      short version = netMbr.getVersionOrdinal();
+      short version = memberData.getVersionOrdinal();
-      // if (netMbr instanceof GMSMember) {
-      // sb.append("(UUID=").append(((GMSMember)netMbr).getUUID()).append(")");
-      // }
-
-      String hostName = netMbr.getHostName();
+      String hostName = memberData.getHostName();
-    int vmPid = netMbr.getProcessId();
-    int vmKind = netMbr.getVmKind();
+    int vmPid = memberData.getProcessId();
+    int vmKind = memberData.getVmKind();
-    if (vmKind != ClusterDistributionManager.LONER_DM_TYPE && netMbr.preferredForCoordinator()) {
+    if (vmKind != ClusterDistributionManager.LONER_DM_TYPE
+        && memberData.isPreferredForCoordinator()) {
-    sb.append(getPort());
+    sb.append(getMembershipPort());
-    Assert.assertTrue(netMbr.getVmKind() > 0);
+    Assert.assertTrue(memberData.getVmKind() > 0);
-    out.writeInt(getPort());
+    out.writeInt(getMembershipPort());
-    DataSerializer.writeString(netMbr.getHostName(), out);
+    DataSerializer.writeString(memberData.getHostName(), out);
-    if (netMbr.isNetworkPartitionDetectionEnabled())
+    if (memberData.isNetworkPartitionDetectionEnabled())
-    if (netMbr.preferredForCoordinator())
+    if (memberData.isPreferredForCoordinator())
-    out.writeInt(netMbr.getDirectPort());
-    out.writeInt(netMbr.getProcessId());
-    out.writeInt(netMbr.getVmKind());
-    out.writeInt(netMbr.getVmViewId());
-    DataSerializer.writeStringArray(netMbr.getGroups(), out);
+    out.writeInt(memberData.getDirectChannelPort());
+    out.writeInt(memberData.getProcessId());
+    out.writeInt(memberData.getVmKind());
+    out.writeInt(memberData.getVmViewId());
+    DataSerializer.writeStringArray(memberData.getGroups(), out);
-    DataSerializer.writeString(netMbr.getName(), out);
+    DataSerializer.writeString(memberData.getName(), out);
-    DurableClientAttributes attributes = netMbr.getDurableClientAttributes();
-    DataSerializer.writeString(attributes == null ? "" : attributes.getId(), out);
-    DataSerializer.writeInteger(Integer.valueOf(attributes == null ? 300 : attributes.getTimeout()),
+    String durableId = memberData.getDurableId();
+    DataSerializer.writeString(durableId == null ? "" : durableId, out);
+    DataSerializer.writeInteger(
+        Integer.valueOf(durableId == null ? 300 : memberData.getDurableTimeout()),
-    Version.writeOrdinal(out, netMbr.getVersionOrdinal(), true);
-    netMbr.writeAdditionalData(out);
+    Version.writeOrdinal(out, memberData.getVersionOrdinal(), true);
+    memberData.writeAdditionalData(out);
-    DurableClientAttributes durableClientAttributes =
-        new DurableClientAttributes(durableId, durableTimeout);
-    netMbr = NetMemberFactory.newNetMember(inetAddr, hostName, port, sbEnabled, elCoord, version,
-        new MemberAttributes(dcPort, vmPid, vmKind, vmViewId, name, groups,
-            durableClientAttributes));
+    memberData = MemberDataBuilder.newBuilder(inetAddr, hostName)
+        .setMembershipPort(port)
+        .setDirectChannelPort(dcPort)
+        .setName(name)
+        .setNetworkPartitionDetectionEnabled(sbEnabled)
+        .setPreferredForCoordinator(elCoord)
+        .setVersionOrdinal(version)
+        .setVmPid(vmPid)
+        .setVmKind(vmKind)
+        .setVmViewId(vmViewId)
+        .setGroups(groups)
+        .setDurableId(durableId)
+        .setDurableTimeout(durableTimeout)
+        .build();
-        netMbr.readAdditionalData(in);
+        memberData.readAdditionalData(in);
-
-    Assert.assertTrue(netMbr.getVmKind() > 0);
+    Assert.assertTrue(memberData.getVmKind() > 0);
-    if (netMbr.getVersionOrdinal() >= Version.GFE_90.ordinal()) {
-      getNetMember().writeAdditionalData(out);
+    if (memberData.getVersionOrdinal() >= Version.GFE_90.ordinal()) {
+      getMemberData().writeAdditionalData(out);
-    out.writeInt(getPort());
+    out.writeInt(getMembershipPort());
-    DataSerializer.writeString(netMbr.getHostName(), out);
+    DataSerializer.writeString(memberData.getHostName(), out);
-    if (netMbr.isNetworkPartitionDetectionEnabled())
+    if (memberData.isNetworkPartitionDetectionEnabled())
-    if (netMbr.preferredForCoordinator())
+    if (memberData.isPreferredForCoordinator())
-    out.writeInt(netMbr.getDirectPort());
-    out.writeInt(netMbr.getProcessId());
-    int vmKind = netMbr.getVmKind();
+    out.writeInt(memberData.getDirectChannelPort());
+    out.writeInt(memberData.getProcessId());
+    int vmKind = memberData.getVmKind();
-    DataSerializer.writeStringArray(netMbr.getGroups(), out);
+    DataSerializer.writeStringArray(memberData.getGroups(), out);
-    DataSerializer.writeString(netMbr.getName(), out);
+    DataSerializer.writeString(memberData.getName(), out);
-      DataSerializer.writeString(String.valueOf(netMbr.getVmViewId()), out);
+      DataSerializer.writeString(String.valueOf(memberData.getVmViewId()), out);
-    DurableClientAttributes durableClientAttributes = netMbr.getDurableClientAttributes();
-    DataSerializer
-        .writeString(durableClientAttributes == null ? "" : durableClientAttributes.getId(), out);
-    DataSerializer.writeInteger(Integer.valueOf(
-        durableClientAttributes == null ? 300 : durableClientAttributes.getTimeout()), out);
+    String durableId = memberData.getDurableId();
+    DataSerializer.writeString(durableId == null ? "" : durableId, out);
+    DataSerializer.writeInteger(
+        Integer.valueOf(durableId == null ? 300 : memberData.getDurableTimeout()),
+        out);
-    short version = netMbr.getVersionOrdinal();
+    short version = memberData.getVersionOrdinal();
-    Assert.assertTrue(netMbr.getVmKind() > 0);
+    Assert.assertTrue(memberData.getVmKind() > 0);
-    out.writeInt(getPort());
+    out.writeInt(getMembershipPort());
-    DataSerializer.writeString(netMbr.getHostName(), out);
+    DataSerializer.writeString(memberData.getHostName(), out);
-    if (netMbr.isNetworkPartitionDetectionEnabled())
+    if (memberData.isNetworkPartitionDetectionEnabled())
-    if (netMbr.preferredForCoordinator())
+    if (memberData.isPreferredForCoordinator())
-    out.writeInt(netMbr.getDirectPort());
-    out.writeInt(netMbr.getProcessId());
-    out.writeByte(netMbr.getVmKind());
-    DataSerializer.writeStringArray(netMbr.getGroups(), out);
+    out.writeInt(memberData.getDirectChannelPort());
+    out.writeInt(memberData.getProcessId());
+    out.writeByte(memberData.getVmKind());
+    DataSerializer.writeStringArray(memberData.getGroups(), out);
-    DataSerializer.writeString(netMbr.getName(), out);
-    int vmKind = netMbr.getVmKind();
+    DataSerializer.writeString(memberData.getName(), out);
+    int vmKind = memberData.getVmKind();
-      DataSerializer.writeString(String.valueOf(netMbr.getVmViewId()), out);
+      DataSerializer.writeString(String.valueOf(memberData.getVmViewId()), out);
-    DurableClientAttributes durableClientAttributes = netMbr.getDurableClientAttributes();
-    DataSerializer
-        .writeString(durableClientAttributes == null ? "" : durableClientAttributes.getId(), out);
-    DataSerializer.writeInteger(Integer.valueOf(
-        durableClientAttributes == null ? 300 : durableClientAttributes.getTimeout()), out);
+    String durableId = memberData.getDurableId();
+    DataSerializer.writeString(durableId == null ? "" : durableId, out);
+    DataSerializer.writeInteger(
+        Integer.valueOf(durableId == null ? 300 : memberData.getDurableTimeout()),
+        out);
-
-    if (getNetMember().getVersionOrdinal() >= Version.GFE_90.ordinal()) {
+    if (getMemberData().getVersionOrdinal() >= Version.GFE_90.ordinal()) {
-        netMbr.readAdditionalData(in);
+        memberData.readAdditionalData(in);
-    DurableClientAttributes durableClientAttributes =
-        durableId.length() > 0 ? new DurableClientAttributes(durableId, durableTimeout) : null;
-    MemberAttributes attr = new MemberAttributes(dcPort, vmPid, vmKind, vmViewId, name, groups,
-        durableClientAttributes);
-    netMbr =
-        NetMemberFactory.newNetMember(inetAddr, hostName, port, sbEnabled, elCoord, version, attr);
+    memberData = MemberDataBuilder.newBuilder(inetAddr, hostName)
+        .setMembershipPort(port)
+        .setDirectChannelPort(dcPort)
+        .setName(name)
+        .setNetworkPartitionDetectionEnabled(sbEnabled)
+        .setPreferredForCoordinator(elCoord)
+        .setVersionOrdinal(version)
+        .setVmPid(vmPid)
+        .setVmKind(vmKind)
+        .setVmViewId(vmViewId)
+        .setGroups(groups)
+        .setDurableId(durableId)
+        .setDurableTimeout(durableTimeout)
+        .build();
-    Assert.assertTrue(netMbr.getVmKind() > 0);
+    Assert.assertTrue(memberData.getVmKind() > 0);
-    DurableClientAttributes durableClientAttributes =
-        durableId.length() > 0 ? new DurableClientAttributes(durableId, durableTimeout) : null;
-    MemberAttributes attr = new MemberAttributes(dcPort, vmPid, vmKind, vmViewId, name, groups,
-        durableClientAttributes);
-    netMbr =
-        NetMemberFactory.newNetMember(inetAddr, hostName, port, sbEnabled, elCoord, version, attr);
+    memberData = MemberDataBuilder.newBuilder(inetAddr, hostName)
+        .setMembershipPort(port)
+        .setDirectChannelPort(dcPort)
+        .setName(name)
+        .setNetworkPartitionDetectionEnabled(sbEnabled)
+        .setPreferredForCoordinator(elCoord)
+        .setVersionOrdinal(version)
+        .setVmPid(vmPid)
+        .setVmKind(vmKind)
+        .setVmViewId(vmViewId)
+        .setGroups(groups)
+        .setDurableId(durableId)
+        .setDurableTimeout(durableTimeout)
+        .build();
-    Assert.assertTrue(netMbr.getVmKind() > 0);
+    Assert.assertTrue(memberData.getVmKind() > 0);
-    MemberAttributes attr = new MemberAttributes(-1, -1, vmKind, vmViewId, name, null, null);
-    netMbr = NetMemberFactory.newNetMember(inetAddr, hostName, port, sbEnabled, elCoord,
-        InternalDataSerializer.getVersionForDataStream(in).ordinal(), attr);
+    memberData = MemberDataBuilder.newBuilder(inetAddr, hostName)
+        .setMembershipPort(port)
+        .setName(name)
+        .setNetworkPartitionDetectionEnabled(sbEnabled)
+        .setPreferredForCoordinator(elCoord)
+        .setVersionOrdinal(InternalDataSerializer.getVersionForDataStream(in).ordinal())
+        .setVmKind(vmKind)
+        .setVmViewId(vmViewId)
+        .build();
-      netMbr.readAdditionalData(in);
+      memberData.readAdditionalData(in);
-    Assert.assertTrue(netMbr.getVmKind() > 0);
+    Assert.assertTrue(memberData.getVmKind() > 0);
-    out.writeInt(getPort());
+    out.writeInt(getMembershipPort());
-    if (netMbr.isNetworkPartitionDetectionEnabled())
+    if (memberData.isNetworkPartitionDetectionEnabled())
-    if (netMbr.preferredForCoordinator())
+    if (memberData.isPreferredForCoordinator())
-    byte vmKind = netMbr.getVmKind();
+    byte vmKind = memberData.getVmKind();
-      DataSerializer.writeString(String.valueOf(netMbr.getVmViewId()), out);
+      DataSerializer.writeString(String.valueOf(memberData.getVmViewId()), out);
-    DataSerializer.writeString(netMbr.getName(), out);
+    DataSerializer.writeString(memberData.getName(), out);
-      netMbr.writeAdditionalData(out);
+      memberData.writeAdditionalData(out);
-    assert netMbr.getVmKind() == ClusterDistributionManager.LONER_DM_TYPE;
-    this.netMbr.setPort(p);
+    assert memberData.getVmKind() == ClusterDistributionManager.LONER_DM_TYPE;
+    this.memberData.setPort(p);
+  public MemberData getMemberData() {
+    return memberData;
+  }
+
+  @Override
+  public String getHostName() {
+    return memberData.getHostName();
+  }
+
+  @Override
-    return this.netMbr.getInetAddress().getCanonicalHostName();
+    return this.memberData.getInetAddress().getCanonicalHostName();
-    return netMbr.getProcessId();
+    return memberData.getProcessId();
-    short version = netMbr.getVersionOrdinal();
+    short version = memberData.getVersionOrdinal();
-    netMbr.setVersion(v);
+    memberData.setVersion(v);

INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 INS40 INS43 INS31 INS31 INS31 MOV44 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 UPD83 UPD43 INS78 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 MOV65 UPD42 INS78 MOV21 MOV29 MOV83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 MOV8 INS78 UPD42 INS78 INS83 INS39 INS42 INS8 INS78 MOV44 INS78 MOV83 INS39 UPD42 MOV42 INS44 INS8 MOV78 INS83 INS39 INS42 INS44 INS8 INS78 INS39 INS42 INS44 MOV29 MOV78 MOV43 UPD42 INS8 MOV78 INS83 INS43 INS42 INS8 MOV78 INS83 MOV43 INS42 INS8 INS78 INS43 INS78 UPD42 UPD42 INS42 INS41 INS39 INS42 INS21 INS43 INS42 INS21 INS39 INS42 MOV21 UPD43 UPD43 INS42 MOV65 INS60 INS25 INS41 INS42 INS42 INS42 INS41 INS42 INS42 INS39 INS42 INS21 INS21 INS39 INS42 INS21 INS21 INS42 INS39 INS42 INS21 INS21 MOV6 INS60 INS25 MOV41 UPD42 UPD42 INS21 INS21 INS42 INS41 INS41 INS42 INS42 INS42 INS32 INS32 INS42 INS32 UPD66 UPD42 UPD66 UPD66 UPD42 UPD66 UPD66 UPD66 UPD42 UPD66 UPD42 INS32 UPD66 UPD66 UPD66 UPD43 MOV43 INS59 INS27 INS8 INS7 UPD66 UPD66 INS32 INS16 INS32 INS32 INS7 INS32 INS7 INS32 INS7 INS43 INS59 INS27 MOV8 INS14 UPD43 UPD43 UPD43 INS7 INS7 INS42 INS32 UPD42 INS42 INS42 INS9 INS9 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS32 UPD42 UPD42 MOV42 INS32 INS42 INS33 INS21 INS42 INS32 UPD42 INS32 UPD42 INS32 UPD42 INS42 INS42 INS27 INS32 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS33 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS33 UPD42 MOV42 INS42 INS32 INS27 INS32 INS41 MOV43 INS42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS32 UPD42 INS32 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 UPD42 INS32 INS42 MOV42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS33 INS42 INS42 MOV14 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD40 UPD42 UPD42 UPD40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 INS32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS42 INS9 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS32 INS42 MOV42 INS32 INS42 MOV42 UPD42 UPD42 UPD40 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 MOV42 MOV32 INS42 INS9 INS32 INS42 MOV9 UPD42 MOV42 UPD42 MOV42 INS32 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 INS45 UPD42 MOV42 UPD42 MOV42 MOV42 INS45 UPD42 UPD42 UPD40 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS32 INS42 MOV9 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 INS42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 MOV32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV32 INS32 UPD42 MOV42 MOV42 UPD42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS32 INS42 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV42 INS32 INS42 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS32 INS42 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV42 INS32 INS42 INS42 INS32 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 DEL42 DEL43 DEL42 DEL40 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL32 DEL9 DEL9 DEL40 DEL40 DEL42 DEL42 DEL66 DEL65 DEL42 DEL43 DEL42 DEL40 DEL32 DEL42 DEL34 DEL38 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL32 DEL21 DEL66 DEL32 DEL32 DEL42 DEL42 DEL43 DEL42 DEL31 DEL39 DEL42 DEL44 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL40 DEL65 DEL42 DEL66 DEL65 DEL66 DEL66 DEL65 DEL40 DEL66 DEL66 DEL65 DEL29 DEL39 DEL42 DEL9 DEL32 DEL41 DEL39 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL32 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL8 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL14 DEL33 DEL16 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL42 DEL42 DEL14 DEL33 DEL16 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL38 DEL34 DEL38 DEL42 DEL42 DEL42 DEL33 DEL33 DEL14 DEL59 DEL60 DEL32