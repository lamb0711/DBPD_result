GEODE-6875: Remove unused & deprecated API usage (#3813)

- Fixed warnings.
- Replaced deprecated API in Http Session.
- Replaced usage of internal API in Http Session.
- Removed unused classes and methods in Http Session.
-  protected int maxActiveSessions = -1;
+  private int maxActiveSessions = -1;
-  protected Valve jvmRouteBinderValve;
+  private Valve jvmRouteBinderValve;
-  protected Valve commitSessionValve;
+  private Valve commitSessionValve;
-  protected SessionCache sessionCache;
+  private SessionCache sessionCache;
-  protected static final String DEFAULT_REGION_NAME = RegionHelper.NAME + "_sessions";
+  private static final String DEFAULT_REGION_NAME = RegionHelper.NAME + "_sessions";
-  protected static final boolean DEFAULT_ENABLE_GATEWAY_DELTA_REPLICATION = false;
+  private static final boolean DEFAULT_ENABLE_GATEWAY_REPLICATION = false;
-  protected static final boolean DEFAULT_ENABLE_GATEWAY_REPLICATION = false;
+  private static final boolean DEFAULT_ENABLE_DEBUG_LISTENER = false;
-  protected static final boolean DEFAULT_ENABLE_DEBUG_LISTENER = false;
+  private static final boolean DEFAULT_ENABLE_COMMIT_VALVE = true;
-  protected static final boolean DEFAULT_ENABLE_COMMIT_VALVE = true;
+  private static final boolean DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST = false;
-  protected static final boolean DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST = false;
-
-  protected static final boolean DEFAULT_PREFER_DESERIALIZED_FORM = true;
+  private static final boolean DEFAULT_PREFER_DESERIALIZED_FORM = true;
-  protected Log LOGGER;
+  private Log LOGGER;
-  protected String regionAttributesId; // the default is different for client-server and
-                                       // peer-to-peer
+  private String regionAttributesId; // the default is different for client-server and
+                                     // peer-to-peer
-  protected Boolean enableLocalCache; // the default is different for client-server and peer-to-peer
+  private Boolean enableLocalCache; // the default is different for client-server and peer-to-peer
-  protected boolean enableCommitValve = DEFAULT_ENABLE_COMMIT_VALVE;
+  private boolean enableCommitValve = DEFAULT_ENABLE_COMMIT_VALVE;
-  protected boolean enableCommitValveFailfast = DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST;
+  private boolean enableCommitValveFailfast = DEFAULT_ENABLE_COMMIT_VALVE_FAILFAST;
-  protected boolean enableGatewayDeltaReplication = DEFAULT_ENABLE_GATEWAY_DELTA_REPLICATION;
+  private boolean enableGatewayReplication = DEFAULT_ENABLE_GATEWAY_REPLICATION;
-  protected boolean enableGatewayReplication = DEFAULT_ENABLE_GATEWAY_REPLICATION;
+  private boolean enableDebugListener = DEFAULT_ENABLE_DEBUG_LISTENER;
-  protected boolean enableDebugListener = DEFAULT_ENABLE_DEBUG_LISTENER;
-
-  protected boolean preferDeserializedForm = DEFAULT_PREFER_DESERIALIZED_FORM;
+  private boolean preferDeserializedForm = DEFAULT_PREFER_DESERIALIZED_FORM;
+    this.rejectedSessions = new AtomicInteger(0);
-    this.sessionsToTouch = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());
+    this.sessionsToTouch = Collections.newSetFromMap(new ConcurrentHashMap<>());
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
-    this.enableGatewayDeltaReplication = enableGatewayDeltaReplication;
+    // this.enableGatewayDeltaReplication = enableGatewayDeltaReplication;
+    // Disabled. Keeping the method for backward compatibility.
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
+  @SuppressWarnings("unused")
-  public boolean isPeerToPeer() {
+  boolean isPeerToPeer() {
+  @SuppressWarnings("unused")
-      ((Context) this.container).removePropertyChangeListener(this);
+      this.container.removePropertyChangeListener(this);
-      ((Context) this.container).addPropertyChangeListener(this);
+      this.container.addPropertyChangeListener(this);
-        DeltaSessionInterface ds = (DeltaSessionInterface) session;
-        ds.setOwner(this);
-        ds.activate();
+        session.setOwner(this);
+        session.activate();
+
-  public void remove(Session session, boolean update) {
+  public void remove(Session session, @SuppressWarnings("unused") boolean update) {
-  private void incrementRejectedSessions() {
-    this.rejectedSessions.incrementAndGet();
-  }
-
-  protected void addSessionToTouch(String sessionId) {
+  void addSessionToTouch(String sessionId) {
-  protected boolean removeTouchedSession(String sessionId) {
+  boolean removeTouchedSession(String sessionId) {
-        Set<String> sessionIds = null;
-        sessionIds = new HashSet<String>(getSessionsToTouch());
+        Set<String> sessionIds;
+        sessionIds = new HashSet<>(getSessionsToTouch());
+
-    Context context = (Context) event.getSource();
-        int interval = ((Integer) event.getNewValue()).intValue();
+        int interval = (Integer) event.getNewValue();
-          interval = ((Integer) event.getOldValue()).intValue();;
+          interval = (Integer) event.getOldValue();
-  protected void doUnload() throws IOException {
+  private void doUnload() throws IOException {
+
+
+
-    getLogger().debug("Query: " + query.getQueryString());
+
+    if (getLogger().isDebugEnabled()) {
+      getLogger().debug("Query: " + query.getQueryString());
+    }
-    ArrayList<DeltaSessionInterface> list = new ArrayList<DeltaSessionInterface>();
-    Iterator<String> elements = results.iterator();
+    ArrayList<DeltaSessionInterface> list = new ArrayList<>();
+    @SuppressWarnings("unchecked")
+    Iterator<String> elements = (Iterator<String>) results.iterator();
-      oos.writeObject(new Integer(list.size()));
+      oos.writeObject(list.size());
-    // // Expire all the sessions we just wrote
-    // if (getLogger().isDebugEnabled()) {
-    // getLogger().debug("Expiring " + list.size() + " persisted sessions");
-    // }
-    // Iterator<StandardSession> expires = list.iterator();
-    // while (expires.hasNext()) {
-    // StandardSession session = expires.next();
-    // try {
-    // session.expire(false);
-    // } catch (Throwable t) {
-    //// ExceptionUtils.handleThrowable(t);
-    // } finally {
-    // session.recycle();
-    // }
-    // }
-
-  protected void doLoad() throws ClassNotFoundException, IOException {
+  private void doLoad() throws ClassNotFoundException, IOException {
-    ObjectInputStream ois = null;
+    ObjectInputStream ois;
-      Integer count = (Integer) ois.readObject();
-      int n = count.intValue();
+      int n = (Integer) ois.readObject();
-    } catch (ClassNotFoundException e) {
-      getLogger().error(e);
-      try {
-        ois.close();
-      } catch (IOException f) {
-        // Ignore
-      }
-      throw e;
-    } catch (IOException e) {
+    } catch (ClassNotFoundException | IOException e) {
-        store.delete();
+        if (!store.delete()) {
+          getLogger().warn("Couldn't delete persistent storage file " + store.getAbsolutePath());
+        }
-    File file = new File(storeDir, ctxPath.replaceAll("/", "_") + ".sessions.ser");
-    return (file);
+    return (new File(storeDir, ctxPath.replaceAll("/", "_") + ".sessions.ser"));
-    return new StringBuilder().append(getClass().getSimpleName()).append("[").append("container=")
-        .append(getTheContext()).append("; regionName=").append(this.regionName)
-        .append("; regionAttributesId=").append(this.regionAttributesId).append("]").toString();
+    return getClass().getSimpleName() + "[" + "container="
+        + getTheContext() + "; regionName=" + this.regionName
+        + "; regionAttributesId=" + this.regionAttributesId + "]";
-  protected String getContextName() {
+  String getContextName() {

INS31 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 MOV59 UPD83 MOV59 UPD83 MOV59 UPD83 MOV59 UPD83 MOV59 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 UPD83 INS79 INS79 INS79 INS79 INS79 MOV83 MOV39 MOV42 MOV44 MOV8 INS79 INS79 INS79 INS79 INS79 UPD83 UPD83 INS21 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS79 INS25 INS7 INS42 INS45 INS32 INS8 INS79 INS74 INS27 MOV22 INS14 INS32 INS42 MOV21 INS42 INS45 INS43 INS43 INS11 INS25 MOV14 MOV32 INS45 INS45 MOV32 INS45 MOV22 INS45 MOV22 INS45 INS43 INS34 INS42 UPD74 INS42 INS42 MOV74 MOV32 INS39 INS84 MOV32 INS8 INS42 UPD74 MOV22 MOV22 MOV32 UPD42 MOV43 MOV43 MOV25 INS38 UPD42 UPD42 MOV11 MOV32 INS32 MOV11 INS32 INS42 INS27 UPD74 INS42 INS45 INS32 INS42 INS42 DEL42 DEL9 DEL59 DEL83 DEL83 DEL83 DEL39 DEL23 DEL83 DEL39 DEL42 DEL42 DEL59 DEL23 DEL42 DEL43 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL31 DEL83 DEL42 DEL43 DEL11 DEL36 DEL42 DEL43 DEL11 DEL36 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL83 DEL39 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL83 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL36 DEL42 DEL32 DEL36 DEL42 DEL32 DEL20 DEL42 DEL43 DEL42 DEL43 DEL14 DEL33 DEL42 DEL43 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL44 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL14 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL32 DEL83