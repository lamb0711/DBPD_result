GEODE-1570: upgrade spring libraries

* upgrade the spring libraries and related libraries
* upgrade version numbers in the NOTICE and LICENSE file
* some test refactor

+import java.io.OutputStream;
-import java.util.Map;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.query.internal.StructImpl;
-import org.apache.geode.internal.HeapDataOutputStream;
-
-import org.springframework.hateoas.Link;
+import org.apache.geode.cache.Region;
+import org.apache.geode.internal.HeapDataOutputStream;
+
-        .createGenerator(outputStream, JsonEncoding.UTF8));
+        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
-  public static String formulateJsonForListCall(Map<String, Link> LinksByName, String keyName, String fieldName) {
-    HeapDataOutputStream outputStream = new HeapDataOutputStream(org.apache.geode.internal.Version.CURRENT);
-
-    try {
-      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
-        .createGenerator(outputStream, JsonEncoding.UTF8));
-      JsonWriter.writeListAsJson(generator, LinksByName, keyName, fieldName);
-      generator.close();
-      return new String(outputStream.toByteArray());
-    } catch (IOException e) {
-      throw new RuntimeException(e.getMessage());
-    } finally {
-      outputStream.close();
-    }
-  }
-
-        .createGenerator(outputStream, JsonEncoding.UTF8));
+        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
-        .createGenerator(outputStream, JsonEncoding.UTF8));
+        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
-  public static String formulateJsonForGetOnKey(Object value) throws JSONException {
-    HeapDataOutputStream outputStream = new HeapDataOutputStream(org.apache.geode.internal.Version.CURRENT);
-
-    try {
-      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
-        .createGenerator(outputStream, JsonEncoding.UTF8));
-      JsonWriter.writeValueAsJson(generator, value, "GET_ON_KEY_RESPONSE");
-      generator.close();
-      return new String(outputStream.toByteArray());
-    } catch (IOException e) {
-      throw new RuntimeException(e.getMessage());
-    } finally {
-      outputStream.close();
-    }
-  }
-
-  public static String formulateJsonForGetOnMultipleKey(Collection<Object> collection, String regionName) throws JSONException {
-    HeapDataOutputStream outputStream = new HeapDataOutputStream(org.apache.geode.internal.Version.CURRENT);
-
-    try {
-      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
-        .createGenerator(outputStream, JsonEncoding.UTF8));
-      generator.writeStartObject();
-      generator.writeFieldName(regionName);
-      JsonWriter.writeCollectionAsJson(generator, collection);
-      generator.writeEndObject();
-      generator.close();
-      return new String(outputStream.toByteArray());
-    } catch (IOException e) {
-      throw new RuntimeException(e.getMessage());
-    } finally {
-      outputStream.close();
-    }
-  }
-        .createGenerator(outputStream, JsonEncoding.UTF8));
+        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
-        .createGenerator(outputStream, JsonEncoding.UTF8));
+        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
-        .createGenerator(outputStream, JsonEncoding.UTF8));
+        .createGenerator((OutputStream)outputStream, JsonEncoding.UTF8));
-
-  public static String convertMapToJson(Map<?, ?> map) throws JSONException {
-    HeapDataOutputStream outputStream = new HeapDataOutputStream(org.apache.geode.internal.Version.CURRENT);
-
-    try {
-      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
-        .createGenerator(outputStream, JsonEncoding.UTF8));
-      JsonWriter.writeMapAsJson(generator, map, null);
-      generator.close();
-      return new String(outputStream.toByteArray());
-    } catch (IOException e) {
-      throw new RuntimeException(e.getMessage());
-    } finally {
-      outputStream.close();
-    }
-  }
-
-  public static String convertStructToJson(StructImpl structSet) throws JSONException {
-    HeapDataOutputStream outputStream = new HeapDataOutputStream(org.apache.geode.internal.Version.CURRENT);
-
-    try {
-      JsonGenerator generator = enableDisableJSONGeneratorFeature(getObjectMapper().getFactory()
-        .createGenerator(outputStream, JsonEncoding.UTF8));
-      JsonWriter.writeStructAsJson(generator, structSet);
-      generator.close();
-      return new String(outputStream.toByteArray());
-    } catch (IOException e) {
-      throw new RuntimeException(e.getMessage());
-    } finally {
-      outputStream.close();
-    }
-  }
-

MOV26 MOV26 MOV26 MOV31 UPD40 INS42 MOV43 MOV60 MOV60 MOV60 MOV60 MOV21 MOV41 MOV42 MOV42 INS11 INS11 INS11 INS11 INS11 INS11 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL76 DEL76 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31