Merge branch 'develop' of https://git-wip-us.apache.org/repos/asf/geode into develop

* 'develop' of https://git-wip-us.apache.org/repos/asf/geode: (57 commits)
  GEODE-2551 Fix code issues found by AppChecker
  Revert "GEODE-1887: Now Size api goes through ServerProxy when cache is of type client and DataPolicy is Empty."
  GEODE-2538: Don't deserialize values on the server when getting results
  GEODE-2461: remove json4s-ast_2.10 as explicit dependency
  GEODE-2547: Interest registration no longer causes a CacheLoader to be invoked
  GEODE-2526: Enhance log statement to include ResourceTypeName
  GEODE-880 Remove unused classes
  GEODE-2460: update dependency versions
  GEODE-1995: Removed ReliableMessageQueue, ReliableMessageQueueFactory, ReliableMessageQueueFactoryImpl and it's usage in the code from GemfireCacheImpl and DistributedRegion.
  GEODE-2550 Improve README and BUILDING
  GEODE-2538: Don't invoke a cache loader when fetching values for a lucene query
  GEODE-2404: Added support for destroying lucene indexes
  GEODE-2545: NPE during lucene query execution when cache is closing or region is destroyed
  GEODE-2515: Disabling BaseLineAndCompareQueryPerfJUnitTest
  GEODE-2142: Removing JSON licence stuff from NOTICE files
  GEODE-2142: removing tests so run precheckin
  GEODE-2142: final compiling build
  GEODE-2142: cyclical dependency in gradle build
  GEODE-2142: spotless
  GEODE-2142: Refactoring of tests to work with new JSONObject class. Changing file export to use Base64 encoding.
  ...

+/*
+ * Copyright (C) 2010 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
-/*
- * Copyright (c) 2006 JSON.org
- * 
- * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
- * associated documentation files (the "Software"), to deal in the Software without restriction,
- * including without limitation the rights to use, copy, modify, merge, publish, distribute,
- * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
- * furnished to do so, subject to the following conditions:
- * 
- * The above copyright notice and this permission notice shall be included in all copies or
- * substantial portions of the Software.
- * 
- * The Software shall be used for Good, not Evil.
- * 
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
- * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
- * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
- * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
-import java.io.StringWriter;
+// Note: this class was written without inspecting the non-free org.json sourcecode.
- * JSONStringer provides a quick and convenient way of producing JSON text. The texts produced
- * strictly conform to JSON syntax rules. No whitespace is added, so the results are ready for
- * transmission or storage. Each instance of JSONStringer can produce one JSON text.
- * <p>
- * A JSONStringer instance provides a <code>value</code> method for appending values to the text,
- * and a <code>key</code> method for adding keys before values in objects. There are
- * <code>array</code> and <code>endArray</code> methods that make and bound array values, and
- * <code>object</code> and <code>endObject</code> methods which make and bound object values. All of
- * these methods return the JSONWriter instance, permitting cascade style. For example,
+ * Implements {@link JSONObject#toString} and {@link JSONArray#toString}. Most application
+ * developers should use those methods directly and disregard this API. For example:
- * myString = new JSONStringer().object().key("JSON").value("Hello, World!").endObject().toString();
+ * JSONObject object = ...
+ * String json = object.toString();
- * 
- * which produces the string
- * 
- * <pre>
- * {"JSON":"Hello, World!"}
- * </pre>
+ *
- * The first method called must be <code>array</code> or <code>object</code>. There are no methods
- * for adding commas or colons. JSONStringer adds them for you. Objects and arrays can be nested up
- * to 20 levels deep.
+ * Stringers only encode well-formed JSON strings. In particular:
+ * <ul>
+ * <li>The stringer must have exactly one top-level array or object.
+ * <li>Lexical scopes must be balanced: every call to {@link #array} must have a matching call to
+ * {@link #endArray} and every call to {@link #object} must have a matching call to
+ * {@link #endObject}.
+ * <li>Arrays may not contain keys (property names).
+ * <li>Objects must alternate keys (property names) and values.
+ * <li>Values are inserted with either literal {@link #value(Object) value} calls, or by nesting
+ * arrays or objects.
+ * </ul>
+ * Calls that would result in a malformed JSON string will fail with a {@link JSONException}.
+ *
- * This can sometimes be easier than using a JSONObject to build a string.
- * 
- * @author JSON.org
- * @version 2008-09-18
+ * This class provides no facility for pretty-printing (ie. indenting) output. To encode indented
+ * output, use {@link JSONObject#toString(int)} or {@link JSONArray#toString(int)}.
+ *
+ * <p>
+ * Some implementations of the API support at most 20 levels of nesting. Attempts to create more
+ * than 20 levels of nesting may fail with a {@link JSONException}.
+ *
+ * <p>
+ * Each stringer may be used to encode a single top level value. Instances of this class are not
+ * thread safe. Although this class is nonfinal, it was not designed for inheritance and should not
+ * be subclassed. In particular, self-use by overrideable methods is not specified. See <i>Effective
+ * Java</i> Item 17, "Design and Document or inheritance or else prohibit it" for further
+ * information.
-public class JSONStringer extends JSONWriter {
+public class JSONStringer {
+
-   * Make a fresh JSONStringer. It can be used to build one JSON text.
+   * The output data, containing at most one top-level array or object.
-  public JSONStringer() {
-    super(new StringWriter());
+  final StringBuilder out = new StringBuilder();
+
+  /**
+   * Lexical scoping elements within this stringer, necessary to insert the appropriate separator
+   * characters (ie. commas and colons) and to detect nesting errors.
+   */
+  enum Scope {
+
+    /**
+     * An array with no elements requires no separators or newlines before it is closed.
+     */
+    EMPTY_ARRAY,
+
+    /**
+     * A array with at least one value requires a comma and newline before the next element.
+     */
+    NONEMPTY_ARRAY,
+
+    /**
+     * An object with no keys or values requires no separators or newlines before it is closed.
+     */
+    EMPTY_OBJECT,
+
+    /**
+     * An object whose most recent element is a key. The next element must be a value.
+     */
+    DANGLING_KEY,
+
+    /**
+     * An object with at least one name/value pair requires a comma and newline before the next
+     * element.
+     */
+    NONEMPTY_OBJECT,
+
+    /**
+     * A special bracketless array needed by JSONStringer.join() and JSONObject.quote() only. Not
+     * used for JSON encoding.
+     */
+    NULL,
-   * Return the JSON text. This method is used to obtain the product of the JSONStringer instance.
-   * It will return <code>null</code> if there was a problem in the construction of the JSON text
-   * (such as the calls to <code>array</code> were not properly balanced with calls to
-   * <code>endArray</code>).
-   * 
-   * @return The JSON text.
+   * Unlike the original implementation, this stack isn't limited to 20 levels of nesting.
+  private final List<Scope> stack = new ArrayList<Scope>();
+
+  /**
+   * A string containing a full set of spaces for a single level of indentation, or null for no
+   * pretty printing.
+   */
+  private final String indent;
+
+  public JSONStringer() {
+    indent = null;
+  }
+
+  JSONStringer(int indentSpaces) {
+    char[] indentChars = new char[indentSpaces];
+    Arrays.fill(indentChars, ' ');
+    indent = new String(indentChars);
+  }
+
+  /**
+   * Begins encoding a new array. Each call to this method must be paired with a call to
+   * {@link #endArray}.
+   *
+   * @return this stringer.
+   * @throws JSONException On internal errors. Shouldn't happen.
+   */
+  public JSONStringer array() throws JSONException {
+    return open(Scope.EMPTY_ARRAY, "[");
+  }
+
+  /**
+   * Ends encoding the current array.
+   *
+   * @return this stringer.
+   * @throws JSONException On internal errors. Shouldn't happen.
+   */
+  public JSONStringer endArray() throws JSONException {
+    return close(Scope.EMPTY_ARRAY, Scope.NONEMPTY_ARRAY, "]");
+  }
+
+  /**
+   * Begins encoding a new object. Each call to this method must be paired with a call to
+   * {@link #endObject}.
+   *
+   * @return this stringer.
+   * @throws JSONException On internal errors. Shouldn't happen.
+   */
+  public JSONStringer object() throws JSONException {
+    return open(Scope.EMPTY_OBJECT, "{");
+  }
+
+  /**
+   * Ends encoding the current object.
+   *
+   * @return this stringer.
+   * @throws JSONException On internal errors. Shouldn't happen.
+   */
+  public JSONStringer endObject() throws JSONException {
+    return close(Scope.EMPTY_OBJECT, Scope.NONEMPTY_OBJECT, "}");
+  }
+
+  /**
+   * Enters a new scope by appending any necessary whitespace and the given bracket.
+   */
+  JSONStringer open(Scope empty, String openBracket) throws JSONException {
+    if (stack.isEmpty() && out.length() > 0) {
+      throw new JSONException("Nesting problem: multiple top-level roots");
+    }
+    beforeValue();
+    stack.add(empty);
+    out.append(openBracket);
+    return this;
+  }
+
+  /**
+   * Closes the current scope by appending any necessary whitespace and the given bracket.
+   */
+  JSONStringer close(Scope empty, Scope nonempty, String closeBracket) throws JSONException {
+    Scope context = peek();
+    if (context != nonempty && context != empty) {
+      throw new JSONException("Nesting problem");
+    }
+
+    stack.remove(stack.size() - 1);
+    if (context == nonempty) {
+      newline();
+    }
+    out.append(closeBracket);
+    return this;
+  }
+
+  /**
+   * Returns the value on the top of the stack.
+   */
+  private Scope peek() throws JSONException {
+    if (stack.isEmpty()) {
+      throw new JSONException("Nesting problem");
+    }
+    return stack.get(stack.size() - 1);
+  }
+
+  /**
+   * Replace the value on the top of the stack with the given value.
+   */
+  private void replaceTop(Scope topOfStack) {
+    stack.set(stack.size() - 1, topOfStack);
+  }
+
+  /**
+   * Encodes {@code value}.
+   *
+   * @param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer, Long, Double or
+   *        null. May not be {@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}.
+   * @return this stringer.
+   * @throws JSONException On internal errors. Shouldn't happen.
+   */
+  public JSONStringer value(Object value) throws JSONException {
+    if (stack.isEmpty()) {
+      throw new JSONException("Nesting problem");
+    }
+
+    if (value instanceof JSONArray) {
+      ((JSONArray) value).writeTo(this);
+      return this;
+
+    } else if (value instanceof JSONObject) {
+      ((JSONObject) value).writeTo(this);
+      return this;
+    }
+
+    beforeValue();
+
+    if (value instanceof JSONString) {
+      out.append(((JSONString) value).toJSONString());
+      return this;
+    }
+
+    if (value == null || value instanceof Boolean || value == JSONObject.NULL) {
+      out.append(value);
+
+    } else if (value instanceof Number) {
+      out.append(JSONObject.numberToString((Number) value));
+
+    } else {
+      // Hack to make it possible that the value is not surrounded by quotes. (Used for JavaScript
+      // function calls)
+      // Example: { "name": "testkey", "value": window.myfunction() }
+      if (value.getClass().getSimpleName().contains("JSONFunction")) {
+        // note that no escaping of quotes (or anything else) is done in this case.
+        // that is fine because the only way to get to this point is to
+        // explicitly put a special kind of object into the JSON data structure.
+        out.append(value);
+      } else {
+        string(value.toString());
+      }
+    }
+
+    return this;
+  }
+
+  /**
+   * Encodes {@code value} to this stringer.
+   *
+   * @param value The value to encode.
+   * @return this stringer.
+   * @throws JSONException On internal errors. Shouldn't happen.
+   */
+  public JSONStringer value(boolean value) throws JSONException {
+    if (stack.isEmpty()) {
+      throw new JSONException("Nesting problem");
+    }
+    beforeValue();
+    out.append(value);
+    return this;
+  }
+
+  /**
+   * Encodes {@code value} to this stringer.
+   *
+   * @param value a finite value. May not be {@link Double#isNaN() NaNs} or
+   *        {@link Double#isInfinite() infinities}.
+   * @return this stringer.
+   * @throws JSONException On internal errors. Shouldn't happen.
+   */
+  public JSONStringer value(double value) throws JSONException {
+    if (stack.isEmpty()) {
+      throw new JSONException("Nesting problem");
+    }
+    beforeValue();
+    out.append(JSONObject.numberToString(value));
+    return this;
+  }
+
+  /**
+   * Encodes {@code value} to this stringer.
+   *
+   * @param value The value to encode.
+   * @return this stringer.
+   * @throws JSONException If we have an internal error. Shouldn't happen.
+   */
+  public JSONStringer value(long value) throws JSONException {
+    if (stack.isEmpty()) {
+      throw new JSONException("Nesting problem");
+    }
+    beforeValue();
+    out.append(value);
+    return this;
+  }
+
+  private void string(String value) {
+    out.append("\"");
+    char currentChar = 0;
+
+    for (int i = 0, length = value.length(); i < length; i++) {
+      char previousChar = currentChar;
+      currentChar = value.charAt(i);
+
+      /*
+       * From RFC 4627, "All Unicode characters may be placed within the quotation marks except for
+       * the characters that must be escaped: quotation mark, reverse solidus, and the control
+       * characters (U+0000 through U+001F)."
+       */
+      switch (currentChar) {
+        case '"':
+        case '\\':
+          out.append('\\').append(currentChar);
+          break;
+
+        case '/':
+          // it makes life easier for HTML embedding of javascript if we escape </ sequences
+          if (previousChar == '<') {
+            out.append('\\');
+          }
+          out.append(currentChar);
+          break;
+
+        case '\t':
+          out.append("\\t");
+          break;
+
+        case '\b':
+          out.append("\\b");
+          break;
+
+        case '\n':
+          out.append("\\n");
+          break;
+
+        case '\r':
+          out.append("\\r");
+          break;
+
+        case '\f':
+          out.append("\\f");
+          break;
+
+        default:
+          if (currentChar <= 0x1F) {
+            out.append(String.format("\\u%04x", (int) currentChar));
+          } else {
+            out.append(currentChar);
+          }
+          break;
+      }
+
+    }
+    out.append("\"");
+  }
+
+  private void newline() {
+    if (indent == null) {
+      return;
+    }
+
+    out.append("\n");
+    for (int i = 0; i < stack.size(); i++) {
+      out.append(indent);
+    }
+  }
+
+  /**
+   * Encodes the key (property name) to this stringer.
+   *
+   * @param name the name of the forthcoming value. May not be null.
+   * @return this stringer.
+   * @throws JSONException on internal errors, shouldn't happen.
+   */
+  public JSONStringer key(String name) throws JSONException {
+    if (name == null) {
+      throw new JSONException("Names must be non-null");
+    }
+    beforeKey();
+    string(name);
+    return this;
+  }
+
+  /**
+   * Inserts any necessary separators and whitespace before a name. Also adjusts the stack to expect
+   * the key's value.
+   */
+  private void beforeKey() throws JSONException {
+    Scope context = peek();
+    if (context == Scope.NONEMPTY_OBJECT) { // first in object
+      out.append(',');
+    } else if (context != Scope.EMPTY_OBJECT) { // not in an object!
+      throw new JSONException("Nesting problem");
+    }
+    newline();
+    replaceTop(Scope.DANGLING_KEY);
+  }
+
+  /**
+   * Inserts any necessary separators and whitespace before a literal value, inline array, or inline
+   * object. Also adjusts the stack to expect either a closing bracket or another element.
+   */
+  private void beforeValue() throws JSONException {
+    if (stack.isEmpty()) {
+      return;
+    }
+
+    Scope context = peek();
+    if (context == Scope.EMPTY_ARRAY) { // first in array
+      replaceTop(Scope.NONEMPTY_ARRAY);
+      newline();
+    } else if (context == Scope.NONEMPTY_ARRAY) { // another in array
+      out.append(',');
+      newline();
+    } else if (context == Scope.DANGLING_KEY) { // value for key
+      out.append(indent == null ? ":" : ": ");
+      replaceTop(Scope.NONEMPTY_OBJECT);
+    } else if (context != Scope.NULL) {
+      throw new JSONException("Nesting problem");
+    }
+  }
+
+  /**
+   * Returns the encoded JSON string.
+   *
+   * <p>
+   * If invoked with unterminated arrays or unclosed objects, this method's return value is
+   * undefined.
+   *
+   * <p>
+   * <strong>Warning:</strong> although it contradicts the general contract of
+   * {@link Object#toString}, this method returns null if the stringer contains no data.
+   */
+  @Override
-    return this.mode == 'd' ? this.writer.toString() : null;
+    return out.length() == 0 ? null : out.toString();

INS26 INS26 INS40 INS40 UPD40 INS29 INS83 INS42 INS23 INS71 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 MOV65 INS29 INS83 INS43 INS59 INS29 INS42 INS72 INS72 INS72 INS72 INS72 INS72 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS83 MOV43 INS59 INS83 INS42 INS8 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS43 INS42 INS44 INS44 INS43 INS8 INS29 INS43 INS42 INS44 INS44 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS43 INS42 INS44 INS43 INS8 MOV29 MOV83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS44 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS83 INS39 INS42 INS43 INS8 INS29 INS78 INS83 INS43 INS42 MOV8 INS66 INS65 UPD66 INS65 INS66 UPD66 INS66 INS66 UPD66 INS66 UPD66 INS66 UPD66 INS66 INS65 INS66 INS65 INS66 INS65 INS66 INS65 INS66 UPD66 UPD66 UPD66 INS65 INS66 UPD66 UPD66 UPD66 INS65 INS66 UPD66 UPD66 UPD66 INS65 INS66 INS65 INS66 UPD66 UPD66 INS65 UPD66 UPD66 INS66 INS66 INS66 INS66 INS65 INS42 INS42 INS14 INS65 INS29 INS42 INS29 INS42 INS29 INS42 INS29 INS42 INS29 INS42 INS29 INS42 INS65 INS43 INS43 INS42 INS14 INS65 INS42 INS21 INS39 INS42 INS60 INS21 INS21 INS65 UPD65 MOV65 INS65 INS42 INS42 INS41 INS65 UPD65 MOV65 INS65 INS42 INS42 INS41 INS65 INS65 INS65 UPD42 MOV42 INS42 INS41 INS65 INS65 INS65 INS42 INS42 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS42 INS25 INS21 INS21 INS21 INS41 INS65 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS25 INS21 INS41 INS65 INS42 INS42 INS25 INS41 INS65 INS43 INS42 INS21 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS25 INS21 INS25 INS25 INS41 INS65 INS65 INS65 INS42 INS39 INS42 INS42 INS25 INS21 INS21 INS41 INS65 UPD65 INS65 INS42 INS39 INS42 INS42 INS25 INS21 INS21 INS41 INS65 INS65 INS65 INS65 INS42 INS39 INS42 INS42 INS25 INS21 INS21 INS41 INS43 INS42 INS21 INS60 INS24 INS21 INS25 INS21 INS24 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS42 INS25 INS21 INS21 INS41 INS65 INS42 INS60 INS25 INS21 INS21 INS65 INS42 INS25 INS60 INS25 INS65 INS42 INS42 INS67 INS67 INS67 INS67 INS67 INS67 INS68 UPD66 MOV66 INS42 INS68 INS68 INS42 INS66 INS43 INS66 INS66 INS65 INS65 INS65 INS65 INS65 INS65 INS66 INS42 INS42 INS74 INS66 INS66 INS7 INS5 INS59 INS32 INS7 INS66 INS65 INS66 UPD66 INS42 INS66 INS32 INS66 UPD66 INS42 INS66 INS32 INS66 INS65 INS66 INS66 INS42 INS66 INS32 INS66 INS66 INS42 INS66 INS32 INS66 INS42 INS42 INS27 INS8 INS32 INS32 INS32 INS52 INS66 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS27 INS8 INS32 INS52 INS66 INS32 INS8 INS32 INS66 INS42 INS32 INS66 INS65 INS66 INS42 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS42 INS66 INS42 INS32 INS8 INS62 INS8 INS25 INS32 INS62 INS8 INS27 INS8 INS25 INS52 INS66 INS65 UPD66 INS42 INS66 INS66 INS42 INS66 INS32 INS8 INS32 INS32 INS52 INS66 INS65 INS66 INS42 UPD66 INS65 UPD66 INS65 UPD66 UPD66 INS42 INS66 INS32 INS8 INS32 INS32 INS52 INS66 INS65 INS66 INS42 INS66 INS66 INS42 INS66 INS32 INS8 INS32 INS32 INS52 INS42 INS32 INS39 INS59 INS58 INS27 INS37 INS8 INS32 INS27 INS8 INS32 INS58 INS27 INS37 INS8 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS27 INS8 INS32 INS32 INS52 INS66 INS66 INS43 INS59 INS27 INS8 INS25 INS32 INS32 INS66 INS66 INS32 INS8 INS43 INS59 INS27 INS8 INS25 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS43 INS43 INS42 INS33 INS39 INS85 INS42 INS3 INS42 INS42 INS42 INS13 INS42 INS14 INS67 INS42 INS40 INS45 INS42 INS40 INS40 INS45 INS67 INS42 INS40 INS45 INS42 INS40 INS40 INS45 INS32 INS27 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS27 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS53 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS66 INS42 INS42 INS68 INS66 INS68 INS66 INS42 INS42 INS53 INS42 INS43 INS21 INS41 INS62 INS8 INS42 INS42 INS43 INS21 INS41 INS27 INS27 INS21 INS62 INS8 INS8 INS66 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS66 INS68 UPD66 MOV66 INS68 INS66 INS42 INS42 INS53 INS42 INS42 INS42 INS32 INS66 INS42 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS34 INS39 INS59 INS59 INS42 INS42 INS42 INS60 INS21 INS50 INS42 INS42 INS45 INS42 INS33 INS41 INS42 INS42 INS45 INS39 INS59 INS42 INS32 INS42 INS21 INS42 INS33 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS21 INS27 INS8 INS42 INS42 INS40 INS42 INS42 INS41 INS42 INS42 INS32 INS42 INS40 INS21 INS21 INS27 INS8 INS25 INS67 INS33 INS43 INS39 INS39 INS42 INS42 INS5 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS34 INS32 INS14 INS32 INS34 INS32 INS34 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS52 INS42 INS43 INS21 INS41 INS42 INS32 INS52 INS27 INS62 INS42 INS40 INS32 INS42 INS43 INS21 INS25 INS14 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS34 INS42 INS32 INS39 INS59 INS7 INS42 INS49 INS49 INS21 INS10 INS49 INS25 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS21 INS10 INS49 INS25 INS10 INS42 INS34 INS42 INS42 INS32 INS14 INS42 INS32 INS42 INS40 INS53 INS42 INS32 INS32 INS42 INS40 INS21 INS21 INS27 INS8 INS25 INS42 INS42 INS32 INS34 INS42 INS42 INS39 INS85 INS42 INS42 INS42 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS43 INS45 INS36 INS42 INS52 INS42 INS32 INS52 INS42 INS42 INS32 INS42 INS33 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS8 INS8 UPD43 MOV43 INS45 INS43 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS13 INS13 INS32 INS13 INS27 INS8 INS32 INS13 INS32 INS13 INS32 INS13 INS32 INS13 INS32 INS13 INS32 INS27 INS8 INS8 INS42 INS42 INS42 INS43 INS45 INS42 INS42 INS13 INS14 INS42 INS40 INS42 INS32 INS32 INS42 INS40 INS21 INS21 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS36 INS42 INS52 INS36 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS21 INS21 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS13 INS21 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS34 INS21 INS21 INS42 INS43 INS45 INS42 INS42 INS13 INS42 INS32 INS32 INS42 INS40 INS53 INS43 INS42 INS11 INS11 INS42 INS42 INS11 INS32 INS42 INS32 INS32 INS42 INS42 INS13 INS32 INS32 INS32 INS42 INS42 INS42 INS16 INS42 INS40 INS14 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS13 INS42 INS42 INS32 INS42 INS42 INS42 INS27 INS45 INS45 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS11 INS42 INS33 INS42 INS39 INS42 DEL29 DEL83 DEL42 DEL43 DEL42 DEL14 DEL46 DEL8 DEL52 DEL42 DEL22 DEL13 DEL52 DEL42 DEL22 DEL33 DEL42 DEL31