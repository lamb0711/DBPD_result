GEODE-5861: change jdbc connector to use jndi binding (#2650)

The jdbc connector now uses the existing "jndi-binding" xml/gfsh instead of adding "jdbc-connection" xml/gfsh. All the old "jdbc-connection" commands have been removed.

The create jndi-binding command has been changed in the following ways:
* the driver-class-name gfsh parameter is now optional.
* --url can be used as a replacement for --connnection-url
* the --type now defaults to SIMPLE (it used to not have a default).
* the --type=POOLED now defaults to creating a Hikari pool and an SPI exists to customize the class 
that implements the pool.

New External APIS:
  DataSourceFactoryTest: this is the SPI users can implement for the POOLED type.

Co-authored-by: @BenjaminPerryRoss 
+import javax.sql.DataSource;
+
+import org.apache.geode.internal.jndi.JNDIInvoker;
-  private final DataSourceManager manager;
+  private final DataSourceFactory dataSourceFactory;
-  public SqlHandler(DataSourceManager manager, TableMetaDataManager tableMetaDataManager,
-      JdbcConnectorService configService) {
-    this.manager = manager;
+  public SqlHandler(TableMetaDataManager tableMetaDataManager, JdbcConnectorService configService,
+      DataSourceFactory dataSourceFactory) {
+    this.dataSourceFactory = dataSourceFactory;
-  public void close() {
-    manager.close();
+  public SqlHandler(TableMetaDataManager tableMetaDataManager, JdbcConnectorService configService) {
+    this(tableMetaDataManager, configService,
+        dataSourceName -> JNDIInvoker.getDataSource(dataSourceName));
-  Connection getConnection(ConnectorService.Connection config) throws SQLException {
-    return manager.getOrCreateDataSource(config).getConnection();
+  Connection getConnection(String connectionName) throws SQLException {
+    return getDataSource(connectionName).getConnection();
+  }
+
+  DataSource getDataSource(String connectionName) {
+    DataSource dataSource = this.dataSourceFactory.getDataSource(connectionName);
+    if (dataSource == null) {
+      throw new JdbcConnectorException("JDBC connection with name " + connectionName
+          + " not found. Create the connection with the gfsh command 'create jndi-binding'");
+    }
+    return dataSource;
-    ConnectorService.Connection connectionConfig =
-        getConnectionConfig(regionMapping.getConnectionConfigName());
-    try (Connection connection = getConnection(connectionConfig)) {
+    try (Connection connection = getConnection(regionMapping.getConnectionConfigName())) {
-  private ConnectorService.Connection getConnectionConfig(String connectionConfigName) {
-    ConnectorService.Connection connectionConfig =
-        this.configService.getConnectionConfig(connectionConfigName);
-    if (connectionConfig == null) {
-      throw new JdbcConnectorException("JDBC connection with name " + connectionConfigName
-          + " not found. Create the connection with the gfsh command 'create jdbc-connection'");
-    }
-    return connectionConfig;
-  }
-
-    ConnectorService.Connection connectionConfig =
-        getConnectionConfig(regionMapping.getConnectionConfigName());
-    try (Connection connection = getConnection(connectionConfig)) {
+    try (Connection connection = getConnection(regionMapping.getConnectionConfigName())) {
+  public interface DataSourceFactory {
+    public DataSource getDataSource(String dataSourceName);
+  }

INS26 INS26 MOV23 MOV31 INS40 INS40 MOV44 INS55 UPD43 MOV21 INS42 INS44 INS44 UPD43 UPD42 INS83 INS42 INS31 UPD42 UPD42 UPD43 UPD42 INS43 INS42 INS43 INS42 INS17 UPD43 UPD42 INS42 UPD42 INS83 INS43 INS42 INS44 UPD42 INS42 INS42 INS42 INS42 INS86 INS42 UPD43 UPD42 INS42 INS43 INS42 UPD42 INS59 INS32 INS42 UPD42 UPD42 MOV59 MOV59 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD45 DEL39 DEL42 DEL32 DEL21 DEL40 DEL42 DEL83 DEL40 DEL40 DEL40 DEL43 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL40 DEL43 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59