GEODE-6588: Cleanup generics and static analyzer warnings.

-  protected boolean isMemberMappedArgument;
+  boolean isMemberMappedArgument;
-  protected volatile boolean isClientServerMode = false;
+  volatile boolean isClientServerMode = false;
-  protected Set<String> failedNodes = new HashSet<String>();
+  Set<String> failedNodes = new HashSet<>();
-  protected Collection<InternalDistributedMember> executionNodes = null;
+  private Collection<InternalDistributedMember> executionNodes = null;
-  protected ExecutionNodesListener executionNodesListener = null;
+  private ExecutionNodesListener executionNodesListener = null;
-  protected boolean waitOnException = false;
+  boolean waitOnException = false;
-  protected boolean forwardExceptions = false;
+  boolean forwardExceptions = false;
-  protected boolean ignoreDepartedMembers = false;
+  private boolean ignoreDepartedMembers = false;
-      new ConcurrentHashMap<String, byte[]>();
+      new ConcurrentHashMap<>();
-      this.args = ae.args;
+      args = ae.args;
-      this.rc = ae.rc;
+      rc = ae.rc;
-      this.memberMappedArg = ae.memberMappedArg;
+      memberMappedArg = ae.memberMappedArg;
-    this.isMemberMappedArgument = ae.isMemberMappedArgument;
-    this.isClientServerMode = ae.isClientServerMode;
+    isMemberMappedArgument = ae.isMemberMappedArgument;
+    isClientServerMode = ae.isClientServerMode;
-      this.proxyCache = ae.proxyCache;
+      proxyCache = ae.proxyCache;
-    this.isFnSerializationReqd = ae.isFnSerializationReqd;
+    isFnSerializationReqd = ae.isFnSerializationReqd;
-    return this.isMemberMappedArgument;
+    return isMemberMappedArgument;
-      return this.args;
+      return args;
-      return this.memberMappedArg.getArgumentsForMember(memberId);
+      return memberMappedArg.getArgumentsForMember(memberId);
-    return this.memberMappedArg;
+    return memberMappedArg;
-    return this.args;
+    return args;
-    return this.rc;
+    return rc;
-    return this.filter;
+    return filter;
-    this.isReExecute = true;
-    if (this.executionNodesListener != null) {
-      this.executionNodesListener.reset();
+    isReExecute = true;
+    if (executionNodesListener != null) {
+      executionNodesListener.reset();
-    return this.failedNodes;
+    return failedNodes;
-    this.failedNodes.add(failedNode);
+    failedNodes.add(failedNode);
-    this.failedNodes.clear();
+    failedNodes.clear();
-    return this.executionNodes;
+    return executionNodes;
-    this.executionNodes = Collections.emptySet();
-    this.executionNodesListener = listener;
+    executionNodes = Collections.emptySet();
+    executionNodesListener = listener;
-    if (this.executionNodes != null) {
-      this.executionNodes = nodes;
-      if (this.executionNodesListener != null) {
-        this.executionNodesListener.afterExecutionNodesSet(this);
+    if (executionNodes != null) {
+      executionNodes = nodes;
+      if (executionNodesListener != null) {
+        executionNodesListener.afterExecutionNodesSet(this);
-      if (ServerConnection.isExecuteFunctionOnLocalNodeOnly().byteValue() == 1) {
+      if (ServerConnection.isExecuteFunctionOnLocalNodeOnly() == 1) {
-        newDM.getFunctionExecutor().execute(new Runnable() {
-          @Override
-          public void run() {
-            executeFunctionLocally(fn, cx, sender, newDM);
-            if (!sender.isLastResultReceived() && fn.hasResult()) {
-              ((InternalResultSender) sender).setException(new FunctionException(
-                  String.format("The function, %s, did not send last result",
-                      fn.getId())));
-            }
+        newDM.getFunctionExecutor().execute(() -> {
+          executeFunctionLocally(fn, cx, sender, newDM);
+          if (!sender.isLastResultReceived() && fn.hasResult()) {
+            ((InternalResultSender) sender).setException(new FunctionException(
+                String.format("The function, %s, did not send last result",
+                    fn.getId())));
-      newDM.getFunctionExecutor().execute(new Runnable() {
-        @Override
-        public void run() {
-          executeFunctionLocally(fn, cx, sender, newDM);
-          if (!((InternalResultSender) sender).isLastResultReceived() && fn.hasResult()) {
-            ((InternalResultSender) sender).setException(new FunctionException(
-                String.format("The function, %s, did not send last result",
-                    fn.getId())));
-          }
+      newDM.getFunctionExecutor().execute(() -> {
+        executeFunctionLocally(fn, cx, sender, newDM);
+        if (!((InternalResultSender) sender).isLastResultReceived() && fn.hasResult()) {
+          ((InternalResultSender) sender).setException(new FunctionException(
+              String.format("The function, %s, did not send last result",
+                  fn.getId())));
-  public void executeFunctionLocally(final Function<?> fn, final FunctionContext cx,
+  private void executeFunctionLocally(final Function<?> fn, final FunctionContext cx,
-      FunctionException functionException = null;
+      FunctionException functionException;
-      FunctionException functionException = null;
+      FunctionException functionException;
-    this.isFnSerializationReqd = false;
+    isFnSerializationReqd = false;
-    this.isFnSerializationReqd = true;
+    isFnSerializationReqd = true;
-    this.setForwardExceptions(waitOnException);
+    setForwardExceptions(waitOnException);
-    return this.waitOnException;
+    return waitOnException;
-    this.forwardExceptions = forward;
+    forwardExceptions = forward;
-    this.ignoreDepartedMembers = ignore;
+    ignoreDepartedMembers = ignore;
-    return this.ignoreDepartedMembers;
+    return ignoreDepartedMembers;
-  public void addFunctionAttributes(String functionId, byte[] functionAttributes) {
+  void addFunctionAttributes(String functionId, byte[] functionAttributes) {

UPD83 UPD83 UPD83 UPD83 UPD74 UPD74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS86 MOV43 MOV43 MOV8 INS42 INS86 MOV8 DEL83 DEL83 DEL83 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL39 DEL85 DEL5 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL1 DEL14 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL31 DEL1 DEL14 DEL33 DEL33 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83