Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Handles distribution messaging for destroying a batch of entry in a queue region.
- * In this message key represents the lastDestroyedKey
- * and tailKey represent the last dispatched key.
+ * Handles distribution messaging for destroying a batch of entry in a queue region. In this message
+ * key represents the lastDestroyedKey and tailKey represent the last dispatched key.
-  
+
-  protected void initMessage(CacheOperationMessage msg,
-      DirectReplyProcessor processor) {
+  protected void initMessage(CacheOperationMessage msg, DirectReplyProcessor processor) {
-    DestroyMessage m = (DestroyMessage)msg;
+    DestroyMessage m = (DestroyMessage) msg;
-    public DestroyMessage() {
-    }
+    public DestroyMessage() {}
-      this.event = (EntryEventImpl)event;
+      this.event = (EntryEventImpl) event;
-      EntryEventImpl ev = (EntryEventImpl)event;
-      DistributedRegion rgn = (DistributedRegion)ev.getRegion();
+      EntryEventImpl ev = (EntryEventImpl) event;
+      DistributedRegion rgn = (DistributedRegion) ev.getRegion();
-          logger.debug("Received batch destroyed message with key {} tail key {} this size of the region is {} they keys are {}",
+          logger.debug(
+              "Received batch destroyed message with key {} tail key {} this size of the region is {} they keys are {}",
-        
+
-        for (long k = (Long)this.key; k <= this.tailKey; k++) {
+        for (long k = (Long) this.key; k <= this.tailKey; k++) {
-              GatewayQueueEvent eventForFilter = (GatewayQueueEvent)rgn.get(k);
+              GatewayQueueEvent eventForFilter = (GatewayQueueEvent) rgn.get(k);
-              }
-              catch (Exception e) {
-                logger
-                    .fatal(
-                        LocalizedMessage
-                            .create(
-                                LocalizedStrings.GatewayEventFilter_EXCEPTION_OCCURED_WHILE_HANDLING_CALL_TO_0_AFTER_ACKNOWLEDGEMENT_FOR_EVENT_1,
-                                new Object[] { filter.toString(),
-                                    eventForFilter }), e);
+              } catch (Exception e) {
+                logger.fatal(LocalizedMessage.create(
+                    LocalizedStrings.GatewayEventFilter_EXCEPTION_OCCURED_WHILE_HANDLING_CALL_TO_0_AFTER_ACKNOWLEDGEMENT_FOR_EVENT_1,
+                    new Object[] {filter.toString(), eventForFilter}), e);
-//        for (Long k : (Set<Long>)rgn.keys()) {
-//          if (k > this.tailKey) {
-//            continue;
-//          }
-//          rgn.localDestroy(k, RegionQueue.WAN_QUEUE_TOKEN);
-//        }
+        // for (Long k : (Set<Long>)rgn.keys()) {
+        // if (k > this.tailKey) {
+        // continue;
+        // }
+        // rgn.localDestroy(k, RegionQueue.WAN_QUEUE_TOKEN);
+        // }
-            LocalizedStrings.DestroyOperation_CACHEWRITER_SHOULD_NOT_BE_CALLED
-                .toLocalizedString(),
+            LocalizedStrings.DestroyOperation_CACHEWRITER_SHOULD_NOT_BE_CALLED.toLocalizedString(),
-        throw new Error(
-            LocalizedStrings.DestroyOperation_DISTRIBUTEDLOCK_SHOULD_NOT_BE_ACQUIRED
-                .toLocalizedString(), e);
+        throw new Error(LocalizedStrings.DestroyOperation_DISTRIBUTEDLOCK_SHOULD_NOT_BE_ACQUIRED
+            .toLocalizedString(), e);
-      ev.setEventId(this.eventId);
-      ev.setOldValueFromRegion();
-      if (this.filterRouting != null) {
-        ev.setLocalFilterInfo(this.filterRouting.getFilterInfo(rgn.getCache()
-            .getMyId()));
-      }
-      ev.setTailKey(tailKey);
-      evReturned = true;
-      return ev;
+        ev.setEventId(this.eventId);
+        ev.setOldValueFromRegion();
+        if (this.filterRouting != null) {
+          ev.setLocalFilterInfo(this.filterRouting.getFilterInfo(rgn.getCache().getMyId()));
+        }
+        ev.setTailKey(tailKey);
+        evReturned = true;
+        return ev;
-        if (!evReturned) ev.release();
+        if (!evReturned)
+          ev.release();
-      @Retained EntryEventImpl event = EntryEventImpl.create(rgn, getOperation(), this.key,
-          null, this.callbackArg, true, getSender());
+      @Retained
+      EntryEventImpl event = EntryEventImpl.create(rgn, getOperation(), this.key, null,
+          this.callbackArg, true, getSender());
-      buff.append(" lastDestroydKey=").append(this.key)
-          .append(" lastDispatchedKey=").append(this.tailKey).append(" id=")
-          .append(this.eventId);
+      buff.append(" lastDestroydKey=").append(this.key).append(" lastDispatchedKey=")
+          .append(this.tailKey).append(" id=").append(this.eventId);
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      this.eventId = (EventID)DataSerializer.readObject(in);
+      this.eventId = (EventID) DataSerializer.readObject(in);
-      return Collections.singletonList(new QueuedOperation(getOperation(),
-          this.key, null, null,
-          DistributedCacheOperation.DESERIALIZATION_POLICY_NONE,
-          this.callbackArg));
+      return Collections.singletonList(new QueuedOperation(getOperation(), this.key, null, null,
+          DistributedCacheOperation.DESERIALIZATION_POLICY_NONE, this.callbackArg));

UPD66 UPD66 DEL66