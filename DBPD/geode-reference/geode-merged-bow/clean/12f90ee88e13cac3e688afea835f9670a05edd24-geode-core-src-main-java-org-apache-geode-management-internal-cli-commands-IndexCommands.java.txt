Merge branch 'develop' into feature/GEODE-3109

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.concurrent.atomic.AtomicReference;
+
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
-import org.apache.geode.internal.cache.InternalCache;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
-import java.util.concurrent.atomic.AtomicReference;
+import org.apache.geode.security.ResourcePermission.Target;
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
-  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ)
-  public Result listIndex(@CliOption(key = CliStrings.LIST_INDEX__STATS, mandatory = false,
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ, target = Target.QUERY)
+  public Result listIndex(@CliOption(key = CliStrings.LIST_INDEX__STATS,
-    final List<IndexDetails> indexDetailsList = new ArrayList<IndexDetails>(results.size());
+    final List<IndexDetails> indexDetailsList = new ArrayList<>(results.size());
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)
-      @CliOption(key = {CliStrings.MEMBER, CliStrings.MEMBERS}, mandatory = false,
+      @CliOption(key = {CliStrings.MEMBER, CliStrings.MEMBERS},
-      @CliOption(key = CliStrings.CREATE_INDEX__TYPE, mandatory = false,
-          unspecifiedDefaultValue = "range", optionContext = ConverterHint.INDEX_TYPE,
+      @CliOption(key = CliStrings.CREATE_INDEX__TYPE, unspecifiedDefaultValue = "range",
+          optionContext = ConverterHint.INDEX_TYPE,
-      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS}, mandatory = false,
+      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS},
-    Result result = null;
+    Result result;
-    getCache().getSecurityService().authorizeRegionManage(regionPath);
-      int idxType = IndexInfo.RANGE_INDEX;
+      int idxType;
-      final Set<String> successfulMembers = new TreeSet<String>();
-      final Map<String, Set<String>> indexOpFailMap = new HashMap<String, Set<String>>();
+      final Set<String> successfulMembers = new TreeSet<>();
+      final Map<String, Set<String>> indexOpFailMap = new HashMap<>();
-              failedMembers = new TreeSet<String>();
+              failedMembers = new TreeSet<>();
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
-  public Result destroyIndex(@CliOption(key = CliStrings.DESTROY_INDEX__NAME, mandatory = false,
-      unspecifiedDefaultValue = "",
-      help = CliStrings.DESTROY_INDEX__NAME__HELP) final String indexName,
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)
+  public Result destroyIndex(
+      @CliOption(key = CliStrings.DESTROY_INDEX__NAME, unspecifiedDefaultValue = "",
+          help = CliStrings.DESTROY_INDEX__NAME__HELP) final String indexName,
-      @CliOption(key = CliStrings.DESTROY_INDEX__REGION, mandatory = false,
-          optionContext = ConverterHint.REGION_PATH,
+      @CliOption(key = CliStrings.DESTROY_INDEX__REGION, optionContext = ConverterHint.REGION_PATH,
-      @CliOption(key = {CliStrings.MEMBER, CliStrings.MEMBERS}, mandatory = false,
+      @CliOption(key = {CliStrings.MEMBER, CliStrings.MEMBERS},
-      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS}, mandatory = false,
+      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS},
-    Result result = null;
+    Result result;
-    String regionName = null;
-
-    // If a regionName is specified, then authorize data manage on the regionName, otherwise, it
-    // requires data manage permission on all regions
-    if (StringUtils.isNotBlank(regionPath)) {
+    String regionName = null;
+    if (regionPath != null) {
-      getCache().getSecurityService().authorizeRegionManage(regionName);
-    } else {
-      getCache().getSecurityService().authorizeDataManage();
-
-    Set<String> successfulMembers = new TreeSet<String>();
-    Map<String, Set<String>> indexOpFailMap = new HashMap<String, Set<String>>();
+    Set<String> successfulMembers = new TreeSet<>();
+    Map<String, Set<String>> indexOpFailMap = new HashMap<>();
-          failedMembers = new TreeSet<String>();
+          failedMembers = new TreeSet<>();
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)
-      @CliOption(key = CliStrings.DEFINE_INDEX__TYPE, mandatory = false,
-          unspecifiedDefaultValue = "range", optionContext = ConverterHint.INDEX_TYPE,
+      @CliOption(key = CliStrings.DEFINE_INDEX__TYPE, unspecifiedDefaultValue = "range",
+          optionContext = ConverterHint.INDEX_TYPE,
-    Result result = null;
+    Result result;
-    getCache().getSecurityService().authorizeRegionManage(regionPath);
-
-    int idxType = IndexInfo.RANGE_INDEX;
+    int idxType;
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)
-      @CliOption(key = {CliStrings.MEMBER, CliStrings.MEMBERS}, mandatory = false,
+      @CliOption(key = {CliStrings.MEMBER, CliStrings.MEMBERS},
-      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS}, mandatory = false,
+      @CliOption(key = {CliStrings.GROUP, CliStrings.GROUPS},
-    Result result = null;
+    Result result;
-      final Set<String> successfulMembers = new TreeSet<String>();
-      final Map<String, Set<String>> indexOpFailMap = new HashMap<String, Set<String>>();
+      final Set<String> successfulMembers = new TreeSet<>();
+      final Map<String, Set<String>> indexOpFailMap = new HashMap<>();
-              failedMembers = new TreeSet<String>();
+              failedMembers = new TreeSet<>();
-  @CliMetaData(shellOnly = false,
-      relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
+  @CliMetaData(relatedTopic = {CliStrings.TOPIC_GEODE_REGION, CliStrings.TOPIC_GEODE_DATA})
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 INS77 INS77 MOV60 INS77 INS80 INS42 INS80 INS80 INS80 INS42 INS80 INS80 INS80 INS42 INS80 INS80 INS80 INS80 INS80 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS27 INS42 INS40 INS42 INS40 INS42 INS40 UPD40 INS42 INS40 UPD40 INS42 INS40 INS42 INS33 UPD74 UPD74 UPD74 MOV14 UPD74 UPD74 UPD74 UPD74 UPD74 MOV14 UPD74 UPD74 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL43 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL33 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL33 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL33 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL42 DEL9 DEL80 DEL33 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL9 DEL80