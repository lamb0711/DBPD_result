Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * @since GemFire     3.5
+ * @since GemFire 3.5
-public class StatisticResourceJmxImpl 
-extends org.apache.geode.admin.internal.StatisticResourceImpl
-implements javax.management.NotificationListener, 
-           org.apache.geode.admin.jmx.internal.ManagedResource {
+public class StatisticResourceJmxImpl extends org.apache.geode.admin.internal.StatisticResourceImpl
+    implements javax.management.NotificationListener,
+    org.apache.geode.admin.jmx.internal.ManagedResource {
-  
-  /** 
-   * Interval in seconds between refreshes. Values less than one results in no 
-   * refreshing .
+
+  /**
+   * Interval in seconds between refreshes. Values less than one results in no refreshing .
-  
+
-  //   Constructor(s)
+  // Constructor(s)
-  
+
-   * @param statResource  the admin StatResource to manage/monitor
-   * @param member        the SystemMember owning this resource
-   * @exception org.apache.geode.admin.AdminException 
-   *            if unable to create this StatisticResource for administration
+   * @param statResource the admin StatResource to manage/monitor
+   * @param member the SystemMember owning this resource
+   * @exception org.apache.geode.admin.AdminException if unable to create this StatisticResource for
+   *            administration
-  public StatisticResourceJmxImpl(StatResource statResource,
-                                  SystemMemberJmx member)
-                           throws org.apache.geode.admin.AdminException {
+  public StatisticResourceJmxImpl(StatResource statResource, SystemMemberJmx member)
+      throws org.apache.geode.admin.AdminException {
-  private void initializeMBean() 
-  throws org.apache.geode.admin.AdminException {
-    this.mbeanName = new StringBuffer("GemFire.Statistic:")
-                      .append("source=").append(MBeanUtil.makeCompliantMBeanNameProperty(this.member.getId()))
-                      .append(",type=").append(MBeanUtil.makeCompliantMBeanNameProperty(getType()))
-                      .append(",name=").append(MBeanUtil.makeCompliantMBeanNameProperty(getName()))
-                      .append(",uid=").append(getUniqueId()).toString();
-      
+  private void initializeMBean() throws org.apache.geode.admin.AdminException {
+    this.mbeanName = new StringBuffer("GemFire.Statistic:").append("source=")
+        .append(MBeanUtil.makeCompliantMBeanNameProperty(this.member.getId())).append(",type=")
+        .append(MBeanUtil.makeCompliantMBeanNameProperty(getType())).append(",name=")
+        .append(MBeanUtil.makeCompliantMBeanNameProperty(getName())).append(",uid=")
+        .append(getUniqueId()).toString();
+
-      MBeanUtil.createMBean(this, 
-        addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));
+        MBeanUtil.createMBean(this, addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));
-    AdminDistributedSystemJmxImpl sysJmx = (AdminDistributedSystemJmxImpl)this.member.getDistributedSystem();
-    if (sysJmx.getRefreshInterval()>0)
+    AdminDistributedSystemJmxImpl sysJmx =
+        (AdminDistributedSystemJmxImpl) this.member.getDistributedSystem();
+    if (sysJmx.getRefreshInterval() > 0)
-  //   MBean attributes - accessors/mutators
+  // MBean attributes - accessors/mutators
-  
+
-   * Sets interval in seconds between statistic refreshes; zero or less turns 
-   * off auto refreshing.  Manual refreshing has no effect on when the next
-   * scheduled refresh will occur.
+   * Sets interval in seconds between statistic refreshes; zero or less turns off auto refreshing.
+   * Manual refreshing has no effect on when the next scheduled refresh will occur.
-   * @param refreshInterval  the new refresh interval in seconds
+   * @param refreshInterval the new refresh interval in seconds
-      MBeanUtil.registerRefreshNotification(
-          this, // NotificationListener
+      MBeanUtil.registerRefreshNotification(this, // NotificationListener
-          RefreshNotificationType.STATISTIC_RESOURCE_STATISTICS, 
-          refreshInterval); // int
+          RefreshNotificationType.STATISTIC_RESOURCE_STATISTICS, refreshInterval); // int
-  
+
-   * RefreshInterval is now set only through the AdminDistributedSystem property
-   * refreshInterval. Attempt to set refreshInterval on StatisticResourceJmx
-   * MBean would result in an OperationNotSupportedException
-   * Auto-refresh is enabled on demand when a call to getStatistics is made
+   * RefreshInterval is now set only through the AdminDistributedSystem property refreshInterval.
+   * Attempt to set refreshInterval on StatisticResourceJmx MBean would result in an
+   * OperationNotSupportedException Auto-refresh is enabled on demand when a call to getStatistics
+   * is made
-   * @param refreshInterval
-   *          the new refresh interval in seconds
+   * @param refreshInterval the new refresh interval in seconds
-  public void setRefreshInterval(int refreshInterval)
-      throws OperationNotSupportedException {
+  public void setRefreshInterval(int refreshInterval) throws OperationNotSupportedException {
-        LocalizedStrings.MANAGED_RESOURCE_REFRESH_INTERVAL_CANT_BE_SET_DIRECTLY.toLocalizedString());
+        LocalizedStrings.MANAGED_RESOURCE_REFRESH_INTERVAL_CANT_BE_SET_DIRECTLY
+            .toLocalizedString());
-  
+
-  //   JMX Notification listener
+  // JMX Notification listener
-   * Handles notification to refresh. Reacts by refreshing the values of this
-   * SystemMember's ConfigurationParamaters. Any other notification is ignored.
-   * Given notification is handled only if there is any JMX client connected to 
-   * the system.
+   * Handles notification to refresh. Reacts by refreshing the values of this SystemMember's
+   * ConfigurationParamaters. Any other notification is ignored. Given notification is handled only
+   * if there is any JMX client connected to the system.
-   * @param notification
-   *          the JMX notification being received
-   * @param hb
-   *          handback object is unused
+   * @param notification the JMX notification being received
+   * @param hb handback object is unused
-    AdminDistributedSystemJmxImpl adminDSJmx = 
-      (AdminDistributedSystemJmxImpl) this.member.getDistributedSystem();
-    
-    String typeStatResourceStats = 
-              RefreshNotificationType.STATISTIC_RESOURCE_STATISTICS.getType();
-    
-    if (typeStatResourceStats.equals(notification.getType()) && 
-        getMBeanName().equals(notification.getUserData()) &&
-        !adminDSJmx.isRmiClientCountZero()) {
+    AdminDistributedSystemJmxImpl adminDSJmx =
+        (AdminDistributedSystemJmxImpl) this.member.getDistributedSystem();
+
+    String typeStatResourceStats = RefreshNotificationType.STATISTIC_RESOURCE_STATISTICS.getType();
+
+    if (typeStatResourceStats.equals(notification.getType())
+        && getMBeanName().equals(notification.getUserData())
+        && !adminDSJmx.isRmiClientCountZero()) {
-        // If this ever returns, rethrow the error.  We're poisoned
+        // If this ever returns, rethrow the error. We're poisoned
-        // catch VirtualMachineError (see above).  However, there is
+        // catch VirtualMachineError (see above). However, there is
-  
+
-  //   Create MBean attributes for each Statistic
+  // Create MBean attributes for each Statistic
-  
+
-   * @param managed   the mbean definition to add attributes to
-   * @return a new instance of ManagedBean copied from <code>managed</code> but 
-   *         with the new attributes added
+   * @param managed the mbean definition to add attributes to
+   * @return a new instance of ManagedBean copied from <code>managed</code> but with the new
+   *         attributes added
-  ManagedBean addDynamicAttributes(ManagedBean managed) 
-  throws org.apache.geode.admin.AdminException {
+  ManagedBean addDynamicAttributes(ManagedBean managed)
+      throws org.apache.geode.admin.AdminException {
-      throw new IllegalArgumentException(LocalizedStrings.StatisticResourceJmxImpl_MANAGEDBEAN_IS_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.StatisticResourceJmxImpl_MANAGEDBEAN_IS_NULL.toLocalizedString());
-    
+
-    
+
-      
+
-      if (this.refreshInterval>0) {
+      if (this.refreshInterval > 0) {
-      }
-      catch (AdminException e) {
+      } catch (AdminException e) {
-  //   ManagedResource implementation
+  // ManagedResource implementation
-  
+
-  
-	public String getMBeanName() {
-		return this.mbeanName;
-	}
-  
-	public ModelMBean getModelMBean() {
-		return this.modelMBean;
-	}
-	public void setModelMBean(ModelMBean modelMBean) {
-		this.modelMBean = modelMBean;
-	}
-  
+
+  public String getMBeanName() {
+    return this.mbeanName;
+  }
+
+  public ModelMBean getModelMBean() {
+    return this.modelMBean;
+  }
+
+  public void setModelMBean(ModelMBean modelMBean) {
+    this.modelMBean = modelMBean;
+  }
+
-  
+
-  
+
-   * Checks equality of the given object with <code>this</code> based on the
-   * type (Class) and the MBean Name returned by <code>getMBeanName()</code>
-   * methods.
+   * Checks equality of the given object with <code>this</code> based on the type (Class) and the
+   * MBean Name returned by <code>getMBeanName()</code> methods.
-   * @param obj
-   *          object to check equality with
-   * @return true if the given object is if the same type and its MBean Name is
-   *         same as <code>this</code> object's MBean Name, false otherwise
+   * @param obj object to check equality with
+   * @return true if the given object is if the same type and its MBean Name is same as
+   *         <code>this</code> object's MBean Name, false otherwise
-    if ( !(obj instanceof StatisticResourceJmxImpl) ) {
+    if (!(obj instanceof StatisticResourceJmxImpl)) {
-    
+
-   * Returns hash code for <code>this</code> object which is based on the MBean 
-   * Name generated. 
+   * Returns hash code for <code>this</code> object which is based on the MBean Name generated.

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66