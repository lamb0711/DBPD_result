GEODE-3622: Implement new algorithm for eviction (#1017)

* GEODE-3622: Implement new algorithm for eviction

  * Old algorithm is still used by default. Use "-Dgeode.EvictionScanAsync=true"
    to enable the new algorithm. Note that the new algorithm is still experimental
    and is subject to change. The new algorithm uses asynchronous sorting of the
    LRU list to prevent a long synchronous sort when the first item is evicted.
  * Moved region entries into their own package
  * Organized eviction code into new eviction package
  * General refactoring of eviction classes

+
+
-import org.apache.geode.internal.cache.lru.EnableLRU;
-import org.apache.geode.internal.cache.lru.LRUClockNode;
-import org.apache.geode.internal.cache.lru.NewLRUClockHand;
+import org.apache.geode.internal.cache.eviction.EvictionController;
+import org.apache.geode.internal.cache.eviction.EvictionNode;
-  // ----------------------------------------- key code -------------------------------------------
+  // --------------------------------------- key fields -------------------------------------------
-  public synchronized int updateAsyncEntrySize(final EnableLRU capacityController) {
+  public synchronized int updateAsyncEntrySize(final EvictionController evictionController) {
-    int newSize = capacityController.entrySize(getKeyForSizing(), null);
+    int newSize = evictionController.entrySize(getKeyForSizing(), null);
-  public synchronized int updateEntrySize(final EnableLRU capacityController) {
+  public synchronized int updateEntrySize(final EvictionController evictionController) {
-    return updateEntrySize(capacityController, getValue());
+    return updateEntrySize(evictionController, getValue());
-  public synchronized int updateEntrySize(final EnableLRU capacityController, final Object value) {
+  public synchronized int updateEntrySize(final EvictionController evictionController,
+      final Object value) {
-    int newSize = capacityController.entrySize(getKeyForSizing(), value);
+    int newSize = evictionController.entrySize(getKeyForSizing(), value);
-  public boolean testRecentlyUsed() {
+  public boolean isRecentlyUsed() {
-  public void setRecentlyUsed() {
-    setBits(RECENTLY_USED);
+  public void setRecentlyUsed(RegionEntryContext context) {
+    if (!isRecentlyUsed()) {
+      setBits(RECENTLY_USED);
+      context.incRecentlyUsed();
+    }
-  public boolean testEvicted() {
+  public boolean isEvicted() {
-  private LRUClockNode nextLRU;
-  private LRUClockNode previousLRU;
+  private EvictionNode nextEvictionNode;
+  private EvictionNode previousEvictionNode;
-  public void setNextLRUNode(final LRUClockNode nextLRU) {
-    this.nextLRU = nextLRU;
+  public void setNext(final EvictionNode nextEvictionNode) {
+    this.nextEvictionNode = nextEvictionNode;
-  public LRUClockNode nextLRUNode() {
-    return this.nextLRU;
+  public EvictionNode next() {
+    return this.nextEvictionNode;
-  public void setPrevLRUNode(final LRUClockNode previousLRU) {
-    this.previousLRU = previousLRU;
+  public void setPrevious(final EvictionNode previousEvictionNode) {
+    this.previousEvictionNode = previousEvictionNode;
-  public LRUClockNode prevLRUNode() {
-    return this.previousLRU;
+  public EvictionNode previous() {
+    return this.previousEvictionNode;

UPD40 UPD40 UPD42 INS44 INS8 UPD42 UPD43 UPD43 MOV78 UPD42 MOV78 UPD43 UPD42 MOV78 UPD42 MOV78 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 INS43 INS42 INS25 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS38 MOV8 UPD42 UPD42 UPD42 INS32 INS21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS32 UPD42 UPD42 INS42 INS42 DEL40 DEL26