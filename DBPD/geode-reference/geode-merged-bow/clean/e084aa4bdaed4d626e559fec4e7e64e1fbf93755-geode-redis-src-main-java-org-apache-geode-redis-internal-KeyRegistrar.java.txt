GEODE-8130: use a single region for redis Sets and Hashes  (#5120)

* Replaced replicated metaRegion with a partitioned dataRegion.
Currently the dataRegion is used the same way as the metaRegion
except for sets and hashes which store their actual data in it.
* Exception handling now correctly deals with FunctionException
* Disabled a test until GEODE-8127 if fixed.
* Now uses the ByteArrayWrapper as the key on the meta region
and the locks map instead of using a String.
Since a ByteArrayWrapper is used as the key in the data region
this will end up saving memory.

* Found a problem with redis dynamic region management.
Some of the code was executing when we added a new set or hash to
the metaDataRegion. It was only ignoring STRING and HLL.
This caused some extra memory to be used for every redis set/hash.
Now the dynamic region code is only used for lists and sortedSet.

* This commit has some TODO comments of what looks like a bug in
the dynamic region code when a new server is started. It looks
like the new server will not create already existing dynamic regions.
We could test this by starting one server, create a LIST, then
start another server, and then shutdown the first server. Does
the LIST still exist? If we change them not to use dynamic regions
then this issue will go away.
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.InvalidDeltaException;
-  private Region<String, RedisDataType> redisMetaRegion;
+  private Region<ByteArrayWrapper, RedisData> redisDataRegion;
-  public KeyRegistrar(Region<String, RedisDataType> redisMetaRegion) {
-    this.redisMetaRegion = redisMetaRegion;
+  public KeyRegistrar(Region<ByteArrayWrapper, RedisData> redisDataRegion) {
+    this.redisDataRegion = redisDataRegion;
-    RedisDataType existingType = this.redisMetaRegion.putIfAbsent(key.toString(), type);
-    if (!isValidDataType(existingType, type)) {
-      throwDataTypeException(key, existingType);
+    RedisData existingValue = this.redisDataRegion.putIfAbsent(key, transformType(type));
+    if (!isValidDataType(existingValue, type)) {
+      throwDataTypeException(key, existingValue);
+    }
+  }
+
+  /**
+   * TODO: This class should go away once all data types implement RedisData.
+   */
+  private static class RedisDataTransformer implements RedisData {
+    private RedisDataType type;
+
+    public RedisDataTransformer(RedisDataType type) {
+      this.type = type;
+    }
+
+    public RedisDataTransformer() {
+      // needed for serialization
+    }
+
+    @Override
+    public RedisDataType getType() {
+      return type;
+    }
+
+    @Override
+    public void toData(DataOutput out) throws IOException {
+      DataSerializer.writeEnum(type, out);
+    }
+
+    @Override
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+      type = DataSerializer.readEnum(RedisDataType.class, in);
+    }
+
+    @Override
+    public boolean hasDelta() {
+      return false;
+    }
+
+    @Override
+    public void toDelta(DataOutput out) throws IOException {}
+
+    @Override
+    public void fromDelta(DataInput in) throws IOException, InvalidDeltaException {}
+  }
+
+  private static final RedisDataTransformer REDIS_SORTEDSET_DATA =
+      new RedisDataTransformer(RedisDataType.REDIS_SORTEDSET);
+  private static final RedisDataTransformer REDIS_LIST_DATA =
+      new RedisDataTransformer(RedisDataType.REDIS_LIST);
+  private static final RedisDataTransformer REDIS_STRING_DATA =
+      new RedisDataTransformer(RedisDataType.REDIS_STRING);
+  private static final RedisDataTransformer REDIS_PROTECTED_DATA =
+      new RedisDataTransformer(RedisDataType.REDIS_PROTECTED);
+  private static final RedisDataTransformer REDIS_HLL_DATA =
+      new RedisDataTransformer(RedisDataType.REDIS_HLL);
+  private static final RedisDataTransformer REDIS_PUBSUB_DATA =
+      new RedisDataTransformer(RedisDataType.REDIS_PUBSUB);
+
+  /**
+   * TODO: This method should only exist while we still have data types that have not implemented
+   * this RedisData interface. Once they all implement it then we can get rid of this.
+   */
+  private RedisData transformType(RedisDataType type) {
+    switch (type) {
+      case REDIS_SORTEDSET:
+        return REDIS_SORTEDSET_DATA;
+      case REDIS_LIST:
+        return REDIS_LIST_DATA;
+      case REDIS_STRING:
+        return REDIS_STRING_DATA;
+      case REDIS_PROTECTED:
+        return REDIS_PROTECTED_DATA;
+      case REDIS_HLL:
+        return REDIS_HLL_DATA;
+      case REDIS_PUBSUB:
+        return REDIS_PUBSUB_DATA;
+      case REDIS_HASH:
+      case REDIS_SET:
+        throw new IllegalStateException(
+            type + " should never be added as a type to the data region");
+      default:
+        throw new IllegalStateException("unexpected RedisDataType: " + type);
-    return this.redisMetaRegion.remove(key.toString()) != null;
-  }
-
-  public boolean unregisterIfType(ByteArrayWrapper key, RedisDataType expectedType) {
-    return redisMetaRegion.remove(key.toString(), expectedType);
+    return this.redisDataRegion.remove(key) != null;
-    return this.redisMetaRegion.containsKey(key.toString());
+    return this.redisDataRegion.containsKey(key);
-  public Set<String> keys() {
-    Set<String> keysWithProtected = this.redisMetaRegion.keySet();
-    return keysWithProtected;
+  public Set<ByteArrayWrapper> keys() {
+    return this.redisDataRegion.keySet();
-  public Set<Map.Entry<String, RedisDataType>> keyInfos() {
-    return this.redisMetaRegion.entrySet();
+  public Set<Map.Entry<ByteArrayWrapper, RedisData>> keyInfos() {
+    return this.redisDataRegion.entrySet();
-    return this.redisMetaRegion.size() - RedisConstants.NUM_DEFAULT_KEYS;
+    return this.redisDataRegion.size() - GeodeRedisServer.PROTECTED_KEY_COUNT;
-    return this.redisMetaRegion.get(key.toString());
+    RedisData currentValue = redisDataRegion.get(key);
+    if (currentValue == null) {
+      return null;
+    }
+    return currentValue.getType();
-    RedisDataType currentType = redisMetaRegion.get(key.toString());
-    if (!isValidDataType(currentType, type)) {
-      throwDataTypeException(key, currentType);
+    RedisData currentValue = redisDataRegion.get(key);
+    if (currentValue != null) {
+      RedisDataType currentType = currentValue.getType();
+      if (!isValidDataType(currentType, type)) {
+        throwDataTypeException(key, currentType);
+      }
-    return RedisDataType.REDIS_PROTECTED.equals(redisMetaRegion.get(key.toString()));
+    RedisData redisData = redisDataRegion.get(key);
+    if (redisData == null) {
+      return false;
+    }
+    return RedisDataType.REDIS_PROTECTED.equals(redisData.getType());
+  }
+
+  private boolean isValidDataType(RedisData actualData, RedisDataType expectedDataType) {
+    if (actualData == null) {
+      return true;
+    }
+    return isValidDataType(actualData.getType(), expectedDataType);
+  private void throwDataTypeException(ByteArrayWrapper key, RedisData data) {
+    throwDataTypeException(key, data.getType());
+  }
+

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS55 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 UPD74 INS29 INS83 INS83 INS42 INS43 INS23 INS31 INS31 INS31 MOV31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS29 INS83 INS43 UPD42 MOV42 MOV44 INS8 INS83 INS39 INS42 MOV44 MOV8 UPD74 MOV74 UPD74 MOV43 MOV44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 MOV44 INS44 INS8 MOV43 UPD43 UPD43 UPD42 UPD74 UPD42 INS65 INS42 INS83 MOV43 INS59 INS83 INS42 INS44 INS8 INS83 INS42 INS8 INS78 INS83 MOV43 INS42 INS8 INS78 UPD39 UPD42 INS44 INS43 INS78 MOV83 INS39 INS42 INS44 INS43 INS43 INS8 INS78 INS83 MOV39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS65 INS42 INS43 UPD42 INS50 UPD43 INS41 UPD74 INS60 INS25 INS41 INS60 INS25 INS60 INS25 INS43 INS42 MOV43 INS42 INS25 INS41 INS43 INS42 INS21 UPD42 UPD42 MOV43 UPD43 INS43 INS43 INS66 INS42 INS43 INS42 INS21 INS42 INS41 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS41 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS40 INS43 INS40 INS43 INS40 INS43 INS40 INS43 INS40 INS43 INS40 INS66 INS66 INS42 INS42 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS41 INS49 INS49 INS53 INS49 INS53 INS27 UPD42 INS32 UPD43 INS43 INS43 INS59 INS27 INS8 INS32 INS43 INS59 INS27 MOV8 INS43 INS59 INS27 INS8 INS42 INS27 INS8 INS32 INS42 INS32 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS7 INS42 INS42 INS32 INS42 INS7 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS14 INS32 INS33 MOV42 MOV22 MOV42 UPD42 INS42 UPD40 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS33 INS41 INS42 INS32 INS42 INS42 INS42 INS32 UPD42 MOV42 INS32 UPD42 INS22 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS43 INS27 INS43 INS27 INS22 MOV42 MOV42 UPD42 UPD42 UPD42 INS42 MOV42 MOV42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS9 UPD42 UPD42 INS9 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 MOV42 UPD42 INS52 INS42 INS42 INS42 INS57 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS52 INS42 UPD42 MOV43 UPD42 UPD42 DEL32 DEL52 DEL42 DEL22 DEL32 DEL32 DEL33 DEL27 DEL41 DEL42 DEL42 DEL32 DEL42 DEL32 DEL31 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL41 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32