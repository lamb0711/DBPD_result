Merge branch 'release/1.3.0'

-import org.apache.geode.internal.cache.EventTracker.EventSeqnoHolder;
+import org.apache.geode.internal.cache.event.EventSequenceNumberHolder;
-  public void createEventTracker() {
-    this.eventTracker = new EventTracker(this);
-    this.eventTracker.start();
-  }
-
-  @Override
-      Map<ThreadIdentifier, EventSeqnoHolder> providerEventStates =
+      Map<ThreadIdentifier, EventSequenceNumberHolder> providerEventStates =
+      if (getPartitionedRegion().isParallelWanEnabled()) {
+        handleWANEvent(event);
+      }
+  public int getRegionSize(DistributedMember target) {
+    // GEODE-3679. Do not forward the request again.
+    return getRegionSize();
+  }
+
+  @Override
-          && this.eventTracker.isInitialImageProvider(event.getDistributedMember())) {
+          && getEventTracker().isInitialImageProvider(event.getDistributedMember())) {
-          && this.eventTracker.isInitialImageProvider(event.getDistributedMember())) {
+          && this.getEventTracker().isInitialImageProvider(event.getDistributedMember())) {
-          && this.eventTracker.isInitialImageProvider(event.getDistributedMember())) {
+          && this.getEventTracker().isInitialImageProvider(event.getDistributedMember())) {
-          && this.eventTracker.isInitialImageProvider(event.getDistributedMember())) {
+          && this.getEventTracker().isInitialImageProvider(event.getDistributedMember())) {
+  @Override
+  public boolean hasSeenEvent(EntryEventImpl event) {
+    ensureEventTrackerInitialization();
+    return super.hasSeenEvent(event);
+  }
+
+  // bug 41289 - wait for event tracker to be initialized before checkin
+  // so that an operation intended for a previous version of a bucket
+  // is not prematurely applied to a new version of the bucket
+  private void ensureEventTrackerInitialization() {
+    try {
+      getEventTracker().waitOnInitialization();
+    } catch (InterruptedException ie) {
+      stopper.checkCancelInProgress(ie);
+      Thread.currentThread().interrupt();
+    }
+  }
+
+  @Override
+  protected void postDestroyRegion(boolean destroyDiskRegion, RegionEventImpl event) {
+    DiskRegion dr = this.getDiskRegion();
+    if (dr != null && destroyDiskRegion) {
+      dr.statsClear(this);
+    }
+    super.postDestroyRegion(destroyDiskRegion, event);
+  }

UPD40 INS31 INS31 INS31 INS31 MOV78 MOV83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 MOV39 UPD42 MOV42 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS42 INS41 INS42 INS43 INS42 INS21 INS41 INS54 INS42 INS39 INS42 INS43 INS42 INS60 INS25 INS21 INS42 INS32 INS42 INS32 INS48 INS8 INS12 UPD42 MOV42 INS43 INS59 INS27 INS8 INS48 INS25 INS42 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS42 INS32 INS27 INS42 MOV21 INS42 INS42 INS42 UPD74 INS32 INS8 INS32 INS43 INS42 INS21 INS21 INS52 INS42 INS42 INS33 UPD43 INS32 INS42 INS21 INS32 INS42 INS42 INS32 INS32 INS42 UPD42 INS52 UPD42 INS42 INS32 INS32 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL43 DEL52 DEL14 DEL7 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22