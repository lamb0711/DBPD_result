Merge remote-tracking branch 'origin/develop' into feature/GEODE-3239

-package org.apache.geode.test.dunit.rules.gfsh;
+package org.apache.geode.test.junit.rules.gfsh;
+import java.io.UncheckedIOException;
-import org.apache.geode.management.internal.cli.commands.StatusLocatorRealGfshTest;
-import org.apache.geode.management.internal.cli.util.CommandStringBuilder;
-import org.apache.geode.test.dunit.rules.RequiresGeodeHome;
+import org.apache.geode.test.junit.rules.RequiresGeodeHome;
- * binaries. For a usage example, see {@link StatusLocatorRealGfshTest}. Each call to
- * {@link GfshRule#execute(GfshScript)} will invoke the given gfsh script in a forked JVM. The
- * {@link GfshRule#after()} method will attempt to clean up all forked JVMs.
+ * binaries. Each call to {@link GfshRule#execute(GfshScript)} will invoke the given gfsh script in
+ * a forked JVM. The {@link GfshRule#after()} method will attempt to clean up all forked JVMs.
-  public TemporaryFolder getTemporaryFolder() {
-    return temporaryFolder;
-  }
+
+  private static final String DOUBLE_QUOTE = "\"";
-  public GfshExecution execute(String... commands) {
-    return execute(GfshScript.of(commands));
-  }
-
-  public GfshExecution execute(GfshScript gfshScript) {
-    GfshExecution gfshExecution;
-    try {
-      File workingDir = temporaryFolder.newFolder(gfshScript.getName());
-      Process process = toProcessBuilder(gfshScript, gfsh, workingDir).start();
-      gfshExecution = new GfshExecution(process, workingDir);
-      gfshExecutions.add(gfshExecution);
-      gfshScript.awaitIfNecessary(process);
-    } catch (IOException e) {
-      throw new RuntimeException(e);
-    }
-
-    return gfshExecution;
-  }
-
+  public TemporaryFolder getTemporaryFolder() {
+    return temporaryFolder;
+  }
+
+  public GfshExecution execute(String... commands) {
+    return execute(GfshScript.of(commands));
+  }
+
+  public GfshExecution execute(GfshScript gfshScript) {
+    GfshExecution gfshExecution;
+    try {
+      File workingDir = new File(temporaryFolder.getRoot(), gfshScript.getName());
+      workingDir.mkdirs();
+      Process process = toProcessBuilder(gfshScript, gfsh, workingDir).start();
+      gfshExecution = new GfshExecution(process, workingDir);
+      gfshExecutions.add(gfshExecution);
+      gfshScript.awaitIfNecessary(process);
+    } catch (IOException e) {
+      throw new UncheckedIOException(e);
+    }
+
+    return gfshExecution;
+  }
+
-    String stopServerCommand =
-        new CommandStringBuilder("stop server").addOption("dir", dir).toString();
+    String stopServerCommand = "stop server --dir=" + quoteArgument(dir.toString());
-    String stopLocatorCommand =
-        new CommandStringBuilder("stop locator").addOption("dir", dir).toString();
+    String stopLocatorCommand = "stop locator --dir=" + quoteArgument(dir.toString());
+  private String quoteArgument(String argument) {
+    if (!argument.startsWith(DOUBLE_QUOTE)) {
+      argument = DOUBLE_QUOTE + argument;
+    }
+
+    if (!argument.endsWith(DOUBLE_QUOTE)) {
+      argument = argument + DOUBLE_QUOTE;
+    }
+
+    return argument;
+  }

MOV26 MOV31 MOV31 MOV31 UPD40 UPD40 UPD40 INS23 INS31 MOV66 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 UPD66 UPD66 UPD66 INS42 INS42 INS45 INS42 INS43 INS42 INS25 INS25 INS41 INS42 INS38 INS8 INS38 INS8 INS42 INS21 INS27 INS27 INS32 INS21 INS32 INS21 INS43 INS32 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS7 INS42 INS14 INS42 INS42 UPD42 MOV42 INS32 UPD42 MOV42 INS32 INS42 INS27 INS42 INS27 MOV43 INS32 MOV32 UPD43 MOV42 MOV42 MOV42 MOV42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 UPD42 DEL40 DEL26 DEL42 DEL65 DEL32 DEL42 DEL43 DEL45 DEL14 DEL45 DEL32 DEL32 DEL42 DEL43 DEL45 DEL14 DEL45 DEL32 DEL32