GEODE-6565: Close IntegratedSecurityService during disconnect

Invoke IntegratedSecurityService.close() during
InternalDistributedSystem.disconnect().

Make IntegratedSecurityService.close() idempotent so that subsequent
invocations are ok.

+import java.util.concurrent.atomic.AtomicBoolean;
+
+  private final AtomicBoolean closed = new AtomicBoolean();
-    this.securityManager = provider.getSecurityManager();
+    securityManager = provider.getSecurityManager();
-    return this.postProcessor;
+    return postProcessor;
-    return this.securityManager;
+    return securityManager;
-   *   if (state != null)
+   *   if (state != null) {
+   *   }
-      String msg = currentUser.getPrincipal() + " not authorized for " + context;
-      logger.info("NotAuthorizedException: {}", msg);
-      throw new NotAuthorizedException(msg, e);
+      String message = currentUser.getPrincipal() + " not authorized for " + context;
+      logger.info("NotAuthorizedException: {}", message);
+      throw new NotAuthorizedException(message, e);
-      String msg = currentUser.getPrincipal() + " not authorized for " + context;
-      logger.info("NotAuthorizedException: {}", msg);
-      throw new NotAuthorizedException(msg, e);
+      String message = currentUser.getPrincipal() + " not authorized for " + context;
+      logger.info("NotAuthorizedException: {}", message);
+      throw new NotAuthorizedException(message, e);
-    if (this.securityManager != null) {
-      this.securityManager.close();
-    }
-    if (this.postProcessor != null) {
-      this.postProcessor.close();
-    }
+    // subsequent calls to close are no-op
+    if (closed.compareAndSet(false, true)) {
+      if (securityManager != null) {
+        securityManager.close();
+      }
+      if (postProcessor != null) {
+        postProcessor.close();
+      }
-    ThreadContext.remove();
-    SecurityUtils.setSecurityManager(null);
+      ThreadContext.remove();
+      SecurityUtils.setSecurityManager(null);
+    }
-    return this.postProcessor != null;
+    return postProcessor != null;
-        Object newObj = this.postProcessor.processRegionValue(principal, regionName, key, oldObj);
+        Object newObj = postProcessor.processRegionValue(principal, regionName, key, oldObj);
-      newValue = this.postProcessor.processRegionValue(principal, regionName, key, value);
+      newValue = postProcessor.processRegionValue(principal, regionName, key, value);

INS26 INS40 INS23 INS83 INS83 INS43 INS59 INS8 INS42 INS42 INS14 INS25 INS43 INS42 INS42 UPD66 INS66 INS32 INS8 INS42 INS42 INS42 INS42 INS9 INS9 MOV25 MOV25 MOV21 MOV21 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22