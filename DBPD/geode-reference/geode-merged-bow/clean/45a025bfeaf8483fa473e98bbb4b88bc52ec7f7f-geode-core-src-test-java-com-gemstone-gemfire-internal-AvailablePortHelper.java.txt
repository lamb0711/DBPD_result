Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

-    List<Keeper> list = getRandomAvailableTCPPortKeepers(count);
+    return getRandomAvailableTCPPorts(count, false);
+  }
+
+  /**
+   * Returns an array of unique randomly available tcp ports
+   * 
+   * @param count number of desired ports
+   * @param useMembershipPortRange whether to use the configured membership-port-range
+   * @return the ports
+   */
+  public static int[] getRandomAvailableTCPPorts(int count, boolean useMembershipPortRange) {
+    List<Keeper> list = getRandomAvailableTCPPortKeepers(count, useMembershipPortRange);
+
+    return getRandomAvailableTCPPortKeepers(count, false);
+  }
+  
+  public static List<Keeper> getRandomAvailableTCPPortKeepers(int count, boolean useMembershipPortRange) {
-      result.add(AvailablePort.getRandomAvailablePortKeeper(AvailablePort.SOCKET));
+      result.add(AvailablePort.getRandomAvailablePortKeeper(AvailablePort.SOCKET, 
+        AvailablePort.getAddress(AvailablePort.SOCKET), useMembershipPortRange));

INS31 INS31 MOV29 INS83 INS83 INS5 INS42 INS44 INS8 INS29 INS44 INS83 INS83 INS74 INS42 INS44 INS8 INS44 INS39 INS85 INS39 INS42 INS41 INS65 INS65 INS65 INS65 INS39 INS42 INS43 INS43 INS39 INS42 INS41 INS39 INS42 INS32 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS32 INS42 INS42 INS42 INS40