Merge branch 'feature/GEODE-8' into develop

-import com.gemstone.gemfire.LogWriter;
-import com.gemstone.gemfire.internal.logging.InternalLogWriter;
-import com.gemstone.gemfire.internal.logging.LocalLogWriter;
-public final class ProcessStreamReader implements Runnable {
+public abstract class ProcessStreamReader implements Runnable {
-  private final InputStream inputStream;
-  private final InputListener listener;
+  protected final Process process;
+  protected final InputStream inputStream;
+  protected final InputListener inputListener;
-  public ProcessStreamReader(final InputStream inputStream) {
-    this.inputStream = inputStream;
-    this.listener = new InputListener() {
-      @Override
-      public void notifyInputLine(String line) {
-        // do nothing
-      }
-      @Override
-      public String toString() {
-        return "NullInputListener";
-      }
-    };
+  protected ProcessStreamReader(final Builder builder) {
+    this.process = builder.process;
+    this.inputStream = builder.inputStream;
+    if (builder.inputListener == null) {
+      this.inputListener = new InputListener() {
+        @Override
+        public void notifyInputLine(String line) {
+          // do nothing
+        }
+        @Override
+        public String toString() {
+          return "NullInputListener";
+        }
+      };
+    } else {
+      this.inputListener = builder.inputListener;
+    }
-
-  public ProcessStreamReader(final InputStream inputStream, final InputListener listener) {
-    this.inputStream = inputStream;
-    this.listener = listener;
-  }
-
+  
-        this.listener.notifyInputLine(line);
+        this.inputListener.notifyInputLine(line);
+        this.thread.setDaemon(true);
+
+  public ProcessStreamReader stopAsync(final long delayMillis) {
+    Runnable delayedStop = new Runnable() {
+      @Override
+      public void run() {
+        try {
+          Thread.sleep(delayMillis);
+        } catch (InterruptedException e) {
+        } finally {
+          stop();
+        }
+      }
+    };
+    String threadName = getClass().getSimpleName() + " stopAfterDelay Thread @" + Integer.toHexString(hashCode());
+    Thread thread = new Thread(delayedStop, threadName);
+    thread.setDaemon(true);
+    thread.start();
+    return this;
+  }
-    sb.append(" listener=").append(this.listener);
+    sb.append(" listener=").append(this.inputListener);
+
+  /** Default ReadingMode is BLOCKING */
+  public static enum ReadingMode {
+    BLOCKING,
+    NON_BLOCKING;
+  }
+  
+  /**
+   * Builds a ProcessStreamReader.
+   * 
+   * @author Kirk Lund
+   * @since 8.2
+   */
+  public static class Builder {
+    protected Process process;
+    protected InputStream inputStream;
+    protected InputListener inputListener;
+    protected long continueReadingMillis = 0;
+    protected ReadingMode readingMode = ReadingMode.BLOCKING;
+    
+    public Builder(final Process process) {
+      this.process = process;
+    }
+    
+    public Builder inputStream(final InputStream inputStream) {
+      this.inputStream = inputStream;
+      return this;
+    }
+    
+    /** InputListener callback to invoke with read data */
+    public Builder inputListener(final InputListener inputListener) {
+      this.inputListener = inputListener;
+      return this;
+    }
+    
+    /** millis to continue reading InputStream after Process terminates */
+    public Builder continueReadingMillis(final long continueReadingMillis) {
+      this.continueReadingMillis = continueReadingMillis;
+      return this;
+    }
+    
+    /** ReadingMode to use for reading InputStream */
+    public Builder readingMode(final ReadingMode readingMode) {
+      this.readingMode = readingMode;
+      return this;
+    }
+    
+    public ProcessStreamReader build() {
+      if (process == null) {
+        throw new NullPointerException("process may not be null");
+      }
+      if (inputStream == null) {
+        throw new NullPointerException("inputStream may not be null");
+      }
+      if (continueReadingMillis < 0) {
+        throw new IllegalArgumentException("continueReadingMillis must zero or positive");
+      }
+      switch (this.readingMode) {
+        case NON_BLOCKING: return new NonBlockingProcessStreamReader(this);
+        default: return new BlockingProcessStreamReader(this);
+      }
+    }
+  }

INS83 INS42 INS23 INS31 INS71 INS55 INS83 INS83 INS43 INS59 UPD83 UPD83 UPD83 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS83 INS42 INS72 INS72 INS29 INS83 INS83 INS42 INS23 INS23 INS23 INS23 INS23 INS31 MOV31 INS31 INS31 INS31 INS31 INS42 INS42 UPD42 MOV83 UPD43 MOV43 INS42 INS21 INS21 INS25 INS42 INS83 INS39 INS42 INS60 INS60 INS60 INS21 INS21 INS41 INS65 INS42 INS42 INS65 INS65 INS65 INS83 INS43 INS59 INS83 INS43 INS59 INS83 MOV43 INS59 INS83 INS39 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS43 INS42 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 UPD42 INS7 INS7 INS27 MOV8 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS52 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS40 INS83 INS43 INS42 INS21 INS42 INS41 INS65 INS42 INS83 INS43 INS42 INS21 INS41 INS65 INS42 INS83 INS39 INS42 INS21 INS41 INS65 INS42 INS83 INS43 INS42 INS21 INS41 INS42 INS25 INS25 INS25 INS50 INS22 INS40 INS22 INS40 INS40 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS27 INS42 INS42 INS14 INS42 INS42 INS9 INS42 INS42 INS42 INS7 INS52 INS66 INS42 INS7 INS52 INS66 INS7 INS52 INS66 INS42 INS7 INS52 INS27 INS8 INS27 INS8 INS27 INS8 INS22 INS49 INS41 INS49 INS41 INS52 INS42 INS52 INS42 INS7 INS43 INS1 INS32 INS45 INS32 INS43 INS42 INS42 UPD42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS33 INS53 INS42 INS33 INS53 INS42 INS34 INS53 INS52 INS42 INS42 INS14 INS14 INS22 INS40 INS21 INS42 INS31 INS32 INS42 INS42 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS14 INS14 INS14 INS43 INS52 INS43 INS52 UPD42 INS52 INS42 INS32 INS78 INS83 INS39 INS42 INS8 INS42 INS42 INS43 INS45 INS43 INS45 INS43 INS45 INS42 INS42 INS22 INS42 INS9 INS42 INS54 INS42 INS42 INS42 UPD42 INS52 INS42 INS8 INS12 INS8 INS21 INS44 INS8 INS21 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL44 DEL42 DEL83 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21