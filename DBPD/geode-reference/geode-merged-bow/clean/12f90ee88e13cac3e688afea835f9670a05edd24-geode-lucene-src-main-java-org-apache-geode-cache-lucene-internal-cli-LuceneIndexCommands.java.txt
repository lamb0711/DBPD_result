Merge branch 'develop' into feature/GEODE-3109

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Objects;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
+import org.apache.geode.security.GemFireSecurityException;
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.stream.Collectors;
+import org.apache.geode.security.ResourcePermission.Target;
-  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ)
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ, target = Target.QUERY)
-        results.stream().flatMap(set -> set.stream()).sorted().collect(Collectors.toList());
+        results.stream().flatMap(Collection::stream).sorted().collect(Collectors.toList());
+  /**
+   * On the server, we also verify the resource operation permissions CLUSTER:WRITE:DISK
+   */
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)
-    getCache().getSecurityService().authorizeRegionManage(regionPath);
-      String[] trimmedFields =
-          Arrays.stream(fields).map(field -> field.trim()).toArray(size -> new String[size]);
+      String[] trimmedFields = Arrays.stream(fields).map(String::trim).toArray(String[]::new);
-  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ)
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.READ, target = Target.QUERY)
-    return funcResults.stream().filter(indexDetails -> indexDetails != null)
-        .collect(Collectors.toList());
+    return funcResults.stream().filter(Objects::nonNull).collect(Collectors.toList());
+  /**
+   * Internally, we verify the resource operation permissions DATA:READ:[RegionName]
+   */
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.WRITE)
+      getSecurityService().authorizeRegionRead(regionPath);
+    } catch (GemFireSecurityException e) {
+      throw e;
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE,
+      target = Target.QUERY)
-    getCache().getSecurityService().authorizeRegionManage(regionPath);
-
-    return functionResults.stream().flatMap(set -> set.stream()).sorted()
+    return functionResults.stream().flatMap(Collection::stream).sorted()

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS29 INS77 INS29 INS77 INS80 INS65 INS42 INS80 INS80 INS80 INS80 INS65 INS42 INS80 INS80 INS80 INS42 INS40 INS66 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS66 INS12 INS42 INS40 INS42 INS40 INS42 INS40 INS21 INS44 INS8 INS90 INS32 INS43 INS42 INS53 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS90 INS90 INS89 INS42 INS42 INS42 INS42 INS42 INS90 MOV5 INS42 INS42 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86 DEL42 DEL59 DEL42 DEL3 DEL86 DEL42 DEL59 DEL42 DEL33 DEL27 DEL86 DEL42 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL77 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL59 DEL42 DEL42 DEL32 DEL86