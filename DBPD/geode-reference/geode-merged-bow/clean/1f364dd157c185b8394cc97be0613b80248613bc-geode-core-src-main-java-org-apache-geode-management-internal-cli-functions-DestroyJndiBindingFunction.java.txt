GEODE-6102: add gfsh destroy data-source (#2918)

* Adding DestroyDataSourceCommand

- Refactored DestroyJndiBindingFunction class to provide accurate output
  based on command invoking it
- Added unit test class for DestroyDataSourceCommand Class
- Completed Unit test and added DUnit test for DestroyDataSourceCommand

Co-authored-by: Ben Ross <bross@pivotal.io>
Co-authored-by: Darrel Schneider <dschneider@pivotal.io>
Co-authored-by: Scott Jewell <sjewell@pivotal.io>

-public class DestroyJndiBindingFunction extends CliFunction<String> {
-
-  static final String RESULT_MESSAGE = "Jndi binding \"{0}\" destroyed on \"{1}\"";
-  static final String EXCEPTION_RESULT_MESSAGE = "Jndi binding \"{0}\" not found on \"{1}\"";
+public class DestroyJndiBindingFunction extends CliFunction<Object[]> {
-  public CliFunctionResult executeFunction(FunctionContext context) {
-    String jndiName = (String) context.getArguments();
+  public CliFunctionResult executeFunction(FunctionContext<Object[]> context) {
+    String jndiName = (String) context.getArguments()[0];
+    boolean destroyingDataSource = (boolean) context.getArguments()[1];
+
+    String typeName = "Jndi binding";
+
+    if (destroyingDataSource) {
+      typeName = "Data source";
+      if (checkForInvalidDataSource(jndiName)) {
+        return new CliFunctionResult(context.getMemberName(), CliFunctionResult.StatusState.ERROR,
+            CliStrings.format(
+                "Data Source {0} has invalid type for destroy data-source, destroy jndi-binding command should be used.",
+                jndiName));
+      }
+    }
+
+    final String RESULT_MESSAGE = "{0} \"{1}\" destroyed on \"{2}\"";
+    final String EXCEPTION_RESULT_MESSAGE = "{0} \"{1}\" not found on \"{2}\"";
-      return new CliFunctionResult(context.getMemberName(), true,
-          CliStrings.format(RESULT_MESSAGE, jndiName, context.getMemberName()));
+      return new CliFunctionResult(context.getMemberName(), CliFunctionResult.StatusState.OK,
+          CliStrings.format(RESULT_MESSAGE, typeName, jndiName, context.getMemberName()));
-      return new CliFunctionResult(context.getMemberName(), true,
-          CliStrings.format(EXCEPTION_RESULT_MESSAGE, jndiName, context.getMemberName()));
+      return new CliFunctionResult(context.getMemberName(), CliFunctionResult.StatusState.OK,
+          CliStrings.format(EXCEPTION_RESULT_MESSAGE, typeName, jndiName, context.getMemberName()));
+
+  boolean checkForInvalidDataSource(String jndiName) {
+    return JNDIInvoker.checkForInvalidDataSource(jndiName);
+  }

UPD74 INS31 INS5 INS39 INS42 INS44 INS8 INS43 INS85 INS74 INS60 INS60 INS25 INS60 INS60 INS43 INS42 INS41 INS42 MOV43 INS5 MOV43 INS59 INS39 MOV43 INS59 INS42 INS8 INS83 MOV43 INS59 INS83 MOV43 INS59 INS42 INS32 INS43 INS85 INS42 INS11 UPD42 INS42 INS45 INS21 INS25 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 MOV43 INS2 INS39 INS2 INS7 INS32 INS8 INS32 INS34 MOV32 INS34 INS42 INS45 INS42 INS42 INS41 INS40 INS42 INS42 INS14 INS42 MOV32 INS43 INS32 INS40 MOV43 MOV32 INS40 INS32 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 MOV32 INS42 INS42 INS45 INS42 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL9 DEL9