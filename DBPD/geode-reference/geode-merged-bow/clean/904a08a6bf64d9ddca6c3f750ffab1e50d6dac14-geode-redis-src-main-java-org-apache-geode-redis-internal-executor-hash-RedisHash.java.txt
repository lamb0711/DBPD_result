GEODE-8090: implement function/delta for redis Hash ops (#5085)

The hash ops that use function delta now are:
HDEL
DEL
HSET
HMSET
HSETNX
HGETALL

+ *
+import static java.util.Collections.emptyList;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import org.apache.geode.DataSerializable;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.Delta;
+import org.apache.geode.InvalidDeltaException;
+import org.apache.geode.cache.Region;
-public interface RedisHash {
-  int hset(List<ByteArrayWrapper> fieldsToSet, boolean NX);
+public class RedisHash implements Delta, DataSerializable {
+  private HashMap<ByteArrayWrapper, ByteArrayWrapper> hash;
+  /**
+   * When deltas are adds it will always contain an even number of field/value pairs.
+   * When deltas are removes it will just contain field names.
+   */
+  private transient ArrayList<ByteArrayWrapper> deltas;
+  // true if deltas contains adds; false if removes
+  private transient boolean deltasAreAdds;
-  int hdel(List<ByteArrayWrapper> subList);
-  Collection<Map.Entry<ByteArrayWrapper, ByteArrayWrapper>> hgetall();
+  public static boolean del(Region<ByteArrayWrapper, RedisHash> region, ByteArrayWrapper key) {
+    return region.remove(key) != null;
+  }
+
+  public static int hset(Region<ByteArrayWrapper, RedisHash> region, ByteArrayWrapper key,
+      List<ByteArrayWrapper> fieldsToSet, boolean nx) {
+    RedisHash hash = region.get(key);
+    if (hash != null) {
+      return hash.doHset(region, key, fieldsToSet, nx);
+    } else {
+      region.put(key, new RedisHash(fieldsToSet));
+      return fieldsToSet.size() / 2;
+    }
+  }
+
+  public static int hdel(Region<ByteArrayWrapper, RedisHash> region, ByteArrayWrapper key,
+      List<ByteArrayWrapper> fieldsToRemove) {
+    RedisHash hash = region.get(key);
+    if (hash != null) {
+      return hash.doHdel(region, key, fieldsToRemove);
+    } else {
+      return 0;
+    }
+  }
+
+  public static Collection<ByteArrayWrapper> hgetall(
+      Region<ByteArrayWrapper, RedisHash> region, ByteArrayWrapper key) {
+    RedisHash hash = region.get(key);
+    if (hash != null) {
+      return hash.doHgetall();
+    } else {
+      return emptyList();
+    }
+  }
+
+  public RedisHash(List<ByteArrayWrapper> fieldsToSet) {
+    hash = new HashMap<>();
+    Iterator<ByteArrayWrapper> iterator = fieldsToSet.iterator();
+    while (iterator.hasNext()) {
+      hash.put(iterator.next(), iterator.next());
+    }
+  }
+
+  public RedisHash() {
+    // for serialization
+  }
+
+  @Override
+  public void toData(DataOutput out) throws IOException {
+    DataSerializer.writeHashMap(hash, out);
+  }
+
+  @Override
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+    hash = DataSerializer.readHashMap(in);
+  }
+
+  @Override
+  public boolean hasDelta() {
+    return deltas != null;
+  }
+
+  @Override
+  public void toDelta(DataOutput out) throws IOException {
+    DataSerializer.writeBoolean(deltasAreAdds, out);
+    DataSerializer.writeArrayList(deltas, out);
+  }
+
+  @Override
+  public synchronized void fromDelta(DataInput in) throws IOException, InvalidDeltaException {
+    boolean deltaAdds = DataSerializer.readBoolean(in);
+    try {
+      ArrayList<ByteArrayWrapper> deltas = DataSerializer.readArrayList(in);
+      if (deltas != null) {
+        Iterator<ByteArrayWrapper> iterator = deltas.iterator();
+        while (iterator.hasNext()) {
+          ByteArrayWrapper field = iterator.next();
+          if (deltaAdds) {
+            ByteArrayWrapper value = iterator.next();
+            hash.put(field, value);
+          } else {
+            hash.remove(field);
+          }
+        }
+      }
+    } catch (ClassNotFoundException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  private synchronized int doHset(Region<ByteArrayWrapper, RedisHash> region, ByteArrayWrapper key,
+      List<ByteArrayWrapper> fieldsToSet, boolean nx) {
+    int fieldsAdded = 0;
+    Iterator<ByteArrayWrapper> iterator = fieldsToSet.iterator();
+    while (iterator.hasNext()) {
+      ByteArrayWrapper field = iterator.next();
+      ByteArrayWrapper value = iterator.next();
+      boolean added;
+      if (nx) {
+        added = hash.putIfAbsent(field, value) == null;
+      } else {
+        added = hash.put(field, value) == null;
+      }
+      if (added) {
+        if (deltas == null) {
+          deltas = new ArrayList<>();
+        }
+        deltas.add(field);
+        deltas.add(value);
+        fieldsAdded++;
+      }
+    }
+    storeChanges(region, key, true);
+    return fieldsAdded;
+  }
+
+  private synchronized int doHdel(Region<ByteArrayWrapper, RedisHash> region, ByteArrayWrapper key,
+      List<ByteArrayWrapper> fieldsToRemove) {
+    int fieldsRemoved = 0;
+    for (ByteArrayWrapper fieldToRemove : fieldsToRemove) {
+      if (hash.remove(fieldToRemove) != null) {
+        if (deltas == null) {
+          deltas = new ArrayList<>();
+        }
+        deltas.add(fieldToRemove);
+        fieldsRemoved++;
+      }
+    }
+    storeChanges(region, key, false);
+    return fieldsRemoved;
+  }
+
+  private synchronized Collection<ByteArrayWrapper> doHgetall() {
+    ArrayList<ByteArrayWrapper> result = new ArrayList<>();
+    for (Map.Entry<ByteArrayWrapper, ByteArrayWrapper> entry : hash.entrySet()) {
+      result.add(entry.getKey());
+      result.add(entry.getValue());
+    }
+    return result;
+  }
+
+  private void storeChanges(Region<ByteArrayWrapper, RedisHash> region, ByteArrayWrapper key,
+      boolean doingAdds) {
+    if (hasDelta()) {
+      if (!doingAdds && hash.isEmpty()) {
+        region.remove(key);
+      } else {
+        deltasAreAdds = doingAdds;
+        try {
+          region.put(key, this);
+        } finally {
+          deltas = null;
+        }
+      }
+    }
+  }
+
+  // the following are needed because not all the hash commands have been converted to functions.
+
+  public synchronized boolean isEmpty() {
+    return hash.isEmpty();
+  }
+
+  public synchronized Collection<Map.Entry<ByteArrayWrapper, ByteArrayWrapper>> entries() {
+    return new ArrayList<>(hash.entrySet());
+  }
+
+  public synchronized ByteArrayWrapper get(ByteArrayWrapper field) {
+    return hash.get(field);
+  }
+
+  public synchronized void put(ByteArrayWrapper field, ByteArrayWrapper value) {
+    hash.put(field, value);
+  }
+
+  public synchronized List<ByteArrayWrapper> keys() {
+    return new ArrayList<>(hash.keySet());
+  }
+
+  public synchronized int size() {
+    return hash.size();
+  }
+
+  public synchronized Collection<ByteArrayWrapper> values() {
+    return new ArrayList<>(hash.values());
+  }
+
+  public synchronized boolean containsKey(ByteArrayWrapper field) {
+    return hash.containsKey(field);
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS43 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS42 INS83 INS74 INS59 INS29 INS83 INS83 INS74 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS44 INS44 INS44 INS8 INS83 INS83 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS42 MOV44 INS8 INS83 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS44 INS43 INS43 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS42 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS83 INS74 INS42 INS8 INS83 INS83 INS39 INS42 INS8 INS83 INS83 INS74 INS42 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS43 INS43 INS43 INS42 INS65 INS43 INS43 INS42 INS42 INS74 INS42 INS43 INS42 INS41 INS74 INS42 INS43 INS42 INS74 INS42 UPD42 INS60 INS25 INS74 INS42 INS43 INS42 UPD42 INS60 INS25 INS43 INS43 INS74 INS42 INS43 INS42 INS60 INS25 INS21 INS60 INS61 INS42 INS43 INS42 INS42 INS21 INS42 INS43 INS42 INS42 INS42 INS21 INS42 INS41 INS42 INS43 INS42 INS42 INS21 INS21 INS42 INS43 INS42 INS42 INS42 INS60 INS54 INS74 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS60 INS60 INS61 INS21 INS41 INS74 INS42 INS43 INS42 INS74 INS42 INS60 INS70 INS21 INS41 INS43 INS43 INS60 INS70 INS41 INS74 INS42 INS43 INS42 INS39 INS42 INS25 INS41 INS41 INS42 INS43 INS42 INS41 INS43 INS42 INS43 INS42 INS21 INS43 INS43 INS41 INS41 INS43 INS43 INS41 INS43 INS42 INS41 INS42 INS42 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS43 INS42 INS27 INS43 INS43 INS43 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS8 INS43 INS43 INS43 INS42 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS43 INS43 INS43 INS42 INS43 INS59 INS27 INS8 INS8 INS7 INS74 INS59 INS32 INS8 INS42 INS32 INS42 INS7 INS27 INS42 INS32 INS32 INS42 INS39 INS59 INS8 INS12 INS43 INS43 INS43 INS42 INS43 INS43 INS39 INS59 INS74 INS59 INS32 INS8 INS32 INS42 INS43 INS43 INS43 INS42 INS43 INS43 INS39 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS74 INS59 INS44 INS32 INS8 INS42 INS43 INS43 INS43 INS42 INS32 INS8 INS32 INS14 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS42 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS32 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS21 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS41 INS42 INS14 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS60 INS25 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS25 INS25 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS42 INS25 INS42 INS42 INS42 INS9 INS43 INS43 INS42 INS14 INS74 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS25 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS27 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS42 INS32 INS32 INS74 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS39 INS59 INS42 INS8 INS8 INS42 INS8 INS42 INS27 INS8 INS42 INS42 INS74 INS43 INS43 INS43 INS32 INS32 INS27 INS8 INS8 INS43 INS42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS32 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS43 INS43 INS42 INS32 INS42 INS33 INS60 INS61 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS21 INS21 INS25 INS21 INS21 INS21 INS32 INS33 INS25 INS21 INS21 INS43 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS38 INS32 INS21 INS21 INS54 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS8 INS43 INS42 INS42 INS42 INS42 INS42 INS7 INS7 INS27 INS8 INS32 INS32 INS37 INS42 INS42 INS42 INS27 INS8 INS32 INS37 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS7 INS8 INS8 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS60 INS25 INS42 INS42 INS27 INS42 INS27 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS8 INS8 INS32 INS33 INS32 INS33 INS7 INS7 INS32 INS7 INS42 INS42 INS32 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS52 INS42 INS33 INS42 INS42 INS43 INS59 INS32 INS32 INS74 INS74 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 DEL42