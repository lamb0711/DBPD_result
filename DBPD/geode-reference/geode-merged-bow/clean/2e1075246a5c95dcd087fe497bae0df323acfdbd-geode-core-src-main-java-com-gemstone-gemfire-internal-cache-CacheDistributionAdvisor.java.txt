Merge branch 'release/1.0.0-incubating.M3'

-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreFactoryImpl;
-import com.gemstone.gemfire.cache.hdfs.internal.HDFSStoreImpl;
-  private static final int MEMBER_UNINITIALIZED_MASK = 0x40000;
+  // unused 0x40000;
+  private static final int CACHE_SERVICE_PROFILES_MASK = 0x1000000;
+
-        if (!prof.regionInitialized          // fix for bug 41102
-            || prof.memberUnInitialized) {
+        if (!prof.regionInitialized) { // fix for bug 41102
-   * @since 5.0
+   * @since GemFire 5.0
-          // if member is not yet initialized, exclude
-          if (cp.memberUnInitialized) {
-            return false;
-          }
-        if (cp.dataPolicy.withReplication() && cp.regionInitialized
-            && !cp.memberUnInitialized) {
+        if (cp.dataPolicy.withReplication() && cp.regionInitialized) {
-        // if member is not yet initialized, exclude
-        if (cp.memberUnInitialized) {
-          return false;
-        }
-   * @since 5.5
+   * @since GemFire 5.5
-     * @since prpersist this field is now overloaded for partitioned regions with persistence.
+     * @since GemFire prpersist this field is now overloaded for partitioned regions with persistence.
-    /**
-     * True when member is still not ready to receive cache operations. Note
-     * that {@link #regionInitialized} may be still true so other members can
-     * proceed with GII etc. Currently used by SQLFabric to indicate that DDL
-     * replay is in progress and so cache operations/functions should not be
-     * routed to that node.
-     */
-    public boolean memberUnInitialized = false;
+    public List<CacheServiceProfile> cacheServiceProfiles = new ArrayList<>();
+
-      if (this.memberUnInitialized) s |= MEMBER_UNINITIALIZED_MASK;
+      if (!this.cacheServiceProfiles.isEmpty()) s |= CACHE_SERVICE_PROFILES_MASK;
-      this.memberUnInitialized = (s & MEMBER_UNINITIALIZED_MASK) != 0;
-     * @since 5.0
+     * @since GemFire 5.0
+    public void addCacheServiceProfile(CacheServiceProfile profile) {
+      this.cacheServiceProfiles.add(profile);
+    }
+
+    private boolean hasCacheServiceProfiles(int bits) {
+      return (bits & CACHE_SERVICE_PROFILES_MASK) != 0;
+    }
+
+      if (!cacheServiceProfiles.isEmpty()) {
+        DataSerializer.writeObject(cacheServiceProfiles, out);
+      }
-    private void writeSet(Set<String> set, DataOutput out) throws IOException {
+    private void writeSet(Set<?> set, DataOutput out) throws IOException {
+      if (hasCacheServiceProfiles(bits)) {
+        cacheServiceProfiles = DataSerializer.readObject(in);
+      }
-      sb.append("; memberUnInitialized=").append(
-          String.valueOf(this.memberUnInitialized));
+      sb.append("; cacheServiceProfiles=" + this.cacheServiceProfiles);
-   * @since 5.1
+   * @since GemFire 5.1
-   * @since 5.8
+   * @since GemFire 5.8
-   * @since prPersistSprint1
+   * @since GemFire prPersistSprint1
-   * @since 5.8
+   * @since GemFire 5.8
-   * @since 5.8
+   * @since GemFire 5.8
-          /*Since HDFS queues are created only when a region is created, this check is 
-           * unnecessary. Also this check is creating problem because hdfs queue is not 
-           * created on an accessor. Hence removing this check for hdfs queues. */
-          Set<String> allAsyncEventIdsNoHDFS = removeHDFSQueues(allAsyncEventIds);
-          Set<String> profileQueueIdsNoHDFS = removeHDFSQueues(cp.asyncEventQueueIds);
-          if (allAsyncEventIdsNoHDFS.equals(profileQueueIdsNoHDFS)) {
+          if (allAsyncEventIds.equals(cp.asyncEventQueueIds)) {
-            differAsycnQueueIds.add(allAsyncEventIdsNoHDFS);
-            differAsycnQueueIds.add(profileQueueIdsNoHDFS);
+            differAsycnQueueIds.add(allAsyncEventIds);
+            differAsycnQueueIds.add(cp.asyncEventQueueIds);
-      private Set<String> removeHDFSQueues(Set<String> queueIds){
-        Set<String> queueIdsWithoutHDFSQueues = new HashSet<String>();
-        for (String queueId: queueIds){
-          if (!queueId.startsWith(HDFSStoreFactoryImpl.DEFAULT_ASYNC_QUEUE_ID_FOR_HDFS)){
-            queueIdsWithoutHDFSQueues.add(queueId);
-          }
-        }
-        return queueIdsWithoutHDFSQueues;
-      }

MOV23 INS23 INS31 INS31 UPD42 UPD34 INS83 INS74 INS59 MOV25 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 MOV21 UPD66 UPD66 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS39 INS42 INS41 INS25 UPD74 INS25 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS74 INS38 UPD66 INS42 INS32 INS27 INS38 INS8 INS76 INS32 INS8 INS43 INS32 INS22 INS42 INS42 INS36 INS34 INS32 INS21 INS42 INS42 INS21 MOV42 MOV42 INS27 INS42 INS22 INS42 UPD42 INS52 INS42 INS27 INS42 INS42 INS32 INS7 INS45 INS22 MOV52 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 MOV52 UPD42 MOV42 INS42 INS42 INS42 MOV38 UPD42 INS40 UPD42 INS40 DEL40 DEL26 DEL40 DEL26 DEL40 DEL27 DEL40 DEL9 DEL41 DEL8 DEL25 DEL40 DEL38 DEL40 DEL9 DEL41 DEL8 DEL25 DEL66 DEL66 DEL42 DEL67 DEL65 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL27 DEL36 DEL34 DEL27 DEL7 DEL21 DEL42 DEL43 DEL45 DEL32 DEL42 DEL42 DEL42 DEL22 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL40 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31