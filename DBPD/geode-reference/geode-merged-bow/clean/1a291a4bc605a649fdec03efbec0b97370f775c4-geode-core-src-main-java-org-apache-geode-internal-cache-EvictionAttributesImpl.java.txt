GEODE-3622: Implement new algorithm for eviction (#1017)

* GEODE-3622: Implement new algorithm for eviction

  * Old algorithm is still used by default. Use "-Dgeode.EvictionScanAsync=true"
    to enable the new algorithm. Note that the new algorithm is still experimental
    and is subject to change. The new algorithm uses asynchronous sorting of the
    LRU list to prevent a long synchronous sort when the first item is evicted.
  * Moved region entries into their own package
  * Organized eviction code into new eviction package
  * General refactoring of eviction classes

-import org.apache.geode.internal.cache.lru.HeapLRUCapacityController;
-import org.apache.geode.internal.cache.lru.LRUAlgorithm;
-import org.apache.geode.internal.cache.lru.LRUCapacityController;
-import org.apache.geode.internal.cache.lru.MemLRUCapacityController;
+import org.apache.geode.internal.cache.eviction.CountLRUEviction;
+import org.apache.geode.internal.cache.eviction.EvictionController;
+import org.apache.geode.internal.cache.eviction.HeapLRUController;
+import org.apache.geode.internal.cache.eviction.MemoryLRUController;
-  private EvictionAlgorithm algorithm = EvictionAlgorithm.NONE;
+  private org.apache.geode.cache.EvictionAlgorithm algorithm =
+      org.apache.geode.cache.EvictionAlgorithm.NONE;
-  private volatile LRUAlgorithm evictionController;
+  private volatile EvictionController evictionController;
-  public EvictionAttributesImpl setAlgorithm(EvictionAlgorithm algorithm) {
+  public EvictionAttributesImpl setAlgorithm(org.apache.geode.cache.EvictionAlgorithm algorithm) {
-  public EvictionAlgorithm getAlgorithm() {
+  public org.apache.geode.cache.EvictionAlgorithm getAlgorithm() {
+  @Override
-   * @param maximum parameter for the given {@link EvictionAlgorithm}
+   * @param maximum parameter for the given {@link org.apache.geode.cache.EvictionAlgorithm}
-   * {@link EvictionAlgorithm} uses to perform the eviction.
+   * {@link org.apache.geode.cache.EvictionAlgorithm} uses to perform the eviction.
-  public LRUAlgorithm createEvictionController(Region region, boolean isOffHeap) {
+  public EvictionController createEvictionController(Region region, boolean isOffHeap) {
-      this.evictionController = new LRUCapacityController(this.maximum, this.action, region);
+      this.evictionController = new CountLRUEviction(this.maximum, this.action, region);
-      this.evictionController = new HeapLRUCapacityController(this.sizer, this.action, region);
+      this.evictionController = new HeapLRUController(this.action, region, this.sizer);
-          new MemLRUCapacityController(this.maximum, this.sizer, this.action, region, isOffHeap);
+          new MemoryLRUController(this.maximum, this.sizer, this.action, region, isOffHeap);
-      this.evictionController = new LRUCapacityController(this.maximum, this.action, region);
+      this.evictionController = new CountLRUEviction(this.maximum, this.action, region);
-          new MemLRUCapacityController(this.maximum, this.sizer, this.action, region, isOffHeap);
+          new MemoryLRUController(this.maximum, this.sizer, this.action, region, isOffHeap);
+  @Override
+  @Override
-    this.action = (EvictionAction) DataSerializer.readObject(in);
-    this.algorithm = (EvictionAlgorithm) DataSerializer.readObject(in);
+    this.action = DataSerializer.readObject(in);
+    this.algorithm = DataSerializer.readObject(in);
-    return this.algorithm == EvictionAlgorithm.LIFO_ENTRY;
+    return this.algorithm == org.apache.geode.cache.EvictionAlgorithm.LIFO_ENTRY;
-    return this.algorithm == EvictionAlgorithm.LIFO_MEMORY;
+    return this.algorithm == org.apache.geode.cache.EvictionAlgorithm.LIFO_MEMORY;

UPD40 UPD40 UPD40 UPD40 UPD43 UPD43 UPD43 INS78 UPD43 INS78 INS78 INS40 UPD40 UPD42 UPD43 INS40 INS42 UPD42 INS42 INS42 INS40 INS40 INS40 MOV32 MOV32 UPD40 UPD40 UPD43 MOV22 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL11 DEL42 DEL43 DEL11