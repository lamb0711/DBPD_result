Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Simple adapter class providing empty default implementations for
- * {@link MapCallback}.
+ * Simple adapter class providing empty default implementations for {@link MapCallback}.
-  public void afterUpdate(K key, K mapKey, V newValue, C context) {
-  }
+  public void afterUpdate(K key, K mapKey, V newValue, C context) {}
-  public void oldValueRead(V oldValue) {
-  }
+  public void oldValueRead(V oldValue) {}
-  public Object removeValue(Object key, Object value, V existingValue,
-      C context, P removeParams) {
-    if (value != null
-        && (value == NO_OBJECT_TOKEN || value.equals(existingValue))) {
+  public Object removeValue(Object key, Object value, V existingValue, C context, P removeParams) {
+    if (value != null && (value == NO_OBJECT_TOKEN || value.equals(existingValue))) {
-    }
-    else {
+    } else {
-  public void postRemove(Object key, Object value, V existingValue, C context,
-      P removeParams) {
-  }
+  public void postRemove(Object key, Object value, V existingValue, C context, P removeParams) {}
-  public V replaceValue(K key, V oldValue, V existingValue, V newValue,
-      C context, P params) {
+  public V replaceValue(K key, V oldValue, V existingValue, V newValue, C context, P params) {
-    }
-    else {
+    } else {
-  public void afterReplace(K mapKey, V newValue, Object beforeResult,
-      C context, P params) {
-  }
+  public void afterReplace(K mapKey, V newValue, Object beforeResult, C context, P params) {}
-  public void onReplaceFailed(K mapKey, V newValue, Object beforeResult,
-      C context, P params) {
-  }
+  public void onReplaceFailed(K mapKey, V newValue, Object beforeResult, C context, P params) {}
-  public V onOperationFailed(K key, Object oldValue, V updatedValue,
-      V newValue, C context, P params) {
+  public V onOperationFailed(K key, Object oldValue, V updatedValue, V newValue, C context,
+      P params) {
-   * @see MapCallback#onToArray       
+   * @see MapCallback#onToArray
-  public void onToArray(C context) {
-  }
+  public void onToArray(C context) {}

UPD66 DEL66