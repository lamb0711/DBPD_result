GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

+import org.apache.geode.LogWriter;
-import org.apache.geode.i18n.LogWriterI18n;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-  protected LogWriterI18n logger = null;
+  protected LogWriter logger = null;
-        + LocalizedStrings.CacheServerLauncher_STARTS_A_GEMFIRE_CACHESERVER_VM.toLocalizedString());
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_VMARG.toLocalizedString());
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_DIR.toLocalizedString());
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_CLASSPATH.toLocalizedString());
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_ATTNAME.toLocalizedString());
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_REBALANCE.toLocalizedString());
-    out.println(
-        "\t" + LocalizedStrings.CacheServerLauncher_DISABLE_DEFAULT_SERVER.toLocalizedString());
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_SERVER_PORT.toLocalizedString());
-    out.println(
-        "\t" + LocalizedStrings.CacheServerLauncher_SERVER_BIND_ADDRESS.toLocalizedString());
-    out.println(
-        "\t" + LocalizedStrings.CacheServerLauncher_CRITICAL_HEAP_PERCENTAGE.toLocalizedString());
-    out.println(
-        "\t" + LocalizedStrings.CacheServerLauncher_EVICTION_HEAP_PERCENTAGE.toLocalizedString());
+        + "Starts a GemFire CacheServer VM");
-        + LocalizedStrings.CacheServerLauncher_CRITICAL_OFF_HEAP_PERCENTAGE.toLocalizedString());
+        + "<vmarg> a VM-option passed to the spawned CacheServer VM, example -J-Xmx1024M for a 1 Gb heap");
-        + LocalizedStrings.CacheServerLauncher_EVICTION_OFF_HEAP_PERCENTAGE.toLocalizedString());
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_LOCK_MEMORY.toLocalizedString());
+        + "<workingdir> Directory in which cacheserver runs, default is the current directory");
+    out.println("\t"
+        + "<classpath> Location of user classes required by the cache server.  This path is appended to the current classpath.");
+    out.println(
+        "\t" + "<attName> Distributed system attribute such as mcast-port or cache-xml-file.");
+    out.println("\t" + "-rebalance  Indicates that the Cache should immediately be rebalanced");
+    out.println(
+        "\t" + "-disable-default-server  Do not add a default <cache-server>");
+    out.println("\t"
+        + "<server-port>  Port the server is to listen on for client connections. This overrides the port set in the <cache-server> element of the cache-xml-file");
+    out.println(
+        "\t" + "<server-bind-address>  Address the server is to listen on for client connections. This overrides the bind-address set in the <cache-server> element of the cache-xml-file");
+    out.println(
+        "\t" + "<critical-heap-percentage>  Sets the critical heap threshold limit of the Resource Manager. This best works with parallel young generation collector (UseParNewGC) and concurrent low pause collector (UseConcMarkSweepGC) with appropriate CMSInitiatingOccupancyFraction like 50%. This overrides the critical-heap-percentage set in the <resource-manager> element of the cache-xml-file");
+    out.println(
+        "\t" + "<eviction-heap-percentage>  Sets the eviction heap threshold limit of the Resource Manager above which the eviction should begin on Regions configured for eviction by heap LRU. This overrides the eviction-heap-percentage set in the resource-manager> element of the cache-xml-file");
+    out.println("\t"
+        + "<critical-Off-heap-percentage>  Sets the critical off-heap threshold limit of the Resource Manager. This overrides the critical-off-heap-percentage set in the <resource-manager> element of the cache-xml-file");
+    out.println("\t"
+        + "<eviction-off-heap-percentage>  Sets the eviction heap threshold limit of the Resource Manager above which the eviction should begin on Regions configured for eviction by off-heap LRU. This overrides the eviction-off-heap-percentage set in the <resource-manager> element of the cache-xml-file");
+    out.println("\t"
+        + "-lock-memory Locks heap and off-heap memory pages into RAM, thereby preventing the operating system from swapping them out to disk.");
-        + LocalizedStrings.CacheServerLauncher_STOPS_A_GEMFIRE_CACHESERVER_VM.toLocalizedString());
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_DIR.toLocalizedString());
+        + "Stops a GemFire CacheServer VM");
+    out.println("\t"
+        + "<workingdir> Directory in which cacheserver runs, default is the current directory");
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_STATUS.toLocalizedString());
-    out.println("\t" + LocalizedStrings.CacheServerLauncher_DIR.toLocalizedString());
+    out.println("\t" + "Reports the status and process id of a GemFire CacheServer VM");
+    out.println("\t"
+        + "<workingdir> Directory in which cacheserver runs, default is the current directory");
-      throw new Exception(LocalizedStrings.CacheServerLauncher_INTERNAL_ERROR_SHOULDNT_REACH_HERE
-          .toLocalizedString());
+      throw new Exception("internal error.. should not reach here.");
-            LocalizedStrings.CacheServerLauncher_ERROR_STARTING_SERVER_PROCESS.toLocalizedString(),
+            "Error starting server process. ",
-        launcher.logger.severe(LocalizedStrings.CacheServerLauncher_CACHE_SERVER_ERROR, t);
+        launcher.logger.severe("Cache server error", t);
-            LocalizedStrings.CacheServerLauncher_ERROR_0.toLocalizedString(t.getMessage()));
+            String.format("Error: %s", t.getMessage()));
-          LocalizedStrings.CacheServerLauncher_THE_INPUT_WORKING_DIRECTORY_DOES_NOT_EXIST_0
-              .toLocalizedString(dirValue));
+          String.format("The input working directory does not exist:  %s",
+              dirValue));
-            LocalizedStrings.CacheServerLauncher_UNKNOWN_ARGUMENT_0.toLocalizedString(arg));
+            String.format("Unknown argument:  %s", arg));
-        LocalizedStrings.CacheServerLauncher_UNKNOWN_ARGUMENT_0.toLocalizedString(key));
+        String.format("Unknown argument:  %s", key));
-            LocalizedStrings.CacheServerLauncher_UNKNOWN_ARGUMENT_0.toLocalizedString(arg));
+            String.format("Unknown argument:  %s", arg));
-            LocalizedStrings.CacheServerLauncher_UNKNOWN_ARGUMENT_0.toLocalizedString(arg));
+            String.format("Unknown argument:  %s", arg));
-          LocalizedStrings.CacheServerLauncher_A_0_IS_ALREADY_RUNNING_IN_DIRECTORY_1_2
-              .toLocalizedString(this.baseName, workingDir, status));
+          String.format("A %s is already running in directory %s %s",
+              this.baseName, workingDir, status));
-    System.out.println(LocalizedStrings.CacheServerLauncher_STARTING_0_WITH_PID_1
-        .toLocalizedString(this.baseName, pid));
+    System.out.println(String.format("Starting %s with pid: {1,number,#}",
+        this.baseName, pid));
-    logger = system.getLogWriter().convertToLogWriterI18n();
+    logger = system.getLogWriter();
-                  logger.warning(LocalizedStrings.CacheServerLauncher_CREATE_STATUS_EXCEPTION_0,
-                      e.toString());
+                  logger.warning(String.format(
+                      "The cacheserver status file could not be recreated due to the following exception: %s",
+                      e.toString()));
-            LocalizedStrings.CacheServerLauncher_0_STOPPED.toLocalizedString(this.baseName));
+            String.format("The %s has stopped.", this.baseName));
-            LocalizedStrings.CacheServerLauncher_TIMEOUT_WAITING_FOR_0_TO_SHUTDOWN_STATUS_IS_1
-                .toLocalizedString(this.baseName, this.status));
+            String.format("Timeout waiting for %s to shutdown, status is: %s",
+                this.baseName, this.status));
-          LocalizedStrings.CacheServerLauncher_THE_SPECIFIED_WORKING_DIRECTORY_0_CONTAINS_NO_STATUS_FILE
-              .toLocalizedString(this.workingDir));
+          String.format("The specified working directory (%s) contains no status file",
+              this.workingDir));
-            LocalizedStrings.CacheServerLauncher_SEE_LOG_FILE_FOR_DETAILS.toLocalizedString());
+            "See log file for details.");
-          LocalizedStrings.CacheServerLauncher_NO_AVAILABLE_STATUS.toLocalizedString());
+          "No available status.");
-              System.out.println(LocalizedStrings.CacheServerLauncher_LAUNCH_IN_PROGRESS_0
-                  .toLocalizedString(elapsedSec, status.dsMsg));
+              System.out.println(String.format(
+                  "The server is still starting. %s seconds have elapsed since the last log message:  %s",
+                  elapsedSec, status.dsMsg));

MOV26 UPD40 UPD43 UPD42 MOV32 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 INS45 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS32 UPD42 INS42 INS45 INS42 INS42 MOV32 UPD42 UPD42 INS45 DEL40 DEL26 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40