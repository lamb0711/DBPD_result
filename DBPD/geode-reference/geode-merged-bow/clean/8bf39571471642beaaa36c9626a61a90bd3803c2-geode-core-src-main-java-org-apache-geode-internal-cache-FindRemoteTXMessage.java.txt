Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Message to all the peers to ask which member hosts the transaction
- * for the given transaction id
+ * Message to all the peers to ask which member hosts the transaction for the given transaction id
-public class FindRemoteTXMessage extends HighPriorityDistributionMessage implements MessageWithReply {
+public class FindRemoteTXMessage extends HighPriorityDistributionMessage
+    implements MessageWithReply {
-  
+
-  
-  public FindRemoteTXMessage() {
-  }
-  
+
+  public FindRemoteTXMessage() {}
+
-  
+
+   * 
-   * @return reply processor containing memberId of the member that hosts
-   * the transaction and a recently committed transactionMessage if any
+   * @return reply processor containing memberId of the member that hosts the transaction and a
+   *         recently committed transactionMessage if any
-    final InternalDistributedSystem system = 
-      (InternalDistributedSystem)cache.getDistributedSystem();
+    final InternalDistributedSystem system =
+        (InternalDistributedSystem) cache.getDistributedSystem();
-    FindRemoteTXMessageReplyProcessor processor = new FindRemoteTXMessageReplyProcessor(dm, recipients, txId);
+    FindRemoteTXMessageReplyProcessor processor =
+        new FindRemoteTXMessageReplyProcessor(dm, recipients, txId);
-  
+
-      GemFireCacheImpl cache = GemFireCacheImpl.getInstance();//.getExisting("Looking up CacheTransactionManager");
+      GemFireCacheImpl cache = GemFireCacheImpl.getInstance();// .getExisting("Looking up
+                                                              // CacheTransactionManager");
-        logger.debug("TX: FoundRemoteTXMessage: isHostingTx for txid:{}? {} isPartialCommit? {}", txId, reply.isHostingTx, reply.isPartialCommitMessage);
+        logger.debug("TX: FoundRemoteTXMessage: isHostingTx for txid:{}? {} isPartialCommit? {}",
+            txId, reply.isHostingTx, reply.isPartialCommitMessage);
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-//    className.substring(className.lastIndexOf('.', className.lastIndexOf('.') - 1) + 1);  // partition.<foo> more generic version 
-    buff.append(className.substring(className.indexOf(PartitionMessage.PN_TOKEN) + PartitionMessage.PN_TOKEN.length())); // partition.<foo>
-    buff.append("(txId=").append(this.txId)
-      .append("; sender=").append(getSender())
-      .append("; processorId=").append(this.processorId);
+    // className.substring(className.lastIndexOf('.', className.lastIndexOf('.') - 1) + 1); //
+    // partition.<foo> more generic version
+    buff.append(className.substring(
+        className.indexOf(PartitionMessage.PN_TOKEN) + PartitionMessage.PN_TOKEN.length())); // partition.<foo>
+    buff.append("(txId=").append(this.txId).append("; sender=").append(getSender())
+        .append("; processorId=").append(this.processorId);
-  
+
-  
-  
+
+
+
-    
+
-    
+
-     * @return if hosting member is null, the rebuilt TXCommitMessage
-     *  from partial TXCommitMessages distributed to peers during
-     *  commit processing
+     * @return if hosting member is null, the rebuilt TXCommitMessage from partial TXCommitMessages
+     *         distributed to peers during commit processing
-  
+
-  
+
-   * Reply message for {@link FindRemoteTXMessage}. Reply is a boolean
-   * to indicate if the recipient hosts or has recently hosted the tx state.
-   * If the member did host the txState previously, reply contains
-   * the complete TXCommitMessage representing the tx.
+   * Reply message for {@link FindRemoteTXMessage}. Reply is a boolean to indicate if the recipient
+   * hosts or has recently hosted the tx state. If the member did host the txState previously, reply
+   * contains the complete TXCommitMessage representing the tx.
-    public FindRemoteTXMessageReply() {
-    }
-    
+
+    public FindRemoteTXMessageReply() {}
+
+
+
-    public void fromData(DataInput in) throws IOException,
-        ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66