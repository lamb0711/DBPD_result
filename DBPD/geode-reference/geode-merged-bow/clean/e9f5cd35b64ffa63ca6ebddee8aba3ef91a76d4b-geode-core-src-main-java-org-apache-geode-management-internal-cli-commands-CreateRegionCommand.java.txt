GEODE-5971: Refactor CreateRegionCommand to extend SingleGfshCommand

- Store config via generating a RegionConfig object rather than an XML
entity

Signed-off-by: Peter Tran <ptran@pivotal.io>
Signed-off-by: Aditya Anchuri <aanchuri@pivotal.io>
Signed-off-by: Jens Deppe <jdeppe@pivotal.io>

+import org.apache.geode.cache.configuration.CacheConfig;
+import org.apache.geode.cache.configuration.RegionConfig;
+import org.apache.geode.internal.logging.LogService;
+import org.apache.geode.management.cli.SingleGfshCommand;
+import org.apache.geode.management.internal.cli.domain.RegionConfigFactory;
+import org.apache.geode.management.internal.cli.result.model.ResultModel;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-public class CreateRegionCommand extends InternalGfshCommand {
+public class CreateRegionCommand extends SingleGfshCommand {
-  public Result createRegion(
+  public ResultModel createRegion(
-    Result result;
-
-      return ResultBuilder.createUserErrorResult(
+      return ResultModel.createError(
-      return ResultBuilder.createUserErrorResult(
+      return ResultModel.createError(
+        LogService.getLogger().info("Create region command: got EntityExists exception");
-        return ResultBuilder.createUserErrorResult(
+        return ResultModel.createError(
-        return ResultBuilder.createUserErrorResult(CliStrings.format(
+        return ResultModel.createError(CliStrings.format(
+      functionArgs.setRegionAttributes(cache.getRegionAttributes(regionShortcut.toString()));
-        return ResultBuilder.createUserErrorResult(CliStrings.format(
+        return ResultModel.createError(CliStrings.format(
-        return ResultBuilder.createGemFireErrorResult(CliStrings.format(
+        return ResultModel.createError(CliStrings.format(
-        return ResultBuilder.createUserErrorResult(CliStrings.format(
+        return ResultModel.createError(CliStrings.format(
-          return ResultBuilder.createUserErrorResult(CliStrings.format(
+          return ResultModel.createError(CliStrings.format(
-          return ResultBuilder.createUserErrorResult(CliStrings.format(
+          return ResultModel.createError(CliStrings.format(
-        return ResultBuilder
-            .createUserErrorResult(CliStrings.CREATE_REGION__MSG__NO_GATEWAYSENDERS_IN_THE_SYSTEM);
+        return ResultModel
+            .createError(CliStrings.CREATE_REGION__MSG__NO_GATEWAYSENDERS_IN_THE_SYSTEM);
-          return ResultBuilder.createUserErrorResult(CliStrings.format(
+          return ResultModel.createError(CliStrings.format(
-        return ResultBuilder.createUserErrorResult(message);
+        return ResultModel.createError(message);
-        return ResultBuilder.createUserErrorResult(CliStrings.format(
+        return ResultModel.createError(CliStrings.format(
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
+        return ResultModel.createError(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-        return ResultBuilder.createUserErrorResult(
+        return ResultModel.createError(
-    result = ResultBuilder.buildResult(regionCreateResults);
-    XmlEntity xmlEntity = findXmlEntity(regionCreateResults);
-    if (xmlEntity != null) {
+    ResultModel resultModel = ResultModel.createMemberStatusResult(regionCreateResults);
+    if (resultModel.isSuccessful()) {
-      persistClusterConfiguration(result,
-          () -> getConfigurationPersistenceService().addXmlEntity(xmlEntity, groups));
+      RegionConfig config = (new RegionConfigFactory()).generate(functionArgs);
+      resultModel.setConfigObject(new CreateRegionResultConfig(config,
+          functionArgs.getRegionPath()));
-    return result;
+
+    return resultModel;
+  }
+
+  private class CreateRegionResultConfig {
+    RegionConfig getRegionConfig() {
+      return regionConfig;
+    }
+
+    String getFullRegionPath() {
+      return fullRegionPath;
+    }
+
+    private final RegionConfig regionConfig;
+    private final String fullRegionPath;
+
+    public CreateRegionResultConfig(RegionConfig regionConfig, String fullRegionPath) {
+      this.regionConfig = regionConfig;
+      this.fullRegionPath = fullRegionPath;
+    }
+  }
+
+  @Override
+  public boolean updateConfigForGroup(String group, CacheConfig config, Object configObject) {
+    if (configObject == null) {
+      return false;
+    }
+
+    CreateRegionResultConfig regionResultConfigObject = (CreateRegionResultConfig) configObject;
+    RegionConfig regionConfig = regionResultConfigObject.getRegionConfig();
+    String regionPath = regionResultConfigObject.getFullRegionPath();
+
+    RegionPath regionPathData = new RegionPath(regionPath);
+    if (regionPathData.getParent() == null) {
+      config.getRegions().add(regionConfig);
+      return true;
+    }
+
+    String[] regionsOnPath = regionPathData.getRegionsOnParentPath();
+    RegionConfig rootConfig = config.getRegions().stream()
+        .filter(r -> r.getName().equals(regionsOnPath[0]))
+        .findFirst()
+        .get();
+
+    RegionConfig currentConfig = rootConfig;
+    for (int i = 1; i < regionsOnPath.length; i++) {
+      final String curRegionName = regionsOnPath[i];
+      currentConfig = currentConfig.getRegions()
+          .stream()
+          .filter(r -> r.getName().equals(curRegionName))
+          .findFirst()
+          .get();
+    }
+
+    currentConfig.getRegions().add(regionConfig);
+
+    return true;
+      Boolean cloningEnabled =
+          (Boolean) parseResult.getParamValue(CliStrings.CREATE_REGION__CLONINGENABLED);
+      if (compressor != null && cloningEnabled != null && !cloningEnabled) {
+        return ResultBuilder.createUserErrorResult(CliStrings
+            .format(CliStrings.CREATE_REGION__MSG__CANNOT_DISABLE_CLONING_WITH_COMPRESSOR,
+                new Object[] {compressor}));
+      }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS40 UPD43 INS55 INS31 UPD42 UPD43 INS83 INS42 INS31 INS31 INS23 INS23 INS31 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 UPD42 INS60 INS25 INS43 INS42 INS8 INS43 INS42 INS8 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS60 INS60 INS60 INS60 INS25 INS60 INS60 INS60 INS24 INS21 INS41 UPD43 MOV43 INS59 INS32 INS8 UPD42 INS42 INS41 INS42 INS41 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS21 INS42 INS42 INS42 INS27 INS8 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS5 INS59 INS43 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS9 INS60 INS25 INS21 UPD42 UPD42 MOV42 INS32 INS42 INS42 MOV21 MOV60 MOV21 INS42 INS42 INS42 INS42 INS7 INS7 INS42 INS33 INS41 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS32 INS33 INS21 INS41 INS43 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS39 INS59 INS42 INS40 INS42 INS60 INS21 INS32 INS42 INS42 INS43 INS59 INS27 INS8 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD43 INS22 INS42 INS22 INS42 INS9 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS9 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS83 INS43 INS59 INS7 INS42 INS42 INS42 INS42 INS11 INS27 INS38 INS41 UPD42 UPD42 UPD42 UPD42 INS21 INS42 INS42 INS32 UPD42 UPD42 UPD42 UPD42 INS14 INS52 INS42 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS2 INS42 INS32 INS43 INS32 INS27 INS27 INS42 INS32 INS32 INS42 INS42 INS32 INS36 INS42 UPD42 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS33 INS42 INS33 INS42 INS42 INS32 INS32 INS42 INS45 UPD42 UPD42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS14 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS59 INS32 INS32 INS42 INS42 INS42 INS40 INS3 INS42 INS42 INS43 INS42 INS42 INS42 INS32 INS42 INS2 INS32 INS42 INS86 INS5 INS4 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS34 INS32 INS42 INS59 INS32 INS43 INS85 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL86 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL8 DEL25