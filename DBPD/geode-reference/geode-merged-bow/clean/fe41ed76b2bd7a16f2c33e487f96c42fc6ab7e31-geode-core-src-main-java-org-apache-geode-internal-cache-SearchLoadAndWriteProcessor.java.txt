GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
-/* enumerate each imported class because conflict with dl.u.c.TimeoutException */
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.io.NotSerializableException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Lock;
-import org.apache.geode.*;
-import org.apache.geode.cache.*;
+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.CancelCriterion;
+import org.apache.geode.CancelException;
+import org.apache.geode.DataSerializer;
+import org.apache.geode.GemFireException;
+import org.apache.geode.InternalGemFireException;
+import org.apache.geode.SystemFailure;
+import org.apache.geode.cache.CacheEvent;
+import org.apache.geode.cache.CacheFactory;
+import org.apache.geode.cache.CacheLoader;
+import org.apache.geode.cache.CacheLoaderException;
+import org.apache.geode.cache.CacheWriter;
+import org.apache.geode.cache.CacheWriterException;
+import org.apache.geode.cache.DataPolicy;
+import org.apache.geode.cache.EntryEvent;
+import org.apache.geode.cache.LoaderHelper;
+import org.apache.geode.cache.Operation;
+import org.apache.geode.cache.RegionAttributes;
+import org.apache.geode.cache.RegionDestroyedException;
+import org.apache.geode.cache.RegionEvent;
+import org.apache.geode.cache.Scope;
+import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.distributed.internal.*;
+import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;
+import org.apache.geode.distributed.internal.MembershipListener;
+import org.apache.geode.distributed.internal.PooledDistributionMessage;
+import org.apache.geode.distributed.internal.ProcessorKeeper21;
+import org.apache.geode.distributed.internal.ReplyProcessor21;
+import org.apache.geode.distributed.internal.SerialDistributionMessage;
+import org.apache.geode.internal.offheap.Releasable;
-import org.apache.logging.log4j.Logger;
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.io.NotSerializableException;
-import java.util.*;
-import java.util.concurrent.RejectedExecutionException;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.locks.Lock;
-
- *
-
-      Integer.getInteger("DistributionManager.OptimizedUpdateByteLimit", 2000).intValue();
+      Integer.getInteger("DistributionManager.OptimizedUpdateByteLimit", 2000);
-      Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "search-retry-interval", 2000).longValue();
-
+      Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "search-retry-interval", 2000);
-          ((EntryEventImpl) listenerEvent).release();
+          ((Releasable) listenerEvent).release();
-      } catch (IllegalArgumentException e) {
+      } catch (IllegalArgumentException ignore) {
-
-
-
-
-      this.distributionManager = ((CacheDistributionAdvisee) theRegion).getDistributionManager();
+      this.distributionManager = theRegion.getDistributionManager();
-
-  /************** Protected Methods ********************/
-  /************** Package Methods **********************/
-
-  /************** Private Methods **********************/
-   *
-
-          } catch (InterruptedException e) {
+          } catch (InterruptedException ignore) {
-          ((EntryEventImpl) event).release();
+          ((Releasable) event).release();
-          } catch (RejectedExecutionException ex) {
+          } catch (RejectedExecutionException ignore) {
-                    .toLocalizedString(new Object[] {Integer.valueOf(this.processorId), this.key}));
+                    .toLocalizedString(new Object[] {this.processorId, this.key}));
-                sb.append(" lastNotifySpot=" + lastNS);
+                sb.append(" lastNotifySpot=").append(lastNS);
-          } catch (InterruptedException e) {
+          } catch (InterruptedException ignore) {
-    } ;
+    }
-    } ;
+    }
-  /*****************************************************************************
-   * INNER CLASSES
-   *****************************************************************************/
-
-
-
-    public QueryMessage() {};
+    public QueryMessage() {
+      // do nothing
+    }
-        GemFireCacheImpl gfc = (GemFireCacheImpl) CacheFactory.getInstance(dm.getSystem());
-        if (gfc.isGlobalRegionInitializing(this.regionName)) {
+        InternalCache cache = (InternalCache) CacheFactory.getInstance(dm.getSystem());
+        if (cache.isGlobalRegionInitializing(this.regionName)) {
-                {
-                  if (dm.cacheTimeMillis() - startTime < timeoutMs) {
-                    o = region.getNoLRU(this.key, false, true, true); // OFFHEAP: incrc, copy bytes,
-                                                                      // decrc
-                    if (o != null && !Token.isInvalid(o) && !Token.isRemoved(o)
-                        && !region.isExpiredWithRegardTo(this.key, this.ttl, this.idleTime)) {
-                      isPresent = true;
-                      VersionStamp stamp = entry.getVersionStamp();
-                      if (stamp != null && stamp.hasValidVersion()) {
-                        tag = stamp.asVersionTag();
-                      }
-                      long lastModified = entry.getLastModified();
-                      lastModifiedCacheTime = lastModified;
-                      isSer = o instanceof CachedDeserializable;
-                      if (isSer) {
-                        o = ((CachedDeserializable) o).getSerializedValue();
-                      }
-                      if (isPresent && (this.alwaysSendResult
-                          || (ObjectSizer.DEFAULT.sizeof(o) < SMALL_BLOB_SIZE))) {
-                        sendResult = true;
-                      }
+                if (dm.cacheTimeMillis() - startTime < timeoutMs) {
+                  o = region.getNoLRU(this.key, false, true, true); // OFFHEAP: incrc, copy bytes,
+                                                                    // decrc
+                  if (o != null && !Token.isInvalid(o) && !Token.isRemoved(o)
+                      && !region.isExpiredWithRegardTo(this.key, this.ttl, this.idleTime)) {
+                    isPresent = true;
+                    VersionStamp stamp = entry.getVersionStamp();
+                    if (stamp != null && stamp.hasValidVersion()) {
+                      tag = stamp.asVersionTag();
-                  } else {
-                    requestorTimedOut = true;
+                    lastModifiedCacheTime = entry.getLastModified();
+                    isSer = o instanceof CachedDeserializable;
+                    if (isSer) {
+                      o = ((CachedDeserializable) o).getSerializedValue();
+                    }
+                    if (isPresent && (this.alwaysSendResult
+                        || (ObjectSizer.DEFAULT.sizeof(o) < SMALL_BLOB_SIZE))) {
+                      sendResult = true;
+                    }
+                } else {
+                  requestorTimedOut = true;
-      } catch (RegionDestroyedException rde) {
+      } catch (RegionDestroyedException ignore) {
-      } catch (CancelException cce) {
+      } catch (CancelException ignore) {
-
-
-  /********************* ResponseMessage ***************************************/
-
-
-
-                    // ebv = null; (redundant assignment)
+                    // nothing?
-                      long lastModified = entry.getLastModified();
-                      lastModifiedCacheTime = lastModified;
+                      lastModifiedCacheTime = entry.getLastModified();
-      } catch (RegionDestroyedException rde) {
+      } catch (RegionDestroyedException ignore) {
-      } catch (CancelException cce) {
+      } catch (CancelException ignore) {
-
-
-  /********************* NetSearchReplyMessage ***************************************/
-
-
-
-      } catch (NotSerializableException e) {
+      } catch (NotSerializableException ignore) {
-
-
-        GemFireCacheImpl gfc = (GemFireCacheImpl) CacheFactory.getInstance(dm.getSystem());
+        InternalCache gfc = (InternalCache) CacheFactory.getInstance(dm.getSystem());
-
-
-
-
-
-  /********************* NetLoadReplyMessage ***************************************/
-
-
-        GemFireCacheImpl gfc = (GemFireCacheImpl) CacheFactory.getInstance(dm.getSystem());
+        InternalCache gfc = (InternalCache) CacheFactory.getInstance(dm.getSystem());
-      } catch (RegionDestroyedException rde) {
+      } catch (RegionDestroyedException ignore) {
-
-
-
-
-
-  /********************* NetWriteReplyMessage *********************************/
-

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 MOV32 MOV32 MOV8 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV60 MOV25 MOV60 MOV12 INS12 INS12 MOV12 MOV12 MOV8 MOV60 MOV25 MOV60 MOV60 MOV21 INS44 MOV8 INS44 MOV8 MOV44 INS44 UPD43 MOV27 INS8 MOV43 INS42 MOV43 INS42 UPD42 MOV43 INS42 UPD42 UPD43 UPD43 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 MOV21 INS54 MOV32 UPD42 UPD42 UPD43 MOV8 MOV8 UPD42 MOV42 UPD43 UPD43 UPD42 MOV60 INS25 MOV21 UPD42 UPD42 MOV27 MOV8 MOV25 UPD42 UPD42 UPD42 INS51 UPD42 UPD42 UPD43 UPD43 INS42 MOV8 INS21 UPD42 UPD42 MOV6 INS32 INS42 INS42 MOV45 MOV22 INS32 INS42 INS42 MOV42 MOV42 INS45 MOV32 MOV32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL43 DEL42 DEL11 DEL36 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL20 DEL20 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL51 DEL25 DEL8 DEL42 DEL44 DEL12 DEL42 DEL44 DEL12 DEL54 DEL8 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL44