GEODE-5070: Use a random member for describe & list jdbc connector commands (#1849)

         Retrieves connections & mappings from CC(if running) 
         or from a random member(if CC not running)
-import org.springframework.shell.core.annotation.CliOption;
-import org.apache.geode.management.cli.ConverterHint;
-  public Result listMapping(
-      @CliOption(key = {CliStrings.MEMBER}, optionContext = ConverterHint.MEMBERIDNAME,
-          help = LIST_MAPPINGS_MEMBER__HELP) String onMember) {
+  public Result listMapping() {
+    Collection<ConnectorService.RegionMapping> mappings = null;
-    // when member is specified, we go to each member and describe what are on the members
-    if (onMember != null) {
-      DistributedMember member = getMember(onMember);
-      if (member == null) {
-        return ResultBuilder.createUserErrorResult(CliStrings.NO_MEMBERS_FOUND_MESSAGE);
-      }
-
-      List<?> result =
-          (List<?>) executeFunction(new ListMappingFunction(), null, member).getResult();
-      Set<ConnectorService.RegionMapping> mappings =
-          (Set<ConnectorService.RegionMapping>) result.get(0);
-      TabularResultData tabularResultData = ResultBuilder.createTabularResultData();
-      boolean connectionsExist = fillTabularResultData(mappings, tabularResultData);
-
-      return createResult(tabularResultData, connectionsExist);
-    }
-
-    // otherwise, use cluster configuration to describe the connections
+    // check if CC is available and use it to describe the connection
-    if (ccService == null) {
-      return ResultBuilder.createInfoResult(
-          "cluster configuration service is not running. Use --member option to describe mappings on specific members.");
+    if (ccService != null) {
+      ConnectorService service =
+          ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
+      if (service != null) {
+        mappings = service.getRegionMapping();
+      }
+    } else {
+      // otherwise get it from any member
+      Set<DistributedMember> members = findMembers(null, null);
+      if (members.size() > 0) {
+        DistributedMember targetMember = members.iterator().next();
+        List<?> result =
+            (List<?>) executeFunction(new ListMappingFunction(), null, targetMember).getResult();
+        if (!result.isEmpty()) {
+          mappings = (Collection<ConnectorService.RegionMapping>) result.get(0);
+        }
+      }
-    ConnectorService service =
-        ccService.getCustomCacheElement("cluster", "connector-service", ConnectorService.class);
-    if (service == null) {
-      return ResultBuilder.createInfoResult(NO_MAPPINGS_FOUND);
+    if (mappings == null) {
+      return ResultBuilder.createInfoResult("No mappings found");
-    boolean mappingsExist = fillTabularResultData(service.getRegionMapping(), tabularResultData);
+    boolean mappingsExist = fillTabularResultData(mappings, tabularResultData);

INS60 MOV60 INS74 INS59 UPD27 INS8 INS43 MOV43 INS42 INS33 MOV60 INS25 INS60 MOV25 UPD42 UPD42 INS42 INS27 INS8 UPD74 MOV74 INS59 UPD27 INS42 INS33 INS21 INS43 INS42 INS32 INS32 INS34 INS25 INS45 INS7 INS42 INS42 INS33 INS33 INS42 INS42 INS38 INS8 INS42 MOV32 UPD42 INS32 INS32 INS21 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS7 UPD42 MOV42 UPD42 MOV42 INS42 MOV11 UPD42 UPD74 UPD43 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL40 DEL4 DEL80 DEL42 DEL40 DEL80 DEL42 DEL42 DEL80 DEL77 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL32 DEL41 DEL42 DEL33 DEL32 DEL42 DEL33 DEL27 DEL40 DEL32 DEL41 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60