Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-   * @return <tt>true</tt> if this CompositeOutputStream did not already contain the specified OutputStream
+   * @return <tt>true</tt> if this CompositeOutputStream did not already contain the specified
+   *         OutputStream
-    synchronized(this.lock) {
+    synchronized (this.lock) {
-  
+
-    synchronized(this.lock) {
+    synchronized (this.lock) {
-  
+
-  
+
-  
+
-  
+
-   * Writes the specified <code>byte</code> to this output stream. 
+   * Writes the specified <code>byte</code> to this output stream.
-   * The <code>write</code> method of <code>FilterOutputStream</code> 
-   * calls the <code>write</code> method of its underlying output stream, 
-   * that is, it performs <tt>out.write(b)</tt>.
+   * The <code>write</code> method of <code>FilterOutputStream</code> calls the <code>write</code>
+   * method of its underlying output stream, that is, it performs <tt>out.write(b)</tt>.
-   * Implements the abstract <tt>write</tt> method of <tt>OutputStream</tt>. 
+   * Implements the abstract <tt>write</tt> method of <tt>OutputStream</tt>.
-   * @param      b   the <code>byte</code>.
-   * @exception  IOException  if an I/O error occurs.
+   * @param b the <code>byte</code>.
+   * @exception IOException if an I/O error occurs.
-   * Flushes this output stream and forces any buffered output bytes 
-   * to be written out to the stream. 
+   * Flushes this output stream and forces any buffered output bytes to be written out to the
+   * stream.
-   * The <code>flush</code> method of <code>FilterOutputStream</code> 
-   * calls the <code>flush</code> method of its underlying output stream. 
+   * The <code>flush</code> method of <code>FilterOutputStream</code> calls the <code>flush</code>
+   * method of its underlying output stream.
-   * @exception  IOException  if an I/O error occurs.
-   * @see        java.io.FilterOutputStream#out
+   * @exception IOException if an I/O error occurs.
+   * @see java.io.FilterOutputStream#out
-   * Closes this output stream and releases any system resources 
-   * associated with the stream. 
+   * Closes this output stream and releases any system resources associated with the stream.
-   * The <code>close</code> method of <code>FilterOutputStream</code> 
-   * calls its <code>flush</code> method, and then calls the 
-   * <code>close</code> method of its underlying output stream. 
+   * The <code>close</code> method of <code>FilterOutputStream</code> calls its <code>flush</code>
+   * method, and then calls the <code>close</code> method of its underlying output stream.
-   * @exception  IOException  if an I/O error occurs.
-   * @see        java.io.FilterOutputStream#flush()
-   * @see        java.io.FilterOutputStream#out
+   * @exception IOException if an I/O error occurs.
+   * @see java.io.FilterOutputStream#flush()
+   * @see java.io.FilterOutputStream#out
-  
+

UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66