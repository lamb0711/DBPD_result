Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014, Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.cache.operations.internal.GetOperationContextImpl;
+import com.gemstone.gemfire.internal.cache.versions.VersionTag;
+import com.gemstone.gemfire.internal.offheap.OffHeapHelper;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
+    try {
-      Get70.Entry entry = request.getValueAndIsObject(region, key,
-              null, servConn);
-      keyNotPresent = entry.keyNotPresent;
-      if (isDebugEnabled) {
+      Get70.Entry entry = request.getEntry(region, key, null, servConn);
+      @Retained final Object originalData = entry.value;
+      Object data = originalData;
+      if (logger.isDebugEnabled()) {
+      boolean addedToValues = false;
+      try {
+        boolean isObject = entry.isObject;
+        VersionTag versionTag = entry.versionTag;
+        keyNotPresent = entry.keyNotPresent;
-      if (postAuthzRequest != null) {
-        try {
-          getContext = postAuthzRequest.getAuthorize(regionName, key, entry.value,
-                  entry.isObject, getContext);
-          byte[] serializedValue = getContext.getSerializedValue();
-          if (serializedValue == null) {
-            entry.value = getContext.getObject();
-          } else {
-            entry.value = serializedValue;
+        if (postAuthzRequest != null) {
+          try {
+            getContext = postAuthzRequest.getAuthorize(regionName, key, data,
+                isObject, getContext);
+            GetOperationContextImpl gci = (GetOperationContextImpl) getContext;
+            Object newData = gci.getRawValue();
+            if (newData != data) {
+              // user changed the value
+              isObject = getContext.isObject();
+              data = newData;
+            }
+          } catch (NotAuthorizedException ex) {
+            logger.warn(LocalizedMessage.create(LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1,
+                new Object[]{servConn.getName(), key}), ex);
+            values.addExceptionPart(key, ex);
+            continue;
+          } finally {
+            if (getContext != null) {
+              ((GetOperationContextImpl)getContext).release();
+            }
-          entry.isObject = getContext.isObject();
-          if (isDebugEnabled) {
-            logger.debug("{}: Passed GET post-authorization for key={}: {}", servConn.getName(), key, entry.value);
-          }
-        } catch (NotAuthorizedException ex) {
-          logger.warn(LocalizedMessage.create(LocalizedStrings.GetAll_0_CAUGHT_THE_FOLLOWING_EXCEPTION_ATTEMPTING_TO_GET_VALUE_FOR_KEY_1, new Object[]{servConn.getName(), key}), ex);
-          values.addExceptionPart(key, ex);
-          continue;
-      }
-
-
-      // Add the entry to the list that will be returned to the client
-
-      if (keyNotPresent) {
-        values.addObjectPartForAbsentKey(key, entry.value, entry.versionTag);
-      } else {
-        values.addObjectPart(key, entry.value, entry.isObject, entry.versionTag);
+        // Add the entry to the list that will be returned to the client
+        if (keyNotPresent) {
+          values.addObjectPartForAbsentKey(key, data, versionTag);
+          addedToValues = true;
+        } else {
+          values.addObjectPart(key, data, isObject, versionTag);
+          addedToValues = true;
+        }
+      } finally {
+        if (!addedToValues || data != originalData) {
+          OffHeapHelper.release(originalData);
+        }
+    } finally {
+      values.release();
+    }
-    chunkedResponseMsg.addObjPart(list, zipValues);
+    chunkedResponseMsg.addObjPartNoCopying(list);
-}
+}

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS54 INS8 INS8 MOV60 MOV60 MOV60 MOV60 MOV24 MOV25 MOV21 MOV21 INS21 UPD42 INS32 INS60 INS60 INS60 INS54 INS42 INS42 INS78 INS83 INS43 INS59 INS43 INS59 INS32 INS39 INS59 INS8 INS8 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS60 INS60 MOV21 MOV25 MOV25 INS25 UPD42 INS39 INS59 INS43 INS59 INS27 INS8 INS42 INS40 INS42 INS42 INS40 INS21 INS21 INS38 INS27 INS21 INS8 INS8 INS7 INS7 INS42 INS42 INS42 INS32 MOV21 INS60 MOV60 MOV25 MOV25 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS43 INS59 INS43 UPD27 INS27 INS42 INS42 INS11 INS42 UPD42 UPD42 INS42 MOV21 INS42 INS33 INS42 INS42 INS43 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS36 UPD42 INS11 INS43 INS42 INS42 DEL42 DEL40 DEL40 DEL39 DEL85 DEL5 DEL33 DEL40 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL7 DEL21 DEL8 DEL8 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42