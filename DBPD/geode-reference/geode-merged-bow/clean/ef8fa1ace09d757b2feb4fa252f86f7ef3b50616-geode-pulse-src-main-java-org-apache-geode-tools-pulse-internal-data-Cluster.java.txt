GEODE-4776: Migrate to chrome driver for Pulse UI Tests (#1549)

 * Migrate to use chrome web driver
 * Remove unused mock implementations on Pulse UI tests
 * Fixed a null pointer in Fake MBean with integrated security
 * Ignore couple of tests that are failing when run in command line
-    this.updater = ClusterDataFactory.getUpdater(this, host, port);
+    this.updater = new JMXDataUpdater(serverName, port, this);
-  /**
-   * inner class for creating Mock Data
-   *
-   *
-   */
-  public class MockDataUpdater implements IClusterUpdater {
-    public MockDataUpdater() {}
-
-    /**
-     * function used for updating Cluster data for Mock
-     */
-    @Override
-    public boolean updateData() {
-      setConnectedFlag(true);
-      Random r = new Random(System.currentTimeMillis());
-      totalHeapSize = (long) Math.abs(r.nextInt(3200 - 2048) + 2048);
-      usedHeapSize = (long) Math.abs(r.nextInt(2048));
-      writePerSec = Math.abs(r.nextInt(100));
-      subscriptionCount = Math.abs(r.nextInt(100));
-      registeredCQCount = (long) Math.abs(r.nextInt(100));
-      txnCommittedCount = Math.abs(r.nextInt(100));
-      txnRollbackCount = Math.abs(r.nextInt(100));
-      runningFunctionCount = Math.abs(r.nextInt(100));
-      clusterId = Math.abs(r.nextInt(100));
-      writePerSecTrend.add(writePerSec);
-      diskWritesRate = writePerSec;
-      garbageCollectionCount = (long) Math.abs(r.nextInt(100));
-      garbageCollectionTrend.add(garbageCollectionCount);
-
-      readPerSec = Math.abs(r.nextInt(100));
-      readPerSecTrend.add(readPerSec);
-
-      diskReadsRate = readPerSec;
-      queriesPerSec = Math.abs(r.nextInt(100));
-      queriesPerSecTrend.add(queriesPerSec);
-
-      loadPerSec = Math.abs(r.nextInt(100));
-      totalHeapSize = totalHeapSize;
-      totalBytesOnDisk = totalHeapSize;
-
-      totalBytesOnDiskTrend.add(totalBytesOnDisk);
-
-      memoryUsageTrend.add(usedHeapSize);
-      throughoutWritesTrend.add(writePerSec);
-      throughoutReadsTrend.add(readPerSec);
-
-      memberCount = 0;
-
-      // Create 3 members first time around
-      if (membersHMap.size() == 0) {
-
-        membersHMap.put("pnq-visitor1",
-            initializeMember("pnq-visitor1(Launcher_Manager-1099-13-40-24-5368)-24357",
-                "pnq-visitor1", true, true, true, true));
-
-        for (int i = 2; i <= 8; i++) {
-          if ((i % 2) == 0) {
-            membersHMap.put("pnq-visitor" + i,
-                initializeMember("pnq-visitor" + i + "(Launcher_Server-1099-13-40-24-5368)-24357",
-                    "pnq-visitor" + i, false, false, true, false));
-          } else {
-            if ((i % 3) == 0) {
-              membersHMap.put("pnq-visitor" + i,
-                  initializeMember("pnq-visitor" + i + "(Launcher_Server-1099-13-40-24-5368)-24357",
-                      "pnq-visitor" + i, false, false, false, false));
-            } else {
-              membersHMap.put("pnq-visitor" + i,
-                  initializeMember("pnq-visitor" + i + "(Launcher_Server-1099-13-40-24-5368)-24357",
-                      "pnq-visitor" + i, false, true, true, true));
-            }
-          }
-        }
-
-        for (Entry<String, Member> memberSet : membersHMap.entrySet()) {
-          HashMap<String, Cluster.Region> memberRegions = new HashMap<String, Cluster.Region>();
-          HashMap<String, Cluster.Client> memberClientsHM = new HashMap<String, Cluster.Client>();
-
-          Random randomGenerator = new Random();
-          int randomInt = (randomGenerator.nextInt(15)) + 10;
-          int regionExists = 0;
-          for (int y = 0; y < randomInt; y++) {
-            Region region = initMemberRegion(y, memberSet.getValue().getName());
-            if (clusterRegionMap.entrySet().size() > 0) {
-              for (Region clusterRegion : clusterRegionMap.values()) {
-                if ((region.name).equals(clusterRegion.name)) {
-                  clusterRegion.memberName.add(memberSet.getValue().getName());
-                  clusterRegion.memberCount = clusterRegion.memberCount + 1;
-                  regionExists = 1;
-                  break;
-                }
-              }
-              if (regionExists == 0) {
-                addClusterRegion(region.getFullPath(), region);
-              }
-            } else {
-              addClusterRegion(region.getFullPath(), region);
-            }
-            memberRegions.put(region.getFullPath(), region);
-            totalRegionCount = clusterRegionMap.values().size();
-          }
-          membersHMap.get(memberSet.getKey()).setMemberRegions(memberRegions);
-
-          if (memberSet.getValue().isCache) {
-            Client client = initMemberClient(0, memberSet.getValue().getHost());
-            memberClientsHM.put(client.getId(), client);
-            randomInt = randomGenerator.nextInt(10);
-            for (int y = 1; y < randomInt; y++) {
-              Client newClient = initMemberClient(y, memberSet.getValue().getHost());
-              memberClientsHM.put(newClient.getId(), newClient);
-            }
-            membersHMap.get(memberSet.getKey()).updateMemberClientsHMap(memberClientsHM);
-            clientConnectionCount = clientConnectionCount
-                + membersHMap.get(memberSet.getKey()).getMemberClientsHMap().size();
-          }
-
-        }
-      }
-
-      // add additional regions to members
-      for (Entry<String, Member> memberSet : membersHMap.entrySet()) {
-        HashMap<String, Cluster.Region> memberRegions = new HashMap<String, Cluster.Region>();
-
-        Random randomGenerator = new Random();
-        int randomInt = (randomGenerator.nextInt(5)) + 5;
-        int regionExists = 0;
-        for (int y = 0; y < randomInt; y++) {
-          Region region = initMemberRegion(y, memberSet.getValue().getName());
-          if (clusterRegionMap.entrySet().size() > 0) {
-            for (Region clusterRegion : clusterRegionMap.values()) {
-              if ((region.name).equals(clusterRegion.name)) {
-                clusterRegion.memberName.add(memberSet.getValue().getName());
-                clusterRegion.memberCount = clusterRegion.memberCount + 1;
-                regionExists = 1;
-                break;
-              }
-            }
-            if (regionExists == 0) {
-              addClusterRegion(region.getFullPath(), region);
-            }
-          } else {
-            addClusterRegion(region.getFullPath(), region);
-          }
-          memberRegions.put(region.getFullPath(), region);
-          totalRegionCount = clusterRegionMap.values().size();
-        }
-        membersHMap.get(memberSet.getKey()).setMemberRegions(memberRegions);
-
-      }
-
-      wanInformation.clear();
-      int wanInfoSize = Math.abs(r.nextInt(10));
-      wanInfoSize++;
-      for (int i = 0; i < wanInfoSize; i++) {
-        String name = "Mock Cluster" + i;
-        Boolean value = false;
-        if (i % 2 == 0) {
-          value = true;
-        }
-        wanInformation.put(name, value);
-      }
-      memberCount = membersHMap.size();
-
-      totalHeapSize = (long) 0;
-      for (Entry<String, Member> memberSet : membersHMap.entrySet()) {
-        refresh(membersHMap.get(memberSet.getKey()));
-        Member member = membersHMap.get(memberSet.getKey());
-        totalHeapSize += member.currentHeapSize;
-      }
-
-      for (Region region : clusterRegionMap.values()) {
-        // Memory reads and writes
-        region.getsRate = (Math.abs(r.nextInt(100))) + 1;
-        region.putsRate = (Math.abs(r.nextInt(100))) + 1;
-        region.getsPerSecTrend.add(region.getsRate);
-        region.putsPerSecTrend.add(region.putsRate);
-
-        // Disk reads and writes
-        region.diskReadsRate = (Math.abs(r.nextInt(100))) + 1;
-        region.diskWritesRate = (Math.abs(r.nextInt(100))) + 1;
-        region.diskReadsPerSecTrend.add(region.diskReadsRate);
-        region.diskWritesPerSecTrend.add(region.diskWritesRate);
-      }
-
-      if (clusterStatementMap.size() < 500) {
-        for (int i = 1; i <= 500; ++i) {
-          logger.info("Adding statement = {}", i);
-
-          updateClusterStatement(i);
-        }
-      } else if (clusterStatementMap.size() == 510) {
-        for (Iterator itSt = clusterStatementMap.values().iterator(); itSt.hasNext();) {
-          Cluster.Statement statement = (Cluster.Statement) itSt.next();
-          statement.setNumTimesCompiled((statement.getNumTimesCompiled() + 5));
-          statement.setNumExecution((statement.getNumExecution() + 5));
-          statement.setNumExecutionsInProgress((statement.getNumExecutionsInProgress() + 5));
-          statement.setNumTimesGlobalIndexLookup((statement.getNumTimesGlobalIndexLookup() + 5));
-          statement.setNumRowsModified((statement.getNumRowsModified() + 5));
-        }
-      } else if (clusterStatementMap.size() < 510) {
-        Cluster.Statement statement = new Cluster.Statement();
-        Random randomGenerator = new Random();
-        String statementDefinition = "select * from member where member_name = member-510"
-            + " and lastUpdatedTime = '" + new Date().toString() + "'";
-        Integer intVal = randomGenerator.nextInt(5);
-        statement.setQueryDefinition(statementDefinition);
-        statement.setNumTimesCompiled(intVal.longValue());
-        statement.setNumExecution(intVal.longValue());
-        statement.setNumExecutionsInProgress(intVal.longValue());
-        statement.setNumTimesGlobalIndexLookup(intVal.longValue());
-        statement.setNumRowsModified(intVal.longValue());
-        statement.setParseTime(randomGenerator.nextLong());
-        statement.setBindTime(randomGenerator.nextLong());
-        statement.setOptimizeTime(randomGenerator.nextLong());
-        statement.setRoutingInfoTime(randomGenerator.nextLong());
-        statement.setGenerateTime(randomGenerator.nextLong());
-        statement.setTotalCompilationTime(randomGenerator.nextLong());
-        statement.setExecutionTime(randomGenerator.nextLong());
-        statement.setProjectionTime(randomGenerator.nextLong());
-        statement.setTotalExecutionTime(randomGenerator.nextLong());
-        statement.setRowsModificationTime(randomGenerator.nextLong());
-        statement.setqNNumRowsSeen(intVal.longValue());
-        statement.setqNMsgSendTime(randomGenerator.nextLong());
-        statement.setqNMsgSerTime(randomGenerator.nextLong());
-        statement.setqNRespDeSerTime(randomGenerator.nextLong());
-        addClusterStatement(statementDefinition, statement);
-      }
-
-      return true;
-    }
-
-    private void updateClusterStatement(int iNum) {
-
-      Cluster.Statement statement = new Cluster.Statement();
-      Random randomGenerator = new Random();
-      String statementDefinition = "select * from member where member_name = member-" + iNum
-          + " and lastUpdatedTime = '" + new Date().toString() + "'";
-      Integer intVal = randomGenerator.nextInt(5);
-      statement.setQueryDefinition(statementDefinition);
-      statement.setNumTimesCompiled(intVal.longValue());
-      statement.setNumExecution(intVal.longValue());
-      statement.setNumExecutionsInProgress(intVal.longValue());
-      statement.setNumTimesGlobalIndexLookup(intVal.longValue());
-      statement.setNumRowsModified(intVal.longValue());
-      statement.setParseTime(randomGenerator.nextLong());
-      statement.setBindTime(randomGenerator.nextLong());
-      statement.setOptimizeTime(randomGenerator.nextLong());
-      statement.setRoutingInfoTime(randomGenerator.nextLong());
-      statement.setGenerateTime(randomGenerator.nextLong());
-      statement.setTotalCompilationTime(randomGenerator.nextLong());
-      statement.setExecutionTime(randomGenerator.nextLong());
-      statement.setProjectionTime(randomGenerator.nextLong());
-      statement.setTotalExecutionTime(randomGenerator.nextLong());
-      statement.setRowsModificationTime(randomGenerator.nextLong());
-      statement.setqNNumRowsSeen(intVal.longValue());
-      statement.setqNMsgSendTime(randomGenerator.nextLong());
-      statement.setqNMsgSerTime(randomGenerator.nextLong());
-      statement.setqNRespDeSerTime(randomGenerator.nextLong());
-      addClusterStatement(statementDefinition, statement);
-
-      logger.info("statementDefinition [{}]{}", iNum, statementDefinition);
-    }
-
-    private Region initMemberRegion(int count, String memName) {
-
-      Region memberRegion = new Region();
-      memberRegion.setName("GlobalVilage_" + count);
-      // region and subrgions path
-      if (count < 5) {
-        memberRegion.setFullPath("/GlobalVilage_" + count);
-      } else if (count >= 5 && count < 8) {
-        memberRegion.setFullPath("/GlobalVilage_1/GlobalVilage_" + count);
-      } else if (count >= 8 && count < 10) {
-        memberRegion.setFullPath("/GlobalVilage_2/GlobalVilage_" + count);
-      } else if (count >= 10 && count < 14) {
-        memberRegion.setFullPath("/GlobalVilage_3/GlobalVilage_" + count);
-      } else {
-        memberRegion.setFullPath("/GlobalVilage_3/GlobalVilage_11/GlobalVilage_" + count);
-      }
-
-      Random randomGenerator = new Random();
-      int randomInt = Math.abs(randomGenerator.nextInt(100));
-      memberRegion.setSystemRegionEntryCount(randomInt);
-      // memberRegion.setEntrySize("N/A");
-      memberRegion.setEntrySize(Math.abs(randomGenerator.nextInt(10)));
-      memberRegion.setDiskStoreName("ABC");
-      memberRegion.setScope("DISTRIBUTED_NO_ACK");
-      memberRegion.setDiskSynchronous(true);
-
-      memberRegion.regionType = "REPLICATE_PARTITIONED_NORMAL";
-      memberRegion.persistentEnabled = true;
-      memberRegion.wanEnabled = count % 2 == 0;
-      memberRegion.wanEnabled = true;
-      memberRegion.setSystemRegionEntryCount(
-          Long.valueOf(String.valueOf(Math.abs(randomGenerator.nextInt(100)))));
-      memberRegion.memberName.add(memName);
-      memberRegion.memberCount = 1;
-
-      List<Cluster.RegionOnMember> regionOnMemberList = new ArrayList<Cluster.RegionOnMember>();
-      Cluster.RegionOnMember regionOnMember = new Cluster.RegionOnMember();
-      regionOnMember.setMemberName(memName);
-      regionOnMember.setRegionFullPath(memberRegion.getFullPath());
-      regionOnMember.setEntrySize(1000L);
-      regionOnMember.setEntryCount(10);
-      if (count % 2 == 0) {
-        regionOnMember.localMaxMemory = 20;
-      } else {
-        regionOnMember.localMaxMemory = 0;
-      }
-      regionOnMember.getGetsPerSecTrend().add((Math.abs(randomGenerator.nextInt(100))) + 1);
-      regionOnMember.getPutsPerSecTrend().add((Math.abs(randomGenerator.nextInt(100))) + 1);
-      regionOnMember.getDiskReadsPerSecTrend().add((Math.abs(randomGenerator.nextInt(100))) + 1);
-      regionOnMember.getDiskWritesPerSecTrend().add((Math.abs(randomGenerator.nextInt(100))) + 1);
-      regionOnMemberList.add(regionOnMember);
-
-      memberRegion.setRegionOnMembers(regionOnMemberList);
-
-      return memberRegion;
-    }
-
-    private Client initMemberClient(int count, String host) {
-
-      Client memberClient = new Client();
-      Random r = new Random(System.currentTimeMillis());
-      memberClient.setName("Name_" + count);
-      long processCpuTime = (long) (r.nextDouble() * 100);
-      memberClient.setProcessCpuTime(processCpuTime);
-      memberClient.setCpuUsage(0);
-      memberClient.setGets(Math.abs(r.nextInt(100)));
-      memberClient.setHost(host);
-      memberClient.setId(String.valueOf(1000 + count));
-      memberClient.setPuts(Math.abs(r.nextInt(100)));
-      memberClient.setCpus(Math.abs(r.nextInt(20)));
-      memberClient.setQueueSize(Math.abs(r.nextInt(100)));
-      if ((count % 2) == 0) {
-        memberClient.setStatus("up");
-      } else {
-        memberClient.setStatus("down");
-      }
-      memberClient.setThreads(Math.abs(r.nextInt(100)));
-      memberClient.setUptime(Math.abs(System.currentTimeMillis() - r.nextLong()));
-
-      return memberClient;
-    }
-
-    private Member initializeMember(String id, String name, boolean manager, boolean isCache,
-        boolean isLocator, boolean isServer) {
-      Member m = new Member();
-      m.gemfireVersion = "7.5";
-      m.manager = manager;
-      m.id = id;
-      m.name = name;
-
-      m.host = getHostName(System.currentTimeMillis());
-
-      m.maxHeapSize = 247;
-
-      Random r = new Random(System.currentTimeMillis());
-
-      m.isCache = isCache;
-
-      m.loadAverage = (double) Math.abs(r.nextInt(100));
-      m.numThreads = Math.abs(r.nextInt(100));
-      m.garbageCollectionCount = (long) Math.abs(r.nextInt(100));
-      m.garbageCollectionSamples.add(m.garbageCollectionCount);
-
-      m.totalFileDescriptorOpen = (long) Math.abs(r.nextInt(100));
-      m.totalDiskUsage = Math.abs(r.nextInt(100));
-
-      m.throughputWrites = Math.abs(r.nextInt(10));
-      m.throughputWritesTrend.add(m.throughputWrites);
-
-      m.throughputReads = Math.abs(r.nextInt(10));
-      m.throughputReadsTrend.add(m.throughputReads);
-
-      if (port == null || "".equals(port.trim())) {
-        port = "1089";
-      }
-
-      if (m.gatewayReceiver == null) {
-        m.gatewayReceiver = new Cluster.GatewayReceiver();
-      }
-      m.gatewayReceiver.listeningPort = Integer.parseInt(port);
-      m.gatewayReceiver.linkThroughput = Math.abs(r.nextInt(10));
-      m.gatewayReceiver.avgBatchProcessingTime = (long) Math.abs(r.nextInt(10));
-      m.gatewayReceiver.id = String.valueOf(Math.abs(r.nextInt(10)));
-      m.gatewayReceiver.queueSize = Math.abs(r.nextInt(10));
-      m.gatewayReceiver.status = true;
-      m.gatewayReceiver.batchSize = Math.abs(r.nextInt(10));
-
-      int gatewaySenderCount = Math.abs(r.nextInt(10));
-
-      for (int i = 0; i < gatewaySenderCount; i++) {
-        m.gatewaySenderList.add(createGatewaySenderCount(r));
-      }
-
-      // sample data for async queues
-      if (!(m.name.equalsIgnoreCase("pnq-visitor2"))) {
-        int asyncEventQueueCount = Math.abs(r.nextInt(10));
-        for (int i = 0; i < asyncEventQueueCount; i++) {
-          m.asyncEventQueueList.add(createasyncEventQueueCount(r));
-        }
-      }
-      m.isLocator = isLocator;
-      m.isServer = isServer;
-
-      // set server groups and redundancy zones
-      Random rg = new Random();
-      int serverGroupNum = Math.abs(rg.nextInt(3) + 1);
-      int redundancyZoneNum = Math.abs(rg.nextInt(2) + 1);
-      for (int c = 0; c < serverGroupNum; c++) {
-        m.getServerGroups().add("SG" + c);
-      }
-      for (int c = 0; c < redundancyZoneNum; c++) {
-        m.getRedundancyZones().add("RZ" + c);
-      }
-
-      List<Cluster.Member> memberArrList = physicalToMember.get(m.host);
-      if (memberArrList != null) {
-        memberArrList.add(m);
-      } else {
-        List<Cluster.Member> memberList = new ArrayList<Cluster.Member>();
-        memberList.add(m);
-        physicalToMember.put(m.host, memberList);
-      }
-      memberCount++;
-      return m;
-    }
-
-    private GatewaySender createGatewaySenderCount(Random r) {
-
-      GatewaySender gatewaySender = new GatewaySender();
-
-      gatewaySender.batchSize = Math.abs(r.nextInt(10));
-      gatewaySender.id = String.valueOf(Math.abs(r.nextInt(10)));
-      gatewaySender.linkThroughput = Math.abs(r.nextInt(10));
-      gatewaySender.persistenceEnabled = true;
-      gatewaySender.primary = true;
-      gatewaySender.queueSize = Math.abs(r.nextInt(10));
-      gatewaySender.senderType = false;
-      gatewaySender.status = true;
-      gatewaySender.eventsExceedingAlertThreshold = Math.abs(r.nextInt(50));
-      gatewaySender.remoteDSId = Math.abs(r.nextInt(50));
-
-      return gatewaySender;
-    }
-
-    private AsyncEventQueue createasyncEventQueueCount(Random r) {
-
-      AsyncEventQueue asyncEventQueue = new AsyncEventQueue();
-
-      asyncEventQueue.batchSize = Math.abs(r.nextInt(10));
-      asyncEventQueue.id = String.valueOf(Math.abs(r.nextInt(10)));
-      asyncEventQueue.eventQueueSize = Math.abs(r.nextInt(10));
-      asyncEventQueue.batchTimeInterval = Math.abs(r.nextLong());
-      asyncEventQueue.primary = ((r.nextInt(10) % 2) == 0) ? true : false;
-      asyncEventQueue.asyncEventListener = String.valueOf(Math.abs(r.nextInt(10)));
-      asyncEventQueue.batchConflationEnabled = ((r.nextInt(10) % 2) == 0) ? true : false;
-      asyncEventQueue.parallel = ((r.nextInt(10) % 2) == 0) ? true : false;
-
-      return asyncEventQueue;
-    }
-
-    private String getHostName(long rndSeed) {
-      Random rnd = new Random(rndSeed);
-      String hName = null;
-
-      int index = Math.abs(rnd.nextInt(MAX_HOSTS));
-
-      if (hostNames.size() <= index) {
-        hName = "host" + hostNames.size();
-        hostNames.add(hName);
-      } else {
-        hName = hostNames.get(index);
-      }
-
-      List<Member> memberArrList = physicalToMember.get(hName);
-      if (memberArrList != null) {
-        if (memberArrList.size() > 4) {
-          hName = getHostName(rndSeed + rnd.nextLong());
-        }
-      }
-      return hName;
-    }
-
-    private void refresh(Member m) {
-      logger.info("{} : {}", resourceBundle.getString("LOG_MSG_REFRESHING_MEMBER_DATA"), m.name);
-
-      Random r = new Random(System.currentTimeMillis());
-
-      m.uptime = System.currentTimeMillis();
-      m.queueBacklog = "" + Math.abs(r.nextInt(500));
-      m.currentHeapSize = Math.abs(r.nextInt(Math.abs((int) m.maxHeapSize)));
-      m.OffHeapFreeSize = Math.abs(r.nextInt(Math.abs((int) m.maxHeapSize)));
-      m.OffHeapUsedSize = Math.abs(r.nextInt(Math.abs((int) m.maxHeapSize)));
-      m.totalDiskUsage = Math.abs(r.nextInt(100));
-
-      double cpuUsage = r.nextDouble() * 100;
-      m.cpuUsageSamples.add(cpuUsage);
-      m.cpuUsage = cpuUsage;
-      m.hostCpuUsage = r.nextDouble() * 200;
-
-      m.heapUsageSamples.add(m.currentHeapSize);
-      m.loadAverage = (double) Math.abs(r.nextInt(100));
-      m.numThreads = Math.abs(r.nextInt(100));
-      m.garbageCollectionCount = (long) Math.abs(r.nextInt(100));
-      m.garbageCollectionSamples.add(m.garbageCollectionCount);
-
-      m.totalFileDescriptorOpen = (long) Math.abs(r.nextInt(100));
-
-      m.throughputWrites = Math.abs(r.nextInt(10));
-      m.throughputWritesTrend.add(m.throughputWrites);
-
-      m.throughputReads = Math.abs(r.nextInt(10));
-      m.throughputReadsTrend.add(m.throughputReads);
-
-      m.getsRate = Math.abs(r.nextInt(5000));
-      m.getsPerSecond.add(m.getsRate);
-
-      m.putsRate = Math.abs(r.nextInt(5000));
-      m.putsPerSecond.add(m.putsRate);
-
-      if (r.nextBoolean()) {
-        // Generate alerts
-        if (r.nextBoolean()) {
-          if (r.nextInt(10) > 5) {
-            alertsList.add(createAlert(Alert.SEVERE, m.name, alertsList.size()));
-            if (alertsList.size() > ALERTS_MAX_SIZE) {
-              alertsList.remove(0);
-            }
-          }
-        }
-
-        if (r.nextBoolean()) {
-          if (r.nextInt(10) > 5) {
-            alertsList.add(createAlert(Alert.ERROR, m.name, alertsList.size()));
-            if (alertsList.size() > ALERTS_MAX_SIZE) {
-              alertsList.remove(0);
-            }
-          }
-        }
-
-        if (r.nextBoolean()) {
-          if (r.nextInt(10) > 5) {
-            alertsList.add(createAlert(Alert.WARNING, m.name, alertsList.size()));
-            if (alertsList.size() > ALERTS_MAX_SIZE) {
-              alertsList.remove(0);
-            }
-          }
-        }
-
-        if (r.nextBoolean()) {
-          if (r.nextInt(10) > 5) {
-            alertsList.add(createAlert(Alert.INFO, m.name, alertsList.size()));
-            if (alertsList.size() > ALERTS_MAX_SIZE) {
-              alertsList.remove(0);
-            }
-          }
-        }
-      }
-    }
-
-    private Alert createAlert(int sev, String memberName, int index) {
-
-      Alert alert = new Alert();
-      alert.setSeverity(sev);
-      alert.setId(Cluster.Alert.nextID());
-      alert.setMemberName(memberName);
-      alert.setTimestamp(new Date());
-
-      switch (sev) {
-        case Alert.SEVERE:
-          alert.setDescription(PulseConstants.ALERT_DESC_SEVERE);
-          break;
-        case Alert.ERROR:
-          alert.setDescription(PulseConstants.ALERT_DESC_ERROR);
-          break;
-        case Alert.WARNING:
-          alert.setDescription(PulseConstants.ALERT_DESC_WARNING);
-          break;
-        case Alert.INFO:
-          alert.setDescription(PulseConstants.ALERT_DESC_INFO);
-          break;
-      }
-      return alert;
-    }
-
-    private int queryCounter = 0;
-
-    @Override
-    public ObjectNode executeQuery(String queryText, String members, int limit) {
-
-      BufferedReader streamReader = null;
-      JsonNode jsonObject = null;
-      Random rand = new Random();
-      int min = 1, max = 5;
-      int randomNum = rand.nextInt(max - min + 1) + min;
-      InputStream is = null;
-      URL url = null;
-      String inputStr = null;
-
-      if (queryCounter > 24) {
-        queryCounter = 0;
-      }
-
-      try {
-        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-
-        switch (queryCounter++) {
-          case 1:
-            url = classLoader.getResource("testQueryResultClusterSmall.txt");
-            break;
-
-          case 2:
-            url = classLoader.getResource("testQueryResultSmall.txt");
-            break;
-
-          case 3:
-            url = classLoader.getResource("testQueryResult.txt");
-            break;
-
-          case 4:
-            url = classLoader.getResource("testQueryResultWithStructSmall.txt");
-            break;
-
-          case 5:
-            url = classLoader.getResource("testQueryResultClusterWithStruct.txt");
-            break;
-
-          case 6:
-            url = classLoader.getResource("testQueryResultHashMap.txt");
-            break;
-
-          case 7:
-            url = classLoader.getResource("testQueryResultHashMapSmall.txt");
-            break;
-
-          case 8:
-            url = classLoader.getResource("testQueryResult1000.txt");
-            break;
-
-          case 9:
-            url = classLoader.getResource("testQueryResultArrayList.txt");
-            break;
-
-          case 10:
-            url = classLoader.getResource("testQueryResultArrayAndArrayList.txt");
-            break;
-
-          case 11:
-            url = classLoader.getResource("testQueryResultArrayOfList.txt");
-            break;
-
-          case 12:
-            url = classLoader.getResource("test1.txt");
-            break;
-
-          case 13:
-            url = classLoader.getResource("test2.txt");
-            break;
-
-          case 14:
-            url = classLoader.getResource("test3.txt");
-            break;
-
-          case 15:
-            url = classLoader.getResource("test4.txt");
-            break;
-
-          case 16:
-            url = classLoader.getResource("test5.txt");
-            break;
-
-          case 17:
-            url = classLoader.getResource("test6.txt");
-            break;
-
-          case 18:
-            url = classLoader.getResource("test7.txt");
-            break;
-
-          case 19:
-            url = classLoader.getResource("test_pp.txt");
-            break;
-
-          case 20:
-            url = classLoader.getResource("testNullObjectsAtRootLevel1.txt");
-            break;
-
-          case 21:
-            url = classLoader.getResource("testNullObjectsAtRootLevel2.txt");
-            break;
-
-          case 22:
-            url = classLoader.getResource("NoDataFound1.txt");
-            break;
-
-          case 23:
-            url = classLoader.getResource("NoDataFound2.txt");
-            break;
-
-          case 24:
-            url = classLoader.getResource("NoDataFound3.txt");
-            break;
-
-          default:
-            url = classLoader.getResource("message.txt");
-        }
-
-        File testQueryResultClusterSmall = new File(url.getPath());
-        is = new FileInputStream(testQueryResultClusterSmall);
-        streamReader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
-        StringBuilder testQueryResultClusterSmallresponseStrBuilder = new StringBuilder();
-
-        while ((inputStr = streamReader.readLine()) != null) {
-          testQueryResultClusterSmallresponseStrBuilder.append(inputStr);
-        }
-
-        jsonObject = mapper.readTree(testQueryResultClusterSmallresponseStrBuilder.toString());
-
-        // close stream reader
-        streamReader.close();
-      } catch (IOException ex) {
-        logger.fatal(ex);
-      }
-
-      return (ObjectNode) jsonObject;
-    }
-  }
-
-
-  /**
-   * This class is used for switching between production(JMX) and Mock Data
-   *
-   *
-   */
-  public static class ClusterDataFactory {
-    public static final int JMX = 0;
-    public static final int MOCK = 1;
-
-    public static int UPDATER_TYPE = JMX;
-
-    private ClusterDataFactory() {}
-
-    public static IClusterUpdater getUpdater(Cluster cluster, String serverName, String port) {
-
-      String prop = System.getProperty("pulse.propMockDataUpdaterClass");
-      if (prop != null) {
-        Class klass;
-        try {
-          klass = Class.forName(prop);
-          @SuppressWarnings("unchecked")
-          Constructor constructor = klass.getConstructor(Cluster.class);
-          Object updaterObject = constructor.newInstance(cluster);
-          IClusterUpdater updater = (IClusterUpdater) updaterObject;
-          return updater;
-        } catch (ClassNotFoundException | SecurityException | NoSuchMethodException
-            | InstantiationException | IllegalAccessException | InvocationTargetException e) {
-          cluster.logger.fatal(e);
-        }
-        return null;
-      } else {
-        prop = System.getProperty("pulse.updater", "JMX");
-        if ("MOCK".equalsIgnoreCase(prop)) {
-          UPDATER_TYPE = MOCK;
-          return cluster.new MockDataUpdater();
-        } else {
-          UPDATER_TYPE = JMX;
-          return new JMXDataUpdater(serverName, port, cluster);
-        }
-      }
-    }
-
-  }

