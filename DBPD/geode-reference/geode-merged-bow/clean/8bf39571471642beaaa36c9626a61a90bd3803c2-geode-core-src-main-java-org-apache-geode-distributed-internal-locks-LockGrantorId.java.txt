Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static final int ROLLOVER_MARGIN = Integer.getInteger(
-      DistributionConfig.GEMFIRE_PREFIX + "DLockService.LockGrantorId.rolloverMargin", 10000).intValue();
-  
+  public static final int ROLLOVER_MARGIN = Integer
+      .getInteger(DistributionConfig.GEMFIRE_PREFIX + "DLockService.LockGrantorId.rolloverMargin",
+          10000)
+      .intValue();
+
-  
+
-   * Constructs a new instance to identify a specific lock grantor member and
-   * version.
-   *  
+   * Constructs a new instance to identify a specific lock grantor member and version.
+   * 
-  public LockGrantorId(DM dm,
-                       InternalDistributedMember lockGrantorMember,
-                       long lockGrantorVersion,
-                       int lockGrantorSerialNumber) {
+  public LockGrantorId(DM dm, InternalDistributedMember lockGrantorMember, long lockGrantorVersion,
+      int lockGrantorSerialNumber) {
-      throw new NullPointerException(LocalizedStrings.LockGrantorId_LOCKGRANTORMEMBER_IS_NULL.toLocalizedString());
+      throw new NullPointerException(
+          LocalizedStrings.LockGrantorId_LOCKGRANTORMEMBER_IS_NULL.toLocalizedString());
-  
+
-  
+
-   * Returns the long grantor version number. A given member may host grantor
-   * several times during its life and this version number will be greater for
-   * later grantor instances.
+   * Returns the long grantor version number. A given member may host grantor several times during
+   * its life and this version number will be greater for later grantor instances.
-  
+
-   * Returns the DLS serial number of the lock service that is hosting the 
-   * grantor.
+   * Returns the DLS serial number of the lock service that is hosting the grantor.
+   * 
-  
+
-  
+
-   * Returns true if <code>otherLockGrantorId</code> is same as this instance.
-   * Returns false if different or if <code>otherLockGrantorId</code> is null.
+   * Returns true if <code>otherLockGrantorId</code> is same as this instance. Returns false if
+   * different or if <code>otherLockGrantorId</code> is null.
-    return sameAs(otherLockGrantorId.lockGrantorMember, 
-                  otherLockGrantorId.lockGrantorVersion,
-                  otherLockGrantorId.lockGrantorSerialNumber);
+    return sameAs(otherLockGrantorId.lockGrantorMember, otherLockGrantorId.lockGrantorVersion,
+        otherLockGrantorId.lockGrantorSerialNumber);
-  
+
-   * Returns true if this instance represents a newer lock grantor version
-   * than <code>otherLockGrantorId</code>. Returns true if 
-   * <code>otherLockGrantorId</code> is null.
+   * Returns true if this instance represents a newer lock grantor version than
+   * <code>otherLockGrantorId</code>. Returns true if <code>otherLockGrantorId</code> is null.
-    boolean isNewer = 
-      this.lockGrantorVersion > otherLockGrantorId.getLockGrantorVersion();
+    boolean isNewer = this.lockGrantorVersion > otherLockGrantorId.getLockGrantorVersion();
-      int otherGrantorSerialNumber = 
-          otherLockGrantorId.getLockGrantorSerialNumber();
-      boolean serialRolled = 
-          this.lockGrantorSerialNumber > ROLLOVER_MARGIN && 
-          otherGrantorSerialNumber < 0;
+      int otherGrantorSerialNumber = otherLockGrantorId.getLockGrantorSerialNumber();
+      boolean serialRolled =
+          this.lockGrantorSerialNumber > ROLLOVER_MARGIN && otherGrantorSerialNumber < 0;
-    
+
-  
+
-   * Returns true if this instance represents the same lock grantor member
-   * and version
+   * Returns true if this instance represents the same lock grantor member and version
-                       long someLockGrantorVersion,
-                       int someLockGrantorSerialNumber) {
+      long someLockGrantorVersion, int someLockGrantorSerialNumber) {
-      throw new IllegalStateException(LocalizedStrings.LockGrantorId_SOMELOCKGRANTORID_MUST_NOT_BE_NULL.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.LockGrantorId_SOMELOCKGRANTORID_MUST_NOT_BE_NULL.toLocalizedString());
-    return someLockGrantorMember.equals(this.lockGrantorMember) &&
-           someLockGrantorVersion == this.lockGrantorVersion &&
-           someLockGrantorSerialNumber == this.lockGrantorSerialNumber;
+    return someLockGrantorMember.equals(this.lockGrantorMember)
+        && someLockGrantorVersion == this.lockGrantorVersion
+        && someLockGrantorSerialNumber == this.lockGrantorSerialNumber;
-  
+
-  
+
-   * Returns true if this instance represents a local lock grantor with
-   * the specified DLS serial number
+   * Returns true if this instance represents a local lock grantor with the specified DLS serial
+   * number
+   * 
-    return this.lockGrantorSerialNumber == dlsSerialNumber &&
-           this.dm.getId().equals(this.lockGrantorMember);
+    return this.lockGrantorSerialNumber == dlsSerialNumber
+        && this.dm.getId().equals(this.lockGrantorMember);
-  
+
-  
+
-   * @param  other  the reference object with which to compare.
-   * @return true if this object is the same as the obj argument;
-   *         false otherwise.
+   * @param other the reference object with which to compare.
+   * @return true if this object is the same as the obj argument; false otherwise.
-    if (other == this) return true;
-    if (other == null) return false;
-    if (!(other instanceof LockGrantorId)) return  false;
+    if (other == this)
+      return true;
+    if (other == null)
+      return false;
+    if (!(other instanceof LockGrantorId))
+      return false;
-    if (this.lockGrantorMember != that.lockGrantorMember &&
-        !(this.lockGrantorMember != null &&
-        this.lockGrantorMember.equals(that.lockGrantorMember))) return false;
-    if (this.lockGrantorVersion != that.lockGrantorVersion) return false;
-    if (this.lockGrantorSerialNumber != that.lockGrantorSerialNumber) return false;
+    if (this.lockGrantorMember != that.lockGrantorMember && !(this.lockGrantorMember != null
+        && this.lockGrantorMember.equals(that.lockGrantorMember)))
+      return false;
+    if (this.lockGrantorVersion != that.lockGrantorVersion)
+      return false;
+    if (this.lockGrantorSerialNumber != that.lockGrantorSerialNumber)
+      return false;
-   * Returns a hash code for the object. This method is supported for the
-   * benefit of hashtables such as those provided by java.util.Hashtable.
+   * Returns a hash code for the object. This method is supported for the benefit of hashtables such
+   * as those provided by java.util.Hashtable.
-    result = mult * result + 
-      (this.lockGrantorMember == null ? 0 : this.lockGrantorMember.hashCode());
+    result =
+        mult * result + (this.lockGrantorMember == null ? 0 : this.lockGrantorMember.hashCode());

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66