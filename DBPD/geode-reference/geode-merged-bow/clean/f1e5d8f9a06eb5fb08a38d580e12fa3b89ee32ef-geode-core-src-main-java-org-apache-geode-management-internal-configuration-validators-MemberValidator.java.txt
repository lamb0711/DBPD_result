GEODE-7579: introduce RegionAware (#4546)

* GEODE-7579: Make Index configuration RegionAware

* Index configuration is ReqionAware, but not groupable
* index's group depends on what region it's defined with
* display member status in the exception
+import java.util.Collections;
+import org.apache.geode.management.configuration.GroupableConfiguration;
+import org.apache.geode.management.configuration.RegionScoped;
+
+    // if the configuration is not groupable and already exists, throw exception
+    if (!(config instanceof GroupableConfiguration)) {
+      throw new EntityExistsException(
+          config.getClass().getSimpleName() + " '" + config.getId()
+              + "' already exists");
+    }
+
+    // if configuration is groupable, then check if it's already in the group
-    Set<DistributedMember> membersOfExistingGroups =
-        findServers(existingElementsAndTheirGroups.keySet().toArray(new String[0]));
+    // if other group and this new group has common members, then throw exception
+    String[] groups = existingElementsAndTheirGroups.keySet().toArray(new String[0]);
+    Set<DistributedMember> membersOfExistingGroups = findServers(groups);
+  public Set<String> findGroups(String regionName) {
+    Set<String> results = new HashSet<>();
+    Set<String> groups = persistenceService.getGroups();
+    for (String group : groups) {
+      CacheConfig existing = persistenceService.getCacheConfig(group, false);
+      if (existing != null && existing.findRegionConfiguration(regionName) != null) {
+        results.add(group);
+      }
+    }
+    return results;
+  }
+
+
+  public Set<DistributedMember> findServers(AbstractConfiguration configuration) {
+    if (configuration instanceof RegionScoped) {
+      Set<String> groups = findGroups(((RegionScoped) configuration).getRegionName());
+      if (groups.size() == 0) {
+        return Collections.emptySet();
+      }
+      return findServers(groups.toArray(new String[0]));
+    }
+
+    return findServers(configuration.getGroup());
+  }
+
+  /**
+   * if id is specified, find the member with that id, otherwise find members in the groups
+   */
+  /**
+   * find members within these groups
+   *
+   * @param includeLocators whether to include locators in this search or not
+   */

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 INS83 INS74 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS29 INS29 INS25 INS60 INS43 INS43 INS43 INS42 INS60 INS60 INS70 INS41 INS43 INS43 INS43 INS42 INS25 INS41 INS65 INS65 INS65 INS38 INS8 INS5 MOV74 INS59 INS42 INS42 INS42 INS74 INS59 INS74 INS59 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS62 INS8 INS32 INS66 INS66 INS42 INS66 INS36 INS53 INS43 INS85 UPD42 MOV32 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS42 INS60 INS25 INS42 INS43 INS60 INS25 INS41 INS42 INS32 INS62 INS14 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS74 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS43 INS43 INS27 INS43 INS42 INS42 INS32 INS27 INS27 INS21 INS43 INS43 INS42 INS32 INS32 INS34 INS41 INS42 INS32 INS42 INS42 INS32 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS9 INS42 INS33 INS32 INS33 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS3 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS42 INS42 INS42 INS5 INS34 INS42 INS42 INS11 INS43 INS85 INS43 INS42 INS42 INS42 DEL42 DEL32