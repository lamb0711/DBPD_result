GEODE-6649: Remove lock contention in ClientHealthMonitor heartbeats.

Profiling showed strong contention on the _clientHeartbeatsLock lock
object. Simply replacing with ConcurrentHashMap improved contention but
constant updates to the heatbeat timestamp in the map meant creating new
Long object for each timestamp and locking the map segment when
updating. Storing timestamp as AtomicLong allows us to update by doing
lock-free get on map and update the AtomicLong value. New solution is
lock-free and garbage-free after initial insert.

* Replace with HashMap with ConcurrentHashMap.
* Store timestamp as AtomicLong to avoid segment lock when updating.

+
-
-  // This is a workaround for computeIfAbsent which unnecessarily takes out a write lock in the case
-  // where the entry for the key exists already. This only affects pre Java 9 jdks
-  // https://bugs.openjdk.java.net/browse/JDK-8161372
+  /**
+   * This is a workaround for computeIfAbsent which unnecessarily takes out a write lock in the case
+   * where the entry for the key exists already. This only affects pre Java 9 jdks
+   * https://bugs.openjdk.java.net/browse/JDK-8161372
+   *
+   * @see Map#computeIfAbsent(Object, Function)
+   */

INS29 INS65 INS65 INS66 INS66 INS66 INS68 INS42 INS42 INS69 INS69 INS43 INS43 INS42 INS42