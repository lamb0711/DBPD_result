GEODE-4678: Remove ServerHandshakeProcessor and refactor handshake creation (#1456)



+import org.apache.geode.DataSerializer;
+import org.apache.geode.internal.HeapDataOutputStream;
+import org.apache.geode.internal.VersionedDataStream;
+  private static final Version currentServerVersion =
+      ServerSideHandshakeFactory.currentServerVersion;
+  private final byte replyCode;
+
+  @Override
+  protected byte getReplyCode() {
+    return replyCode;
+  }
+
-    {
-      int soTimeout = -1;
+    int soTimeout = -1;
+    try {
+      soTimeout = sock.getSoTimeout();
+      sock.setSoTimeout(timeout);
+      InputStream inputStream = sock.getInputStream();
+      int valRead = inputStream.read();
+      if (valRead == -1) {
+        throw new EOFException(
+            LocalizedStrings.HandShake_HANDSHAKE_EOF_REACHED_BEFORE_CLIENT_CODE_COULD_BE_READ
+                .toLocalizedString());
+      }
+      this.replyCode = (byte) valRead;
+      if (replyCode != REPLY_OK) {
+        throw new IOException(
+            LocalizedStrings.HandShake_HANDSHAKE_REPLY_CODE_IS_NOT_OK.toLocalizedString());
+      }
-        soTimeout = sock.getSoTimeout();
-        sock.setSoTimeout(timeout);
-        InputStream inputStream = sock.getInputStream();
-        int valRead = inputStream.read();
-        // this.code = (byte)is.read();
-        if (valRead == -1) {
-          throw new EOFException(
-              LocalizedStrings.HandShake_HANDSHAKE_EOF_REACHED_BEFORE_CLIENT_CODE_COULD_BE_READ
-                  .toLocalizedString());
+        DataInputStream dataInputStream = new DataInputStream(inputStream);
+        DataOutputStream dataOutputStream = new DataOutputStream(sock.getOutputStream());
+        this.clientReadTimeout = dataInputStream.readInt();
+        if (clientVersion.compareTo(Version.CURRENT) < 0) {
+          // versioned streams allow object serialization code to deal with older clients
+          dataInputStream = new VersionedDataInputStream(dataInputStream, clientVersion);
+          dataOutputStream = new VersionedDataOutputStream(dataOutputStream, clientVersion);
-        this.replyCode = (byte) valRead;
-        if (this.replyCode != REPLY_OK) {
-          throw new IOException(
-              LocalizedStrings.HandShake_HANDSHAKE_REPLY_CODE_IS_NOT_OK.toLocalizedString());
+        this.id = ClientProxyMembershipID.readCanonicalized(dataInputStream);
+        // Note: credentials should always be the last piece in handshake for
+        // Diffie-Hellman key exchange to work
+        if (clientVersion.compareTo(Version.GFE_603) >= 0) {
+          setOverrides(new byte[] {dataInputStream.readByte()});
+        } else {
+          setClientConflation(dataInputStream.readByte());
+        if (this.clientVersion.compareTo(Version.GFE_65) < 0 || communicationMode.isWAN()) {
+          this.credentials =
+              readCredentials(dataInputStream, dataOutputStream, sys, this.securityService);
+        } else {
+          this.credentials = this.readCredential(dataInputStream, dataOutputStream, sys);
+        }
+      } catch (ClassNotFoundException cnfe) {
+        throw new IOException(
+            LocalizedStrings.HandShake_CLIENTPROXYMEMBERSHIPID_CLASS_COULD_NOT_BE_FOUND_WHILE_DESERIALIZING_THE_OBJECT
+                .toLocalizedString());
+      }
+    } finally {
+      if (soTimeout != -1) {
-          DataInputStream dataInputStream = new DataInputStream(inputStream);
-          DataOutputStream dataOutputStream = new DataOutputStream(sock.getOutputStream());
-          this.clientReadTimeout = dataInputStream.readInt();
-          if (clientVersion.compareTo(Version.CURRENT) < 0) {
-            // versioned streams allow object serialization code to deal with older clients
-            dataInputStream = new VersionedDataInputStream(dataInputStream, clientVersion);
-            dataOutputStream = new VersionedDataOutputStream(dataOutputStream, clientVersion);
-          }
-          this.id = ClientProxyMembershipID.readCanonicalized(dataInputStream);
-          // Note: credentials should always be the last piece in handshake for
-          // Diffie-Hellman key exchange to work
-          if (clientVersion.compareTo(Version.GFE_603) >= 0) {
-            setOverrides(new byte[] {dataInputStream.readByte()});
-          } else {
-            setClientConflation(dataInputStream.readByte());
-          }
-          // Hitesh
-          if (this.clientVersion.compareTo(Version.GFE_65) < 0 || communicationMode.isWAN()) {
-            this.credentials =
-                readCredentials(dataInputStream, dataOutputStream, sys, this.securityService);
-          } else {
-            this.credentials = this.readCredential(dataInputStream, dataOutputStream, sys);
-          }
-        } catch (IOException ioe) {
-          this.replyCode = -2;
-          throw ioe;
-        } catch (ClassNotFoundException cnfe) {
-          this.replyCode = -3;
-          throw new IOException(
-              LocalizedStrings.HandShake_CLIENTPROXYMEMBERSHIPID_CLASS_COULD_NOT_BE_FOUND_WHILE_DESERIALIZING_THE_OBJECT
-                  .toLocalizedString());
-        }
-      } finally {
-        if (soTimeout != -1) {
-          try {
-            sock.setSoTimeout(soTimeout);
-          } catch (IOException ignore) {
-          }
+          sock.setSoTimeout(soTimeout);
+        } catch (IOException ignore) {
-      Version.writeOrdinal(dos, ServerHandshakeProcessor.currentServerVersion.ordinal(), true);
+      Version.writeOrdinal(dos, currentServerVersion.ordinal(), true);
-    ServerHandshakeProcessor.writeServerMember(member, dos);
+
+    Version v = Version.CURRENT;
+    if (dos instanceof VersionedDataStream) {
+      v = ((VersionedDataStream) dos).getVersion();
+    }
+    HeapDataOutputStream hdos = new HeapDataOutputStream(v);
+    DataSerializer.writeObject(member, hdos);
+    DataSerializer.writeByteArray(hdos.toByteArray(), dos);
+    hdos.close();
-        && ServerHandshakeProcessor.currentServerVersion.compareTo(Version.GFE_66) >= 0) {
+        && currentServerVersion.compareTo(Version.GFE_66) >= 0) {
-        && ServerHandshakeProcessor.currentServerVersion.compareTo(Version.GFE_80) >= 0) {
+        && currentServerVersion.compareTo(Version.GFE_80) >= 0) {

INS26 INS26 INS26 INS40 INS40 INS40 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS8 MOV8 INS42 INS42 INS40 INS42 INS42 INS41 MOV21 MOV21 MOV21 MOV21 INS60 INS25 INS60 INS21 INS21 INS42 INS43 INS59 INS62 INS8 INS43 INS59 INS32 INS32 INS42 INS42 INS40 INS42 INS43 INS21 INS42 INS42 INS14 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS36 INS42 INS11 INS43 INS42 INS42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL34 DEL38 DEL7 DEL21 DEL42 DEL53 DEL8 DEL12 DEL52 DEL42 DEL22 DEL34 DEL38 DEL7 DEL21 DEL8 DEL40 DEL40 DEL40