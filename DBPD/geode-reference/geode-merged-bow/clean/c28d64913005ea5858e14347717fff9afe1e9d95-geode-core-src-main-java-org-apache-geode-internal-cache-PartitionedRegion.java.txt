Merge branch 'release/1.4.0'

+import org.apache.geode.internal.cache.eviction.EvictionStatistics;
+import org.apache.geode.internal.cache.eviction.HeapEvictor;
-import org.apache.geode.internal.cache.lru.HeapEvictor;
-import org.apache.geode.internal.cache.lru.LRUStatistics;
-import org.apache.geode.internal.cache.lru.Sizeable;
+import org.apache.geode.internal.size.Sizeable;
-   * 
+   *
-  final static float rebalanceThreshold = 0.75f;
+  static final float rebalanceThreshold = 0.75f;
-  final private int retryTimeout;
+  private final int retryTimeout;
-   * 
+   *
-   * 
+   *
-   * Returns the LRUStatistics for this PR. This is needed to find the single instance of
-   * LRUStatistics created early for a PR when it is recovered from disk. This fixes bug 41938
+   * Returns the EvictionStatistics for this PR. This is needed to find the single instance of
+   * EvictionStatistics created early for a PR when it is recovered from disk. This fixes bug 41938
-  public LRUStatistics getPRLRUStatsDuringInitialization() {
-    LRUStatistics result = null;
+  public EvictionStatistics getPRLRUStatsDuringInitialization() {
+    EvictionStatistics result = null;
-   * 
+   *
-    public final static String DESTROYED = "Partitioned Region Destroyed";
+    public static final String DESTROYED = "Partitioned Region Destroyed";
-    final static String LOCALLY_DESTROYED = "Partitioned Region Is Locally Destroyed";
+    static final String LOCALLY_DESTROYED = "Partitioned Region Is Locally Destroyed";
-    final static String FAILED_REGISTRATION = "Partitioned Region's Registration Failed";
+    static final String FAILED_REGISTRATION = "Partitioned Region's Registration Failed";
-    public final static String NO_PATH_FOUND = "NoPathFound";
+    public static final String NO_PATH_FOUND = "NoPathFound";
-   * 
+   *
-    super.addAsyncEventQueueId(asyncEventQueueId);
+    addAsyncEventQueueId(asyncEventQueueId, false);
+  }
+
+  public void addAsyncEventQueueId(String asyncEventQueueId, boolean isInternal) {
+    super.addAsyncEventQueueId(asyncEventQueueId, isInternal);
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-            if (!DistributionManager.isFunctionExecutionThread.get()) {
+            if (!DistributionManager.isFunctionExecutionThread()) {
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
+  @Override
+  public boolean canStoreDataLocally() {
+    return getDataStore() != null;
+  }
+
-   * 
+   *
-    if (cacheServiceProfiles != null) {
-      for (CacheServiceProfile csp : cacheServiceProfiles.values()) {
-        profile.addCacheServiceProfile(csp);
-      }
+    for (CacheServiceProfile csp : getCacheServiceProfiles().values()) {
+      profile.addCacheServiceProfile(csp);
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
+    if (!restoreSetOperationTransactionBehavior) {
+      discoverJTA();
+    }
-   * 
+   *
-   * 
+   *
-   * 
+   *
+    if (!restoreSetOperationTransactionBehavior) {
+      discoverJTA();
+    }
-      final protected Set<Integer> bucketSet;
+      protected final Set<Integer> bucketSet;
-   * 
+   *
+    if (!restoreSetOperationTransactionBehavior) {
+      discoverJTA();
+    }
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-     * 
+     *
-     * 
+     *
-   * 
+   *
-    invokeBeforeRegionDestroyInServices();
+    this.cache.invokeBeforeDestroyed(this);
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  void dispatchListenerEvent(EnumListenerEvent op, InternalCacheEvent event) {
+  public void dispatchListenerEvent(EnumListenerEvent op, InternalCacheEvent event) {
-   * 
+   *
-  boolean cacheWriteBeforeDestroy(EntryEventImpl event, Object expectedOldValue)
+  public boolean cacheWriteBeforeDestroy(EntryEventImpl event, Object expectedOldValue)
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 INS31 INS31 INS83 INS83 UPD43 INS83 INS39 INS42 INS44 INS8 INS44 INS78 INS83 INS39 INS42 INS8 INS83 INS83 UPD42 INS83 INS83 INS83 INS83 INS43 INS42 INS21 INS39 INS42 INS42 INS41 MOV70 INS25 INS25 INS25 UPD66 UPD66 UPD43 INS42 INS32 INS27 INS38 INS8 INS38 INS8 INS83 INS38 INS8 UPD42 INS42 INS42 INS9 INS42 INS32 INS33 INS32 INS42 INS21 INS42 INS21 INS42 INS21 INS22 UPD42 INS52 INS42 UPD42 MOV42 INS32 INS32 INS32 INS52 INS42 INS42 INS42 INS42 UPD42 INS42 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL40 DEL42 DEL33 DEL27 DEL8 DEL25 DEL83