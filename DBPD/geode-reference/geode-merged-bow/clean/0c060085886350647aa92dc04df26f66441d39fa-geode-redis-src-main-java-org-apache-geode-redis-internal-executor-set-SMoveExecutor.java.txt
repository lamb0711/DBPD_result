GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4781)

* Revert "Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)"

This reverts commit f0982cdedf1b122f734919d0647434cca33ec254.

* Fix sporadic test failures for concurrent HSetNX
+import java.util.HashSet;
+import java.util.Set;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
-  private final int MOVED = 1;
+  private static final int MOVED = 1;
-  private final int NOT_MOVED = 0;
+  private static final int NOT_MOVED = 0;
-    if (commandElems.size() < 4) {
+    if (commandElems.size() != 4) {
-    ByteArrayWrapper mem = new ByteArrayWrapper(commandElems.get(3));
+    ByteArrayWrapper member = new ByteArrayWrapper(commandElems.get(3));
-    @SuppressWarnings("unchecked")
-    Region<ByteArrayWrapper, Boolean> sourceRegion =
-        (Region<ByteArrayWrapper, Boolean>) context.getRegionProvider().getRegion(source);
-    if (sourceRegion == null) {
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
+    Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
+
+    try (AutoCloseableLock regionLock = withRegionLock(context, source)) {
+      Set<ByteArrayWrapper> sourceSet = region.get(source);
+
+      if (sourceSet == null) {
+        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
+        return;
+      }
+
+      sourceSet = new HashSet<>(sourceSet); // copy to support transactions;
+      boolean removed = sourceSet.remove(member);
+
+      if (!removed) {
+        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
+      } else {
+        try (AutoCloseableLock destinationLock = withRegionLock(context, destination)) {
+          Set<ByteArrayWrapper> destinationSet = region.get(destination);
+
+          if (destinationSet == null) {
+            destinationSet = new HashSet<>();
+          } else {
+            destinationSet = new HashSet<>(destinationSet); // copy to support transactions
+          }
+
+          destinationSet.add(member);
+
+          region.put(destination, destinationSet);
+          context.getKeyRegistrar().register(destination, RedisDataType.REDIS_SET);
+
+          region.put(source, sourceSet);
+          context.getKeyRegistrar().register(source, RedisDataType.REDIS_SET);
+
+          command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), MOVED));
+        } catch (InterruptedException e) {
+          Thread.currentThread().interrupt();
+          System.out.println("Interrupt exception!!");
+          command.setResponse(
+              Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+          return;
+        } catch (TimeoutException e) {
+          System.out.println("Timeout exception!!");
+          command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+              "Timeout acquiring lock. Please try again."));
+          return;
+        } catch (Exception e) {
+          System.out.println("Unexpected exception: " + e);
+          command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+              "Unexpected exception."));
+        }
+      }
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      System.out.println("Interrupt exception!!");
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-    }
-
-    Object oldVal = sourceRegion.get(mem);
-    sourceRegion.remove(mem);
-
-    if (oldVal == null) {
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_MOVED));
+    } catch (TimeoutException e) {
+      System.out.println("Timeout exception!!");
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
+    } catch (Exception e) {
+      System.out.println("Unexpected exception: " + e);
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Unexpected exception."));
-
-    @SuppressWarnings("unchecked")
-    Region<ByteArrayWrapper, Boolean> destinationRegion =
-        (Region<ByteArrayWrapper, Boolean>) getOrCreateRegion(context, destination,
-            RedisDataType.REDIS_SET);
-    destinationRegion.put(mem, true);
-
-    command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), MOVED));
-

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS83 INS83 INS60 INS54 UPD27 UPD74 MOV74 INS59 INS58 INS8 INS12 INS12 INS12 UPD42 INS74 INS42 INS32 INS43 INS59 INS60 MOV25 INS21 INS60 INS25 INS44 INS8 INS44 INS8 INS44 INS8 UPD43 MOV43 MOV43 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS74 INS59 INS7 INS39 INS59 INS38 MOV8 INS8 INS43 INS42 INS21 INS21 INS21 INS41 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 MOV21 UPD42 INS42 MOV42 UPD42 MOV42 INS43 MOV43 INS42 INS32 UPD42 INS42 INS14 INS42 INS32 INS42 INS54 UPD42 MOV42 INS32 INS32 INS32 UPD42 MOV42 INS32 INS32 INS42 INS32 INS32 INS42 UPD42 MOV42 INS42 MOV42 INS74 INS42 INS42 INS42 INS42 INS58 INS8 INS12 INS12 INS12 INS32 INS42 INS40 INS42 INS45 INS42 INS42 INS32 INS40 INS42 INS45 INS42 INS42 INS32 UPD40 MOV40 INS42 INS27 INS42 INS42 INS32 INS43 INS43 INS59 MOV60 INS25 INS21 INS21 INS21 MOV21 INS21 MOV21 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS42 INS32 INS45 INS42 UPD42 MOV42 INS32 INS45 INS45 INS42 UPD42 MOV42 INS42 INS32 INS45 INS42 INS42 INS42 INS32 INS74 INS27 INS8 INS8 INS32 INS32 INS32 INS32 INS43 INS42 INS21 INS21 INS21 INS41 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 INS21 INS42 INS42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 MOV43 UPD42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 UPD42 INS42 UPD42 UPD42 INS32 INS42 INS42 INS40 INS42 INS32 INS32 INS32 UPD42 MOV42 INS32 INS32 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 UPD42 INS7 INS7 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS45 INS42 INS42 INS32 INS40 INS42 INS45 INS42 INS42 INS32 INS40 INS42 INS27 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS32 INS45 INS45 INS42 INS42 INS42 INS32 INS45 INS74 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS42 DEL41 DEL43 DEL9 DEL32 DEL42 DEL45 DEL79 DEL42 DEL43 DEL43 DEL74 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL45 DEL79 DEL43 DEL43 DEL74 DEL42 DEL43 DEL43 DEL74 DEL42 DEL32 DEL11 DEL59 DEL60