GEODE-5595: Fix DeltaPropagationDUnitTest flakiness (#4653)

Improve testability of CacheClientProxy
* Extract inner classes
* Introduce CacheClientProxyFactory with support for property injection
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-import java.util.regex.Pattern;
-import org.apache.geode.DataSerializer;
+import org.apache.geode.annotations.Immutable;
-import org.apache.geode.cache.InterestRegistrationEvent;
-import org.apache.geode.cache.RegionExistsException;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.internal.cache.ClientServerObserver;
-import org.apache.geode.internal.cache.ClientServerObserverHolder;
-import org.apache.geode.internal.cache.FilterProfile;
-import org.apache.geode.internal.cache.InterestRegistrationEventImpl;
-import org.apache.geode.internal.cache.ha.HAContainerWrapper;
-import org.apache.geode.internal.cache.ha.HARegionQueueAttributes;
-import org.apache.geode.internal.cache.ha.HARegionQueueStats;
-import org.apache.geode.internal.serialization.ByteArrayDataInput;
-import org.apache.geode.logging.internal.executors.LoggingThread;
+  @Immutable
+  @VisibleForTesting
+  protected static final CacheClientProxyStatsFactory DEFAULT_CACHECLIENTPROXYSTATSFACTORY =
+      (statisticsFactory, proxyId, remoteHostAddress) -> new CacheClientProxyStats(
+          statisticsFactory,
+          "id_" + proxyId.getDistributedMember().getId() + "_at_" + remoteHostAddress);
+  @Immutable
+  private static final MessageDispatcherFactory DEFAULT_MESSAGEDISPATCHERFACTORY =
+      MessageDispatcher::new;
+
-  /**
-   * Default value for slow starting time of dispatcher
-   */
-  private static final long DEFAULT_SLOW_STARTING_TIME = 5000;
-
-  /**
-   * Key in the system property from which the slow starting time value will be retrieved
-   */
-  private static final String KEY_SLOW_START_TIME_FOR_TESTING = "slowStartTimeForTesting";
-
+  private final MessageDispatcherFactory messageDispatcherFactory;
+
+    this(ccn.getCache(), ccn, socket, proxyID, isPrimary, clientConflation, clientVersion,
+        acceptorId, notifyBySubscription, securityService, subject, statisticsClock,
+        ccn.getCache().getInternalDistributedSystem().getStatisticsManager(),
+        DEFAULT_CACHECLIENTPROXYSTATSFACTORY,
+        DEFAULT_MESSAGEDISPATCHERFACTORY);
+  }
+  @VisibleForTesting
+  protected CacheClientProxy(InternalCache cache, CacheClientNotifier ccn, Socket socket,
+      ClientProxyMembershipID proxyID, boolean isPrimary, byte clientConflation,
+      Version clientVersion, long acceptorId, boolean notifyBySubscription,
+      SecurityService securityService, Subject subject, StatisticsClock statisticsClock,
+      StatisticsFactory statisticsFactory,
+      CacheClientProxyStatsFactory cacheClientProxyStatsFactory,
+      MessageDispatcherFactory messageDispatcherFactory)
+      throws CacheException {
-    this._cache = ccn.getCache();
+    this._cache = cache;
-    StatisticsFactory factory = this._cache.getInternalDistributedSystem().getStatisticsManager();
-        new CacheClientProxyStats(factory, "id_" + this.proxyID.getDistributedMember().getId()
-            + "_at_" + this._remoteHostAddress);
+        cacheClientProxyStatsFactory.create(statisticsFactory, proxyID, _remoteHostAddress);
+    this.messageDispatcherFactory = messageDispatcherFactory;
+  Version getClientVersion() {
+    return clientVersion;
+  }
+
-    return new MessageDispatcher(this, name, statisticsClock);
+    return messageDispatcherFactory.create(this, name, statisticsClock);
-  /**
-   * Class <code>ClientInterestList</code> provides a convenient interface for manipulating client
-   * interest information.
-   */
-  protected static class ClientInterestList {
-
-    final CacheClientProxy ccp;
-
-    final Object id;
-
-    /**
-     * An object used for synchronizing the interest lists
-     */
-    private final Object interestListLock = new Object();
-
-    /**
-     * Regions that this client is interested in
-     */
-    protected final Set<String> regions = new HashSet<String>();
-
-    /**
-     * Constructor.
-     */
-    protected ClientInterestList(CacheClientProxy ccp, Object interestID) {
-      this.ccp = ccp;
-      this.id = interestID;
-      // this.id = getNextId();
-    }
-
-    /**
-     * Registers interest in the input region name and key
-     */
-    protected void registerClientInterest(String regionName, Object keyOfInterest, int interestType,
-        boolean sendUpdatesAsInvalidates) {
-      if (logger.isDebugEnabled()) {
-        logger.debug("{}: registerClientInterest region={} key={}", ccp, regionName, keyOfInterest);
-      }
-      Set keysRegistered = null;
-      synchronized (this.interestListLock) {
-        LocalRegion r = (LocalRegion) this.ccp._cache.getRegion(regionName, true);
-        if (r == null) {
-          throw new RegionDestroyedException("Region could not be found for interest registration",
-              regionName);
-        }
-        if (!(r instanceof CacheDistributionAdvisee)) {
-          throw new IllegalArgumentException("region " + regionName
-              + " is not distributed and does not support interest registration");
-        }
-        FilterProfile p = r.getFilterProfile();
-        keysRegistered =
-            p.registerClientInterest(id, keyOfInterest, interestType, sendUpdatesAsInvalidates);
-        regions.add(regionName);
-      }
-      // Perform actions if any keys were registered
-      if ((keysRegistered != null) && containsInterestRegistrationListeners()
-          && !keysRegistered.isEmpty()) {
-        handleInterestEvent(regionName, keysRegistered, interestType, true);
-      }
-    }
-
-
-    protected FilterProfile getProfile(String regionName) {
-      try {
-        return this.ccp._cache.getFilterProfile(regionName);
-      } catch (CancelException e) {
-        return null;
-      }
-    }
-
-    /**
-     * Unregisters interest in the input region name and key
-     *
-     * @param regionName The fully-qualified name of the region in which to unregister interest
-     * @param keyOfInterest The key in which to unregister interest
-     */
-    protected void unregisterClientInterest(String regionName, Object keyOfInterest,
-        int interestType) {
-      if (logger.isDebugEnabled()) {
-        logger.debug("{}: unregisterClientInterest region={} key={}", ccp, regionName,
-            keyOfInterest);
-      }
-      FilterProfile p = getProfile(regionName);
-      Set keysUnregistered = null;
-      synchronized (this.interestListLock) {
-        if (p != null) {
-          keysUnregistered = p.unregisterClientInterest(id, keyOfInterest, interestType);
-          if (!p.hasInterestFor(id)) {
-            this.regions.remove(regionName);
-          }
-        } else {
-          this.regions.remove(regionName);
-        }
-      }
-      if (keysUnregistered != null && !keysUnregistered.isEmpty()) {
-        handleInterestEvent(regionName, keysUnregistered, interestType, false);
-      }
-    }
-
-    /**
-     * Registers interest in the input region name and list of keys
-     *
-     * @param regionName The fully-qualified name of the region in which to register interest
-     * @param keysOfInterest The list of keys in which to register interest
-     */
-    protected void registerClientInterestList(String regionName, List keysOfInterest,
-        boolean sendUpdatesAsInvalidates) {
-      FilterProfile p = getProfile(regionName);
-      if (p == null) {
-        throw new RegionDestroyedException("Region not found during client interest registration",
-            regionName);
-      }
-      Set keysRegistered = null;
-      synchronized (this.interestListLock) {
-        keysRegistered = p.registerClientInterestList(id, keysOfInterest, sendUpdatesAsInvalidates);
-        regions.add(regionName);
-      }
-      // Perform actions if any keys were registered
-      if (containsInterestRegistrationListeners() && !keysRegistered.isEmpty()) {
-        handleInterestEvent(regionName, keysRegistered, InterestType.KEY, true);
-      }
-    }
-
-    /**
-     * Unregisters interest in the input region name and list of keys
-     *
-     * @param regionName The fully-qualified name of the region in which to unregister interest
-     * @param keysOfInterest The list of keys in which to unregister interest
-     */
-    protected void unregisterClientInterestList(String regionName, List keysOfInterest) {
-      FilterProfile p = getProfile(regionName);
-      Set keysUnregistered = null;
-      synchronized (this.interestListLock) {
-        if (p != null) {
-          keysUnregistered = p.unregisterClientInterestList(id, keysOfInterest);
-          if (!p.hasInterestFor(id)) {
-            regions.remove(regionName);
-          }
-        } else {
-          regions.remove(regionName);
-        }
-      }
-      // Perform actions if any keys were unregistered
-      if (!keysUnregistered.isEmpty()) {
-        handleInterestEvent(regionName, keysUnregistered, InterestType.KEY, false);
-      }
-    }
-
-    /*
-     * Returns whether this interest list has any keys, patterns or filters of interest. It answers
-     * the question: Are any clients being notified because of this interest list? @return whether
-     * this interest list has any keys, patterns or filters of interest
-     */
-    protected boolean hasInterest() {
-      return regions.size() > 0;
-    }
-
-    protected void clearClientInterestList() {
-      boolean isClosed = ccp.getCache().isClosed();
-
-      synchronized (this.interestListLock) {
-        for (String regionName : regions) {
-          FilterProfile p = getProfile(regionName);
-          if (p == null) {
-            continue;
-          }
-          if (!isClosed) {
-            if (p.hasAllKeysInterestFor(id)) {
-              Set allKeys = new HashSet();
-              allKeys.add(".*");
-              allKeys = Collections.unmodifiableSet(allKeys);
-              handleInterestEvent(regionName, allKeys, InterestType.REGULAR_EXPRESSION, false);
-            }
-            Set keysOfInterest = p.getKeysOfInterestFor(id);
-            if (keysOfInterest != null && keysOfInterest.size() > 0) {
-              handleInterestEvent(regionName, keysOfInterest, InterestType.KEY, false);
-            }
-            Map<String, Pattern> patternsOfInterest = p.getPatternsOfInterestFor(id);
-            if (patternsOfInterest != null && patternsOfInterest.size() > 0) {
-              handleInterestEvent(regionName, patternsOfInterest.keySet(),
-                  InterestType.REGULAR_EXPRESSION, false);
-            }
-          }
-          p.clearInterestFor(id);
-        }
-        regions.clear();
-      }
-    }
-
-
-    private void handleInterestEvent(String regionName, Set keysOfInterest, int interestType,
-        boolean isRegister) {
-      // Notify the region about this register interest event if:
-      // - the application has requested it
-      // - this is a primary CacheClientProxy (otherwise multiple notifications
-      // may occur)
-      // - it is a key interest type (regex is currently not supported)
-      InterestRegistrationEvent event = null;
-      if (NOTIFY_REGION_ON_INTEREST && this.ccp.isPrimary() && interestType == InterestType.KEY) {
-        event = new InterestRegistrationEventImpl(this.ccp, regionName, keysOfInterest,
-            interestType, isRegister);
-        try {
-          notifyRegionOfInterest(event);
-        } catch (Exception e) {
-          logger.warn("Region notification of interest failed", e);
-        }
-      }
-      // Invoke interest registration listeners
-      if (containsInterestRegistrationListeners()) {
-        if (event == null) {
-          event = new InterestRegistrationEventImpl(this.ccp, regionName, keysOfInterest,
-              interestType, isRegister);
-        }
-        notifyInterestRegistrationListeners(event);
-      }
-    }
-
-    private void notifyRegionOfInterest(InterestRegistrationEvent event) {
-      this.ccp.getCacheClientNotifier().handleInterestEvent(event);
-    }
-
-    private void notifyInterestRegistrationListeners(InterestRegistrationEvent event) {
-      this.ccp.getCacheClientNotifier().notifyInterestRegistrationListeners(event);
-    }
-
-    private boolean containsInterestRegistrationListeners() {
-      return this.ccp.getCacheClientNotifier().containsInterestRegistrationListeners();
-    }
-  }
-
-
-  /**
-   * Class <code>MessageDispatcher</code> is a <code>Thread</code> that processes messages bound for
-   * the client by taking messsages from the message queue and sending them to the client over the
-   * socket.
-   */
-  static class MessageDispatcher extends LoggingThread {
-
-    /**
-     * The queue of messages to be sent to the client
-     */
-    protected final HARegionQueue _messageQueue;
-
-    // /**
-    // * An int used to keep track of the number of messages dropped for logging
-    // * purposes. If greater than zero then a warning has been logged about
-    // * messages being dropped.
-    // */
-    // private int _numberOfMessagesDropped = 0;
-
-    /**
-     * The proxy for which this dispatcher is processing messages
-     */
-    private final CacheClientProxy _proxy;
-
-    // /**
-    // * The conflator faciliates message conflation
-    // */
-    // protected BridgeEventConflator _eventConflator;
-
-    /**
-     * Whether the dispatcher is stopped
-     */
-    private volatile boolean _isStopped = true;
-
-    /**
-     * guarded.By _pausedLock
-     */
-    // boolean _isPausedDispatcher = false;
-
-    /**
-     * A lock object used to control pausing this dispatcher
-     */
-    protected final Object _pausedLock = new Object();
-
-    /**
-     * An object used to protect when dispatching is being stopped.
-     */
-    private final Object _stopDispatchingLock = new Object();
-
-    private final ReadWriteLock socketLock = new ReentrantReadWriteLock();
-
-    private final Lock socketWriteLock = socketLock.writeLock();
-    // /**
-    // * A boolean verifying whether a warning has already been issued if the
-    // * message queue has reached its capacity.
-    // */
-    // private boolean _messageQueueCapacityReachedWarning = false;
-
-    /**
-     * Constructor.
-     *
-     * @param proxy The <code>CacheClientProxy</code> for which this dispatcher is processing
-     *        messages
-     * @param name thread name for this dispatcher
-     */
-    protected MessageDispatcher(CacheClientProxy proxy, String name,
-        StatisticsClock statisticsClock) throws CacheException {
-      super(name);
-
-      this._proxy = proxy;
-
-      // Create the event conflator
-      // this._eventConflator = new BridgeEventConflator
-
-      // Create the message queue
-      try {
-        HARegionQueueAttributes harq = new HARegionQueueAttributes();
-        harq.setBlockingQueueCapacity(proxy._maximumMessageCount);
-        harq.setExpiryTime(proxy._messageTimeToLive);
-        ((HAContainerWrapper) proxy._cacheClientNotifier.getHaContainer())
-            .putProxy(HARegionQueue.createRegionName(getProxy().getHARegionName()), getProxy());
-        boolean createDurableQueue = proxy.proxyID.isDurable();
-        boolean canHandleDelta = (proxy.clientVersion.compareTo(Version.GFE_61) >= 0)
-            && InternalDistributedSystem.getAnyInstance().getConfig().getDeltaPropagation()
-            && !(this._proxy.clientConflation == Handshake.CONFLATION_ON);
-        if ((createDurableQueue || canHandleDelta) && logger.isDebugEnabled()) {
-          logger.debug("Creating a {} subscription queue for {}",
-              createDurableQueue ? "durable" : "non-durable",
-              proxy.getProxyID());
-        }
-        this._messageQueue = HARegionQueue.getHARegionQueueInstance(getProxy().getHARegionName(),
-            getCache(), harq, HARegionQueue.BLOCKING_HA_QUEUE, createDurableQueue,
-            proxy._cacheClientNotifier.getHaContainer(), proxy.getProxyID(),
-            this._proxy.clientConflation, this._proxy.isPrimary(), canHandleDelta, statisticsClock);
-        // Check if interests were registered during HARegion GII.
-        if (this._proxy.hasRegisteredInterested()) {
-          this._messageQueue.setHasRegisteredInterest(true);
-        }
-      } catch (CancelException e) {
-        throw e;
-      } catch (RegionExistsException ree) {
-        throw ree;
-      } catch (Exception e) {
-        getCache().getCancelCriterion().checkCancelInProgress(e);
-        throw new CacheException(
-            "Exception occurred while trying to create a message queue.",
-            e) {
-          private static final long serialVersionUID = 0L;
-        };
-      }
-    }
-
-    private CacheClientProxy getProxy() {
-      return this._proxy;
-    }
-
-    private InternalCache getCache() {
-      return getProxy().getCache();
-    }
-
-    private Socket getSocket() {
-      return getProxy().getSocket();
-    }
-
-    private ByteBuffer getCommBuffer() {
-      return getProxy().getCommBuffer();
-    }
-
-    private CacheClientProxyStats getStatistics() {
-      return getProxy().getStatistics();
-    }
-
-    private void basicStopDispatching() {
-      if (logger.isDebugEnabled()) {
-        logger.debug("{}: notified dispatcher to stop", this);
-      }
-      this._isStopped = true;
-      // this.interrupt(); // don't interrupt here. Let close(boolean) do this.
-    }
-
-    @Override
-    public String toString() {
-      return getProxy().toString();
-    }
-
-    /**
-     * Notifies the dispatcher to stop dispatching.
-     *
-     * @param checkQueue Whether to check the message queue for any unprocessed messages and process
-     *        them for MAXIMUM_SHUTDOWN_PEEKS.
-     *
-     * @see CacheClientProxy#MAXIMUM_SHUTDOWN_PEEKS
-     */
-    protected synchronized void stopDispatching(boolean checkQueue) {
-      if (isStopped()) {
-        return;
-      }
-
-      if (logger.isDebugEnabled()) {
-        logger.debug("{}: Stopping dispatching", this);
-      }
-      if (!checkQueue) {
-        basicStopDispatching();
-        return;
-      }
-
-      // Stay alive until the queue is empty or a number of peeks is reached.
-      List events = null;
-      try {
-        for (int numberOfPeeks = 0; numberOfPeeks < MAXIMUM_SHUTDOWN_PEEKS; ++numberOfPeeks) {
-          boolean interrupted = Thread.interrupted();
-          try {
-            events = this._messageQueue.peek(1, -1);
-            if (events == null || events.size() == 0) {
-              break;
-            }
-            if (logger.isDebugEnabled()) {
-              logger.debug("Waiting for client to drain queue: {}", _proxy.proxyID);
-            }
-            Thread.sleep(500);
-          } catch (InterruptedException e) {
-            interrupted = true;
-          } catch (CancelException e) {
-            break;
-          } catch (CacheException e) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("{}: Exception occurred while trying to stop dispatching", this, e);
-            }
-          } finally {
-            if (interrupted)
-              Thread.currentThread().interrupt();
-          }
-        } // for
-      } finally {
-        basicStopDispatching();
-      }
-    }
-
-    /**
-     * Returns whether the dispatcher is stopped
-     *
-     * @return whether the dispatcher is stopped
-     */
-    protected boolean isStopped() {
-      return this._isStopped;
-    }
-
-    /**
-     * Returns the size of the queue for heuristic purposes. This size may be changing concurrently
-     * if puts / gets are occurring at the same time.
-     *
-     * @return the size of the queue
-     */
-    protected int getQueueSize() {
-      return this._messageQueue == null ? 0 : this._messageQueue.size();
-    }
-
-    /**
-     * Returns the size of the queue calculated through stats This includes events that have
-     * dispatched but have yet been removed
-     *
-     * @return the size of the queue
-     */
-    protected int getQueueSizeStat() {
-      if (this._messageQueue != null) {
-        HARegionQueueStats stats = this._messageQueue.getStatistics();
-        return ((int) (stats.getEventsEnqued() - stats.getEventsRemoved()
-            - stats.getEventsConflated() - stats.getMarkerEventsConflated()
-            - stats.getEventsExpired() - stats.getEventsRemovedByQrm() - stats.getEventsTaken()
-            - stats.getNumVoidRemovals()));
-      }
-      return 0;
-    }
-
-    protected void drainClientCqEvents(ClientProxyMembershipID clientId,
-        InternalCqQuery cqToClose) {
-      this._messageQueue.closeClientCq(clientId, cqToClose);
-    }
-
-    /**
-     * Runs the dispatcher by taking a message from the queue and sending it to the client attached
-     * to this proxy.
-     */
-    @Override
-    public void run() {
-      boolean exceptionOccurred = false;
-      this._isStopped = false;
-
-      if (logger.isDebugEnabled()) {
-        logger.debug("{}: Beginning to process events", this);
-      }
-      // for testing purposes
-      if (isSlowStartForTesting) {
-        long slowStartTimeForTesting =
-            Long.getLong(KEY_SLOW_START_TIME_FOR_TESTING, DEFAULT_SLOW_STARTING_TIME).longValue();
-        long elapsedTime = 0;
-        long startTime = System.currentTimeMillis();
-        while ((slowStartTimeForTesting > elapsedTime) && isSlowStartForTesting) {
-          try {
-            Thread.sleep(500);
-          } catch (InterruptedException ignore) {
-            if (logger.isDebugEnabled()) {
-              logger.debug("Slow start for testing interrupted");
-            }
-            break;
-          }
-          elapsedTime = System.currentTimeMillis() - startTime;
-        }
-        if (slowStartTimeForTesting < elapsedTime) {
-          isSlowStartForTesting = false;
-        }
-      }
-
-      ClientMessage clientMessage = null;
-      while (!isStopped()) {
-        // SystemFailure.checkFailure(); DM's stopper does this
-        if (this._proxy._cache.getCancelCriterion().isCancelInProgress()) {
-          break;
-        }
-        try {
-          // If paused, wait to be told to resume (or interrupted if stopped)
-          if (getProxy().isPaused()) {
-            // ARB: Before waiting for resumption, process acks from client.
-            // This will reduce the number of duplicates that a client receives after
-            // reconnecting.
-            synchronized (_pausedLock) {
-              try {
-                logger.info("available ids = " + this._messageQueue.size() + " , isEmptyAckList ="
-                    + this._messageQueue.isEmptyAckList() + ", peekInitialized = "
-                    + this._messageQueue.isPeekInitialized());
-                while (!this._messageQueue.isEmptyAckList()
-                    && this._messageQueue.isPeekInitialized()) {
-                  this._messageQueue.remove();
-                }
-              } catch (InterruptedException ex) {
-                logger.warn("{}: sleep interrupted.", this);
-              }
-            }
-            waitForResumption();
-          }
-          try {
-            clientMessage = (ClientMessage) this._messageQueue.peek();
-          } catch (RegionDestroyedException skipped) {
-            break;
-          }
-          getStatistics().setQueueSize(this._messageQueue.size());
-          if (isStopped()) {
-            break;
-          }
-          if (clientMessage != null) {
-            // Process the message
-            long start = getStatistics().startTime();
-            //// BUGFIX for BUG#38206 and BUG#37791
-            boolean isDispatched = dispatchMessage(clientMessage);
-            getStatistics().endMessage(start);
-            if (isDispatched) {
-              this._messageQueue.remove();
-              if (clientMessage instanceof ClientMarkerMessageImpl) {
-                getProxy().markerEnqueued = false;
-              }
-            }
-          } else {
-            this._messageQueue.remove();
-          }
-          clientMessage = null;
-        } catch (MessageTooLargeException e) {
-          logger.warn("Message too large to send to client: {}, {}", clientMessage, e.getMessage());
-        } catch (IOException e) {
-          // Added the synchronization below to ensure that exception handling
-          // does not occur while stopping the dispatcher and vice versa.
-          synchronized (this._stopDispatchingLock) {
-            // An IOException occurred while sending a message to the
-            // client. If the processor is not already stopped, assume
-            // the client is dead and stop processing.
-            if (!isStopped() && !getProxy().isPaused()) {
-              if ("Broken pipe".equals(e.getMessage())) {
-                logger.warn("{}: Proxy closing due to unexpected broken pipe on socket connection.",
-                    this);
-              } else if ("Connection reset".equals(e.getMessage())) {
-                logger.warn("{}: Proxy closing due to unexpected reset on socket connection.",
-                    this);
-              } else if ("Connection reset by peer".equals(e.getMessage())) {
-                logger.warn(
-                    "{}: Proxy closing due to unexpected reset by peer on socket connection.",
-                    this);
-              } else if ("Socket is closed".equals(e.getMessage())
-                  || "Socket Closed".equals(e.getMessage())) {
-                logger.info("{}: Proxy closing due to socket being closed locally.",
-                    this);
-              } else {
-                logger.warn(String.format(
-                    "%s: An unexpected IOException occurred so the proxy will be closed.",
-                    this),
-                    e);
-              }
-              // Let the CacheClientNotifier discover the proxy is not alive.
-              // See isAlive().
-              // getProxy().close(false);
-
-              pauseOrUnregisterProxy(e);
-            } // _isStopped
-          } // synchronized
-          exceptionOccurred = true;
-        } // IOException
-        catch (InterruptedException e) {
-          // If the thread is paused, ignore the InterruptedException and
-          // continue. The proxy is null if stopDispatching has been called.
-          if (getProxy().isPaused()) {
-            if (logger.isDebugEnabled()) {
-              logger.debug(
-                  "{}: interrupted because it is being paused. It will continue and wait for resumption.",
-                  this);
-            }
-            Thread.interrupted();
-            continue;
-          }
-
-          // no need to reset the bit; we're exiting
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: interrupted", this);
-          }
-          break;
-        } catch (CancelException e) {
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: shutting down due to cancellation", this);
-          }
-          exceptionOccurred = true; // message queue is defunct, don't try to read it.
-          break;
-        } catch (RegionDestroyedException e) {
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: shutting down due to loss of message queue", this);
-          }
-          exceptionOccurred = true; // message queue is defunct, don't try to read it.
-          break;
-        } catch (Exception e) {
-          // An exception occurred while processing a message. Since it
-          // is not an IOException, the client may still be alive, so
-          // continue processing.
-          if (!isStopped()) {
-            logger.fatal(String.format("%s : An unexpected Exception occurred", this),
-                e);
-          }
-        }
-      }
-
-      // Processing gets here if isStopped=true. What is this code below doing?
-      List list = null;
-      if (!exceptionOccurred) {
-        try {
-          // Clear the interrupt status if any,
-          Thread.interrupted();
-          int size = this._messageQueue.size();
-          list = this._messageQueue.peek(size);
-          if (logger.isDebugEnabled()) {
-            logger.debug(
-                "{}: After flagging the dispatcher to stop , the residual List of messages to be dispatched={} size={}",
-                this, list, list.size());
-          }
-          if (list.size() > 0) {
-            long start = getStatistics().startTime();
-            Iterator itr = list.iterator();
-            while (itr.hasNext()) {
-              dispatchMessage((ClientMessage) itr.next());
-              getStatistics().endMessage(start);
-              // @todo asif: shouldn't we call itr.remove() since the current msg
-              // has been sent? That way list will be more accurate
-              // if we have an exception.
-            }
-            this._messageQueue.remove();
-          }
-        } catch (CancelException e) {
-          if (logger.isDebugEnabled()) {
-            logger.debug("CacheClientNotifier stopped due to cancellation");
-          }
-        } catch (Exception ignore) {
-          // if (logger.isInfoEnabled()) {
-          String extraMsg = null;
-
-          if ("Broken pipe".equals(ignore.getMessage())) {
-            extraMsg = "Problem caused by broken pipe on socket.";
-          } else if (ignore instanceof RegionDestroyedException) {
-            extraMsg =
-                "Problem caused by message queue being closed.";
-          }
-          final Object[] msgArgs = new Object[] {((!isStopped()) ? this.toString() + ": " : ""),
-              ((list == null) ? 0 : list.size())};
-          if (extraMsg != null) {
-            // Dont print exception details, but add on extraMsg
-            logger.info(
-                String.format(
-                    "%s Possibility of not being able to send some or all of the messages to clients. Total messages currently present in the list %s.",
-                    msgArgs));
-            logger.info(extraMsg);
-          } else {
-            // Print full stacktrace
-            logger.info(String.format(
-                "%s Possibility of not being able to send some or all of the messages to clients. Total messages currently present in the list %s.",
-                msgArgs),
-                ignore);
-          }
-        }
-
-        if (list != null && logger.isTraceEnabled()) {
-          logger.trace("Messages remaining in the list are: {}", list);
-        }
-
-        // }
-      }
-      if (logger.isTraceEnabled()) {
-        logger.trace("{}: Dispatcher thread is ending", this);
-      }
-
-    }
-
-    private void pauseOrUnregisterProxy(Throwable t) {
-      if (getProxy().isDurable()) {
-        try {
-          getProxy().pauseDispatching();
-        } catch (Exception ex) {
-          // see bug 40611; we catch Exception here because
-          // we once say an InterruptedException here.
-          // log a warning saying we couldn't pause?
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: {}", this, ex);
-          }
-        }
-      } else {
-        this._isStopped = true;
-      }
-
-      // Stop the ServerConnections. This will force the client to
-      // server communication to close.
-      ClientHealthMonitor chm = ClientHealthMonitor.getInstance();
-
-      // Note now that _proxy is final the following comment is no
-      // longer true. the _isStopped check should be sufficient.
-      // Added the test for this._proxy != null to prevent bug 35801.
-      // The proxy could have been stopped after this IOException has
-      // been caught and here, so the _proxy will be null.
-      if (chm != null) {
-        ClientProxyMembershipID proxyID = getProxy().proxyID;
-        chm.removeAllConnectionsAndUnregisterClient(proxyID, t);
-        if (!getProxy().isDurable()) {
-          getProxy().getCacheClientNotifier().unregisterClient(proxyID, false);
-        }
-      }
-    }
-
-    /**
-     * Sends a message to the client attached to this proxy
-     *
-     * @param clientMessage The <code>ClientMessage</code> to send to the client
-     *
-     */
-    protected boolean dispatchMessage(ClientMessage clientMessage) throws IOException {
-      boolean isDispatched = false;
-      if (logger.isTraceEnabled(LogMarker.BRIDGE_SERVER_VERBOSE)) {
-        logger.trace(LogMarker.BRIDGE_SERVER_VERBOSE, "Dispatching {}", clientMessage);
-      }
-      Message message;
-
-
-      if (clientMessage instanceof ClientUpdateMessage) {
-        byte[] latestValue = (byte[]) ((ClientUpdateMessage) clientMessage).getValue();
-        if (logger.isTraceEnabled()) {
-          StringBuilder msg = new StringBuilder(100);
-          msg.append(this).append(": Using latest value: ").append(Arrays.toString(latestValue));
-          if (((ClientUpdateMessage) clientMessage).valueIsObject()) {
-            if (latestValue != null) {
-              msg.append(" (").append(deserialize(latestValue)).append(")");
-            }
-            msg.append(" for ").append(clientMessage);
-          }
-          logger.trace(msg.toString());
-        }
-
-        message = ((ClientUpdateMessageImpl) clientMessage).getMessage(getProxy(), latestValue);
-
-        if (AFTER_MESSAGE_CREATION_FLAG) {
-          ClientServerObserver bo = ClientServerObserverHolder.getInstance();
-          bo.afterMessageCreation(message);
-        }
-      } else {
-        message = clientMessage.getMessage(getProxy(), true /* notify */);
-      }
-
-      if (!this._proxy.isPaused()) {
-        sendMessage(message);
-
-        if (logger.isTraceEnabled()) {
-          logger.trace("{}: Dispatched {}", this, clientMessage);
-        }
-        isDispatched = true;
-      } else {
-        if (logger.isDebugEnabled()) {
-          logger.debug("Message Dispatcher of a Paused CCProxy is trying to dispatch message");
-        }
-      }
-      if (isDispatched) {
-        this._messageQueue.getStatistics().incEventsDispatched();
-      }
-      return isDispatched;
-    }
-
-    private void sendMessage(Message message) throws IOException {
-      if (message == null) {
-        return;
-      }
-      this.socketWriteLock.lock();
-      try {
-        message.setComms(getSocket(), getCommBuffer(), getStatistics());
-        message.send();
-        getProxy().resetPingCounter();
-      } finally {
-        this.socketWriteLock.unlock();
-      }
-      if (logger.isTraceEnabled()) {
-        logger.trace("{}: Sent {}", this, message);
-      }
-    }
-
-    /**
-     * Add the input client message to the message queue
-     *
-     * @param clientMessage The <code>Conflatable</code> to add to the queue
-     */
-    protected void enqueueMessage(Conflatable clientMessage) {
-      try {
-        this._messageQueue.put(clientMessage);
-        if (this._proxy.isPaused() && this._proxy.isDurable()) {
-          this._proxy._cacheClientNotifier.statistics.incEventEnqueuedWhileClientAwayCount();
-          if (logger.isDebugEnabled()) {
-            logger.debug("{}: Queued message while Durable Client is away {}", this, clientMessage);
-          }
-        }
-      } catch (CancelException e) {
-        throw e;
-      } catch (Exception e) {
-        if (!isStopped()) {
-          this._proxy._statistics.incMessagesFailedQueued();
-          logger.fatal(
-              String.format("%s: Exception occurred while attempting to add message to queue",
-                  this),
-              e);
-        }
-      }
-    }
-
-
-    protected void enqueueMarker(ClientMessage message) {
-      try {
-        if (logger.isDebugEnabled()) {
-          logger.debug("{}: Queueing marker message. <{}>. The queue contains {} entries.", this,
-              message, getQueueSize());
-        }
-        this._messageQueue.put(message);
-        if (logger.isDebugEnabled()) {
-          logger.debug("{}: Queued marker message. The queue contains {} entries.", this,
-              getQueueSize());
-        }
-      } catch (CancelException e) {
-        throw e;
-      } catch (Exception e) {
-        if (!isStopped()) {
-          logger.fatal(
-              String.format("%s : Exception occurred while attempting to add message to queue",
-                  this),
-              e);
-        }
-      }
-    }
-
-    private void sendMessageDirectly(ClientMessage clientMessage) {
-      Message message;
-      try {
-        if (logger.isDebugEnabled()) {
-          logger.debug("{}: Dispatching directly: {}", this, clientMessage);
-        }
-        message = clientMessage.getMessage(getProxy(), true);
-        sendMessage(message);
-        if (logger.isDebugEnabled()) {
-          logger.debug("{}: Dispatched directly: {}", this, clientMessage);
-        }
-        // The exception handling code was modeled after the MessageDispatcher
-        // run method
-      } catch (MessageTooLargeException e) {
-        logger.warn("Message too large to send to client: {}, {}", clientMessage, e.getMessage());
-
-      } catch (IOException e) {
-        synchronized (this._stopDispatchingLock) {
-          // Pause or unregister proxy
-          if (!isStopped() && !getProxy().isPaused()) {
-            logger.fatal(String.format("%s : An unexpected Exception occurred", this),
-                e);
-            pauseOrUnregisterProxy(e);
-          }
-        }
-      } catch (Exception e) {
-        if (!isStopped()) {
-          logger.fatal(String.format("%s : An unexpected Exception occurred", this), e);
-        }
-      }
-    }
-
-    protected void waitForResumption() throws InterruptedException {
-      synchronized (this._pausedLock) {
-        logger.info("{} : Pausing processing", this);
-        if (!getProxy().isPaused()) {
-          return;
-        }
-        while (getProxy().isPaused()) {
-          this._pausedLock.wait();
-        }
-        // Fix for #48571
-        _messageQueue.clearPeekedIDs();
-      }
-    }
-
-    protected void resumeDispatching() {
-      logger.info("{} : Resuming processing", this);
-
-      // Notify thread to resume
-      this._pausedLock.notifyAll();
-    }
-
-    protected Object deserialize(byte[] serializedBytes) {
-      Object deserializedObject = serializedBytes;
-      // This is a debugging method so ignore all exceptions like
-      // ClassNotFoundException
-      try {
-        ByteArrayDataInput dis = new ByteArrayDataInput(serializedBytes);
-        deserializedObject = DataSerializer.readObject(dis);
-      } catch (Exception e) {
-      }
-      return deserializedObject;
-    }
-
-    protected void initializeTransients() {
-      while (!this._messageQueue.isEmptyAckList() && this._messageQueue.isPeekInitialized()) {
-        try {
-          this._messageQueue.remove();
-        } catch (InterruptedException e) {
-          e.printStackTrace();
-        }
-      }
-      this._messageQueue.initializeTransients();
-    }
-  }
+
+  @FunctionalInterface
+  @VisibleForTesting
+  interface CacheClientProxyStatsFactory {
+
+    CacheClientProxyStats create(StatisticsFactory statisticsFactory,
+        ClientProxyMembershipID proxyID, String remoteHostAddress);
+  }
+
+  @FunctionalInterface
+  @VisibleForTesting
+  public interface MessageDispatcherFactory {
+
+    MessageDispatcher create(CacheClientProxy proxy, String name, StatisticsClock statisticsClock);
+  }

MOV26 UPD40 INS23 INS23 MOV23 INS31 MOV31 MOV31 INS55 INS55 INS78 INS78 INS83 INS83 MOV83 UPD43 MOV43 INS59 INS78 INS83 INS83 MOV83 UPD43 MOV43 MOV59 UPD43 MOV29 MOV83 INS42 INS44 INS44 MOV44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 MOV44 MOV43 INS8 INS78 INS44 INS44 INS44 INS44 MOV21 UPD43 INS42 INS8 MOV43 INS42 MOV44 INS8 INS78 INS78 INS42 MOV31 INS78 INS78 INS83 INS42 MOV31 INS42 INS42 UPD42 UPD42 MOV42 INS86 INS42 UPD42 UPD42 INS89 UPD42 UPD42 UPD43 MOV43 UPD42 MOV42 INS43 INS42 UPD42 INS39 INS42 INS39 INS42 UPD43 MOV43 UPD42 MOV42 INS39 INS42 INS39 INS42 UPD43 MOV43 UPD42 MOV42 INS43 INS42 UPD43 UPD42 INS17 INS42 MOV43 INS42 MOV43 INS42 INS43 INS42 INS43 INS42 INS21 UPD42 INS41 INS41 INS42 INS42 MOV43 INS42 INS44 INS44 MOV44 INS42 INS42 MOV43 INS42 MOV44 MOV44 MOV44 INS59 INS59 INS59 INS14 INS43 UPD42 MOV42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS7 INS42 INS32 UPD43 MOV43 UPD42 MOV42 UPD43 MOV43 UPD42 MOV42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 INS42 INS27 UPD42 MOV42 MOV32 UPD42 MOV42 MOV22 INS42 MOV22 INS32 INS22 INS42 INS42 UPD42 MOV42 INS52 UPD42 MOV42 INS42 UPD42 UPD42 UPD45 MOV45 INS32 INS45 INS42 UPD42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV52 UPD42 MOV42 MOV32 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL14 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL66 DEL65 DEL29 DEL42 DEL43 DEL14 DEL45 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL45 DEL22 DEL42 DEL32 DEL42 DEL32 DEL45 DEL52 DEL42 DEL22 DEL27 DEL14 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL54 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL32 DEL27 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL38 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL45 DEL52 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL42 DEL52 DEL42 DEL42 DEL14 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL42 DEL9 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL42 DEL43 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL42 DEL33 DEL27 DEL36 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL33 DEL41 DEL8 DEL12 DEL54 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL40 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL40 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL18 DEL8 DEL25 DEL42 DEL38 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL40 DEL9 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL40 DEL9 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL55 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL42 DEL42 DEL46 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL43 DEL40 DEL42 DEL32 DEL11 DEL36 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL32 DEL32 DEL21 DEL39 DEL42 DEL40 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL40 DEL42 DEL40 DEL32 DEL34 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL22 DEL40 DEL27 DEL36 DEL38 DEL27 DEL59 DEL60 DEL42 DEL42 DEL27 DEL36 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL42 DEL45 DEL45 DEL16 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL40 DEL42 DEL40 DEL42 DEL32 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL42 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL1 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL42 DEL67 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL42 DEL38 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL38 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL42 DEL34 DEL34 DEL38 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL10 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL40 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL10 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL25 DEL8 DEL54 DEL8 DEL24 DEL8 DEL42 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL34 DEL52 DEL42 DEL22 DEL42 DEL32 DEL16 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL36 DEL11 DEL36 DEL41 DEL8 DEL25 DEL34 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL9 DEL59 DEL60 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL42 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL10 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL32 DEL42 DEL27 DEL7 DEL21 DEL8 DEL61 DEL42 DEL42 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL38 DEL52 DEL42 DEL22 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL10 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL45 DEL52 DEL42 DEL22 DEL42 DEL32 DEL45 DEL52 DEL42 DEL22 DEL42 DEL32 DEL45 DEL52 DEL42 DEL22 DEL42 DEL32 DEL27 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL38 DEL52 DEL42 DEL22 DEL42 DEL32 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL61 DEL8 DEL44 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL51 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL10 DEL8 DEL12 DEL54 DEL42 DEL32 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL21 DEL42 DEL32 DEL10 DEL8 DEL25 DEL42 DEL33 DEL27 DEL39 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL42 DEL43 DEL62 DEL42 DEL32 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL32 DEL38 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL45 DEL52 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL18 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL10 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL45 DEL52 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL61 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL38 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL59 DEL60 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL34 DEL27 DEL39 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL32 DEL21 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL45 DEL7 DEL21 DEL8 DEL25 DEL25 DEL83 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL38 DEL36 DEL52 DEL42 DEL32 DEL45 DEL27 DEL45 DEL16 DEL36 DEL42 DEL33 DEL27 DEL36 DEL34 DEL42 DEL42 DEL32 DEL16 DEL36 DEL4 DEL3 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL45 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL22 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL62 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL60 DEL42 DEL42 DEL52 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL42 DEL33 DEL27 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL32 DEL7 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL45 DEL52 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL42 DEL32 DEL42 DEL32 DEL38 DEL41 DEL8 DEL25 DEL42 DEL32 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL38 DEL52 DEL42 DEL22 DEL42 DEL32 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL61 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL8 DEL31 DEL55 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL52 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL44 DEL52 DEL42 DEL22 DEL42 DEL32 DEL38 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL45 DEL52 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL12 DEL44 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL45 DEL52 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL83 DEL42 DEL43 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8