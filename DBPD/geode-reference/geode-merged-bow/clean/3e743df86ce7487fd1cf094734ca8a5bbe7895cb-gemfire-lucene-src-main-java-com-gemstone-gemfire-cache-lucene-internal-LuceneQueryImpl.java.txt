Implementing LuceneQueryImpl.search

Implementing search by invoking the LuceneFunction from within
LuceneQueryImpl.search and building a result set. Adding unit tests for
the same.

-import org.apache.lucene.search.Query;
-
+import com.gemstone.gemfire.cache.Region;
+import com.gemstone.gemfire.cache.execute.FunctionService;
+import com.gemstone.gemfire.cache.execute.ResultCollector;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.LuceneFunction;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.LuceneFunctionContext;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.TopEntries;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.TopEntriesCollector;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.TopEntriesCollectorManager;
+import com.gemstone.gemfire.cache.lucene.internal.distributed.TopEntriesFunctionCollector;
-public class LuceneQueryImpl implements LuceneQuery {
+public class LuceneQueryImpl<K, V> implements LuceneQuery<K, V> {
-  private String regionName;
-  
-  private Set<String> projectedFieldNames;
-  
+  private String[] projectedFieldNames;
+  private Region<K, V> region;
-  LuceneQueryImpl(String indexName, String regionName, LuceneQueryProvider provider, Set<String> projectionFields, 
+  public LuceneQueryImpl(String indexName, Region<K, V> region, LuceneQueryProvider provider, String[] projectionFields, 
-    this.regionName = regionName;
+    this.region = region;
-  public LuceneQueryResults search() {
-    // TODO Auto-generated method stub
-    return null;
+  public LuceneQueryResults<K, V> search() {
+    LuceneFunctionContext<TopEntriesCollector> context = new LuceneFunctionContext<>(query, indexName,
+        new TopEntriesCollectorManager());
+    TopEntriesFunctionCollector collector = new TopEntriesFunctionCollector();
+
+    ResultCollector<TopEntriesCollector, TopEntries> rc = (ResultCollector<TopEntriesCollector, TopEntries>) FunctionService.onRegion(region)
+        .withArgs(context)
+        .withCollector(collector)
+        .execute(LuceneFunction.ID);
+    
+    //TODO provide a timeout to the user?
+    TopEntries entries = rc.getResult();
+    
+    return new LuceneQueryResultsImpl<K, V>(entries.getHits(), region, pageSize);
-    return (String[])this.projectedFieldNames.toArray();
+    return this.projectedFieldNames;

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS73 INS73 INS74 INS23 INS42 INS42 MOV43 INS43 INS43 INS83 MOV5 MOV59 UPD74 INS59 INS83 INS74 MOV5 UPD42 MOV42 INS42 UPD43 UPD43 INS43 INS42 INS74 UPD42 INS5 MOV43 INS43 INS43 INS60 INS60 INS60 INS60 UPD42 UPD42 INS42 INS43 INS43 INS43 INS43 INS85 INS42 INS42 INS74 INS59 INS43 INS59 INS74 INS59 INS43 INS59 INS14 MOV22 UPD42 MOV42 INS42 INS42 MOV42 UPD42 INS43 INS43 INS42 INS14 INS42 INS42 INS14 INS43 INS43 INS43 INS42 INS11 INS42 INS42 INS32 INS74 INS32 INS42 INS42 UPD42 INS42 INS42 INS74 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS74 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS43 INS32 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 DEL83 DEL43 DEL42 DEL59 DEL23 DEL43 DEL42 DEL43 DEL43 DEL74 DEL33 DEL42 DEL32 DEL11