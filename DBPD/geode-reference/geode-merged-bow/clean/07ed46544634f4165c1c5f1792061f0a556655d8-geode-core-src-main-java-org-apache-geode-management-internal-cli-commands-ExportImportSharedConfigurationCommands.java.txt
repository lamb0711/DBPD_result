GEODE-2197: refactor cluster config

 * not to save the xml, properties in the file system.
 * the cc region's change listener is to download the jar from other locators

-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import com.google.common.primitives.Booleans;
+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;
+import org.apache.geode.management.internal.cli.result.ErrorResultData;
-
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.Set;
+
-    Result result;
-    InfoResultData infoData = ResultBuilder.createInfoResultData();
-    TabularResultData errorTable = ResultBuilder.createTabularResultData();
-    Set<DistributedMember> locators = new HashSet<DistributedMember>(
-        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet());
-    byte[] byteData;
-    boolean success = false;
+    Set<? extends DistributedMember> locators =
+        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet();
-    if (!locators.isEmpty()) {
-      for (DistributedMember locator : locators) {
-        ResultCollector<?, ?> rc =
-            CliUtil.executeFunction(exportSharedConfigurationFunction, null, locator);
-        @SuppressWarnings("unchecked")
-        List<CliFunctionResult> results = (List<CliFunctionResult>) rc.getResult();
-        CliFunctionResult functionResult = results.get(0);
+    Optional<CliFunctionResult> functionResult = locators.stream()
+        .map((DistributedMember locator) -> exportSharedConfigurationFromLocator(locator, null))
+        .filter(CliFunctionResult::isSuccessful)
+        .findFirst();
-        if (functionResult.isSuccessful()) {
-          byteData = functionResult.getByteData();
-          infoData.addAsFile(zipFileName, byteData, InfoResultData.FILE_TYPE_BINARY,
-              CliStrings.EXPORT_SHARED_CONFIG__DOWNLOAD__MSG, false);
-          success = true;
-          break;
-        } else {
-          errorTable.accumulate(CliStrings.LOCATOR_HEADER, functionResult.getMemberIdOrName());
-          errorTable.accumulate(CliStrings.ERROR__MSG__HEADER, functionResult.getMessage());
-        }
-      }
-      if (success) {
-        result = ResultBuilder.buildResult(infoData);
-      } else {
-        errorTable.setStatus(Result.Status.ERROR);
-        result = ResultBuilder.buildResult(errorTable);
-      }
+    Result result;
+    if (functionResult.isPresent()) {
+      InfoResultData infoData = ResultBuilder.createInfoResultData();
+      byte[] byteData = functionResult.get().getByteData();
+      infoData.addAsFile(zipFileName, byteData, InfoResultData.FILE_TYPE_BINARY,
+          CliStrings.EXPORT_SHARED_CONFIG__DOWNLOAD__MSG, false);
+      result = ResultBuilder.buildResult(infoData);
-      result = ResultBuilder.createGemFireErrorResult(
-          CliStrings.SHARED_CONFIGURATION_NO_LOCATORS_WITH_SHARED_CONFIGURATION);
+      ErrorResultData errorData = ResultBuilder.createErrorResultData();
+      errorData.addLine("Export failed");
+      result = ResultBuilder.buildResult(errorData);
+
+  private CliFunctionResult exportSharedConfigurationFromLocator(DistributedMember locator, Object[] args) {
+    ResultCollector rc = CliUtil.executeFunction(exportSharedConfigurationFunction, args, locator);
+    List<CliFunctionResult> results = (List<CliFunctionResult>) rc.getResult();
+
+    return results.get(0);
+  }
+
+
-    Set<DistributedMember> locators = new HashSet<DistributedMember>(
-        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet());
+    Set<? extends DistributedMember> locators =
+        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration().keySet();
-    InfoResultData infoData = ResultBuilder.createInfoResultData();
-    TabularResultData errorTable = ResultBuilder.createTabularResultData();
-    boolean success = false;
-    boolean copySuccess = false;
+    Optional<CliFunctionResult> functionResult = locators.stream()
+        .map((DistributedMember locator) -> importSharedConfigurationFromLocator(locator, args))
+        .filter(CliFunctionResult::isSuccessful)
+        .findFirst();
-    ResultCollector<?, ?> rc =
-        CliUtil.executeFunction(importSharedConfigurationFunction, args, locators);
-    List<CliFunctionResult> functionResults =
-        CliFunctionResult.cleanResults((List<CliFunctionResult>) rc.getResult());
-
-    for (CliFunctionResult functionResult : functionResults) {
-      if (!functionResult.isSuccessful()) {
-        errorTable.accumulate(CliStrings.LOCATOR_HEADER, functionResult.getMemberIdOrName());
-        errorTable.accumulate(CliStrings.ERROR__MSG__HEADER, functionResult.getMessage());
-      } else {
-        copySuccess = true;
-      }
-    }
-
-    if (!copySuccess) {
-      errorTable.setStatus(Result.Status.ERROR);
-      return ResultBuilder.buildResult(errorTable);
-    }
-
-    errorTable = ResultBuilder.createTabularResultData();
-
-    for (DistributedMember locator : locators) {
-      rc = CliUtil.executeFunction(loadSharedConfiguration, args, locator);
-      functionResults = (List<CliFunctionResult>) rc.getResult();
-      CliFunctionResult functionResult = functionResults.get(0);
-      if (functionResult.isSuccessful()) {
-        success = true;
-        infoData.addLine(functionResult.getMessage());
-        break;
-      } else {
-        errorTable.accumulate(CliStrings.LOCATOR_HEADER, functionResult.getMemberIdOrName());
-        errorTable.accumulate(CliStrings.ERROR__MSG__HEADER, functionResult.getMessage());
-      }
-    }
-
-    if (success) {
+    if (functionResult.isPresent()) {
+      InfoResultData infoData = ResultBuilder.createInfoResultData();
+      infoData.addLine(functionResult.get().getMessage());
-      errorTable.setStatus(Result.Status.ERROR);
-      result = ResultBuilder.buildResult(errorTable);
+      ErrorResultData errorData = ResultBuilder.createErrorResultData();
+      errorData.addLine("Import failed");
+      result = ResultBuilder.buildResult(errorData);
+
+  private CliFunctionResult importSharedConfigurationFromLocator(DistributedMember locator, Object[] args) {
+    ResultCollector rc = CliUtil.executeFunction(importSharedConfigurationFunction, args, locator);
+    List<CliFunctionResult> results = (List<CliFunctionResult>) rc.getResult();
+
+    return results.get(0);
+  }
+

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 MOV60 INS83 MOV43 INS42 INS44 INS44 INS8 INS83 MOV43 INS42 INS44 INS44 INS8 INS60 INS25 INS43 INS42 INS5 INS42 INS60 MOV60 INS41 INS60 INS25 INS43 INS42 INS5 INS42 INS60 INS60 INS41 UPD74 INS74 INS59 INS32 INS8 INS8 INS42 INS43 INS85 MOV43 INS59 MOV32 UPD74 UPD74 MOV74 INS59 MOV32 MOV8 INS8 INS42 INS43 INS85 MOV43 INS59 MOV74 INS59 INS32 INS76 MOV32 INS43 INS43 INS42 INS32 MOV42 UPD42 MOV42 MOV60 INS60 MOV21 MOV21 INS60 MOV21 MOV21 INS42 INS42 INS32 INS76 MOV32 UPD43 MOV43 INS42 INS32 UPD42 MOV60 MOV21 INS60 MOV21 MOV21 INS42 INS42 INS32 INS42 INS11 INS42 INS42 INS34 MOV43 UPD42 MOV42 INS42 INS32 INS42 MOV5 INS59 INS43 INS59 INS42 INS42 INS42 INS42 INS42 MOV43 UPD42 INS32 UPD42 MOV42 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS74 INS32 INS32 INS42 INS90 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS45 INS32 INS42 INS90 INS42 INS42 INS32 UPD42 UPD42 INS45 INS43 INS43 INS42 INS42 INS32 INS42 INS86 INS42 INS42 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 UPD42 MOV42 INS86 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 MOV42 UPD42 MOV42 MOV44 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV44 INS32 MOV42 INS42 UPD42 MOV42 MOV42 INS33 UPD42 MOV42 UPD42 MOV42 MOV42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL40 DEL42 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL32 DEL38 DEL42 DEL76 DEL76 DEL74 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL8 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL40 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL45 DEL79 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL42 DEL9 DEL7 DEL21 DEL10 DEL40 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL76 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL11 DEL32 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL38 DEL40 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL8 DEL8 DEL25