GEODE-6588: Cleanup generics and other static analyzer issues. (#3391)


+import java.util.Objects;
-import java.util.TreeSet;
-import org.apache.geode.internal.cache.Node;
-import org.apache.geode.internal.cache.persistence.PersistenceAdvisor;
-import org.apache.geode.internal.cache.persistence.PersistentStateListener;
-  private Queue preInitQueue;
+  private Queue<QueuedBucketProfile> preInitQueue;
-      this.preInitQueue = new ConcurrentLinkedQueue();
+      this.preInitQueue = new ConcurrentLinkedQueue<>();
-    this.clientBucketProfilesMap = new ConcurrentHashMap<Integer, Set<ServerBucketProfile>>();
+    this.clientBucketProfilesMap = new ConcurrentHashMap<>();
-            for (int i = 0; i < this.buckets.length; i++) {
-              BucketAdvisor ba = this.buckets[i].getBucketAdvisor();
+            for (ProxyBucketRegion bucket : this.buckets) {
+              BucketAdvisor ba = bucket.getBucketAdvisor();
-    Map<Integer, List<BucketServerLocation66>> bucketToServerLocations =
-        new HashMap<Integer, List<BucketServerLocation66>>();
+    Map<Integer, List<BucketServerLocation66>> bucketToServerLocations = new HashMap<>();
-      ArrayList<BucketServerLocation66> clientBucketProfiles =
-          new ArrayList<BucketServerLocation66>();
+      ArrayList<BucketServerLocation66> clientBucketProfiles = new ArrayList<>();
-          List<BucketServerLocation66> clientBucketProfiles = bucketToServerLocations.get(bucketId);
-          if (clientBucketProfiles == null) {
-            clientBucketProfiles = new ArrayList<BucketServerLocation66>();
-            bucketToServerLocations.put(bucketId, clientBucketProfiles);
-          }
+          List<BucketServerLocation66> clientBucketProfiles =
+              bucketToServerLocations.computeIfAbsent(bucketId, k -> new ArrayList<>());
-    ConcurrentHashMap<Integer, Set<ServerBucketProfile>> map =
-        new ConcurrentHashMap<Integer, Set<ServerBucketProfile>>();
+    ConcurrentHashMap<Integer, Set<ServerBucketProfile>> map = new ConcurrentHashMap<>();
-        new HashMap<>(this.getAllClientBucketProfiles());
+        new HashMap<>(getAllClientBucketProfiles());
-    List primariesHeld = Collections.EMPTY_LIST;
-    if (this.buckets != null) {
-      for (int i = 0; i < this.buckets.length; i++) {
-        ProxyBucketRegion pbr = this.buckets[i];
+    List<Integer> primariesHeld = Collections.emptyList();
+    if (buckets != null) {
+      for (int i = 0; i < buckets.length; i++) {
+        ProxyBucketRegion pbr = buckets[i];
-          if (primariesHeld == Collections.EMPTY_LIST) {
-            primariesHeld = new ArrayList();
+          if (primariesHeld.isEmpty()) {
+            primariesHeld = new ArrayList<>();
-          primariesHeld.add(Integer.valueOf(i));
+          primariesHeld.add(i);
-      for (int i = 0; i < this.buckets.length; i++) {
-        this.buckets[i].close();
+      for (ProxyBucketRegion bucket : buckets) {
+        bucket.close();
-      if (this.preInitQueue != null) {
+      if (preInitQueue != null) {
-        assert memberId instanceof InternalDistributedMember;
-        this.preInitQueue.add(qbf);
+        preInitQueue.add(qbf);
-    if (removeBuckets && this.buckets != null) {
-      for (int i = 0; i < this.buckets.length; i++) {
-        ProxyBucketRegion pbr = this.buckets[i];
+    if (removeBuckets && buckets != null) {
+      for (ProxyBucketRegion pbr : buckets) {
-
-    boolean removedId = false;
+    boolean removedId;
-  public void removeIdAndBuckets(InternalDistributedMember memberId, int prSerial, int serials[],
+  public void removeIdAndBuckets(InternalDistributedMember memberId, int prSerial, int[] serials,
-    } // synchronized
+    }
+      Objects.requireNonNull(serials);
-      } // for
+      }
-        logger.debug("For bucket {} sick members are ",
+        logger.debug("For bucket {} sick members are {}.",
-          new Object[] {getPartitionedRegion().getFullPath(), key, sm}), sm);
+          getPartitionedRegion().getFullPath(), key, sm), sm);
-     * A lock used to order operations that need to know about the imminent closure/destruction of a
-     * Region
-     */
-    // private StoppableReentrantReadWriteLock isClosingLock = null;
-
-    /**
-    // public StoppableReentrantReadWriteLock.StoppableReadLock
-    // getIsClosingReadLock(CancelCriterion stopper) {
-    // synchronized (this) {
-    // if (isClosingLock == null) {
-    // this.isClosingLock = new StoppableReentrantReadWriteLock(stopper);
-    // }
-    // }
-    // return this.isClosingLock.readLock();
-    // }
-
-    // public Lock getIsClosingWriteLock() {
-    // return this.isClosingLock.writeLock();
-    // }
-
-    Set<InternalDistributedMember> s = adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        // probably not needed as all profiles for a partitioned region are Partition profiles
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile p = (PartitionProfile) profile;
-          return p.isDataStore && (!p.dataPolicy.withPersistence() || p.regionInitialized);
-        }
-        return false;
+    return adviseFilter(profile -> {
+      // probably not needed as all profiles for a partitioned region are Partition profiles
+      if (profile instanceof PartitionProfile) {
+        PartitionProfile p = (PartitionProfile) profile;
+        return p.isDataStore && (!p.dataPolicy.withPersistence() || p.regionInitialized);
+      return false;
-    return s;
-  public Set<InternalDistributedMember> adviseNotAtShutDownAllStatus(final int status) {
-    Set<InternalDistributedMember> s = adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        // probably not needed as all profiles for a partitioned region are Partition profiles
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile p = (PartitionProfile) profile;
-          return p.isDataStore && p.shutDownAllStatus < status;
-        }
-        return false;
+  private Set<InternalDistributedMember> adviseNotAtShutDownAllStatus(final int status) {
+    return adviseFilter(profile -> {
+      // probably not needed as all profiles for a partitioned region are Partition profiles
+      if (profile instanceof PartitionProfile) {
+        PartitionProfile p = (PartitionProfile) profile;
+        return p.isDataStore && p.shutDownAllStatus < status;
+      return false;
-    return s;
-      int memberNum = 0;
+      int memberNum;
-    Set<InternalDistributedMember> s = adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        // probably not needed as all profiles for a partitioned region are Partition profiles
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile p = (PartitionProfile) profile;
-          return p.isDataStore;
-        }
-        return false;
+    Set<InternalDistributedMember> s = adviseFilter(profile -> {
+      // probably not needed as all profiles for a partitioned region are Partition profiles
+      if (profile instanceof PartitionProfile) {
+        PartitionProfile p = (PartitionProfile) profile;
+        return p.isDataStore;
+      return false;
-        s = new HashSet<InternalDistributedMember>();
+        s = new HashSet<>();
-    Set<InternalDistributedMember> s = adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        // probably not needed as all profiles for a partitioned region are
-        // Partition profiles
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile p = (PartitionProfile) profile;
-          if (p.fixedPAttrs != null) {
-            for (FixedPartitionAttributesImpl fpa : p.fixedPAttrs) {
-              if (fpa.getPartitionName().equals(partitionName)) {
-                return true;
-              }
+    Set<InternalDistributedMember> s = adviseFilter(profile -> {
+      // probably not needed as all profiles for a partitioned region are
+      // Partition profiles
+      if (profile instanceof PartitionProfile) {
+        PartitionProfile p = (PartitionProfile) profile;
+        if (p.fixedPAttrs != null) {
+          for (FixedPartitionAttributesImpl fpa : p.fixedPAttrs) {
+            if (fpa.getPartitionName().equals(partitionName)) {
+              return true;
-        return false;
+      return false;
-      s = new HashSet<InternalDistributedMember>();
+      s = new HashSet<>();
-    final List<InternalDistributedMember> fixedPartitionDataStore =
-        new ArrayList<InternalDistributedMember>(1);
-    fetchProfiles(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile p = (PartitionProfile) profile;
-          if (p.fixedPAttrs != null) {
-            for (FixedPartitionAttributesImpl fpa : p.fixedPAttrs) {
-              if (fpa.isPrimary() && fpa.hasBucket(bucketId)) {
-                fixedPartitionDataStore.add(0, p.getDistributedMember());
-                return true;
-              }
+    final List<InternalDistributedMember> fixedPartitionDataStore = new ArrayList<>(1);
+    fetchProfiles(profile -> {
+      if (profile instanceof PartitionProfile) {
+        PartitionProfile p = (PartitionProfile) profile;
+        if (p.fixedPAttrs != null) {
+          for (FixedPartitionAttributesImpl fpa : p.fixedPAttrs) {
+            if (fpa.isPrimary() && fpa.hasBucket(bucketId)) {
+              fixedPartitionDataStore.add(0, p.getDistributedMember());
+              return true;
-        return false;
+      return false;
-    final List<FixedPartitionAttributesImpl> allFPAs =
-        new ArrayList<FixedPartitionAttributesImpl>();
-    fetchProfiles(new Filter() {
-      @Override
-      public boolean include(final Profile profile) {
-        if (profile instanceof PartitionProfile) {
-          final PartitionProfile pp = (PartitionProfile) profile;
-          if (pp.fixedPAttrs != null) {
-            allFPAs.addAll(pp.fixedPAttrs);
-            return true;
-          }
+    final List<FixedPartitionAttributesImpl> allFPAs = new ArrayList<>();
+    fetchProfiles(profile -> {
+      if (profile instanceof PartitionProfile) {
+        final PartitionProfile pp = (PartitionProfile) profile;
+        if (pp.fixedPAttrs != null) {
+          allFPAs.addAll(pp.fixedPAttrs);
+          return true;
-        return false;
+      return false;
-    final List<FixedPartitionAttributesImpl> sameFPAs =
-        new ArrayList<FixedPartitionAttributesImpl>();
+    final List<FixedPartitionAttributesImpl> sameFPAs = new ArrayList<>();
-    fetchProfiles(new Filter() {
-      @Override
-      public boolean include(final Profile profile) {
-        if (profile instanceof PartitionProfile) {
-          final PartitionProfile pp = (PartitionProfile) profile;
-          List<FixedPartitionAttributesImpl> fpaList = pp.fixedPAttrs;
-          if (fpaList != null) {
-            int index = fpaList.indexOf(fpa);
-            if (index != -1) {
-              sameFPAs.add(fpaList.get(index));
-            }
-            return true;
+    fetchProfiles(profile -> {
+      if (profile instanceof PartitionProfile) {
+        final PartitionProfile pp = (PartitionProfile) profile;
+        List<FixedPartitionAttributesImpl> fpaList = pp.fixedPAttrs;
+        if (fpaList != null) {
+          int index = fpaList.indexOf(fpa);
+          if (index != -1) {
+            sameFPAs.add(fpaList.get(index));
+          return true;
-        return false;
+      return false;
-    final List<FixedPartitionAttributesImpl> remotePrimaryFPAs =
-        new ArrayList<FixedPartitionAttributesImpl>();
+    final List<FixedPartitionAttributesImpl> remotePrimaryFPAs = new ArrayList<>();
-    fetchProfiles(new Filter() {
-      @Override
-      public boolean include(final Profile profile) {
-        if (profile instanceof PartitionProfile) {
-          final PartitionProfile pp = (PartitionProfile) profile;
-          List<FixedPartitionAttributesImpl> fpaList = pp.fixedPAttrs;
-          if (fpaList != null) {
-            for (FixedPartitionAttributesImpl fpa : fpaList) {
-              if (fpa.isPrimary()) {
-                remotePrimaryFPAs.add(fpa);
-                return true;
-              }
+    fetchProfiles(profile -> {
+      if (profile instanceof PartitionProfile) {
+        final PartitionProfile pp = (PartitionProfile) profile;
+        List<FixedPartitionAttributesImpl> fpaList = pp.fixedPAttrs;
+        if (fpaList != null) {
+          for (FixedPartitionAttributesImpl fpa : fpaList) {
+            if (fpa.isPrimary()) {
+              remotePrimaryFPAs.add(fpa);
+              return true;
-        return false;
+      return false;
-  /**
-   * TODO remove this when Primary Bucket impl. is permanently in place
-   *
-   * @return the node??
-   */
-  public Node adviseSmallestDataStore(final List limitNodeList) {
-    final HashMap filtSet = new HashMap(limitNodeList.size());
-    Node n = null;
-    for (Iterator filtI = limitNodeList.iterator(); filtI.hasNext();) {
-      n = (Node) filtI.next();
-      filtSet.put(n.getMemberId(), n);
-    }
-    final Object[] smallest = new Object[1];
-    adviseFilter(new Filter() {
-      short numBucks = Short.MAX_VALUE;
-
-      @Override
-      public boolean include(Profile profile) {
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile p = (PartitionProfile) profile;
-          if (filtSet.containsKey(p.getDistributedMember()) && p.numBuckets < this.numBucks) {
-            smallest[0] = p.getDistributedMember();
-            this.numBucks = p.numBuckets;
-          }
-        }
-        return false;
-      }
-    });
-    return (Node) filtSet.get(smallest[0]);
-  }
-
-
-  public List<DistributedMember> orderDataStoresUsingBucketCount(final Set nodes) {
-    final Set<NodeBucketSize> orderedSet = new TreeSet<NodeBucketSize>();
-    final List<DistributedMember> orderedList = new ArrayList<DistributedMember>();
-    final DistributedMember self = getDistributionManager().getDistributionManagerId();
-    adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        if (profile instanceof PartitionProfile && nodes.contains(profile.getDistributedMember())) {
-          PartitionProfile p = (PartitionProfile) profile;
-          orderedSet.add(new NodeBucketSize(p.numBuckets, p.getDistributedMember()));
-          return true;
-        } else if (profile instanceof PartitionProfile && nodes.contains(self)) {
-          orderedSet.add(new NodeBucketSize(getBucketSet().size(), self));
-          return true;
-        }
-        return false;
-      }
-    });
-
-    if (nodes.contains(self)
-        && !orderedSet.contains(new NodeBucketSize(getBucketSet().size(), self))) {
-      orderedSet.add(new NodeBucketSize(getBucketSet().size(), self));
-    }
-    for (NodeBucketSize node : orderedSet) {
-      orderedList.add(node.member);
-    }
-    return orderedList;
-  }
-
-  private class NodeBucketSize implements Comparable {
-    private final int numBuckets;
-
-    private final DistributedMember member;
-
-    public NodeBucketSize(final int numBuckets, final DistributedMember member) {
-      this.numBuckets = numBuckets;
-      this.member = member;
-    }
-
-    @Override
-    public int compareTo(Object o) {
-      assert o instanceof NodeBucketSize;
-      NodeBucketSize node = (NodeBucketSize) o;
-      if (node.numBuckets > this.numBuckets) {
-        return 1;
-      }
-      return -1;
-    }
-
-    @Override
-    public String toString() {
-      return "NodeBucketSize [ member =" + member + " numBuckets = " + numBuckets + "]";
-    }
-
-    @Override
-    public int hashCode() {
-      return super.hashCode();
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-      if (!(obj instanceof NodeBucketSize)) {
-        return false;
-      }
-      NodeBucketSize node = (NodeBucketSize) obj;
-      if (this.member.getId().equals(node.member.getId())) {
-        return true;
-      }
-      return false;
-    }
-  }
-
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        CacheProfile prof = (CacheProfile) profile;
-        return prof.isPartitioned;
-      }
+    return adviseFilter(profile -> {
+      CacheProfile prof = (CacheProfile) profile;
+      return prof.isPartitioned;
-  public Set adviseAllServersWithInterest() {
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        CacheProfile prof = (CacheProfile) profile;
-        return prof.hasCacheServer && prof.filterProfile != null
-            && prof.filterProfile.hasInterest();
-      }
+  Set adviseAllServersWithInterest() {
+    return adviseFilter(profile -> {
+      CacheProfile prof = (CacheProfile) profile;
+      return prof.hasCacheServer && prof.filterProfile != null
+          && prof.filterProfile.hasInterest();
-  private static final Filter prServerWithInterestFilter = new Filter() {
-    @Override
-    public boolean include(Profile profile) {
-      CacheProfile prof = (CacheProfile) profile;
-      return prof.isPartitioned && prof.hasCacheServer && prof.filterProfile != null
-          && prof.filterProfile.hasInterest();
-    }
+  private static final Filter prServerWithInterestFilter = profile -> {
+    CacheProfile prof = (CacheProfile) profile;
+    return prof.isPartitioned && prof.hasCacheServer && prof.filterProfile != null
+        && prof.filterProfile.hasInterest();
-    return adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile prof = (PartitionProfile) profile;
-          if (prof.isPartitioned) {
-            if (prof.hasCacheListener) {
-              InterestPolicy pol = prof.subscriptionAttributes.getInterestPolicy();
-              if (pol == InterestPolicy.ALL) {
-                return true;
-              }
-            }
-            if (prof.requiresNotification) {
+    return adviseFilter(profile -> {
+      if (profile instanceof PartitionProfile) {
+        PartitionProfile prof = (PartitionProfile) profile;
+        if (prof.isPartitioned) {
+          if (prof.hasCacheListener) {
+            InterestPolicy pol = prof.subscriptionAttributes.getInterestPolicy();
+            if (pol == InterestPolicy.ALL) {
-            return false;
+          return prof.requiresNotification;
-        return false;
+      return false;
-    Map<Integer, BucketAdvisor> map = new HashMap<Integer, BucketAdvisor>();
-    for (int i = 0; i < buckets.length; i++) {
-      ProxyBucketRegion pbr = this.buckets[i];
+    Map<Integer, BucketAdvisor> map = new HashMap<>();
+    for (ProxyBucketRegion pbr : buckets) {
-    int result[] = new int[this.buckets.length];
+    int[] result = new int[this.buckets.length];
-  public boolean waitForLocalBucketStorage(int bucketId) {
-    Assert.assertTrue(this.buckets != null);
-    return this.buckets[bucketId].getBucketAdvisor().waitForStorage();
-  }
-
-  private class BucketSet extends AbstractSet {
+  private class BucketSet extends AbstractSet<Integer> {
-    public BucketSet() {
+    BucketSet() {
-    @Override
-    public Object[] toArray() {
-      // A somewhat wasteful impl. but required because the size is not fixed
-      ArrayList ar = new ArrayList(this.pbrs.length);
-      try {
-        for (Iterator e = iterator(); e.hasNext();) {
-          ar.add(e.next());
-        }
-      } catch (NoSuchElementException allDone) {
-      }
-      return ar.toArray();
-    }
-
-    @Override
-    public Object[] toArray(Object p_a[]) {
-      Object a[] = p_a;
-      // Some what wasteful, but needed because size is not fixed
-      Object[] oa = toArray();
-
-      if (a.length < oa.length) {
-        a = (Object[]) java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),
-            oa.length);
-        System.arraycopy(oa, 0, a, 0, oa.length);
-      }
-
-      for (int i = 0; i < oa.length; i++)
-        a[i] = oa[i];
-
-      if (a.length > oa.length)
-        a[oa.length] = null;
-
-      return a;
-    }
-
-
-    public Iterator iterator() {
+    public Iterator<Integer> iterator() {
-    class BucketSetIterator implements Iterator {
+    class BucketSetIterator implements Iterator<Integer> {
-      public Object next() {
+      public Integer next() {
-            return Integer.valueOf(this.currentItem);
+            return this.currentItem;
-                return Integer.valueOf(this.currentItem);
+                return this.currentItem;
-              return Integer.valueOf(this.currentItem);
+              return this.currentItem;
-    final HashMap<InternalDistributedMember, Integer> memberToPrimaryCount =
-        new HashMap<InternalDistributedMember, Integer>();
-    for (int i = 0; i < this.buckets.length; i++) {
-      ProxyBucketRegion pbr = this.buckets[i];
+    final HashMap<InternalDistributedMember, Integer> memberToPrimaryCount = new HashMap<>();
+    for (ProxyBucketRegion pbr : this.buckets) {
-        Integer count = memberToPrimaryCount.get(p);
-        if (count != null) {
-          memberToPrimaryCount.put(p, Integer.valueOf(count.intValue() + 1));
-        } else {
-          memberToPrimaryCount.put(p, Integer.valueOf(1));
-        }
+        memberToPrimaryCount.merge(p, 1, Integer::sum);
-    final ArrayList<DataStoreBuckets> ds = new ArrayList<DataStoreBuckets>(memberFilter.size());
-    adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile p = (PartitionProfile) profile;
-          if (memberFilter.contains(p.getDistributedMember())) {
-            Integer priCount = memberToPrimaryCount.get(p.getDistributedMember());
-            int primaryCount = 0;
-            if (priCount != null) {
-              primaryCount = priCount.intValue();
-            }
-            ds.add(new DataStoreBuckets(p.getDistributedMember(), p.numBuckets, primaryCount,
-                p.localMaxMemory));
+    final ArrayList<DataStoreBuckets> ds = new ArrayList<>(memberFilter.size());
+    adviseFilter(profile -> {
+      if (profile instanceof PartitionProfile) {
+        PartitionProfile p = (PartitionProfile) profile;
+        if (memberFilter.contains(p.getDistributedMember())) {
+          Integer priCount = memberToPrimaryCount.get(p.getDistributedMember());
+          int primaryCount = 0;
+          if (priCount != null) {
+            primaryCount = priCount;
+          ds.add(new DataStoreBuckets(p.getDistributedMember(), p.numBuckets, primaryCount,
+              p.localMaxMemory));
-        return false;
+      return false;
-    for (int i = 0; i < pbrs.length; i++) {
-      pbrs[i].getBucketAdvisor().dumpProfiles(infoMsg);
-      BucketPersistenceAdvisor persistentAdvisor = pbrs[i].getPersistenceAdvisor();
+    for (ProxyBucketRegion pbr : pbrs) {
+      pbr.getBucketAdvisor().dumpProfiles(infoMsg);
+      BucketPersistenceAdvisor persistentAdvisor = pbr.getPersistenceAdvisor();
-    HashSet hs = new HashSet();
+    HashSet<InternalDistributedMember> hs = new HashSet<>();
-    Assert.assertTrue(bucs != null);
+    Objects.requireNonNull(bucs);
-  public void putBucketProfile(int bucketId, BucketProfile profile) {
+  void putBucketProfile(int bucketId, BucketProfile profile) {
-    protected final BucketProfile bucketProfile;
+    final BucketProfile bucketProfile;
-    protected final boolean isRemoval;
+    final boolean isRemoval;
-    protected final boolean fromMembershipListener;
+    final boolean fromMembershipListener;
-    protected final int serials[];
+    final int[] serials;
-    public QueuedBucketProfile(int bId, BucketProfile p) {
+    QueuedBucketProfile(int bId, BucketProfile p) {
-    public QueuedBucketProfile(InternalDistributedMember mbr, boolean crashed, boolean destroyed,
+    QueuedBucketProfile(InternalDistributedMember mbr, boolean crashed, boolean destroyed,
-    public QueuedBucketProfile(InternalDistributedMember mbr, int serials[], boolean destroyed) {
+    QueuedBucketProfile(InternalDistributedMember mbr, int[] serials, boolean destroyed) {
-    adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        // probably not needed as all profiles for a partitioned region are Partition profiles
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile p = (PartitionProfile) profile;
-          total.addAndGet(p.localMaxMemory);
-        }
-        return false;
+    adviseFilter(profile -> {
+      // probably not needed as all profiles for a partitioned region are Partition profiles
+      if (profile instanceof PartitionProfile) {
+        PartitionProfile p = (PartitionProfile) profile;
+        total.addAndGet(p.localMaxMemory);
+      return false;
-  public long adviseTotalMemoryAllocationForFPR() {
-    final AtomicLong total = new AtomicLong();
-    adviseFilter(new Filter() {
-      @Override
-      public boolean include(Profile profile) {
-        // probably not needed as all profiles for a partitioned region are Partition profiles
-        if (profile instanceof PartitionProfile) {
-          PartitionProfile p = (PartitionProfile) profile;
-          if (p.fixedPAttrs != null) {
-            total.addAndGet(p.localMaxMemory);
-          }
-        }
-        return false;
-      }
-    });
-    return total.get();
-  }
-
-  /**
-   * Returns true if there are any buckets created anywhere in the distributed system for this
-   * partitioned region.
-   */
-  public boolean hasCreatedBuckets() {
-    final ProxyBucketRegion[] bucs = this.buckets;
-    if (bucs != null) {
-      for (int i = 0; i < bucs.length; i++) {
-        if (bucs[i].getBucketOwnersCount() > 0) {
-          return true;
-        }
-      }
-    }
-    return false;
-  }
-
-    for (int i = 0; i < bucs.length; i++) {
-      if (bucs[i].getBucketOwnersCount() > 0) {
+    for (ProxyBucketRegion buc : bucs) {
+      if (buc.getBucketOwnersCount() > 0) {
-    ArrayList result = new ArrayList(bucs.length);
+    ArrayList<BucketProfileAndId> result = new ArrayList<>(bucs.length);
-  public void putBucketRegionProfiles(ArrayList l) {
-    int size = l.size();
-    for (int i = 0; i < size; i++) {
-      BucketProfileAndId bp = (BucketProfileAndId) l.get(i);
+  public void putBucketRegionProfiles(ArrayList<BucketProfileAndId> l) {
+    for (BucketProfileAndId bp : l) {
-      for (int i = 0; i < this.buckets.length; i++) {
-        this.buckets[i].getBucketAdvisor().checkForLostPrimaryElector(profile);
-      }
-    }
-  }
-
-  public void addPersistenceListener(PersistentStateListener listener) {
-    for (int i = 0; i < buckets.length; i++) {
-      PersistenceAdvisor advisor = buckets[i].getPersistenceAdvisor();
-      if (advisor != null) {
-        advisor.addListener(listener);
+      for (ProxyBucketRegion bucket : this.buckets) {
+        bucket.getBucketAdvisor().checkForLostPrimaryElector(profile);
-    public BucketProfile getBucketProfile() {
+    BucketProfile getBucketProfile() {
-    public void waitForChange() {
+    void waitForChange() {
-          } catch (InterruptedException e) {
+          } catch (InterruptedException ignored) {

MOV26 UPD40 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 MOV31 INS74 MOV29 MOV74 UPD42 INS8 MOV29 UPD83 MOV74 UPD42 MOV44 INS8 MOV29 MOV74 INS42 MOV44 INS8 MOV29 INS83 MOV43 INS42 MOV44 INS8 MOV29 MOV74 UPD42 INS8 MOV29 MOV74 UPD42 MOV44 INS8 MOV29 MOV74 UPD42 INS8 MOV43 UPD42 INS8 MOV43 INS42 INS8 MOV29 MOV43 UPD42 MOV44 INS8 INS74 MOV29 MOV74 UPD42 MOV44 INS8 UPD39 UPD42 INS8 MOV43 INS43 INS5 INS41 INS41 INS60 INS25 MOV25 MOV41 INS60 INS21 MOV25 MOV25 MOV41 INS60 INS21 MOV41 INS60 INS21 MOV41 MOV60 INS21 MOV41 INS41 INS41 INS86 INS41 INS70 MOV43 INS43 INS74 INS74 INS60 INS70 MOV60 INS21 MOV41 INS70 INS5 MOV60 INS21 MOV41 INS70 INS74 INS70 INS42 INS74 INS27 MOV27 INS39 INS85 INS32 INS32 MOV74 INS59 MOV27 INS8 INS83 MOV74 INS59 INS32 INS83 MOV74 INS59 INS32 INS83 MOV74 MOV59 INS32 INS32 INS32 INS32 INS59 MOV8 INS32 INS44 INS42 MOV8 INS5 UPD42 MOV42 MOV43 INS43 MOV43 MOV43 MOV43 MOV8 INS83 MOV74 INS59 INS44 MOV22 INS8 MOV74 INS32 INS44 INS42 INS8 MOV74 INS39 INS85 INS5 INS32 INS44 INS42 INS8 INS74 MOV43 MOV43 INS44 INS42 MOV8 MOV43 MOV43 INS32 INS42 INS33 INS70 INS70 INS21 INS42 INS86 INS42 INS86 INS42 INS32 INS21 INS42 INS14 INS42 INS86 INS42 INS14 INS42 INS86 UPD42 INS42 INS86 UPD42 INS42 INS86 INS42 INS86 INS42 INS86 INS42 INS42 INS86 INS43 INS42 INS39 INS85 UPD42 MOV42 UPD42 MOV42 MOV53 INS42 INS14 MOV43 INS42 MOV60 INS25 INS42 INS86 INS43 INS42 MOV21 MOV60 MOV25 UPD42 UPD42 INS42 INS39 INS85 INS42 INS86 MOV43 INS42 MOV25 MOV43 INS43 MOV43 INS42 INS70 UPD74 UPD74 UPD74 INS42 INS42 MOV27 INS44 INS42 INS8 INS42 INS44 INS42 MOV8 INS32 INS59 MOV8 INS59 MOV8 INS86 MOV27 INS42 INS86 INS7 INS74 INS34 INS59 MOV8 INS74 INS59 MOV8 UPD74 INS59 MOV8 UPD74 INS59 MOV8 INS59 MOV8 INS59 MOV8 INS59 MOV8 UPD74 INS42 MOV27 INS74 MOV27 INS8 INS74 INS59 MOV8 INS42 INS74 INS59 MOV8 INS42 INS74 INS44 MOV22 INS8 MOV42 MOV43 INS42 MOV21 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS59 MOV8 INS59 MOV8 INS42 INS14 MOV43 INS42 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 MOV8 INS43 INS21 MOV43 INS42 MOV43 INS42 MOV43 INS43 INS42 MOV21 INS74 UPD74 INS43 MOV32 INS42 INS42 INS42 INS42 INS74 MOV32 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 MOV43 MOV43 INS60 INS42 MOV2 INS42 INS42 UPD45 MOV43 INS25 INS42 INS42 INS42 INS34 INS90 MOV74 INS59 MOV42 INS32 UPD74 UPD42 MOV42 MOV22 MOV32 INS8 MOV8 INS42 INS42 INS42 MOV42 INS32 INS42 INS42 MOV42 INS41 MOV60 MOV60 MOV60 MOV25 MOV19 MOV25 MOV41 UPD42 INS70 MOV42 UPD42 MOV42 MOV42 INS86 INS40 INS8 MOV22 INS44 MOV22 MOV8 INS59 INS14 MOV21 MOV41 INS43 INS42 INS42 UPD74 MOV74 INS74 MOV22 INS42 MOV43 MOV43 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL52 DEL42 DEL22 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL22 DEL27 DEL42 DEL37 DEL24 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL52 DEL40 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL40 DEL27 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL27 DEL42 DEL37 DEL8 DEL24 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL62 DEL6 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL27 DEL42 DEL37 DEL24 DEL9 DEL39 DEL85 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL4 DEL3 DEL42 DEL78 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL78 DEL39 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31 DEL34 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL1 DEL14 DEL42 DEL43 DEL42 DEL78 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL78 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL78 DEL39 DEL83 DEL43 DEL42 DEL44 DEL42 DEL78 DEL39 DEL42 DEL43 DEL34 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL78 DEL39 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL78 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL59 DEL60 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL83 DEL60 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL83 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL83 DEL42 DEL83 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL24 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL59 DEL60 DEL42 DEL42 DEL43 DEL39 DEL42 DEL40 DEL59 DEL23 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL40 DEL52 DEL42 DEL22 DEL27 DEL27 DEL42 DEL34 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL40 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL11 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL9 DEL41 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL14 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL25 DEL9 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL14 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL83 DEL39 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL6 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL40 DEL52 DEL42 DEL22 DEL27 DEL34 DEL41 DEL8 DEL25 DEL34 DEL38 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL48 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL9 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL40 DEL42 DEL32 DEL32 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL55 DEL83 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL1 DEL14 DEL42 DEL78 DEL39 DEL40 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL39 DEL85 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL2 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL78 DEL83 DEL43 DEL85 DEL5 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL85 DEL44 DEL42 DEL43 DEL42 DEL85 DEL42 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL59 DEL60 DEL40 DEL40 DEL27 DEL42 DEL42 DEL43 DEL85 DEL5 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL32 DEL11 DEL7 DEL21 DEL42 DEL42 DEL42 DEL34 DEL42 DEL34 DEL40 DEL32 DEL21 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL7 DEL21 DEL24 DEL40 DEL40 DEL27 DEL42 DEL40 DEL2 DEL33 DEL7 DEL21 DEL25 DEL42 DEL41 DEL8 DEL31 DEL43 DEL42 DEL43 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL25 DEL8 DEL42 DEL78 DEL39 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL43 DEL42 DEL44 DEL83 DEL42 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL33 DEL27 DEL83 DEL83 DEL83 DEL83 DEL83 DEL39 DEL85 DEL83 DEL83 DEL83 DEL39 DEL85 DEL42 DEL78 DEL42 DEL43 DEL42 DEL44 DEL83 DEL39 DEL42 DEL42 DEL42 DEL43 DEL1 DEL14 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL40 DEL33 DEL27 DEL42 DEL42 DEL40 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL1 DEL14 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL32 DEL34 DEL27 DEL9 DEL41 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL24 DEL52 DEL42 DEL22 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL27 DEL42 DEL37 DEL8 DEL24 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL31 DEL83 DEL83