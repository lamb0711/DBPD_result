Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  //  private long regionVersion;
+  // private long regionVersion;
-    RegionEventImpl rev = new RegionEventImpl(region, Operation.REGION_EXPIRE_DESTROY, null, false, region.getMyId());
+    RegionEventImpl rev =
+        new RegionEventImpl(region, Operation.REGION_EXPIRE_DESTROY, null, false, region.getMyId());
-    //    this.regionVersion = ((DistributedRegion)rev.getRegion()).getVersionVector().getMaxTombstoneGCVersion();
-    this.regionGCVersions = ((DistributedRegion) rev.getRegion()).getVersionVector().getTombstoneGCVector();
+    // this.regionVersion =
+    // ((DistributedRegion)rev.getRegion()).getVersionVector().getMaxTombstoneGCVersion();
+    this.regionGCVersions =
+        ((DistributedRegion) rev.getRegion()).getVersionVector().getTombstoneGCVector();
-    //    mssg.regionVersion = this.regionVersion;
+    // mssg.regionVersion = this.regionVersion;
-  /* (non-Javadoc)
-   * @see org.apache.geode.internal.cache.DistributedCacheOperation#getLocalFilterRouting(org.apache.geode.internal.cache.FilterRoutingInfo)
+  /*
+   * (non-Javadoc)
+   * 
+   * @see
+   * org.apache.geode.internal.cache.DistributedCacheOperation#getLocalFilterRouting(org.apache.
+   * geode.internal.cache.FilterRoutingInfo)
-    // fix for bug #47494, CQs destroyed by Distributed GC.  CQs remove
+    // fix for bug #47494, CQs destroyed by Distributed GC. CQs remove
-  public static class TombstoneMessage extends CacheOperationMessage implements SerializationVersions {
-    //    protected long regionVersion;
+  public static class TombstoneMessage extends CacheOperationMessage
+      implements SerializationVersions {
+    // protected long regionVersion;
-    
+
-    public TombstoneMessage() {
-    }
+    public TombstoneMessage() {}
-    protected InternalCacheEvent createEvent(DistributedRegion rgn)
-            throws EntryNotFoundException {
+    protected InternalCacheEvent createEvent(DistributedRegion rgn) throws EntryNotFoundException {
-      RegionEventImpl event = new RegionEventImpl(rgn, getOperation(),
-              this.callbackArg, true /* originRemote */, getSender());
+      RegionEventImpl event = new RegionEventImpl(rgn, getOperation(), this.callbackArg,
+          true /* originRemote */, getSender());
-            throws EntryNotFoundException {
+        throws EntryNotFoundException {
-    public void fromData(DataInput in) throws IOException,
-            ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      //      this.regionVersion = in.readLong();
+      // this.regionVersion = in.readLong();
-      this.eventID = (EventID)DataSerializer.readObject(in);
+      this.eventID = (EventID) DataSerializer.readObject(in);
-    
+
-      //      out.writeLong(this.regionVersion);
+      // out.writeLong(this.regionVersion);

