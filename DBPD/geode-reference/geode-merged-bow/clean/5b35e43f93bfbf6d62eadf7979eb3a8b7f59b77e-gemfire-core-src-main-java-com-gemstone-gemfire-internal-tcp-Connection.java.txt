Removing TCPConduit's Stub ID class

This removes the Stub identifier class from TCPConduit.  This simplifies the
code since the DistributedMember IDs are propagated to all of the methods
that require identifiers and these IDs have all of the information Stubs
had.

The MembershipManager is also simplified since it doesn't have to keep
complicated mappings between Stubs and DistributedMembers.

+import com.gemstone.gemfire.distributed.DistributedMember;
-import com.gemstone.gemfire.internal.SocketCloser;
-  /** remoteId identifies the remote conduit's listener.  It does NOT
-     identify the "port" that this connection's socket is attached
-     to, which is a different thing altogether */
-  Stub remoteId;
-
-              needToClose = !owner.getConduit().getMembershipManager().addSurpriseMember(this.remoteAddr, this.remoteId);
+              needToClose = !owner.getConduit().getMembershipManager().addSurpriseMember(this.remoteAddr);
-    // note: remoteId may be null if this is a receiver that hasn't finished its handshake
+    // note: remoteAddr may be null if this is a receiver that hasn't finished its handshake
-                                           final Stub key,
-                                           final InternalDistributedMember remoteAddr,
+                                           final DistributedMember remoteAddr,
-          InternalDistributedMember m = mgr.getMemberForStub(key, true);
-          if (m == null) {
-            throw new IOException("Member for stub " + key + " left the group");
+          if (!mgr.memberExists(remoteAddr) || mgr.isShunned(remoteAddr) || mgr.shutdownInProgress()) {
+            throw new IOException("Member " + remoteAddr + " left the system");
-            throw new IOException("Cannot form connection to alert listener " + key);
+            throw new IOException("Cannot form connection to alert listener " + remoteAddr);
-          InternalDistributedMember m = mgr.getMemberForStub(key, true);
-          if (m == null) {
-            throw new IOException(LocalizedStrings.Connection_MEMBER_FOR_STUB_0_LEFT_THE_GROUP.toLocalizedString(key));
+          if (giveUpOnMember(mgr, remoteAddr)) {
+            throw new IOException(LocalizedStrings.Connection_MEMBER_LEFT_THE_GROUP.toLocalizedString(remoteAddr));
-            logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_ATTEMPTING_RECONNECT_TO_PEER__0, m));
+            logger.warn(LocalizedMessage.create(LocalizedStrings.Connection_CONNECTION_ATTEMPTING_RECONNECT_TO_PEER__0, remoteAddr));
-          conn = new Connection(mgr, t, preserveOrder, key, remoteAddr, sharedResource);
+          conn = new Connection(mgr, t, preserveOrder, remoteAddr, sharedResource);
-          InternalDistributedMember m = mgr.getMemberForStub(key, true);
-          if (m == null) {
+          if (giveUpOnMember(mgr, remoteAddr)) {
-                new Object[] {sharedResource, preserveOrder, m, ioe}));
+                new Object[] {sharedResource, preserveOrder, remoteAddr, ioe}));
-              InternalDistributedMember m = mgr.getMemberForStub(key, true);
-              if (m == null) {
-                throw new IOException(LocalizedStrings.Connection_MEMBER_FOR_STUB_0_LEFT_THE_GROUP.toLocalizedString(key));
+              if (giveUpOnMember(mgr, remoteAddr)) {
+                throw new IOException(LocalizedStrings.Connection_MEMBER_LEFT_THE_GROUP.toLocalizedString(remoteAddr));
-            InternalDistributedMember m = mgr.getMemberForStub(key, true);
-            if (m == null) {
+            if (giveUpOnMember(mgr, remoteAddr)) {
-                new Object[] {sharedResource, preserveOrder, m,e}));
+                new Object[] {sharedResource, preserveOrder, remoteAddr ,e}));
-            InternalDistributedMember m = mgr.getMemberForStub(key, true);
-            if (m == null) {
+            if (giveUpOnMember(mgr, remoteAddr)) {
-                new Object[] {sharedResource, preserveOrder, m,e}));
+                new Object[] {sharedResource, preserveOrder, remoteAddr ,e}));
-          .toLocalizedString(mgr.getMemberForStub(key, true)));
+          .toLocalizedString(remoteAddr));
+  
+  private static boolean giveUpOnMember(MembershipManager mgr, DistributedMember remoteAddr) {
+    return !mgr.memberExists(remoteAddr) || mgr.isShunned(remoteAddr) || mgr.shutdownInProgress();
+  }
-  private void setRemoteAddr(InternalDistributedMember m, Stub stub) {
+  private void setRemoteAddr(DistributedMember m) {
-    this.remoteId = stub;
-    mgr.addSurpriseMember(m, stub);
+    mgr.addSurpriseMember(m);
-                     Stub key,
-                     InternalDistributedMember remoteAddr,
+                     DistributedMember remoteID,
+    InternalDistributedMember remoteAddr = (InternalDistributedMember)remoteID;
-    setRemoteAddr(remoteAddr, key);
+    setRemoteAddr(remoteAddr);
-    InetSocketAddress addr = new InetSocketAddress(remoteId.getInetAddress(), remoteId.getPort());
+    InetSocketAddress addr = new InetSocketAddress(remoteAddr.getInetAddress(), remoteAddr.getDirectChannelPort());
-        //  .createSocket(remoteId.getInetAddress(), remoteId.getPort());
+        //  .createSocket(remoteAddr.getInetAddress(), remoteAddr.getPort());
-        this.socket = SocketCreator.getDefaultInstance().connectForServer( remoteId.getInetAddress(), remoteId.getPort(), socketBufferSize );
+        this.socket = SocketCreator.getDefaultInstance().connectForServer( remoteAddr.getInetAddress(), remoteAddr.getDirectChannelPort(), socketBufferSize );
-        //socket = new Socket(remoteId.getInetAddress(), remoteId.getPort());
+        //socket = new Socket(remoteAddr.getInetAddress(), remoteAddr.getPort());
-        this.owner.owner.getLocalId().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE ||
-        this.owner.owner.getLocalId().getVmKind() == DistributionManager.LOCATOR_DM_TYPE) {
+        this.owner.owner.getLocalAddr().getVmKind() == DistributionManager.ADMIN_ONLY_DM_TYPE ||
+        this.owner.owner.getLocalAddr().getVmKind() == DistributionManager.LOCATOR_DM_TYPE) {
-                this.owner.removeEndpoint(this.remoteId, reason);
+                this.owner.removeEndpoint(this.remoteAddr, reason);
-            this.owner.removeSharedConnection(reason, this.remoteId, this.preserveOrder, this);
+            this.owner.removeSharedConnection(reason, this.remoteAddr, this.preserveOrder, this);
-          this.owner.removeThreadConnection(this.remoteId, this);
+          this.owner.removeThreadConnection(this.remoteAddr, this);
-          this.owner.removeSharedConnection(reason, this.remoteId, this.preserveOrder, this);
+          this.owner.removeSharedConnection(reason, this.remoteAddr, this.preserveOrder, this);
-          this.owner.removeThreadConnection(this.remoteId, this);
+          this.owner.removeThreadConnection(this.remoteAddr, this);
-        logger.debug("Stopping {} for {}", p2pReaderName(), remoteId);
+        logger.debug("Stopping {} for {}", p2pReaderName(), remoteAddr);
-              Stub stub = new Stub(remote.getInetAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());
-              setRemoteAddr(remote, stub);
+              setRemoteAddr(remote);
-                logger.debug("{} remoteId is {} {}", p2pReaderName(), this.remoteId,
+                logger.debug("{} remoteAddr is {} {}", p2pReaderName(), this.remoteAddr,
-      throw new ConnectionException(LocalizedStrings.Connection_NOT_CONNECTED_TO_0.toLocalizedString(this.remoteId));
+      throw new ConnectionException(LocalizedStrings.Connection_NOT_CONNECTED_TO_0.toLocalizedString(this.remoteAddr));
-          throw new ConnectionException(LocalizedStrings.Connection_FORCED_DISCONNECT_SENT_TO_0.toLocalizedString(this.remoteId));
+          throw new ConnectionException(LocalizedStrings.Connection_FORCED_DISCONNECT_SENT_TO_0.toLocalizedString(this.remoteAddr));
-      this.owner.removeEndpoint(this.remoteId, LocalizedStrings.Connection_NO_DISTRIBUTION_MANAGER.toLocalizedString());
+      this.owner.removeEndpoint(this.remoteAddr, LocalizedStrings.Connection_NO_DISTRIBUTION_MANAGER.toLocalizedString());
-    this.owner.removeEndpoint(this.remoteId, 
+    this.owner.removeEndpoint(this.remoteAddr, 
-        logger.debug("runNioPusher terminated id={} from {}/{}", conduitIdStr, remoteId, remoteAddr);
+        logger.debug("runNioPusher terminated id={} from {}/{}", conduitIdStr, remoteAddr, remoteAddr);
-                Stub stub = new Stub(remote.getInetAddress()/*fix for bug 33615*/, remote.getDirectChannelPort(), remote.getVmViewId());
-                setRemoteAddr(remote, stub);
+                setRemoteAddr(remote);
-                logger.debug("P2P handshake remoteId is {}{}", this.remoteId,
+                logger.debug("P2P handshake remoteAddr is {}{}", this.remoteAddr,
-  /** returns the ConnectionKey stub representing the other side of
-      this connection (host:port) */
-  public final Stub getRemoteId() {
-    return remoteId;
-  }
-

MOV26 MOV31 UPD40 UPD83 UPD83 INS39 INS42 INS44 INS44 UPD43 INS43 INS42 INS43 INS42 UPD43 UPD42 UPD43 UPD42 INS60 UPD42 UPD42 MOV42 INS42 INS27 UPD42 UPD42 MOV43 INS59 MOV43 INS38 INS32 INS32 INS42 INS11 INS32 INS42 INS42 INS42 INS42 INS42 MOV43 INS42 MOV43 MOV27 MOV8 INS8 UPD42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS27 INS25 UPD42 MOV42 MOV32 INS27 UPD40 MOV22 MOV8 INS25 MOV22 MOV8 MOV25 UPD42 INS25 INS25 INS32 INS40 MOV38 MOV8 UPD42 UPD42 INS27 MOV8 INS32 MOV8 INS32 INS42 UPD42 MOV38 INS8 INS38 INS32 INS32 INS42 MOV42 UPD42 MOV42 INS32 UPD42 UPD42 UPD42 MOV22 INS42 INS25 MOV22 UPD42 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 MOV38 INS8 MOV22 UPD42 INS52 UPD42 MOV22 INS42 INS42 INS42 MOV43 MOV43 INS25 INS32 INS32 INS25 UPD42 UPD42 UPD42 UPD45 UPD42 UPD45 UPD42 UPD40 UPD42 UPD42 INS32 MOV8 INS42 INS42 INS42 INS42 INS42 INS42 MOV22 MOV8 UPD42 INS42 MOV42 UPD42 MOV42 MOV5 MOV5 UPD42 UPD42 UPD42 INS42 UPD45 UPD45 UPD42 UPD40 UPD42 UPD42 UPD42 UPD42 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL43 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL9 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL9 DEL32 DEL66 DEL66 DEL65 DEL29 DEL43 DEL42 DEL42 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL40 DEL27 DEL27 DEL52 DEL25 DEL42 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42