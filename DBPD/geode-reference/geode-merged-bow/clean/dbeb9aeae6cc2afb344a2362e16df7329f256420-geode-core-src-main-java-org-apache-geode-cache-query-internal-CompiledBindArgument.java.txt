Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    public CompiledBindArgument(int index) {
-      this.index = index;
-    }
+  public CompiledBindArgument(int index) {
+    this.index = index;
+  }
-  public void generateCanonicalizedExpression(StringBuffer clauseBuffer,
-      ExecutionContext context) throws AmbiguousNameException,
-      TypeMismatchException, NameResolutionException {
+  public void generateCanonicalizedExpression(StringBuffer clauseBuffer, ExecutionContext context)
+      throws AmbiguousNameException, TypeMismatchException, NameResolutionException {
-    Object bindArg;
-    if (context.isBindArgsSet() && (bindArg = context.getBindArgument(this.index)) instanceof Region ) {
-      clauseBuffer.insert(0, ((Region) bindArg).getFullPath());
-    }else {
-      clauseBuffer.insert(0, "$" + this.index);      
+    // When compiling a new query, a context is created where there are no bind arguments at this
+    // point
+    if (context.isBindArgsSet()) {
+      Object bindArgumentValue = context.getBindArgument(this.index);
+      if (bindArgumentValue instanceof Region) {
+        clauseBuffer.insert(0, ((Region) bindArgumentValue).getFullPath());
+      } else if (bindArgumentValue instanceof String) {
+        clauseBuffer.insert(0, '\'').insert(0, bindArgumentValue).insert(0, '\'');
+      } else {
+        super.generateCanonicalizedExpression(clauseBuffer, context);
+      }
+    }
+
+  }
+
+  public Object evaluate(ExecutionContext context) {
+    if (!context.isBindArgsSet()) {
+      return null;
+    }
+    Object obj = context.getBindArgument(this.index);
+    // check for BucketRegion substitution
+    if (obj instanceof Region) {
+      PartitionedRegion pr = context.getPartitionedRegion();
+      if (pr != null) {
+        if (pr.getFullPath().equals(((Region) obj).getFullPath())) {
+          obj = context.getBucketRegion();
+        }
+      }
+    }
+    return obj;
+  }
+
+  /*
+   * provided just the bind parameters, we can evaluate if the expected parameter is all that is
+   * needed. For example a bound limit variable
+   */
+  public Object evaluate(Object[] bindArguments) {
+    if (index > bindArguments.length) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.ExecutionContext_TOO_FEW_QUERY_PARAMETERS.toLocalizedString());
+    }
+    return bindArguments[index - 1];
+  }
+
+  @Override
+  public void getRegionsInQuery(Set regionsInQuery, Object[] parameters) {
+    Object v = parameters[this.index - 1];
+    if (v instanceof Region) {
+      regionsInQuery.add(((Region) v).getFullPath());
-    
-    public Object evaluate(ExecutionContext context) {
-      if(!context.isBindArgsSet()) {
-        return null;
-      }
-      Object obj = context.getBindArgument(this.index);
-      // check for BucketRegion substitution
-      if (obj instanceof Region) {
-        PartitionedRegion pr = context.getPartitionedRegion();
-        if (pr != null) {
-          if (pr.getFullPath().equals(((Region)obj).getFullPath())) {
-            obj = context.getBucketRegion();
-          }
-        }
-      }
-      return obj;
-    }
-    
-    /*
-     * provided just the bind parameters, we can evaluate if the expected
-     * parameter is all that is needed.  For example a bound limit variable
-     */
-    public Object evaluate(Object[] bindArguments) {
-        if (index > bindArguments.length) {
-            throw new IllegalArgumentException(LocalizedStrings.ExecutionContext_TOO_FEW_QUERY_PARAMETERS.toLocalizedString());
-        }
-        return bindArguments[index - 1];
-    }
-    
-    @Override
-    public void getRegionsInQuery(Set regionsInQuery, Object[] parameters) {
-      Object v = parameters[this.index - 1];
-      if (v instanceof Region) {
-        regionsInQuery.add(((Region)v).getFullPath());
-      }
-    }
-    
-    public PdxString getSavedPdxString(ExecutionContext context){
-      return context.getSavedPdxString(this.index);
-    }
+
+  public PdxString getSavedPdxString(ExecutionContext context) {
+    return context.getSavedPdxString(this.index);
+  }

MOV32 INS8 INS60 INS25 MOV43 INS59 INS62 MOV8 INS25 INS42 MOV32 INS42 MOV43 INS62 MOV8 INS8 INS42 INS43 INS21 INS42 INS32 INS48 INS32 INS42 INS34 INS13 INS42 INS42 INS42 INS32 INS42 INS34 INS42 UPD42 MOV42 MOV42 MOV34 INS13 DEL42 DEL59 DEL60 DEL45 DEL52 DEL42 DEL22 DEL27 DEL32 DEL42 DEL7 DEL36 DEL62 DEL27