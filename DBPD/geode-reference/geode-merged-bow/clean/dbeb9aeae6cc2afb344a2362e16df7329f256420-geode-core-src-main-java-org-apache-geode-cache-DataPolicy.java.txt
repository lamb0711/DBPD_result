Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
- * Enumerated type for region data policy.
- * The data policy specifies how this local cache will handle the data for a region.
+ * Enumerated type for region data policy. The data policy specifies how this local cache will
+ * handle the data for a region.
- * <li><code>EMPTY</code> causes data to never be stored in local memory. The region will always appear empty. It can be used to for zero footprint producers that only want to distribute their data to others and for zero footprint consumers that only want to see events.
- * <li><code>NORMAL</code> causes data that this region is interested in to be stored in local memory. It allows the contents in this cache to differ from other caches.
- * <li><code>PARTITION</code> causes data that this region holds to be spread across processes.  The amount of data held in this cache is configured in {@link PartitionAttributes} with a {@link PartitionAttributesFactory}.
- * <li><code>PERSISTENT_PARTITION</code> in addition to <code>PARTITION</code> also causes data to be stored to disk. The region initialization uses the data stored on disk.
- * <li><code>REPLICATE</code> causes data that this region is interested in to be stored in local memory. A distributed region will be initialized with the data from other caches. On distributed region operations that would cause the contents to differ with other caches are not allowed. This policy is allowed on local scope region but it behaves the same as <code>NORMAL</code>.
- * <li><code>PERSISTENT_REPLICATE</code> in addition to <code>REPLICATE</code> also causes data to be stored to disk. The region initialization uses the data stored on disk. Note that the persistence applies to both local scope and distributed scope.
+ * <li><code>EMPTY</code> causes data to never be stored in local memory. The region will always
+ * appear empty. It can be used to for zero footprint producers that only want to distribute their
+ * data to others and for zero footprint consumers that only want to see events.
+ * <li><code>NORMAL</code> causes data that this region is interested in to be stored in local
+ * memory. It allows the contents in this cache to differ from other caches.
+ * <li><code>PARTITION</code> causes data that this region holds to be spread across processes. The
+ * amount of data held in this cache is configured in {@link PartitionAttributes} with a
+ * {@link PartitionAttributesFactory}.
+ * <li><code>PERSISTENT_PARTITION</code> in addition to <code>PARTITION</code> also causes data to
+ * be stored to disk. The region initialization uses the data stored on disk.
+ * <li><code>REPLICATE</code> causes data that this region is interested in to be stored in local
+ * memory. A distributed region will be initialized with the data from other caches. On distributed
+ * region operations that would cause the contents to differ with other caches are not allowed. This
+ * policy is allowed on local scope region but it behaves the same as <code>NORMAL</code>.
+ * <li><code>PERSISTENT_REPLICATE</code> in addition to <code>REPLICATE</code> also causes data to
+ * be stored to disk. The region initialization uses the data stored on disk. Note that the
+ * persistence applies to both local scope and distributed scope.
-   * Data is never stored in local memory.
-   * The region will always be empty locally.
-   * It can be used to for zero footprint producers that only want to distribute
-   * their data to others
-   * and for zero footprint consumers that only want to see events.
+   * Data is never stored in local memory. The region will always be empty locally. It can be used
+   * to for zero footprint producers that only want to distribute their data to others and for zero
+   * footprint consumers that only want to see events.
-   * Allows the contents in this cache to differ from other caches.<p>
+   * Allows the contents in this cache to differ from other caches.
+   * <p>
-   * The region will be initialized with the data from other caches and accepts
-   * any new entries created in other caches.<p>
-   * Operations that would cause the contents to differ with other caches
-   * are not allowed.<p>
+   * The region will be initialized with the data from other caches and accepts any new entries
+   * created in other caches.
+   * <p>
+   * Operations that would cause the contents to differ with other caches are not allowed.
+   * <p>
-   * In addition to <code>REPLICATE</code> also causes data to be stored to
-   * disk. The region initialization may use the data stored on disk.
+   * In addition to <code>REPLICATE</code> also causes data to be stored to disk. The region
+   * initialization may use the data stored on disk.
-  
-  
+
+
-   * Data in this region may be spread across a number of processes.  This is
-   * further configured with {@link PartitionAttributes partitioning attributes}
+   * Data in this region may be spread across a number of processes. This is further configured with
+   * {@link PartitionAttributes partitioning attributes}
-  * In addition to <code>NORMAL</code>, contents inside of this cache are
-  * (partially) initialized with data from other caches, if available.
-  */
+   * In addition to <code>NORMAL</code>, contents inside of this cache are (partially) initialized
+   * with data from other caches, if available.
+   */
-   * In addition to <code>PARTITION</code> also causes data to be stored to
-   * disk. The region initialization may use the data stored on disk.
+   * In addition to <code>PARTITION</code> also causes data to be stored to disk. The region
+   * initialization may use the data stored on disk.
+   * 
-  
-   /**
+
+  /**
-    
+
-    
+
-    return VALUES[ordinal];  // Canonicalize
+    return VALUES[ordinal]; // Canonicalize
-    
-    
+
+
-      throw new IllegalArgumentException(LocalizedStrings.DataPolicy_ONLY_0_DATAPOLICIES_MAY_BE_DEFINED.toLocalizedString(Integer.valueOf(VALUES.length+1)));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DataPolicy_ONLY_0_DATAPOLICIES_MAY_BE_DEFINED
+              .toLocalizedString(Integer.valueOf(VALUES.length + 1)));
-      throw new IllegalArgumentException(LocalizedStrings.DataPolicy_ORDINAL_0_IS_ALREADY_DEFINED_BY_1.toLocalizedString(new Object[] {Integer.valueOf(ordinal), VALUES[ordinal]}));
+      throw new IllegalArgumentException(
+          LocalizedStrings.DataPolicy_ORDINAL_0_IS_ALREADY_DEFINED_BY_1
+              .toLocalizedString(new Object[] {Integer.valueOf(ordinal), VALUES[ordinal]}));
-    this.ordinal = (byte)(ordinal & 0xff);
+    this.ordinal = (byte) (ordinal & 0xff);
-    
+
-    
-    
-  /** Return true if regions with this policy store data locally.<p>
-   * Although DataPolicy {@link #PARTITION} will return true to this query,
-   * it is possible to turn off local storage with
-   * {@link PartitionAttributesFactory#setLocalMaxMemory(int)} by setting
-   * localMaxMemory to zero. 
+
+
+  /**
+   * Return true if regions with this policy store data locally.
+   * <p>
+   * Although DataPolicy {@link #PARTITION} will return true to this query, it is possible to turn
+   * off local storage with {@link PartitionAttributesFactory#setLocalMaxMemory(int)} by setting
+   * localMaxMemory to zero.
+   * 
-  /** Return whether this policy does replication.
+  /**
+   * Return whether this policy does replication.
+   * 
-  
-  /** Return whether this policy does persistence.
+
+  /**
+   * Return whether this policy does persistence.
+   * 
-  /** Return whether this policy does partitioning.
+  /**
+   * Return whether this policy does partitioning.
+   * 
-  /** Return whether this policy does preloaded.
+  /**
+   * Return whether this policy does preloaded.
+   * 
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
+
+   * 
-  
+
+   * 
-  
-  /** Returns a string representation for this data policy.
-     * @return the name of this data policy.
-     */
+
+  /**
+   * Returns a string representation for this data policy.
+   * 
+   * @return the name of this data policy.
+   */

UPD66 UPD66 UPD66 INS66 INS66 UPD66 INS66 UPD66 INS66 UPD66 UPD66 INS66 INS66 INS66 UPD66 INS66 UPD66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66