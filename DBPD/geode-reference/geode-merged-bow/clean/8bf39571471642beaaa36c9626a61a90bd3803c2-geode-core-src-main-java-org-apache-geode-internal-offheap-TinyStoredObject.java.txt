Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Used to represent stored objects that can be stored
- * in the address field.
- * The RegionEntry for an off-heap region uses a primitive
- * long to store the off-heap address of the entry's value.
- * If the value can be encoded as a long (i.e. its serialized
- * representation will fit in the 8 bytes of a long without looking
- * like an actual off-heap address) then these tiny values on an
- * off-heap regions are actually stored on the heap in the primitive
- * long field. When these values are "objectified" they will be an
- * instance of this class.
- * Instances of this class have a very short lifetime.
+ * Used to represent stored objects that can be stored in the address field. The RegionEntry for an
+ * off-heap region uses a primitive long to store the off-heap address of the entry's value. If the
+ * value can be encoded as a long (i.e. its serialized representation will fit in the 8 bytes of a
+ * long without looking like an actual off-heap address) then these tiny values on an off-heap
+ * regions are actually stored on the heap in the primitive long field. When these values are
+ * "objectified" they will be an instance of this class. Instances of this class have a very short
+ * lifetime.
-  
+
-  
+
-  
+
-    return (int)(value ^ (value >>> 32));
+    return (int) (value ^ (value >>> 32));
-        byte[] bytes = OffHeapRegionEntryHelper.decodeAddressToRawBytes(getAddress());
-        long time = r.getCachePerfStats().startDecompression();
-        bytes = r.getCompressor().decompress(bytes);
-        r.getCachePerfStats().endDecompression(time);
-        return bytes;
+      byte[] bytes = OffHeapRegionEntryHelper.decodeAddressToRawBytes(getAddress());
+      long time = r.getCachePerfStats().startDecompression();
+      bytes = r.getCompressor().decompress(bytes);
+      r.getCachePerfStats().endDecompression(time);
+      return bytes;
-   * If we contain a byte[] return it.
-   * Otherwise return the serialize bytes in us in a byte array.
+   * If we contain a byte[] return it. Otherwise return the serialize bytes in us in a byte array.
-  
+
-  public void fillSerializedValue(BytesAndBitsForCompactor wrapper,
-      byte userBits) {
+  public void fillSerializedValue(BytesAndBitsForCompactor wrapper, byte userBits) {
-  
+
-    throw new UnsupportedOperationException("ObjectStoredAsAddress does not support modifying the data bytes");
+    throw new UnsupportedOperationException(
+        "ObjectStoredAsAddress does not support modifying the data bytes");
-    for (int i = offset; i < offset+size; i++) {
+    for (int i = offset; i < offset + size; i++) {
-    throw new UnsupportedOperationException("ObjectStoredAsAddress does not support modifying the data bytes");
+    throw new UnsupportedOperationException(
+        "ObjectStoredAsAddress does not support modifying the data bytes");
-    throw new UnsupportedOperationException("ObjectStoredAsAddress does not support reading at an address");
+    throw new UnsupportedOperationException(
+        "ObjectStoredAsAddress does not support reading at an address");
-}
+}

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66