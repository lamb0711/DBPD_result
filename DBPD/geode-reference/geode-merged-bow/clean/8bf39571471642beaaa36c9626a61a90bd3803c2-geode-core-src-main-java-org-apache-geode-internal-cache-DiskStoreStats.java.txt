Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-//import org.apache.geode.cache.Region;
+// import org.apache.geode.cache.Region;
-  ////////////////////  Statistic "Id" Fields  ////////////////////
+  //////////////////// Statistic "Id" Fields ////////////////////
-    String statDescription =
-      "Statistics about a Region's use of the disk";
+    String statDescription = "Statistics about a Region's use of the disk";
-      "The total number of region entries that have been written to disk. A write is done every time an entry is created on disk or every time its value is modified on disk.";
-    final String writeTimeDesc =
-      "The total amount of time spent writing to disk";
-    final String bytesWrittenDesc =
-      "The total number of bytes that have been written to disk";
+        "The total number of region entries that have been written to disk. A write is done every time an entry is created on disk or every time its value is modified on disk.";
+    final String writeTimeDesc = "The total amount of time spent writing to disk";
+    final String bytesWrittenDesc = "The total number of bytes that have been written to disk";
-      "The total number of times the an entry has been flushed from the async queue.";
-    final String flushTimeDesc =
-      "The total amount of time spent doing an async queue flush.";
+        "The total number of times the an entry has been flushed from the async queue.";
+    final String flushTimeDesc = "The total amount of time spent doing an async queue flush.";
-      "The total number of bytes written to disk by async queue flushes.";
-    final String readsDesc =
-      "The total number of region entries that have been read from disk";
-    final String readTimeDesc =
-      "The total amount of time spent reading from disk";
-    final String bytesReadDesc =
-      "The total number of bytes that have been read from disk";
-    final String recoveryTimeDesc =
-      "The total amount of time spent doing a recovery";
+        "The total number of bytes written to disk by async queue flushes.";
+    final String readsDesc = "The total number of region entries that have been read from disk";
+    final String readTimeDesc = "The total amount of time spent reading from disk";
+    final String bytesReadDesc = "The total number of bytes that have been read from disk";
+    final String recoveryTimeDesc = "The total amount of time spent doing a recovery";
-      "The total number of bytes that have been read from disk during a recovery";
-    final String oplogRecoveriesDesc =
-      "The total number of oplogs recovered";
-    final String oplogRecoveryTimeDesc =
-      "The total amount of time spent doing an oplog recovery";
+        "The total number of bytes that have been read from disk during a recovery";
+    final String oplogRecoveriesDesc = "The total number of oplogs recovered";
+    final String oplogRecoveryTimeDesc = "The total amount of time spent doing an oplog recovery";
-      "The total number of bytes that have been read from oplogs during a recovery";
+        "The total number of bytes that have been read from oplogs during a recovery";
-      "The total number of region entries that have been removed from disk";
-    final String removeTimeDesc =
-      "The total amount of time spent removing from disk";
+        "The total number of region entries that have been removed from disk";
+    final String removeTimeDesc = "The total amount of time spent removing from disk";
-      "The current number of entries in the async queue waiting to be flushed to disk";
+        "The current number of entries in the async queue waiting to be flushed to disk";
-      "The current number of backups in progress on this disk store";
+        "The current number of backups in progress on this disk store";
-      "The number of backups of this disk store that have been taking while this VM was alive";
+        "The number of backups of this disk store that have been taking while this VM was alive";
-       new StatisticDescriptor[] {
-         f.createLongCounter("writes", writesDesc, "ops"),
-         f.createLongCounter("writeTime", writeTimeDesc, "nanoseconds"),
-         f.createLongCounter("writtenBytes", bytesWrittenDesc, "bytes"),
-         f.createLongCounter("flushes", flushesDesc, "ops"),
-         f.createLongCounter("flushTime", flushTimeDesc, "nanoseconds"),
-         f.createLongCounter("flushedBytes", bytesFlushedDesc, "bytes"),
-         f.createLongCounter("reads", readsDesc, "ops"),
-         f.createLongCounter("readTime", readTimeDesc, "nanoseconds"),
-         f.createLongCounter("readBytes", bytesReadDesc, "bytes"),
-         f.createIntGauge("recoveriesInProgress", "current number of persistent regions being recovered from disk", "ops"),
-         f.createLongCounter("recoveryTime", recoveryTimeDesc, "nanoseconds"),
-         f.createLongCounter("recoveredBytes", recoveredBytesDesc, "bytes"),
-         f.createLongCounter("recoveredEntryCreates", "The total number of entry create records processed while recovering oplog data.", "ops"),
-         f.createLongCounter("recoveredEntryUpdates", "The total number of entry update records processed while recovering oplog data.", "ops"),
-         f.createLongCounter("recoveredEntryDestroys", "The total number of entry destroy records processed while recovering oplog data.", "ops"),
-         f.createLongCounter("recoveredValuesSkippedDueToLRU", "The total number of entry values that did not need to be recovered due to the LRU.", "values"),
+        new StatisticDescriptor[] {f.createLongCounter("writes", writesDesc, "ops"),
+            f.createLongCounter("writeTime", writeTimeDesc, "nanoseconds"),
+            f.createLongCounter("writtenBytes", bytesWrittenDesc, "bytes"),
+            f.createLongCounter("flushes", flushesDesc, "ops"),
+            f.createLongCounter("flushTime", flushTimeDesc, "nanoseconds"),
+            f.createLongCounter("flushedBytes", bytesFlushedDesc, "bytes"),
+            f.createLongCounter("reads", readsDesc, "ops"),
+            f.createLongCounter("readTime", readTimeDesc, "nanoseconds"),
+            f.createLongCounter("readBytes", bytesReadDesc, "bytes"),
+            f.createIntGauge("recoveriesInProgress",
+                "current number of persistent regions being recovered from disk", "ops"),
+            f.createLongCounter("recoveryTime", recoveryTimeDesc, "nanoseconds"),
+            f.createLongCounter("recoveredBytes", recoveredBytesDesc, "bytes"),
+            f.createLongCounter("recoveredEntryCreates",
+                "The total number of entry create records processed while recovering oplog data.",
+                "ops"),
+            f.createLongCounter("recoveredEntryUpdates",
+                "The total number of entry update records processed while recovering oplog data.",
+                "ops"),
+            f.createLongCounter("recoveredEntryDestroys",
+                "The total number of entry destroy records processed while recovering oplog data.",
+                "ops"),
+            f.createLongCounter("recoveredValuesSkippedDueToLRU",
+                "The total number of entry values that did not need to be recovered due to the LRU.",
+                "values"),
-         f.createLongCounter("recoveryRecordsSkipped", "The total number of oplog records skipped during recovery.", "ops"),
+            f.createLongCounter("recoveryRecordsSkipped",
+                "The total number of oplog records skipped during recovery.", "ops"),
-         f.createIntCounter("oplogRecoveries", oplogRecoveriesDesc, "ops"),
-         f.createLongCounter("oplogRecoveryTime", oplogRecoveryTimeDesc, "nanoseconds"),
-         f.createLongCounter("oplogRecoveredBytes", oplogRecoveredBytesDesc, "bytes"),
-         f.createLongCounter("removes", removesDesc, "ops"),
-         f.createLongCounter("removeTime", removeTimeDesc, "nanoseconds"),
-         f.createIntGauge("queueSize", queueSizeDesc, "entries"),
-         f.createLongCounter("compactInserts", "Total number of times an oplog compact did a db insert", "inserts"),
-         f.createLongCounter("compactInsertTime", "Total amount of time, in nanoseconds, spent doing inserts during a compact", "nanoseconds"),
-         f.createLongCounter("compactUpdates", "Total number of times an oplog compact did an update", "updates"),
-         f.createLongCounter("compactUpdateTime", "Total amount of time, in nanoseconds, spent doing updates during a compact", "nanoseconds"),
-         f.createLongCounter("compactDeletes", "Total number of times an oplog compact did a delete", "deletes"),
-         f.createLongCounter("compactDeleteTime", "Total amount of time, in nanoseconds, spent doing deletes during a compact", "nanoseconds"),
-         f.createIntGauge("compactsInProgress", "current number of oplog compacts that are in progress", "compacts"),
-         f.createIntGauge("writesInProgress", "current number of oplog writes that are in progress", "writes"),
-         f.createIntGauge("flushesInProgress", "current number of oplog flushes that are in progress", "flushes"),
-         f.createLongCounter("compactTime", "Total amount of time, in nanoseconds, spent compacting oplogs", "nanoseconds"),
-         f.createIntCounter("compacts", "Total number of completed oplog compacts", "compacts"),
-         f.createIntGauge("openOplogs", "Current number of oplogs this disk store has open", "oplogs"),
-         f.createIntGauge("compactableOplogs", "Current number of oplogs ready to be compacted", "oplogs"),
-         f.createIntGauge("inactiveOplogs", "Current number of oplogs that are no longer being written but are not ready ready to compact", "oplogs"),
-         f.createLongCounter("oplogReads", "Total number of oplog reads", "reads"),
-         f.createLongCounter("oplogSeeks", "Total number of oplog seeks", "seeks"),
-         f.createIntGauge("uncreatedRecoveredRegions", "The current number of regions that have been recovered but have not yet been created.", "regions"),
-         f.createIntGauge("backupsInProgress", backupsInProgressDesc, "backups"),
-         f.createIntCounter("backupsCompleted", backupsCompletedDesc, "backups"),
-       });
+            f.createIntCounter("oplogRecoveries", oplogRecoveriesDesc, "ops"),
+            f.createLongCounter("oplogRecoveryTime", oplogRecoveryTimeDesc, "nanoseconds"),
+            f.createLongCounter("oplogRecoveredBytes", oplogRecoveredBytesDesc, "bytes"),
+            f.createLongCounter("removes", removesDesc, "ops"),
+            f.createLongCounter("removeTime", removeTimeDesc, "nanoseconds"),
+            f.createIntGauge("queueSize", queueSizeDesc, "entries"),
+            f.createLongCounter("compactInserts",
+                "Total number of times an oplog compact did a db insert", "inserts"),
+            f.createLongCounter("compactInsertTime",
+                "Total amount of time, in nanoseconds, spent doing inserts during a compact",
+                "nanoseconds"),
+            f.createLongCounter("compactUpdates",
+                "Total number of times an oplog compact did an update", "updates"),
+            f.createLongCounter("compactUpdateTime",
+                "Total amount of time, in nanoseconds, spent doing updates during a compact",
+                "nanoseconds"),
+            f.createLongCounter("compactDeletes",
+                "Total number of times an oplog compact did a delete", "deletes"),
+            f.createLongCounter("compactDeleteTime",
+                "Total amount of time, in nanoseconds, spent doing deletes during a compact",
+                "nanoseconds"),
+            f.createIntGauge("compactsInProgress",
+                "current number of oplog compacts that are in progress", "compacts"),
+            f.createIntGauge("writesInProgress",
+                "current number of oplog writes that are in progress", "writes"),
+            f.createIntGauge("flushesInProgress",
+                "current number of oplog flushes that are in progress", "flushes"),
+            f.createLongCounter("compactTime",
+                "Total amount of time, in nanoseconds, spent compacting oplogs", "nanoseconds"),
+            f.createIntCounter("compacts", "Total number of completed oplog compacts", "compacts"),
+            f.createIntGauge("openOplogs", "Current number of oplogs this disk store has open",
+                "oplogs"),
+            f.createIntGauge("compactableOplogs", "Current number of oplogs ready to be compacted",
+                "oplogs"),
+            f.createIntGauge("inactiveOplogs",
+                "Current number of oplogs that are no longer being written but are not ready ready to compact",
+                "oplogs"),
+            f.createLongCounter("oplogReads", "Total number of oplog reads", "reads"),
+            f.createLongCounter("oplogSeeks", "Total number of oplog seeks", "seeks"),
+            f.createIntGauge("uncreatedRecoveredRegions",
+                "The current number of regions that have been recovered but have not yet been created.",
+                "regions"),
+            f.createIntGauge("backupsInProgress", backupsInProgressDesc, "backups"),
+            f.createIntCounter("backupsCompleted", backupsCompletedDesc, "backups"),});
-    backupsCompleted= type.nameToId("backupsCompleted");
+    backupsCompleted = type.nameToId("backupsCompleted");
-  //////////////////////  Instance Fields  //////////////////////
+  ////////////////////// Instance Fields //////////////////////
-  ///////////////////////  Constructors  ///////////////////////
+  /////////////////////// Constructors ///////////////////////
-   * Creates a new <code>DiskStoreStatistics</code> for the given
-   * region. 
+   * Creates a new <code>DiskStoreStatistics</code> for the given region.
-  /////////////////////  Instance Methods  /////////////////////
+  ///////////////////// Instance Methods /////////////////////
-   * Returns the total number of region entries that have been written
-   * to disk.
+   * Returns the total number of region entries that have been written to disk.
-   * Returns the total number of region entries that have been read
-   * from disk.
+   * Returns the total number of region entries that have been read from disk.
-   * Returns the total number of region entries that have been removed
-   * from disk.
+   * Returns the total number of region entries that have been removed from disk.
+
-  
+
+
-   * @param start
-   *        The time at which the write operation started
+   * @param start The time at which the write operation started
-   * @param start
-   *        The time at which the read operation started
-   * @param bytesRead
-   *        The number of bytes that were read
+   * @param start The time at which the read operation started
+   * @param bytesRead The number of bytes that were read
-   * @param start
-   *        The time at which the recovery operation started
-   * @param bytesRead
-   *        The number of bytes that were recovered
+   * @param start The time at which the recovery operation started
+   * @param bytesRead The number of bytes that were recovered
+
+
+
+
+
-   * @param start
-   *        The time at which the read operation started
+   * @param start The time at which the read operation started
+
+
+
+
+
-    this.stats.incLong(compactInsertTimeId, getStatTime()-start);
+    this.stats.incLong(compactInsertTimeId, getStatTime() - start);
+
-    this.stats.incLong(compactUpdateTimeId, getStatTime()-start);
+    this.stats.incLong(compactUpdateTimeId, getStatTime() - start);
+
+
+
+
+
-  
-  public Statistics getStats(){
+
+  public Statistics getStats() {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66