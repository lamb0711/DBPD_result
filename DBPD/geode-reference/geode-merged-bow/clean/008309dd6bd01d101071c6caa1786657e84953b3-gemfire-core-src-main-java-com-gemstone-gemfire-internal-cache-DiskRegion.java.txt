Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.cache.DiskEntry.Helper.ValueWrapper;
-                       String compressorClassName) {
+                       String compressorClassName,  boolean offHeap) {
-                compressorClassName);
+                compressorClassName, offHeap);
-                           Compressor compressor) {
+                           Compressor compressor, boolean offHeap) {
-                                                  compressor);
+                                                  compressor, offHeap);
+  public void incNumOverflowBytesOnDisk(long delta) {
+    getStats().incNumOverflowBytesOnDisk(delta);
+    super.incNumOverflowBytesOnDisk(delta);
+  }
+
+  @Override
-   * @param isSerializedObject
-   *                Do the bytes in <code>value</code> contain a serialized
-   *                object (or an actually <code>byte</code> array)?
-  final void put(DiskEntry entry, LocalRegion region, byte[] value, boolean isSerializedObject, boolean async)
+  final void put(DiskEntry entry, LocalRegion region, ValueWrapper value, boolean async)
-    getDiskStore().put(region, entry, value, isSerializedObject, async);
+    getDiskStore().put(region, entry, value, async);
+      long curOnDiskBytes = owner.getNumOverflowBytesOnDisk()*-1;
+      incNumOverflowBytesOnDisk(curOnDiskBytes);
+      owner.incNumOverflowBytesOnDisk(curOnDiskBytes);
+
+  @Override
+  public void close() {
+    // nothing needed
+  }

INS26 INS40 INS31 INS31 INS44 INS44 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS39 INS42 INS39 INS42 INS42 INS39 INS42 INS21 INS21 INS43 INS42 INS32 INS48 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS39 INS59 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS32 INS38 INS42 INS42 INS34 DEL42 DEL66 DEL66 DEL65 DEL39 DEL85 DEL5 DEL39 DEL42 DEL44 DEL42