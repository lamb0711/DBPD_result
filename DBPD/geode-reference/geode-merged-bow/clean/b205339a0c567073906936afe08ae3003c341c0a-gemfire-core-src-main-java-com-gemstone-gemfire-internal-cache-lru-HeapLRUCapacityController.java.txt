Merge branch 'feature/GEODE-8' into develop

+import com.gemstone.gemfire.internal.cache.AbstractRegion;
+import com.gemstone.gemfire.internal.cache.control.InternalResourceManager;
- * {@link Region} based on the percentage of Java VM heap memory that is
- * currently being used. If the percentage of Java VM heap memory in use exceeds
+ * {@link Region} based on the percentage of memory that is
+ * currently being used. If the percentage of memory in use exceeds
+ * For heap regions:
-    final String entryBytesDesc = "The amount of VM heap currently used by regions configured for eviction.";
+    final String entryBytesDesc = "The amount of memory currently used by regions configured for eviction.";
-                f
-                    .createLongCounter("lruEvictions", lruEvictionsDesc,
-                        "entries"),
+                f.createLongCounter("lruEvictions", lruEvictionsDesc, "entries"),
-                f.createLongGauge("lruDestroysLimit", lruDestroysLimitDesc,
-                    "entries"),
-                f.createLongCounter("lruEvaluations", lruEvaluationsDesc,
-                    "entries"),
-                f.createLongCounter("lruGreedyReturns", lruGreedyReturnsDesc,
-                    "entries"), });
+                f.createLongGauge("lruDestroysLimit", lruDestroysLimitDesc, "entries"),
+                f.createLongCounter("lruEvaluations", lruEvaluationsDesc, "entries"),
+                f.createLongCounter("lruGreedyReturns", lruGreedyReturnsDesc, "entries"), });
-        return statType.nameToId("heapPercentage");
+        throw new UnsupportedOperationException("Limit not used with this LRU type");
-
+      
-       * incorrectly estimated in the general case), we use the amount of VM
-       * heap currently in use. If the amount of VM heap current in use
+       * incorrectly estimated in the general case), we use the amount of
+       * memory currently in use. If the amount of memory current in use
-        if (region instanceof BucketRegion) {
-          BucketRegion br = (BucketRegion)region;
-          return ((GemFireCacheImpl)region.getCache()).getHeapEvictor().mustEvict()
-              && br.getSizeForEviction() > 0;
-        }
-        else if (region != null) {
-          return ((GemFireCacheImpl) region.getCache()).getHeapEvictor().mustEvict()
-              && ((LocalRegion) region).getRegionMap().sizeInVM() > 0;
+        final GemFireCacheImpl cache;
+        if (region != null) {
+          cache = (GemFireCacheImpl) region.getRegionService();
-          return GemFireCacheImpl.getInstance().getHeapEvictor().mustEvict();
+          cache = GemFireCacheImpl.getInstance();
+        InternalResourceManager resourceManager = cache.getResourceManager();
+        
+        if (region == null) {
+          return resourceManager.getHeapMonitor().getState().isEviction();
+        }
+        
+        final boolean monitorStateIsEviction;
+        if (!((AbstractRegion) region).getOffHeap()) {
+          monitorStateIsEviction = resourceManager.getHeapMonitor().getState().isEviction();
+        } else {
+          monitorStateIsEviction = resourceManager.getOffHeapMonitor().getState().isEviction();
+        }
+        
+        if (region instanceof BucketRegion) {
+          return monitorStateIsEviction && ((BucketRegion) region).getSizeForEviction() > 0;
+        }
+        
+        return monitorStateIsEviction && ((LocalRegion) region).getRegionMap().sizeInVM() > 0;

INS26 INS26 INS40 INS40 UPD66 UPD66 INS66 UPD45 INS53 INS60 INS25 MOV60 INS25 INS60 INS25 INS25 MOV41 INS14 UPD66 UPD66 INS83 MOV43 INS59 MOV27 INS8 INS8 UPD43 INS27 INS8 INS83 INS39 INS59 INS38 MOV8 MOV8 MOV62 INS8 INS43 INS45 INS42 INS21 INS21 UPD42 UPD42 INS32 INS42 INS33 INS41 INS42 INS32 INS21 INS21 INS41 INS42 INS42 INS7 INS7 INS42 INS42 INS32 INS36 INS42 INS7 INS7 INS27 INS42 INS11 INS42 MOV32 MOV32 UPD42 MOV42 INS11 INS42 INS32 INS42 INS32 INS42 INS27 MOV43 INS32 INS32 UPD42 INS43 INS42 INS32 INS42 INS32 UPD42 MOV42 INS32 INS34 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS42 MOV32 INS42 INS36 INS42 INS42 INS42 INS42 UPD42 MOV11 DEL42 DEL42 DEL45 DEL32 DEL41 DEL32 DEL11 DEL36 DEL32 DEL41 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL41 DEL8 DEL25 DEL25