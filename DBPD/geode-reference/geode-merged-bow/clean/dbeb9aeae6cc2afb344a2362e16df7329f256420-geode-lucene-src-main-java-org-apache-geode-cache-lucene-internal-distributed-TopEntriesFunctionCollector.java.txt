Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A {@link ResultCollector} implementation for collecting and ordering {@link TopEntries}. The {@link TopEntries}
- * objects will be created by members when a {@link LuceneQuery} is executed on the local data hosted by the member. The
- * member executing this logic must have sufficient space to hold all the {@link EntryScore} documents returned from the
- * members.
+ * A {@link ResultCollector} implementation for collecting and ordering {@link TopEntries}. The
+ * {@link TopEntries} objects will be created by members when a {@link LuceneQuery} is executed on
+ * the local data hosted by the member. The member executing this logic must have sufficient space
+ * to hold all the {@link EntryScore} documents returned from the members.
- * This class will perform a lazy merge operation. Merge will take place if the merge {@link ResultCollector#getResult}
- * is invoked or if the combined result size is more than the limit set. In the later case, merge will be performed
- * whenever {@link ResultCollector#addResult} is invoked.
+ * This class will perform a lazy merge operation. Merge will take place if the merge
+ * {@link ResultCollector#getResult} is invoked or if the combined result size is more than the
+ * limit set. In the later case, merge will be performed whenever {@link ResultCollector#addResult}
+ * is invoked.
-public class TopEntriesFunctionCollector implements ResultCollector<TopEntriesCollector, TopEntries> {
+public class TopEntriesFunctionCollector
+    implements ResultCollector<TopEntriesCollector, TopEntries> {
-  // latch to wait till all results are collected
-  private final CountDownLatch waitForResults = new CountDownLatch(1);
-
-  public TopEntriesFunctionCollector(LuceneFunctionContext<TopEntriesCollector> context, GemFireCacheImpl cache) {
+  public TopEntriesFunctionCollector(LuceneFunctionContext<TopEntriesCollector> context,
+      GemFireCacheImpl cache) {
-    
+
-    try {
-      waitForResults.await();
-    } catch (InterruptedException e) {
-      logger.debug("Interrupted while waiting for result collection", e);
-      Thread.currentThread().interrupt();
-      if (cache != null) {
-        cache.getCancelCriterion().checkCancelInProgress(e);
-      }
-      throw new FunctionException(e);
-    }
-
-    try {
-      boolean result = waitForResults.await(timeout, unit);
-      if (!result) {
-        throw new FunctionException("Did not receive results from all members within wait time");
-      }
-    } catch (InterruptedException e) {
-      logger.debug("Interrupted while waiting for result collection", e);
-      Thread.currentThread().interrupt();
-      if (cache != null) {
-        cache.getCancelCriterion().checkCancelInProgress(e);
-      }
-      throw new FunctionException(e);
-    }
-
-      
+
-  public void endResults() {
-    synchronized (subResults) {
-      waitForResults.countDown();
-    }
-  }
+  public void endResults() {}
-      if (waitForResults.getCount() == 0) {
-        throw new IllegalStateException("This collector is closed and cannot accept anymore results");
-      }
-
-      if (waitForResults.getCount() == 0) {
-        throw new IllegalStateException("This collector is closed and cannot accept anymore results");
-      }

MOV65 INS8 INS8 INS8 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 MOV41 MOV41 INS8 INS8 MOV21 MOV21 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8