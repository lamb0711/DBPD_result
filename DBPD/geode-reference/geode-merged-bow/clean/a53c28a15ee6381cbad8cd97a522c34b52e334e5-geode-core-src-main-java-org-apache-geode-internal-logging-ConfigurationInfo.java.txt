GEODE-6122: Make log4j core optional (#2944)

* Add Logging ProviderAgent support for ServiceLoader
* Test for availability of Log4j Core before defaulting to Log4jAgent
* Change optional ProviderAgent methods to have default impls
* Extract LogLevelUpdateOccurs enum to top level class
* Extract LogLevelUpdateScope enum to top level class
* Move Banner to internal.logging package
* Break Banner's hard dependency on Log4J Core
* Improve javadocs
* Add field type to TestingOnly annotation
* Replace use of InternalLogWriter constants with LogWriterLevel enum

-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.status.StatusLogger;
-
-import org.apache.geode.internal.ClassPathLoader;
-
- * Fetches the configuration info from {@code Log4jAgent} without direct class dependency.
- *
- * <p>
- * This could potentially be modified to support any logging backend but currently the only caller
- * is the log Banner which is static.
+ * Fetches the configuration info from {@link ProviderAgent} for invocation from static context.
+ * Note: this may instantiate a new instance of {@link ProviderAgent}.
-  private static final Logger LOGGER = StatusLogger.getLogger();
-
-  /**
-   * Fetches the configuration info from Log4jAgent without direct class dependency.
-   *
-   * <p>
-   * If the Log4J2 Core classes are not in the classpath, the return value is simply
-   * "No configuration info found."
-   */
-    try {
-      Class<? extends ProviderAgent> agentClass =
-          ClassPathLoader.getLatest().forName(Configuration.DEFAULT_PROVIDER_AGENT_NAME)
-              .asSubclass(ProviderAgent.class);
-      Method method = agentClass.getMethod("getConfigurationInfo", null);
-      return (String) method.invoke(null, null);
-    } catch (ClassNotFoundException | ClassCastException | NoSuchMethodException
-        | IllegalAccessException | InvocationTargetException e) {
-      LOGGER.debug("Unable to invoke Log4jAgent.getConfigurationInfo()", e);
-      return "No configuration info found";
-    }
+    return new ProviderAgentLoader().findProviderAgent().getConfigurationInfo();

INS8 UPD65 UPD66 UPD66 INS65 UPD66 INS41 INS42 INS42 INS32 INS32 UPD42 MOV42 INS14 INS42 INS43 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL42 DEL43 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL45 DEL33 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL33 DEL33 DEL32 DEL11 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL45 DEL41 DEL8 DEL12 DEL54 DEL8