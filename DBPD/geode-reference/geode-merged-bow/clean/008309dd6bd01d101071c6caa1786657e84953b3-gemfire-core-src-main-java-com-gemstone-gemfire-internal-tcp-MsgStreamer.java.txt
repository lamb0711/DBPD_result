Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.ByteBufferWriter;
-    ObjToByteArraySerializer, BaseMsgStreamer {
+    ObjToByteArraySerializer, BaseMsgStreamer, ByteBufferWriter {
+  // TODO OFFHEAP: instead of MsgStreamer extending OutputStream
+  // we could have it extends HeapDataOutputStream.
+  // HDOS can now be given a direct ByteBuffer and told
+  // to not copy large byte sequences it is given.
+  // Also be it being a HDOS we can take advantage of code
+  // that is already optimized to pass Chunk direct ByteBuffers.
+  @Override
+  public final void write(ByteBuffer bb) {
+//    if (logger.isTraceEnabled()) {
+//      logger.trace(" bytes={} offset={} len={}", source, offset, len);
+//    }
+    if (this.overflowBuf != null) {
+      this.overflowBuf.write(bb);
+      return;
+    }
+    int len = bb.remaining();
+    // TODO OFFHEAP: if len > remainingSpace and isOverflowMode() then
+    // (and the overflow HDOS has doNotCopy set?) it is probably better to not copy part of
+    // bb to this.buffer and then add the remainder of it to the HDOS. Instead
+    // we can just add the whole bb to the HDOS.
+    while (len > 0) {
+      int remainingSpace = this.buffer.capacity() - this.buffer.position();
+      if (remainingSpace == 0) {
+        realFlush(false);
+        if (this.overflowBuf != null) {
+          this.overflowBuf.write(bb);
+          return;
+        }
+      } else {
+        int chunkSize = remainingSpace;
+        if (len < chunkSize) {
+          chunkSize = len;
+        }
+        int oldLimit = bb.limit();
+        bb.limit(bb.position()+chunkSize);
+        this.buffer.put(bb);
+        bb.limit(oldLimit);
+        len -= chunkSize;
+      }
+    }
+  }
+
+    // TODO OFFHEAP: update this class to take into account the "noCopy" mode added to HDOS and that we might be adding direct ByteBuffers to this.
-      other.sendTo((OutputStream)this);
+      other.sendTo((ByteBufferWriter)this);
-        overBuf.sendTo((OutputStream)this);
+        overBuf.sendTo((ByteBufferWriter)this);

INS26 INS40 INS43 INS31 INS42 INS78 INS83 INS83 INS39 INS42 INS44 INS8 INS42 INS43 INS42 INS25 INS60 INS61 INS42 INS27 INS8 INS39 INS59 INS27 INS8 INS22 INS33 INS21 INS41 INS42 INS32 INS42 INS34 INS60 INS25 INS52 INS42 INS32 INS42 INS42 INS39 INS59 INS27 INS8 INS8 INS22 INS42 INS42 INS42 INS27 INS42 INS34 INS21 INS25 INS60 INS25 INS60 INS21 INS21 INS21 INS21 INS52 INS42 INS32 INS32 INS32 INS27 INS8 INS39 INS59 INS27 INS8 INS39 INS59 INS32 INS32 INS32 INS7 UPD43 INS22 INS42 INS22 INS42 INS42 INS9 INS22 INS33 INS21 INS41 INS42 INS42 INS42 INS42 INS21 INS42 INS32 INS42 INS42 INS27 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS7 INS42 INS42 INS32 INS42 INS52 INS42 UPD43 INS22 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS52 INS42