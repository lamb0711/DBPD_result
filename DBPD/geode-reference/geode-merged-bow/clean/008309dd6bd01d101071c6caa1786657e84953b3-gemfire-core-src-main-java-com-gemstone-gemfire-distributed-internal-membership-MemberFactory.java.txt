Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.io.File;
-import com.gemstone.gemfire.distributed.internal.membership.jgroup.JGroupMemberFactory;
+import com.gemstone.gemfire.distributed.internal.LocatorStats;
+import com.gemstone.gemfire.distributed.internal.membership.gms.GMSMemberFactory;
+import com.gemstone.gemfire.distributed.internal.membership.gms.NetLocator;
-  private static final MemberServices services = new JGroupMemberFactory();
+  private static final MemberServices services = new GMSMemberFactory();
-   * Return a blank NetMember (used by externalization)
-   * @return the new NetMember
-   */
-  static public NetMember newNetMember() {
-    return services.newNetMember();
-  }
-  
-  /**
-      boolean splitBrainEnabled, boolean canBeCoordinator, MemberAttributes payload) {
-    return services.newNetMember(i, p, splitBrainEnabled, canBeCoordinator, payload);
+      boolean splitBrainEnabled, boolean canBeCoordinator, short version, MemberAttributes payload) {
+    return services.newNetMember(i, p, splitBrainEnabled, canBeCoordinator, payload, version);
+  
+  /**
+   * currently this is a test method but it ought to be used by InternalLocator
+   * to create the peer location TcpHandler
+   */
+  static public NetLocator newLocatorHandler(InetAddress bindAddress,
+          File stateFile,
+          String locatorString,
+          boolean usePreferredCoordinators,
+          boolean networkPartitionDetectionEnabled, LocatorStats stats) {
+    return services.newLocatorHandler(bindAddress, stateFile, locatorString,
+        usePreferredCoordinators, networkPartitionDetectionEnabled, stats);
+  }
+

INS26 INS26 INS26 MOV31 INS40 INS40 UPD40 INS40 INS44 UPD43 UPD42 INS44 INS44 INS44 INS44 INS44 INS44 INS39 INS42 INS65 UPD42 INS43 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 UPD43 UPD66 MOV66 UPD66 MOV66 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 DEL65 DEL65