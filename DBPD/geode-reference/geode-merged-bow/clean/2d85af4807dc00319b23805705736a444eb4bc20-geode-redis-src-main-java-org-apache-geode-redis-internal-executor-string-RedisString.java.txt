GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

-import org.apache.geode.DataSerializable;
-import org.apache.geode.InvalidDeltaException;
+import org.apache.geode.redis.internal.AbstractRedisData;
+import org.apache.geode.redis.internal.AppendDeltaInfo;
+import org.apache.geode.redis.internal.Coder;
+import org.apache.geode.redis.internal.DeltaInfo;
+import org.apache.geode.redis.internal.RedisConstants;
-public class RedisString implements DataSerializable, RedisData {
+public class RedisString extends AbstractRedisData {
-  private transient ByteArrayWrapper delta;
-
-    delta = appendValue;
-    region.put(key, this);
+    storeChanges(region, key, new AppendDeltaInfo(appendValue.toBytes()));
+  public long incr(Region<ByteArrayWrapper, RedisData> region, ByteArrayWrapper key)
+      throws NumberFormatException, ArithmeticException {
+    long longValue = parseValueAsLong();
+    if (longValue == Long.MAX_VALUE) {
+      throw new ArithmeticException(RedisConstants.ERROR_OVERFLOW);
+    }
+    longValue++;
+    String stringValue = Long.toString(longValue);
+    value.setBytes(Coder.stringToBytes(stringValue));
+    // numeric strings are short so no need to use delta
+    region.put(key, this);
+    return longValue;
+  }
+
+  public long incrby(Region<ByteArrayWrapper, RedisData> region, ByteArrayWrapper key,
+      long increment)
+      throws NumberFormatException, ArithmeticException {
+    long longValue = parseValueAsLong();
+    if (longValue >= 0 && increment > (Long.MAX_VALUE - longValue)) {
+      throw new ArithmeticException(RedisConstants.ERROR_OVERFLOW);
+    }
+    longValue += increment;
+    String stringValue = Long.toString(longValue);
+    value.setBytes(Coder.stringToBytes(stringValue));
+    // numeric strings are short so no need to use delta
+    region.put(key, this);
+    return longValue;
+  }
+
+  public long decrby(Region<ByteArrayWrapper, RedisData> region, ByteArrayWrapper key,
+      long decrement) {
+    long longValue = parseValueAsLong();
+    if (longValue <= 0 && -decrement < (Long.MIN_VALUE - longValue)) {
+      throw new ArithmeticException(RedisConstants.ERROR_OVERFLOW);
+    }
+    longValue -= decrement;
+    String stringValue = Long.toString(longValue);
+    value.setBytes(Coder.stringToBytes(stringValue));
+    // numeric strings are short so no need to use delta
+    region.put(key, this);
+    return longValue;
+  }
+
+  public long decr(Region<ByteArrayWrapper, RedisData> region, ByteArrayWrapper key)
+      throws NumberFormatException, ArithmeticException {
+    long longValue = parseValueAsLong();
+    if (longValue == Long.MIN_VALUE) {
+      throw new ArithmeticException(RedisConstants.ERROR_OVERFLOW);
+    }
+    longValue--;
+    String stringValue = Long.toString(longValue);
+    value.setBytes(Coder.stringToBytes(stringValue));
+    // numeric strings are short so no need to use delta
+    region.put(key, this);
+    return longValue;
+  }
+
+  private long parseValueAsLong() {
+    try {
+      return Long.parseLong(value.toString());
+    } catch (NumberFormatException ex) {
+      throw new NumberFormatException(RedisConstants.ERROR_NOT_INTEGER);
+    }
+  }
+
+    super.toData(out);
-  public void fromData(DataInput in) throws IOException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+    super.fromData(in);
+  protected void applyDelta(DeltaInfo deltaInfo) {
+    AppendDeltaInfo appendDeltaInfo = (AppendDeltaInfo) deltaInfo;
+    byte[] appendBytes = appendDeltaInfo.getBytes();
+    if (value == null) {
+      value = new ByteArrayWrapper(appendBytes);
+    } else {
+      value.append(appendBytes);
+    }
+  }
+
+  @Override
-  public boolean hasDelta() {
-    return delta != null;
-  }
-
-  @Override
-  public void toDelta(DataOutput out) throws IOException {
-    try {
-      DataSerializer.writeByteArray(delta.toBytes(), out);
-    } finally {
-      delta = null;
-    }
-  }
-
-  @Override
-  public void fromDelta(DataInput in) throws IOException, InvalidDeltaException {
-    try {
-      byte[] deltaBytes = DataSerializer.readByteArray(in);
-      if (value == null) {
-        value = new ByteArrayWrapper(deltaBytes);
-      } else {
-        value.append(deltaBytes);
-      }
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    }
+  protected boolean removeFromRegion() {
+    return false;

MOV26 MOV26 INS26 INS26 INS26 MOV31 MOV31 INS40 INS40 UPD40 UPD40 INS40 UPD43 INS31 INS31 INS31 INS31 INS31 UPD42 INS83 INS39 INS42 INS44 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS43 INS43 INS8 MOV83 UPD39 MOV39 INS42 INS44 INS44 INS44 MOV8 UPD39 UPD42 INS44 INS43 UPD43 INS83 INS39 INS42 INS8 INS43 UPD83 UPD42 MOV8 MOV78 INS83 INS39 INS42 INS8 INS74 INS42 INS43 INS42 INS42 INS42 INS60 INS25 INS21 INS60 INS21 MOV21 INS41 INS74 INS42 INS43 INS42 INS39 INS42 INS42 INS42 INS60 INS25 INS21 INS60 INS21 INS21 INS41 INS74 INS42 INS43 INS42 INS39 INS42 INS60 INS25 INS21 INS60 INS21 INS21 INS41 INS74 UPD42 INS43 INS42 INS42 UPD42 INS60 INS25 INS21 INS60 MOV21 MOV21 INS41 INS54 INS21 INS42 INS21 UPD43 UPD42 INS60 INS41 INS32 INS43 INS43 INS43 INS42 INS39 INS59 INS27 INS8 INS37 INS43 INS59 INS32 INS42 INS43 INS43 INS43 INS42 INS39 INS59 INS27 INS8 INS7 INS43 INS59 INS32 INS32 INS42 INS43 INS43 INS43 INS42 INS39 INS59 INS27 INS8 INS7 INS43 INS59 INS32 INS32 INS42 INS43 INS43 INS43 INS42 INS39 INS59 INS27 INS8 INS37 INS43 INS59 INS32 INS42 INS8 INS12 INS48 INS48 UPD42 INS43 INS59 INS9 INS42 INS42 INS42 INS14 INS42 INS42 MOV42 INS42 INS32 INS42 INS40 INS53 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 MOV42 INS42 UPD42 MOV42 INS32 INS27 INS27 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS53 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS42 UPD42 MOV42 INS42 INS32 INS42 INS40 INS53 INS42 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS42 INS52 INS41 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS11 UPD42 INS43 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS36 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS34 INS38 INS36 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 UPD42 INS42 INS32 INS43 INS42 INS53 INS43 INS42 UPD42 UPD42 INS42 INS42 INS42 INS43 INS40 INS27 INS43 INS40 INS42 INS27 INS43 INS40 INS43 INS40 INS42 INS42 INS32 INS42 INS14 INS42 UPD42 INS42 INS40 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS43 INS40 UPD42 INS42 DEL43 DEL83 DEL83 DEL43 DEL59 DEL23 DEL42 DEL42 DEL7 DEL33 DEL27 DEL41 DEL43 DEL42 DEL42 DEL33 DEL7 DEL8 DEL8 DEL54 DEL42 DEL78 DEL42 DEL31 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8