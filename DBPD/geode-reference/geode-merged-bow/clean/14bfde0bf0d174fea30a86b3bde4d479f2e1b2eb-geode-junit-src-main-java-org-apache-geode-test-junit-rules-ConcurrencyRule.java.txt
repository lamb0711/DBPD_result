Merge branch 'release/1.8.0'

-import static org.assertj.core.api.Assertions.catchThrowable;
-    private Throwable expectedException;
-    private T expectedValue;
+    private Boolean expectedResultIsSet;
+    private T expectedValue;
+    private Throwable expectedException;
+    private Class expectedExceptionCauseType;
+      this.expectedResultIsSet = false;
+      expectedExceptionCauseType = null;
+      this.expectedResultIsSet = false;
+      expectedExceptionCauseType = null;
-      if (expectedExceptionType != null || expectedValue != null) {
+      if (expectedResultIsSet) {
+      this.expectedResultIsSet = true;
+      this.expectedResultIsSet = true;
+      return this;
+    }
+
+    /**
+     * Sets the expected result of running the thread to be an exception with a cause that is an
+     * instance of the given class
+     *
+     * @param expectedExceptionCauseType the class of the expected exception cause. The exception
+     *        itself will not be checked.
+     * @return this, the ConcurrentOperation (containing a callable) that has been set to repeat
+     */
+    public ConcurrentOperation expectExceptionCauseType(Class expectedExceptionCauseType) {
+      if (expectedException != null || expectedValue != null) {
+        throw new IllegalArgumentException("Specify only one expected outcome.");
+      }
+
+      this.expectedExceptionCauseType = expectedExceptionCauseType;
+      this.expectedResultIsSet = true;
-      if (expectedExceptionType != null || expectedException != null) {
+      if (this.expectedResultIsSet) {
+      this.expectedResultIsSet = true;
-      if (expectedValue != null) {
-        assertThat(this.callable.call()).isEqualTo(this.expectedValue);
-      } else if (expectedException != null) {
-        Throwable thrown = catchThrowable(() -> this.callable.call());
-        checkThrown(this.expectedException, thrown);
-      } else if (expectedExceptionType != null) {
-        Throwable thrown = catchThrowable(() -> this.callable.call());
-        assertThat(thrown).isInstanceOf(this.expectedExceptionType);
-      } else {
-        this.callable.call();
+      Exception exception = null;
+
+      try {
+        T retVal = this.callable.call();
+
+        if (this.expectedValue != null) {
+          assertThat(retVal).isEqualTo(this.expectedValue);
+        }
+      } catch (Exception e) {
+        exception = e;
+
+      if (this.expectedExceptionCauseType != null && this.expectedExceptionType != null) {
+        assertThat(exception).isInstanceOf(this.expectedExceptionType)
+            .hasCauseInstanceOf(this.expectedExceptionCauseType);
+      } else if (this.expectedExceptionType != null) {
+        assertThat(exception).isInstanceOf(this.expectedExceptionType);
+      } else if (this.expectedExceptionCauseType != null) {
+        assertThat(exception).hasCauseInstanceOf(this.expectedExceptionCauseType);
+      } else if (this.expectedException != null) {
+        checkThrown(exception, this.expectedException);
+      } else {
+        if (exception != null) {
+          throw exception; // rethrow if we weren't expecting any exception and got one
+        }
+      }
+
-    private void checkThrown(Throwable expected, Throwable actual) {
+    private void checkThrown(Throwable actual, Throwable expected) {
-        checkThrown(expected.getCause(), actual.getCause());
+        checkThrown(actual.getCause(), expected.getCause());

MOV23 MOV23 INS23 INS23 INS31 MOV44 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS65 INS65 INS65 INS42 INS43 INS42 INS25 INS21 INS21 INS41 INS21 INS60 INS54 INS25 INS7 INS7 INS7 INS7 INS42 INS7 INS7 INS66 INS66 INS42 INS66 INS66 INS66 INS42 INS27 INS8 INS7 INS7 INS52 INS22 INS7 INS43 INS59 INS8 INS12 INS27 INS8 MOV25 INS22 INS9 INS42 INS33 INS22 INS9 INS42 INS33 INS22 INS9 INS22 INS9 INS27 INS27 INS53 INS22 INS42 INS22 INS9 INS52 INS42 INS22 INS9 INS42 INS42 INS33 INS60 INS25 INS44 INS8 INS27 INS27 MOV21 INS8 INS25 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS33 INS42 INS33 INS14 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS59 MOV27 MOV8 INS43 INS42 INS21 INS22 INS33 INS22 INS33 INS32 INS22 INS21 INS27 INS8 INS25 MOV32 INS43 INS45 INS42 INS42 MOV32 INS22 INS42 INS7 MOV52 UPD42 MOV42 INS52 INS42 INS32 INS42 INS22 INS52 INS42 INS32 INS22 INS33 MOV21 INS27 MOV8 INS8 INS42 INS52 INS42 INS42 INS42 INS32 INS42 MOV22 INS52 INS42 INS32 UPD42 MOV42 MOV22 INS52 INS42 MOV22 INS33 INS25 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 UPD42 INS22 INS27 INS8 INS42 UPD42 INS52 INS42 INS42 INS42 INS42 INS33 INS53 UPD42 INS42 DEL40 DEL26 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL86 DEL32 DEL59 DEL60 DEL8 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL22 DEL42 DEL32 DEL86 DEL32 DEL59 DEL60 DEL8 DEL25 DEL25