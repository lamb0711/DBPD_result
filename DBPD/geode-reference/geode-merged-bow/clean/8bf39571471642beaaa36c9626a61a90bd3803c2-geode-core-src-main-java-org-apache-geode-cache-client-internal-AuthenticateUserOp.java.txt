Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Authenticates this client (or a user) on a server. This op ideally should get
- * executed once-per-server.
+ * Authenticates this client (or a user) on a server. This op ideally should get executed
+ * once-per-server.
- * When multiuser-authentication is set to false, this op gets executed
- * immedialtely after a client-to-server connection is established.
+ * When multiuser-authentication is set to false, this op gets executed immedialtely after a
+ * client-to-server connection is established.
- * When multiuser-authentication is set to true, this op gets executed
- * before the user attempts to perform an op whose
- * {@link AbstractOp#needsUserId()} returns true.
+ * When multiuser-authentication is set to true, this op gets executed before the user attempts to
+ * perform an op whose {@link AbstractOp#needsUserId()} returns true.
-   * Sends the auth credentials to the server. Used in single user mode of
-   * authentication.
+   * Sends the auth credentials to the server. Used in single user mode of authentication.
-   * @param con
-   *          The connection to use for this operation.
-   * @param pool
-   *          The connection pool to use for this operation.
+   * @param con The connection to use for this operation.
+   * @param pool The connection pool to use for this operation.
-   * Sends the auth credentials to the server for a particular user. Used in
-   * multiple user mode of authentication.
+   * Sends the auth credentials to the server for a particular user. Used in multiple user mode of
+   * authentication.
-   * @param location
-   *          The ServerLocation instance whose connection instance will be used
-   *          to perform the operation.
-   * @param pool
-   *          The connection pool to use for this operation.
+   * @param location The ServerLocation instance whose connection instance will be used to perform
+   *        the operation.
+   * @param pool The connection pool to use for this operation.
-      DistributedMember server = new InternalDistributedMember(con.getSocket()
-          .getInetAddress(), con.getSocket().getPort(), false);
+      DistributedMember server = new InternalDistributedMember(con.getSocket().getInetAddress(),
+          con.getSocket().getPort(), false);
-      Properties credentials = HandShake.getCredentials(authInitMethod,
-          tmpSecurityProperties, server, false, (InternalLogWriter)sys.getLogWriter(), (InternalLogWriter)sys
-              .getSecurityLogWriter());
-      
+      Properties credentials = HandShake.getCredentials(authInitMethod, tmpSecurityProperties,
+          server, false, (InternalLogWriter) sys.getLogWriter(),
+          (InternalLogWriter) sys.getSecurityLogWriter());
+
-        credentialBytes = ((ConnectionImpl)con).getHandShake()
-            .encryptBytes(heapdos.toByteArray());
+        credentialBytes = ((ConnectionImpl) con).getHandShake().encryptBytes(heapdos.toByteArray());
-    public AuthenticateUserOpImpl(ExecutablePool pool, Properties securityProps, boolean needsServer) {
+    public AuthenticateUserOpImpl(ExecutablePool pool, Properties securityProps,
+        boolean needsServer) {
-        DistributedMember server = new InternalDistributedMember(cnx
-            .getSocket().getInetAddress(), cnx.getSocket().getPort(), false);
-        DistributedSystem sys = InternalDistributedSystem
-            .getConnectedInstance();
+        DistributedMember server = new InternalDistributedMember(cnx.getSocket().getInetAddress(),
+            cnx.getSocket().getPort(), false);
+        DistributedSystem sys = InternalDistributedSystem.getConnectedInstance();
-        Properties credentials = HandShake.getCredentials(authInitMethod,
-            this.securityProperties, server, false, (InternalLogWriter)sys.getLogWriter(), (InternalLogWriter)sys
-                .getSecurityLogWriter());
+        Properties credentials = HandShake.getCredentials(authInitMethod, this.securityProperties,
+            server, false, (InternalLogWriter) sys.getLogWriter(),
+            (InternalLogWriter) sys.getSecurityLogWriter());
-          credentialBytes = ((ConnectionImpl)cnx).getHandShake().encryptBytes(
-              heapdos.toByteArray());
+          credentialBytes =
+              ((ConnectionImpl) cnx).getHandShake().encryptBytes(heapdos.toByteArray());
-        secureBytes = ((ConnectionImpl)cnx).getHandShake().encryptBytes(
-            hdos.toByteArray());
+        secureBytes = ((ConnectionImpl) cnx).getHandShake().encryptBytes(hdos.toByteArray());
-        msg.setComms(cnx.getSocket(), cnx.getInputStream(),
-            cnx.getOutputStream(), cnx.getCommBuffer(), cnx.getStats());
+        msg.setComms(cnx.getSocket(), cnx.getInputStream(), cnx.getOutputStream(),
+            cnx.getCommBuffer(), cnx.getStats());
-        bytes = (byte[])part.getObject();
+        bytes = (byte[]) part.getObject();
-          byte[] decrypted = ((ConnectionImpl)cnx).getHandShake().decryptBytes(bytes);
+          byte[] decrypted = ((ConnectionImpl) cnx).getHandShake().decryptBytes(bytes);
-       } else {
-         return userId;
-       }
-      }
-      else if (msgType == MessageType.EXCEPTION) {
+        } else {
+          return userId;
+        }
+      } else if (msgType == MessageType.EXCEPTION) {
-          final AuthenticationFailedException afe =
-            (AuthenticationFailedException)result;
+          final AuthenticationFailedException afe = (AuthenticationFailedException) result;
-          }
-          else {
+          } else {
-        }
-        else if (result instanceof AuthenticationRequiredException) {
-          throw new AuthenticationRequiredException(s,
-              (AuthenticationRequiredException)result);
-        }
-        else if (result instanceof NotAuthorizedException) {
-          throw new NotAuthorizedException(s, (NotAuthorizedException)result);
-        }
-        else {
-          throw new ServerOperationException(s, (Throwable)result);
+        } else if (result instanceof AuthenticationRequiredException) {
+          throw new AuthenticationRequiredException(s, (AuthenticationRequiredException) result);
+        } else if (result instanceof NotAuthorizedException) {
+          throw new NotAuthorizedException(s, (NotAuthorizedException) result);
+        } else {
+          throw new ServerOperationException(s, (Throwable) result);
-      }
-      else if (isErrorResponse(msgType)) {
+      } else if (isErrorResponse(msgType)) {
-      }
-      else {
-        throw new InternalGemFireError("Unexpected message type "
-            + MessageType.getString(msgType));
+      } else {
+        throw new InternalGemFireError("Unexpected message type " + MessageType.getString(msgType));

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66