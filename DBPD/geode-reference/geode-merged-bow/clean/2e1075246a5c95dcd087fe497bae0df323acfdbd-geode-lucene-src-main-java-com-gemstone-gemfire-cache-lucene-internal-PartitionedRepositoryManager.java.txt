Merge branch 'release/1.0.0-incubating.M3'

+import java.util.concurrent.ConcurrentHashMap;
-import org.apache.lucene.index.IndexWriter;
-import org.apache.lucene.index.IndexWriterConfig;
-import com.gemstone.gemfire.cache.lucene.internal.directory.RegionDirectory;
+import com.gemstone.gemfire.cache.lucene.internal.filesystem.FileSystemStats;
-import com.gemstone.gemfire.cache.lucene.internal.repository.IndexRepositoryImpl;
-  /** map of the parent bucket region to the index repository 
+
+  public static IndexRepositoryFactory indexRepositoryFactory = new IndexRepositoryFactory();
+
+  /** map of the parent bucket region to the index repository
-  CopyOnWriteHashMap<Integer, IndexRepository> indexRepositories = new CopyOnWriteHashMap<Integer, IndexRepository>();
+  private final ConcurrentHashMap<Integer, IndexRepository> indexRepositories = new ConcurrentHashMap<Integer, IndexRepository>();
-  
+  private final LuceneIndexStats indexStats;
+  private final FileSystemStats fileSystemStats;
+
-  public PartitionedRepositoryManager(PartitionedRegion userRegion, PartitionedRegion fileRegion,
-      PartitionedRegion chunkRegion,
-      LuceneSerializer serializer,
-      Analyzer analyzer) {
+  public PartitionedRepositoryManager(PartitionedRegion userRegion,
+                                      PartitionedRegion fileRegion,
+                                      PartitionedRegion chunkRegion,
+                                      LuceneSerializer serializer,
+                                      Analyzer analyzer,
+                                      LuceneIndexStats indexStats,
+                                      FileSystemStats fileSystemStats) {
+    this.indexStats = indexStats;
+    this.fileSystemStats = fileSystemStats;
-    
-    //Remove the repository if it has been destroyed (due to rebalancing)
-    if(repo != null && repo.isClosed()) {
-      indexRepositories.remove(bucketId, repo);
-      repo = null;
+    if(repo != null && !repo.isClosed()) {
+      return repo;
-    
-    if(repo == null) {
+
+    repo = indexRepositories.compute(bucketId, (key, oldRepository) -> {
+      if(oldRepository != null && !oldRepository.isClosed()) {
+        return oldRepository;
+      }
+      if(oldRepository != null) {
+        oldRepository.cleanup();
+      }
+
-        BucketRegion fileBucket = getMatchingBucket(fileRegion, bucketId);
-        BucketRegion chunkBucket = getMatchingBucket(chunkRegion, bucketId);
-        RegionDirectory dir = new RegionDirectory(fileBucket, chunkBucket);
-        IndexWriterConfig config = new IndexWriterConfig(analyzer);
-        IndexWriter writer = new IndexWriter(dir, config);
-        repo = new IndexRepositoryImpl(fileBucket, writer, serializer);
-        IndexRepository oldRepo = indexRepositories.putIfAbsent(bucketId, repo);
-        if(oldRepo != null) {
-          repo = oldRepo;
-        }
+        return indexRepositoryFactory.createIndexRepository(bucketId, userRegion, fileRegion, chunkRegion, serializer,
+          analyzer, indexStats, fileSystemStats);
-    }
-    
-    return repo;
-  }
-  /**
-   * Find the bucket in region2 that matches the bucket id from region1.
-   */
-  private BucketRegion getMatchingBucket(PartitionedRegion region, Integer bucketId) throws BucketNotFoundException {
-    //Force the bucket to be created if it is not already
-    region.getOrCreateNodeForBucketWrite(bucketId, null);
-    
-    BucketRegion result = region.getDataStore().getLocalBucketById(bucketId);
-    if(result == null) {
-      throw new BucketNotFoundException("Bucket not found for region " + region + " bucekt id " + bucketId);
+    });
+
+    if(repo == null) {
+      throw new BucketNotFoundException("Colocated index buckets not found for regions " + chunkRegion + ", " + fileRegion + " bucket id " + bucketId);
-    
-    return result;
+
+    return repo;

MOV26 UPD40 UPD40 INS23 INS23 INS23 INS31 INS83 INS83 INS43 INS59 INS83 INS83 UPD74 MOV74 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS44 INS44 MOV29 INS83 MOV43 INS42 MOV44 MOV43 INS8 UPD42 MOV42 UPD42 MOV42 MOV14 UPD43 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 MOV42 INS43 INS42 INS43 INS42 INS21 INS21 MOV60 MOV25 INS21 MOV25 MOV41 UPD43 UPD66 UPD42 UPD74 MOV74 INS42 INS42 INS7 INS7 INS7 MOV27 UPD42 UPD43 INS22 INS42 INS22 INS42 INS38 INS41 MOV42 INS32 UPD42 INS52 INS42 INS52 INS42 MOV32 INS42 INS42 INS42 INS42 INS86 INS59 INS59 INS8 INS42 INS42 INS25 MOV25 INS54 UPD45 INS42 INS45 UPD42 UPD45 INS27 INS8 INS8 MOV12 INS27 INS38 INS41 UPD42 INS41 INS42 INS33 INS32 INS42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL42 DEL7 DEL42 DEL33 DEL27 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL43 DEL42 DEL43 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL8 DEL54 DEL8 DEL25 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL41 DEL8 DEL31