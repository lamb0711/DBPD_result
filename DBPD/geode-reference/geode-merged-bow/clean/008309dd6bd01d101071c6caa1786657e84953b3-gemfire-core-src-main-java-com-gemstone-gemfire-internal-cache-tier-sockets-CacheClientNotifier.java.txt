Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.internal.SocketCloser;
-import com.gemstone.gemfire.internal.cache.BridgeObserver;
-import com.gemstone.gemfire.internal.cache.BridgeObserverHolder;
-import com.gemstone.gemfire.internal.cache.BridgeRegionEventImpl;
-import com.gemstone.gemfire.internal.cache.BridgeServerImpl;
+import com.gemstone.gemfire.internal.VersionedDataInputStream;
+import com.gemstone.gemfire.internal.VersionedDataOutputStream;
+import com.gemstone.gemfire.internal.cache.ClientServerObserver;
+import com.gemstone.gemfire.internal.cache.ClientServerObserverHolder;
+import com.gemstone.gemfire.internal.cache.ClientRegionEventImpl;
+import com.gemstone.gemfire.internal.cache.CacheServerImpl;
+import com.gemstone.gemfire.internal.cache.EntryEventImpl.SerializedCacheValueImpl;
-        registerGFEClient(dis, dos, socket, isPrimary, startTime, clientVersion,
+      if (Version.CURRENT.compareTo(clientVersion) > 0) {
+        dis = new VersionedDataInputStream(dis, clientVersion);
+        dos = new VersionedDataOutputStream(dos, clientVersion);
+      }
+      registerGFEClient(dis, dos, socket, isPrimary, startTime, clientVersion,
-  public static void routeSingleClientMessage(ClientUpdateMessage clientMessage, ClientProxyMembershipID clientProxyMembershiptId) {
+  public static void routeSingleClientMessage(ClientUpdateMessage clientMessage, ClientProxyMembershipID clientProxyMembershipId) {
-      HAEventWrapper haEW = new HAEventWrapper(clientMessage);
-      haEW.setPutInProgress(true);
-      HashSet<ClientProxyMembershipID > singleClient = new HashSet<ClientProxyMembershipID >();
-      singleClient.add(clientProxyMembershiptId);
-      instance.singletonRouteClientMessage(clientMessage, singleClient);
+      instance.singletonRouteClientMessage(clientMessage, Collections.singleton(clientProxyMembershipId));
-            BridgeObserver bo = BridgeObserverHolder.getInstance();
+            ClientServerObserver bo = ClientServerObserverHolder.getInstance();
-    Object value = null;
-    byte valueIsObject = 0x01;
-
-      // only need a value if notifyBySubscription is true
-      CachedDeserializable serializedNewValue = (CachedDeserializable) entryEvent.getSerializedNewValue();
-      final boolean isTraceEnabled = logger.isTraceEnabled();
-      if (serializedNewValue == null) {
-        if (entryEvent.getCachedSerializedNewValue() != null) {
-          value = entryEvent.getCachedSerializedNewValue();
-          if (isTraceEnabled) {
-            logger.trace("CacheClientNotifier: Using cached serialized new value for operation {}: byte[{}]", operation, entryEvent.getCachedSerializedNewValue().length);
-          }
-        } else {
-        Object newValue = entryEvent.getRawNewValue();
-        if (newValue instanceof byte[]) {
-          // The value is already a byte[]. Set _valueIsObject flag to 0x00
-          // (not an object)
-          value = newValue;
-          valueIsObject = 0x00;
-        }
-        else {
-          // The value is an object. Serialize it.
-          byte[] valueBytes = CacheServerHelper.serialize(newValue);
-          value = valueBytes;
-          entryEvent.setCachedSerializedNewValue(valueBytes);
-        }
-        if (isTraceEnabled)
-          logger.trace("CacheClientNotifier: Using deserialized new value for operation {}: {}", operation, newValue);
-        }
-      } else {
-        value = serializedNewValue.getSerializedValue();
-        // value is a byte[] at since getSerializedValue returns byte[]
-        if (isTraceEnabled) {
-          logger.trace("CacheClientNotifier: Using serialized new value for operation {}: {}", operation, serializedNewValue.getStringForm());
-        }
-      }
-      if (event instanceof BridgeRegionEventImpl) {
-        BridgeRegionEventImpl bridgeEvent = (BridgeRegionEventImpl)event;
+      if (event instanceof ClientRegionEventImpl) {
+        ClientRegionEventImpl bridgeEvent = (ClientRegionEventImpl)event;
-        (LocalRegion)event.getRegion(), keyOfInterest, value, delta, valueIsObject,
+        (LocalRegion)event.getRegion(), keyOfInterest, null, delta, (byte) 0x01,
+    
+    if (event.getOperation().isEntry()) {
+      EntryEventImpl entryEvent = (EntryEventImpl)event;
+      // only need a value if notifyBySubscription is true
+      entryEvent.exportNewValue(clientUpdateMsg);
+    }
+      
+      this.socketCloser.close();
+    this.socketCloser = new SocketCloser(1, 50); // we only need one thread per client and wait 50ms for close
-          + BridgeServerImpl.clientMessagesRegion((GemFireCacheImpl)cache,
+          + CacheServerImpl.clientMessagesRegion((GemFireCacheImpl)cache,
+  public SocketCloser getSocketCloser() {
+    return this.socketCloser;
+  }
+  
+  private final SocketCloser socketCloser;
+  

INS26 INS26 INS26 INS26 INS40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 INS40 INS31 INS31 INS23 MOV83 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS59 UPD42 MOV60 INS25 INS25 INS21 UPD42 MOV42 INS41 UPD42 MOV42 INS42 MOV27 INS8 INS32 INS8 INS7 INS22 INS25 INS21 INS32 INS42 INS60 INS21 INS21 INS22 INS14 INS52 INS42 INS27 INS8 INS32 INS33 INS11 INS42 INS42 INS43 INS59 INS32 INS32 INS52 INS42 INS43 INS34 INS34 INS32 INS34 INS21 INS21 INS42 INS42 INS42 INS32 UPD43 INS39 INS34 INS42 INS42 INS11 INS42 INS42 INS42 INS22 INS42 INS42 INS40 INS42 INS42 INS7 INS7 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD43 INS43 INS42 INS52 INS42 INS42 INS14 INS42 INS14 UPD42 INS42 INS43 INS42 INS42 INS43 INS42 INS42 UPD43 INS42 INS42 UPD42 UPD42 UPD43 UPD42 UPD42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL9 DEL32 DEL21 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL39 DEL85 DEL5 DEL62 DEL42 DEL42 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL8 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL42