Merge branch 'release/1.8.0'

-import org.apache.geode.connectors.jdbc.internal.configuration.ConnectorService;
+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;
-import org.apache.geode.internal.cache.InternalCache;
-  private final Map<String, ConnectorService.Connection> connectionsByName =
+  private final Map<String, RegionMapping> mappingsByRegion =
-  private final Map<String, ConnectorService.RegionMapping> mappingsByRegion =
-      new ConcurrentHashMap<>();
-  private final DataSourceManager manager =
-      new DataSourceManager(new HikariJdbcDataSourceFactory());
-  private volatile InternalCache cache;
-  private boolean registered;
-  public void createConnectionConfig(ConnectorService.Connection config)
-      throws ConnectionConfigExistsException {
-    ConnectorService.Connection existing = connectionsByName.putIfAbsent(config.getName(), config);
-    if (existing != null) {
-      throw new ConnectionConfigExistsException("Connection " + config.getName() + " exists");
-    }
-  }
-
-  @Override
-  public void replaceConnectionConfig(ConnectorService.Connection alteredConfig)
-      throws ConnectionConfigNotFoundException {
-    ConnectorService.Connection existingConfig = connectionsByName.get(alteredConfig.getName());
-    if (existingConfig == null) {
-      throw new ConnectionConfigNotFoundException(
-          "Connection configuration " + alteredConfig.getName() + " was not found");
-    }
-
-    connectionsByName.put(existingConfig.getName(), alteredConfig);
-  }
-
-  @Override
-  public void destroyConnectionConfig(String connectionName) {
-    connectionsByName.remove(connectionName);
-  }
-
-  @Override
-  public ConnectorService.Connection getConnectionConfig(String connectionName) {
-    return connectionsByName.get(connectionName);
-  }
-
-  @Override
-  public Set<ConnectorService.Connection> getConnectionConfigs() {
-    Set<ConnectorService.Connection> connectionConfigs = new HashSet<>();
-    connectionConfigs.addAll(connectionsByName.values());
-    return connectionConfigs;
-  }
-
-  @Override
-  public Set<ConnectorService.RegionMapping> getRegionMappings() {
-    Set<ConnectorService.RegionMapping> regionMappings = new HashSet<>();
+  public Set<RegionMapping> getRegionMappings() {
+    Set<RegionMapping> regionMappings = new HashSet<>();
-  public DataSourceManager getDataSourceManager() {
-    return manager;
-  }
-
-  @Override
-  public void createRegionMapping(ConnectorService.RegionMapping mapping)
+  public void createRegionMapping(RegionMapping mapping)
-    ConnectorService.RegionMapping existing =
+    RegionMapping existing =
-  public void replaceRegionMapping(ConnectorService.RegionMapping alteredMapping)
+  public void replaceRegionMapping(RegionMapping alteredMapping)
-    ConnectorService.RegionMapping existingMapping =
+    RegionMapping existingMapping =
-          "RegionMapping for region " + existingMapping.getRegionName() + " was not found");
+          "RegionMapping for the region " + alteredMapping.getRegionName() + " was not found");
-  public ConnectorService.RegionMapping getMappingForRegion(String regionName) {
+  public RegionMapping getMappingForRegion(String regionName) {
-  public void init(Cache cache) {
-    this.cache = (InternalCache) cache;
-  }
+  public void init(Cache cache) {}

UPD40 UPD74 MOV59 UPD74 MOV74 UPD43 UPD43 UPD43 UPD43 UPD43 INS42 INS42 INS42 UPD74 MOV74 INS42 UPD43 INS42 UPD43 UPD43 INS42 INS42 INS42 UPD45 UPD42 DEL40 DEL26 DEL40 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL40 DEL43 DEL74 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL14 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL78 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL40 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL40 DEL42 DEL43 DEL40 DEL43 DEL74 DEL40 DEL42 DEL43 DEL40 DEL43 DEL74 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL40 DEL40 DEL40 DEL40 DEL40 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL11 DEL7 DEL21