Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Figure out the size of an object using reflection. This class
- * does not follow any object references, it just calculates the size
- * of a flat object.
+ * Figure out the size of an object using reflection. This class does not follow any object
+ * references, it just calculates the size of a flat object.
-  
+
-    if(clazz.isArray()) {
+    if (clazz.isArray()) {
-          size += (long)arrayLength * typeSize;
+          size += (long) arrayLength * typeSize;
-          size += (long)arrayLength * sizeType(clazz.getComponentType());
+          size += (long) arrayLength * sizeType(clazz.getComponentType());
+
-   * Since unsafe.fieldOffset(Field) will give us the offset to the first byte
-   * of that field all we need to do is find which of the non-static declared
-   * fields has the greatest offset.
+   * Since unsafe.fieldOffset(Field) will give us the offset to the first byte of that field all we
+   * need to do is find which of the non-static declared fields has the greatest offset.
-        for(Field field: fields) {
-          if(!Modifier.isStatic(field.getModifiers())) {
+        for (Field field : fields) {
+          if (!Modifier.isStatic(field.getModifiers())) {
-        for(Field field: fields) {
-          if(!Modifier.isStatic(field.getModifiers())) {
+        for (Field field : fields) {
+          if (!Modifier.isStatic(field.getModifiers())) {
-    //Round up to the nearest 8 bytes. Experimentally, this
-    //is what we've seen the sun 32 bit VM do with object size.
-    //See https://wiki.gemstone.com/display/rusage/Per+Entry+Overhead
+    // Round up to the nearest 8 bytes. Experimentally, this
+    // is what we've seen the sun 32 bit VM do with object size.
+    // See https://wiki.gemstone.com/display/rusage/Per+Entry+Overhead
-      size = size - remainder  + 8;
+      size = size - remainder + 8;
-  
+
-      
-      if (t == Boolean.TYPE)
-        return 1;
-      else if (t == Byte.TYPE)
-        return 1;
-      else if (t == Character.TYPE)
-        return 2;
-      else if (t == Short.TYPE)
-        return 2;
-      else if (t == Integer.TYPE)
-        return 4;
-      else if (t == Long.TYPE)
-        return 8;
-      else if (t == Float.TYPE)
-        return 4;
-      else if (t == Double.TYPE)
-        return 8;
-      else if (t == Void.TYPE)
-        return 0;
-      else
-        return REFERENCE_SIZE;
+
+    if (t == Boolean.TYPE)
+      return 1;
+    else if (t == Byte.TYPE)
+      return 1;
+    else if (t == Character.TYPE)
+      return 2;
+    else if (t == Short.TYPE)
+      return 2;
+    else if (t == Integer.TYPE)
+      return 4;
+    else if (t == Long.TYPE)
+      return 8;
+    else if (t == Float.TYPE)
+      return 4;
+    else if (t == Double.TYPE)
+      return 8;
+    else if (t == Void.TYPE)
+      return 0;
+    else
+      return REFERENCE_SIZE;
-  
+

UPD66 UPD66 UPD66 UPD66 DEL66 DEL66