GEODE-6694: Use volatile access to read current state of BucketAdvisor

Since that value can change immediately after we exit these methods,
unless we already have the monitor, we can safely read the current value
with the same staleness guarantee when exiting the method. Lock still
acquired for composite checks and updating the value.

-  private byte primaryState = NO_PRIMARY_NOT_HOSTING;
+  private volatile byte primaryState = NO_PRIMARY_NOT_HOSTING;
-    synchronized (this) {
-      return primaryState == CLOSED;
-    }
+    return primaryState == CLOSED;
-    synchronized (this) {
-      return primaryState == IS_PRIMARY_HOSTING;
-    }
+    return primaryState == IS_PRIMARY_HOSTING;
-    synchronized (this) {
-      return primaryState == VOLUNTEERING_HOSTING;
-    }
+    return primaryState == VOLUNTEERING_HOSTING;
-    synchronized (this) {
-      return primaryState == NO_PRIMARY_HOSTING || primaryState == OTHER_PRIMARY_HOSTING
-          || primaryState == VOLUNTEERING_HOSTING || primaryState == BECOMING_HOSTING
-          || primaryState == IS_PRIMARY_HOSTING;
-    }
+    final byte primaryState = this.primaryState;
+    return primaryState == NO_PRIMARY_HOSTING || primaryState == OTHER_PRIMARY_HOSTING
+        || primaryState == VOLUNTEERING_HOSTING || primaryState == BECOMING_HOSTING
+        || primaryState == IS_PRIMARY_HOSTING;
-    synchronized (this) {
-      return primaryState == OTHER_PRIMARY_NOT_HOSTING
-          || primaryState == OTHER_PRIMARY_HOSTING || primaryState == IS_PRIMARY_HOSTING;
-    }
+    final byte primaryState = this.primaryState;
+    return primaryState == OTHER_PRIMARY_NOT_HOSTING || primaryState == OTHER_PRIMARY_HOSTING
+        || primaryState == IS_PRIMARY_HOSTING;

INS83 MOV8 MOV8 MOV8 MOV8 MOV8 INS60 INS60 INS83 INS39 INS59 INS83 INS39 INS59 INS42 INS22 INS42 INS22 INS52 INS42 INS52 INS42 DEL52 DEL51 DEL8 DEL52 DEL51 DEL8 DEL52 DEL51 DEL8 DEL52 DEL51 DEL8 DEL52 DEL51 DEL8