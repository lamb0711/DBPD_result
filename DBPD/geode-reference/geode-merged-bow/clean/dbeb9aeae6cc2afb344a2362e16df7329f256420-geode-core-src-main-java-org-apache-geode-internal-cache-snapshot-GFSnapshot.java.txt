Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-    
+
-  
+
-  public static final int SNAP_VER_1   = 1;
-  
+  public static final int SNAP_VER_1 = 1;
+
-  public static final int SNAP_VER_2   = 2;
+  public static final int SNAP_VER_2 = 2;
-  private static final byte[] SNAP_FMT = { 0x47, 0x46, 0x53 };
-  
-  private GFSnapshot() {
-  }
+  private static final byte[] SNAP_FMT = {0x47, 0x46, 0x53};
+
+  private GFSnapshot() {}
-    
+
-      
+
-      
+
-  
+
-  public static SnapshotWriter create(File snapshot, String region) 
-      throws IOException {
+  public static SnapshotWriter create(File snapshot, String region) throws IOException {
-  
+
-  public static <K, V> SnapshotIterator<K, V> read(final File snapshot) throws IOException, ClassNotFoundException {
+  public static <K, V> SnapshotIterator<K, V> read(final File snapshot)
+      throws IOException, ClassNotFoundException {
-        
+
-        
+
-      
+
-          
+
-          
+
-            @Override public K getKey() { return key; }
-            @Override public V getValue() { return value; }
-            @Override public V setValue(V value) { throw new UnsupportedOperationException(); }
+            @Override
+            public K getKey() {
+              return key;
+            }
+
+            @Override
+            public V getValue() {
+              return value;
+            }
+
+            @Override
+            public V setValue(V value) {
+              throw new UnsupportedOperationException();
+            }
-        
+
-    
+
-    
+
-      
+
-      
+
-      
+
-      
+
-    
+
-    
+
-      
+
-        GemFireCacheImpl cache = GemFireCacheImpl.getForPdx("PDX registry is unavailable because the Cache has been closed.");
+        GemFireCacheImpl cache = GemFireCacheImpl
+            .getForPdx("PDX registry is unavailable because the Cache has been closed.");
-      
+
-      
+
-  
+
-   * Reads a snapshot file.  
+   * Reads a snapshot file.
-    
+
-    
+
-    
+
-    
+
-      
+
-          throw new IOException(LocalizedStrings.Snapshot_UNSUPPORTED_SNAPSHOT_VERSION_0.toLocalizedString(SNAP_VER_1) + ": " + in);
-          
+          throw new IOException(
+              LocalizedStrings.Snapshot_UNSUPPORTED_SNAPSHOT_VERSION_0.toLocalizedString(SNAP_VER_1)
+                  + ": " + in);
+
-            throw new IOException(LocalizedStrings.Snapshot_UNRECOGNIZED_FILE_TYPE_0.toLocalizedString(Arrays.toString(format)) + ": " + in);
+            throw new IOException(LocalizedStrings.Snapshot_UNRECOGNIZED_FILE_TYPE_0
+                .toLocalizedString(Arrays.toString(format)) + ": " + in);
-          
+
-          
+
-          
+
-          throw new IOException(LocalizedStrings.Snapshot_UNRECOGNIZED_FILE_VERSION_0.toLocalizedString(version) + ": " + in);
+          throw new IOException(
+              LocalizedStrings.Snapshot_UNRECOGNIZED_FILE_VERSION_0.toLocalizedString(version)
+                  + ": " + in);
-      
-      // check compatibility with the existing pdx types so we don't have to 
+
+      // check compatibility with the existing pdx types so we don't have to
-      
+
-    
+
+     * 
+     * 
-    
+
+     * 
-    
+
-     * Reads a snapshot entry.  If the last entry has been read, a null value
-     * will be returned.
+     * Reads a snapshot entry. If the last entry has been read, a null value will be returned.
-      
+
-    
+
-    
+
-    
+
-      
+
-    
+
-      
+

UPD66 UPD66 DEL66