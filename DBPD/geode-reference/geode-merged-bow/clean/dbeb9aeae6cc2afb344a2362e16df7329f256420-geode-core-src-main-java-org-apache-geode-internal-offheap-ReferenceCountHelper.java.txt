Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class provides static methods to help
- * debug off-heap reference count problems.
- * To enable reference count tracking set: -Dgemfire.trackOffHeapRefCounts=true.
- * To enable free operation tracking set: -Dgemfire.trackOffHeapFreedRefCounts=true.
+ * This class provides static methods to help debug off-heap reference count problems. To enable
+ * reference count tracking set: -Dgemfire.trackOffHeapRefCounts=true. To enable free operation
+ * tracking set: -Dgemfire.trackOffHeapFreedRefCounts=true.
-  public static final String TRACK_OFFHEAP_REFERENCES = DistributionConfig.GEMFIRE_PREFIX + "trackOffHeapRefCounts";
-  public static final String TRACK_OFFHEAP_FREES = DistributionConfig.GEMFIRE_PREFIX + "trackOffHeapFreedRefCounts";
+  public static final String TRACK_OFFHEAP_REFERENCES =
+      DistributionConfig.GEMFIRE_PREFIX + "trackOffHeapRefCounts";
+  public static final String TRACK_OFFHEAP_FREES =
+      DistributionConfig.GEMFIRE_PREFIX + "trackOffHeapFreedRefCounts";
-  private static final ReferenceCountHelperImpl inst = new ReferenceCountHelperImpl(Boolean.getBoolean(TRACK_OFFHEAP_REFERENCES), Boolean.getBoolean(TRACK_OFFHEAP_FREES));
+  private static final ReferenceCountHelperImpl inst = new ReferenceCountHelperImpl(
+      Boolean.getBoolean(TRACK_OFFHEAP_REFERENCES), Boolean.getBoolean(TRACK_OFFHEAP_FREES));
-  
+
-  
+
-   * Optional call to tell the tracker the logical "owner"
-   * of the reference count. For example you could set
-   * the particular EntryEventImpl instance that incremented
-   * the reference count and is responsible for decrementing it.
-   * Calling this method is a noop if !trackReferenceCounts.
+   * Optional call to tell the tracker the logical "owner" of the reference count. For example you
+   * could set the particular EntryEventImpl instance that incremented the reference count and is
+   * responsible for decrementing it. Calling this method is a noop if !trackReferenceCounts.
-   * Create, set, and return a generic reference count owner object.
-   * Calling this method is a noop and returns null if !trackReferenceCounts.
+   * Create, set, and return a generic reference count owner object. Calling this method is a noop
+   * and returns null if !trackReferenceCounts.
-   * Call this method before incrementing a reference count
-   * if you know that tracking is not needed because you know
-   * that the allocate and free will always be done in the same
-   * code block.
-   * Callers of this method must also call unskipRefCountTracking
-   * after the allocation or free is done.
+   * Call this method before incrementing a reference count if you know that tracking is not needed
+   * because you know that the allocate and free will always be done in the same code block. Callers
+   * of this method must also call unskipRefCountTracking after the allocation or free is done.
-   * Returns a list of any reference count tracking information for
-   * the given Chunk address.
+   * Returns a list of any reference count tracking information for the given Chunk address.
-   */  
+   */
-   * Called internally when free operations are tracked to record
-   * that a free has happened of the given address.
+   * Called internally when free operations are tracked to record that a free has happened of the
+   * given address.
-  
+
-   * Returns the thread local count of the
-   * number of times ref count has been updated
+   * Returns the thread local count of the number of times ref count has been updated
-   * Returns a list of any free operation tracking information.
-   * This is used to describe who did the previous free(s) when an extra one
-   * ends up being done and fails.
+   * Returns a list of any free operation tracking information. This is used to describe who did the
+   * previous free(s) when an extra one ends up being done and fails.
-   * Returns a list of any reference count tracking information for
-   * the given Chunk address without locking.
+   * Returns a list of any reference count tracking information for the given Chunk address without
+   * locking.

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66