Merge branch 'release/1.5.0'

-import java.nio.file.Paths;
+import org.apache.logging.log4j.Logger;
-import org.apache.geode.distributed.internal.InternalDistributedSystem;
-import org.apache.geode.internal.NanoTimer;
+import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.internal.shared.NativeCalls.RehashServerOnSIGHUP;
+  private static final Logger logger = LogService.getLogger();
+
-    static final Map<String, String> javaEnv = getModifiableJavaEnv();
-
-    static interface SignalHandler extends Callback {
+    interface SignalHandler extends Callback {
-     * @see NativeCalls#setEnvironment(String, String)
-     */
-    @Override
-    public synchronized void setEnvironment(final String name, final String value) {
-      if (name == null) {
-        throw new UnsupportedOperationException("setEnvironment() for name=NULL");
-      }
-      int res = -1;
-      Throwable cause = null;
-      try {
-        if (value != null) {
-          res = setenv(name, value, 1);
-        } else {
-          res = unsetenv(name);
-        }
-      } catch (LastErrorException le) {
-        cause = new NativeErrorException(le.getMessage(), le.getErrorCode(), le.getCause());
-      }
-      if (res != 0) {
-        throw new IllegalArgumentException(
-            "setEnvironment: given name=" + name + " (value=" + value + ')', cause);
-      }
-      // also change in java cached map
-      if (javaEnv != null) {
-        if (value != null) {
-          javaEnv.put(name, value);
-        } else {
-          javaEnv.remove(name);
-        }
-      }
-    }
-
-    /**
-      final org.apache.geode.LogWriter logger;
-      if (InternalDistributedSystem.getAnyInstance() != null) {
-        logger = InternalDistributedSystem.getAnyInstance().getLogWriter();
-      } else {
-        logger = null;
-      }
-
-      if (logger != null && logger.fineEnabled()) {
-        logger.fine("DEBUG preBlow called for path = " + path);
+      if (logger.isDebugEnabled()) {
+        logger.debug("DEBUG preBlow called for path = " + path);
-        if (logger != null && logger.fineEnabled()) {
-          logger.fine("DEBUG preBlow super.preBlow 1 called for path = " + path);
+        if (logger.isDebugEnabled()) {
+          logger.debug("DEBUG preBlow super.preBlow 1 called for path = " + path);
-          if (logger != null && logger.fineEnabled()) {
-            logger.fine("DEBUG preBlow super.preBlow 2 called as path = " + path
+          if (logger.isDebugEnabled()) {
+            logger.debug("DEBUG preBlow super.preBlow 2 called as path = " + path
-        if (logger != null && logger.fineEnabled()) {
-          logger.fine("DEBUG preBlow posix_fallocate called for path = " + path
+        if (logger.isDebugEnabled()) {
+          logger.debug("DEBUG preBlow posix_fallocate called for path = " + path
-        if (logger != null && logger.fineEnabled()) {
-          logger.fine("DEBUG preBlow posix_fallocate called for path = " + path + " and ret = "
+        if (logger.isDebugEnabled()) {
+          logger.debug("DEBUG preBlow posix_fallocate called for path = " + path + " and ret = "
-          if (logger != null && logger.infoEnabled()) {
-            logger.fine("DEBUG preBlow super.preBlow 3 called for path = " + path);
+          if (logger.isDebugEnabled()) {
+            logger.debug("DEBUG preBlow super.preBlow 3 called for path = " + path);
-      final org.apache.geode.LogWriter logger;
-      if (InternalDistributedSystem.getAnyInstance() != null) {
-        logger = InternalDistributedSystem.getAnyInstance().getLogWriter();
-      } else {
-        logger = null;
-      }
-          if (logger != null && logger.fineEnabled()) {
-            logger.fine("DEBUG isOnLocalFileSystem got ex = " + le + " msg = " + le.getMessage());
+          if (logger.isDebugEnabled()) {
+            logger.debug("DEBUG isOnLocalFileSystem got ex = " + le + " msg = " + le.getMessage());
-      protected List<?> getFieldOrder() {
+      protected List<String> getFieldOrder() {
-    private static final Map<String, String> javaEnv = getModifiableJavaEnvWIN();
-
-     * @see NativeCalls#setEnvironment(String, String)
-     */
-    @Override
-    public synchronized void setEnvironment(final String name, final String value) {
-      if (name == null) {
-        throw new UnsupportedOperationException("setEnvironment() for name=NULL");
-      }
-      boolean res = false;
-      Throwable cause = null;
-      try {
-        res = Kernel32.SetEnvironmentVariableA(name, value);
-      } catch (LastErrorException le) {
-        // error code ERROR_ENVVAR_NOT_FOUND (203) indicates variable was not
-        // found so ignore
-        if (value == null && le.getErrorCode() == 203) {
-          res = true;
-        } else {
-          cause = new NativeErrorException(le.getMessage(), le.getErrorCode(), le.getCause());
-        }
-      }
-      if (!res) {
-        throw new IllegalArgumentException(
-            "setEnvironment: given name=" + name + " (value=" + value + ')', cause);
-      }
-      // also change in java cached map
-      if (javaEnv != null) {
-        if (value != null) {
-          javaEnv.put(name, value);
-        } else {
-          javaEnv.remove(name);
-        }
-      }
-    }
-
-    /**

MOV26 MOV26 UPD40 UPD40 INS23 INS83 INS83 INS83 INS43 INS59 INS42 INS42 INS32 INS42 INS42 UPD74 INS32 MOV43 MOV42 UPD42 MOV42 INS32 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS32 INS32 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL12 DEL54 DEL42 DEL34 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL13 DEL27 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL40 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL33 DEL27 DEL32 DEL27 DEL42 DEL33 DEL27 DEL32 DEL27 DEL83 DEL40 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL32 DEL27 DEL76 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL23 DEL42 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL9 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL38 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL13 DEL27 DEL42 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31