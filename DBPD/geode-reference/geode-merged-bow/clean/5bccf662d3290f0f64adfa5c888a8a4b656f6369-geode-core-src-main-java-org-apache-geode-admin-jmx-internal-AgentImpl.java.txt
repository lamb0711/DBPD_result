GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.i18n.StringId;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-          LocalizedStrings.AgentImpl_AGENTCONFIG_MUST_NOT_BE_NULL.toLocalizedString());
+          "AgentConfig must not be null");
-      String s = LocalizedStrings.AgentImpl_WHILE_CREATING_OBJECTNAME_0
-          .toLocalizedString(new Object[] {this.mbeanName});
+      String s = String.format("While creating ObjectName:  %s",
+          new Object[] {this.mbeanName});
-      logger.info(LocalizedMessage
-          .create(LocalizedStrings.AgentImpl_FAILED_TO_INITIALIZE_MEMBERINFOWITHSTATSMBEAN), e);
+      logger.info("Failed to initialize MemberInfoWithStatsMBean.", e);
-      logger.info(LocalizedMessage
-          .create(LocalizedStrings.AgentImpl_FAILED_TO_INITIALIZE_MEMBERINFOWITHSTATSMBEAN), e);
+      logger.info("Failed to initialize MemberInfoWithStatsMBean.", e);
-      logger.info(LocalizedMessage
-          .create(LocalizedStrings.AgentImpl_FAILED_TO_INITIALIZE_MEMBERINFOWITHSTATSMBEAN), e);
+      logger.info("Failed to initialize MemberInfoWithStatsMBean.", e);
-        logger.error(LocalizedMessage.create(LocalizedStrings.AgentImpl_AUTO_CONNECT_FAILED__0,
-            ex.getMessage()));
+        logger.error("auto connect failed:  {}",
+            ex.getMessage());
-        StringId autoConnectFailed = LocalizedStrings.AgentImpl_AUTO_CONNECT_FAILED__0;
-        logger.error(LocalizedMessage.create(autoConnectFailed, ex.getMessage()));
+        String autoConnectFailed = "auto connect failed:  {}";
+        logger.error(autoConnectFailed, ex.getMessage());
-            autoConnectFailed.toLocalizedString(new Object[] {ex.getMessage()}), ex));
+            String.format("auto connect failed:  %s", ex.getMessage()), ex));
-    logger.info(LocalizedMessage.create(LocalizedStrings.AgentImpl_GEMFIRE_JMX_AGENT_IS_RUNNING));
+    logger.info("GemFire JMX Agent is running...");
-      logger.info(LocalizedMessage.create(LocalizedStrings.AgentImpl_STOPPING_JMX_AGENT));
+      logger.info("Stopping JMX agent");
-      logger.info(LocalizedMessage.create(LocalizedStrings.AgentImpl_AGENT_HAS_STOPPED));
+      logger.info("Agent has stopped");
-      return LocalizedStrings.AgentImpl_NO_LOG_FILE_CONFIGURED_LOG_MESSAGES_WILL_BE_DIRECTED_TO_STDOUT
-          .toLocalizedString();
+      return "No log file configured, log messages will be directed to stdout.";
-            .append("\n" + LocalizedStrings.AgentImpl_TAIL_OF_CHILD_LOG.toLocalizedString() + "\n");
+            .append("\n" + "-------------------- tail of child log --------------------" + "\n");
-          LocalizedStrings.AgentImpl_THE_FILE_0_IS_A_DIRECTORY.toLocalizedString(f));
+          String.format("The file  %s  is a directory.", f));
-            LocalizedStrings.AgentImpl_THE_DIRECTORY_0_DOES_NOT_EXIST.toLocalizedString(parent));
+            String.format("The directory  %s  does not exist.", parent));
-      return LocalizedStrings.AgentImpl_COULD_NOT_TAIL_0_BECAUSE_1
-          .toLocalizedString(new Object[] {f, ex});
+      return String.format("Could not tail %s because: %s",
+          new Object[] {f, ex});
-        LocalizedStrings.AgentImpl_AGENT_CONFIG_PROPERTY_FILE_NAME_0
-            .toLocalizedString(AgentConfigImpl.retrievePropertyFile()));
+        String.format("Agent config property file name: %s",
+            AgentConfigImpl.retrievePropertyFile()));
-          .println(LocalizedStrings.AgentImpl_FAILED_READING_CONFIGURATION_0.toLocalizedString(ex));
+          .println(String.format("Failed reading configuration: %s", ex));
-      logger.info(LocalizedMessage.create(LocalizedStrings.AgentImpl_0__IS_ALREADY_REGISTERED,
-          registryName));
+      logger.info("{}  is already registered.",
+          registryName);
-      logger.info(LocalizedMessage.create(LocalizedStrings.AgentImpl_SETTING_0,
-          new StringBuilder(rmiStubServerNameKey).append(" = ").append(rmiBindAddress)));
+      logger.info((new StringBuilder("Setting ").append(rmiStubServerNameKey).append(" = ")
+          .append(rmiBindAddress).toString()));
-        logger.info(LocalizedMessage.create(
-            LocalizedStrings.AgentImpl_RMICONNECTORSERVER_ALREADY_REGISTERED_AS__0, objName));
+        logger.info("RMIConnectorServer already registered as {}", objName);
-      logger.error(LocalizedStrings.AgentImpl_FAILED_TO_START_RMICONNECTORSERVER, t);
+      logger.error("Failed to start RMIConnectorServer:", t);
-          LocalizedStrings.AgentImpl_FAILED_TO_START_RMI_SERVICE.toLocalizedString(), t);
+          "Failed to start RMI service, verify RMI configuration properties", t);
-        logger.info(LocalizedMessage
-            .create(LocalizedStrings.AgentImpl_SNMPADAPTOR_ALREADY_REGISTERED_AS__0, objName));
+        logger.info("SnmpAdaptor already registered as  {}", objName);
-            LocalizedStrings.AgentImpl_SNMPDIRECTORY_MUST_BE_SPECIFIED_BECAUSE_SNMP_IS_ENABLED
-                .toLocalizedString());
+            "snmp-directory must be specified because SNMP is enabled");
-            LocalizedStrings.AgentImpl_SNMPDIRECTORY_DOES_NOT_EXIST.toLocalizedString());
+            "snmp-directory does not exist");
-      logger.error(LocalizedMessage
-          .create(LocalizedStrings.AgentImpl_FAILED_TO_START_SNMPADAPTOR__0, t.getMessage()));
-      throw new StartupException(LocalizedStrings.AgentImpl_FAILED_TO_START_SNMPADAPTOR__0
-          .toLocalizedString(t.getMessage()), t);
+      logger.error("Failed to start SnmpAdaptor:  {}", t.getMessage());
+      throw new StartupException(String.format("Failed to start SnmpAdaptor:  %s",
+          t.getMessage()), t);
-        logger.info(LocalizedMessage
-            .create(LocalizedStrings.AgentImpl_HTTPADAPTOR_ALREADY_REGISTERED_AS__0, objName));
+        logger.info("HttpAdaptor already registered as  {}", objName);
-            LocalizedMessage.create(LocalizedStrings.AgentImpl_HTTP_ADAPTOR_LISTENING_ON_PORT__0,
-                this.agentConfig.getHttpPort()));
+            "HTTP adaptor listening on port: {}",
+            this.agentConfig.getHttpPort());
-        logger.error(LocalizedMessage.create(LocalizedStrings.AgentImpl_INCORRECT_PORT_VALUE__0,
-            this.agentConfig.getHttpPort()));
+        logger.error("Incorrect port value  {}",
+            this.agentConfig.getHttpPort());
-        logger.info(LogMarker.CONFIG_MARKER, LocalizedMessage
-            .create(LocalizedStrings.AgentImpl_HTTP_ADAPTOR_LISTENING_ON_ADDRESS__0, host));
+        logger.info(LogMarker.CONFIG_MARKER, "HTTP adaptor listening on address:  {}", host);
-        logger.error(LocalizedMessage.create(LocalizedStrings.AgentImpl_INCORRECT_NULL_HOSTNAME));
+        logger.error("Incorrect null hostname");
-      logger.error(LocalizedMessage
-          .create(LocalizedStrings.AgentImpl_FAILED_TO_START_HTTPADAPTOR__0, t.getMessage()));
-      throw new StartupException(LocalizedStrings.AgentImpl_FAILED_TO_START_HTTPADAPTOR__0
-          .toLocalizedString(t.getMessage()), t);
+      logger.error("Failed to start HttpAdaptor:  {}", t.getMessage());
+      throw new StartupException(String.format("Failed to start HttpAdaptor:  %s",
+          t.getMessage()), t);
-      logger.info(LocalizedMessage
-          .create(LocalizedStrings.AgentImpl_XSLTPROCESSOR_ALREADY_REGISTERED_AS__0, objName));
+      logger.info("XsltProcessor already registered as  {}", objName);

INS45 MOV8 INS45 UPD42 INS42 INS45 INS32 INS8 MOV8 INS45 INS45 INS45 MOV43 INS42 INS42 INS36 INS53 MOV32 MOV21 MOV32 INS45 MOV42 INS45 INS45 INS45 INS21 MOV21 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 MOV42 MOV32 MOV42 INS45 INS45 INS14 UPD42 INS42 INS45 MOV32 MOV32 MOV32 UPD42 INS42 INS45 MOV32 UPD42 INS42 INS45 INS32 UPD43 MOV32 MOV43 UPD42 INS42 INS45 MOV32 UPD42 INS45 MOV42 INS45 MOV42 MOV43 INS45 INS45 UPD42 UPD42 INS45 INS45 MOV42 UPD42 UPD42 UPD40 INS45 UPD42 UPD42 INS45 INS45 MOV42 INS45 UPD42 UPD42 INS45 INS42 INS42 INS45 MOV32 UPD42 INS45 UPD42 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 UPD42 MOV32 INS42 INS45 UPD42 UPD42 INS45 INS42 INS45 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL32 DEL42 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL45 DEL42 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL40 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL42 DEL32 DEL14 DEL53 DEL8 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32