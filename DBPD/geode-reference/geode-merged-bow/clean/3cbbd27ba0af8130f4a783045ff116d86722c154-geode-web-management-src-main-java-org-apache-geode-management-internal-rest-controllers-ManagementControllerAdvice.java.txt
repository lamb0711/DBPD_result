GEODE-7075: 'class' field should not be part of json results (#4011)


+import static org.apache.geode.management.internal.Constants.INCLUDE_CLASS_HEADER;
+
+import java.nio.charset.Charset;
+import java.util.List;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.core.MethodParameter;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.MediaType;
+import org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter;
+import org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean;
+import org.springframework.http.server.ServerHttpRequest;
+import org.springframework.http.server.ServerHttpResponse;
+import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;
-public class ManagementControllerAdvice {
+public class ManagementControllerAdvice implements ResponseBodyAdvice<Object> {
+  @Autowired
+  private Jackson2ObjectMapperFactoryBean objectMapperFactory;
+
+  @Override
+  public boolean supports(MethodParameter returnType, Class converterType) {
+    // only invoke our beforeBodyWrite for conversions to JSON (not String, etc)
+    return AbstractJackson2HttpMessageConverter.class.isAssignableFrom(converterType);
+  }
+
+  @Override
+  public Object beforeBodyWrite(Object body, MethodParameter returnType,
+      MediaType selectedContentType, Class selectedConverterType,
+      ServerHttpRequest request, ServerHttpResponse response) {
+    List<String> values = request.getHeaders().get(INCLUDE_CLASS_HEADER);
+    boolean includeClass = values != null && values.contains("true");
+
+    try {
+      ObjectMapper objectMapper = objectMapperFactory.getObject();
+      String json = objectMapper.writeValueAsString(body);
+      if (!includeClass) {
+        json = removeClassFromJsonText(json);
+      }
+      response.getHeaders().add(HttpHeaders.CONTENT_TYPE,
+          "application/json; charset=" + Charset.defaultCharset().toString());
+      response.getBody().write(json.getBytes());
+      response.close();
+      return null;
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  static String removeClassFromJsonText(String json) {
+    // remove entire key and object if class was the only attribute present
+    // otherwise remove just the class attribute
+    return json
+        .replaceAll("\"[^\"]*\":\\{\"class\":\"[^\"]*\"},?", "")
+        .replaceAll("\"class\":\"[^\"]*\",", "");
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS74 INS23 INS31 INS31 INS31 INS43 INS43 INS78 INS83 INS43 INS59 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS54 INS42 INS43 INS42 INS41 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS59 INS39 INS59 INS8 INS12 INS42 INS32 INS57 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS27 INS60 INS60 INS25 INS21 INS21 INS21 INS41 INS44 INS8 INS32 INS42 INS45 INS45 INS43 INS42 INS42 INS32 INS42 INS42 INS27 INS32 INS43 INS59 INS43 INS59 INS38 INS8 INS32 INS32 INS32 INS33 INS43 INS42 INS53 INS42 INS42 INS45 INS45 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS21 INS32 INS42 INS40 INS27 INS32 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42