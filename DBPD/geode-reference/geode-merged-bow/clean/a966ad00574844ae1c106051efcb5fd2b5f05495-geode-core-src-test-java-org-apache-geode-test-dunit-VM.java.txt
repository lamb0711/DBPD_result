GEODE-4876: Move VM APIs from Host to VM

Deprecate Host.

+import static org.apache.geode.test.dunit.standalone.DUnitLauncher.NUM_VMS;
+
+import java.util.List;
- * This class represents a Java Virtual Machine that runs on a host.
+ * This class represents a Java Virtual Machine that runs in a DistributedTest.
-@SuppressWarnings("serial")
+@SuppressWarnings("serial,unused")
+  public static final int CONTROLLER_VM = -1;
+
+  public static final int DEFAULT_VM_COUNT = NUM_VMS;
+
-   * restart an unavailable VM
+   * Returns true if executed from the main JUnit VM.
-  public synchronized void makeAvailable() {
-    if (!available) {
-      available = true;
-      bounce();
-    }
+  public static boolean isControllerVM() {
+    return getCurrentVMNum() == CONTROLLER_VM;
-   * Returns the total number of {@code VM}s on all {@code Host}s (note that DUnit currently only
-   * supports one {@code Host}).
+   * Returns true if executed from a DUnit VM. Returns false if executed from the main JUnit VM.
+   */
+  public static boolean isVM() {
+    return getCurrentVMNum() != CONTROLLER_VM;
+  }
+
+  /**
+   * Returns a VM that runs in this DistributedTest.
+   *
+   * @param whichVM A zero-based identifier of the VM
+   */
+  public static VM getVM(int whichVM) {
+    return Host.getHost(0).getVM(whichVM);
+  }
+
+  /**
+   * Returns a collection of all DistributedTest VMs.
+   */
+  public static List<VM> getAllVMs() {
+    return Host.getHost(0).getAllVMs();
+  }
+
+  /**
+   * Returns the number of VMs that run in this DistributedTest.
-    int count = 0;
-    for (int h = 0; h < Host.getHostCount(); h++) {
-      Host host = Host.getHost(h);
-      count += host.getVMCount();
-    }
-    return count;
+    return Host.getHost(0).getVMCount();
+  }
+
+  /**
+   * Returns the DistributedTest Locator VM.
+   */
+  public static VM getLocator() {
+    return Host.getLocator();
+  }
+
+  /**
+   * Returns the machine name hosting this DistributedTest.
+   */
+  public static String getHostName() {
+    return Host.getHost(0).getHostName();
+   * Restart an unavailable VM
+   */
+  public synchronized void makeAvailable() {
+    if (!available) {
+      available = true;
+      bounce();
+    }
+  }
+
+  /**
+  public File getWorkingDirectory() {
+    return DUnitEnv.get().getWorkingDirectory(getVersion(), getId());
+  }
+
-  public File getWorkingDirectory() {
-    return DUnitEnv.get().getWorkingDirectory(getVersion(), getId());
-  }
-

INS26 INS26 MOV31 MOV31 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD45 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS29 MOV83 MOV83 INS43 UPD42 MOV42 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS8 INS29 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS8 INS29 INS83 INS83 INS43 INS42 INS8 UPD66 INS42 INS38 INS42 INS42 INS65 INS41 INS65 INS41 INS65 INS65 INS42 INS39 INS42 INS41 INS65 INS43 INS43 INS41 INS65 INS41 INS65 UPD42 MOV42 INS41 INS65 INS42 INS41 INS34 UPD66 MOV66 INS27 UPD66 MOV66 INS27 UPD66 MOV66 INS42 UPD66 MOV66 INS32 INS66 INS42 INS42 INS32 INS66 INS32 INS66 INS32 INS66 INS32 UPD66 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS34 MOV42 UPD42 MOV42 INS34 UPD42 MOV42 UPD42 MOV42 INS34 DEL65 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL39 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL32 DEL27 DEL42 DEL37 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31