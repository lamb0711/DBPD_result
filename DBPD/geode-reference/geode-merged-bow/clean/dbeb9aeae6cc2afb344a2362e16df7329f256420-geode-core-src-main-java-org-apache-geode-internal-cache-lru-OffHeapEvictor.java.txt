Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Triggers centralized eviction(asynchronously) when the ResourceManager sends
- * an eviction event for off-heap regions. This is registered with the ResourceManager.
+ * Triggers centralized eviction(asynchronously) when the ResourceManager sends an eviction event
+ * for off-heap regions. This is registered with the ResourceManager.
-  
+
-  
+
-  
+
-    super(gemFireCache);    
+    super(gemFireCache);
-    float evictionBurstPercentage = Float
-        .parseFloat(System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "HeapLRUCapacityController.evictionBurstPercentage", "0.4"));
-    
+    float evictionBurstPercentage = Float.parseFloat(System.getProperty(
+        DistributionConfig.GEMFIRE_PREFIX + "HeapLRUCapacityController.evictionBurstPercentage",
+        "0.4"));
+
-    
+
-    if(null == allocator) {
-      throw new IllegalStateException(LocalizedStrings.MEMSCALE_EVICTION_INIT_FAIL.toLocalizedString());
+    if (null == allocator) {
+      throw new IllegalStateException(
+          LocalizedStrings.MEMSCALE_EVICTION_INIT_FAIL.toLocalizedString());
-    
-    bytesToEvictWithEachBurst = (long)(allocator.getTotalMemory() * 0.01 * evictionBurstPercentage);       
+
+    bytesToEvictWithEachBurst =
+        (long) (allocator.getTotalMemory() * 0.01 * evictionBurstPercentage);
-  
+
-    
+
-  
+
-    return (region.getEvictionAttributes().getAlgorithm().isLRUHeap() 
-        && (region.getDataStore() != null) 
-        && region.getAttributes().getOffHeap());
+    return (region.getEvictionAttributes().getAlgorithm().isLRUHeap()
+        && (region.getDataStore() != null) && region.getAttributes().getOffHeap());
-  
+
-    return (region.getEvictionAttributes().getAlgorithm().isLRUHeap() 
+    return (region.getEvictionAttributes().getAlgorithm().isLRUHeap()
-  
+
-  
+
-  }  
+  }

UPD66 UPD66