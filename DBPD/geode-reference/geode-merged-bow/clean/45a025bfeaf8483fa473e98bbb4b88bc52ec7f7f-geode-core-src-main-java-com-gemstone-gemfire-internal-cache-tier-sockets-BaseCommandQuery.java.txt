Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

-import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
-  protected static boolean processQuery(Message msg, Query query,
+  protected boolean processQuery(Message msg, Query query,
-  protected static boolean processQueryUsingParams(Message msg, Query query,
+  protected boolean processQueryUsingParams(Message msg, Query query,
-        GeodeSecurityUtil.authorizeRegionRead(regionName.toString());
+        this.securityService.authorizeRegionRead(regionName.toString());
-        // post process, iterate through the result for post processing
-        if(GeodeSecurityUtil.needPostProcess()) {
-          List list = selectResults.asList();
-          for (Iterator<Object> valItr = list.iterator(); valItr.hasNext(); ) {
-            Object value = valItr.next();
-            if (value == null)
-              continue;
-
-            if (value instanceof CqEntry) {
-              CqEntry cqEntry = (CqEntry) value;
-              Object cqNewValue = GeodeSecurityUtil.postProcess(null, cqEntry.getKey(), cqEntry.getValue());
-              if (!cqEntry.getValue().equals(cqNewValue)) {
-                selectResults.remove(value);
-                selectResults.add(new CqEntry(cqEntry.getKey(), cqNewValue));
-              }
-            } else {
-              Object newValue = GeodeSecurityUtil.postProcess(null, null, value);
-              if (!value.equals(newValue)) {
-                selectResults.remove(value);
-                selectResults.add(newValue);
-              }
-            }
-          }
-        }
-
-        
+
-     
+
-        
+
-          
+
-            collectionType = new CollectionTypeImpl(Collection.class, 
+            collectionType = new CollectionTypeImpl(Collection.class,
-            isStructs = collectionType.getElementType().isStructType();              
+            isStructs = collectionType.getElementType().isStructType();
- 
+
-        
+
-        
+
-        
+
-      // resetting the flag may cause inconsistency. 
+      // resetting the flag may cause inconsistency.
-  
-  private static boolean sendCqResultsWithKey(ServerConnection servConn) {
+
+  private boolean sendCqResultsWithKey(ServerConnection servConn) {
-  protected static void sendCqResponse(int msgType, String msgStr, int txId,
+  protected void sendCqResponse(int msgType, String msgStr, int txId,
-  
-  private static void sendResultsAsObjectArray(SelectResults selectResults,
+
+  private void sendResultsAsObjectArray(SelectResults selectResults,
-          }    
+          }
-  
+
-          }      
+          }
-        
+
-  private static void sendResultsAsObjectPartList(int numberOfChunks,
+  private void sendResultsAsObjectPartList(int numberOfChunks,
-          }    
+          }
+
-  
+
-          }      
+          }
-      
+
-  
-  private static void addToObjectPartList(ObjectPartList serializedObjs,
+
+  private void addToObjectPartList(ObjectPartList serializedObjs,
-
-        if (value instanceof CachedDeserializable) {
-          serializedValueObjs.addPart(null,
-              ((CachedDeserializable) value).getSerializedValue(),
-              ObjectPartList.OBJECT, null);
-        } else {
-          addDeSerializedObjectToObjectPartList(serializedValueObjs, value);
-        }
+        addObjectToPartList(serializedValueObjs, null, value);
-      for (Object value : values) {
-        if (value instanceof CachedDeserializable) {
-          serializedValueObjs.addPart(null,
-              ((CachedDeserializable) value).getSerializedValue(),
-              ObjectPartList.OBJECT, null);
-        } else {
-          addDeSerializedObjectToObjectPartList(serializedValueObjs, value);
-        }
+      for(int i=0; i<values.length; i+=2) {
+        Object key = values[i];
+        Object value = values[i+1];
+        addObjectToPartList(serializedValueObjs, key, value);
-    } else if (res instanceof CachedDeserializable) {
-      serializedObjs.addPart(null,
-          ((CachedDeserializable) res).getSerializedValue(),
-          ObjectPartList.OBJECT, null);
-    } else { // for deserialized objects
-      addDeSerializedObjectToObjectPartList(serializedObjs, res);
+    } else { //for deserialized objects
+      addObjectToPartList(serializedObjs, null, res);
-  
-  private static void addDeSerializedObjectToObjectPartList(
-      ObjectPartList objPartList, Object obj) {
-    if (obj instanceof byte[]) {
-      objPartList.addPart(null, obj, ObjectPartList.BYTES, null);
-    } else {
-      objPartList.addPart(null, obj, ObjectPartList.OBJECT, null);
+
+  private void addObjectToPartList(ObjectPartList objPartList, Object key, Object value) {
+    Object object = value;
+    boolean isObject = true;
+    if (value instanceof CachedDeserializable) {
+      object = ((CachedDeserializable)value).getSerializedValue();
+    else if(value instanceof byte[]){
+      isObject = false;
+    }
+
+    object = this.securityService.postProcess(null, key, object, isObject);
+    if(key!=null){
+      objPartList.addPart(null, key, ObjectPartList.OBJECT, null);
+    }
+    objPartList.addPart(null, object, isObject?ObjectPartList.OBJECT:ObjectPartList.BYTES, null);

UPD42 MOV44 MOV43 UPD42 INS60 INS60 MOV25 INS21 INS25 MOV21 MOV43 INS59 INS39 INS59 INS25 INS7 INS27 MOV8 MOV8 INS42 INS42 INS42 INS9 INS62 MOV8 INS42 INS32 INS42 INS33 UPD42 INS16 INS24 INS7 INS42 MOV5 INS22 INS42 INS33 INS42 INS42 INS42 INS42 INS40 INS40 INS21 INS58 INS27 INS7 INS8 INS42 MOV32 INS7 INS52 INS42 UPD42 UPD40 INS32 INS39 INS59 INS42 INS40 INS42 INS34 INS60 INS60 MOV21 UPD42 INS33 INS42 INS9 INS22 INS42 INS42 INS33 INS42 INS42 INS34 MOV43 INS59 MOV43 INS59 INS52 INS42 INS42 INS2 INS42 INS2 UPD42 INS42 INS42 INS42 INS42 INS27 INS42 INS34 DEL40 DEL26 DEL83 DEL83 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL18 DEL25 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL33 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL33 DEL33 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL24 DEL8 DEL25 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL33 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL40 DEL33 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL33 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL40 DEL33 DEL32 DEL21 DEL8 DEL25 DEL83 DEL42 DEL42 DEL33 DEL40 DEL33 DEL32 DEL42 DEL42 DEL42 DEL32 DEL40 DEL42 DEL62 DEL8 DEL25