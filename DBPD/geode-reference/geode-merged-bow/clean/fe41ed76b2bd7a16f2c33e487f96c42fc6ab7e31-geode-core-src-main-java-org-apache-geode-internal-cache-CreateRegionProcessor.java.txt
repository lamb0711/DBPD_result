GEODE-2632: change dependencies on GemFireCacheImpl to InternalCache

* misc cleanup of code where possible

-
+import org.apache.geode.cache.DynamicRegionFactory;
+import org.apache.geode.internal.cache.partitioned.Bucket;
-
-        // GemFireCache cache = (GemFireCache)this.newRegion.getCache();
-        // if (cache.isClosing()) {
-        // throw new CacheClosedException("Cannot create a region when the cache is closing");
-        // }
-
-
-      return ((BucketRegion) this.newRegion).getBucketAdvisor().adviseProfileExchange();
+      return ((Bucket) this.newRegion).getBucketAdvisor().adviseProfileExchange();
-
+    // nothing
+
-
-        GemFireCacheImpl cache = (GemFireCacheImpl) CacheFactory.getInstance(dm.getSystem());
+        InternalCache cache = (InternalCache) CacheFactory.getInstance(dm.getSystem());
-      } catch (PRLocallyDestroyedException fre) {
+      } catch (PRLocallyDestroyedException ignore) {
-      } catch (RegionDestroyedException e) {
+      } catch (RegionDestroyedException ignore) {
-      } catch (CancelException e) {
+      } catch (CancelException ignore) {
-
-
-                .toLocalizedString(
-                    new Object[] {regionPath, Boolean.valueOf(this.concurrencyChecksEnabled), myId,
-                        Boolean.valueOf(otherCCEnabled)});
+                .toLocalizedString(regionPath, this.concurrencyChecksEnabled, myId, otherCCEnabled);
-        if (!rgn.getFullPath().contains(DynamicRegionFactoryImpl.dynamicRegionListName)) {
+        if (!rgn.getFullPath().contains(DynamicRegionFactory.dynamicRegionListName)) {
-                  .toLocalizedString(
-                      new Object[] {this.regionPath, profile.scope, myId, otherScope});
+                  .toLocalizedString(this.regionPath, profile.scope, myId, otherScope);
-                .toLocalizedString(
-                    new Object[] {this.regionPath, profile.isOffHeap, myId, otherIsOffHeap});
+                .toLocalizedString(this.regionPath, profile.isOffHeap, myId, otherIsOffHeap);
-      // if (profile.membershipAttributes != null) {
-      // // check to see if:
-      // // 1. we do not have DataPolicy that will take queued msgs
-      // // 2. the profile has queuing turned on
-      // // 3. we are playing one of the queued roles
-      // if (!rgn.getAttributes().getDataPolicy().withQueuedMessages()) {
-      // if (profile.membershipAttributes.getLossAction().isAllAccessWithQueuing()) {
-      // Set myRoles = rgn.getSystem().getDistributedMember().getRoles();
-      // if (!myRoles.isEmpty()) {
-      // Set intersection = new HashSet(myRoles);
-      // intersection.retainAll(profile.membershipAttributes.getRequiredRoles());
-      // if (!intersection.isEmpty()) {
-      // result = "Cannot create region " + regionPath
-      // + " with queuing because the region already exists"
-      // + " with a data-policy " + rgn.getAttributes().getDataPolicy()
-      // + " that does not allow queued messages with the roles "
-      // + intersection;
-      // }
-      // }
-      // }
-      // }
-      // } else {
-      // // see if we are queuing on this region
-      // MembershipAttributes ra = rgn.getMembershipAttributes();
-      // if (ra != null && ra.hasRequiredRoles()
-      // && ra.getLossAction().isAllAccessWithQueuing()) {
-      // // we are queuing so make sure this other guy allows queued messages
-      // // if he is playing a role we queue for.
-      // if (!profile.dataPolicy.withQueuedMessages()) {
-      // Set intersection = new HashSet(ra.getRequiredRoles());
-      // intersection.retainAll(profile.getDistributedMember().getRoles());
-      // if (!intersection.isEmpty()) {
-      // result = "Cannot create region " + regionPath
-      // + " with a data-policy " + profile.dataPolicy
-      // + " that does not allow queued messages because the region"
-      // + " already exists with queuing enabled for roles " + intersection;
-      // }
-      // }
-      // }
-      // }
-
-      StringBuffer buff = new StringBuffer();
-      buff.append("CreateRegionMessage (region='");
-      buff.append(this.regionPath);
-      buff.append("'; processorId=");
-      buff.append(this.processorId);
-      buff.append("; concurrencyChecksEnabled=").append(this.concurrencyChecksEnabled);
-      buff.append("; profile=");
-      buff.append(this.profile);
-      buff.append(")");
-      return buff.toString();
+      StringBuilder sb = new StringBuilder();
+      sb.append("CreateRegionMessage (region='");
+      sb.append(this.regionPath);
+      sb.append("'; processorId=");
+      sb.append(this.processorId);
+      sb.append("; concurrencyChecksEnabled=").append(this.concurrencyChecksEnabled);
+      sb.append("; profile=");
+      sb.append(this.profile);
+      sb.append(")");
+      return sb.toString();
-        // this.profile = new CacheProfile();
-        // this.profile.fromData(in);
-        // this.profile.toData(out);
-      StringBuffer buff = new StringBuffer();
+      StringBuilder buff = new StringBuilder();

INS26 INS26 INS40 INS40 UPD43 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 MOV32 UPD42 UPD42 UPD43 INS40 UPD42 UPD42 INS42 INS42 UPD40 MOV22 INS40 INS42 INS42 UPD43 UPD42 UPD42 MOV22 INS40 INS42 INS42 DEL40 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL4 DEL3 DEL32 DEL42 DEL43 DEL85 DEL5 DEL40 DEL42 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL40 DEL42 DEL42 DEL4 DEL3