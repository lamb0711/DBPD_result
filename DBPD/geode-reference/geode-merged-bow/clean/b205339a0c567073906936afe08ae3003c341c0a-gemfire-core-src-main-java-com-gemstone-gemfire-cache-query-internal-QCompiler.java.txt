Merge branch 'feature/GEODE-8' into develop

+import java.util.LinkedHashMap;
+import antlr.collections.AST;
+import antlr.debug.misc.ASTFrame;
+
+import com.gemstone.gemfire.cache.query.QueryException;
-      GemFireAST n = (GemFireAST)parser.getAST ();    
+      GemFireAST n = (GemFireAST)parser.getAST ();
+  
+  public void compileGroupByClause(int numOfChildren) {
+    List list = new ArrayList();
+    for (int i = 0; i < numOfChildren; i++) {
+      Object csc = this.stack.pop();
+      list.add(0, csc);
+    }
+    push(list);
+  }
-  public void select() {    
-    // List of orderBy sortCriteria
-    Object limitObject = pop();
-    CompiledValue limit;
+  public void select(Map<Integer, Object> queryComponents) {
+    
+    CompiledValue limit = null;
+    Object limitObject = queryComponents.remove(OQLLexerTokenTypes.LIMIT);
-    }
-    else {
+    } else {
-    List orderByAttrs = (List)pop();
-    // whereClause
-    CompiledValue where = (CompiledValue)pop();
-    // fromClause: list of CompiledIteratorDefs
-    List iterators = (List)pop();
-    // pop the projection attributes
-    List projAttrs = (List)pop();
-    // "COUNT" or null
-    String aggrExpr = (String)pop();
-    // "DISTINCT" or null
-    String distinct = (String)pop();
-    
-    ArrayList<String> hints = null;
-    Object hintObject = pop();
-    if (hintObject != null) {
-      hints = (ArrayList<String>) hintObject;
+    List<CompiledSortCriterion> orderByAttrs = (List<CompiledSortCriterion>) queryComponents
+        .remove(OQLLexerTokenTypes.LITERAL_order);
+
+    List iterators = (List) queryComponents
+        .remove(OQLLexerTokenTypes.LITERAL_from);
+    List projAttrs = (List) queryComponents
+        .remove(OQLLexerTokenTypes.PROJECTION_ATTRS);
+    if (projAttrs == null) {
+      // remove any * or all attribute
+      queryComponents.remove(OQLLexerTokenTypes.TOK_STAR);
+      queryComponents.remove(OQLLexerTokenTypes.LITERAL_all);
+    // "COUNT" or null
+    /*String aggrExpr = (String) queryComponents
+        .remove(OQLLexerTokenTypes.LITERAL_count);*/
-    CompiledSelect select = new CompiledSelect(distinct != null, aggrExpr != null, where,
-        iterators, projAttrs, orderByAttrs, limit, hints);
+    // "DISTINCT" or null
+    String distinct = (String) queryComponents
+        .remove(OQLLexerTokenTypes.LITERAL_distinct);
+   List<String> hints = null;
+    Object hintObject = queryComponents.remove(OQLLexerTokenTypes.LITERAL_hint);
+    if (hintObject != null) {
+      hints = (List<String>) hintObject;
+    }
+
+    List<CompiledValue> groupByClause = (List<CompiledValue>) queryComponents
+        .remove(OQLLexerTokenTypes.LITERAL_group);
+
+    // whatever remains , treat it as where
+    // whereClause
+    CompiledValue where = null;
+
+    if (queryComponents.size() == 1) {
+      where = (CompiledValue) queryComponents.values().iterator().next();
+    } else if (queryComponents.size() > 1) {
+      throw new QueryInvalidException(
+          "Unexpected/unsupported query clauses found");
+    }
+    LinkedHashMap<Integer, CompiledAggregateFunction> aggMap = identifyAggregateExpressions(projAttrs);
+    boolean isCountOnly = checkForCountOnly(aggMap, projAttrs, groupByClause);
+    if(isCountOnly) {
+      projAttrs = null;
+    }
+    CompiledSelect select = createSelect(distinct != null,
+        isCountOnly, where, iterators, projAttrs, orderByAttrs, limit,
+        hints, groupByClause, aggMap);
+  private boolean checkForCountOnly(
+      Map<Integer, CompiledAggregateFunction> aggregateMap, List projAttribs, List<CompiledValue> groupBy) {
+    if (aggregateMap != null && aggregateMap.size() == 1
+        && projAttribs.size() == 1 && groupBy == null) {
+      for (Map.Entry<Integer, CompiledAggregateFunction> entry : aggregateMap
+          .entrySet()) {
+        CompiledAggregateFunction caf = entry.getValue();
+        if (caf.getFunctionType() == OQLLexerTokenTypes.COUNT
+            && caf.getParameter() == null) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+  
+  private CompiledSelect createSelect(boolean isDistinct, boolean isCountOnly, CompiledValue where,
+      List iterators, List projAttrs, List<CompiledSortCriterion> orderByAttrs, CompiledValue limit,
+      List<String> hints,List<CompiledValue> groupByClause, LinkedHashMap<Integer, 
+      CompiledAggregateFunction> aggMap    ) {
+    if(isCountOnly || (groupByClause == null  && aggMap == null) 
+        || (aggMap == null  && orderByAttrs == null)) {
+      return  new CompiledSelect(isDistinct,
+          isCountOnly, where, iterators, projAttrs, orderByAttrs, limit,
+          hints, groupByClause);
+    }else {
+      return new CompiledGroupBySelect(isDistinct,
+          isCountOnly, where, iterators, projAttrs, orderByAttrs, limit,
+          hints, groupByClause, aggMap);
+    }
+  }
+  
+  private LinkedHashMap<Integer, CompiledAggregateFunction> identifyAggregateExpressions(List projAttribs) {
+    if(projAttribs != null) {
+      LinkedHashMap<Integer, CompiledAggregateFunction> mapping = new LinkedHashMap<Integer,CompiledAggregateFunction>();
+      int index = 0;
+      for(Object o : projAttribs) {
+        CompiledValue proj =(CompiledValue) ((Object[])o)[1];
+        if( proj.getType() == OQLLexerTokenTypes.AGG_FUNC) {
+          mapping.put(index, (CompiledAggregateFunction)proj);
+        }
+        ++index;
+      }
+      return mapping.size() == 0 ? null : mapping;
+    }else {
+      return null;
+    }
+    
+  }
+  public void aggregateFunction (CompiledValue expr, int aggFuncType, boolean distinctOnly) {
+    push (new CompiledAggregateFunction(expr, aggFuncType, distinctOnly));
+  }
+  

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS31 INS31 INS31 INS31 MOV83 MOV39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS39 INS42 INS60 INS24 INS21 INS74 INS42 MOV60 MOV60 MOV25 MOV60 MOV60 MOV60 INS25 MOV60 MOV60 MOV60 MOV25 INS60 INS60 INS25 INS60 INS60 INS25 INS60 MOV21 INS74 INS42 INS43 INS42 INS74 INS42 INS25 INS41 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS74 INS42 INS25 INS43 INS43 INS43 INS43 INS42 INS25 INS43 INS42 INS39 INS42 INS39 INS42 INS21 INS43 INS59 INS58 INS27 INS37 INS8 INS32 INS43 INS43 INS43 MOV43 MOV43 INS74 MOV43 MOV43 INS27 INS8 MOV43 UPD74 MOV74 INS43 INS74 INS59 MOV43 INS59 INS27 INS8 INS25 INS74 INS59 INS39 INS59 INS42 INS8 MOV43 INS59 INS43 INS43 INS43 INS42 INS43 INS43 INS27 INS8 INS9 INS42 INS42 INS42 INS43 INS43 INS42 INS43 MOV43 INS43 INS43 INS43 INS43 INS43 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS42 INS32 INS42 INS42 INS14 INS39 INS59 INS42 INS42 INS42 MOV60 INS21 INS42 INS42 INS42 INS42 INS42 INS33 UPD42 INS32 MOV43 INS43 UPD42 INS42 INS33 INS21 INS21 UPD43 INS42 INS43 INS43 INS42 INS11 INS42 INS33 INS32 INS34 INS21 INS27 INS8 INS43 INS43 INS43 INS42 INS32 INS42 INS32 INS21 MOV42 INS32 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS70 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS36 INS41 INS41 INS42 INS33 INS60 INS60 INS70 INS41 INS41 INS42 INS14 MOV43 INS42 INS34 INS32 UPD42 MOV42 INS42 INS40 INS42 INS74 MOV43 MOV43 INS32 INS32 MOV43 UPD42 UPD42 INS42 INS40 INS42 INS42 INS74 INS32 INS42 INS42 INS7 INS32 INS34 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 MOV27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS27 INS42 INS33 INS44 INS32 INS8 INS27 INS27 INS14 INS14 INS74 INS59 INS39 INS59 INS44 INS42 INS8 INS16 INS33 INS43 INS42 INS42 INS42 UPD42 INS42 INS42 INS34 INS42 MOV43 INS43 UPD42 INS42 INS40 UPD42 INS42 INS40 UPD42 INS42 INS40 INS42 INS42 INS40 UPD42 MOV42 INS42 INS40 UPD42 INS42 INS40 INS43 INS43 INS42 INS42 INS40 INS42 INS11 INS42 INS42 INS14 INS42 INS33 INS27 INS27 INS32 INS34 INS74 INS42 INS42 INS42 INS60 INS25 INS27 INS27 INS27 INS27 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS42 INS34 INS43 INS42 INS60 INS25 INS21 INS27 INS33 INS42 INS42 INS22 INS42 UPD74 MOV74 INS42 INS42 MOV43 INS32 INS43 INS45 UPD42 MOV42 MOV33 INS32 INS34 INS42 INS42 INS43 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS42 INS74 INS42 INS43 INS59 INS27 INS8 INS38 INS32 INS34 INS52 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS27 INS27 INS41 INS43 INS43 INS43 INS42 INS42 INS11 INS32 INS40 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS40 INS32 INS33 INS9 INS42 INS42 INS42 INS43 INS2 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS34 INS42 INS42 INS42 INS11 INS11 INS43 INS42 INS5 INS42 INS42 INS43 INS85 INS42 DEL32 DEL11 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL59 DEL60 DEL8 DEL31