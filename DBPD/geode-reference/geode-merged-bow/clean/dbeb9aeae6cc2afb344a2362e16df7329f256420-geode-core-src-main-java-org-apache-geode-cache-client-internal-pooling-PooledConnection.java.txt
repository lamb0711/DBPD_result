Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A connection managed by the connection manager. Keeps track
- * of the current state of the connection. 
+ * A connection managed by the connection manager. Keeps track of the current state of the
+ * connection.
+ * 
-  /* connection is volatile because we may asynchronously
-   * destroy the pooled connection while shutting down. */
+  /*
+   * connection is volatile because we may asynchronously destroy the pooled connection while
+   * shutting down.
+   */
-//  private final ConnectionManagerImpl manager;
+  // private final ConnectionManagerImpl manager;
-//    this.manager = manager;
+    // this.manager = manager;
-  
+
-  /** When a pooled connection is destroyed, it's not destroyed
-   * right away, but when it is returned to the pool.
+  /**
+   * When a pooled connection is destroyed, it's not destroyed right away, but when it is returned
+   * to the pool.
-  
+
-  
+
-//     throw new UnsupportedOperationException(
-//         "Pooled connections should only be closed by the connection manager");
+    // throw new UnsupportedOperationException(
+    // "Pooled connections should only be closed by the connection manager");
-  
+
-    
+
+   * 
-  
+
-  
+
-      if(isDestroyed()) {
+      if (isDestroyed()) {
-      if(!this.active) {
+      if (!this.active) {
-  
-  
-  public synchronized boolean switchConnection(Connection newCon)
-    throws InterruptedException {
+
+
+  public synchronized boolean switchConnection(Connection newCon) throws InterruptedException {
-      if (shouldDestroy()) return false;
-      
+      if (shouldDestroy())
+        return false;
+
-          this.waitingToSwitch = true;
-          try {
-            while (this.active && !shouldDestroy()) {
-              wait();
-            }
-          } finally {
-            this.waitingToSwitch = false;
-            notifyAll();
+        this.waitingToSwitch = true;
+        try {
+          while (this.active && !shouldDestroy()) {
+            wait();
+        } finally {
+          this.waitingToSwitch = false;
+          notifyAll();
+        }
-      if (shouldDestroy()) return false;
+      if (shouldDestroy())
+        return false;
-      if(active) {
+      if (active) {
-      if(shouldDestroy()) {
+      if (shouldDestroy()) {
-  
+
-   * If we were able to idle timeout this connection then return
-   * -1.
-   * If this connection has already been destroyed return 0.
-   * Otherwise return the amount of idle time he has remaining.
-   * If he is active we can't time him out now and a hint is returned
-   * as when we should check him next.
-   
+   * If we were able to idle timeout this connection then return -1. If this connection has already
+   * been destroyed return 0. Otherwise return the amount of idle time he has remaining. If he is
+   * active we can't time him out now and a hint is returned as when we should check him next.
+   * 
-    if (shouldDestroy()) return 0;
+    if (shouldDestroy())
+      return 0;
+
-  
+
-  
+
-  
+
+
-  public short getWanSiteVersion(){
+
+  public short getWanSiteVersion() {
-  
+
-  
-  public void setWanSiteVersion(short wanSiteVersion){
+
+  public void setWanSiteVersion(short wanSiteVersion) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66