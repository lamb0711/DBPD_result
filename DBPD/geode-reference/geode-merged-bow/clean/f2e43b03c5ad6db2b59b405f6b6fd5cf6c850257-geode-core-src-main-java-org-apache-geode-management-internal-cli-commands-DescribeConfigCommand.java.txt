GEODE-6064: redact the password in describeConfig command (#2863)



-import java.util.ArrayList;
-import org.apache.geode.cache.execute.FunctionInvocationTargetException;
-import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.management.internal.cli.functions.CliFunctionResult;
-    try {
-      DistributedMember targetMember = null;
-      if (memberNameOrId != null && !memberNameOrId.isEmpty()) {
-        targetMember = getMember(memberNameOrId);
-      }
+    DistributedMember targetMember = null;
-      ResultCollector<?, ?> rc =
-          executeFunction(getMemberConfigFunction, hideDefaults, targetMember);
-      ArrayList<?> output = (ArrayList<?>) rc.getResult();
-      Object obj = output.get(0);
-
-      if (obj != null && obj instanceof MemberConfigurationInfo) {
-        MemberConfigurationInfo memberConfigInfo = (MemberConfigurationInfo) obj;
-
-        result
-            .setHeader(CliStrings.format(CliStrings.DESCRIBE_CONFIG__HEADER__TEXT, memberNameOrId));
-
-        List<String> jvmArgsList = memberConfigInfo.getJvmInputArguments();
-        TabularResultModel jvmInputArgs = result.addTable(JVM_ARGS_SECTION);
-
-        for (String jvmArg : jvmArgsList) {
-          // This redaction should be redundant, since jvmArgs should have already been redacted in
-          // MemberConfigurationInfo. Still, better redundant than missing.
-          jvmInputArgs.accumulate("JVM command line arguments", ArgumentRedactor.redact(jvmArg));
-        }
-
-        addSection(API_PROPERTIES_SECTION, result, memberConfigInfo.getGfePropsSetUsingApi(),
-            "GemFire properties defined using the API");
-        addSection(RUNTIME_PROPERTIES_SECTION, result, memberConfigInfo.getGfePropsRuntime(),
-            "GemFire properties defined at the runtime");
-        addSection(FILE_PROPERTIES_SECTION, result, memberConfigInfo.getGfePropsSetFromFile(),
-            "GemFire properties defined with the property file");
-        addSection(DEFAULT_PROPERTIES_SECTION, result,
-            memberConfigInfo.getGfePropsSetWithDefaults(),
-            "GemFire properties using default values");
-        addSection(CACHE_ATTRIBUTES_SECTION, result, memberConfigInfo.getCacheAttributes(),
-            "Cache attributes");
-
-        List<Map<String, String>> cacheServerAttributesList =
-            memberConfigInfo.getCacheServerAttributes();
-
-        if (cacheServerAttributesList != null && !cacheServerAttributesList.isEmpty()) {
-          for (Map<String, String> cacheServerAttributes : cacheServerAttributesList) {
-            addSection(CACHESERVER_ATTRIBUTES_SECTION, result, cacheServerAttributes,
-                "Cache-server attributes");
-          }
-        }
-      }
-
-    } catch (FunctionInvocationTargetException e) {
-      result = ResultModel.createCommandProcessingError(CliStrings
-          .format(CliStrings.COULD_NOT_EXECUTE_COMMAND_TRY_AGAIN, CliStrings.DESCRIBE_CONFIG));
-    } catch (Exception e) {
-      result = ResultModel.createError(e.getMessage());
+    if (memberNameOrId != null && !memberNameOrId.isEmpty()) {
+      targetMember = getMember(memberNameOrId);
+
+    CliFunctionResult functionResult =
+        executeFunctionAndGetFunctionResult(getMemberConfigFunction, hideDefaults, targetMember);
+    Object obj = functionResult.getResultObject();
+
+    if (obj != null && obj instanceof MemberConfigurationInfo) {
+      MemberConfigurationInfo memberConfigInfo = (MemberConfigurationInfo) obj;
+
+      result
+          .setHeader(CliStrings.format(CliStrings.DESCRIBE_CONFIG__HEADER__TEXT, memberNameOrId));
+
+      List<String> jvmArgsList = memberConfigInfo.getJvmInputArguments();
+      TabularResultModel jvmInputArgs = result.addTable(JVM_ARGS_SECTION);
+
+      for (String jvmArg : jvmArgsList) {
+        // This redaction should be redundant, since jvmArgs should have already been redacted in
+        // MemberConfigurationInfo. Still, better redundant than missing.
+        jvmInputArgs.accumulate("JVM command line arguments", ArgumentRedactor.redact(jvmArg));
+      }
+
+      addSection(API_PROPERTIES_SECTION, result, memberConfigInfo.getGfePropsSetUsingApi(),
+          "GemFire properties defined using the API");
+      addSection(RUNTIME_PROPERTIES_SECTION, result, memberConfigInfo.getGfePropsRuntime(),
+          "GemFire properties defined at the runtime");
+      addSection(FILE_PROPERTIES_SECTION, result, memberConfigInfo.getGfePropsSetFromFile(),
+          "GemFire properties defined with the property file");
+      addSection(DEFAULT_PROPERTIES_SECTION, result,
+          memberConfigInfo.getGfePropsSetWithDefaults(),
+          "GemFire properties using default values");
+      addSection(CACHE_ATTRIBUTES_SECTION, result, memberConfigInfo.getCacheAttributes(),
+          "Cache attributes");
+
+      List<Map<String, String>> cacheServerAttributesList =
+          memberConfigInfo.getCacheServerAttributes();
+
+      if (cacheServerAttributesList != null && !cacheServerAttributesList.isEmpty()) {
+        for (Map<String, String> cacheServerAttributes : cacheServerAttributesList) {
+          addSection(CACHESERVER_ATTRIBUTES_SECTION, result, cacheServerAttributes,
+              "Cache-server attributes");
+        }
+      }
+    }
+
-        dataSection.addData(attribute, attributeValue);
+        dataSection.addData(attribute,
+            ArgumentRedactor.redactArgumentIfNecessary(attribute, attributeValue));

MOV26 UPD40 MOV8 MOV60 MOV41 INS43 MOV43 UPD42 MOV42 UPD42 UPD42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 INS42 INS42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL43 DEL76 DEL76 DEL74 DEL42 DEL43 DEL76 DEL74 DEL42 DEL43 DEL76 DEL74 DEL32 DEL11 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL40 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL12 DEL54 DEL8