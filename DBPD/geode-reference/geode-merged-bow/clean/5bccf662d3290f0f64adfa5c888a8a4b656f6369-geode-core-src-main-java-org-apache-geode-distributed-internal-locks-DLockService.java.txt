GEODE-5686: Remove LocalizedStrings

This removes the LocalizedStrings class and most uses of LogWriterI18n.
The I18n interfaces are still in place and still work since they're only
deprecated but there are no longer any uses of the StringID logging methods.

Going forward everyone should use the Log4j logging facility.  If you
must use the deprecated LogWriter use that version and not
LogWriterI18n.

-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.log4j.LocalizedMessage;
-    return LocalizedStrings.DLockService_0_HAS_BEEN_DESTROYED.toLocalizedString(this);
+    return String.format("%s  has been destroyed", this);
-              LocalizedMessage.create(LocalizedStrings.DLockService_GRANTOR_IS_STILL_INITIALIZING));
+              "Grantor is still initializing");
-          logger.error(LogMarker.DLS_MARKER, LocalizedMessage.create(
-              LocalizedStrings.DLockService_GRANTOR_CREATION_WAS_ABORTED_BUT_GRANTOR_WAS_NOT_DESTROYED));
+          logger.error(LogMarker.DLS_MARKER,
+              "Grantor creation was aborted but grantor was not destroyed");
-      logger.error(LogMarker.DLS_MARKER,
-          LocalizedMessage.create(LocalizedStrings.DLockService_LOCK_WAS_INTERRUPTED), ex);
+      logger.error(LogMarker.DLS_MARKER, "lock() was interrupted", ex);
-                    LocalizedStrings.DLockService_0_ATTEMPTED_TO_REENTER_NONREENTRANT_LOCK_1
-                        .toLocalizedString(new Object[] {Thread.currentThread(), token}));
+                    String.format("%s  attempted to reenter non-reentrant lock %s",
+                        new Object[] {Thread.currentThread(), token}));
-                logger.warn(LogMarker.DLS_MARKER,
-                    LocalizedMessage.create(
-                        LocalizedStrings.DLockService_GRANTOR_REPORTS_REENTRANT_LOCK_NOT_HELD_0,
-                        token));
+                logger.warn(LogMarker.DLS_MARKER, "Grantor reports reentrant lock not held: {}",
+                    token);
-            LocalizedStrings.DLockService_CURRENT_THREAD_HAS_ALREADY_LOCKED_ENTIRE_SERVICE
-                .toLocalizedString());
+            "Current thread has already locked entire service");
-              LocalizedStrings.DLockService_ATTEMPTING_TO_UNLOCK_0_1_BUT_THIS_THREAD_DOESNT_OWN_THE_LOCK
-                  .toLocalizedString(new Object[] {this, name}));
+              String.format(
+                  "Attempting to unlock  %s  :  %s , but this thread does not own the lock.",
+                  new Object[] {this, name}));
-                LocalizedStrings.DLockService_ATTEMPTING_TO_UNLOCK_0_1_BUT_THIS_THREAD_DOESNT_OWN_THE_LOCK_2
-                    .toLocalizedString(new Object[] {this, name, token}));
+                String.format(
+                    "Attempting to unlock  %s  :  %s , but this thread does not own the lock.  %s",
+                    new Object[] {this, name, token}));
-          LocalizedStrings.DLockService_KEYIFFAILED_MUST_HAVE_A_LENGTH_OF_ONE_OR_GREATER
-              .toLocalizedString());
+          "keyIfFailed must have a length of one or greater");
-          LocalizedStrings.DLockService_SERVICE_NAMED_0_NOT_CREATED.toLocalizedString(serviceName));
+          String.format("Service named %s not created", serviceName));
-                LocalizedMessage.create(
-                    LocalizedStrings.DLockService_FAILED_TO_NOTIFY_GRANTOR_OF_DESTRUCTION_WITHIN_0_ATTEMPTS,
-                    Integer.valueOf(DEBUG_NONGRANTOR_DESTROY_LOOP_COUNT)));
+                "Failed to notify grantor of destruction within {} attempts.",
+                Integer.valueOf(DEBUG_NONGRANTOR_DESTROY_LOOP_COUNT));
-                LocalizedStrings.DLockService_FAILED_TO_NOTIFY_GRANTOR_OF_DESTRUCTION_WITHIN_0_ATTEMPTS
-                    .toLocalizedString(
-                        new Object[] {Integer.valueOf(DEBUG_NONGRANTOR_DESTROY_LOOP_COUNT)}));
+                String.format("Failed to notify grantor of destruction within %s attempts.",
+
+                    new Object[] {Integer.valueOf(DEBUG_NONGRANTOR_DESTROY_LOOP_COUNT)}));
-      logger.info(LogMarker.DLS_MARKER, LocalizedMessage.create(LocalizedStrings.ONE_ARG, buffer));
+      logger.info(LogMarker.DLS_MARKER, buffer);
-          return LocalizedStrings.DLockService_DISCONNECT_LISTENER_FOR_DISTRIBUTEDLOCKSERVICE
-              .toLocalizedString();
+          return "Disconnect listener for DistributedLockService";
-              LocalizedStrings.DLockService_SERVICE_NAMED_0_ALREADY_CREATED
-                  .toLocalizedString(serviceName));
+              String.format("Service named %s already created",
+                  serviceName));
-      throw new IllegalArgumentException(LocalizedStrings.DLockService_SERVICE_NAMED_0_IS_NOT_VALID
-          .toLocalizedString(serviceName));
+      throw new IllegalArgumentException(String.format("Service named '%s' is not valid",
+          serviceName));
-          LocalizedStrings.DLockService_SERVICE_NAMED_0_NOT_CREATED.toLocalizedString(serviceName));
+          String.format("Service named %s not created", serviceName));
-      throw new IllegalArgumentException(LocalizedStrings.DLockService_SERVICE_NAMED_0_IS_NOT_VALID
-          .toLocalizedString(serviceName));
+      throw new IllegalArgumentException(String.format("Service named '%s' is not valid",
+          serviceName));
-          LocalizedStrings.DLockService_SERVICE_NAMED_0_NOT_CREATED.toLocalizedString(serviceName));
+          String.format("Service named %s not created", serviceName));
-          LocalizedStrings.DLockService_LOCK_SERVICE_NAME_MUST_NOT_BE_NULL_OR_EMPTY
-              .toLocalizedString());
+          "Lock service name must not be null or empty");
-            LocalizedStrings.DLockService_SERVICE_NAMED_0_IS_RESERVED_FOR_INTERNAL_USE_ONLY
-                .toLocalizedString(serviceName));
+            String.format("Service named %s is reserved for internal use only",
+                serviceName));
-      logger.info(LogMarker.DLS_MARKER, LocalizedMessage.create(LocalizedStrings.TESTING,
-          "DLockService.dumpAllServices() - " + services.size() + " services:\n"));
+      logger.info(LogMarker.DLS_MARKER,
+          "DLockService.dumpAllServices() - " + services.size() + " services:\n");
+  // -------------------------------------------------------------------------

UPD42 INS42 INS45 MOV32 INS45 MOV42 MOV43 MOV43 MOV43 MOV43 MOV43 INS45 UPD42 UPD42 UPD40 INS45 UPD42 INS42 INS45 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 MOV43 UPD42 INS42 INS45 INS45 INS45 UPD42 INS42 INS45 MOV32 UPD42 INS42 INS45 UPD42 UPD42 UPD40 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 UPD42 INS42 INS45 INS45 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32 DEL40 DEL42 DEL32 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL32 DEL40 DEL42 DEL42 DEL40 DEL32