GEODE-5134: pendingCallbacks is never null (#1863)

The tx* method implementations now always expect the pendingCallbacks parameter to not be null.
Also "cb" was renamed to "callback" for clarity.


-      if (AbstractRegionMap.shouldCreateCBEvent(this.owner, !inTokenMode)) {
+      if (AbstractRegionMap.shouldCreateCallbackEvent(this.owner, !inTokenMode)) {
-        EntryEventImpl e = AbstractRegionMap.createCBEvent(this.owner, op, key, null, rmtOrigin,
-            event, eventId, aCallbackArgument, filterRoutingInfo, bridgeContext, txEntryState,
-            versionTag, tailKey);
-        boolean cbEventInPending = false;
-        try {
-          AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
-          if (pendingCallbacks == null) {
-            this.owner.invokeTXCallbacks(EnumListenerEvent.AFTER_DESTROY, e,
-                true/* callDispatchListenerEvent */);
-          } else {
-            pendingCallbacks.add(e);
-            cbEventInPending = true;
-          }
-        } finally {
-          if (!cbEventInPending)
-            e.release();
-        }
+        EntryEventImpl e = AbstractRegionMap.createCallbackEvent(this.owner, op, key, null,
+            rmtOrigin, event, eventId, aCallbackArgument, filterRoutingInfo, bridgeContext,
+            txEntryState, versionTag, tailKey);
+        AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
+        pendingCallbacks.add(e);
-      if (AbstractRegionMap.shouldCreateCBEvent(this.owner, this.owner.isInitialized())) {
+      if (AbstractRegionMap.shouldCreateCallbackEvent(this.owner, this.owner.isInitialized())) {
-        boolean cbEventInPending = false;
-        EntryEventImpl e = AbstractRegionMap.createCBEvent(this.owner,
+        EntryEventImpl e = AbstractRegionMap.createCallbackEvent(this.owner,
-        try {
-          AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
-          if (pendingCallbacks == null) {
-            this.owner.invokeTXCallbacks(EnumListenerEvent.AFTER_INVALIDATE, e,
-                true/* callDispatchListenerEvent */);
-          } else {
-            pendingCallbacks.add(e);
-            cbEventInPending = true;
-          }
-        } finally {
-          if (!cbEventInPending)
-            e.release();
-        }
+        AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
+        pendingCallbacks.add(e);
-      if (AbstractRegionMap.shouldCreateCBEvent(this.owner, this.owner.isInitialized())) {
+      if (AbstractRegionMap.shouldCreateCallbackEvent(this.owner, this.owner.isInitialized())) {
-        boolean cbEventInPending = false;
-        EntryEventImpl e = AbstractRegionMap.createCBEvent(this.owner, putOperation, key, newValue,
-            rmtOrigin, event, eventId, aCallbackArgument, filterRoutingInfo, bridgeContext,
-            txEntryState, versionTag, tailKey);
-        try {
-          AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
-          if (pendingCallbacks == null) {
-            this.owner.invokeTXCallbacks(EnumListenerEvent.AFTER_CREATE, e,
-                true/* callDispatchListenerEvent */);
-          } else {
-            pendingCallbacks.add(e);
-            cbEventInPending = true;
-          }
-        } finally {
-          if (!cbEventInPending)
-            e.release();
-        }
+        EntryEventImpl e = AbstractRegionMap.createCallbackEvent(this.owner, putOperation, key,
+            newValue, rmtOrigin, event, eventId, aCallbackArgument, filterRoutingInfo,
+            bridgeContext, txEntryState, versionTag, tailKey);
+        AbstractRegionMap.switchEventOwnerAndOriginRemote(e, txEntryState == null);
+        pendingCallbacks.add(e);

UPD42 MOV21 MOV21 UPD42 MOV21 MOV21 UPD42 MOV22 MOV21 MOV21 UPD42 UPD42 UPD42 MOV22 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL40 DEL42 DEL9 DEL32 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL38 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL54 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL40 DEL42 DEL9 DEL32 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL38 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL54 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL40 DEL42 DEL9 DEL32 DEL21 DEL8 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL38 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL54