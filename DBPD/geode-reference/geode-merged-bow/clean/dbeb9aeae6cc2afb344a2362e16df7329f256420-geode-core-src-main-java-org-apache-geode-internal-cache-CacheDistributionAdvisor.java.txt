Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Adds bookkeeping info and cache-specific behavior to DistributionAdvisor.
- * Adds bit-encoded flags in addition to object info.
+ * Adds bookkeeping info and cache-specific behavior to DistributionAdvisor. Adds bit-encoded flags
+ * in addition to object info.
-public class CacheDistributionAdvisor extends DistributionAdvisor  {
+public class CacheDistributionAdvisor extends DistributionAdvisor {
-  
-  // moved ROLLOVER_* constants to  DistributionAdvisor
-  
+
+  // moved ROLLOVER_* constants to DistributionAdvisor
+
-  //provider is no longer a supported attribute. 
-//  private static final int IS_GII_PROVIDER_MASK = 0x4000;
+  // provider is no longer a supported attribute.
+  // private static final int IS_GII_PROVIDER_MASK = 0x4000;
-  //Important below mentioned bit masks are not available 
+  // Important below mentioned bit masks are not available
-  private static final int IS_OFF_HEAP_MASK =           0x800000;
+  private static final int IS_OFF_HEAP_MASK = 0x800000;
-  
+
-  
+
-  
+
-  
-  public static CacheDistributionAdvisor createCacheDistributionAdvisor(CacheDistributionAdvisee region) {
+
+  public static CacheDistributionAdvisor createCacheDistributionAdvisor(
+      CacheDistributionAdvisee region) {
+   * 
-  private Set adviseAllEventsOrCached(final boolean excludeInRecovery) throws IllegalStateException {
+  private Set adviseAllEventsOrCached(final boolean excludeInRecovery)
+      throws IllegalStateException {
-        public boolean include(Profile profile) {
-          assert profile instanceof CacheProfile;
-          CacheProfile cp = (CacheProfile)profile;
-          if (excludeInRecovery && cp.inRecovery) {
-            return false;
-          }
-          return cp.cachedOrAllEventsWithListener();
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        if (excludeInRecovery && cp.inRecovery) {
+          return false;
-      });
+        return cp.cachedOrAllEventsWithListener();
+      }
+    });
+
-      return adviseAllEventsOrCached(true/*fixes 41147*/);
+      return adviseAllEventsOrCached(true/* fixes 41147 */);
-          public boolean include(Profile profile) {
-            assert profile instanceof CacheProfile;
-            CacheProfile cp = (CacheProfile)profile;
-            DataPolicy dp = cp.dataPolicy;
-            return dp.withReplication() ||
-              (cp.allEvents() && (dp.withStorage() || cp.hasCacheListener));
-          }
-        });
+        public boolean include(Profile profile) {
+          assert profile instanceof CacheProfile;
+          CacheProfile cp = (CacheProfile) profile;
+          DataPolicy dp = cp.dataPolicy;
+          return dp.withReplication()
+              || (cp.allEvents() && (dp.withStorage() || cp.hasCacheListener));
+        }
+      });
-   * @return Set of Serializable members that the current transaction
-   * will be distributed to.
-   * Currently this is any other member who has this region defined.
-   * No reference to Set kept by advisor so caller is free to modify it
+   * 
+   * @return Set of Serializable members that the current transaction will be distributed to.
+   *         Currently this is any other member who has this region defined. No reference to Set
+   *         kept by advisor so caller is free to modify it
-    
-    boolean isMetaDataWithTransactions = getAdvisee() instanceof LocalRegion &&
-    ((LocalRegion) getAdvisee()).isMetaRegionWithTransactions();
-    
+
+    boolean isMetaDataWithTransactions = getAdvisee() instanceof LocalRegion
+        && ((LocalRegion) getAdvisee()).isMetaRegionWithTransactions();
+
-    if(!TXManagerImpl.ALLOW_PERSISTENT_TRANSACTIONS && !isMetaDataWithTransactions) {
+    if (!TXManagerImpl.ALLOW_PERSISTENT_TRANSACTIONS && !isMetaDataWithTransactions) {
-        public boolean include (Profile profile) {
+        public boolean include(Profile profile) {
-          CacheProfile prof = (CacheProfile)profile;
+          CacheProfile prof = (CacheProfile) profile;
-          public boolean include(Profile profile) {
-            assert profile instanceof CacheProfile;
-            CacheProfile cp = (CacheProfile)profile;
-            return cp.cachedOrAllEvents();
-          }
-        });
+        public boolean include(Profile profile) {
+          assert profile instanceof CacheProfile;
+          CacheProfile cp = (CacheProfile) profile;
+          return cp.cachedOrAllEvents();
+        }
+      });
-      while(biI.hasNext()) {
+      while (biI.hasNext()) {
-        if (biI.hasNext()) badIds.append(", ");
+        if (biI.hasNext())
+          badIds.append(", ");
-      throw new IllegalStateException(LocalizedStrings.CacheDistributionAdvisor_ILLEGAL_REGION_CONFIGURATION_FOR_MEMBERS_0.toLocalizedString(badIds.toString()));
+      throw new IllegalStateException(
+          LocalizedStrings.CacheDistributionAdvisor_ILLEGAL_REGION_CONFIGURATION_FOR_MEMBERS_0
+              .toLocalizedString(badIds.toString()));
-   * @return Set of Serializable members that have a CacheLoader installed;
-   * no reference to Set kept by advisor so caller is free to modify it
+   * 
+   * @return Set of Serializable members that have a CacheLoader installed; no reference to Set kept
+   *         by advisor so caller is free to modify it
-        CacheProfile prof = (CacheProfile)profile;
+        CacheProfile prof = (CacheProfile) profile;
-  public FilterRoutingInfo adviseFilterRouting(CacheEvent event, Set cacheOpRecipients){
-    FilterProfile fp = ((LocalRegion)event.getRegion()).getFilterProfile();
+  public FilterRoutingInfo adviseFilterRouting(CacheEvent event, Set cacheOpRecipients) {
+    FilterProfile fp = ((LocalRegion) event.getRegion()).getFilterProfile();
-  
- /**
+
+  /**
-  
+
-   * Same as adviseCacheOp but only includes members that are playing the
-   * specified role.
+   * Same as adviseCacheOp but only includes members that are playing the specified role.
+   * 
-        public boolean include(Profile profile) {
-          assert profile instanceof CacheProfile;
-          CacheProfile cp = (CacheProfile)profile;
-          // if region in cache is not yet initialized, exclude
-          if (!cp.regionInitialized) {
-            return false;
-          }
-          if (!cp.cachedOrAllEventsWithListener()) {
-            return false;
-          }
-          return cp.getDistributedMember().getRoles().contains(role);
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        // if region in cache is not yet initialized, exclude
+        if (!cp.regionInitialized) {
+          return false;
-      });
+        if (!cp.cachedOrAllEventsWithListener()) {
+          return false;
+        }
+        return cp.getDistributedMember().getRoles().contains(role);
+      }
+    });
-  /* *
-   * Same as adviseGeneric but excludes guys in recover
+  /*
+   * * Same as adviseGeneric but excludes guys in recover
-        public boolean include(Profile profile) {
-          assert profile instanceof CacheProfile;
-          CacheProfile cp = (CacheProfile)profile;
-          return !cp.inRecovery;
-        }
-      });
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        return !cp.inRecovery;
+      }
+    });
-  /** Same as adviseGeneric
+  /**
+   * Same as adviseGeneric
-   * @return Set of Serializable member ids that have a CacheWriter installed;
-   * no reference to Set kept by advisor so caller is free to modify it
+   * 
+   * @return Set of Serializable member ids that have a CacheWriter installed; no reference to Set
+   *         kept by advisor so caller is free to modify it
-        CacheProfile prof = (CacheProfile)profile;
+        CacheProfile prof = (CacheProfile) profile;
-  
+
-        CacheProfile cp = (CacheProfile)profile;
+        CacheProfile cp = (CacheProfile) profile;
-  
+
-   * @return Set of Serializable member ids that have the region and
-   * are have storage (no need to search an empty cache)
+   * 
+   * @return Set of Serializable member ids that have the region and are have storage (no need to
+   *         search an empty cache)
-        CacheProfile cp = (CacheProfile)profile;
+        CacheProfile cp = (CacheProfile) profile;
-  
+
-  
+
-  public InitialImageAdvice adviseInitialImage(InitialImageAdvice previousAdvice, boolean persistent) {
+  public InitialImageAdvice adviseInitialImage(InitialImageAdvice previousAdvice,
+      boolean persistent) {
-    
+
-    
-    Map<InternalDistributedMember, CacheProfile> memberProfiles = new HashMap<InternalDistributedMember, CacheProfile>();
+
+    Map<InternalDistributedMember, CacheProfile> memberProfiles =
+        new HashMap<InternalDistributedMember, CacheProfile>();
-      CacheProfile profile = (CacheProfile)allProfiles[i];
+      CacheProfile profile = (CacheProfile) allProfiles[i];
-      //Make sure that we don't return a member that was in the previous initial image advice.
-      //Unless that member has changed it's profile since the last time we checked.
-      if(previousAdvice != null) {
-        CacheProfile previousProfile = previousAdvice.memberProfiles.get(profile.getDistributedMember());
+      // Make sure that we don't return a member that was in the previous initial image advice.
+      // Unless that member has changed it's profile since the last time we checked.
+      if (previousAdvice != null) {
+        CacheProfile previousProfile =
+            previousAdvice.memberProfiles.get(profile.getDistributedMember());
-        if (profile.inRecovery) {
-          uninitialized.add(profile.getDistributedMember());
-          continue;
-        }
-        // No need to do a GII from uninitialized member.
-        if(!profile.regionInitialized) {
-          uninitialized.add(profile.getDistributedMember());
-          continue;
-        }
+      if (profile.inRecovery) {
+        uninitialized.add(profile.getDistributedMember());
+        continue;
+      }
+      // No need to do a GII from uninitialized member.
+      if (!profile.regionInitialized) {
+        uninitialized.add(profile.getDistributedMember());
+        continue;
+      }
-        if(!persistent || profile.dataPolicy.withPersistence()) {
-          //If the local member is persistent, we only want
-          //to include persistent replicas in the set of replicates.
+        if (!persistent || profile.dataPolicy.withPersistence()) {
+          // If the local member is persistent, we only want
+          // to include persistent replicas in the set of replicates.
-      }
-      else
-      if (profile.dataPolicy.isPreloaded()) {
+      } else if (profile.dataPolicy.isPreloaded()) {
-      }
-      else
-      if (profile.dataPolicy.withStorage()) {
+      } else if (profile.dataPolicy.withStorage()) {
-    InitialImageAdvice advice = new InitialImageAdvice(replicates, others, 
-        preloaded, empties, uninitialized, nonPersistent, memberProfiles);
+    InitialImageAdvice advice = new InitialImageAdvice(replicates, others, preloaded, empties,
+        uninitialized, nonPersistent, memberProfiles);
+
-   * returns the set of all the members in the system which requires old values
-   * and are not yet finished with initialization (including GII).
+   * returns the set of all the members in the system which requires old values and are not yet
+   * finished with initialization (including GII).
+   * 
-  public Set adviseRequiresOldValueInCacheOp( ) {
+  public Set adviseRequiresOldValueInCacheOp() {
-        CacheProfile cp = (CacheProfile)profile;
+        CacheProfile cp = (CacheProfile) profile;
-  protected Profile instantiateProfile(
-      InternalDistributedMember memberId, int version) {
+  protected Profile instantiateProfile(InternalDistributedMember memberId, int version) {
-  
+
-      CacheProfile newCP = (CacheProfile)newProfile;
-      CacheProfile oldCP = (CacheProfile)oldProfile;
+      CacheProfile newCP = (CacheProfile) newProfile;
+      CacheProfile oldCP = (CacheProfile) oldProfile;
-        CacheDistributionAdvisee advisee = (CacheDistributionAdvisee)getAdvisee();
+        CacheDistributionAdvisee advisee = (CacheDistributionAdvisee) getAdvisee();
-    
+
-    
+
-     * this member's client interest / continuous query profile.  This is used
-     * for event processing to reduce the number of times CQs are executed and
-     * to have the originating member for an event pay the cpu cost of executing
-     * filters on the event.
+     * this member's client interest / continuous query profile. This is used for event processing
+     * to reduce the number of times CQs are executed and to have the originating member for an
+     * event pay the cpu cost of executing filters on the event.
-    
+
-     * Some cache listeners require old values in cache operation messages,
-     * at least during GII
+     * Some cache listeners require old values in cache operation messages, at least during GII
-     * Whether the region has completed initialization, including GII.
-     * This information may be incorrect for a PartitionedRegion, but
-     * may be relied upon for DistributedRegions (including BucketRegions)
+     * Whether the region has completed initialization, including GII. This information may be
+     * incorrect for a PartitionedRegion, but may be relied upon for DistributedRegions (including
+     * BucketRegions)
-     * @since GemFire prpersist this field is now overloaded for partitioned regions with persistence.
-     * In the case of pr persistence, this field indicates that the region has finished
-     * recovery from disk.
+     * @since GemFire prpersist this field is now overloaded for partitioned regions with
+     *        persistence. In the case of pr persistence, this field indicates that the region has
+     *        finished recovery from disk.
-    
+
-     * True when a members persistent store is initialized. Note that
-     * regionInitialized may be true when this is false in the case of createBucketAtomically.
-     * With createBucketAtomically, the peristent store is not created until
-     * the EndBucketCreationMessage is sent.
+     * True when a members persistent store is initialized. Note that regionInitialized may be true
+     * when this is false in the case of createBucketAtomically. With createBucketAtomically, the
+     * peristent store is not created until the EndBucketCreationMessage is sent.
-     * This member has any cache servers. This is not actively maintained for
-     * local profiles (i.e., a profile representing this vm)
+     * This member has any cache servers. This is not actively maintained for local profiles (i.e.,
+     * a profile representing this vm)
-    public CacheProfile() {
-    }
+    public CacheProfile() {}
-        if (this.dataPolicy.isEmpty()) s |= PROXY_MASK;
-        if (this.dataPolicy.isPreloaded()) s |= PRELOADED_MASK;
+        if (this.dataPolicy.isEmpty())
+          s |= PROXY_MASK;
+        if (this.dataPolicy.isPreloaded())
+          s |= PRELOADED_MASK;
-      if (this.subscriptionAttributes != null 
+      if (this.subscriptionAttributes != null
-      } 
-      if (this.hasCacheLoader) s |= LOADER_MASK;
-      if (this.hasCacheWriter) s |= WRITER_MASK;
-      if (this.hasCacheListener) s |= LISTENER_MASK;
-      if (this.scope.isDistributedAck()) s |= DIST_ACK_MASK;
-      if (this.scope.isGlobal()) s |= GLOBAL_MASK;
-      if (this.inRecovery) s |= IN_RECOVERY_MASK;
-      if (this.isPartitioned) s |= IS_PARTITIONED_MASK;
-      if (this.isGatewayEnabled) s |= IS_GATEWAY_ENABLED_MASK;
-      if (this.isPersistent) s |= PERSISTENT_MASK;
-      if (this.regionInitialized) s|= REGION_INITIALIZED_MASK;
-      if (this.persistentID != null) s|= PERSISTENT_ID_MASK;
-      if (this.hasCacheServer) s|= HAS_CACHE_SERVER_MASK;
-      if (this.requiresOldValueInEvents) s|= REQUIRES_OLD_VALUE_MASK;
-      if (this.persistenceInitialized) s|= PERSISTENCE_INITIALIZED_MASK;
-      if (!this.gatewaySenderIds.isEmpty()) s |= GATEWAY_SENDER_IDS_MASK;
-      if (!this.asyncEventQueueIds.isEmpty()) s |= ASYNC_EVENT_QUEUE_IDS_MASK;
-      if (this.isOffHeap) s |= IS_OFF_HEAP_MASK;
-      if (!this.cacheServiceProfiles.isEmpty()) s |= CACHE_SERVICE_PROFILES_MASK;
+      }
+      if (this.hasCacheLoader)
+        s |= LOADER_MASK;
+      if (this.hasCacheWriter)
+        s |= WRITER_MASK;
+      if (this.hasCacheListener)
+        s |= LISTENER_MASK;
+      if (this.scope.isDistributedAck())
+        s |= DIST_ACK_MASK;
+      if (this.scope.isGlobal())
+        s |= GLOBAL_MASK;
+      if (this.inRecovery)
+        s |= IN_RECOVERY_MASK;
+      if (this.isPartitioned)
+        s |= IS_PARTITIONED_MASK;
+      if (this.isGatewayEnabled)
+        s |= IS_GATEWAY_ENABLED_MASK;
+      if (this.isPersistent)
+        s |= PERSISTENT_MASK;
+      if (this.regionInitialized)
+        s |= REGION_INITIALIZED_MASK;
+      if (this.persistentID != null)
+        s |= PERSISTENT_ID_MASK;
+      if (this.hasCacheServer)
+        s |= HAS_CACHE_SERVER_MASK;
+      if (this.requiresOldValueInEvents)
+        s |= REQUIRES_OLD_VALUE_MASK;
+      if (this.persistenceInitialized)
+        s |= PERSISTENCE_INITIALIZED_MASK;
+      if (!this.gatewaySenderIds.isEmpty())
+        s |= GATEWAY_SENDER_IDS_MASK;
+      if (!this.asyncEventQueueIds.isEmpty())
+        s |= ASYNC_EVENT_QUEUE_IDS_MASK;
+      if (this.isOffHeap)
+        s |= IS_OFF_HEAP_MASK;
+      if (!this.cacheServiceProfiles.isEmpty())
+        s |= CACHE_SERVICE_PROFILES_MASK;
-    
+
-    
+
-        } 
-        else {
+        } else {
-      } 
-      else
-      if ((s & PROXY_MASK) != 0) {
-          this.dataPolicy = DataPolicy.EMPTY;
-        }
-      else
-      if ((s & PRELOADED_MASK) != 0) {
+      } else if ((s & PROXY_MASK) != 0) {
+        this.dataPolicy = DataPolicy.EMPTY;
+      } else if ((s & PRELOADED_MASK) != 0) {
-      }
-      else { // CACHED
+      } else { // CACHED
-      
-      if((s & IS_PARTITIONED_MASK) != 0) {
-        if((s & PERSISTENT_MASK) != 0) {
+
+      if ((s & IS_PARTITIONED_MASK) != 0) {
+        if ((s & PERSISTENT_MASK) != 0) {
-      
+
-      this.scope = (s & DIST_ACK_MASK) != 0 ? Scope.DISTRIBUTED_ACK :
-      ((s & GLOBAL_MASK) != 0 ? Scope.GLOBAL : Scope.DISTRIBUTED_NO_ACK);
+      this.scope = (s & DIST_ACK_MASK) != 0 ? Scope.DISTRIBUTED_ACK
+          : ((s & GLOBAL_MASK) != 0 ? Scope.GLOBAL : Scope.DISTRIBUTED_NO_ACK);
-      this.regionInitialized = ( (s & REGION_INITIALIZED_MASK) != 0 );
-      this.hasCacheServer = ( (s & HAS_CACHE_SERVER_MASK) != 0 );
+      this.regionInitialized = ((s & REGION_INITIALIZED_MASK) != 0);
+      this.hasCacheServer = ((s & HAS_CACHE_SERVER_MASK) != 0);
+     * 
+
-     // to fix bug 36804 to ignore hasCacheListener
-//       return this.dataPolicy.withStorage() ||
-//         (allEvents() && this.hasCacheListener);
+      // to fix bug 36804 to ignore hasCacheListener
+      // return this.dataPolicy.withStorage() ||
+      // (allEvents() && this.hasCacheListener);
+
+
-    public void processIncoming(DistributionManager dm, String adviseePath,
-        boolean removeProfile, boolean exchangeProfiles,
-        final List<Profile> replyProfiles) {
+    public void processIncoming(DistributionManager dm, String adviseePath, boolean removeProfile,
+        boolean exchangeProfiles, final List<Profile> replyProfiles) {
-        int oldLevel = LocalRegion
-            .setThreadInitLevelRequirement(LocalRegion.ANY_INIT);
+        int oldLevel = LocalRegion.setThreadInitLevelRequirement(LocalRegion.ANY_INIT);
-            if (!((BucketRegion)lclRgn).isPartitionedRegionOpen()) {
+            if (!((BucketRegion) lclRgn).isPartitionedRegionOpen()) {
-          handleCacheDistributionAdvisee((CacheDistributionAdvisee)lclRgn,
-              adviseePath, removeProfile, exchangeProfiles, true,
-              replyProfiles);
-        }
-        else {
+          handleCacheDistributionAdvisee((CacheDistributionAdvisee) lclRgn, adviseePath,
+              removeProfile, exchangeProfiles, true, replyProfiles);
+        } else {
-            handleCacheDistributionAdvisee(PartitionedRegionHelper
-                .getProxyBucketRegion(GemFireCacheImpl.getInstance(), adviseePath,
-                    false), adviseePath, removeProfile, exchangeProfiles,
-                false, replyProfiles);
-          }
-          else {
+            handleCacheDistributionAdvisee(
+                PartitionedRegionHelper.getProxyBucketRegion(GemFireCacheImpl.getInstance(),
+                    adviseePath, false),
+                adviseePath, removeProfile, exchangeProfiles, false, replyProfiles);
+          } else {
-              logger.debug("While processing UpdateAttributes message, region has local scope: {}", adviseePath);
+              logger.debug("While processing UpdateAttributes message, region has local scope: {}",
+                  adviseePath);
-      if(this.filterProfile != null) {
+      if (this.filterProfile != null) {
-    
+
-     * Attempts to process this message with the specified
-     * <code>CacheDistributionAdvisee</code>.
+     * Attempts to process this message with the specified <code>CacheDistributionAdvisee</code>.
-     * @param cda
-     *          the CacheDistributionAdvisee to apply this profile to
-     * @param isRealRegion
-     *          true if CacheDistributionAdvisee is a real region
+     * @param cda the CacheDistributionAdvisee to apply this profile to
+     * @param isRealRegion true if CacheDistributionAdvisee is a real region
-    private void handleCacheDistributionAdvisee(CacheDistributionAdvisee cda,
-        String adviseePath, boolean removeProfile, boolean exchangeProfiles,
-        boolean isRealRegion, final List<Profile> replyProfiles) {
+    private void handleCacheDistributionAdvisee(CacheDistributionAdvisee cda, String adviseePath,
+        boolean removeProfile, boolean exchangeProfiles, boolean isRealRegion,
+        final List<Profile> replyProfiles) {
-        handleDistributionAdvisee(cda, removeProfile, isRealRegion
-            && exchangeProfiles, replyProfiles);
+        handleDistributionAdvisee(cda, removeProfile, isRealRegion && exchangeProfiles,
+            replyProfiles);
-      }
-      else {
+      } else {
-          logger.debug("While processing UpdateAttributes message, region not found: {}", adviseePath);
+          logger.debug("While processing UpdateAttributes message, region not found: {}",
+              adviseePath);
-      if(persistentID != null) {
+      if (persistentID != null) {
-      if(hasPersistentID(bits)) {
+      if (hasPersistentID(bits)) {
-      sb.append("; regionInitialized=").append(
-          String.valueOf(this.regionInitialized));
+      sb.append("; regionInitialized=").append(String.valueOf(this.regionInitialized));
-  public static class InitialImageAdvice  {
+  public static class InitialImageAdvice {
-    
+
-    
+
-    
-    /** Set of tertiary recipients which are not replicates, in which case
-     *  they should all be queried and a superset taken of their images.
-     *  To be used only if the image cannot be obtained from the replicates set.
+
+    /**
+     * Set of tertiary recipients which are not replicates, in which case they should all be queried
+     * and a superset taken of their images. To be used only if the image cannot be obtained from
+     * the replicates set.
-    
+
-    
+
-    
-    /** Set of members that are replicates but not persistent*/
+
+    /** Set of members that are replicates but not persistent */
-    
+
-    protected InitialImageAdvice(Set<InternalDistributedMember> replicates, 
-        Set<InternalDistributedMember> others,
-        Set<InternalDistributedMember> preloaded,
-        Set<InternalDistributedMember> empties,
-        Set<InternalDistributedMember> uninitialized,
+    protected InitialImageAdvice(Set<InternalDistributedMember> replicates,
+        Set<InternalDistributedMember> others, Set<InternalDistributedMember> preloaded,
+        Set<InternalDistributedMember> empties, Set<InternalDistributedMember> uninitialized,
-    
+
-      this(Collections.EMPTY_SET,
-      Collections.EMPTY_SET,
-      Collections.EMPTY_SET, 
-      Collections.EMPTY_SET,
-      Collections.EMPTY_SET,
-      Collections.EMPTY_SET,
-      Collections.<InternalDistributedMember, CacheProfile>emptyMap());
+      this(Collections.EMPTY_SET, Collections.EMPTY_SET, Collections.EMPTY_SET,
+          Collections.EMPTY_SET, Collections.EMPTY_SET, Collections.EMPTY_SET,
+          Collections.<InternalDistributedMember, CacheProfile>emptyMap());
-      return "InitialImageAdvice("
-              +   "replicates=" + this.replicates
-              + "; others="     + this.others
-              + "; preloaded="  + this.preloaded 
-              + "; empty="      + this.empties
-              + "; initializing=" + this.uninitialized
-              + ")";
+      return "InitialImageAdvice(" + "replicates=" + this.replicates + "; others=" + this.others
+          + "; preloaded=" + this.preloaded + "; empty=" + this.empties + "; initializing="
+          + this.uninitialized + ")";
-  
+
-  
+
-  
+
-   * Provide only the new replicates given a set of existing
-   * memberIds
+   * Provide only the new replicates given a set of existing memberIds
+   * 
-  public Set adviseNewReplicates(final Set oldRecipients)
-  {
+  public Set adviseNewReplicates(final Set oldRecipients) {
-        CacheProfile cp = (CacheProfile)profile;
-        if (cp.dataPolicy.withReplication()
-            && !oldRecipients.contains(cp.getDistributedMember())) {
+        CacheProfile cp = (CacheProfile) profile;
+        if (cp.dataPolicy.withReplication() && !oldRecipients.contains(cp.getDistributedMember())) {
-  
+
-  // moved removeId, doRemoveId, removeIdWithSerial, and updateRemovedProfiles to DistributionAdvisor
+  // moved removeId, doRemoveId, removeIdWithSerial, and updateRemovedProfiles to
+  // DistributionAdvisor
-        CacheProfile cp = (CacheProfile)profile;
+        CacheProfile cp = (CacheProfile) profile;
-        CacheProfile cp = (CacheProfile)profile;
+        CacheProfile cp = (CacheProfile) profile;
-   * Provide only the empty's (having DataPolicy.EMPTY) given a set of existing
-   * memberIds
+   * Provide only the empty's (having DataPolicy.EMPTY) given a set of existing memberIds
-        CacheProfile cp = (CacheProfile)profile;
+        CacheProfile cp = (CacheProfile) profile;
-  }  
+  }
+
-        CacheProfile cp = (CacheProfile)profile;
+        CacheProfile cp = (CacheProfile) profile;
-      ((LocalRegion)getAdvisee()).removeMemberFromCriticalList(profile.getDistributedMember());
+      ((LocalRegion) getAdvisee()).removeMemberFromCriticalList(profile.getDistributedMember());
-   * Returns the list of all persistent members.
-   * For most cases, adviseInitializedPersistentMembers is more appropriate. These
-   * method includes members that are still in the process of GII.
+   * Returns the list of all persistent members. For most cases, adviseInitializedPersistentMembers
+   * is more appropriate. These method includes members that are still in the process of GII.
-    
-    Map<InternalDistributedMember, PersistentMemberID> result = new HashMap<InternalDistributedMember, PersistentMemberID>();
+
+    Map<InternalDistributedMember, PersistentMemberID> result =
+        new HashMap<InternalDistributedMember, PersistentMemberID>();
-    for(Profile profile : snapshot) {
+    for (Profile profile : snapshot) {
-      if(cp.persistentID != null) {
+      if (cp.persistentID != null) {
-    
+
-  
+
-    
-    Map<InternalDistributedMember, PersistentMemberID> result = new HashMap<InternalDistributedMember, PersistentMemberID>();
+
+    Map<InternalDistributedMember, PersistentMemberID> result =
+        new HashMap<InternalDistributedMember, PersistentMemberID>();
-    for(Profile profile : snapshot) {
+    for (Profile profile : snapshot) {
-      if(cp.persistentID != null && cp.persistenceInitialized) {
+      if (cp.persistentID != null && cp.persistenceInitialized) {
-    
+
-        public boolean include(Profile profile) {
-          assert profile instanceof CacheProfile;
-          CacheProfile cp = (CacheProfile)profile;
-          return cp.hasCacheServer;
-        }
-      });
+      public boolean include(Profile profile) {
+        assert profile instanceof CacheProfile;
+        CacheProfile cp = (CacheProfile) profile;
+        return cp.hasCacheServer;
+      }
+    });
-  
-  //Overrided for bucket regions. This listener also receives events
-  //about PR joins and leaves.
+
+  // Overrided for bucket regions. This listener also receives events
+  // about PR joins and leaves.
-  
+
-  public boolean removeId(ProfileId memberId, boolean crashed,
-      boolean destroyed, boolean fromMembershipListener) {
-    
+  public boolean removeId(ProfileId memberId, boolean crashed, boolean destroyed,
+      boolean fromMembershipListener) {
+
-    CacheDistributionAdvisee advisee = (CacheDistributionAdvisee)getAdvisee();
+    CacheDistributionAdvisee advisee = (CacheDistributionAdvisee) getAdvisee();
-      CacheProfile profile = (CacheProfile)getProfile(memberId);
+      CacheProfile profile = (CacheProfile) getProfile(memberId);
-        persistentId = ((CacheProfile)getProfile(memberId)).persistentID.diskStoreId;
+        persistentId = ((CacheProfile) getProfile(memberId)).persistentID.diskStoreId;
-    
+
-      DistributedRegion r = (DistributedRegion)advisee;
+      DistributedRegion r = (DistributedRegion) advisee;
-          logger.debug("recording that {} has left during initialization of {}", memberId, r.getName());
+          logger.debug("recording that {} has left during initialization of {}", memberId,
+              r.getName());
-          state.addLeftMember((InternalDistributedMember)memberId);
+          state.addLeftMember((InternalDistributedMember) memberId);
-  public List<Set<String>> adviseSameGatewaySenderIds(
-      final Set<String> allGatewaySenderIds) {
+  public List<Set<String>> adviseSameGatewaySenderIds(final Set<String> allGatewaySenderIds) {
-          final CacheProfile cp = (CacheProfile)profile;
+          final CacheProfile cp = (CacheProfile) profile;
-          }else{
+          } else {
-  public List<Set<String>> adviseSameAsyncEventQueueIds(
-      final Set<String> allAsyncEventIds) {
+  public List<Set<String>> adviseSameAsyncEventQueueIds(final Set<String> allAsyncEventIds) {
-          final CacheProfile cp = (CacheProfile)profile;
+          final CacheProfile cp = (CacheProfile) profile;
-          }else{
+          } else {
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66