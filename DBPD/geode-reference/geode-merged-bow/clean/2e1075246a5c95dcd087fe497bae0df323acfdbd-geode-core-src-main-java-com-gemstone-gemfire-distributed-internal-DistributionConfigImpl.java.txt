Merge branch 'release/1.0.0-incubating.M3'

+import static com.gemstone.gemfire.distributed.ConfigurationProperties.*;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Serializable;
+import java.net.InetAddress;
+import java.net.URL;
+import java.net.UnknownHostException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
+
+import org.apache.geode.redis.GeodeRedisServer;
+
-import java.io.File;
-import java.io.IOException;
-import java.io.Serializable;
-import java.net.InetAddress;
-import java.net.URL;
-import java.net.UnknownHostException;
-import java.util.*;
-
- * @since 2.1
+ * @since GemFire 2.1
-  /** @since 5.7 */
+  /** @since GemFire 5.7 */
+  /** The security manager class name*/
+  private String securityManager = DEFAULT_SECURITY_MANAGER;
+
+  /** The post processor class name*/
+  private String postProcessor = DEFAULT_SECURITY_POST_PROCESSOR;
+
-  protected String clusterConfigDir = DistributionConfig.DEFAULT_CLUSTER_CONFIGURATION_DIR;
+  protected String clusterConfigDir = "";
-   * port on which {@link com.gemstone.gemfire.redis.GemFireRedisServer} is started
+   * port on which {@link GeodeRedisServer} is started
-   * Bind address for GemFireRedisServer
+   * Bind address for GeodeRedisServer
+
+  private String shiroInit = "";
+    this.shiroInit = other.getShiroInit();
+    this.securityManager = other.getSecurityManager();
+    this.postProcessor = other.getPostProcessor();
-   * @since 6.5
+   * @since GemFire 6.5
-   * @since 8.0
+   * @since GemFire 8.0
-      System.setProperty(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT_NAME,
+      System.setProperty(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT,
-          + SECURITY_PEER_AUTHENTICATOR_NAME, securityPeerAuthenticator);
+          + SECURITY_PEER_AUTHENTICATOR, securityPeerAuthenticator);
-    String sslEnabledString = (String)props.get(SSL_ENABLED_NAME);
-    String clusterSSLEnabledString =(String)props.get(CLUSTER_SSL_ENABLED_NAME);
+    String sslEnabledString = (String)props.get(SSL_ENABLED);
+    String clusterSSLEnabledString =(String)props.get(CLUSTER_SSL_ENABLED);
-    String sslCipher = (String)props.get(SSL_CIPHERS_NAME);
-    String clusterSSLCipher = (String)props.get(CLUSTER_SSL_CIPHERS_NAME);
+    String sslCipher = (String)props.get(SSL_CIPHERS);
+    String clusterSSLCipher = (String)props.get(CLUSTER_SSL_CIPHERS);
-    String sslProtocol = (String)props.get(SSL_PROTOCOLS_NAME);
-    String clusterSSLProtocol = (String)props.get(CLUSTER_SSL_PROTOCOLS_NAME);
+    String sslProtocol = (String)props.get(SSL_PROTOCOLS);
+    String clusterSSLProtocol = (String)props.get(CLUSTER_SSL_PROTOCOLS);
-    String sslReqAuthString = (String)props.get(SSL_REQUIRE_AUTHENTICATION_NAME);
-    String clusterReqAuthString =(String)props.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME);
+    String sslReqAuthString = (String)props.get(SSL_REQUIRE_AUTHENTICATION);
+    String clusterReqAuthString =(String)props.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION);
-    String jmxSSLString = (String)props.get(JMX_MANAGER_SSL_NAME);
-    String jmxSSLEnabledString =(String)props.get(JMX_MANAGER_SSL_ENABLED_NAME);
+    String jmxSSLString = (String)props.get(JMX_MANAGER_SSL);
+    String jmxSSLEnabledString =(String)props.get(JMX_MANAGER_SSL_ENABLED);
-    boolean clusterSSLOverriden = this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME)!=null;
-    boolean p2pSSLOverRidden = this.sourceMap.get(SSL_ENABLED_NAME)!=null;
+    boolean clusterSSLOverriden = this.sourceMap.get(CLUSTER_SSL_ENABLED)!=null;
+    boolean p2pSSLOverRidden = this.sourceMap.get(SSL_ENABLED)!=null;
-      this.sourceMap.put(CLUSTER_SSL_ENABLED_NAME,this.sourceMap.get(SSL_ENABLED_NAME));
+      this.sourceMap.put(CLUSTER_SSL_ENABLED,this.sourceMap.get(SSL_ENABLED));
-      if(this.sourceMap.get(SSL_CIPHERS_NAME)!=null) {
+      if(this.sourceMap.get(SSL_CIPHERS)!=null) {
-        this.sourceMap.put(CLUSTER_SSL_CIPHERS_NAME,this.sourceMap.get(SSL_CIPHERS_NAME));
+        this.sourceMap.put(CLUSTER_SSL_CIPHERS,this.sourceMap.get(SSL_CIPHERS));
-      if(this.sourceMap.get(SSL_PROTOCOLS_NAME)!=null) {
+      if(this.sourceMap.get(SSL_PROTOCOLS)!=null) {
-        this.sourceMap.put(CLUSTER_SSL_PROTOCOLS_NAME,this.sourceMap.get(SSL_PROTOCOLS_NAME));
+        this.sourceMap.put(CLUSTER_SSL_PROTOCOLS,this.sourceMap.get(SSL_PROTOCOLS));
-      if(this.sourceMap.get(SSL_REQUIRE_AUTHENTICATION_NAME)!=null) {
+      if(this.sourceMap.get(SSL_REQUIRE_AUTHENTICATION)!=null) {
-        this.sourceMap.put(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME,this.sourceMap.get(SSL_REQUIRE_AUTHENTICATION_NAME));
+        this.sourceMap.put(CLUSTER_SSL_REQUIRE_AUTHENTICATION,this.sourceMap.get(SSL_REQUIRE_AUTHENTICATION));
-    boolean jmxSSLEnabledOverriden = this.sourceMap.get(JMX_MANAGER_SSL_ENABLED_NAME)!=null;
-    boolean jmxSSLOverriden = this.sourceMap.get(JMX_MANAGER_SSL_NAME)!=null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME)!=null;
+    boolean jmxSSLEnabledOverriden = this.sourceMap.get(JMX_MANAGER_SSL_ENABLED)!=null;
+    boolean jmxSSLOverriden = this.sourceMap.get(JMX_MANAGER_SSL)!=null;
+    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED)!=null;
-      this.sourceMap.put(JMX_MANAGER_SSL_ENABLED_NAME,this.sourceMap.get(JMX_MANAGER_SSL_NAME));
+      this.sourceMap.put(JMX_MANAGER_SSL_ENABLED,this.sourceMap.get(JMX_MANAGER_SSL));
-      this.sourceMap.put(JMX_MANAGER_SSL_ENABLED_NAME,this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME));
-      if(this.sourceMap.get(CLUSTER_SSL_CIPHERS_NAME)!=null) {
+      this.sourceMap.put(JMX_MANAGER_SSL_ENABLED,this.sourceMap.get(CLUSTER_SSL_ENABLED));
+      if(this.sourceMap.get(CLUSTER_SSL_CIPHERS)!=null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_CIPHERS_NAME,this.sourceMap.get(CLUSTER_SSL_CIPHERS_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_CIPHERS,this.sourceMap.get(CLUSTER_SSL_CIPHERS));
-      if(this.sourceMap.get(CLUSTER_SSL_PROTOCOLS_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_PROTOCOLS)!=null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_PROTOCOLS_NAME,this.sourceMap.get(CLUSTER_SSL_PROTOCOLS_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_PROTOCOLS,this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      if(this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION)!=null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION_NAME,this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_REQUIRE_AUTHENTICATION,this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE)!=null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE)!=null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD)!=null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE)!=null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD)!=null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      if(this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_NAME)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME) != null) {
+      if(this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_TYPE_NAME)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME) != null) {
+      if(this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_TYPE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_PASSWORD_NAME)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME) != null) {
+      if(this.sourceMap.get(JMX_MANAGER_SSL_KEYSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE_NAME)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME) != null) {
+      if(this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD_NAME)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME) != null) {
+      if(this.sourceMap.get(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME));
+        this.sourceMap.put(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    boolean httpServiceSSLEnabledOverriden = this.sourceMap.get(HTTP_SERVICE_SSL_ENABLED_NAME) != null;
+    boolean httpServiceSSLEnabledOverriden = this.sourceMap.get(HTTP_SERVICE_SSL_ENABLED) != null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME) != null;
+    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED) != null;
-      this.sourceMap.put(HTTP_SERVICE_SSL_ENABLED_NAME, this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME));
+      this.sourceMap.put(HTTP_SERVICE_SSL_ENABLED, this.sourceMap.get(CLUSTER_SSL_ENABLED));
-      if (this.sourceMap.get(CLUSTER_SSL_CIPHERS_NAME) != null) {
+      if (this.sourceMap.get(CLUSTER_SSL_CIPHERS) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_CIPHERS_NAME, this.sourceMap.get(CLUSTER_SSL_CIPHERS_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_CIPHERS, this.sourceMap.get(CLUSTER_SSL_CIPHERS));
-      if (this.sourceMap.get(CLUSTER_SSL_PROTOCOLS_NAME) != null) {
+      if (this.sourceMap.get(CLUSTER_SSL_PROTOCOLS) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_PROTOCOLS_NAME, this.sourceMap.get(CLUSTER_SSL_PROTOCOLS_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_PROTOCOLS, this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      if (this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME) != null) {
+      if (this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION_NAME,
-            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION,
+            this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME) != null) {
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_NAME, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME) != null) {
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE_NAME, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME) != null) {
+      if (this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD_NAME,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME) != null) {
+      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_NAME, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME) != null) {
+      if (this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD_NAME,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_NAME) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_NAME, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_TYPE_NAME) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_TYPE) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE_NAME, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_TYPE, this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD_NAME) == null
-          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD_NAME,
-            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE_NAME) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_NAME, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE, this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD_NAME) == null
-          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME) != null) {
+      if (this.sourceMap.get(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD) == null
+          && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD_NAME,
-            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME));
+        this.sourceMap.put(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD,
+            this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    boolean cacheServerSSLOverriden = this.sourceMap.get(SERVER_SSL_ENABLED_NAME)!=null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME)!=null;
+    boolean cacheServerSSLOverriden = this.sourceMap.get(SERVER_SSL_ENABLED)!=null;
+    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED)!=null;
-      this.sourceMap.put(SERVER_SSL_ENABLED_NAME,this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME));
-      if(this.sourceMap.get(CLUSTER_SSL_CIPHERS_NAME)!=null) {
+      this.sourceMap.put(SERVER_SSL_ENABLED,this.sourceMap.get(CLUSTER_SSL_ENABLED));
+      if(this.sourceMap.get(CLUSTER_SSL_CIPHERS)!=null) {
-        this.sourceMap.put(SERVER_SSL_CIPHERS_NAME,this.sourceMap.get(CLUSTER_SSL_CIPHERS_NAME));
+        this.sourceMap.put(SERVER_SSL_CIPHERS,this.sourceMap.get(CLUSTER_SSL_CIPHERS));
-      if(this.sourceMap.get(CLUSTER_SSL_PROTOCOLS_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_PROTOCOLS)!=null) {
-        this.sourceMap.put(SERVER_SSL_PROTOCOLS_NAME,this.sourceMap.get(CLUSTER_SSL_PROTOCOLS_NAME));
+        this.sourceMap.put(SERVER_SSL_PROTOCOLS,this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      if(this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION)!=null) {
-        this.sourceMap.put(SERVER_SSL_REQUIRE_AUTHENTICATION_NAME,this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME));
+        this.sourceMap.put(SERVER_SSL_REQUIRE_AUTHENTICATION,this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE)!=null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE)!=null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD)!=null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE)!=null) {
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME));
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD)!=null) {
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME));
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      if(this.sourceMap.get(SERVER_SSL_KEYSTORE_NAME)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME) != null) {
+      if(this.sourceMap.get(SERVER_SSL_KEYSTORE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(SERVER_SSL_KEYSTORE_TYPE_NAME)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME) != null) {
+      if(this.sourceMap.get(SERVER_SSL_KEYSTORE_TYPE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(SERVER_SSL_KEYSTORE_PASSWORD_NAME)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME) != null) {
+      if(this.sourceMap.get(SERVER_SSL_KEYSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME));
+        this.sourceMap.put(SERVER_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(SERVER_SSL_TRUSTSTORE_NAME)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME) != null) {
+      if(this.sourceMap.get(SERVER_SSL_TRUSTSTORE)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE) != null) {
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME));
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(SERVER_SSL_TRUSTSTORE_PASSWORD_NAME)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME) != null) {
+      if(this.sourceMap.get(SERVER_SSL_TRUSTSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME));
+        this.sourceMap.put(SERVER_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    boolean gatewaySSLOverriden = this.sourceMap.get(GATEWAY_SSL_ENABLED_NAME)!=null;
-    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME)!=null;
+    boolean gatewaySSLOverriden = this.sourceMap.get(GATEWAY_SSL_ENABLED)!=null;
+    boolean clusterSSLOverRidden = this.sourceMap.get(CLUSTER_SSL_ENABLED)!=null;
-      this.sourceMap.put(GATEWAY_SSL_ENABLED_NAME,this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME));
-      if(this.sourceMap.get(CLUSTER_SSL_CIPHERS_NAME)!=null) {
+      this.sourceMap.put(GATEWAY_SSL_ENABLED,this.sourceMap.get(CLUSTER_SSL_ENABLED));
+      if(this.sourceMap.get(CLUSTER_SSL_CIPHERS)!=null) {
-        this.sourceMap.put(GATEWAY_SSL_CIPHERS_NAME,this.sourceMap.get(CLUSTER_SSL_CIPHERS_NAME));
+        this.sourceMap.put(GATEWAY_SSL_CIPHERS,this.sourceMap.get(CLUSTER_SSL_CIPHERS));
-      if(this.sourceMap.get(CLUSTER_SSL_PROTOCOLS_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_PROTOCOLS)!=null) {
-        this.sourceMap.put(GATEWAY_SSL_PROTOCOLS_NAME,this.sourceMap.get(CLUSTER_SSL_PROTOCOLS_NAME));
+        this.sourceMap.put(GATEWAY_SSL_PROTOCOLS,this.sourceMap.get(CLUSTER_SSL_PROTOCOLS));
-      if(this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION)!=null) {
-        this.sourceMap.put(GATEWAY_SSL_REQUIRE_AUTHENTICATION_NAME,this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME));
+        this.sourceMap.put(GATEWAY_SSL_REQUIRE_AUTHENTICATION,this.sourceMap.get(CLUSTER_SSL_REQUIRE_AUTHENTICATION));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE)!=null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE)!=null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD)!=null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE)!=null) {
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME));
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME)!=null) {
+      if(this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD)!=null) {
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME));
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-      if(this.sourceMap.get(GATEWAY_SSL_KEYSTORE_NAME)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME) != null) {
+      if(this.sourceMap.get(GATEWAY_SSL_KEYSTORE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_NAME));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE));
-      if(this.sourceMap.get(GATEWAY_SSL_KEYSTORE_TYPE_NAME)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME) != null) {
+      if(this.sourceMap.get(GATEWAY_SSL_KEYSTORE_TYPE)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE_NAME));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_TYPE,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_TYPE));
-      if(this.sourceMap.get(GATEWAY_SSL_KEYSTORE_PASSWORD_NAME)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME) != null) {
+      if(this.sourceMap.get(GATEWAY_SSL_KEYSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD) != null) {
-        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME));
+        this.sourceMap.put(GATEWAY_SSL_KEYSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_KEYSTORE_PASSWORD));
-      if(this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE_NAME)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME)!= null) {
+      if(this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE)!= null) {
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_NAME));
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE));
-      if(this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE_PASSWORD_NAME)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME) != null) {
+      if(this.sourceMap.get(GATEWAY_SSL_TRUSTSTORE_PASSWORD)==null && this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD) != null) {
-        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD_NAME,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME));
+        this.sourceMap.put(GATEWAY_SSL_TRUSTSTORE_PASSWORD,this.sourceMap.get(CLUSTER_SSL_TRUSTSTORE_PASSWORD));
-    
-//    ConfigSource cs = getAttSourceMap().get(MCAST_PORT_NAME);
+
+    //    ConfigSource cs = getAttSourceMap().get(ConfigurationProperties.MCAST_PORT);
-    return propName.equalsIgnoreCase(SSL_ENABLED_NAME) ||
-        propName.equalsIgnoreCase(CLUSTER_SSL_ENABLED_NAME) ||
-        propName.equals(SECURITY_PEER_AUTH_INIT_NAME) ||
-        propName.equals(SECURITY_PEER_AUTHENTICATOR_NAME) ||
+    return propName.equalsIgnoreCase(SSL_ENABLED) ||
+        propName.equalsIgnoreCase(CLUSTER_SSL_ENABLED) ||
+        propName.equals(SECURITY_PEER_AUTH_INIT) ||
+        propName.equals(SECURITY_PEER_AUTHENTICATOR) ||
-    if ( props.containsKey(SSL_ENABLED_NAME) ) {
-      this.setAttribute(SSL_ENABLED_NAME, (String) props.get( SSL_ENABLED_NAME ), this.sourceMap.get(SSL_ENABLED_NAME) );
+    if ( props.containsKey(SSL_ENABLED) ) {
+      this.setAttribute(SSL_ENABLED, (String) props.get( SSL_ENABLED ), this.sourceMap.get(SSL_ENABLED) );
-    if ( props.containsKey(CLUSTER_SSL_ENABLED_NAME) ) {
-      this.setAttribute(CLUSTER_SSL_ENABLED_NAME, (String) props.get( CLUSTER_SSL_ENABLED_NAME ), this.sourceMap.get(CLUSTER_SSL_ENABLED_NAME) );
+    if ( props.containsKey(CLUSTER_SSL_ENABLED) ) {
+      this.setAttribute(CLUSTER_SSL_ENABLED, (String) props.get( CLUSTER_SSL_ENABLED ), this.sourceMap.get(CLUSTER_SSL_ENABLED) );
-    if (props.containsKey(SECURITY_PEER_AUTH_INIT_NAME)) {
-      this.setAttribute(SECURITY_PEER_AUTH_INIT_NAME, (String)props
-          .get(SECURITY_PEER_AUTH_INIT_NAME),
-          this.sourceMap.get(SECURITY_PEER_AUTH_INIT_NAME));
+    if (props.containsKey(SECURITY_PEER_AUTH_INIT)) {
+      this.setAttribute(SECURITY_PEER_AUTH_INIT, (String)props
+          .get(SECURITY_PEER_AUTH_INIT),
+          this.sourceMap.get(SECURITY_PEER_AUTH_INIT));
-    if (props.containsKey(SECURITY_PEER_AUTHENTICATOR_NAME)) {
-      this.setAttribute(SECURITY_PEER_AUTHENTICATOR_NAME, (String)props
-          .get(SECURITY_PEER_AUTHENTICATOR_NAME),
-          this.sourceMap.get(SECURITY_PEER_AUTHENTICATOR_NAME));
+    if (props.containsKey(SECURITY_PEER_AUTHENTICATOR)) {
+      this.setAttribute(SECURITY_PEER_AUTHENTICATOR, (String)props
+          .get(SECURITY_PEER_AUTHENTICATOR),
+          this.sourceMap.get(SECURITY_PEER_AUTHENTICATOR));
-    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT_NAME);
-    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTHENTICATOR_NAME);
+    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTH_INIT);
+    props.remove(SECURITY_SYSTEM_PREFIX + SECURITY_PEER_AUTHENTICATOR);
-    this.httpServicePort = (Integer)checkAttribute(HTTP_SERVICE_PORT_NAME, value);
+    this.httpServicePort = (Integer)checkAttribute(HTTP_SERVICE_PORT, value);
-    this.httpServiceBindAddress = (String)checkAttribute(HTTP_SERVICE_BIND_ADDRESS_NAME, value);
+    this.httpServiceBindAddress = (String)checkAttribute(HTTP_SERVICE_BIND_ADDRESS, value);
-    this.deltaPropagation = (Boolean)checkAttribute(DELTA_PROPAGATION_PROP_NAME, value);
+    this.deltaPropagation = (Boolean)checkAttribute(DELTA_PROPAGATION, value);
-    this.name = (String)checkAttribute(NAME_NAME, value);
+    this.name = (String) checkAttribute(NAME, value);
-    this.tcpPort = (Integer)checkAttribute(TCP_PORT_NAME, value);
+    this.tcpPort = (Integer) checkAttribute(TCP_PORT, value);
-    this.mcastPort = (Integer)checkAttribute(MCAST_PORT_NAME, value);
+    this.mcastPort = (Integer) checkAttribute(MCAST_PORT, value);
-    this.mcastTtl = (Integer)checkAttribute(MCAST_TTL_NAME, value);
+    this.mcastTtl = (Integer) checkAttribute(MCAST_TTL, value);
-    this.socketLeaseTime = (Integer)checkAttribute(SOCKET_LEASE_TIME_NAME, value);
+    this.socketLeaseTime = (Integer)checkAttribute(SOCKET_LEASE_TIME, value);
-    this.socketBufferSize = (Integer)checkAttribute(SOCKET_BUFFER_SIZE_NAME, value);
+    this.socketBufferSize = (Integer)checkAttribute(SOCKET_BUFFER_SIZE, value);
-    this.conserveSockets = (Boolean)checkAttribute(CONSERVE_SOCKETS_NAME, value);
+    this.conserveSockets = (Boolean)checkAttribute(CONSERVE_SOCKETS, value);
-    this.roles = (String)checkAttribute(ROLES_NAME, value);
+    this.roles = (String)checkAttribute(ROLES, value);
-    this.mcastAddress = (InetAddress)checkAttribute(MCAST_ADDRESS_NAME, value);
+    this.mcastAddress = (InetAddress) checkAttribute(MCAST_ADDRESS, value);
-    this.bindAddress = (String)checkAttribute(BIND_ADDRESS_NAME, value);
+    this.bindAddress = (String) checkAttribute(BIND_ADDRESS, value);
-    this.serverBindAddress = (String)checkAttribute(SERVER_BIND_ADDRESS_NAME, value);
+    this.serverBindAddress = (String) checkAttribute(SERVER_BIND_ADDRESS, value);
-    this.locators = (String)checkAttribute(LOCATORS_NAME, value);
+    this.locators = (String) checkAttribute(LOCATORS, value);
-    this.logFile = (File)checkAttribute(LOG_FILE_NAME, value);
+    this.logFile = (File)checkAttribute(LOG_FILE, value);
-    this.logLevel = (Integer)checkAttribute(LOG_LEVEL_NAME, value);
+    this.logLevel = (Integer)checkAttribute(LOG_LEVEL, value);
-        value = (String)checkAttribute(START_LOCATOR_NAME, value);
+        value = (String) checkAttribute(START_LOCATOR, value);
-    this.statisticSamplingEnabled = (Boolean)checkAttribute(STATISTIC_SAMPLING_ENABLED_NAME, value);
+    this.statisticSamplingEnabled = (Boolean)checkAttribute(STATISTIC_SAMPLING_ENABLED, value);
-    value = (Integer)checkAttribute(STATISTIC_SAMPLE_RATE_NAME, value);
+    value = (Integer)checkAttribute(STATISTIC_SAMPLE_RATE, value);
-    this.statisticArchiveFile = (File)checkAttribute(STATISTIC_ARCHIVE_FILE_NAME, value);
+    this.statisticArchiveFile = (File)checkAttribute(STATISTIC_ARCHIVE_FILE, value);
-    this.cacheXmlFile = (File)checkAttribute(CACHE_XML_FILE_NAME, value);
+    this.cacheXmlFile = (File)checkAttribute(CACHE_XML_FILE, value);
-    this.ackWaitThreshold = (Integer)checkAttribute(ACK_WAIT_THRESHOLD_NAME, value);
+    this.ackWaitThreshold = (Integer)checkAttribute(ACK_WAIT_THRESHOLD, value);
-    this.ackForceDisconnectThreshold = (Integer)checkAttribute(ACK_SEVERE_ALERT_THRESHOLD_NAME, value);
+    this.ackForceDisconnectThreshold = (Integer)checkAttribute(ACK_SEVERE_ALERT_THRESHOLD, value);
-    this.archiveDiskSpaceLimit = (Integer)checkAttribute(ARCHIVE_DISK_SPACE_LIMIT_NAME, value);
+    this.archiveDiskSpaceLimit = (Integer)checkAttribute(ARCHIVE_DISK_SPACE_LIMIT, value);
-    this.archiveFileSizeLimit = (Integer)checkAttribute(ARCHIVE_FILE_SIZE_LIMIT_NAME, value);
+    this.archiveFileSizeLimit = (Integer)checkAttribute(ARCHIVE_FILE_SIZE_LIMIT, value);
-    this.logDiskSpaceLimit = (Integer)checkAttribute(LOG_DISK_SPACE_LIMIT_NAME, value);
+    this.logDiskSpaceLimit = (Integer)checkAttribute(LOG_DISK_SPACE_LIMIT, value);
-    this.logFileSizeLimit = (Integer)checkAttribute(LOG_FILE_SIZE_LIMIT_NAME, value);
+    this.logFileSizeLimit = (Integer)checkAttribute(LOG_FILE_SIZE_LIMIT, value);
-    this.sslEnabled = (Boolean)checkAttribute(SSL_ENABLED_NAME, value);
+    this.sslEnabled = (Boolean)checkAttribute(SSL_ENABLED, value);
-    this.sslProtocols = (String)checkAttribute(SSL_PROTOCOLS_NAME, value);
+    this.sslProtocols = (String)checkAttribute(SSL_PROTOCOLS, value);
-    this.sslCiphers = (String)checkAttribute(SSL_CIPHERS_NAME, value);
+    this.sslCiphers = (String)checkAttribute(SSL_CIPHERS, value);
-    this.sslRequireAuthentication = (Boolean)checkAttribute(SSL_REQUIRE_AUTHENTICATION_NAME, value);
+    this.sslRequireAuthentication = (Boolean)checkAttribute(SSL_REQUIRE_AUTHENTICATION, value);
-    this.clusterSSLEnabled = (Boolean)checkAttribute(CLUSTER_SSL_ENABLED_NAME, value);
+    this.clusterSSLEnabled = (Boolean)checkAttribute(CLUSTER_SSL_ENABLED, value);
-    this.clusterSSLProtocols = (String)checkAttribute(CLUSTER_SSL_PROTOCOLS_NAME, value);
+    this.clusterSSLProtocols = (String)checkAttribute(CLUSTER_SSL_PROTOCOLS, value);
-    this.clusterSSLCiphers = (String)checkAttribute(CLUSTER_SSL_CIPHERS_NAME, value);
+    this.clusterSSLCiphers = (String)checkAttribute(CLUSTER_SSL_CIPHERS, value);
-    this.clusterSSLRequireAuthentication = (Boolean)checkAttribute(CLUSTER_SSL_REQUIRE_AUTHENTICATION_NAME, value);
+    this.clusterSSLRequireAuthentication = (Boolean)checkAttribute(CLUSTER_SSL_REQUIRE_AUTHENTICATION, value);
-    value = (String)checkAttribute(CLUSTER_SSL_KEYSTORE_NAME, value);
+    value = (String)checkAttribute(CLUSTER_SSL_KEYSTORE, value);
-    value =  (String)checkAttribute(CLUSTER_SSL_KEYSTORE_TYPE_NAME, value);
+    value =  (String)checkAttribute(CLUSTER_SSL_KEYSTORE_TYPE, value);
-    value = (String)checkAttribute(CLUSTER_SSL_KEYSTORE_PASSWORD_NAME, value);
+    value = (String)checkAttribute(CLUSTER_SSL_KEYSTORE_PASSWORD, value);
-    value = (String)checkAttribute(CLUSTER_SSL_TRUSTSTORE_NAME, value);
+    value = (String)checkAttribute(CLUSTER_SSL_TRUSTSTORE, value);
-    value = (String)checkAttribute(CLUSTER_SSL_TRUSTSTORE_PASSWORD_NAME, value);
+    value = (String)checkAttribute(CLUSTER_SSL_TRUSTSTORE_PASSWORD, value);
-    mcastSendBufferSize = (Integer)checkAttribute(MCAST_SEND_BUFFER_SIZE_NAME, value);
+    mcastSendBufferSize = (Integer)checkAttribute(MCAST_SEND_BUFFER_SIZE, value);
-    mcastRecvBufferSize = (Integer)checkAttribute(MCAST_RECV_BUFFER_SIZE_NAME, value);
+    mcastRecvBufferSize = (Integer)checkAttribute(MCAST_RECV_BUFFER_SIZE, value);
-    this.asyncDistributionTimeout = (Integer)checkAttribute(ASYNC_DISTRIBUTION_TIMEOUT_NAME, value);
+    this.asyncDistributionTimeout = (Integer)checkAttribute(ASYNC_DISTRIBUTION_TIMEOUT, value);
-    this.asyncQueueTimeout = (Integer)checkAttribute(ASYNC_QUEUE_TIMEOUT_NAME, value);
+    this.asyncQueueTimeout = (Integer)checkAttribute(ASYNC_QUEUE_TIMEOUT, value);
-    this.asyncMaxQueueSize = (Integer)checkAttribute(ASYNC_MAX_QUEUE_SIZE_NAME, value);
+    this.asyncMaxQueueSize = (Integer)checkAttribute(ASYNC_MAX_QUEUE_SIZE, value);
-    mcastFlowControl = (FlowControlParams)checkAttribute(MCAST_FLOW_CONTROL_NAME, values);
+    mcastFlowControl = (FlowControlParams)checkAttribute(MCAST_FLOW_CONTROL, values);
-    udpFragmentSize = (Integer)checkAttribute(UDP_FRAGMENT_SIZE_NAME, value);
+    udpFragmentSize = (Integer)checkAttribute(UDP_FRAGMENT_SIZE, value);
-    udpSendBufferSize = (Integer)checkAttribute(UDP_SEND_BUFFER_SIZE_NAME, value);
+    udpSendBufferSize = (Integer)checkAttribute(UDP_SEND_BUFFER_SIZE, value);
-    udpRecvBufferSize = (Integer)checkAttribute(UDP_RECV_BUFFER_SIZE_NAME, value);
+    udpRecvBufferSize = (Integer)checkAttribute(UDP_RECV_BUFFER_SIZE, value);
-    memberTimeout = (Integer)checkAttribute(MEMBER_TIMEOUT_NAME, value);
+    memberTimeout = (Integer)checkAttribute(MEMBER_TIMEOUT, value);
-  /** @since 5.7 */
+  /** @since GemFire 5.7 */
-  /** @since 5.7 */
+  /** @since GemFire 5.7 */
-    this.clientConflation = (String)checkAttribute(CLIENT_CONFLATION_PROP_NAME, value);
+    this.clientConflation = (String)checkAttribute(CONFLATE_EVENTS, value);
-    durableClientId = (String)checkAttribute(DURABLE_CLIENT_ID_NAME, value);
+    durableClientId = (String)checkAttribute(DURABLE_CLIENT_ID, value);
-    durableClientTimeout = (Integer)checkAttribute(DURABLE_CLIENT_TIMEOUT_NAME, value);
+    durableClientTimeout = (Integer)checkAttribute(DURABLE_CLIENT_TIMEOUT, value);
-    securityClientAuthInit = (String)checkAttribute(SECURITY_CLIENT_AUTH_INIT_NAME, value);
+    securityClientAuthInit = (String)checkAttribute(SECURITY_CLIENT_AUTH_INIT, value);
+  public String getSecurityManager() {
+    return securityManager;
+  }
+
+  public String getPostProcessor() {
+    return postProcessor;
+  }
+
-    securityClientAuthenticator = (String)checkAttribute(SECURITY_CLIENT_AUTHENTICATOR_NAME, value);
+    securityClientAuthenticator = (String)checkAttribute(SECURITY_CLIENT_AUTHENTICATOR, value);
+  }
+
+  public void setSecurityManager(String value){
+    securityManager = (String)checkAttribute(SECURITY_MANAGER, value);
+  }
+
+  public void setPostProcessor(String value) {
+    postProcessor = (String) checkAttribute(SECURITY_POST_PROCESSOR, value);
-    securityClientDHAlgo = (String)checkAttribute(SECURITY_CLIENT_DHALGO_NAME, value);
+    securityClientDHAlgo = (String)checkAttribute(SECURITY_CLIENT_DHALGO, value);
-    securityPeerAuthInit = (String)checkAttribute(SECURITY_PEER_AUTH_INIT_NAME, value);
+    securityPeerAuthInit = (String)checkAttribute(SECURITY_PEER_AUTH_INIT, value);
-    securityPeerAuthenticator = (String)checkAttribute(SECURITY_PEER_AUTHENTICATOR_NAME, value);
+    securityPeerAuthenticator = (String)checkAttribute(SECURITY_PEER_AUTHENTICATOR, value);
-    securityClientAccessor = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR_NAME, value);
+    securityClientAccessor = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR, value);
-    securityClientAccessorPP = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR_PP_NAME, value);
+    securityClientAccessorPP = (String)checkAttribute(SECURITY_CLIENT_ACCESSOR_PP, value);
-    securityLogLevel = (Integer)checkAttribute(SECURITY_LOG_LEVEL_NAME, value);
+    securityLogLevel = (Integer)checkAttribute(SECURITY_LOG_LEVEL, value);
-    securityLogFile = (File)checkAttribute(SECURITY_LOG_FILE_NAME, value);
+    securityLogFile = (File)checkAttribute(SECURITY_LOG_FILE, value);
-    securityPeerMembershipTimeout = (Integer)checkAttribute(SECURITY_PEER_VERIFYMEMBER_TIMEOUT_NAME, value);
+    securityPeerMembershipTimeout = (Integer)checkAttribute(SECURITY_PEER_VERIFY_MEMBER_TIMEOUT, value);
-    checkAttribute(attName, attValue);
-    this.distributedSystemId = (Integer)checkAttribute(DISTRIBUTED_SYSTEM_ID_NAME, distributedSystemId);
+    this.distributedSystemId = (Integer)checkAttribute(DISTRIBUTED_SYSTEM_ID, distributedSystemId);
-    this.enforceUniqueHost = (Boolean)checkAttribute(ENFORCE_UNIQUE_HOST_NAME, enforceUniqueHost);
+    this.enforceUniqueHost = (Boolean)checkAttribute(ENFORCE_UNIQUE_HOST, enforceUniqueHost);
-    this.redundancyZone = (String)checkAttribute(REDUNDANCY_ZONE_NAME, redundancyZone);
+    this.redundancyZone = (String)checkAttribute(REDUNDANCY_ZONE, redundancyZone);
-    checkAttribute(attName, attValue);
-    this.groups = (String)checkAttribute(GROUPS_NAME, value);
+    this.groups = (String)checkAttribute(GROUPS, value);
-    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_NAME, value);
+    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE, value);
-    value =(String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_TYPE_NAME, value);
+    value =(String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_TYPE, value);
-    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_PASSWORD_NAME, value);
+    value = (String)checkAttribute(JMX_MANAGER_SSL_KEYSTORE_PASSWORD, value);
-    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE_NAME, value);
+    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE, value);
-    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD_NAME, value);
+    value = (String)checkAttribute(JMX_MANAGER_SSL_TRUSTSTORE_PASSWORD, value);
-    this.jmxManagerPort = (Integer)checkAttribute(JMX_MANAGER_PORT_NAME, value);
+    this.jmxManagerPort = (Integer)checkAttribute(JMX_MANAGER_PORT, value);
-    this.jmxManagerBindAddress = (String)checkAttribute(JMX_MANAGER_BIND_ADDRESS_NAME, value);
+    this.jmxManagerBindAddress = (String)checkAttribute(JMX_MANAGER_BIND_ADDRESS, value);
-    this.jmxManagerHostnameForClients = (String)checkAttribute(JMX_MANAGER_HOSTNAME_FOR_CLIENTS_NAME, value);
+    this.jmxManagerHostnameForClients = (String)checkAttribute(JMX_MANAGER_HOSTNAME_FOR_CLIENTS, value);
-    this.jmxManagerPasswordFile = (String)checkAttribute(JMX_MANAGER_PASSWORD_FILE_NAME, value);
+    this.jmxManagerPasswordFile = (String)checkAttribute(JMX_MANAGER_PASSWORD_FILE, value);
-    this.jmxManagerAccessFile = (String)checkAttribute(JMX_MANAGER_ACCESS_FILE_NAME, value);
+    this.jmxManagerAccessFile = (String)checkAttribute(JMX_MANAGER_ACCESS_FILE, value);
-    this.jmxManagerUpdateRate = (Integer)checkAttribute(JMX_MANAGER_UPDATE_RATE_NAME, value);
+    this.jmxManagerUpdateRate = (Integer)checkAttribute(JMX_MANAGER_UPDATE_RATE, value);
+  @Override
+  public void setShiroInit(String value) {
+    this.shiroInit = value;
+  }
+
+  @Override
+  public String getShiroInit() {
+    return this.shiroInit;
+  }
+
+    if (securityManager == null) {
+      if (other.securityManager != null)
+        return false;
+    } else if (!securityManager
+      .equals(other.securityManager))
+      return false;
+    if (postProcessor == null) {
+      if (other.postProcessor != null)
+        return false;
+    } else if (!postProcessor
+      .equals(other.postProcessor))
+      return false;
+    if (shiroInit == null) {
+      if (other.shiroInit != null)
+        return false;
+    } else if (!shiroInit
+      .equals(other.shiroInit))
+      return false;
+             * result
+             + ((securityManager == null) ? 0
+                  : securityManager.hashCode());
+    result = prime
+             * result
+             + ((postProcessor == null) ? 0
+                  : postProcessor.hashCode());
+    result = prime
+             * result
+             + ((shiroInit == null) ? 0
+                  : shiroInit.hashCode());
+    result = prime
-    String fileName = "gemfire.properties";
+    String fileName = DistributionConfig.GEMFIRE_PREFIX + "properties";
-    if (Boolean.getBoolean("gemfire.disallowMcastDefaults")) {
+    if (Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "disallowMcastDefaults")) {
-          "gemfire.disallowMcastDefaults set and default address and port are being used");
+            DistributionConfig.GEMFIRE_PREFIX + "disallowMcastDefaults set and default address and port are being used");
-    membershipPortRange = (int[])checkAttribute(MEMBERSHIP_PORT_RANGE_NAME, range);
+    membershipPortRange = (int[])checkAttribute(MEMBERSHIP_PORT_RANGE, range);
-    this.remoteLocators = (String)checkAttribute(REMOTE_LOCATORS_NAME, value);
+    this.remoteLocators = (String)checkAttribute(REMOTE_LOCATORS, value);
-    this.memcachedPort = (Integer)checkAttribute(MEMCACHED_PORT_NAME, value);
+    this.memcachedPort = (Integer)checkAttribute(MEMCACHED_PORT, value);
-    this.memcachedProtocol = (String)checkAttribute(MEMCACHED_PROTOCOL_NAME, protocol);
+    this.memcachedProtocol = (String)checkAttribute(MEMCACHED_PROTOCOL, protocol);
-    this.redisPort = (Integer)checkAttribute(REDIS_PORT_NAME, value);
+    this.redisPort = (Integer)checkAttribute(REDIS_PORT, value);
-    this.redisBindAddress = (String)checkAttribute(REDIS_BIND_ADDRESS_NAME, bindAddress);
+    this.redisBindAddress = (String)checkAttribute(REDIS_BIND_ADDRESS, bindAddress);
-    this.offHeapMemorySize = (String)checkAttribute(OFF_HEAP_MEMORY_SIZE_NAME, value);
+    this.offHeapMemorySize = (String)checkAttribute(OFF_HEAP_MEMORY_SIZE, value);
-    this.memcachedBindAddress = (String)checkAttribute(MEMCACHED_BIND_ADDRESS_NAME, bindAddress);
+    this.memcachedBindAddress = (String)checkAttribute(MEMCACHED_BIND_ADDRESS, bindAddress);
-    this.enableSharedConfiguration = (Boolean)checkAttribute(ENABLE_CLUSTER_CONFIGURATION_NAME, value);
+    this.enableSharedConfiguration = (Boolean)checkAttribute(ENABLE_CLUSTER_CONFIGURATION, value);
-    this.useSharedConfiguration = (Boolean)checkAttribute(USE_CLUSTER_CONFIGURATION_NAME, newValue);
+    this.useSharedConfiguration = (Boolean)checkAttribute(USE_CLUSTER_CONFIGURATION, newValue);
-    this.loadSharedConfigurationFromDir = (Boolean)checkAttribute(LOAD_CLUSTER_CONFIG_FROM_DIR_NAME, newValue);
+    this.loadSharedConfigurationFromDir = (Boolean)checkAttribute(LOAD_CLUSTER_CONFIGURATION_FROM_DIR, newValue);
-    this.serverSSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED_NAME, value);
+    this.serverSSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED, value);
-    this.serverSslRequireAuthentication = (Boolean)checkAttribute(SERVER_SSL_REQUIRE_AUTHENTICATION_NAME, value);
+    this.serverSslRequireAuthentication = (Boolean)checkAttribute(SERVER_SSL_REQUIRE_AUTHENTICATION, value);
-    this.serverSslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS_NAME, protocols);
+    this.serverSslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
-    this.serverSslCiphers = (String)checkAttribute(SERVER_SSL_CIPHERS_NAME, ciphers);
+    this.serverSslCiphers = (String)checkAttribute(SERVER_SSL_CIPHERS, ciphers);
-    value = (String)checkAttribute(SERVER_SSL_KEYSTORE_NAME, value);
+    value = (String)checkAttribute(SERVER_SSL_KEYSTORE, value);
-    value = (String)checkAttribute(SERVER_SSL_KEYSTORE_TYPE_NAME, value);
+    value = (String)checkAttribute(SERVER_SSL_KEYSTORE_TYPE, value);
-    value = (String) checkAttribute(SERVER_SSL_KEYSTORE_PASSWORD_NAME,  value );
+    value = (String) checkAttribute(SERVER_SSL_KEYSTORE_PASSWORD,  value );
-    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE_NAME, value);
+    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE, value);
-    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE_PASSWORD_NAME, value);
+    value = (String)checkAttribute(SERVER_SSL_TRUSTSTORE_PASSWORD, value);
-    this.gatewaySSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED_NAME, value);
+    this.gatewaySSLEnabled = (Boolean)checkAttribute(SERVER_SSL_ENABLED, value);
-    this.gatewaySslRequireAuthentication = (Boolean)checkAttribute(GATEWAY_SSL_REQUIRE_AUTHENTICATION_NAME, value);
+    this.gatewaySslRequireAuthentication = (Boolean)checkAttribute(GATEWAY_SSL_REQUIRE_AUTHENTICATION, value);
-    this.gatewaySslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS_NAME, protocols);
+    this.gatewaySslProtocols = (String)checkAttribute(SERVER_SSL_PROTOCOLS, protocols);
-    this.gatewaySslCiphers = (String)checkAttribute(GATEWAY_SSL_CIPHERS_NAME, ciphers);
+    this.gatewaySslCiphers = (String)checkAttribute(GATEWAY_SSL_CIPHERS, ciphers);
-    checkAttribute(GATEWAY_SSL_KEYSTORE_NAME, value);
+    checkAttribute(GATEWAY_SSL_KEYSTORE, value);
-    checkAttribute(GATEWAY_SSL_KEYSTORE_TYPE_NAME, value);
+    checkAttribute(GATEWAY_SSL_KEYSTORE_TYPE, value);
-    checkAttribute(GATEWAY_SSL_KEYSTORE_PASSWORD_NAME, value);
+    checkAttribute(GATEWAY_SSL_KEYSTORE_PASSWORD, value);
-    checkAttribute(GATEWAY_SSL_TRUSTSTORE_NAME, value);
+    checkAttribute(GATEWAY_SSL_TRUSTSTORE, value);
-    checkAttribute(GATEWAY_SSL_TRUSTSTORE_PASSWORD_NAME, value);
+    checkAttribute(GATEWAY_SSL_TRUSTSTORE_PASSWORD, value);
-    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_NAME, httpServiceSSLKeyStore);
+    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE, httpServiceSSLKeyStore);
-    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_TYPE_NAME, httpServiceSSLKeyStoreType);
+    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_TYPE, httpServiceSSLKeyStoreType);
-    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD_NAME, httpServiceSSLKeyStorePassword);
+    checkAttribute(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD, httpServiceSSLKeyStorePassword);
-    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE_NAME, httpServiceSSLTrustStore);
+    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE, httpServiceSSLTrustStore);
-    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD_NAME, httpServiceSSLTrustStorePassword);
+    checkAttribute(HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD, httpServiceSSLTrustStorePassword);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS29 INS83 INS43 INS59 INS29 INS83 INS43 INS59 INS83 INS43 INS59 MOV8 MOV25 MOV25 MOV25 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 MOV44 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 MOV44 INS83 INS39 INS42 MOV44 INS8 INS83 INS39 INS42 MOV44 INS8 MOV44 MOV44 MOV44 INS44 INS44 MOV44 MOV44 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS43 INS42 INS8 UPD66 INS65 INS42 INS42 INS42 INS65 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS21 INS21 INS21 INS60 INS60 INS25 INS42 INS41 INS42 INS41 INS21 INS21 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS21 INS42 INS42 INS41 INS25 INS25 INS25 INS21 INS21 INS21 UPD66 INS66 INS66 UPD66 INS7 INS7 INS7 UPD66 UPD66 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS39 INS59 INS39 INS59 MOV27 INS8 UPD66 UPD66 INS42 INS42 INS7 INS7 INS42 INS42 INS42 INS7 INS22 INS27 INS8 INS25 INS27 INS8 INS25 INS27 INS8 INS25 INS7 INS7 INS7 MOV43 INS42 INS22 INS32 INS22 INS32 INS22 INS32 INS42 INS27 INS42 MOV27 MOV21 MOV21 MOV25 MOV25 MOV25 MOV21 MOV27 INS25 INS25 INS25 INS25 INS25 MOV27 INS25 INS25 INS25 INS25 MOV27 INS25 INS25 INS25 INS25 INS25 MOV27 INS25 INS25 INS25 INS25 UPD42 UPD42 UPD42 UPD42 INS42 INS11 INS42 INS11 INS22 INS42 INS52 INS42 INS42 INS33 INS25 INS38 INS41 INS42 INS33 INS25 INS38 INS41 INS42 INS33 INS25 INS38 INS41 INS42 INS27 INS42 INS27 INS42 INS27 INS27 INS27 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS52 INS42 INS42 INS42 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV32 INS33 INS27 MOV32 INS27 MOV27 MOV27 INS8 MOV27 MOV27 INS8 MOV27 MOV27 INS8 INS27 MOV8 MOV27 INS8 MOV32 INS27 MOV27 MOV27 INS8 MOV27 MOV27 INS8 MOV27 MOV27 INS8 INS27 MOV8 MOV32 INS27 MOV27 MOV27 INS8 MOV27 MOV27 INS8 MOV27 MOV27 INS8 INS27 MOV8 MOV27 INS8 MOV32 INS27 MOV27 MOV27 INS8 MOV27 MOV27 INS8 MOV27 MOV27 MOV8 INS27 MOV8 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS32 MOV43 INS32 MOV43 MOV43 MOV43 INS43 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 INS43 MOV43 INS52 INS42 INS27 INS41 INS32 INS9 INS27 INS41 INS32 INS9 INS27 INS41 INS32 INS9 INS27 INS36 INS27 INS36 INS27 INS36 INS40 INS45 INS40 INS45 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV22 UPD42 MOV32 INS32 INS32 INS33 INS32 MOV22 UPD42 UPD42 UPD42 MOV22 UPD42 MOV22 UPD42 MOV32 INS32 INS33 INS32 INS32 INS32 INS32 INS32 INS32 UPD27 UPD27 MOV21 INS21 UPD27 UPD27 MOV21 INS21 UPD27 UPD27 MOV21 INS21 INS27 MOV27 MOV21 MOV21 INS21 UPD42 UPD42 MOV22 UPD42 MOV32 INS32 INS33 INS32 INS32 INS32 INS32 INS32 INS32 UPD27 UPD27 MOV21 INS21 UPD27 UPD27 MOV21 INS21 UPD27 UPD27 MOV21 INS21 INS27 MOV27 MOV21 MOV21 UPD42 UPD42 MOV22 UPD42 MOV32 INS32 INS33 INS32 INS32 INS32 INS32 INS32 INS32 UPD27 UPD27 MOV21 INS21 UPD27 UPD27 MOV21 INS21 UPD27 UPD27 MOV21 INS21 INS27 MOV27 MOV21 MOV21 INS21 UPD42 UPD42 MOV22 UPD42 MOV32 INS32 INS33 INS32 INS32 INS32 INS32 INS32 INS32 UPD27 UPD27 MOV21 INS21 UPD27 UPD27 MOV21 INS21 UPD27 UPD27 MOV21 MOV21 INS27 INS27 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS40 INS33 INS9 INS42 INS42 INS40 INS40 INS33 INS9 INS42 INS42 INS40 INS40 INS33 INS9 INS42 INS42 INS40 INS42 INS42 INS16 INS42 INS42 INS16 INS42 INS42 INS16 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 UPD42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV52 UPD42 UPD42 MOV22 INS42 INS42 MOV22 UPD42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 INS22 INS42 INS42 MOV32 INS32 MOV32 INS32 MOV32 INS32 MOV32 MOV33 INS32 UPD42 MOV22 UPD42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 INS22 INS42 INS42 MOV32 INS32 MOV32 INS32 MOV32 INS32 MOV32 MOV33 UPD42 MOV22 UPD42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 INS22 INS42 INS42 MOV32 INS32 MOV32 INS32 MOV32 INS32 MOV32 MOV33 INS32 UPD42 MOV22 UPD42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV32 INS32 MOV32 INS32 MOV32 MOV32 MOV32 INS33 INS32 INS33 UPD42 UPD42 UPD42 UPD42 INS36 INS34 INS32 INS36 INS34 INS32 INS36 INS34 INS32 MOV22 UPD42 INS32 MOV22 UPD42 INS22 UPD42 MOV52 MOV42 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 INS22 UPD42 INS52 INS42 INS22 UPD42 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 UPD42 UPD42 UPD42 MOV22 MOV42 UPD42 MOV42 INS32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 INS22 UPD42 INS52 INS42 INS22 UPD42 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 MOV22 UPD42 UPD42 UPD42 MOV22 UPD42 MOV22 UPD42 INS32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 INS22 UPD42 INS52 INS42 INS22 UPD42 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 UPD42 UPD42 UPD42 MOV22 MOV42 UPD42 MOV42 INS32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV32 MOV22 UPD42 MOV22 UPD42 MOV22 UPD42 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 INS42 INS42 INS32 UPD42 UPD42 MOV22 UPD42 UPD42 MOV22 UPD42 MOV22 UPD42 MOV32 UPD42 MOV22 UPD42 MOV42 UPD42 MOV42 MOV22 UPD42 MOV32 UPD42 UPD42 UPD42 UPD42 INS27 INS42 INS42 INS27 INS42 INS42 INS27 INS42 INS42 MOV22 INS42 INS42 MOV22 UPD42 INS52 INS42 INS22 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS22 UPD42 INS52 INS42 INS22 UPD42 INS52 INS42 INS22 UPD42 MOV22 MOV42 UPD42 MOV42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV52 MOV52 MOV22 UPD42 MOV52 MOV52 MOV42 MOV22 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS22 UPD42 INS52 INS42 INS22 UPD42 INS52 INS42 INS22 UPD42 MOV22 MOV42 UPD42 MOV42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV52 MOV42 MOV22 UPD42 MOV52 MOV42 MOV52 MOV42 MOV22 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS22 UPD42 INS52 INS42 INS22 UPD42 INS52 INS42 INS22 UPD42 MOV22 MOV42 UPD42 MOV42 MOV22 INS42 INS42 MOV22 INS42 INS42 MOV52 MOV42 UPD42 MOV42 MOV22 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV22 UPD42 MOV22 UPD42 MOV22 UPD42 MOV22 MOV42 UPD42 MOV42 MOV22 MOV42 UPD42 MOV42 MOV22 UPD42 UPD42 UPD42 INS42 INS33 INS42 INS33 INS42 INS33 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 MOV52 MOV42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 INS27 INS40 INS45 DEL40 DEL40 DEL39 DEL42 DEL33 DEL27 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL59 DEL60 DEL25 DEL8 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL27 DEL25 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL25 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL27 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL27 DEL27 DEL25 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL25 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL33 DEL27 DEL32 DEL33 DEL27 DEL27 DEL25 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL45 DEL45 DEL45