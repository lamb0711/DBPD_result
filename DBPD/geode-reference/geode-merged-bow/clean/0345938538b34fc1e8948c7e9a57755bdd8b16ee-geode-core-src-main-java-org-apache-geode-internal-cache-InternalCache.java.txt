GEODE-7503: Cleanup GemFireCacheImpl (#4436)

* Move inner-classes to bottom of outer class

* Move fields to top of class

* More fields

* Fixup

* Fix IJ inspection warnings

* Remove bug system ticket numbers

* Cleanup javadocs, toString, and comments

* Use @VisibleForTesting annotation

* Move toString method and backupFiles field

* Pull javadocs up to interfaces.
Define VisibleForTesting methods in InternalCacheForTesting.
Identify more methods as VisibleForTesting.

* Fixup javadocs and minor warnings in Cache interfaces.

* Move unchecked util methods to UncheckedUtils inner class

* Move static constants and fields to top of class.
Rename FIVE_HOURS to FIVE_HOURS_MILLIS.
Review older TODOs.

* Move volatile fields above non-final fields

* Move non-final fields below volatile and final fields

* Move final fields above volatile fields

* wip

* Adjust whitespace and line feeds.
Remove more TODOs and comments.
Fix spelling typo.

* Import various static methods and constants
Adjust more line feeds
Adjust more white space

* Weaken declared types where it makes sense
Add more static imports

* Remove unnecessary uses of final on local vars

* Remove uncessary uses of final on local vars

* Fixup unchecked types
Restore return types to match the interfaces

* Minor cleanup

* Change Consumer<Void> to Runnable (duh)

* Adjust line feeds of large if-statement

* Remove SuppressWarnings

* Fix AssemblyContentsIntegrationTest

* Fixup GemFireCacheImpl

-import org.apache.geode.cache.server.CacheServer;
-import org.apache.geode.management.internal.RestAgent;
- * @see org.apache.geode.cache.Cache
+ * @see Cache
-public interface InternalCache extends Cache, Extensible<Cache>, CacheTime,
+public interface InternalCache extends Cache, Extensible<Cache>, CacheTime, InternalCacheForTesting,
+  /**
+   * Return the member id of the local distributed system connection.
+   *
+   * @since GemFire 5.0
+   */
+  /**
+   * Return list of all disk stores.
+   *
+   * @since GemFire prPersistSprint2
+   */
+  /**
+   * Get the CacheClientProxy SystemTimer for this cache.
+   *
+   * @return the timer, lazily created
+   */
+  /**
+   * Called by the {@link CacheClientNotifier} when a client goes away.
+   *
+   * @since GemFire 5.7
+   */
+  /**
+   * Purge the CCPTimer to prevent a large number of cancelled tasks from building up in it.
+   */
+  /**
+   * Return the cq/interest information for a named region, creating one if it doesn't exist.
+   */
-  Region getRegion(String path, boolean returnDestroyedRegion);
+  /**
+   * @param returnDestroyedRegion if true, okay to return a destroyed region
+   */
+  <K, V> Region<K, V> getRegion(String path, boolean returnDestroyedRegion);
+  /**
+   * Gets or lazily creates the PartitionedRegion distributed lock service. This call will
+   * synchronize on this GemFireCache.
+   *
+   * @return the PartitionedRegion distributed lock service
+   */
+  /**
+   * Return a list of all GatewaySenders (including the senders for internal use).
+   */
-  void regionReinitialized(Region region);
+  /**
+   * Set the reinitialized region and unregister it as reinitializing.
+   *
+   * @throws IllegalStateException if there is no region by that name registered as reinitializing.
+   */
+  void regionReinitialized(Region<?, ?> region);
+  /**
+   * Check to see if any cache components require notification from a partitioned region.
+   * Notification adds to the messaging a PR must do on each put/destroy/invalidate operation and
+   * should be kept to a minimum
+   *
+   * @param r the partitioned region
+   * @return true if the region should deliver all of its events to this cache
+   */
+  /**
+   * True if the cache was closed due to being shunned by other members.
+   */
+  /**
+   * Return true if get operations should return a copy; false if a reference to the value should be
+   * returned.
+   *
+   * @since GemFire 4.0
+   */
+  /**
+   * Update stats for completion of a registerInterest operation.
+   */
+  /**
+   * Register the specified region name as reinitializing, creating and adding a Future for it to
+   * the map.
+   *
+   * @throws IllegalStateException if there is already a region by that name registered.
+   */
+  /**
+   * Clear a reinitializing region, e.g. reinitialization failed.
+   *
+   * @throws IllegalStateException if cannot find reinitializing region registered by that name.
+   */
+  /**
+   * Remove the specified root region.
+   *
+   * @param rootRgn the region to be removed
+   *
+   * @return true if root region was removed, false if not found
+   */
+  /**
+   * Return the {@code Executor} (thread pool) that is used to execute cache event listeners or
+   * {@code null} if no pool exists.
+   *
+   * @since GemFire 3.5
+   */
+  /**
+   * Get a reference to a Region that is reinitializing, or null if that Region is not
+   * reinitializing or this thread is interrupted. If a reinitializing region is found, then this
+   * method blocks until reinitialization is complete and then returns the region.
+   */
+  /**
+   * True if durable subscriptions (registrations and queries) should be preserved.
+   *
+   * @since GemFire 5.7
+   */
+  /**
+   * Creates a CacheClosedException with the given reason.
+   */
+  /**
+   * Creates a CacheClosedException with the given reason and cause.
+   */
+  /**
+   * Get the ExpirationScheduler for this cache.
+   *
+   * @return the scheduler, lazily created
+   */
+  /**
+   * @return JTA TransactionManager associated with the Cache.
+   * @since GemFire 4.0
+   */
-  @Override
-  long cacheTimeMillis();
-
-  InternalRegion getRegionByPath(String path);
+  <K, V> Region<K, V> getRegionByPath(String path);
+  InternalRegion getInternalRegionByPath(String path);
+
+  /**
+   * @return true if cache is created using a ClientCacheFactory
+   * @see #hasPool()
+   */
+  /**
+   * Return a set of all current partitioned regions for test hook.
+   */
+  /**
+   * Return true if any of the GemFire services prefer PdxInstance and an application has not
+   * requested getObject() on the PdxInstance.
+   */
+  /**
+   * Make the dynamic region factory ready. Public so it can be called from CacheCreation during xml
+   * processing.
+   */
-  void addDeclarableProperties(final Map<Declarable, Properties> mapOfNewDeclarableProps);
+  /**
+   * Add to the map of declarable properties. Any properties that exactly match existing properties
+   * for a class in the list will be discarded (no duplicate Properties allowed).
+   *
+   * @param mapOfNewDeclarableProps Map of the declarable properties to add
+   */
+  void addDeclarableProperties(Map<Declarable, Properties> mapOfNewDeclarableProps);
+  /**
+   * Method to check for GemFire client. In addition to checking for ClientCacheFactory, this method
+   * checks for any defined pools.
+   *
+   * @return true if the cache has pools declared
+   */
+  /**
+   * Create disk store factory with predefined attributes.
+   *
+   * @since GemFire prPersistSprint2
+   */
-  void determineDefaultPool();
-
-  Throwable getDisconnectCause();
-
+  /**
+   * Add the partitioned region to the set of tracked partitioned regions. Used to notify the
+   * regions when this cache requires, or does not require notification of all region/entry events.
+   */
+  /**
+   * Remove the partitioned region from the set of tracked instances.
+   */
+  /**
+   * Return the threadId/sequenceId sweeper task for this cache.
+   *
+   * @return the sweeper task
+   */
+  /**
+   * Return the QueryMonitor for this cache based on system property MAX_QUERY_EXECUTION_TIME.
+   *
+   * @since GemFire 6.0
+   */
-  List<Properties> getDeclarableProperties(final String className);
+  /**
+   * Return the list of all instances of properties for Declarables with the given class name.
+   *
+   * @param className Class name of the declarable
+   * @return List of all instances of properties found for the given declarable
+   */
+  List<Properties> getDeclarableProperties(String className);
-  int getUpTime();
+  /**
+   * Return the number of seconds that have elapsed since the Cache was created.
+   *
+   * @since GemFire 3.5
+   */
+  long getUpTime();
+  /**
+   * Return a set of all current regions in the cache, including buckets.
+   *
+   * @since GemFire 6.0
+   */
+  /**
+   * Return true if the named global region is initializing.
+   */
+  /**
+   * @deprecated Please use {@code LogService.getLogger()} instead.
+   */
+  @Deprecated
+  @Deprecated
+  /**
+   * Gets or lazily creates the GatewaySender distributed lock service.
+   *
+   * @return the GatewaySender distributed lock service
+   */
-  RestAgent getRestAgent();
-
-  Properties getDeclarableProperties(final Declarable declarable);
+  /**
+   * Get the properties for the given declarable.
+   *
+   * @param declarable The declarable
+   * @return Properties found for the given declarable
+   */
+  Properties getDeclarableProperties(Declarable declarable);
+  /**
+   * TODO: is this flavor of close not used?
+   */
-  boolean removeCacheServer(CacheServer cacheServer);
-
-   * A test-hook allowing you to alter the cache setting established by
-   * CacheFactory.setPdxReadSerialized()
-   *
-   * @deprecated tests using this method should be refactored to not require it
-   */
-  void setReadSerializedForTest(boolean value);
-
-  /**
+  /**
+   * Blocks until no register interests are in progress.
+   */
-  @Override
-  InternalQueryService getQueryService();
-
-  Set<AsyncEventQueue> getAsyncEventQueues(boolean visibleOnly);
-
-  void closeDiskStores();
-
+  /**
+   * Perform initialization, solve the early escaped reference problem by putting publishing
+   * references to this instance in this method (vs. the constructor).
+   */
+  /**
+   * Generate XML for the cache before shutting down due to forced disconnect.
+   */
+
+  InternalQueryService getInternalQueryService();

MOV31 MOV31 MOV31 MOV31 MOV31 INS43 INS42 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS73 INS73 INS74 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 MOV44 INS29 INS29 INS29 INS29 MOV44 INS29 INS29 INS29 INS29 INS29 INS73 INS73 INS74 INS42 INS44 UPD42 INS29 INS29 INS29 INS29 INS29 INS29 INS29 INS29 UPD42 INS29 UPD42 INS29 INS29 INS29 INS29 UPD39 INS29 INS29 INS29 INS78 MOV43 UPD42 INS78 MOV43 INS42 INS29 INS29 INS29 INS29 INS29 UPD42 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 MOV43 INS43 INS43 INS65 INS65 INS65 INS65 INS65 INS74 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS43 INS43 INS43 INS42 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS42 INS42 UPD65 INS65 INS65 INS65 INS65 INS65 INS65 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS42 INS66 INS42 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS66 MOV43 INS76 INS76 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS66 INS65 INS66 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS42 INS66 INS68 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS65 INS66 UPD66 UPD66 INS66 INS42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS66 DEL40 DEL26 DEL40 DEL26 DEL40 DEL42 DEL78 DEL39 DEL42 DEL83 DEL39 DEL42 DEL31 DEL42 DEL43 DEL42 DEL31 DEL83 DEL42 DEL43 DEL42 DEL31 DEL66 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL39 DEL42 DEL44 DEL31 DEL39 DEL42 DEL31 DEL42 DEL78