Merge branch 'release/1.3.0'

-import java.util.Iterator;
- * A generic comparator class which compares two Object/StructImpl according to their sort criterion
- * specified in order by clause
- * 
+ * A generic comparator class which compares two Object/StructImpl according to their sort criteria
+ * specified in order by clause.
-   * Yogesh : This methods evaluates sort criteria and returns a ArrayList of Object[] arrays of
-   * evaluated criteria
+   * This method evaluates sort criteria and returns an ArrayList of Object[] arrays of the
+   * evaluated criteria.
-   * @param value
-   * @return Object[]
+   * @param value the criteria to be evaluated.
+   * @return an Object array of Object arrays of the evaluated criteria.
-
-    CompiledSortCriterion csc;
-      Iterator orderiter = orderByAttrs.iterator();
-      while (orderiter.hasNext()) {
-        csc = (CompiledSortCriterion) orderiter.next();
-        Object[] arr = new Object[2];
-        arr[0] = csc.evaluate(value, context);
-        arr[1] = Boolean.valueOf(csc.getCriterion());
+      for (CompiledSortCriterion csc : orderByAttrs) {
+        Object[] arr = {csc.evaluate(value, context), csc.getCriterion()};
-
+  /**
+   * This method evaluates sort criteria and returns the resulting integer value of comparing the
+   * two objects passed into it based on these criteria.
+   *
+   * @param value1 the first object to be compared.
+   * @param value2 the second object to be compared.
+   * @return a negative integer, zero, or a positive integer if the first argument is less than,
+   *         equal to, or greater than the second, based on the evaluated sort criteria.
+   */
-    CompiledSortCriterion csc;
-      Iterator orderiter = orderByAttrs.iterator();
-      while (orderiter.hasNext()) {
-        csc = (CompiledSortCriterion) orderiter.next();
+      for (CompiledSortCriterion csc : orderByAttrs) {
-
-        if (sortCriteriaForValue1 == null || sortCriteriaForValue2 == null) {
-          if (sortCriteriaForValue1 == null) {
-            result = (sortCriteriaForValue2 == null ? 0 : -1);
-          } else {
-            result = 1;
-          }
-        } else if (sortCriteriaForValue1 == QueryService.UNDEFINED
-            || sortCriteriaForValue2 == QueryService.UNDEFINED) {
-          if (sortCriteriaForValue1 == QueryService.UNDEFINED) {
-            result = (sortCriteriaForValue2 == QueryService.UNDEFINED ? 0 : -1);
-          } else {
-            result = 1;
-          }
-        } else {
-          if (sortCriteriaForValue1 instanceof Number && sortCriteriaForValue2 instanceof Number) {
-            double diff = ((Number) sortCriteriaForValue1).doubleValue()
-                - ((Number) sortCriteriaForValue2).doubleValue();
-            result = diff > 0 ? 1 : diff < 0 ? -1 : 0;
-          } else {
-            if (sortCriteriaForValue1 instanceof PdxString
-                && sortCriteriaForValue2 instanceof String) {
-              sortCriteriaForValue2 = new PdxString((String) sortCriteriaForValue2);
-            } else if (sortCriteriaForValue2 instanceof PdxString
-                && sortCriteriaForValue1 instanceof String) {
-              sortCriteriaForValue1 = new PdxString((String) sortCriteriaForValue1);
-            }
-            result = ((Comparable) sortCriteriaForValue1).compareTo(sortCriteriaForValue2);
-          }
-
-        }
-
-        if (result == 0) {
-          continue;
-        } else {
-          if (Boolean.valueOf(csc.getCriterion())) {
-            result = (result * (-1));
+        result = compareHelperMethod(sortCriteriaForValue1, sortCriteriaForValue2);
+        if (result != 0) {
+          if (csc.getCriterion()) {
+            result *= -1;
-    int result = -1;
+    int result;
-
-        || !this.objType.isStructType()) { // obj1 instanceof Object && obj2
-                                           // instanceof Object){
-      if ((result = evaluateSortCriteria(obj1, obj2)) != 0) {
+        || !this.objType.isStructType()) {
+      if (((result = evaluateSortCriteria(obj1, obj2)) != 0) && (orderByAttrs != null)) {
-
-      QueryObserver observer = QueryObserverHolder.getInstance();
-      if (observer != null) {
-        observer.orderByColumnsEqual();
+      if (QueryObserverHolder.getInstance() != null) {
+        QueryObserverHolder.getInstance().orderByColumnsEqual();
-      // The comparable fields are equal, so we check if the overall keys are
-      // equal or not
+      // Comparable fields are equal - check if overall keys are equal
-
-          // Check for null value.
-          if (o1 == null || o2 == null) {
-            if (o1 == null) {
-              if (o2 == null) {
-                continue;
-              }
-              return -1;
-            } else {
-              return 1;
-            }
-          } else if (o1 == QueryService.UNDEFINED || o2 == QueryService.UNDEFINED) {
-            if (o1 == QueryService.UNDEFINED) {
-              if (o2 == QueryService.UNDEFINED) {
-                continue;
-              }
-              return -1;
-            } else {
-              return 1;
-            }
-          }
-
-          if (o1 instanceof Comparable) {
-            final int rslt;
-            if (o1 instanceof Number && o2 instanceof Number) {
-              double diff = ((Number) o1).doubleValue() - ((Number) o2).doubleValue();
-              rslt = diff > 0 ? 1 : diff < 0 ? -1 : 0;
-            } else {
-              if (o1 instanceof PdxString && o2 instanceof String) {
-                o2 = new PdxString((String) o2);
-              } else if (o2 instanceof PdxString && o1 instanceof String) {
-                o1 = new PdxString((String) o1);
-              }
-              rslt = ((Comparable) o1).compareTo(o2);
-            }
-            if (rslt == 0) {
-              continue;
-            } else {
-              return rslt;
-            }
-          } else if (!o1.equals(o2)) {
-            return -1;
+          result = compareHelperMethod(o1, o2);
+          if (result != 0) {
+            return result;
-        if (obj1 instanceof PdxString && obj2 instanceof String) {
-          obj2 = new PdxString((String) obj2);
-        } else if (obj2 instanceof PdxString && obj1 instanceof String) {
-          obj1 = new PdxString((String) obj1);
-        }
-
-        if (obj1 instanceof Comparable) {
-          return ((Comparable) obj1).compareTo(obj2);
-        } else {
-          return obj1.equals(obj2) ? 0 : -1;
-        }
+        return compareTwoStrings(obj1, obj2);
-    return -1;
+    throw new ClassCastException(); // throw exception if args can't be compared w/this comparator
+  private int compareHelperMethod(Object obj1, Object obj2) {
+    if (obj1 == null || obj2 == null) {
+      return compareIfOneOrMoreNull(obj1, obj2);
+    } else if (obj1 == QueryService.UNDEFINED || obj2 == QueryService.UNDEFINED) {
+      return compareIfOneOrMoreQueryServiceUndefined(obj1, obj2);
+    } else {
+      return compareTwoObjects(obj1, obj2);
+    }
+  }
+
+  private int compareIfOneOrMoreNull(Object obj1, Object obj2) {
+    if (obj1 == null) {
+      return obj2 == null ? 0 : -1;
+    } else {
+      return 1;
+    }
+  }
+
+  private int compareIfOneOrMoreQueryServiceUndefined(Object obj1, Object obj2) {
+    if (obj1 == QueryService.UNDEFINED) {
+      return obj2 == QueryService.UNDEFINED ? 0 : -1;
+    } else {
+      return 1;
+    }
+  }
+
+  private int compareTwoObjects(Object obj1, Object obj2) {
+    if (obj1 instanceof Number && obj2 instanceof Number) {
+      return compareTwoNumbers(obj1, obj2);
+    } else {
+      return compareTwoStrings(obj1, obj2);
+    }
+  }
+
+  private int compareTwoNumbers(Object obj1, Object obj2) {
+    Number num1 = (Number) obj1;
+    Number num2 = (Number) obj2;
+    return Double.compare(num1.doubleValue(), num2.doubleValue());
+  }
+
+  private int compareTwoStrings(Object obj1, Object obj2) {
+    if (obj1 instanceof PdxString && obj2 instanceof String) {
+      obj2 = new PdxString((String) obj2);
+    } else if (obj2 instanceof PdxString && obj1 instanceof String) {
+      obj1 = new PdxString((String) obj1);
+    }
+    if (obj1 instanceof Comparable) {
+      return ((Comparable) obj1).compareTo(obj2);
+    } else {
+      return obj1.equals(obj2) ? 0 : -1;
+    }
+  }

INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS29 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 MOV29 INS83 INS39 INS42 MOV44 MOV44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 MOV83 MOV39 UPD42 MOV42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 MOV8 UPD66 UPD66 INS65 INS65 INS65 INS65 MOV60 INS25 MOV41 INS60 MOV25 MOV6 INS25 INS53 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS43 INS42 MOV25 INS43 INS42 INS43 INS42 MOV25 INS43 INS42 INS43 INS42 INS25 INS43 INS42 INS43 INS42 MOV60 MOV60 INS41 INS43 INS42 INS43 INS42 UPD66 UPD66 INS66 UPD66 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS66 MOV27 INS8 INS39 INS59 MOV27 INS8 INS14 UPD42 MOV42 UPD42 MOV42 INS27 INS8 INS25 UPD42 MOV42 INS42 MOV8 INS42 INS42 MOV8 INS42 INS42 MOV27 MOV62 INS8 MOV8 UPD42 MOV42 UPD42 MOV42 MOV43 MOV43 INS32 INS42 INS42 INS70 INS70 INS42 MOV25 INS25 INS25 UPD43 MOV43 INS27 INS27 INS41 INS27 INS8 MOV8 UPD42 INS41 UPD42 INS41 INS41 INS41 UPD42 MOV11 INS42 MOV11 INS42 INS42 INS32 INS32 INS44 INS42 MOV8 INS44 INS42 INS8 INS27 UPD27 MOV27 MOV8 MOV32 INS8 INS8 UPD42 INS42 INS33 INS42 INS33 INS32 INS27 INS27 INS41 INS41 INS16 INS16 UPD42 UPD42 INS32 INS32 UPD42 UPD42 INS42 INS42 INS42 INS42 MOV43 INS42 MOV43 INS42 MOV60 MOV60 MOV21 MOV25 INS36 INS36 INS32 INS33 MOV60 INS70 MOV41 INS41 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 INS40 INS32 INS32 INS27 INS34 MOV38 INS27 INS34 MOV38 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 MOV27 INS27 INS42 INS42 INS32 MOV44 MOV11 INS8 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV33 UPD42 MOV42 MOV40 INS4 UPD42 INS32 INS42 INS34 INS25 INS10 INS42 INS33 MOV32 INS42 MOV60 INS21 INS25 INS42 INS42 INS42 MOV32 MOV32 INS42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV8 INS7 INS27 INS8 MOV42 INS32 INS42 MOV34 INS41 UPD7 INS42 INS42 INS42 INS42 MOV38 DEL40 DEL26 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL42 DEL43 DEL85 DEL5 DEL34 DEL3 DEL42 DEL34 DEL2 DEL7 DEL21 DEL42 DEL34 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL32 DEL11 DEL34 DEL42 DEL33 DEL27 DEL42 DEL42 DEL33 DEL27 DEL34 DEL16 DEL36 DEL7 DEL21 DEL8 DEL42 DEL40 DEL42 DEL42 DEL40 DEL27 DEL34 DEL16 DEL36 DEL7 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL8 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL34 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL42 DEL27 DEL34 DEL42 DEL34 DEL27 DEL34 DEL16 DEL16 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL42 DEL43 DEL42 DEL11 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL62 DEL42 DEL43 DEL62 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL25 DEL34 DEL27 DEL18 DEL8 DEL32 DEL25 DEL10 DEL8 DEL25 DEL8 DEL61 DEL8 DEL25 DEL8 DEL31 DEL39 DEL42 DEL34 DEL38 DEL59 DEL60 DEL43 DEL42 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL8 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL8 DEL25 DEL25 DEL42 DEL42 DEL43 DEL62 DEL83 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL34 DEL42 DEL34 DEL27 DEL34 DEL38 DEL34 DEL16 DEL16 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL43 DEL62 DEL42 DEL43 DEL62 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL7 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL34 DEL27 DEL18 DEL8 DEL42 DEL41 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL38 DEL34 DEL38 DEL41 DEL8 DEL25 DEL25 DEL8 DEL70 DEL8 DEL25 DEL8 DEL25 DEL34 DEL38 DEL41 DEL8 DEL31 DEL42 DEL42 DEL34 DEL38 DEL36 DEL27 DEL36 DEL7 DEL21 DEL27 DEL18 DEL8 DEL25 DEL34 DEL38 DEL41 DEL27 DEL18 DEL8 DEL25 DEL34 DEL38 DEL41 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL7 DEL21 DEL39 DEL36 DEL42 DEL32 DEL42 DEL11 DEL36 DEL42 DEL32 DEL27 DEL39 DEL42 DEL36 DEL42 DEL32 DEL42 DEL11 DEL36 DEL42 DEL32 DEL27