Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Allows a snapshot of cache data to be imported and exported. Each region in 
- * the cache will be included in the snapshot (one snapshot file for each
- * region). Example usage:
+ * Allows a snapshot of cache data to be imported and exported. Each region in the cache will be
+ * included in the snapshot (one snapshot file for each region). Example usage:
- * The default behavior is to perform all I/O operations on the node where the
- * snapshot operations are invoked.  This will involve either collecting or
- * dispersing data over the network if the cache contains a partitioned region.
- * The snapshot behavior can be changed using {@link SnapshotOptions}. For example:
+ * The default behavior is to perform all I/O operations on the node where the snapshot operations
+ * are invoked. This will involve either collecting or dispersing data over the network if the cache
+ * contains a partitioned region. The snapshot behavior can be changed using
+ * {@link SnapshotOptions}. For example:
+ * 
- * Note that the snapshot does not provide a consistency guarantee. Updates to 
- * data during the course of import/export operations could result data 
- * inconsistencies.
+ * 
+ * Note that the snapshot does not provide a consistency guarantee. Updates to data during the
+ * course of import/export operations could result data inconsistencies.
-   * Creates a <code>SnapshotOptions</code> object configured with default
-   * settings. The options can be used to configure snapshot behavior.
+   * Creates a <code>SnapshotOptions</code> object configured with default settings. The options can
+   * be used to configure snapshot behavior.
-  
+
-   * Exports all regions in the cache to the specified directory.  The cache
-   * entries in each region will be written to a separate file.
+   * Exports all regions in the cache to the specified directory. The cache entries in each region
+   * will be written to a separate file.
-   * @param dir the directory for writing the snapshots, will be created if
-   *            necessary
+   * @param dir the directory for writing the snapshots, will be created if necessary
-  void save(File dir, SnapshotFormat format)
-  throws IOException;
+  void save(File dir, SnapshotFormat format) throws IOException;
-   * Exports all regions in the cache to the specified directory by applying
-   * user-configured options.  The cache entries in each region will be written 
-   * to a separate file.
+   * Exports all regions in the cache to the specified directory by applying user-configured
+   * options. The cache entries in each region will be written to a separate file.
-   * @param dir the directory for writing the snapshots, will be created if
-   *            necessary
+   * @param dir the directory for writing the snapshots, will be created if necessary
-  void save(File dir, SnapshotFormat format, SnapshotOptions<Object, Object> options) 
-  throws IOException;  
-  
+  void save(File dir, SnapshotFormat format, SnapshotOptions<Object, Object> options)
+      throws IOException;
+
-   * Imports all files in the specified directory into the cache. The cache
-   * entries in a given snapshot file are loaded into the same region they were
-   * originally exported from (based on a corresponding region name). Files that
-   * do not match the supplied snapshot format will cause an import error.
+   * Imports all files in the specified directory into the cache. The cache entries in a given
+   * snapshot file are loaded into the same region they were originally exported from (based on a
+   * corresponding region name). Files that do not match the supplied snapshot format will cause an
+   * import error.
-   * Prior to loading data, all regions should have been created and 
-   * any necessary serializers (either {@link DataSerializer} or 
-   * {@link PdxSerializer}) and {@link Instantiator}s should have been 
-   * registered.
+   * Prior to loading data, all regions should have been created and any necessary serializers
+   * (either {@link DataSerializer} or {@link PdxSerializer}) and {@link Instantiator}s should have
+   * been registered.
-  void load(File dir, SnapshotFormat format) 
-  throws IOException, ClassNotFoundException;
+  void load(File dir, SnapshotFormat format) throws IOException, ClassNotFoundException;
-   * Imports the specified files into the cache by applying user-configured
-   * options. The cache entries in a given snapshot file are loaded into the 
-   * same region they were originally exported from (based on a corresponding 
-   * region name). Files that do not match the supplied snapshot format will 
-   * cause an import error.
+   * Imports the specified files into the cache by applying user-configured options. The cache
+   * entries in a given snapshot file are loaded into the same region they were originally exported
+   * from (based on a corresponding region name). Files that do not match the supplied snapshot
+   * format will cause an import error.
-   * Prior to loading data, all regions should have been created and any 
-   * necessary serializers (either {@link DataSerializer} or 
-   * {@link PdxSerializer}) and {@link Instantiator}s should have been 
-   * registered.
+   * Prior to loading data, all regions should have been created and any necessary serializers
+   * (either {@link DataSerializer} or {@link PdxSerializer}) and {@link Instantiator}s should have
+   * been registered.
-  void load(File[] snapshots, SnapshotFormat format, SnapshotOptions<Object, Object> options) 
-  throws IOException, ClassNotFoundException;  
+  void load(File[] snapshots, SnapshotFormat format, SnapshotOptions<Object, Object> options)
+      throws IOException, ClassNotFoundException;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66