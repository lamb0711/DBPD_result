Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This program sorts the entries in a GemFire log file (one written using
- * a {@link org.apache.geode.i18n.LogWriterI18n}) by their timestamps.
- * Note that in order to do so, we have to read the entire file into
- * memory.
+ * This program sorts the entries in a GemFire log file (one written using a
+ * {@link org.apache.geode.i18n.LogWriterI18n}) by their timestamps. Note that in order to do so, we
+ * have to read the entire file into memory.
-   * Parses a log file from a given source and writes the sorted
-   * entries to a given destination.
+   * Parses a log file from a given source and writes the sorted entries to a given destination.
-  public static void sortLogFile(InputStream logFile, 
-                                 PrintWriter sortedFile)
-    throws IOException {
+  public static void sortLogFile(InputStream logFile, PrintWriter sortedFile) throws IOException {
-        public int compare(Object o1, Object o2) {
-          LogFileParser.LogEntry entry1 =
-            (LogFileParser.LogEntry) o1;
-          LogFileParser.LogEntry entry2 =
-            (LogFileParser.LogEntry) o2;
-          String stamp1 = entry1.getTimestamp();
-          String stamp2 = entry2.getTimestamp();
+      public int compare(Object o1, Object o2) {
+        LogFileParser.LogEntry entry1 = (LogFileParser.LogEntry) o1;
+        LogFileParser.LogEntry entry2 = (LogFileParser.LogEntry) o2;
+        String stamp1 = entry1.getTimestamp();
+        String stamp2 = entry2.getTimestamp();
-          if (stamp1.equals(stamp2)) {
-            if (entry1.getContents().equals(entry2.getContents())) {
-              // Timestamps and contents are both equal - compare hashCode()
-              return Integer.valueOf(entry1.hashCode()).compareTo(
-                     Integer.valueOf(entry2.hashCode()));
-            } else {
-              return entry1.getContents().compareTo(entry2.getContents());
-            }
+        if (stamp1.equals(stamp2)) {
+          if (entry1.getContents().equals(entry2.getContents())) {
+            // Timestamps and contents are both equal - compare hashCode()
+            return Integer.valueOf(entry1.hashCode()).compareTo(Integer.valueOf(entry2.hashCode()));
-            return stamp1.compareTo(stamp2);
+            return entry1.getContents().compareTo(entry2.getContents());
+        } else {
+          return stamp1.compareTo(stamp2);
-      });
+      }
+    });
-    BufferedReader br =
-      new BufferedReader(new InputStreamReader(logFile));
+    BufferedReader br = new BufferedReader(new InputStreamReader(logFile));
-    for (Iterator iter = sorted.iterator(); iter.hasNext(); ) {
-      LogFileParser.LogEntry entry =
-        (LogFileParser.LogEntry) iter.next();
+    for (Iterator iter = sorted.iterator(); iter.hasNext();) {
+      LogFileParser.LogEntry entry = (LogFileParser.LogEntry) iter.next();
-    ////////////////////  Main Program  ////////////////////
+  //////////////////// Main Program ////////////////////
-    err.println(LocalizedStrings.SortLogFile_USAGE.toLocalizedString() + ": java SortLogFile logFile");
-    err.println("-sortedFile file " + LocalizedStrings.SortLogFile_FILE_IN_WHICH_TO_PUT_SORTED_LOG.toLocalizedString());
+    err.println(
+        LocalizedStrings.SortLogFile_USAGE.toLocalizedString() + ": java SortLogFile logFile");
+    err.println("-sortedFile file "
+        + LocalizedStrings.SortLogFile_FILE_IN_WHICH_TO_PUT_SORTED_LOG.toLocalizedString());
-    err.println(LocalizedStrings.SortLogFile_SORTS_A_GEMFIRE_LOG_FILE_BY_TIMESTAMP_THE_MERGED_LOG_FILE_IS_WRITTEN_TO_SYSTEM_OUT_OR_A_FILE.toLocalizedString());
+    err.println(
+        LocalizedStrings.SortLogFile_SORTS_A_GEMFIRE_LOG_FILE_BY_TIMESTAMP_THE_MERGED_LOG_FILE_IS_WRITTEN_TO_SYSTEM_OUT_OR_A_FILE
+            .toLocalizedString());
-//    int dirCount = 0;
-    
+    // int dirCount = 0;
+
-    
+

UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66