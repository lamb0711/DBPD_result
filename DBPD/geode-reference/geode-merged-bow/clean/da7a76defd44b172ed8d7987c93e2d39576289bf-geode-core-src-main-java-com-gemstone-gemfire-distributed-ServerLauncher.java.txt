Merge branch 'develop' into feature/GEODE-17-2

+import java.util.ServiceLoader;
-import com.gemstone.gemfire.distributed.AbstractLauncher.Status;
+import com.gemstone.gemfire.distributed.internal.DefaultServerLauncherCacheProvider;
-import com.gemstone.gemfire.internal.util.CollectionUtils;
-import org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer;
-
-public final class ServerLauncher extends AbstractLauncher<String> {
+public class ServerLauncher extends AbstractLauncher<String> {
+  private static final ServerLauncherCacheProvider DEFAULT_CACHE_PROVIDER = new DefaultServerLauncherCacheProvider();
+
-  final CacheConfig getCacheConfig() {
+  public final CacheConfig getCacheConfig() {
-          this.cache = (isSpringXmlLocationSpecified() ? startWithSpring() : startWithGemFireApi(gemfireProperties));
+          this.cache = createCache(gemfireProperties);
-  private Cache startWithSpring() {
-    System.setProperty(DistributionConfig.GEMFIRE_PREFIX + DistributionConfig.NAME_NAME, getMemberName());
-
-    new SpringContextBootstrappingInitializer().init(CollectionUtils.createProperties(Collections.singletonMap(
-      SpringContextBootstrappingInitializer.CONTEXT_CONFIG_LOCATIONS_PARAMETER, getSpringXmlLocation())));
-
-    return SpringContextBootstrappingInitializer.getApplicationContext().getBean(Cache.class);
-  }
-
-  private Cache startWithGemFireApi(final Properties gemfireProperties ) {
-    final CacheConfig cacheConfig = getCacheConfig();
-    final CacheFactory cacheFactory = new CacheFactory(gemfireProperties);
-
-    if (cacheConfig.pdxPersistentUserSet) {
-      cacheFactory.setPdxPersistent(cacheConfig.isPdxPersistent());
+  private Cache createCache(Properties gemfireProperties) {
+    ServiceLoader<ServerLauncherCacheProvider> loader = ServiceLoader.load(ServerLauncherCacheProvider.class);
+    for(ServerLauncherCacheProvider provider : loader) {
+      Cache cache = provider.createCache(gemfireProperties, this);
+      if(cache != null) {
+        return cache;
+      }
-
-    if (cacheConfig.pdxDiskStoreUserSet) {
-      cacheFactory.setPdxDiskStore(cacheConfig.getPdxDiskStore());
-    }
-
-    if (cacheConfig.pdxIgnoreUnreadFieldsUserSet) {
-      cacheFactory.setPdxIgnoreUnreadFields(cacheConfig.getPdxIgnoreUnreadFields());
-    }
-
-    if (cacheConfig.pdxReadSerializedUserSet) {
-      cacheFactory.setPdxReadSerialized(cacheConfig.isPdxReadSerialized());
-    }
-
-    if (cacheConfig.pdxSerializerUserSet) {
-      cacheFactory.setPdxSerializer(cacheConfig.getPdxSerializer());
-    }
-
-    return cacheFactory.create();
+    
+    return DEFAULT_CACHE_PROVIDER.createCache(gemfireProperties, this);

MOV26 MOV26 UPD40 UPD40 INS23 INS83 INS83 INS83 INS43 INS59 INS83 UPD42 UPD42 MOV42 INS42 INS14 INS60 INS70 UPD43 MOV43 INS74 INS59 INS44 INS42 INS8 UPD42 INS43 INS43 UPD42 MOV42 INS32 INS43 INS42 INS60 MOV25 UPD42 UPD42 INS42 INS52 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS57 INS42 MOV43 INS59 INS27 INS8 INS43 INS42 INS32 INS42 INS33 INS41 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS32 UPD42 MOV42 MOV42 DEL40 DEL26 DEL83 DEL42 DEL32 DEL42 DEL32 DEL32 DEL16 DEL36 DEL83 DEL43 DEL42 DEL42 DEL42 DEL40 DEL40 DEL27 DEL42 DEL32 DEL32 DEL21 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL32 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL57 DEL32 DEL41 DEL8 DEL31 DEL83 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL83 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL83 DEL43 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25