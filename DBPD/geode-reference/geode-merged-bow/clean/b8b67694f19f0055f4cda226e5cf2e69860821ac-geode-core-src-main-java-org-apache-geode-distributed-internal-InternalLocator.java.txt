Merge branch 'develop' into feature/GEODE-7049

+import java.net.URI;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
-import org.apache.commons.lang3.tuple.ImmutablePair;
-import org.apache.commons.lang3.tuple.Pair;
-import org.apache.geode.distributed.internal.membership.MemberFactory;
+import org.apache.geode.distributed.internal.membership.NetLocator;
+import org.apache.geode.distributed.internal.membership.NetLocatorFactory;
-import org.apache.geode.distributed.internal.membership.gms.NetLocator;
+import org.apache.geode.distributed.internal.membership.adapter.GMSMembershipManager;
-import org.apache.geode.internal.cache.HttpService;
+import org.apache.geode.internal.cache.InternalHttpService;
+import org.apache.geode.security.AuthTokenEnabledComponents;
-    netLocator = MemberFactory.newLocatorHandler(bindAddress, locatorsConfigValue,
+    netLocator = NetLocatorFactory.newLocatorHandler(bindAddress, locatorsConfigValue,
-        netLocator.setMembershipManager(internalDistributedSystem.getDM().getMembershipManager());
+        netLocator.setServices(
+            ((GMSMembershipManager) internalDistributedSystem.getDM().getMembershipManager())
+                .getServices());
-    String gemfireManagementWar = agentUtil.findWarLocation("geode-web-management");
+    URI gemfireManagementWar = agentUtil.findWarLocation("geode-web-management");
-    Pair<String, Object> securityServiceAttribute =
-        new ImmutablePair<>(HttpService.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
-            internalCache.getSecurityService());
-    Pair<String, Object> clusterManagementServiceAttribute =
-        new ImmutablePair<>(HttpService.CLUSTER_MANAGEMENT_SERVICE_CONTEXT_PARAM,
-            clusterManagementService);
+    Map<String, Object> serviceAttributes = new HashMap<>();
+    serviceAttributes.put(InternalHttpService.SECURITY_SERVICE_SERVLET_CONTEXT_PARAM,
+        internalCache.getSecurityService());
+    serviceAttributes.put(InternalHttpService.CLUSTER_MANAGEMENT_SERVICE_CONTEXT_PARAM,
+        clusterManagementService);
+
+    String[] authEnabledComponents = distributionConfig.getSecurityAuthTokenEnabledComponents();
+
+    boolean managementAuthTokenEnabled = Arrays.stream(authEnabledComponents)
+        .anyMatch(AuthTokenEnabledComponents::hasManagement);
+    serviceAttributes.put(InternalHttpService.AUTH_TOKEN_ENABLED_PARAM, managementAuthTokenEnabled);
-          x.addWebApplication("/management", gemfireManagementWar, securityServiceAttribute,
-              clusterManagementServiceAttribute);
+          x.addWebApplication("/management", Paths.get(gemfireManagementWar), serviceAttributes);
+        boolean noprevlocator = false;
+        if (!hasLocator()) {
+          setLocator(this);
+          noprevlocator = true;
+        }
+          if (noprevlocator) {
+            removeLocator(this);
+          }
-        setLocator(this);

MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 UPD40 UPD40 UPD40 UPD40 INS40 INS21 INS21 INS60 INS60 INS21 INS43 UPD74 INS32 INS32 INS5 INS59 INS39 INS59 INS32 INS42 UPD43 UPD42 INS42 INS42 INS40 MOV32 INS42 INS42 INS40 INS42 MOV43 INS85 INS42 INS32 INS42 INS32 INS42 INS42 INS40 INS42 UPD42 UPD42 UPD74 INS42 INS42 INS32 INS42 INS90 UPD43 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS32 UPD42 INS39 INS59 INS38 INS8 INS42 INS42 MOV32 INS42 INS9 INS32 MOV21 INS21 INS36 UPD42 INS42 INS7 INS25 INS11 INS42 INS9 INS42 INS8 INS43 MOV32 INS21 INS42 INS32 UPD42 INS32 INS42 INS42 MOV42 INS42 INS52 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL40 DEL14 DEL59 DEL60 DEL40 DEL42 DEL42