GEODE-6588: Cleanup generics and static analyzer warnings.

+
-    Set<String> failedNodes = new HashSet<String>();
+    Set<String> failedNodes = new HashSet<>();
-    Set<String> failedNodes = new HashSet<String>();
+    Set<String> failedNodes = new HashSet<>();
-  static List<SingleHopOperationCallable> constructAndGetExecuteFunctionTasks(String region,
+  private static List<SingleHopOperationCallable> constructAndGetExecuteFunctionTasks(String region,
-    final List<SingleHopOperationCallable> tasks = new ArrayList<SingleHopOperationCallable>();
-    ArrayList<ServerLocation> servers = new ArrayList<ServerLocation>(serverToFilterMap.keySet());
+    final List<SingleHopOperationCallable> tasks = new ArrayList<>();
+    ArrayList<ServerLocation> servers = new ArrayList<>(serverToFilterMap.keySet());
-          hasResult, new HashSet<String>(), allBucket);
+          hasResult, new HashSet<>(), allBucket);
-  static List<SingleHopOperationCallable> constructAndGetExecuteFunctionTasks(String region,
+  private static List<SingleHopOperationCallable> constructAndGetExecuteFunctionTasks(String region,
-    final List<SingleHopOperationCallable> tasks = new ArrayList<SingleHopOperationCallable>();
-    ArrayList<ServerLocation> servers = new ArrayList<ServerLocation>(serverToFilterMap.keySet());
+    final List<SingleHopOperationCallable> tasks = new ArrayList<>();
+    ArrayList<ServerLocation> servers = new ArrayList<>(serverToFilterMap.keySet());
-          hasResult, new HashSet<String>(), allBucket, isHA, optimizeForWrite);
+          hasResult, new HashSet<>(), allBucket, isHA, optimizeForWrite);
-    private Set<String> failedNodes = new HashSet<String>();
+    private Set<String> failedNodes;
-    public ExecuteRegionFunctionSingleHopOpImpl(String region, Function function,
+    ExecuteRegionFunctionSingleHopOpImpl(String region, Function function,
-      this.isHA = function.isHA();
-      this.optimizeForWrite = function.optimizeForWrite();
+      isHA = function.isHA();
+      optimizeForWrite = function.optimizeForWrite();
-      this.resultCollector = rc;
-      this.regionName = region;
-      this.functionId = function.getId();
-      this.executor = serverRegionExecutor;
+      resultCollector = rc;
+      regionName = region;
+      functionId = function.getId();
+      executor = serverRegionExecutor;
-      this.failedNodes = removedNodes;
+      failedNodes = removedNodes;
-    public ExecuteRegionFunctionSingleHopOpImpl(String region, String functionId,
+    ExecuteRegionFunctionSingleHopOpImpl(String region, String functionId,
-          hasResult == (byte) 1 ? true : false, optimizeForWrite);
+          hasResult == (byte) 1, optimizeForWrite);
-      this.resultCollector = rc;
-      this.regionName = region;
+      resultCollector = rc;
+      regionName = region;
-      this.executor = serverRegionExecutor;
+      executor = serverRegionExecutor;
-      this.failedNodes = removedNodes;
+      failedNodes = removedNodes;
-                  this.resultCollector.addResult(memberID, cause);
+                  resultCollector.addResult(memberID, cause);
-                      .getFunctionStats(this.functionId, this.executor.getRegion().getSystem())
+                      .getFunctionStats(functionId, executor.getRegion().getSystem())
-                  this.failedNodes.addAll(ifite.getFailedNodeSet());
+                  failedNodes.addAll(ifite.getFailedNodeSet());
-                  this.failedNodes.add(memberID.getId());
+                  failedNodes.add(memberID.getId());
-                this.resultCollector.addResult(memberID, result);
+                resultCollector.addResult(memberID, result);
-                    .getFunctionStats(this.functionId, this.executor.getRegion().getSystem())
+                    .getFunctionStats(functionId, executor.getRegion().getSystem())
-                this.failedNodes.addAll(ifite.getFailedNodeSet());
+                failedNodes.addAll(ifite.getFailedNodeSet());
-      return this.resultCollector;
+      return resultCollector;
-      return this.functionId;
+      return functionId;
-      return this.regionName;
+      return regionName;
-      return this.executor;
+      return executor;
-      return this.hasResult;
+      return hasResult;
-      return this.isHA;
+      return isHA;
-      return this.optimizeForWrite;
+      return optimizeForWrite;

INS83 INS83 MOV43 MOV43 INS59 MOV59 INS42 INS14 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD74 UPD74 UPD74 UPD74 INS74 UPD74 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 MOV27 INS42 UPD74 UPD74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL83 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL9 DEL9 DEL16 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22