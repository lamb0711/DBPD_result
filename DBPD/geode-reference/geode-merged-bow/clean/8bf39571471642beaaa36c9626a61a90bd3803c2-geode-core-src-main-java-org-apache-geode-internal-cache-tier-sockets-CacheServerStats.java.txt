Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  //int invalidateRequestsId;
-  //int readInvalidateRequestTimeId;
-  //int processInvalidateTimeId;
-  //int invalidateResponsesId;
-  //int writeInvalidateResponseTimeId;
+  // int invalidateRequestsId;
+  // int readInvalidateRequestTimeId;
+  // int processInvalidateTimeId;
+  // int invalidateResponsesId;
+  // int writeInvalidateResponseTimeId;
-  //int sizeRequestsId;
-  //int readSizeRequestTimeId;
-  //int processSizeTimeId;
-  //int sizeResponsesId;
-  //int writeSizeResponseTimeId;
-  
-  
+  // int sizeRequestsId;
+  // int readSizeRequestTimeId;
+  // int processSizeTimeId;
+  // int sizeResponsesId;
+  // int writeSizeResponseTimeId;
+
+
-  //int processCreateCqTimeId;
-  //int processExecuteCqWithIRCqTimeId;
-  //int processStopCqTimeId;
-  //int processCloseCqTimeId;
-  //int processCloseClientCqsTimeId;
-  //int processGetCqStatsTimeId;
+  // int processCreateCqTimeId;
+  // int processExecuteCqWithIRCqTimeId;
+  // int processStopCqTimeId;
+  // int processCloseCqTimeId;
+  // int processCloseClientCqsTimeId;
+  // int processGetCqStatsTimeId;
-  
-  
+
+
-  
-  //Load callback stats
+
+  // Load callback stats
-  
-  protected StatisticsType statType; 
-  
+
+  protected StatisticsType statType;
+
-    this(InternalDistributedSystem.getAnyInstance(), ownerName, typeName, null);  
+    this(InternalDistributedSystem.getAnyInstance(), ownerName, typeName, null);
-  
+
-   * Add a convinience method to pass in a StatisticsFactory for Statistics
-   * construction. Helpful for local Statistics operations
-   * @param f 
-   * @param ownerName 
+   * Add a convinience method to pass in a StatisticsFactory for Statistics construction. Helpful
+   * for local Statistics operations
+   * 
+   * @param f
+   * @param ownerName
-  public CacheServerStats(StatisticsFactory f, String ownerName, String typeName, StatisticDescriptor[] descriptiors) {
+  public CacheServerStats(StatisticsFactory f, String ownerName, String typeName,
+      StatisticDescriptor[] descriptiors) {
-        f.createIntCounter("getRequests",
-            "Number of cache client get requests.", "operations"),
-        f.createLongCounter("readGetRequestTime",
-            "Total time spent in reading get requests.", "nanoseconds"),
-        f.createLongCounter(
-                "processGetTime",
-                "Total time spent in processing a cache client get request, including the time to get an object from the cache.",
-                "nanoseconds"),
-        f.createIntCounter("getResponses",
-            "Number of get responses written to the cache client.",
+        f.createIntCounter("getRequests", "Number of cache client get requests.", "operations"),
+        f.createLongCounter("readGetRequestTime", "Total time spent in reading get requests.",
+            "nanoseconds"),
+        f.createLongCounter("processGetTime",
+            "Total time spent in processing a cache client get request, including the time to get an object from the cache.",
+            "nanoseconds"),
+        f.createIntCounter("getResponses", "Number of get responses written to the cache client.",
-        f.createLongCounter("writeGetResponseTime",
-                "Total time spent in writing get responses.",
-                "nanoseconds"),
-
-        f.createIntCounter("putRequests",
-            "Number of cache client put requests.", "operations"),
-        f.createLongCounter("readPutRequestTime",
-            "Total time spent in reading put requests.", "nanoseconds"),
-        f.createLongCounter(
-                "processPutTime",
-                "Total time spent in processing a cache client put request, including the time to put an object into the cache.",
-                "nanoseconds"),
-        f.createIntCounter("putResponses",
-            "Number of put responses written to the cache client.",
-            "operations"),
-        f.createLongCounter("writePutResponseTime",
-            "Total time spent in writing put responses.",
+        f.createLongCounter("writeGetResponseTime", "Total time spent in writing get responses.",
-        f.createIntCounter("putAllRequests",
-            "Number of cache client putAll requests.", "operations"),
-        f.createLongCounter("readPutAllRequestTime",
-            "Total time spent in reading putAll requests.", "nanoseconds"),
+        f.createIntCounter("putRequests", "Number of cache client put requests.", "operations"),
+        f.createLongCounter("readPutRequestTime", "Total time spent in reading put requests.",
+            "nanoseconds"),
+        f.createLongCounter("processPutTime",
+            "Total time spent in processing a cache client put request, including the time to put an object into the cache.",
+            "nanoseconds"),
+        f.createIntCounter("putResponses", "Number of put responses written to the cache client.",
+            "operations"),
+        f.createLongCounter("writePutResponseTime", "Total time spent in writing put responses.",
+            "nanoseconds"),
+
+        f.createIntCounter("putAllRequests", "Number of cache client putAll requests.",
+            "operations"),
+        f.createLongCounter("readPutAllRequestTime", "Total time spent in reading putAll requests.",
+            "nanoseconds"),
-            "Number of putAll responses written to the cache client.",
-            "operations"),
+            "Number of putAll responses written to the cache client.", "operations"),
-            "Total time spent in writing putAll responses.",
-            "nanoseconds"),
+            "Total time spent in writing putAll responses.", "nanoseconds"),
-        f.createIntCounter("removeAllRequests",
-            "Number of cache client removeAll requests.", "operations"),
+        f.createIntCounter("removeAllRequests", "Number of cache client removeAll requests.",
+            "operations"),
-            "Number of removeAll responses written to the cache client.",
-            "operations"),
+            "Number of removeAll responses written to the cache client.", "operations"),
-            "Total time spent in writing removeAll responses.",
-            "nanoseconds"),
+            "Total time spent in writing removeAll responses.", "nanoseconds"),
-        f.createIntCounter("getAllRequests",
-            "Number of cache client getAll requests.", "operations"),
-        f.createLongCounter("readGetAllRequestTime",
-            "Total time spent in reading getAll requests.", "nanoseconds"),
+        f.createIntCounter("getAllRequests", "Number of cache client getAll requests.",
+            "operations"),
+        f.createLongCounter("readGetAllRequestTime", "Total time spent in reading getAll requests.",
+            "nanoseconds"),
-            "Total time spent in processing a cache client getAll request.",
-            "nanoseconds"),
+            "Total time spent in processing a cache client getAll request.", "nanoseconds"),
-            "Number of getAll responses written to the cache client.",
-            "operations"),
+            "Number of getAll responses written to the cache client.", "operations"),
-            "Total time spent in writing getAll responses.",
-            "nanoseconds"),
+            "Total time spent in writing getAll responses.", "nanoseconds"),
-        f.createIntCounter("destroyRequests",
-            "Number of cache client destroy requests.", "operations"),
+        f.createIntCounter("destroyRequests", "Number of cache client destroy requests.",
+            "operations"),
-            "Total time spent in reading destroy requests.",
+            "Total time spent in reading destroy requests.", "nanoseconds"),
+        f.createLongCounter("processDestroyTime",
+            "Total time spent in processing a cache client destroy request, including the time to destroy an object from the cache.",
-        f.createLongCounter(
-                "processDestroyTime",
-                "Total time spent in processing a cache client destroy request, including the time to destroy an object from the cache.",
-                "nanoseconds"),
-            "Number of destroy responses written to the cache client.",
-            "operations"),
+            "Number of destroy responses written to the cache client.", "operations"),
-            "Total time spent in writing destroy responses.",
+            "Total time spent in writing destroy responses.", "nanoseconds"),
+
+        f.createIntCounter("invalidateRequests", "Number of cache client invalidate requests.",
+            "operations"),
+        f.createLongCounter("readInvalidateRequestTime",
+            "Total time spent in reading invalidate requests.", "nanoseconds"),
+        f.createLongCounter("processInvalidateTime",
+            "Total time spent in processing a cache client invalidate request, including the time to invalidate an object from the cache.",
+            "nanoseconds"),
+        f.createIntCounter("invalidateResponses",
+            "Number of invalidate responses written to the cache client.", "operations"),
+        f.createLongCounter("writeInvalidateResponseTime",
+            "Total time spent in writing invalidate responses.", "nanoseconds"),
+
+        f.createIntCounter("sizeRequests", "Number of cache client size requests.", "operations"),
+        f.createLongCounter("readSizeRequestTime", "Total time spent in reading size requests.",
+            "nanoseconds"),
+        f.createLongCounter("processSizeTime",
+            "Total time spent in processing a cache client size request, including the time to size an object from the cache.",
+            "nanoseconds"),
+        f.createIntCounter("sizeResponses", "Number of size responses written to the cache client.",
+            "operations"),
+        f.createLongCounter("writeSizeResponseTime", "Total time spent in writing size responses.",
-        f.createIntCounter("invalidateRequests",
-            "Number of cache client invalidate requests.", "operations"),
-        f.createLongCounter("readInvalidateRequestTime",
-            "Total time spent in reading invalidate requests.",
-            "nanoseconds"),
-        f.createLongCounter(
-                "processInvalidateTime",
-                "Total time spent in processing a cache client invalidate request, including the time to invalidate an object from the cache.",
-                "nanoseconds"),
-        f.createIntCounter("invalidateResponses",
-            "Number of invalidate responses written to the cache client.",
-            "operations"),
-        f.createLongCounter("writeInvalidateResponseTime",
-            "Total time spent in writing invalidate responses.",
-            "nanoseconds"),
-            
-        f.createIntCounter("sizeRequests",
-            "Number of cache client size requests.", "operations"),
-        f.createLongCounter("readSizeRequestTime",
-            "Total time spent in reading size requests.",
-            "nanoseconds"),
-        f.createLongCounter(
-                "processSizeTime",
-                "Total time spent in processing a cache client size request, including the time to size an object from the cache.",
-                "nanoseconds"),
-        f.createIntCounter("sizeResponses",
-            "Number of size responses written to the cache client.",
-            "operations"),
-        f.createLongCounter("writeSizeResponseTime",
-            "Total time spent in writing size responses.",
-            "nanoseconds"),         
-            
-                
-        f.createIntCounter("queryRequests",
-             "Number of cache client query requests.",
-             "operations"),
-        f.createLongCounter("readQueryRequestTime",
-            "Total time spent in reading query requests.",
+
+        f.createIntCounter("queryRequests", "Number of cache client query requests.", "operations"),
+        f.createLongCounter("readQueryRequestTime", "Total time spent in reading query requests.",
-                "Total time spent in processing a cache client query request, including the time to destroy an object from the cache.",
-                "nanoseconds"),
-        f.createIntCounter("queryResponses",
-            "Number of query responses written to the cache client.",
-            "operations"),
-        f.createLongCounter("writeQueryResponseTime",
-            "Total time spent in writing query responses.",
+            "Total time spent in processing a cache client query request, including the time to destroy an object from the cache.",
+        f.createIntCounter("queryResponses",
+            "Number of query responses written to the cache client.", "operations"),
+        f.createLongCounter("writeQueryResponseTime",
+            "Total time spent in writing query responses.", "nanoseconds"),
-            "Number of cache client destroyRegion requests.",
-            "operations"),
+            "Number of cache client destroyRegion requests.", "operations"),
-            "Total time spent in reading destroyRegion requests.",
-            "nanoseconds"),
+            "Total time spent in reading destroyRegion requests.", "nanoseconds"),
-                "Total time spent in processing a cache client destroyRegion request, including the time to destroy the region from the cache.",
-                "nanoseconds"),
-        f.createIntCounter("destroyRegionResponses",
-                "Number of destroyRegion responses written to the cache client.",
-                "operations"),
-        f.createLongCounter("writeDestroyRegionResponseTime",
-            "Total time spent in writing destroyRegion responses.",
+            "Total time spent in processing a cache client destroyRegion request, including the time to destroy the region from the cache.",
+        f.createIntCounter("destroyRegionResponses",
+            "Number of destroyRegion responses written to the cache client.", "operations"),
+        f.createLongCounter("writeDestroyRegionResponseTime",
+            "Total time spent in writing destroyRegion responses.", "nanoseconds"),
-        f.createIntCounter("containsKeyRequests",
-                           "Number of cache client containsKey requests.",
-                           "operations"),
+        f.createIntCounter("containsKeyRequests", "Number of cache client containsKey requests.",
+            "operations"),
-                            "Total time spent reading containsKey requests.",
-                            "nanoseconds"),
+            "Total time spent reading containsKey requests.", "nanoseconds"),
-                            "Total time spent processing a containsKey request.",
-                            "nanoseconds"),
+            "Total time spent processing a containsKey request.", "nanoseconds"),
-                           "Number of containsKey responses written to the cache client.",
-                           "operations"),
+            "Number of containsKey responses written to the cache client.", "operations"),
-                            "Total time spent writing containsKey responses.",
-                            "nanoseconds"),
+            "Total time spent writing containsKey responses.", "nanoseconds"),
-        f.createIntCounter("processBatchRequests",
-                           "Number of cache client processBatch requests.",
-                           "operations"),
+        f.createIntCounter("processBatchRequests", "Number of cache client processBatch requests.",
+            "operations"),
-                            "Total time spent in reading processBatch requests.",
-                            "nanoseconds"),
+            "Total time spent in reading processBatch requests.", "nanoseconds"),
-                            "Total time spent in processing a cache client processBatch request.",
-                            "nanoseconds"),
+            "Total time spent in processing a cache client processBatch request.", "nanoseconds"),
-                           "Number of processBatch responses written to the cache client.",
-                           "operations"),
+            "Number of processBatch responses written to the cache client.", "operations"),
-                            "Total time spent in writing processBatch responses.",
-                            "nanoseconds"),
-        f.createLongCounter("batchSize",
-                            "The size of the batches received.",
-                            "bytes"),
-        f.createIntCounter("clearRegionRequests",
-            "Number of cache client clearRegion requests.",
+            "Total time spent in writing processBatch responses.", "nanoseconds"),
+        f.createLongCounter("batchSize", "The size of the batches received.", "bytes"),
+        f.createIntCounter("clearRegionRequests", "Number of cache client clearRegion requests.",
-            "Total time spent in reading clearRegion requests.",
+            "Total time spent in reading clearRegion requests.", "nanoseconds"),
+        f.createLongCounter("processClearRegionTime",
+            "Total time spent in processing a cache client clearRegion request, including the time to clear the region from the cache.",
-        f.createLongCounter(
-           "processClearRegionTime",
-           "Total time spent in processing a cache client clearRegion request, including the time to clear the region from the cache.",
-           "nanoseconds"),
-        f.createIntCounter(
-           "clearRegionResponses",
-           "Number of clearRegion responses written to the cache client.",
-           "operations"),
+        f.createIntCounter("clearRegionResponses",
+            "Number of clearRegion responses written to the cache client.", "operations"),
-            "Total time spent in writing clearRegion responses.",
-            "nanoseconds"),    
+            "Total time spent in writing clearRegion responses.", "nanoseconds"),
-            "Number of cache client notification requests.",
-            "operations"),
-        f.createLongCounter(
-                "readClientNotificationRequestTime",
-                "Total time spent in reading client notification requests.",
-                "nanoseconds"),
-        f.createLongCounter(
-                "processClientNotificationTime",
-                "Total time spent in processing a cache client notification request.",
-                "nanoseconds"),
+            "Number of cache client notification requests.", "operations"),
+        f.createLongCounter("readClientNotificationRequestTime",
+            "Total time spent in reading client notification requests.", "nanoseconds"),
+        f.createLongCounter("processClientNotificationTime",
+            "Total time spent in processing a cache client notification request.", "nanoseconds"),
-            "Number of cache client notification update requests.",
-            "operations"),
-        f.createLongCounter(
-                "readUpdateClientNotificationRequestTime",
-                "Total time spent in reading client notification update requests.",
-                "nanoseconds"),
-        f.createLongCounter(
-                "processUpdateClientNotificationTime",
-                "Total time spent in processing a client notification update request.",
-                "nanoseconds"),
+            "Number of cache client notification update requests.", "operations"),
+        f.createLongCounter("readUpdateClientNotificationRequestTime",
+            "Total time spent in reading client notification update requests.", "nanoseconds"),
+        f.createLongCounter("processUpdateClientNotificationTime",
+            "Total time spent in processing a client notification update request.", "nanoseconds"),
-        f.createIntCounter("clientReadyRequests",
-                           "Number of cache client ready requests.",
-                           "operations"),
+        f.createIntCounter("clientReadyRequests", "Number of cache client ready requests.",
+            "operations"),
-                            "Total time spent in reading cache client ready requests.",
-                            "nanoseconds"),
+            "Total time spent in reading cache client ready requests.", "nanoseconds"),
-                            "Total time spent in processing a cache client ready request, including the time to destroy an object from the cache.",
-                            "nanoseconds"),
+            "Total time spent in processing a cache client ready request, including the time to destroy an object from the cache.",
+            "nanoseconds"),
-                           "Number of client ready responses written to the cache client.",
-                           "operations"),
+            "Number of client ready responses written to the cache client.", "operations"),
-                            "Total time spent in writing client ready responses.",
-                            "nanoseconds"),
+            "Total time spent in writing client ready responses.", "nanoseconds"),
-                           "Number of cache client close connection requests.",
-                           "operations"),
+            "Number of cache client close connection requests.", "operations"),
-                            "Total time spent in reading close connection requests.",
-                            "nanoseconds"),
+            "Total time spent in reading close connection requests.", "nanoseconds"),
-                            "Total time spent in processing a cache client close connection request.",
-                            "nanoseconds"),
-        f.createIntCounter("failedConnectionAttempts",
-                           "Number of failed connection attempts.",
-                           "attempts"),
+            "Total time spent in processing a cache client close connection request.",
+            "nanoseconds"),
+        f.createIntCounter("failedConnectionAttempts", "Number of failed connection attempts.",
+            "attempts"),
-                         "Number of sockets accepted and used for client to server messaging.",
-                         "sockets"),
+            "Number of sockets accepted and used for client to server messaging.", "sockets"),
-                         "Number of sockets accepted and used for server to client messaging.",
-                         "sockets"),
-        f.createIntGauge("currentClients",
-                         "Number of client virtual machines connected.",
-                         "clients"),
-        f.createIntCounter("outOfOrderGatewayBatchIds",
-                         "Number of Out of order batch IDs.",
-                         "batches"),
+            "Number of sockets accepted and used for server to client messaging.", "sockets"),
+        f.createIntGauge("currentClients", "Number of client virtual machines connected.",
+            "clients"),
+        f.createIntCounter("outOfOrderGatewayBatchIds", "Number of Out of order batch IDs.",
+            "batches"),
-                         "Number of write opertations abandond by clients",
-                         "requests"),
+            "Number of write opertations abandond by clients", "requests"),
-                         "Number of read opertations abandond by clients",
-                         "requests"),
-        f.createLongCounter("receivedBytes",
-                            "Total number of bytes received from clients.",
-                            "bytes"),
-        f.createLongCounter("sentBytes",
-                            "Total number of bytes sent to clients.",
-                            "bytes"),
-        f.createIntGauge("messagesBeingReceived", "Current number of message being received off the network or being processed after reception.", "messages"),
-        f.createLongGauge("messageBytesBeingReceived", "Current number of bytes consumed by messages being received or processed.", "bytes"),
+            "Number of read opertations abandond by clients", "requests"),
+        f.createLongCounter("receivedBytes", "Total number of bytes received from clients.",
+            "bytes"),
+        f.createLongCounter("sentBytes", "Total number of bytes sent to clients.", "bytes"),
+        f.createIntGauge("messagesBeingReceived",
+            "Current number of message being received off the network or being processed after reception.",
+            "messages"),
+        f.createLongGauge("messageBytesBeingReceived",
+            "Current number of bytes consumed by messages being received or processed.", "bytes"),
-                           "Total number of connections that have been timed out by the server because of client inactivity",
-                           "connections"),
+            "Total number of connections that have been timed out by the server because of client inactivity",
+            "connections"),
-                         "Current number of connections waiting for a thread to start processing their message.",
-                         "connections"),
+            "Current number of connections waiting for a thread to start processing their message.",
+            "connections"),
-                         "Current number of server accepts that are attempting to do the initial handshake with the client.",
-                         "accepts"),
+            "Current number of server accepts that are attempting to do the initial handshake with the client.",
+            "accepts"),
-                         "Total number of threads created to deal with an accepted socket. Note that this is not the current number of threads.",
-                         "starts"),
+            "Total number of threads created to deal with an accepted socket. Note that this is not the current number of threads.",
+            "starts"),
-                         "Total number of threads created to deal with a client connection. Note that this is not the current number of threads.",
-                         "starts"),
+            "Total number of threads created to deal with a client connection. Note that this is not the current number of threads.",
+            "starts"),
-                         "Current number of threads dealing with a client connection.",
-                         "threads"),
-        f.createDoubleGauge(
-                         "connectionLoad",
-                         "The load from client to server connections as reported by the load probe installed in this server",
-                         "load"),
-        f.createDoubleGauge(
-                         "loadPerConnection",
-                         "The estimate of how much load is added for each new connection as reported by the load probe installed in this server",
-                         "load"),
-        f.createDoubleGauge(
-                         "queueLoad",
-                         "The load from queues as reported by the load probe installed in this server",
-                         "load"),
-        f.createDoubleGauge(
-                         "loadPerQueue",
-                         "The estimate of how much load is added for each new connection as reported by the load probe installed in this server",
-                         "load")
-    };
+            "Current number of threads dealing with a client connection.", "threads"),
+        f.createDoubleGauge("connectionLoad",
+            "The load from client to server connections as reported by the load probe installed in this server",
+            "load"),
+        f.createDoubleGauge("loadPerConnection",
+            "The estimate of how much load is added for each new connection as reported by the load probe installed in this server",
+            "load"),
+        f.createDoubleGauge("queueLoad",
+            "The load from queues as reported by the load probe installed in this server", "load"),
+        f.createDoubleGauge("loadPerQueue",
+            "The estimate of how much load is added for each new connection as reported by the load probe installed in this server",
+            "load")};
-       alldescriptors = new StatisticDescriptor[descriptiors.length + serverStatDescriptors.length];
-       System.arraycopy(descriptiors, 0, alldescriptors, 0, descriptiors.length);
-       System.arraycopy(serverStatDescriptors, 0, alldescriptors, descriptiors.length, serverStatDescriptors.length);
+      alldescriptors = new StatisticDescriptor[descriptiors.length + serverStatDescriptors.length];
+      System.arraycopy(descriptiors, 0, alldescriptors, 0, descriptiors.length);
+      System.arraycopy(serverStatDescriptors, 0, alldescriptors, descriptiors.length,
+          serverStatDescriptors.length);
-    statType = f
-        .createType(
-            typeName,
-            typeName,
-            alldescriptors);
+    statType = f.createType(typeName, typeName, alldescriptors);
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-    writeDestroyResponseTimeId = this.stats
-        .nameToId("writeDestroyResponseTime");
+    writeDestroyResponseTimeId = this.stats.nameToId("writeDestroyResponseTime");
-    readDestroyRegionRequestTimeId = this.stats
-        .nameToId("readDestroyRegionRequestTime");
-    processDestroyRegionTimeId = this.stats
-        .nameToId("processDestroyRegionTime");
+    readDestroyRegionRequestTimeId = this.stats.nameToId("readDestroyRegionRequestTime");
+    processDestroyRegionTimeId = this.stats.nameToId("processDestroyRegionTime");
-    writeDestroyRegionResponseTimeId = this.stats
-        .nameToId("writeDestroyRegionResponseTime");
-    
+    writeDestroyRegionResponseTimeId = this.stats.nameToId("writeDestroyRegionResponseTime");
+
-    readClearRegionRequestTimeId = this.stats
-        .nameToId("readClearRegionRequestTime");
-    processClearRegionTimeId = this.stats
-        .nameToId("processClearRegionTime");
+    readClearRegionRequestTimeId = this.stats.nameToId("readClearRegionRequestTime");
+    processClearRegionTimeId = this.stats.nameToId("processClearRegionTime");
-    writeClearRegionResponseTimeId = this.stats
-        .nameToId("writeClearRegionResponseTime");
+    writeClearRegionResponseTimeId = this.stats.nameToId("writeClearRegionResponseTime");
-    readProcessBatchRequestTimeId = this.stats
-        .nameToId("readProcessBatchRequestTime");
+    readProcessBatchRequestTimeId = this.stats.nameToId("readProcessBatchRequestTime");
-    writeProcessBatchResponseTimeId = this.stats
-        .nameToId("writeProcessBatchResponseTime");
+    writeProcessBatchResponseTimeId = this.stats.nameToId("writeProcessBatchResponseTime");
-    clientNotificationRequestsId = this.stats
-        .nameToId("clientNotificationRequests");
-    readClientNotificationRequestTimeId = this.stats
-        .nameToId("readClientNotificationRequestTime");
-    processClientNotificationTimeId = this.stats
-        .nameToId("processClientNotificationTime");
+    clientNotificationRequestsId = this.stats.nameToId("clientNotificationRequests");
+    readClientNotificationRequestTimeId = this.stats.nameToId("readClientNotificationRequestTime");
+    processClientNotificationTimeId = this.stats.nameToId("processClientNotificationTime");
-    updateClientNotificationRequestsId = this.stats
-        .nameToId("updateClientNotificationRequests");
-    readUpdateClientNotificationRequestTimeId = this.stats
-        .nameToId("readUpdateClientNotificationRequestTime");
-    processUpdateClientNotificationTimeId = this.stats
-        .nameToId("processUpdateClientNotificationTime");
+    updateClientNotificationRequestsId = this.stats.nameToId("updateClientNotificationRequests");
+    readUpdateClientNotificationRequestTimeId =
+        this.stats.nameToId("readUpdateClientNotificationRequestTime");
+    processUpdateClientNotificationTimeId =
+        this.stats.nameToId("processUpdateClientNotificationTime");
-    readCloseConnectionRequestTimeId = this.stats
-        .nameToId("readCloseConnectionRequestTime");
-    processCloseConnectionTimeId = this.stats
-        .nameToId("processCloseConnectionTime");
+    readCloseConnectionRequestTimeId = this.stats.nameToId("readCloseConnectionRequestTime");
+    processCloseConnectionTimeId = this.stats.nameToId("processCloseConnectionTime");
-    currentClientConnectionsId = this.stats
-        .nameToId("currentClientConnections");
-    currentQueueConnectionsId = this.stats
-        .nameToId("currentQueueConnections");
+    currentClientConnectionsId = this.stats.nameToId("currentClientConnections");
+    currentQueueConnectionsId = this.stats.nameToId("currentQueueConnections");
-    failedConnectionAttemptsId = this.stats
-        .nameToId("failedConnectionAttempts");
+    failedConnectionAttemptsId = this.stats.nameToId("failedConnectionAttempts");
-    
+
+
+
+
+
+
-  public void incCurrentClientConnections()
-  {
+  public void incCurrentClientConnections() {
-  public void decCurrentClientConnections()
-  {
+  public void decCurrentClientConnections() {
-  public int getCurrentClientConnections()
-  {
+  public int getCurrentClientConnections() {
-  public void incCurrentQueueConnections()
-  {
+  public void incCurrentQueueConnections() {
-  public void decCurrentQueueConnections()
-  {
+  public void decCurrentQueueConnections() {
-  public int getCurrentQueueConnections()
-  {
+  public int getCurrentQueueConnections() {
-  public void incCurrentClients()
-  {
+  public void incCurrentClients() {
-  public void decCurrentClients()
-  {
+  public void decCurrentClients() {
+
-  public void incReadGetRequestTime(long delta)
-  {
+  public void incReadGetRequestTime(long delta) {
-  public void incProcessGetTime(long delta)
-  {
+  public void incProcessGetTime(long delta) {
-  public void incWriteGetResponseTime(long delta)
-  {
+  public void incWriteGetResponseTime(long delta) {
-  public void incReadPutRequestTime(long delta)
-  {
+  public void incReadPutRequestTime(long delta) {
-  public void incProcessPutTime(long delta)
-  {
+  public void incProcessPutTime(long delta) {
-  public void incWritePutResponseTime(long delta)
-  {
+  public void incWritePutResponseTime(long delta) {
-  public void incReadDestroyRequestTime(long delta)
-  {
+  public void incReadDestroyRequestTime(long delta) {
-  public void incProcessDestroyTime(long delta)
-  {
+  public void incProcessDestroyTime(long delta) {
-  public void incWriteDestroyResponseTime(long delta)
-  {
+  public void incWriteDestroyResponseTime(long delta) {
-  
-  
-  public void incReadInvalidateRequestTime(long delta)
-  {
-//    this.stats.incLong(readInvalidateRequestTimeId, delta);
-//    this.stats.incInt(invalidateRequestsId, 1);
+
+
+  public void incReadInvalidateRequestTime(long delta) {
+    // this.stats.incLong(readInvalidateRequestTimeId, delta);
+    // this.stats.incInt(invalidateRequestsId, 1);
-  public void incProcessInvalidateTime(long delta)
-  {
-//    this.stats.incLong(processInvalidateTimeId, delta);
+  public void incProcessInvalidateTime(long delta) {
+    // this.stats.incLong(processInvalidateTimeId, delta);
-  public void incWriteInvalidateResponseTime(long delta)
-  {
-//    this.stats.incLong(writeInvalidateResponseTimeId, delta);
-//    this.stats.incInt(invalidateResponsesId, 1);
+  public void incWriteInvalidateResponseTime(long delta) {
+    // this.stats.incLong(writeInvalidateResponseTimeId, delta);
+    // this.stats.incInt(invalidateResponsesId, 1);
-  
-  public void incReadSizeRequestTime(long delta)
-  {
-//    this.stats.incLong(readSizeRequestTimeId, delta);
-//    this.stats.incInt(sizeRequestsId, 1);
+
+  public void incReadSizeRequestTime(long delta) {
+    // this.stats.incLong(readSizeRequestTimeId, delta);
+    // this.stats.incInt(sizeRequestsId, 1);
-  public void incProcessSizeTime(long delta)
-  {
-//    this.stats.incLong(processSizeTimeId, delta);
+  public void incProcessSizeTime(long delta) {
+    // this.stats.incLong(processSizeTimeId, delta);
-  public void incWriteSizeResponseTime(long delta)
-  {
-//    this.stats.incLong(writeSizeResponseTimeId, delta);
-//    this.stats.incInt(sizeResponsesId, 1);
+  public void incWriteSizeResponseTime(long delta) {
+    // this.stats.incLong(writeSizeResponseTimeId, delta);
+    // this.stats.incInt(sizeResponsesId, 1);
-  
+
-	    //this.stats.incLong(processCreateCqTimeId, delta);
-	  }
+    // this.stats.incLong(processCreateCqTimeId, delta);
+  }
+
-	    //this.stats.incLong(processCloseCqTimeId, delta);
-	  }
+    // this.stats.incLong(processCloseCqTimeId, delta);
+  }
+
-	    //this.stats.incLong(processExecuteCqWithIRCqTimeId, delta);
-	  }
-public void incProcessStopCqTime(long delta) {
-	    //this.stats.incLong(processStopCqTimeId, delta);
-	  }
+    // this.stats.incLong(processExecuteCqWithIRCqTimeId, delta);
+  }
+
+  public void incProcessStopCqTime(long delta) {
+    // this.stats.incLong(processStopCqTimeId, delta);
+  }
+
-	    //this.stats.incLong(processCloseClientCqsTimeId, delta);
-	  }
-  
+    // this.stats.incLong(processCloseClientCqsTimeId, delta);
+  }
+
-	    //this.stats.incLong(processGetCqStatsTimeId, delta);
-	  }
+    // this.stats.incLong(processGetCqStatsTimeId, delta);
+  }
-  public void incReadClearRegionRequestTime(long delta)
-  {
+  public void incReadClearRegionRequestTime(long delta) {
-  public void incProcessClearRegionTime(long delta)
-  {
+  public void incProcessClearRegionTime(long delta) {
-  public void incWriteClearRegionResponseTime(long delta)
-  {
+  public void incWriteClearRegionResponseTime(long delta) {
-  public void incWriteProcessBatchResponseTime(long delta)
-  {
+  public void incWriteProcessBatchResponseTime(long delta) {
-  public void incProcessBatchTime(long delta)
-  {
+  public void incProcessBatchTime(long delta) {
-  public void incBatchSize(long size)
-  {
+  public void incBatchSize(long size) {
-  public void incReadClientNotificationRequestTime(long delta)
-  {
+  public void incReadClientNotificationRequestTime(long delta) {
-  public void incProcessClientNotificationTime(long delta)
-  {
+  public void incProcessClientNotificationTime(long delta) {
-  public void incReadUpdateClientNotificationRequestTime(long delta)
-  {
+  public void incReadUpdateClientNotificationRequestTime(long delta) {
-  public void incProcessUpdateClientNotificationTime(long delta)
-  {
+  public void incProcessUpdateClientNotificationTime(long delta) {
-  public void incReadCloseConnectionRequestTime(long delta)
-  {
+  public void incReadCloseConnectionRequestTime(long delta) {
-  public void incProcessCloseConnectionTime(long delta)
-  {
+  public void incProcessCloseConnectionTime(long delta) {
-  public void incOutOfOrderBatchIds()
-  {
+  public void incOutOfOrderBatchIds() {
+
+
+
-  public void incWriteClientReadyResponseTime(long delta)
-  {
+  public void incWriteClientReadyResponseTime(long delta) {
-  
+
+
+
+
-  
- public int getProcessBatchRequests(){
-   return this.stats.getInt(processBatchRequestsId);
- }
-  
+
+  public int getProcessBatchRequests() {
+    return this.stats.getInt(processBatchRequestsId);
+  }
+
-        public void startJob() {
-          incConnectionThreads();
-        }
-        public void endJob() {
-          decConnectionThreads();
-        }
-      };
+      public void startJob() {
+        incConnectionThreads();
+      }
+
+      public void endJob() {
+        decConnectionThreads();
+      }
+    };
-  
-  public Statistics getStats(){
+
+  public Statistics getStats() {

UPD66 UPD66 DEL66 DEL66