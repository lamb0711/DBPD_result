Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
-  private PutAll() {
-  }
-  
+
+  private PutAll() {}
+
-  throws IOException, InterruptedException {
+      throws IOException, InterruptedException {
-    
+
-    
+
-      
+
-        String putAllMsg = LocalizedStrings.PutAll_THE_INPUT_REGION_NAME_FOR_THE_PUTALL_REQUEST_IS_NULL.toLocalizedString();
+        String putAllMsg =
+            LocalizedStrings.PutAll_THE_INPUT_REGION_NAME_FOR_THE_PUTALL_REQUEST_IS_NULL
+                .toLocalizedString();
-        writeErrorResponse(msg, MessageType.PUT_DATA_ERROR,
-            errMessage.toString(), servConn);
+        writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-      LocalRegion region = (LocalRegion)crHelper.getRegion(regionName);
+      LocalRegion region = (LocalRegion) crHelper.getRegion(regionName);
-      ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart
-          .getSerializedForm());
-      long threadId = EventID
-      .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-      long sequenceId = EventID
-      .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-      EventID eventId = new EventID(servConn.getEventMemberIDByteArray(),
-          threadId, sequenceId);
-      
+      ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart.getSerializedForm());
+      long threadId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+      long sequenceId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+      EventID eventId = new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId);
+
-      
+
-//    Map isObjectMap = new LinkedHashMap();
-      for (int i=0; i<numberOfKeys; i++) {
-        keyPart = msg.getPart(3+i*2);
+      // Map isObjectMap = new LinkedHashMap();
+      for (int i = 0; i < numberOfKeys; i++) {
+        keyPart = msg.getPart(3 + i * 2);
-          String putAllMsg = LocalizedStrings.PutAll_ONE_OF_THE_INPUT_KEYS_FOR_THE_PUTALL_REQUEST_IS_NULL.toLocalizedString();
+          String putAllMsg =
+              LocalizedStrings.PutAll_ONE_OF_THE_INPUT_KEYS_FOR_THE_PUTALL_REQUEST_IS_NULL
+                  .toLocalizedString();
-          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR,
-              errMessage.toString(), servConn);
+          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-        
-        valuePart = msg.getPart(3+i*2+1);
+
+        valuePart = msg.getPart(3 + i * 2 + 1);
-          String putAllMsg = LocalizedStrings.PutAll_ONE_OF_THE_INPUT_VALUES_FOR_THE_PUTALL_REQUEST_IS_NULL.toLocalizedString();
+          String putAllMsg =
+              LocalizedStrings.PutAll_ONE_OF_THE_INPUT_VALUES_FOR_THE_PUTALL_REQUEST_IS_NULL
+                  .toLocalizedString();
-          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage
-              .toString(), servConn);
+          writeErrorResponse(msg, MessageType.PUT_DATA_ERROR, errMessage.toString(), servConn);
-        
-//      byte[] value = valuePart.getSerializedForm();
+
+        // byte[] value = valuePart.getSerializedForm();
-//      put serializedform for auth. It will be modified with auth callback
+        // put serializedform for auth. It will be modified with auth callback
-//      isObjectMap.put(key, new Boolean(isObject));
+        // isObjectMap.put(key, new Boolean(isObject));
-      
-      if ( msg.getNumberOfParts() == ( 3 + 2*numberOfKeys + 1) ) {//it means optional timeout has been added
-        int timeout = msg.getPart(3 + 2*numberOfKeys).getInt();
+
+      if (msg.getNumberOfParts() == (3 + 2 * numberOfKeys + 1)) {// it means optional timeout has
+                                                                 // been added
+        int timeout = msg.getPart(3 + 2 * numberOfKeys).getInt();
-        }
-        else {
-          PutAllOperationContext putAllContext = authzRequest.putAllAuthorize(
-              regionName, map, null);
+        } else {
+          PutAllOperationContext putAllContext =
+              authzRequest.putAllAuthorize(regionName, map, null);
-      
+
-        logger.debug("{}: Received putAll request ({} bytes) from {} for region {}", servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
+        logger.debug("{}: Received putAll request ({} bytes) from {} for region {}",
+            servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName);
-      
-      region.basicBridgePutAll(map, Collections.<Object, VersionTag>emptyMap(), servConn.getProxyID(), eventId, false, null);
-      
+
+      region.basicBridgePutAll(map, Collections.<Object, VersionTag>emptyMap(),
+          servConn.getProxyID(), eventId, false, null);
+
-        PartitionedRegion pr = (PartitionedRegion)region;
+        PartitionedRegion pr = (PartitionedRegion) region;
-          writeReplyWithRefreshMetadata(msg, servConn,pr,pr.getNetworkHopType());
+          writeReplyWithRefreshMetadata(msg, servConn, pr, pr.getNetworkHopType());
-    } 
-    catch (RegionDestroyedException rde) {
+    } catch (RegionDestroyedException rde) {
-    }
-    catch (ResourceException re) {
+    } catch (ResourceException re) {
-    }
-    catch (PutAllPartialResultException pre) {
+    } catch (PutAllPartialResultException pre) {
-    }
-    catch (Exception ce) {
+    } catch (Exception ce) {
-      
+
-      logger.warn(LocalizedMessage.create(LocalizedStrings.Generic_0_UNEXPECTED_EXCEPTION, servConn.getName()), ce);
+      logger.warn(LocalizedMessage.create(LocalizedStrings.Generic_0_UNEXPECTED_EXCEPTION,
+          servConn.getName()), ce);
-    }
-    finally {
+    } finally {
-    
+
-      logger.debug("{}: Sent putAll response back to {} for region {}", servConn.getName(), servConn.getSocketString(), regionName);
+      logger.debug("{}: Sent putAll response back to {} for region {}", servConn.getName(),
+          servConn.getSocketString(), regionName);

