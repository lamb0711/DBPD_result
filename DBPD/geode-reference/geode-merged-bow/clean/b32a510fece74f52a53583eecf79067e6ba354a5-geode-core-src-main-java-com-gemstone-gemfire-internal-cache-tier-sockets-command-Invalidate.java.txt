Destory and Invalidate

- * 
+ *
-import com.gemstone.gemfire.internal.cache.EntryEventImpl;
+import com.gemstone.gemfire.internal.security.GeodeSecurityUtil;
+  Invalidate() {
+  }
+
-  Invalidate() {
-  }
-
-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
-      throws IOException, InterruptedException {
+  public void cmdExecute(Message msg, ServerConnection servConn, long start) throws IOException, InterruptedException {
-//    callbackArgPart = null; (redundant assignment)
+    //    callbackArgPart = null; (redundant assignment)
-      }
-      catch (Exception e) {
+      } catch (Exception e) {
-    }
-    catch (Exception e) {
+    } catch (Exception e) {
-      logger.debug(servConn.getName() + ": Received invalidate request ("
-          + msg.getPayloadLength() + " bytes) from "
-          + servConn.getSocketString() + " for region " + regionName + " key "
-          + key);
+      logger.debug(servConn.getName() + ": Received invalidate request (" + msg.getPayloadLength() + " bytes) from " + servConn
+        .getSocketString() + " for region " + regionName + " key " + key);
-        errMessage
-            .append(LocalizedStrings.BaseCommand__THE_INPUT_REGION_NAME_FOR_THE_0_REQUEST_IS_NULL.toLocalizedString("invalidate"));
+        errMessage.append(LocalizedStrings.BaseCommand__THE_INPUT_REGION_NAME_FOR_THE_0_REQUEST_IS_NULL.toLocalizedString("invalidate"));
-      writeErrorResponse(msg, MessageType.DESTROY_DATA_ERROR, errMessage
-          .toString(), servConn);
+      writeErrorResponse(msg, MessageType.DESTROY_DATA_ERROR, errMessage.toString(), servConn);
-    }
-    else {
-      LocalRegion region = (LocalRegion)crHelper.getRegion(regionName);
+    } else {
+      LocalRegion region = (LocalRegion) crHelper.getRegion(regionName);
-        String reason = LocalizedStrings.BaseCommand__0_WAS_NOT_FOUND_DURING_1_REQUEST.toLocalizedString(regionName,"invalidate");
+        String reason = LocalizedStrings.BaseCommand__0_WAS_NOT_FOUND_DURING_1_REQUEST.toLocalizedString(regionName, "invalidate");
-      }
-      else {
+      } else {
-        ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart
-            .getSerializedForm());
-        long threadId = EventID
-            .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-        long sequenceId = EventID
-            .readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
-        EventID eventId = new EventID(servConn.getEventMemberIDByteArray(),
-            threadId, sequenceId);
-        
+        ByteBuffer eventIdPartsBuffer = ByteBuffer.wrap(eventPart.getSerializedForm());
+        long threadId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+        long sequenceId = EventID.readEventIdPartsFromOptmizedByteArray(eventIdPartsBuffer);
+        EventID eventId = new EventID(servConn.getEventMemberIDByteArray(), threadId, sequenceId);
+
+
+        // for integrated security
+        GeodeSecurityUtil.authorizeRegionWrite(regionName, key.toString());
+
-           */ 
+           */
-            InvalidateOperationContext invalidateContext = authzRequest
-                .invalidateAuthorize(regionName, key, callbackArg);
+            InvalidateOperationContext invalidateContext = authzRequest.invalidateAuthorize(regionName, key, callbackArg);
-//            if (logger.isDebugEnabled()) {
-//              logger.debug("DEBUG: encountered isRetry in Invalidate");
-//            }
+            //            if (logger.isDebugEnabled()) {
+            //              logger.debug("DEBUG: encountered isRetry in Invalidate");
+            //            }
-          
-          region.basicBridgeInvalidate(key, callbackArg, servConn.getProxyID(),
-              true, clientEvent);
+
+          region.basicBridgeInvalidate(key, callbackArg, servConn.getProxyID(), true, clientEvent);
-        }
-        catch (EntryNotFoundException e) {
+        } catch (EntryNotFoundException e) {
-          logger.info(LocalizedMessage.create(LocalizedStrings.BaseCommand_DURING_0_NO_ENTRY_WAS_FOUND_FOR_KEY_1, new Object[] {"invalidate", key}));
-        }
-        catch (RegionDestroyedException rde) {
+          logger.info(LocalizedMessage.create(LocalizedStrings.BaseCommand_DURING_0_NO_ENTRY_WAS_FOUND_FOR_KEY_1, new Object[] {
+            "invalidate",
+            key
+          }));
+        } catch (RegionDestroyedException rde) {
-        }
-        catch (Exception e) {
+        } catch (Exception e) {
-            if (logger.isDebugEnabled())
+            if (logger.isDebugEnabled()) {
-          }
-          else {
-            logger.warn(LocalizedMessage.create(LocalizedStrings.BaseCommand_0_UNEXPECTED_EXCEPTION, servConn.getName()), e); 
+            }
+          } else {
+            logger.warn(LocalizedMessage.create(LocalizedStrings.BaseCommand_0_UNEXPECTED_EXCEPTION, servConn.getName()), e);
-          PartitionedRegion pr = (PartitionedRegion)region;
-          if (pr.isNetworkHop() != (byte)0) {
+          PartitionedRegion pr = (PartitionedRegion) region;
+          if (pr.isNetworkHop() != (byte) 0) {
-            pr.setIsNetworkHop((byte)0);
-            pr.setMetadataVersion(Byte.valueOf((byte)0));
-          }
-          else {
+            pr.setIsNetworkHop((byte) 0);
+            pr.setMetadataVersion(Byte.valueOf((byte) 0));
+          } else {
-        }
-        else {
+        } else {
-        stats.incWriteInvalidateResponseTime(DistributionStats.getStatTime()
-            - start);
+        stats.incWriteInvalidateResponseTime(DistributionStats.getStatTime() - start);
-  protected void writeReply(Message origMsg, ServerConnection servConn,
-      VersionTag tag)
-  throws IOException {
+  protected void writeReply(Message origMsg, ServerConnection servConn, VersionTag tag) throws IOException {
-      ServerConnection servConn, PartitionedRegion pr,
-      byte nwHop, VersionTag tag) throws IOException {
+                                               ServerConnection servConn,
+                                               PartitionedRegion pr,
+                                               byte nwHop,
+                                               VersionTag tag) throws IOException {

MOV26 MOV31 UPD40 INS21 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS8 MOV21