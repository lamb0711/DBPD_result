Merge pull request #3385 from balesh2/GEODE-6580

GEODE-6580: use ConcurrentHashMap for host names
-import java.security.SecureRandom;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Random;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ThreadLocalRandom;
-import org.apache.geode.admin.internal.InetAddressUtil;
+import org.apache.geode.management.internal.SSLUtil;
-  public static final String USE_LINK_LOCAL_ADDRESSES_PROPERTY =
+  private static final String USE_LINK_LOCAL_ADDRESSES_PROPERTY =
-  private static final Map<InetAddress, String> hostNames = new HashMap<>();
+  private static final ConcurrentHashMap<InetAddress, String> hostNames = new ConcurrentHashMap<>();
-        Set myInterfaces = getMyAddresses();
+        Set<InetAddress> myInterfaces = getMyAddresses();
-        String lhName = null;
-        for (Iterator<InetAddress> it = myInterfaces.iterator(); lhName == null && it.hasNext();) {
-          InetAddress addr = it.next();
+        for (InetAddress addr : myInterfaces) {
-              lhName = addrName;
+              break;
-              lhName = addrName;
+              break;
-        if (inetAddress == null) {
-          inetAddress = InetAddress.getLocalHost();
-        }
-    } catch (UnknownHostException e) {
+    } catch (UnknownHostException ignored) {
-  public static synchronized String getHostName(InetAddress addr) {
+  public static String getHostName(InetAddress addr) {
-  public static synchronized String getCanonicalHostName(InetAddress addr, String hostName) {
+  public static String getCanonicalHostName(InetAddress addr, String hostName) {
-  public static synchronized void resetHostNameCache() {
+  public static void resetHostNameCache() {
-    SSLContext newSSLContext = getSSLContextInstance();
+    SSLContext newSSLContext = SSLUtil.getSSLContextInstance(sslConfig);
-    for (Object entry : props.entrySet()) {
-      Map.Entry<String, String> ent = (Map.Entry<String, String>) entry;
+    for (Map.Entry<Object, Object> ent : props.entrySet()) {
+      String key = (String) ent.getKey();
-      if (ent.getKey().startsWith(DistributionConfig.SSL_SYSTEM_PROPS_NAME)
-          || ent.getKey().startsWith(DistributionConfig.SYS_PROP_NAME)) {
-        String key = ent.getKey();
+      if (key.startsWith(DistributionConfig.SSL_SYSTEM_PROPS_NAME)
+          || key.startsWith(DistributionConfig.SYS_PROP_NAME)) {
-        if (ent.getValue() == null || ent.getValue().trim().equals("")) {
+        final String value = (String) ent.getValue();
+        if (value == null || value.trim().equals("")) {
-  private SSLContext getSSLContextInstance() {
-    String[] protocols = sslConfig.getProtocolsAsStringArray();
-    SSLContext sslContext = null;
-    if (protocols != null && protocols.length > 0) {
-      for (String protocol : protocols) {
-        if (!protocol.equals("any")) {
-          try {
-            sslContext = SSLContext.getInstance(protocol);
-            break;
-          } catch (NoSuchAlgorithmException e) {
-            // continue
-          }
-        }
-      }
-    }
-    if (sslContext != null) {
-      return sslContext;
-    }
-    // lookup known algorithms
-    String[] knownAlgorithms = {"SSL", "SSLv2", "SSLv3", "TLS", "TLSv1", "TLSv1.1", "TLSv1.2"};
-    for (String algo : knownAlgorithms) {
-      try {
-        sslContext = SSLContext.getInstance(algo);
-        break;
-      } catch (NoSuchAlgorithmException e) {
-        // continue
-      }
-    }
-    return sslContext;
-  }
-
-    TrustManager[] trustManagers = null;
+    TrustManager[] trustManagers;
-    KeyManager[] keyManagers = null;
+    KeyManager[] keyManagers;
-        BindException throwMe =
-            new BindException(String.format("Failed to create server socket on %s[%s]",
-                bindAddr, Integer.valueOf(nport)));
+        BindException throwMe = new BindException(
+            String.format("Failed to create server socket on %s[%s]", bindAddr, nport));
-    ServerSocket socket = null;
-    int localPort = 0;
-    int startingPort = 0;
-    Random rand = new SecureRandom();
+    int startingPort = tcpPortRange[0]
+        + ThreadLocalRandom.current().nextInt(tcpPortRange[1] - tcpPortRange[0] + 1);
+    int localPort = startingPort;
-    int randPort = tcpPortRange[0] + rand.nextInt(tcpPortRange[1] - tcpPortRange[0] + 1);
-
-    startingPort = randPort;
-    localPort = startingPort;
+        ServerSocket socket;
-          ServerSocketChannel channl = ServerSocketChannel.open();
-          socket = channl.socket();
+          ServerSocketChannel channel = ServerSocketChannel.open();
+          socket = channel.socket();
-          InetSocketAddress addr = new InetSocketAddress(isBindAddress ? ba : null, localPort);
-          socket.bind(addr, backlog);
+          InetSocketAddress address = new InetSocketAddress(isBindAddress ? ba : null, localPort);
+          socket.bind(address, backlog);
-        break;
+        return socket;
-    return socket;
-  public static boolean treatAsBindException(SocketException se) {
+  private static boolean treatAsBindException(SocketException se) {
-          logger.fatal(
-              String.format("SSL Error in authenticating peer %s[%s].",
-                  new Object[] {socket.getInetAddress(), Integer.valueOf(socket.getPort())}),
-              ex);
+          logger.fatal(String.format("SSL Error in authenticating peer %s[%s].",
+              socket.getInetAddress(), socket.getPort()), ex);
-        }
-        // ignore
-        catch (SocketException e) {
+        } catch (SocketException ignored) {
-  private void finishServerSocket(SSLServerSocket serverSocket) throws IOException {
+  private void finishServerSocket(SSLServerSocket serverSocket) {
-        logger
-            .fatal(String.format("Problem forming SSL connection to %s[%s].",
-                socket.getInetAddress(), Integer.valueOf(socket.getPort())),
-                ex);
+        logger.fatal(String.format("Problem forming SSL connection to %s[%s].",
+            socket.getInetAddress(), socket.getPort()), ex);
-    Set<InetAddress> result = new HashSet<InetAddress>();
-    Set<InetAddress> locals = new HashSet<InetAddress>();
+    Set<InetAddress> result = new HashSet<>();
+    Set<InetAddress> locals = new HashSet<>();
-  public static String reverseDNS(InetAddress addr) {
+  private static String reverseDNS(InetAddress addr) {
-    String lookup = "";
+    StringBuilder lookup = new StringBuilder();
-      lookup = lookup + (addrBytes[index] & 0xff) + '.';
+      lookup.append(addrBytes[index] & 0xff).append('.');
-    lookup += "in-addr.arpa";
-    // System.out.println("Looking up: " + lookup);
+    lookup.append("in-addr.arpa");
-      Hashtable env = new Hashtable();
+      Hashtable<String, String> env = new Hashtable<>();
-      Attributes attrs = ctx.getAttributes(lookup, new String[] {"PTR"});
+      Attributes attrs = ctx.getAttributes(lookup.toString(), new String[] {"PTR"});
-      if (InetAddressUtil.LOCALHOST.equals(host)) {
+      InetAddress inetAddress = (InetAddress) host;
+      if (isLocalHost(inetAddress)) {
-      } else if (((InetAddress) host).isLoopbackAddress()) {
+      } else if (inetAddress.isLoopbackAddress()) {
-              if (host.equals(addr)) {
+              if (inetAddress.equals(addr)) {
-          throw new IllegalArgumentException(
-              "Unable to query network interface",
-              e);
+          throw new IllegalArgumentException("Unable to query network interface", e);
-      return isLocalHost(toInetAddress(host.toString()));
+      return isLocalHost((Object) toInetAddress(host.toString()));
+    }
+  }
+
+  private static boolean isLocalHost(InetAddress host) {
+    try {
+      return SocketCreator.getLocalHost().equals(host);
+    } catch (UnknownHostException ignored) {
+      return false;
-      if (host.indexOf("/") > -1) {
-        return InetAddress.getByName(host.substring(host.indexOf("/") + 1));
+      final int index = host.indexOf("/");
+      if (index > -1) {
+        return InetAddress.getByName(host.substring(index + 1));

MOV26 MOV26 MOV26 MOV31 UPD40 UPD40 UPD40 UPD83 UPD74 MOV60 UPD83 MOV60 UPD83 INS83 INS39 INS42 INS44 INS8 UPD43 MOV43 INS42 MOV54 UPD42 UPD74 UPD43 INS32 UPD43 INS74 UPD42 MOV60 UPD42 INS42 UPD42 UPD42 UPD42 INS14 INS42 INS42 INS45 INS60 INS41 INS60 UPD42 UPD42 INS42 INS42 MOV43 MOV43 INS43 MOV43 UPD74 UPD74 INS43 INS32 UPD74 MOV74 MOV43 INS59 INS32 UPD43 UPD42 INS41 INS83 INS39 INS59 INS70 INS42 INS11 INS60 INS32 INS60 MOV41 INS42 INS32 INS42 INS13 MOV43 INS42 MOV11 UPD42 UPD42 INS11 INS32 UPD42 MOV42 INS42 UPD42 INS9 INS42 MOV32 INS42 INS74 INS44 INS42 MOV8 MOV43 MOV32 UPD42 MOV42 UPD42 MOV42 INS83 MOV43 INS59 UPD42 MOV42 INS42 MOV43 INS59 MOV53 INS42 INS42 MOV27 INS74 INS32 INS42 MOV43 MOV32 UPD42 MOV42 UPD42 MOV42 INS43 INS43 INS43 INS42 INS42 INS11 MOV43 INS42 MOV43 MOV42 INS42 MOV42 INS42 MOV42 MOV43 MOV32 INS42 MOV53 UPD42 MOV25 UPD42 MOV42 MOV43 UPD42 UPD42 UPD42 MOV32 INS42 MOV32 INS25 MOV42 UPD42 INS10 MOV27 MOV8 MOV32 MOV32 INS10 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL25 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL27 DEL24 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL83 DEL83 DEL83 DEL42 DEL43 DEL74 DEL42 DEL42 DEL11 DEL59 DEL60 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL33 DEL33 DEL42 DEL42 DEL32 DEL42 DEL33 DEL59 DEL60 DEL34 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL10 DEL85 DEL5 DEL32 DEL4 DEL3 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL45 DEL42 DEL42 DEL36 DEL13 DEL27 DEL7 DEL42 DEL45 DEL7 DEL40 DEL40 DEL36 DEL42 DEL32 DEL7 DEL21 DEL10 DEL42 DEL43 DEL42 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL32 DEL38 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL45 DEL4 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL10 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL70 DEL42 DEL41 DEL8 DEL42 DEL42 DEL45 DEL32