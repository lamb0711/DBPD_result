Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import com.gemstone.gemfire.cache.partition.PartitionRegionInfo;
-import com.gemstone.gemfire.internal.cache.control.InternalResourceManager;
+import com.gemstone.gemfire.internal.cache.control.MemoryThresholds;
+  
+  private volatile float criticalOffHeapPercentage;
+  private boolean criticalOffHeapSet = false;
+
+  private volatile float evictionOffHeapPercentage;
+  private boolean evictionOffHeapSet = false;
-    this.criticalHeapPercentage = ResourceManager.DEFAULT_CRITICAL_HEAP_PERCENTAGE;
-  }
-
-  public void setEvictionHeapPercentageToDefault() {
-    this.evictionHeapPercentage = ResourceManager.DEFAULT_EVICTION_HEAP_PERCENTAGE;
+    this.criticalHeapPercentage = MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE;
+  
+  /* (non-Javadoc)
+   * @see com.gemstone.gemfire.cache.control.ResourceManager#getCriticalOffHeapPercentage()
+   */
+  @Override
+  public float getCriticalOffHeapPercentage() {
+    return this.criticalOffHeapPercentage;
+  }
+
+  /* (non-Javadoc)
+   * @see com.gemstone.gemfire.cache.control.ResourceManager#setCriticalOffHeapPercentage(int)
+   */
+  @Override
+  public void setCriticalOffHeapPercentage(final float offHeapPercentage) {
+    this.criticalOffHeapSet = true;
+    this.criticalOffHeapPercentage = offHeapPercentage;
+  }
+  
+  public void setCriticalOffHeapPercentageToDefault() {
+    this.criticalOffHeapPercentage = MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE;
+  }
+
+  /**
+   * Determine if the critical off-heap was configured
+   * @return true if it was configured
+   */
+  public boolean hasCriticalOffHeap() {
+    return this.criticalOffHeapSet;
+  }
+    if (hasCriticalOffHeap()) {
+      r.setCriticalOffHeapPercentage(this.criticalOffHeapPercentage);
+    }
+    if (hasEvictionOffHeap()) {
+      r.setEvictionOffHeapPercentage(this.evictionOffHeapPercentage);
+    }
+    if (getCriticalOffHeapPercentage() != other.getCriticalOffHeapPercentage()) {
+      throw new RuntimeException("Resource Manager critical off-heap percentages differ: "
+          + getCriticalOffHeapPercentage() + " != " + other.getCriticalOffHeapPercentage());
+    }
+    if (hasEvictionOffHeap()) {
+      // If we don't have it set don't compare since other may have been set to
+      // a smart default.
+      if (getEvictionOffHeapPercentage() != other.getEvictionOffHeapPercentage()) {
+        throw new RuntimeException("Resource Manager eviction off-heap percentages differ: "
+                                   + getEvictionOffHeapPercentage() + " != " + other.getEvictionOffHeapPercentage());
+      }
+    }
-
+  
+  public void setEvictionHeapPercentageToDefault() {
+    this.evictionHeapPercentage = MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE;
+  }
+  
+  
+  /* (non-Javadoc)
+   * @see com.gemstone.gemfire.cache.control.ResourceManager#getEvictionOffHeapPercentage()
+   */
+  public float getEvictionOffHeapPercentage() {
+    return this.evictionOffHeapPercentage;
+  }
+
+  /* (non-Javadoc)
+   * @see com.gemstone.gemfire.cache.control.ResourceManager#setEvictionOffHeapPercentage(int)
+   */
+  public void setEvictionOffHeapPercentage(final float offHeapPercentage) {
+    this.evictionOffHeapSet = true;
+    this.evictionOffHeapPercentage = offHeapPercentage;
+  }
+  
+  public void setEvictionOffHeapPercentageToDefault() {
+    this.evictionOffHeapPercentage = MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE;
+  }
+  
+  /**
+   * Determine if the eviction off-heap was configured
+   * @return true if the eviction off-heap was configured
+   */
+  public boolean hasEvictionOffHeap() {
+    return this.evictionOffHeapSet;
+  }

MOV31 UPD40 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS8 INS42 INS42 INS9 INS42 INS42 INS9 INS42 INS41 INS42 INS83 INS39 INS42 INS21 INS21 INS21 INS65 INS65 INS41 INS25 INS25 INS25 INS25 INS41 INS83 INS39 INS42 INS21 INS21 INS21 INS65 INS65 INS41 INS22 INS7 INS7 INS7 INS66 INS66 INS22 INS32 INS8 INS32 INS8 INS27 INS8 INS32 INS8 INS22 INS7 INS7 INS7 INS66 INS66 INS22 UPD40 INS52 INS42 INS22 INS9 INS22 INS42 INS22 INS40 INS52 INS42 INS42 INS21 INS42 INS21 INS32 INS32 INS53 INS42 INS25 UPD40 INS52 INS42 INS22 INS9 INS22 INS42 INS22 INS40 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS32 INS32 INS42 INS42 INS42 INS14 INS27 INS8 INS52 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS22 INS42 INS42 INS22 INS43 INS27 INS32 INS32 INS53 INS52 INS42 INS52 INS42 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS43 INS27 INS42 INS45 INS32 INS45 INS32 INS42 INS42 INS42 DEL40 DEL26