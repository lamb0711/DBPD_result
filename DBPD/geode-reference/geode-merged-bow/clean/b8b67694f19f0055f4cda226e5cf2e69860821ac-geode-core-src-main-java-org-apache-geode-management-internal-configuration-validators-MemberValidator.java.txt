Merge branch 'develop' into feature/GEODE-7049

+import java.util.Objects;
-import org.apache.geode.cache.configuration.CacheElement;
+import org.apache.geode.management.configuration.AbstractConfiguration;
-  public void validateCreate(CacheElement config, ConfigurationManager manager) {
+  public void validateCreate(AbstractConfiguration config, ConfigurationManager manager) {
-    Map<String, CacheElement> existingElementsAndTheirGroups =
+    Map<String, AbstractConfiguration> existingElementsAndTheirGroups =
+    String configGroup = AbstractConfiguration.getGroupName(config.getGroup());
+    if (existingElementsAndTheirGroups.keySet().contains(configGroup)) {
+      throw new EntityExistsException(
+          config.getClass().getSimpleName() + " '" + config.getId()
+              + "' already exists in group " + configGroup);
+    }
-    Set<DistributedMember> membersOfNewGroup = findServers(config.getConfigGroup());
+    Set<DistributedMember> membersOfNewGroup = findServers(config.getGroup());
-    for (Map.Entry<String, CacheElement> existing : existingElementsAndTheirGroups.entrySet()) {
+    for (Map.Entry<String, AbstractConfiguration> existing : existingElementsAndTheirGroups
+        .entrySet()) {
-  public Map<String, CacheElement> findCacheElement(String id, ConfigurationManager manager) {
-    Map<String, CacheElement> results = new HashMap<>();
+  public Map<String, AbstractConfiguration> findCacheElement(String id,
+      ConfigurationManager manager) {
+    Map<String, AbstractConfiguration> results = new HashMap<>();
-      CacheElement existing = manager.get(id, cacheConfig);
+      AbstractConfiguration existing = manager.get(id, cacheConfig);
-    if (groups == null || groups.length == 0) {
-      groups = new String[] {CacheElement.CLUSTER};
+    if (groups == null) {
+      groups = new String[] {AbstractConfiguration.CLUSTER};
+    }
+
+    groups = Arrays.stream(groups).filter(Objects::nonNull).filter(s -> s.length() > 0)
+        .toArray(String[]::new);
+
+    if (groups.length == 0) {
+      groups = new String[] {AbstractConfiguration.CLUSTER};
-    // if groups contains "cluster" group, return all members
-    if (Arrays.asList(groups).contains(CacheElement.CLUSTER)) {
+    if (Arrays.stream(groups).anyMatch(AbstractConfiguration::isCluster)) {

MOV26 INS26 INS40 UPD40 UPD74 MOV74 UPD43 INS60 INS25 UPD43 INS21 INS25 UPD42 UPD74 INS43 INS59 INS32 INS8 UPD42 UPD74 MOV74 MOV27 INS7 MOV27 INS8 UPD43 INS42 INS42 INS32 INS32 INS42 INS42 INS53 UPD74 UPD43 INS42 INS32 INS21 UPD42 INS90 UPD42 INS42 INS42 INS32 INS42 INS42 INS14 UPD43 UPD42 UPD43 INS32 INS42 INS89 INS7 UPD42 INS42 INS42 INS42 INS42 INS43 INS27 UPD42 UPD42 UPD42 INS32 INS42 INS86 INS5 INS42 INS3 INS42 INS32 INS45 INS32 INS45 INS42 INS32 INS42 INS90 INS59 INS27 INS43 INS85 INS5 INS4 INS32 INS42 INS42 INS42 UPD40 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS43 INS85 INS40 INS42 INS42 INS42 INS42 INS42 DEL27 DEL40