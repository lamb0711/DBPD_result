Geode 7013 command line help broken (#3858)

Co-authored-by: Joris Melchior <joris.melchior@gmail.com>
Co-authored-by: Owen Nichols <onichols@pivotal.io>
+import java.util.stream.Collectors;
+import org.apache.geode.management.cli.ConverterHint;
+import org.apache.geode.management.internal.cli.i18n.CliStrings;
+
-  public static List<String> splitWithWhiteSpace(String input) {
+  private static List<String> splitWithWhiteSpace(String input) {
-    StringBuffer rawInput = new StringBuffer();
+    StringBuilder rawInput = new StringBuilder();
-    cursor = userInput.length();
+      // workaround for SimpleParser bugs with "" option key, and spaces in option values
+      int curs =
+          completeSpecial(candidates, userInput, inputTokens, CliStrings.HELP, ConverterHint.HELP);
+      if (curs > 0) {
+        return curs;
+      }
+      curs =
+          completeSpecial(candidates, userInput, inputTokens, CliStrings.HINT, ConverterHint.HINT);
+      if (curs > 0) {
+        return curs;
+      }
+
+   * gets a specific String converter from the list of registered converters
+   */
+  private Converter<?> converterFor(String converterHint) {
+    for (Converter<?> candidate : getConverters()) {
+      if (candidate.supports(String.class, converterHint)) {
+        return candidate;
+      }
+    }
+    return null;
+  }
+
+  /**
+   * uses a specific converter directly, bypassing the need to find it by the command's options
+   */
+  private int completeSpecial(List<Completion> candidates, String userInput,
+      List<String> inputTokens, String cmd,
+      String converterHint) {
+    if (inputTokens.get(0).equals(cmd)) {
+      String prefix = userInput.equals(cmd) ? " " : "";
+      String existing = String.join(" ", inputTokens.subList(1, inputTokens.size())).toLowerCase();
+      List<Completion> all = new ArrayList<>();
+      Converter<?> converter = converterFor(converterHint);
+      if (converter != null) {
+        converter.getAllPossibleValues(all, null, null, null, null);
+        candidates.addAll(all.stream().filter(c -> c.getValue().toLowerCase().startsWith(existing))
+            .map(c -> new Completion(prefix + c.getValue()))
+            .collect(Collectors.toList()));
+        return Math.min(userInput.length(), cmd.length() + 1);
+      }
+    }
+    return 0;
+  }
+
+  /**

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 UPD83 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS65 INS43 INS76 INS43 INS42 INS70 INS41 INS65 INS74 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS25 INS41 UPD43 INS66 INS42 INS42 INS44 INS32 INS8 INS33 INS66 INS43 INS43 INS42 INS43 INS43 INS42 INS42 INS32 INS8 INS34 UPD42 INS60 INS25 INS21 INS25 INS74 INS42 INS42 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS60 INS25 UPD43 INS39 INS59 INS27 INS8 INS7 INS27 INS8 INS43 INS76 INS32 INS8 INS42 INS42 INS34 INS43 INS59 INS43 INS59 INS74 INS59 INS74 INS59 INS27 INS8 UPD42 INS42 INS32 INS42 INS34 INS41 INS42 INS32 INS42 INS34 INS41 INS42 INS42 INS42 INS57 INS42 INS41 INS42 INS42 INS16 INS42 INS42 INS32 INS43 INS43 INS42 INS14 INS43 INS76 INS42 INS32 INS42 INS33 INS21 INS21 INS41 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 INS40 INS40 INS42 INS43 INS42 INS32 INS45 INS45 INS32 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS32 INS43 INS42 INS42 INS42 INS33 INS33 INS33 INS33 INS42 INS42 INS32 INS42 INS42 MOV32 INS27 INS42 INS42 INS34 INS32 INS42 INS32 INS42 INS32 INS32 INS34 INS42 INS42 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS32 INS42 INS86 INS59 INS14 INS42 INS42 INS59 INS32 INS42 INS43 INS27 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 DEL42 DEL7 DEL21