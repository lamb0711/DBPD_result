GEODE-16 [DISTTX] Bringing pending changes for distributed transactions (still work in progress) from one of the internal gemfire branch (develop_dist_tx) to ASF i.e.

2053a3ae by vbhaskar
[DISTTX] Fixed a PutAll issue related to DistTxStateOnCoordinator when txState is set null in tx-manager during (pre)commit.
    There is a related issue in removeall that also need to be fixed. Added test for same.

ccdf76d5 by sjigyasu
Added a test for concurrent tx and non tx ops.

61a536a0 by sjigyasu
Added WAN test for distributed tx (disabled)

9e6c1b8e by sjigyasu
Changes for adjunct messaging for serial WAN.  For details read comments in DistTXState commit.

3d5c4f84 by vbhaskar
[DISTTX] Fixed an remoteall issue and enabled respective testcase.

226bf623 by shirishd
[DISTTX] Test changes only
Removed @Category and @Ignore Junit4 unsupported tags from disttx dunit tests

9fdfbe2c by shirishd
[DISTTX] Test change only
Remove few more @Category tags from dist tx dunit tests

ea00015c by shirishd
[DISTTX] Added entries for tests

f74a12b3 by shirishd
[DISTTX] Enabling few more existing tests with "distributed-transactions" set to true

b52ee0c5 by vivek bhaskar
[DISTTX] On Tx Coordinator, verify if there any change of region distribution.

a480794c by shirishd
[DISTTX] Some tests for conflict detection at commit time

be3dd356 by vivek bhaskar
[DISTTX] Clean txState even if final commit fails.

95ba17f9 by shirishd
[DISTTX] Added tests for conflict detection at commit time

cd50dbbc by shirishd
[DISTTX] Optimization in DistTxEntryEvent toData/fromData

Tests:
DUnits and Junits for Distributed Transactions

-
+    
+        if (GemFireCacheImpl.internalBeforeApplyChanges != null) {
+          GemFireCacheImpl.internalBeforeApplyChanges.run();
+        }
+        
+        
+        // [DISTTX]TODO:
+        // Build a message specifically for those nodes who
+        // hold gateway senders and listeners but not a copy of the buckets
+        // on which changes in this tx are done.
+        // This is applicable only for partitioned regions and 
+        // serial gateway senders.
+        // This works only if the coordinator and sender are not the same node.
+        // For same sender as coordinator, this results in a hang, which needs to be addressed.
+        // If an another method of notifying adjunct receivers is implemented, 
+        // the following two lines should be commented out.
+        msg = buildMessageForAdjunctReceivers();
+        msg.send(this.locks.getDistributedLockId());
+
+        // Fire callbacks collected in the local txApply* executions
+        firePendingCallbacks();
+        
+  
+  /**
+   * this builds a new DistTXAdjunctCommitMessage and returns it
+   * @return the new message
+   */
+  protected TXCommitMessage buildMessageForAdjunctReceivers() {
+    TXCommitMessage msg = new DistTXAdjunctCommitMessage(this.proxy.getTxId(), this.proxy.getTxMgr().getDM(), this);
+    Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
+    while (it.hasNext()) {
+      Map.Entry<LocalRegion, TXRegionState> me = it.next();
+      LocalRegion r = me.getKey();
+      TXRegionState txrs = me.getValue();
+      
+      // only on the primary
+      if (r.isUsedForPartitionedRegionBucket() && !txrs.isCreatedDuringCommit()) {
+        txrs.buildMessageForAdjunctReceivers(r, msg);  
+      }
+    }
+    return msg;
+  }
+
-            if (theRegion.basicPut(ev, false, false, null, false)) {
+            /*
+             * Whenever commit is called, especially when its a
+             * DistTxStateOnCoordinator the txState is set to null in @see
+             * TXManagerImpl.commit() and thus when @see LocalRegion.basicPut
+             * will be called as in this function, they will not found a TxState
+             * with call for getDataView()
+             */
+            if (!(theRegion.getDataView() instanceof TXStateInterface)) {
+              if (putEntry(ev, false, false, null, false, 0L, false)) {
+                successfulPuts.addKeyAndVersion(putallOp.putAllData[i].key,
+                    null);
+              }
+            } else if (theRegion.basicPut(ev, false, false, null, false)) {
+          /*
+           * Whenever commit is called, especially when its a
+           * DistTxStateOnCoordinator the txState is set to null in @see
+           * TXManagerImpl.commit() and thus when basicDestroy will be called
+           * will be called as in i.e. @see LocalRegion.basicDestroy, they will
+           * not found a TxState with call for getDataView()
+           * 
+           * [DISTTX] TODO verify if this is correct to call
+           * destroyExistingEntry directly?
+           */
-            theRegion.basicDestroy(ev, true/* should we invoke cacheWriter? */,
-                null);
+            if (!(theRegion.getDataView() instanceof TXStateInterface)) {
+              destroyExistingEntry(ev, true/* should we invoke cacheWriter? */,
+                  null);
+            } else {
+              theRegion.basicDestroy(ev,
+                  true/* should we invoke cacheWriter? */, null);
+            }

INS31 INS29 INS83 INS43 INS42 INS8 INS65 INS65 INS42 INS60 INS60 INS61 INS41 INS66 INS66 INS43 INS59 INS74 INS59 INS32 INS8 INS42 INS42 INS42 INS14 INS43 INS74 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS25 INS43 INS32 INS32 INS52 INS42 INS43 INS43 INS43 INS32 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS25 INS21 INS21 INS21 INS42 INS22 INS42 INS32 INS42 INS40 INS42 INS42 INS22 INS42 INS43 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS38 INS21 INS27 INS8 INS7 INS32 INS32 INS52 INS42 INS22 INS42 INS52 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS40 INS33 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS22 INS42 INS40 INS42 INS52 INS42 INS8 INS25 INS25 INS38 INS8 MOV25 INS38 INS8 MOV8 INS36 INS25 INS36 INS21 INS62 INS32 INS8 INS62 INS32 INS32 INS43 INS42 INS42 INS9 INS9 INS33 INS9 INS34 INS9 INS21 INS32 INS43 INS42 INS42 INS9 INS33 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS22 INS33 INS2 INS42 INS40 INS42