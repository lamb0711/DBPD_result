GEODE-4769: optional early serialization of EntryEvent key and new value

If enabled, Regions and Transactions will serialize key and value before
updating the local cache. This prevents inconsistency between distributed
members caused by any failure to serialize the key or value.

This feature is disabled by default. To enable it, specify the system
property geode.earlyEntryEventSerialization=true.

+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-    {
-      Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-      while (it.hasNext()) {
-        Map.Entry<LocalRegion, TXRegionState> me = it.next();
-        LocalRegion r = me.getKey();
-        TXRegionState txrs = me.getValue();
-        txrs.applyChangesStart(r, this);
+    // applyChangesStart for each region
+    for (Map.Entry<LocalRegion, TXRegionState> me : this.regions.entrySet()) {
+      LocalRegion r = me.getKey();
+      TXRegionState txrs = me.getValue();
+      txrs.applyChangesStart(r, this);
+    }
+
+    // serializePendingValue for each entry
+    for (Object entry : entries) {
+      TXEntryStateWithRegionAndKey o = (TXEntryStateWithRegionAndKey) entry;
+      o.es.serializePendingValue();
+    }
+
+    // applyChanges for each entry
+    for (Object entry : entries) {
+      TXEntryStateWithRegionAndKey o = (TXEntryStateWithRegionAndKey) entry;
+      if (this.internalDuringApplyChanges != null) {
+        this.internalDuringApplyChanges.run();
+      }
+      try {
+        o.es.applyChanges(o.r, o.key, this);
+      } catch (RegionDestroyedException ex) {
+        // region was destroyed out from under us; after conflict checking
+        // passed. So act as if the region destroy happened right after the
+        // commit. We act this way by doing nothing; including distribution
+        // of this region's commit data.
+      } catch (CancelException ex) {
+        // cache was closed out from under us; after conflict checking
+        // passed. So do nothing.
-    {
-      Iterator/* <TXEntryStateWithRegionAndKey> */ it = entries.iterator();
-      while (it.hasNext()) {
-        TXEntryStateWithRegionAndKey o = (TXEntryStateWithRegionAndKey) it.next();
-        if (this.internalDuringApplyChanges != null) {
-          this.internalDuringApplyChanges.run();
-        }
-        try {
-          o.es.applyChanges(o.r, o.key, this);
-        } catch (RegionDestroyedException ex) {
-          // region was destroyed out from under us; after conflict checking
-          // passed. So act as if the region destroy happened right after the
-          // commit. We act this way by doing nothing; including distribution
-          // of this region's commit data.
-        } catch (CancelException ex) {
-          // cache was closed out from under us; after conflict checking
-          // passed. So do nothing.
-        }
-      }
-    }
-    {
-      Iterator<Map.Entry<LocalRegion, TXRegionState>> it = this.regions.entrySet().iterator();
-      while (it.hasNext()) {
-        Map.Entry<LocalRegion, TXRegionState> me = it.next();
-        LocalRegion r = me.getKey();
-        TXRegionState txrs = me.getValue();
-        txrs.applyChangesEnd(r, this);
-      }
+
+    // applyChangesEnd for each region
+    for (Map.Entry<LocalRegion, TXRegionState> me : this.regions.entrySet()) {
+      LocalRegion r = me.getKey();
+      TXRegionState txrs = me.getValue();
+      txrs.applyChangesEnd(r, this);
+  @Override
+  @Override
+    @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-      /**
+      /*
+  @Override
+  @Override
-   * @param event
-   * @param expectedOldValue
-   * @throws EntryNotFoundException
+  @Override
+  @Override
-   * @param keyInfo
-   * @param localRegion
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
-   *
-   * @param event
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+  @Override
+      @Override
+      @Override
+  @Override
+  @Override
+  @Override

