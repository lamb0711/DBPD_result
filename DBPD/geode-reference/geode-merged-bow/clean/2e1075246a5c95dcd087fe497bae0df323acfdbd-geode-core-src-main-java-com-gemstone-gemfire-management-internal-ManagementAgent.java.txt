Merge branch 'release/1.0.0-incubating.M3'

+import java.util.Set;
+import javax.management.InstanceAlreadyExistsException;
+import javax.management.MBeanRegistrationException;
+import javax.management.MalformedObjectNameException;
+import javax.management.NotCompliantMBeanException;
+import javax.management.ObjectName;
+import com.gemstone.gemfire.GemFireConfigException;
+import com.gemstone.gemfire.internal.security.shiro.JMXShiroAuthenticator;
-import com.gemstone.gemfire.management.internal.security.ManagementInterceptor;
+import com.gemstone.gemfire.management.internal.security.AccessControlMBean;
+import com.gemstone.gemfire.management.internal.security.MBeanServerWrapper;
+import com.gemstone.gemfire.management.internal.security.ResourceConstants;
- * @since 7.0
+ * @since GemFire 7.0
+  private JMXShiroAuthenticator shiroAuthenticator;
-  private ManagementInterceptor securityInterceptor;
+      else if (isIntegratedSecurity()){
+        System.setProperty("spring.profiles.active", "pulse.authentication.gemfire");
+      }
-  private boolean isRunningInTomcat() {
-    return (System.getProperty("catalina.base") != null || System.getProperty("catalina.home") != null);
-  }
-
-    boolean integratedSecEnabled = System.getProperty("resource-authenticator") != null;
-    if (integratedSecEnabled) {
-      securityInterceptor = new ManagementInterceptor(logger);
-      env.put(JMXConnectorServer.AUTHENTICATOR, securityInterceptor);
-    } else {
-      /* Disable the old authenticator mechanism */
-      String pwFile = this.config.getJmxManagerPasswordFile();
-      if (pwFile != null && pwFile.length() > 0) {
-        env.put("jmx.remote.x.password.file", pwFile);
-      }
-
-      String accessFile = this.config.getJmxManagerAccessFile();
-      if (accessFile != null && accessFile.length() > 0) {
-        // Lets not use default connector based authorization
-        // env.put("jmx.remote.x.access.file", accessFile);
-        // Rewire the mbs hierarchy to set accessController
-        ReadOpFileAccessController controller = new ReadOpFileAccessController(accessFile);
-        controller.setMBeanServer(mbs);
-        mbs = controller;
-      }
-    }
-
-    // This may be the 1.6 way of doing it but the problem is it does not use
-    // our "stub".
-    // cs = JMXConnectorServerFactory.newJMXConnectorServer(url, env, mbs);
-    if (integratedSecEnabled) {
-      cs.setMBeanServerForwarder(securityInterceptor.getMBeanServerForwarder());
-      logger.info("Starting RMI Connector with Security Interceptor");
+    String shiroConfig = this.config.getShiroInit();
+    if (! StringUtils.isBlank(shiroConfig) || isIntegratedSecurity()) {
+      shiroAuthenticator = new JMXShiroAuthenticator();
+      env.put(JMXConnectorServer.AUTHENTICATOR, shiroAuthenticator);
+      cs.addNotificationListener(shiroAuthenticator, null, cs.getAttributes());
+      // always going to assume authorization is needed as well, if no custom AccessControl, then the CustomAuthRealm
+      // should take care of that
+      MBeanServerWrapper mBeanServerWrapper = new MBeanServerWrapper();
+      cs.setMBeanServerForwarder(mBeanServerWrapper);
+      registerAccessControlMBean();
+    }
+
+    else {
+      /* Disable the old authenticator mechanism */
+      String pwFile = this.config.getJmxManagerPasswordFile();
+      if (pwFile != null && pwFile.length() > 0) {
+        env.put("jmx.remote.x.password.file", pwFile);
+      }
+
+      String accessFile = this.config.getJmxManagerAccessFile();
+      if (accessFile != null && accessFile.length() > 0) {
+        // Lets not use default connector based authorization
+        // env.put("jmx.remote.x.access.file", accessFile);
+        // Rewire the mbs hierarchy to set accessController
+        ReadOpFileAccessController controller = new ReadOpFileAccessController(accessFile);
+        controller.setMBeanServer(mbs);
+        mbs = controller;
+      }
-    // System.out.println("Server started at: "+cs.getAddress());
+  }
-    // Start the CleanThread daemon... KIRK: not sure what CleanThread is...
-    //
-    // final Thread clean = new CleanThread(cs);
-    // clean.start();
+  private void registerAccessControlMBean() {
+    try {
+      AccessControlMBean acc = new AccessControlMBean();
+      ObjectName accessControlMBeanON = new ObjectName(ResourceConstants.OBJECT_NAME_ACCESSCONTROL);
+      MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();
+
+      Set<ObjectName> names = platformMBeanServer.queryNames(accessControlMBeanON, null);
+      if (names.isEmpty()) {
+        try {
+          platformMBeanServer.registerMBean(acc, accessControlMBeanON);
+          logger.info("Registered AccessContorlMBean on " + accessControlMBeanON);
+        } catch (InstanceAlreadyExistsException e) {
+          throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource", e);
+        } catch (MBeanRegistrationException e) {
+          throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource", e);
+        } catch (NotCompliantMBeanException e) {
+          throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource", e);
+        }
+      }
+    } catch (MalformedObjectNameException e) {
+      throw new GemFireConfigException("Error while configuring accesscontrol for jmx resource", e);
+    }
+  }
+
+
+  private boolean isIntegratedSecurity() {
+    String factoryName = config.getSecurityManager();
+    return factoryName != null && !factoryName.isEmpty();

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 MOV31 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS31 UPD43 MOV60 MOV25 INS83 INS39 INS42 INS8 UPD42 UPD66 UPD42 UPD42 INS54 INS60 INS43 INS27 INS8 INS12 INS43 INS59 INS27 INS42 UPD42 INS32 INS38 INS32 INS21 INS60 INS21 INS21 INS60 INS60 INS60 INS60 INS25 INS44 INS8 INS42 INS42 INS32 MOV27 INS38 INS25 INS22 UPD42 MOV42 INS32 INS42 INS32 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS74 INS59 INS32 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS32 INS32 INS8 INS52 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS54 INS42 INS14 UPD42 MOV42 UPD42 MOV42 INS42 INS21 UPD43 INS42 INS42 INS43 INS43 INS43 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS8 INS12 INS12 INS12 INS43 INS45 INS42 INS32 UPD42 INS42 INS42 INS42 INS21 INS21 INS44 INS8 INS44 INS8 INS44 INS8 INS42 INS42 INS42 INS45 INS45 INS32 INS32 INS43 INS42 INS53 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS42 INS14 INS42 INS14 INS42 INS14 INS45 INS42 INS43 INS45 INS42 INS43 INS45 INS42 INS43 INS45 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL45 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL45 DEL32 DEL45 DEL32 DEL33 DEL27 DEL27 DEL36