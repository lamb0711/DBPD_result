GEODE-2644: Make LogWriterAppender optional and support log4j2.xml

LogWriterAppender is now configured in log4j2.xml and it supports
sessions that correspond with Cache lifecycle. This allows Geode to
pause and resume LogWriterAppender and GeodeConsoleAppender without
resorting to dynamically adding and removing appenders.

When the Cache exists, log events stop going to the Console and instead
go to the Geode log file. Whenever the Cache does not exist, log events
go only to the Console.

These changes remove as much of the Log4j2 Core manipulation as
possible.

Also fixed:
* GEODE-5789: Geode now updates log level of all Geode loggers.

List of changes:
* Change LogWriterAppender to be pausable and session-oriented
* Add GeodeConsoleAppender which is pausable
* Log4j2 Core dependency is now optional
* Internal Logging interfaces allow Logging service to be pluggable
* Log4j2 xml integration testing now uses JUnit Rule from Log4j2
* Reduce coupling between Logging and the rest of Geode
* Greatly increase test coverage for Logging

+import java.util.Set;
+import org.apache.geode.internal.logging.LogConfig;
+import org.apache.geode.internal.logging.LogConfigListener;
+import org.apache.geode.internal.logging.LogConfigSupplier;
+import org.apache.geode.internal.logging.LoggingSession;
-import org.apache.geode.internal.logging.log4j.LogWriterAppenders;
+import org.apache.geode.internal.logging.NullLoggingSession;
+import org.apache.geode.internal.statistics.StatisticsConfig;
-public class InternalLocator extends Locator implements ConnectListener {
+public class InternalLocator extends Locator implements ConnectListener, LogConfigSupplier {
+  private final LoggingSession loggingSession;
+
+  private final Set<LogConfigListener> logConfigListeners = new HashSet<>();
+
-      LogWriterAppenders.stop(LogWriterAppenders.Identifier.MAIN);
-      LogWriterAppenders.stop(LogWriterAppenders.Identifier.SECURITY);
-      LogWriterAppenders.destroy(LogWriterAppenders.Identifier.MAIN);
-      LogWriterAppenders.destroy(LogWriterAppenders.Identifier.SECURITY);
+      locator.loggingSession.stopSession();
+      locator.loggingSession.shutdown();
+   * @param loggingSession the LoggingSession to use, may be a NullLoggingSession which does nothing
-  public static InternalLocator createLocator(int port, File logFile, InternalLogWriter logger,
+  public static InternalLocator createLocator(int port, LoggingSession loggingSession, File logFile,
+      InternalLogWriter logger,
-          new InternalLocator(port, logFile, logger, securityLogger, bindAddress,
+          new InternalLocator(port, loggingSession, logFile, logger, securityLogger, bindAddress,
-      newLocator = createLocator(port, logFile, logger, securityLogger, bindAddress,
+      // if startDistributedSystem is true then Locator uses a NullLoggingSession (does nothing)
+      LoggingSession loggingSession =
+          startDistributedSystem ? NullLoggingSession.create() : LoggingSession.create();
+
+      newLocator = createLocator(port, loggingSession, logFile, logger, securityLogger, bindAddress,
+      loggingSession.createSession(newLocator);
+      loggingSession.startSession();
+
-   * @param logF the file that log messages should be written to
+   * @param logFile the file that log messages should be written to
-  private InternalLocator(int port, File logF, InternalLogWriter logWriter,
-      // LOG: 3 non-null sources: GemFireDistributionLocator, InternalDistributedSystem,
-      // LocatorLauncher
-      InternalLogWriter securityLogWriter,
-      // LOG: 1 non-null source: GemFireDistributionLocator(same instance as logWriter),
-      // InternalDistributedSystem
+  private InternalLocator(int port, LoggingSession loggingSession, File logFile,
+      InternalLogWriter logWriter, InternalLogWriter securityLogWriter,
-    this.logFile = logF;
+    this.logFile = logFile;
-    // LOG: create LogWriterAppenders (these are closed at shutdown)
-    final boolean hasLogFile =
-        this.config.getLogFile() != null && !this.config.getLogFile().equals(new File(""));
-    final boolean hasSecurityLogFile = this.config.getSecurityLogFile() != null
-        && !this.config.getSecurityLogFile().equals(new File(""));
-    LogService.configureLoggers(hasLogFile, hasSecurityLogFile);
-    if (hasLogFile || hasSecurityLogFile) {
-
-      if (hasLogFile) {
-        // if log-file then create logWriterAppender
-        LogWriterAppenders.getOrCreateAppender(LogWriterAppenders.Identifier.MAIN, true, false,
-            this.config, !startDistributedSystem);
-      }
-
-      if (hasSecurityLogFile) {
-        // if security-log-file then create securityLogWriterAppender
-        LogWriterAppenders.getOrCreateAppender(LogWriterAppenders.Identifier.SECURITY, true, false,
-            this.config, false);
-      }
-      // do not create a LogWriterAppender for security -- let it go through to logWriterAppender
+    if (loggingSession == null) {
+      throw new Error("LoggingSession must not be null");
+    } else {
+      this.loggingSession = loggingSession;
-      logWriter = LogWriterFactory.createLogWriterLogger(false, false, this.config, false);
+      logWriter = LogWriterFactory.createLogWriterLogger(this.config, false);
-      securityLogWriter = LogWriterFactory.createLogWriterLogger(false, true, this.config, false);
-      logWriter.setLogWriterLevel(this.config.getSecurityLogLevel());
+      securityLogWriter = LogWriterFactory.createLogWriterLogger(this.config, true);
+  @Override
+  public LogConfig getLogConfig() {
+    return config;
+  }
+
+  @Override
+  public StatisticsConfig getStatisticsConfig() {
+    return config;
+  }
+
+  @Override
+  public void addLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.add(logConfigListener);
+  }
+
+  @Override
+  public void removeLogConfigListener(LogConfigListener logConfigListener) {
+    logConfigListeners.remove(logConfigListener);
+  }
+
+  /**
+   * Apparently nothing provides RuntimeDistributionConfigImpl behavior in a stand-alone locator
+   * (without DS), so there are currently no callers of {@code logConfigChanged()}. Keep it?
+   */
+  @SuppressWarnings("unused")
+  void logConfigChanged() {
+    for (LogConfigListener listener : logConfigListeners) {
+      listener.configChanged();
+    }
+  }
+

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS43 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS74 INS59 INS44 INS44 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS29 INS79 INS39 INS42 INS8 INS42 INS42 INS43 INS43 INS42 INS14 INS65 INS43 INS42 INS43 INS42 UPD42 INS25 INS42 INS42 INS41 INS42 INS42 INS41 INS42 INS43 INS42 INS21 INS42 INS43 INS42 INS21 INS65 INS42 INS45 INS70 INS42 INS42 INS74 INS42 INS66 INS42 UPD42 INS42 INS27 INS8 MOV8 INS42 INS42 INS42 INS32 INS42 INS32 INS66 INS66 INS65 INS66 INS44 INS42 INS8 INS43 INS60 INS21 INS21 UPD42 INS42 MOV33 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS66 INS43 INS42 INS21 INS42 MOV43 INS43 INS59 INS32 INS32 INS14 INS7 INS42 INS32 INS40 UPD42 INS40 UPD42 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 UPD43 MOV43 UPD45 MOV45 INS22 INS42 INS42 INS42 MOV43 INS42 INS42 INS32 INS32 INS42 UPD42 MOV52 UPD42 MOV42 MOV22 MOV22 INS42 INS42 INS42 INS42 DEL42 DEL40 DEL42 DEL40 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL40 DEL9 DEL9 DEL22 DEL42 DEL38 DEL32 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL14 DEL32 DEL38 DEL27 DEL59 DEL60 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL42 DEL43 DEL45 DEL14 DEL32 DEL38 DEL27 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL27 DEL42 DEL25 DEL42 DEL42 DEL42 DEL40 DEL9 DEL9 DEL52 DEL42 DEL22 DEL9 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL9 DEL9 DEL9 DEL9 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL21