Merge branch 'release/1.4.0'

+import org.apache.logging.log4j.Logger;
+
+import org.apache.geode.internal.cache.entries.DiskEntry;
+import org.apache.geode.internal.cache.eviction.EvictableEntry;
-import org.apache.geode.internal.cache.lru.LRUEntry;
+import org.apache.geode.internal.lang.SystemPropertyHelper;
+import org.apache.geode.internal.util.concurrent.CopyOnWriteHashMap;
-import org.apache.logging.log4j.Logger;
-   * 
+   *
-   * 
+   *
-   * 
+   *
+  @Override
-  Map<String, CacheServiceProfile> cacheServiceProfiles;
+  private final CopyOnWriteHashMap<String, CacheServiceProfile> cacheServiceProfiles =
+      new CopyOnWriteHashMap<>();
-    this.cacheServiceProfiles =
-        internalRegionArgs.getCacheServiceProfiles() == null ? Collections.emptyMap()
-            : Collections.unmodifiableMap(internalRegionArgs.getCacheServiceProfiles());
+    if (internalRegionArgs.getCacheServiceProfiles() != null) {
+      this.cacheServiceProfiles.putAll(internalRegionArgs.getCacheServiceProfiles());
+    }
+  @Override
-   * 
+   *
+  @Override
+  @Override
+  @Override
+    this.cache.invokeBeforeDestroyed(this);
-  protected void invokeBeforeRegionDestroyInServices() {
-    for (CacheService service : this.cache.getServices()) {
-      if (service instanceof RegionService) {
-        ((RegionService) service).beforeRegionDestroyed(this);
-      }
-    }
-  }
-
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  boolean isThisRegionBeingClosedOrDestroyed() {
+  @Override
+  public boolean isThisRegionBeingClosedOrDestroyed() {
+    if (!restoreSetOperationTransactionBehavior) {
+      discoverJTA();
+    }
-   * 
+   *
+    if (!restoreSetOperationTransactionBehavior) {
+      discoverJTA();
+    }
-   * 
+   *
+    if (!restoreSetOperationTransactionBehavior) {
+      discoverJTA();
+    }
-   * 
+   *
+  @Override
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  boolean cacheWriteBeforeDestroy(EntryEventImpl event, Object expectedOldValue)
+  @Override
+  public boolean cacheWriteBeforeDestroy(EntryEventImpl event, Object expectedOldValue)
+      event.setReadOldValueFromDisk(true);
+        event.setReadOldValueFromDisk(false);
-   * 
+   *
+      event.setReadOldValueFromDisk(true);
+        event.setReadOldValueFromDisk(false);
-  void incTombstoneCount(int delta) {
+  public void incTombstoneCount(int delta) {
-  void scheduleTombstone(RegionEntry entry, VersionTag destroyedVersion) {
+  @Override
+  public void scheduleTombstone(RegionEntry entry, VersionTag destroyedVersion) {
-  void unscheduleTombstone(RegionEntry entry) {
+  @Override
+  public void unscheduleTombstone(RegionEntry entry) {
-   * 
+   *
-   * 
+   *
+  @Override
-   * 
+   *
+  @Override
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
+  @Override
-   * 
+   *
-   * 
+   *
-   * 
+   *
+  @Override
-   * 
+   *
-  void generateAndSetVersionTag(InternalCacheEvent event, RegionEntry entry) {
+  @Override
+  public void generateAndSetVersionTag(InternalCacheEvent event, RegionEntry entry) {
+  @Override
+  @Override
+  public boolean isConcurrencyChecksEnabled() {
+    return this.concurrencyChecksEnabled;
+  }
+
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    final TXStateProxy tx = this.cache.getTXMgr().internalSuspend();
+    final TXStateProxy tx = this.cache.getTXMgr().pauseTransaction();
-      this.cache.getTXMgr().internalResume(tx);
+      this.cache.getTXMgr().unpauseTransaction(tx);
+  protected final boolean restoreSetOperationTransactionBehavior =
+      SystemPropertyHelper.restoreSetOperationTransactionBehavior();
+
-   * 
+   *
+  private boolean isTransactionPaused() {
+    TXManagerImpl txMgr = (TXManagerImpl) getCache().getCacheTransactionManager();
+    return txMgr.isTransactionPaused();
+  }
+
-   * 
+   *
-  boolean evictDestroy(LRUEntry entry) {
+  boolean evictDestroy(EvictableEntry entry) {
+  @Override
-    final TXStateProxy tx = this.cache.getTXMgr().internalSuspend();
+    final TXStateProxy tx = this.cache.getTXMgr().pauseTransaction();
-      this.cache.getTXMgr().internalResume(tx);
+      this.cache.getTXMgr().unpauseTransaction(tx);
-  void dispatchListenerEvent(EnumListenerEvent op, InternalCacheEvent event) {
+  @Override
+  public void dispatchListenerEvent(EnumListenerEvent op, InternalCacheEvent event) {
+      // Clean up region in RegionListeners
+      this.cache.invokeCleanupFailedInitialization(this);
-  long updateStatsForPut(RegionEntry entry, long lastModified, boolean lruRecentUse) {
+  @Override
+  public long updateStatsForPut(RegionEntry entry, long lastModified, boolean lruRecentUse) {
-      entry.setRecentlyUsed();
+      entry.setRecentlyUsed(this);
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-  void addExpiryTaskIfAbsent(RegionEntry re) {
-    addExpiryTask(re, true);
+  @Override
+  public void addExpiryTaskIfAbsent(RegionEntry entry) {
+    addExpiryTask(entry, true);
-     * 
+     *
-   * 
+   *
-  ImageState getImageState() {
+  @Override
+  public ImageState getImageState() {
-            if (regionEntry instanceof DiskEntry && regionEntry instanceof LRUEntry) {
-              LRUEntry le = (LRUEntry) regionEntry;
-              if (le.testEvicted()) {
+            if (regionEntry instanceof DiskEntry && regionEntry instanceof EvictableEntry) {
+              EvictableEntry le = (EvictableEntry) regionEntry;
+              if (le.isEvicted()) {
+          if (isTransactionPaused()) {
+            // Do not bootstrap JTA again, if the transaction has been paused.
+            return null;
+          }
-  /*****************************************************************************
-   * INNER CLASSES
-   ****************************************************************************/
+  @Override
+  public void incRecentlyUsed() {
+    // nothing
+    this.entries.incRecentlyUsed();
+  }
+  /*****************************************************************************
+   * INNER CLASSES
+   ****************************************************************************/
+
+        @Override
-     * 
+     *
+  @Override
-   * 
+   *
-              TXStateProxy txState = this.cache.getTXMgr().internalSuspend();
+              TXStateProxy txState = this.cache.getTXMgr().pauseTransaction();
-                this.cache.getTXMgr().internalResume(txState);
+                this.cache.getTXMgr().unpauseTransaction(txState);
-   * 
+   *
-   * 
+   *
-   * 
+   *
-       * If this is tx, do removeEntry, unless it is a local region?
+       * If this is tx, do destroyEntry, unless it is a local region?
-  /**
-   * @return Returns the isUsedForPartitionedRegionAdmin.
-   */
-  boolean isUsedForPartitionedRegionAdmin() {
+  @Override
+  public boolean isUsedForPartitionedRegionAdmin() {
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-    return Collections.unmodifiableMap(this.cacheServiceProfiles);
+    return this.cacheServiceProfiles.getSnapshot();
+  }
+
+  public void addCacheServiceProfile(CacheServiceProfile profile) {
+    this.cacheServiceProfiles.put(profile.getId(), profile);
-   * 
+   *
+  @Override
-   * 
+   *
-  int updateSizeOnEvict(Object key, int oldSize) {
+  @Override
+  public int updateSizeOnEvict(Object key, int oldSize) {
-   * 
+   *
-   * 
+   *
-   * 
+   *
+  public boolean canStoreDataLocally() {
+    return this.dataPolicy.withStorage();
+  }
+
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
-   * 
+   *
+  /**
+   * Send a message to all other members that can have this same region entry and return the latest
+   * last access time.
+   */
+  public long getLatestLastAccessTimeFromOthers(Object key) {
+    // local regions have no other members so return 0.
+    return 0L;
+  }
+
+  /**
+   * Returns the number of LRU evictions done by this region.
+   */
+  @Override
+  public long getEvictions() {
+    return this.entries.getEvictions();
+  }
+

MOV26 MOV26 INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS31 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS78 INS83 INS83 UPD74 INS78 INS78 INS78 INS78 INS78 INS83 INS78 INS78 INS83 INS83 INS78 INS83 INS78 INS83 INS78 INS78 INS78 INS78 INS78 INS83 INS78 INS78 UPD83 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 INS83 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS78 INS78 INS83 INS78 INS83 INS78 INS83 INS78 INS83 INS78 INS83 INS39 INS42 INS8 MOV29 INS78 INS78 INS83 INS8 INS83 INS39 INS42 INS44 MOV8 INS78 INS78 INS83 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS83 INS39 INS42 INS8 INS42 UPD43 INS14 INS25 INS42 INS42 INS42 INS42 INS21 INS42 INS25 INS25 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS41 INS42 INS32 INS60 INS41 UPD43 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS21 INS42 INS42 INS41 INS43 INS42 INS21 INS42 INS42 INS41 INS65 INS43 INS42 INS41 INS65 INS42 INS41 UPD42 INS74 UPD27 MOV27 INS8 INS32 INS38 INS8 INS38 INS8 INS38 INS8 INS22 INS42 UPD42 MOV42 INS43 INS59 INS32 UPD42 INS32 INS32 INS42 MOV32 INS32 INS66 INS66 INS42 INS34 INS66 INS32 INS43 MOV21 MOV22 INS42 INS52 INS42 INS21 INS42 INS21 INS42 INS21 INS21 INS21 INS52 INS42 UPD42 MOV42 INS42 INS11 INS42 UPD42 MOV42 MOV32 INS21 UPD42 INS22 INS42 INS22 INS42 INS42 INS32 INS42 INS22 INS42 INS22 INS42 INS42 MOV32 INS32 INS32 INS32 INS32 INS32 UPD42 UPD43 MOV43 INS32 UPD42 MOV32 INS32 INS52 INS42 INS52 INS42 UPD42 MOV42 UPD42 MOV42 INS52 INS42 INS52 INS42 MOV22 UPD42 INS42 INS42 INS42 INS42 INS42 INS9 INS21 INS42 INS42 INS9 INS21 UPD42 UPD42 INS32 INS42 UPD42 INS42 INS22 INS42 INS52 INS52 INS32 INS32 INS42 INS52 INS42 INS78 INS42 INS42 INS9 INS42 INS42 INS9 INS25 INS42 INS32 INS8 INS42 INS41 INS33 UPD43 UPD43 UPD42 UPD42 UPD42 MOV32 UPD43 UPD42 MOV32 UPD42 UPD42 INS42 DEL42 DEL42 DEL42 DEL32 DEL16 DEL7 DEL42 DEL43 DEL42 DEL44 DEL32 DEL42 DEL43 DEL62 DEL42 DEL11 DEL36 DEL52 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL31 DEL42 DEL42 DEL66 DEL65 DEL29 DEL41