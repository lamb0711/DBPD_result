Merge branch 'release/1.3.0'

-import java.io.DataInput;
-import java.io.DataOutput;
-import org.apache.geode.distributed.internal.DistributionManager;
-import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;
-import org.apache.geode.distributed.internal.MessageWithReply;
-import org.apache.geode.distributed.internal.ReplyMessage;
-import org.apache.geode.distributed.internal.ReplyProcessor21;
+import org.apache.geode.internal.cache.tier.CommunicationMode;
-      writeException(dos, Acceptor.UNSUCCESSFUL_SERVER_TO_CLIENT, uve, clientVersion);
+      writeException(dos, CommunicationMode.UnsuccessfulServerToClient.getModeNumber(), uve,
+          clientVersion);
-      Properties credentials = HandShake.readCredentials(dis, dos, system);
+      Properties credentials =
+          HandShake.readCredentials(dis, dos, system, this.cache.getSecurityService());
-        Object subject = HandShake.verifyCredentials(authenticator, credentials,
-            system.getSecurityProperties(), this.logWriter, this.securityLogWriter, member);
+        Object subject =
+            HandShake.verifyCredentials(authenticator, credentials, system.getSecurityProperties(),
+                this.logWriter, this.securityLogWriter, member, this.cache.getSecurityService());
-      writeException(dos, Acceptor.UNSUCCESSFUL_SERVER_TO_CLIENT, ex, clientVersion);
+      writeException(dos, CommunicationMode.UnsuccessfulServerToClient.getModeNumber(), ex,
+          clientVersion);
-    byte responseByte = Acceptor.SUCCESSFUL_SERVER_TO_CLIENT;
+    byte responseByte = CommunicationMode.SuccessfulServerToClient.getModeNumber();
-            clientVersion, acceptorId, notifyBySubscription);
+            clientVersion, acceptorId, notifyBySubscription, this.cache.getSecurityService());
-            clientVersion, acceptorId, notifyBySubscription);
+            clientVersion, acceptorId, notifyBySubscription, this.cache.getSecurityService());
+      logger.warn(unsuccessfulMsg);
-        && responseByte == Acceptor.SUCCESSFUL_SERVER_TO_CLIENT) {
+        && responseByte == CommunicationMode.SuccessfulServerToClient.getModeNumber()) {
-    if (responseByte == Acceptor.SUCCESSFUL_SERVER_TO_CLIENT) {
+    if (responseByte == CommunicationMode.SuccessfulServerToClient.getModeNumber()) {
-          proxyId));
+          new Object[] {proxyId, responseByte}));
-    this._cache.getCancelCriterion().checkCancelInProgress(null); // bug #43942 - client notified
-                                                                  // but no p2p distribution
+    this.cache.getCancelCriterion().checkCancelInProgress(null); // bug #43942 - client notified
+                                                                 // but no p2p distribution
-    if (this._cache != null && this._cache.isClosed()) {
+    if (this.cache != null && this.cache.isClosed()) {
-        this._cache = cache;
+        this.cache = cache;
-    return this._cache;
+    return this.cache;
-        _cache.getCCPTimer().scheduleAtFixedRate(task, period, period);
+        cache.getCCPTimer().scheduleAtFixedRate(task, period, period);
-    CacheClientNotifier.this._cache.getCCPTimer().scheduleAtFixedRate(this.clientPingTask,
+    CacheClientNotifier.this.cache.getCCPTimer().scheduleAtFixedRate(this.clientPingTask,
-   * not use a direct reference to _cache in CacheClientNotifier code. Instead, you should always
-   * use <code>getCache()</code>
+   * not use a direct reference to cache in CacheClientNotifier code. Instead, you should always use
+   * <code>getCache()</code>
-  private InternalCache _cache;
+  private InternalCache cache;
-      haContainer = new HAContainerRegion(_cache.getRegion(Region.SEPARATOR
-          + CacheServerImpl.clientMessagesRegion(_cache, (String) overflowAttributesList.get(0),
+      haContainer = new HAContainerRegion(cache.getRegion(Region.SEPARATOR
+          + CacheServerImpl.clientMessagesRegion(cache, (String) overflowAttributesList.get(0),
-   * @param _cache the _cache to set
+   * @param _cache the cache to set
-    this._cache = _cache;
+    this.cache = _cache;

MOV26 UPD40 UPD42 UPD66 UPD66 UPD66 INS32 INS21 INS32 UPD42 INS40 INS42 INS32 INS32 INS40 INS42 UPD42 INS42 INS42 INS42 INS40 INS42 UPD42 UPD42 UPD42 UPD42 INS32 INS32 INS32 INS3 UPD40 MOV40 INS42 INS22 INS42 UPD40 MOV40 INS42 INS5 INS4 UPD42 INS52 INS42 INS32 INS32 INS32 INS43 INS85 INS42 INS42 UPD42 UPD42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 UPD42 INS52 INS42 INS52 INS42 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL40 DEL40 DEL42