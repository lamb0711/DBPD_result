GEODE-6384: Use consistent API to retrieve instances of ClusterManageâ€¦ (#3333)



+import java.net.InetSocketAddress;
+import org.apache.geode.distributed.internal.tcpserver.TcpClient;
+import org.apache.geode.management.internal.configuration.messages.ClusterManagementServiceInfo;
+import org.apache.geode.management.internal.configuration.messages.ClusterManagementServiceInfoRequest;
-      GemFireCacheImpl cacheImpl = (GemFireCacheImpl) cache;
-
-      Set<InternalDistributedMember> locatorsWithClusterConfig =
-          cacheImpl.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration()
-              .keySet();
-
-      MemberInformation memberInformation = getHttpServiceAddress(locatorsWithClusterConfig);
-
-      SSLContext sslContext = null;
-      HostnameVerifier hostnameVerifier = null;
-      if (memberInformation.isWebSSL()) {
-        SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(
-            ((GemFireCacheImpl) cache).getSystem().getConfig(), SecurableCommunicationChannel.WEB);
-        if (!sslConfig.useDefaultSSLContext() && sslConfig.getTruststore() == null) {
-          throw new IllegalStateException(
-              "The server needs to have ssl-truststore or ssl-use-default-context specified in order to use cluster management service.");
-        }
-
-        sslContext = SSLUtil.createAndConfigureSSLContext(sslConfig, false);
-        hostnameVerifier = new NoopHostnameVerifier();
-      }
-
-      return create(getHostName(memberInformation), memberInformation.getHttpServicePort(),
-          sslContext, hostnameVerifier, username, password);
+      return getClusterManagementServiceOnServer(username, password, (GemFireCacheImpl) cache);
-      throw new IllegalStateException(
-          "Under construction. To retrieve an instance of ClusterManagementService from a Geode client, please use other methods");
+      return getClusterManagementServiceOnClient(username, password, clientCache);
-    // } catch( CacheClosedException e) {
+
+  private ClusterManagementService getClusterManagementServiceOnServer(String username,
+      String password,
+      GemFireCacheImpl cache) {
+    Set<InternalDistributedMember> locatorsWithClusterConfig =
+        cache.getDistributionManager().getAllHostedLocatorsWithSharedConfiguration()
+            .keySet();
-  private MemberInformation getHttpServiceAddress(Set<InternalDistributedMember> locators) {
+    MemberInformation memberInformation = getLocatorInformation(locatorsWithClusterConfig);
+
+    SSLContext sslContext = null;
+    HostnameVerifier hostnameVerifier = null;
+    if (memberInformation.isWebSSL()) {
+      SSLConfig sslConfig = SSLConfigurationFactory.getSSLConfigForComponent(
+          cache.getSystem().getConfig(), SecurableCommunicationChannel.WEB);
+      if (!sslConfig.useDefaultSSLContext() && sslConfig.getTruststore() == null) {
+        throw new IllegalStateException(
+            "The server needs to have ssl-truststore or ssl-use-default-context specified in order to use cluster management service.");
+      }
+
+      sslContext = SSLUtil.createAndConfigureSSLContext(sslConfig, false);
+      hostnameVerifier = new NoopHostnameVerifier();
+    }
+
+    return create(getHostName(memberInformation), memberInformation.getHttpServicePort(),
+        sslContext, hostnameVerifier, username, password);
+  }
+
+  private ClusterManagementService getClusterManagementServiceOnClient(String username,
+      String password,
+      ClientCache clientCache) {
+    List<InetSocketAddress> locators = clientCache.getDefaultPool().getLocators();
+
+    if (locators.size() == 0) {
+      throw new IllegalStateException(
+          "the client needs to have a client pool connected with a locator.");
+    }
+    TcpClient client = new TcpClient();
+    ClusterManagementServiceInfo cmsInfo = null;
+    for (InetSocketAddress locator : locators) {
+      try {
+        cmsInfo =
+            (ClusterManagementServiceInfo) client.requestToServer(locator,
+                new ClusterManagementServiceInfoRequest(), 1000, true);
+
+        // do not try anymore if we found one that has cms running
+        if (cmsInfo.isRunning()) {
+          break;
+        }
+      } catch (Exception e) {
+        logger.info(
+            "unable to discover the ClusterManagementService on locator " + locator.toString());
+      }
+    }
+
+    // if cmsInfo is still null at this point, i.e. we failed to retrieve the cms information from
+    // any locator
+    if (cmsInfo == null || !cmsInfo.isRunning()) {
+      throw new IllegalStateException(
+          "Unable to discover a locator that has ClusterManagementService running.");
+    }
+
+    return create(cmsInfo.getHostName(), cmsInfo.getHttpPort(), null, new NoopHostnameVerifier(),
+        username, password);
+  }
+
+
+  private MemberInformation getLocatorInformation(Set<InternalDistributedMember> locators) {

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 MOV78 INS83 INS43 INS42 INS44 INS44 INS8 UPD83 INS42 INS44 MOV8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 UPD42 INS42 INS43 INS42 INS43 INS42 MOV25 MOV60 INS25 MOV60 INS25 MOV53 MOV43 INS42 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS60 MOV25 INS60 INS60 INS70 INS25 INS41 INS42 INS42 MOV27 INS8 MOV27 INS8 INS42 INS42 INS42 INS74 INS59 INS27 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS27 INS8 INS32 INS41 INS41 INS43 INS43 INS42 INS32 INS32 INS34 INS42 INS42 INS14 INS42 INS42 INS33 INS43 INS42 INS54 INS27 INS38 INS53 INS42 INS32 INS32 INS33 INS14 INS42 INS42 INS32 INS32 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS8 INS12 INS42 INS33 INS32 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 MOV11 INS42 INS42 INS42 INS42 INS42 INS42 UPD45 INS42 INS21 INS25 INS44 INS8 INS42 INS42 INS43 INS45 INS42 UPD42 INS7 INS32 INS8 INS43 INS42 INS21 INS42 INS42 INS11 INS42 INS42 INS10 INS42 INS32 INS42 INS43 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS14 INS34 INS9 INS45 INS32 INS43 INS42 INS42 INS42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL11 DEL36 DEL25 DEL8