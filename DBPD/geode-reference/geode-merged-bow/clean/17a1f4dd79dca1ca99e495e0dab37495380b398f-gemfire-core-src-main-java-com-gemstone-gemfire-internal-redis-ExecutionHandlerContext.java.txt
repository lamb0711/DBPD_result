Merge remote-tracking branch 'origin/develop' into feature/GEODE-77

+  private final byte[] authPwd;
+  private boolean isAuthenticated;
-  public ExecutionHandlerContext(Channel ch, Cache cache, RegionCache regions, GemFireRedisServer server) {
+  public ExecutionHandlerContext(Channel ch, Cache cache, RegionCache regions, GemFireRedisServer server, byte[] pwd) {
+    this.authPwd = pwd;
+    this.isAuthenticated = pwd != null ? false : true;
-    if (type == RedisCommandType.SHUTDOWN) {
-      this.server.shutdown();
-      return;
-    }
-    if (hasTransaction() && !(exec instanceof TransactionExecutor))
-      executeWithTransaction(ctx, exec, command);
-    else
-      executeWithoutTransaction(exec, command, MAXIMUM_NUM_RETRIES); 
+    if (isAuthenticated) {
+      if (type == RedisCommandType.SHUTDOWN) {
+        this.server.shutdown();
+        return;
+      }
+      if (hasTransaction() && !(exec instanceof TransactionExecutor))
+        executeWithTransaction(ctx, exec, command);
+      else
+        executeWithoutTransaction(exec, command, MAXIMUM_NUM_RETRIES); 
-    if (hasTransaction() && command.getCommandType() != RedisCommandType.MULTI)
-      writeToChannel(Coder.getSimpleStringResponse(this.byteBufAllocator, RedisConstants.COMMAND_QUEUED));
-    else 
-      writeToChannel(command.getResponse());
-    if (type == RedisCommandType.QUIT) {
+      if (hasTransaction() && command.getCommandType() != RedisCommandType.MULTI) {
+        writeToChannel(Coder.getSimpleStringResponse(this.byteBufAllocator, RedisConstants.COMMAND_QUEUED));
+      } else {
+        ByteBuf response = command.getResponse();
+        writeToChannel(response);
+      }
+    } else if (type == RedisCommandType.QUIT) {
+      exec.executeCommand(command, this);
+      ByteBuf response = command.getResponse();
+      writeToChannel(response);
+    } else if (type == RedisCommandType.AUTH) {
+      exec.executeCommand(command, this);
+      ByteBuf response = command.getResponse();
+      writeToChannel(response);
+    } else {
+      ByteBuf r = Coder.getNoAuthResponse(this.byteBufAllocator, RedisConstants.ERROR_NOT_AUTH);
+      writeToChannel(r);
+  public LogWriter getLogger() {
+    return this.cache.getLogger();
+  }
+
+  public Channel getChannel() {
+    return this.channel;
+  }
+
+  public byte[] getAuthPwd() {
+    return this.authPwd;
+  }
+
+  public boolean isAuthenticated() {
+    return this.isAuthenticated;
+  }
+
+  public void setAuthenticationVerified() {
+    this.isAuthenticated = true;
+  }

INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS5 INS59 INS83 INS39 INS59 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS5 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS39 INS85 INS42 INS42 INS5 INS42 INS21 INS21 MOV60 MOV60 INS25 INS42 INS41 INS42 INS41 INS39 INS85 INS41 INS41 INS21 INS39 INS85 INS7 INS7 INS42 MOV8 INS25 INS32 INS22 INS22 INS22 INS7 INS22 INS42 INS22 INS16 MOV27 INS8 INS25 INS22 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS22 INS9 INS52 INS42 INS52 INS42 INS27 INS9 INS9 INS8 INS8 INS21 INS60 INS21 MOV21 INS27 INS8 INS8 INS52 INS42 INS52 INS42 INS42 INS33 MOV21 INS60 INS21 INS32 INS43 INS59 INS32 INS42 INS40 INS21 INS60 INS21 INS60 INS21 INS43 INS59 MOV32 INS42 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS40 INS52 INS42 DEL21 DEL8 DEL25