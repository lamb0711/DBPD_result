GEODE-8170: change all hash and set commands to use function (#5125)

All hash and set commands now use the new function+delta data model.
This allowed the synchronized keyword to be removed from RedisHash and RedisSet.

-import static java.util.Collections.emptyList;
-import org.apache.geode.cache.Region;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-import org.apache.geode.redis.internal.ByteArrayWrapper;
-import org.apache.geode.redis.internal.RedisData;
-import org.apache.geode.redis.internal.RedisLockService;
-import org.apache.geode.redis.internal.RegionProvider;
-import org.apache.geode.redis.internal.executor.RedisHashInRegion;
+  static final int FIELD_INDEX = 2;
-
-  protected final int FIELD_INDEX = 2;
-
-  /**
-   * Get the save map
-   *
-   * @param context the context
-   * @param key the region hash key region:<key>
-   * @return the map data
-   */
-  protected RedisHash getRedisHash(ExecutionHandlerContext context,
-      ByteArrayWrapper key) {
-    Region<ByteArrayWrapper, RedisData> region =
-        context.getRegionProvider().getDataRegion();
-
-    RedisData data = region.get(key);
-    if (data == null) {
-      return RedisHash.EMPTY;
-    }
-    return RedisHashInRegion.checkType(data);
+  RedisHashCommands createRedisHashCommands(ExecutionHandlerContext context) {
+    return new RedisHashCommandsFunctionExecutor(context.getRegionProvider().getDataRegion());
-  protected RedisHash getModifiableRedisHash(ExecutionHandlerContext context,
-      ByteArrayWrapper key) {
-    Region<ByteArrayWrapper, RedisData> region =
-        context.getRegionProvider().getDataRegion();
-
-    RedisData data = region.get(key);
-    if (data == null) {
-      return new RedisHash(emptyList());
-    }
-    return RedisHashInRegion.checkType(data);
-  }
-
-  protected AutoCloseableLock withRegionLock(ExecutionHandlerContext context, ByteArrayWrapper key)
-      throws InterruptedException, TimeoutException {
-    RedisLockService lockService = context.getLockService();
-
-    return lockService.lock(key);
-  }
-
-
-  /**
-   * Save the redisHash information to a region
-   *
-   * @param redisHash the redisHash to save
-   * @param context the execution handler context
-   * @param key the raw HASH key
-   */
-  protected void saveRedishHash(RedisHash redisHash,
-      ExecutionHandlerContext context,
-      ByteArrayWrapper key) {
-
-    if (redisHash == null) {
-      return;
-    }
-
-    RegionProvider rp = context.getRegionProvider();
-
-    rp.getDataRegion().put(key, redisHash);
-  }

UPD83 UPD43 UPD42 MOV44 INS8 UPD42 MOV41 UPD43 MOV32 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL40 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31