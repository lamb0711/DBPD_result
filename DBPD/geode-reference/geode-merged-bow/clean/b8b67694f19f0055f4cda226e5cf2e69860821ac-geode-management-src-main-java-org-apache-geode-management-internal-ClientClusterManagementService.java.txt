Merge branch 'develop' into feature/GEODE-7049

+import static org.apache.geode.management.configuration.AbstractConfiguration.URI_VERSION;
+import static org.apache.geode.management.internal.Constants.INCLUDE_CLASS_HEADER;
+
+import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpHeaders;
-import org.apache.geode.cache.configuration.CacheElement;
-import org.apache.geode.management.api.CorrespondWith;
-import org.apache.geode.management.api.RestfulEndpoint;
+import org.apache.geode.management.configuration.AbstractConfiguration;
-  public <T extends CacheElement> ClusterManagementRealizationResult create(T config) {
+  public <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult create(T config) {
-        .postForEntity(endPoint, config, ClusterManagementRealizationResult.class)
+        .exchange(endPoint, HttpMethod.POST, makeEntity(config),
+            ClusterManagementRealizationResult.class)
+  static <T> HttpEntity<T> makeEntity(T config) {
+    HttpHeaders headers = new HttpHeaders();
+    headers.add(INCLUDE_CLASS_HEADER, "true");
+    return new HttpEntity<>(config, headers);
+  }
+
-  public <T extends CacheElement> ClusterManagementRealizationResult delete(
+  public <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult delete(
-            null,
+            makeEntity(null),
-  public <T extends CacheElement> ClusterManagementRealizationResult update(
+  public <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult update(
-  public <T extends CacheElement & CorrespondWith<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> list(
+  public <T extends AbstractConfiguration<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> list(
-        .getForEntity(endPoint + "/?id={id}&group={group}",
+        .exchange(endPoint + "/?id={id}&group={group}", HttpMethod.GET, makeEntity(config),
-  public <T extends CacheElement & CorrespondWith<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> get(
+  public <T extends AbstractConfiguration<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> get(
+
-        .getForEntity(getIdentityEndPoint(config), ClusterManagementListResult.class)
+        .exchange(getIdentityEndPoint(config), HttpMethod.GET, makeEntity(config),
+            ClusterManagementListResult.class)
-    result =
-        assertSuccessful(restTemplate.postForEntity(RestfulEndpoint.URI_VERSION + op.getEndpoint(),
-            op, ClusterManagementOperationResult.class).getBody());
+    result = assertSuccessful(restTemplate
+        .exchange(URI_VERSION + op.getEndpoint(), HttpMethod.POST, makeEntity(op),
+            ClusterManagementOperationResult.class)
+        .getBody());
-    String uri = stripPrefix(RestfulEndpoint.URI_CONTEXT, result.getUri());
+    String uri = stripPrefix(AbstractConfiguration.URI_CONTEXT, result.getUri());
-    result = assertSuccessful(
-        restTemplate.getForEntity(RestfulEndpoint.URI_VERSION + opType.getEndpoint(),
-            ClusterManagementListOperationsResult.class).getBody());
+    result = assertSuccessful(restTemplate
+        .exchange(URI_VERSION + opType.getEndpoint(), HttpMethod.GET,
+            makeEntity(null), ClusterManagementListOperationsResult.class)
+        .getBody());
-  private String getEndpoint(CacheElement config) {
-    checkIsRestful(config);
-    String endpoint = ((RestfulEndpoint) config).getEndpoint();
+  private String getEndpoint(AbstractConfiguration config) {
+    String endpoint = config.getEndpoint();
-    return RestfulEndpoint.URI_VERSION + endpoint;
+    return URI_VERSION + endpoint;
-  private String getIdentityEndPoint(CacheElement config) {
-    checkIsRestful(config);
-    String uri = ((RestfulEndpoint) config).getIdentityEndPoint();
+  private String getIdentityEndPoint(AbstractConfiguration config) {
+    String uri = config.getIdentityEndPoint();
-    return RestfulEndpoint.URI_VERSION + uri;
-  }
-
-  private void checkIsRestful(CacheElement config) {
-    if (!(config instanceof RestfulEndpoint)) {
-      throw new IllegalArgumentException(
-          String.format("The config type %s does not have a RESTful endpoint defined",
-              config.getClass().getName()));
-    }
+    return URI_VERSION + uri;
-      return restTemplate.getForEntity(RestfulEndpoint.URI_VERSION + "/ping", String.class)
+      return restTemplate.getForEntity(URI_VERSION + "/ping", String.class)

MOV26 MOV26 INS26 INS26 MOV31 UPD40 UPD40 INS40 INS40 UPD40 UPD83 INS73 INS74 INS42 INS73 MOV73 MOV43 UPD42 MOV43 UPD42 INS8 INS74 INS42 INS43 INS43 UPD43 INS60 INS41 INS74 INS74 INS42 INS74 UPD74 UPD43 MOV25 UPD43 INS60 MOV25 INS41 INS43 INS76 INS42 INS42 UPD42 INS43 INS59 INS14 INS43 INS76 INS43 INS76 INS43 MOV43 UPD43 UPD42 UPD42 MOV43 INS59 INS27 UPD42 MOV42 INS42 INS42 INS14 UPD42 UPD42 INS42 INS45 INS74 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS43 INS43 UPD40 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 INS40 INS32 INS42 UPD42 MOV42 INS32 INS42 INS40 INS32 INS42 INS40 INS32 INS42 MOV42 INS42 MOV33 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS40 INS32 INS42 INS40 INS32 INS42 UPD42 MOV42 MOV42 INS42 UPD42 MOV42 INS33 INS42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL40 DEL42 DEL27 DEL41 DEL43 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL73 DEL40 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL11 DEL36 DEL40 DEL39 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL42 DEL43 DEL42 DEL42 DEL45 DEL32 DEL42 DEL32 DEL32 DEL14 DEL53 DEL8 DEL25 DEL8 DEL40