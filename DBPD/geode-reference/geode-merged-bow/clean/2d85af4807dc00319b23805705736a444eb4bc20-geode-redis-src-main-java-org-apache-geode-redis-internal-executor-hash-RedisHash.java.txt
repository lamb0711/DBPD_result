GEODE-8166: reimplement redis expiration to use new data model (#5174)

* Added timestamp field to RedisData and implemented serialization and delta for it.
Both active and passive expiration have been implemented.

* RedisHash, RedisSet, and RedisString now subclass AbstractRedisData
* type command now uses function
* getset, incr, decr, incrby, and decrby now uses function and is atomic

+import static org.apache.geode.redis.internal.RedisConstants.ERROR_NOT_INTEGER;
+import static org.apache.geode.redis.internal.RedisConstants.ERROR_OVERFLOW;
+
-import org.apache.geode.InvalidDeltaException;
+import org.apache.geode.redis.internal.AbstractRedisData;
+import org.apache.geode.redis.internal.AddsDeltaInfo;
+import org.apache.geode.redis.internal.DeltaInfo;
+import org.apache.geode.redis.internal.RemsDeltaInfo;
-public class RedisHash implements RedisData {
+public class RedisHash extends AbstractRedisData {
-  /**
-   * When deltas are adds it will always contain an even number of field/value pairs.
-   * When deltas are removes it will just contain field names.
-   */
-  private transient ArrayList<ByteArrayWrapper> deltas;
-  // true if deltas contains adds; false if removes
-  private transient boolean deltasAreAdds;
-
+    super.toData(out);
+    super.fromData(in);
-  @Override
-  public boolean hasDelta() {
-    return deltas != null;
-  }
-  public void toDelta(DataOutput out) throws IOException {
-    DataSerializer.writeBoolean(deltasAreAdds, out);
-    DataSerializer.writeArrayList(deltas, out);
-  }
-
-  @Override
-  public void fromDelta(DataInput in) throws IOException, InvalidDeltaException {
-    boolean deltaAdds = DataSerializer.readBoolean(in);
-    try {
-      ArrayList<ByteArrayWrapper> deltas = DataSerializer.readArrayList(in);
-      if (deltas != null) {
-        Iterator<ByteArrayWrapper> iterator = deltas.iterator();
-        while (iterator.hasNext()) {
-          ByteArrayWrapper field = iterator.next();
-          if (deltaAdds) {
-            ByteArrayWrapper value = iterator.next();
-            hash.put(field, value);
-          } else {
-            hash.remove(field);
-          }
-        }
+  protected void applyDelta(DeltaInfo deltaInfo) {
+    if (deltaInfo instanceof AddsDeltaInfo) {
+      AddsDeltaInfo addsDeltaInfo = (AddsDeltaInfo) deltaInfo;
+      Iterator<ByteArrayWrapper> iterator = addsDeltaInfo.getAdds().iterator();
+      while (iterator.hasNext()) {
+        ByteArrayWrapper field = iterator.next();
+        ByteArrayWrapper value = iterator.next();
+        hash.put(field, value);
-    } catch (ClassNotFoundException e) {
-      throw new RuntimeException(e);
+    } else {
+      RemsDeltaInfo remsDeltaInfo = (RemsDeltaInfo) deltaInfo;
+      for (ByteArrayWrapper field : remsDeltaInfo.getRemoves()) {
+        hash.remove(field);
+      }
+    AddsDeltaInfo deltaInfo = null;
-        if (deltas == null) {
-          deltas = new ArrayList<>();
+        if (deltaInfo == null) {
+          deltaInfo = new AddsDeltaInfo();
-        deltas.add(field);
-        deltas.add(value);
+        deltaInfo.add(field);
+        deltaInfo.add(value);
-    storeChanges(region, key, true);
+    storeChanges(region, key, deltaInfo);
+    RemsDeltaInfo deltaInfo = null;
-        if (deltas == null) {
-          deltas = new ArrayList<>();
+        if (deltaInfo == null) {
+          deltaInfo = new RemsDeltaInfo();
-        deltas.add(fieldToRemove);
+        deltaInfo.add(fieldToRemove);
-    storeChanges(region, key, false);
+    storeChanges(region, key, deltaInfo);
-      deltas = new ArrayList<>(2);
-      deltas.add(field);
-      deltas.add(newValue);
-      storeChanges(region, key, true);
+      AddsDeltaInfo deltaInfo = new AddsDeltaInfo();
+      deltaInfo.add(field);
+      deltaInfo.add(newValue);
+      storeChanges(region, key, deltaInfo);
-    long value = Long.parseLong(oldValue.toString());
+    long value;
+    try {
+      value = Long.parseLong(oldValue.toString());
+    } catch (NumberFormatException ex) {
+      throw new NumberFormatException(ERROR_NOT_INTEGER);
+    }
-      throw new ArithmeticException("overflow");
+      throw new ArithmeticException(ERROR_OVERFLOW);
-    deltas = new ArrayList<>(2);
-    deltas.add(field);
-    deltas.add(modifiedValue);
-    storeChanges(region, key, true);
+    AddsDeltaInfo deltaInfo = new AddsDeltaInfo();
+    deltaInfo.add(field);
+    deltaInfo.add(modifiedValue);
+    storeChanges(region, key, deltaInfo);
-      deltas = new ArrayList<>(2);
-      deltas.add(field);
-      deltas.add(newValue);
-      storeChanges(region, key, true);
+      AddsDeltaInfo deltaInfo = new AddsDeltaInfo();
+      deltaInfo.add(field);
+      deltaInfo.add(newValue);
+      storeChanges(region, key, deltaInfo);
-      throw new NumberFormatException("could not convert " + valueS + " to a double");
+      throw new NumberFormatException("hash value is not a float");
-    double value = Coder.stringToDouble(valueS);
+    double value;
+    try {
+      value = Coder.stringToDouble(valueS);
+    } catch (NumberFormatException ex) {
+      throw new NumberFormatException("hash value is not a float");
+    }
-    deltas = new ArrayList<>(2);
-    deltas.add(field);
-    deltas.add(modifiedValue);
-    storeChanges(region, key, true);
+    AddsDeltaInfo deltaInfo = new AddsDeltaInfo();
+    deltaInfo.add(field);
+    deltaInfo.add(modifiedValue);
+    storeChanges(region, key, deltaInfo);
-  private void storeChanges(Region<ByteArrayWrapper, RedisData> region, ByteArrayWrapper key,
-      boolean doingAdds) {
-    if (hasDelta()) {
-      if (!doingAdds && hash.isEmpty()) {
-        region.remove(key);
-      } else {
-        deltasAreAdds = doingAdds;
-        try {
-          region.put(key, this);
-        } finally {
-          deltas = null;
-        }
-      }
-    }
-  }
-
+
+  @Override
+  protected boolean removeFromRegion() {
+    return hash.isEmpty();
+  }

MOV26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 UPD40 INS40 UPD43 UPD42 UPD83 UPD42 MOV8 MOV78 UPD83 UPD42 INS21 INS21 UPD43 UPD42 INS25 INS60 INS60 INS54 INS60 INS54 INS60 INS48 INS48 UPD42 INS62 MOV8 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS43 INS59 INS8 INS12 INS43 INS59 MOV32 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS60 INS61 MOV60 INS70 INS42 INS42 INS33 INS42 INS42 INS42 INS33 INS42 INS60 INS21 INS44 INS8 INS42 INS42 INS14 UPD42 UPD42 INS42 INS60 INS21 INS44 INS8 INS42 INS42 INS14 UPD42 UPD42 INS42 INS42 INS43 INS59 MOV74 INS59 MOV32 MOV8 INS43 INS44 INS32 MOV8 INS43 INS59 INS7 INS43 INS42 INS53 INS43 INS43 INS59 INS7 INS43 INS42 INS53 INS43 INS42 INS42 INS11 INS42 INS32 MOV60 INS42 UPD42 INS11 INS43 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 UPD42 INS42 INS42 MOV32 INS42 INS14 INS42 UPD42 MOV42 INS42 INS42 INS14 UPD42 UPD42 INS42 INS43 INS45 INS42 MOV32 INS42 INS14 UPD42 MOV42 INS43 INS42 INS32 INS42 INS43 INS42 INS42 INS43 INS43 INS42 INS43 INS42 MOV43 INS45 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 INS43 INS43 UPD42 MOV42 UPD42 MOV42 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL25 DEL42 DEL42 DEL32 DEL61 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL43 DEL74 DEL9 DEL43 DEL74 DEL9 DEL42 DEL43 DEL74 DEL34 DEL14 DEL7 DEL21 DEL9 DEL45 DEL42 DEL43 DEL74 DEL34 DEL14 DEL7 DEL21 DEL9 DEL42 DEL43 DEL74 DEL34 DEL14 DEL7 DEL21 DEL9 DEL45 DEL42 DEL45 DEL27 DEL42 DEL43 DEL74 DEL34 DEL14 DEL7 DEL21 DEL9 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL32 DEL42 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL42 DEL78 DEL42 DEL33 DEL27