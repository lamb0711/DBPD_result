Revert GEODE-2644 because offline diskstore commands generate info level logs

GFSH forks the offline diskstore commands in a JVM using log4j2-cli.xml
which sets the log level to WARN. However, the forked JVM creates a
Cache which then starts generating info level statements to STDOUT.

Revert "GEODE-2644: Remove log level from MonitorQueryUnderContentionBenchmark"
This reverts commit 6691d310e1263966991e584f712156d919dabecf.

Revert "GEODE-2644: Update session state caching dependencies for logging"
This reverts commit 688f58a4a75cc1297faa1dda201b971346c3a9fe.

Revert "GEODE-5637: Fix flaky SingleHopClientExecutorWithLoggingIntegrationTest"
This reverts commit 0a8f3dffa1ebaa618fafecc15bbc92ba8ba83696.

Revert "GEODE-2644: Make LogWriterAppender optional and support log4j2.xml"
This reverts commit 591f3f7840ce38c6100bff2040f396ad2469175e.

Revert "GEODE-2644: Expand DistributedSystemMXBean tests"
This reverts commit cd2bba13e2fb7e79f7634053a6c612050b328e11.

Revert "GEODE-2644: Make AlertAppender optional and support log4j2.xml"
This reverts commit 02c3cae1d38098259ff6aa4635c6e74f795bdc50.

Revert "GEODE-2644: Add LogConfig and StatisticsConfig for logging"
This reverts commit a77c94b349b3ed7fc873fc29f6852f9936843790.

Revert "GEODE-2644: Add AlertingTest JUnit Category"
This reverts commit 731cd2a7d35b086d34f8bbcb94a83c40739ae8ee.

Revert "GEODE-2644: Add LogFileAssert and LogLevelAssert assertions"
This reverts commit 5e61da5301469cdbd71ac186573f56c38e9a6cf0.

Revert "GEODE-2644: Cleanup logging related files"
This reverts commit 763e4177f201eff9b140654e6858152a1a184b8c.

Revert "GEODE-2644: Define interfaces for new Log4j2 Appenders"
This reverts commit efd8a14027195b6dae1dd3e4d53a33696ed318bb.

+import java.util.Comparator;
+import java.util.Iterator;
-import org.apache.geode.LogWriter;
- * This program sorts the entries in a GemFire log file (one written using a {@link LogWriter}) by
- * their timestamps. Note that in order to do so, we have to read the entire file into memory.
+ * This program sorts the entries in a GemFire log file (one written using a
+ * {@link org.apache.geode.LogWriter}) by their timestamps. Note that in order to do so, we
+ * have to read the entire file into memory.
+ *
-
-  private static final PrintStream out = System.out;
-  private static final PrintStream err = System.err;
+  private static PrintStream out = System.out;
+  private static PrintStream err = System.err;
-    SortedSet<LogFileParser.LogEntry> sorted = new TreeSet<>((entry1, entry2) -> {
-      String stamp1 = entry1.getTimestamp();
-      String stamp2 = entry2.getTimestamp();
+    SortedSet sorted = new TreeSet(new Comparator() {
+      public int compare(Object o1, Object o2) {
+        LogFileParser.LogEntry entry1 = (LogFileParser.LogEntry) o1;
+        LogFileParser.LogEntry entry2 = (LogFileParser.LogEntry) o2;
+        String stamp1 = entry1.getTimestamp();
+        String stamp2 = entry2.getTimestamp();
-      if (stamp1.equals(stamp2)) {
-        if (entry1.getContents().equals(entry2.getContents())) {
-          // Timestamps and contents are both equal - compare hashCode()
-          return Integer.valueOf(entry1.hashCode()).compareTo(entry2.hashCode());
+        if (stamp1.equals(stamp2)) {
+          if (entry1.getContents().equals(entry2.getContents())) {
+            // Timestamps and contents are both equal - compare hashCode()
+            return Integer.valueOf(entry1.hashCode()).compareTo(Integer.valueOf(entry2.hashCode()));
+          } else {
+            return entry1.getContents().compareTo(entry2.getContents());
+          }
-          return entry1.getContents().compareTo(entry2.getContents());
+          return stamp1.compareTo(stamp2);
-      } else {
-        return stamp1.compareTo(stamp2);
-    for (LogFileParser.LogEntry entry : sorted) {
+    for (Iterator iter = sorted.iterator(); iter.hasNext();) {
+      LogFileParser.LogEntry entry = (LogFileParser.LogEntry) iter.next();
+  //////////////////// Main Program ////////////////////
+
-    err.println("Usage: java SortLogFile logFile");
-    err.println("-sortedFile file " + "File in which to put sorted log");
-    err.println();
+    err.println(
+        "Usage: java SortLogFile logFile");
+    err.println("-sortedFile file "
+        + "File in which to put sorted log");
+    err.println("");
-    err.println();
+    err.println("");
-  public static void main(String... args) throws IOException {
+  public static void main(String[] args) throws IOException {
+    // int dirCount = 0;
+

MOV26 INS26 INS40 UPD40 UPD66 UPD66 UPD66 INS24 INS5 INS40 MOV43 INS58 INS32 MOV8 MOV43 INS85 INS43 INS59 INS42 INS42 INS60 INS45 INS45 MOV43 INS14 INS42 INS42 INS32 MOV43 INS59 INS43 INS1 INS42 INS42 INS42 INS11 INS42 INS31 INS43 INS32 INS83 INS39 INS42 INS44 INS44 MOV8 INS40 INS42 INS42 INS43 INS42 INS43 INS42 INS60 INS60 INS42 INS42 MOV43 INS59 INS43 INS59 INS42 INS11 INS40 INS42 INS11 INS43 INS42 INS43 INS42 INS40 INS40 INS32 INS42 INS42 MOV32 DEL42 DEL83 DEL83 DEL74 DEL74 DEL42 DEL59 DEL42 DEL59 DEL86 DEL42 DEL44 DEL42 DEL70