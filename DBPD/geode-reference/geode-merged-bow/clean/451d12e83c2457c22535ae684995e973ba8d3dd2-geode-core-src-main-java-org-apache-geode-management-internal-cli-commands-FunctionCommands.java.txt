GEODE-2919: Provide finer grained security

 - For full details, see https://cwiki.apache.org/confluence/display/GEODE/Finer+grained+security

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+import java.util.stream.Stream;
+
+import org.apache.commons.lang.BooleanUtils;
+import org.springframework.shell.core.annotation.CliCommand;
+import org.springframework.shell.core.annotation.CliOption;
+
-import org.apache.geode.management.internal.cli.result.CommandResultException;
-import org.springframework.shell.core.annotation.CliAvailabilityIndicator;
-import org.springframework.shell.core.annotation.CliCommand;
-import org.springframework.shell.core.annotation.CliOption;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
+import org.apache.geode.security.ResourcePermission.Target;
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      @CliOption(key = CliStrings.MEMBER,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          optionContext = ConverterHint.MEMBERIDNAME,
+      @CliOption(key = CliStrings.MEMBER, optionContext = ConverterHint.MEMBERIDNAME,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-    Set<String> filters = new HashSet<String>();
-    Execution execution = null;
+    Set<String> filters = new HashSet<>();
+    Execution execution;
-      if (onRegion != null && onMember != null && onGroups != null) {
-        ErrorResultData errorResultData =
-            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-        result = ResultBuilder.buildResult(errorResultData);
-        return result;
-      } else if (onRegion != null && onMember != null) {
-        ErrorResultData errorResultData =
-            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-        result = ResultBuilder.buildResult(errorResultData);
-        return result;
-      } else if (onMember != null && onGroups != null) {
-        ErrorResultData errorResultData =
-            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-        result = ResultBuilder.buildResult(errorResultData);
-        return result;
-      } else if (onRegion != null && onGroups != null) {
-        ErrorResultData errorResultData =
-            ResultBuilder.createErrorResultData().setErrorCode(ResultBuilder.ERRORCODE_DEFAULT)
-                .addLine(CliStrings.EXECUTE_FUNCTION__MSG__OPTIONS);
-        result = ResultBuilder.buildResult(errorResultData);
-        return result;
-      } else if (onRegion != null && onMember != null && onGroups != null) {
+      if (isMoreThanOneIsTrue(onRegion != null, onMember != null, onGroups != null)) {
+        // Provide Only one of region/member/groups
-            while (it.hasNext() && matchFound == false) {
+            while (it.hasNext() && !matchFound) {
-          if (matchFound == true) {
+          if (matchFound) {
-        Set<DistributedMember> dsMembers = new HashSet<DistributedMember>();
+        Set<DistributedMember> dsMembers = new HashSet<>();
-    } catch (InstantiationException e) {
-      ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-      result = ResultBuilder.buildResult(errorResultData);
-      return result;
-    } catch (IllegalAccessException e) {
-      ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-      result = ResultBuilder.buildResult(errorResultData);
-      return result;
-    } catch (IllegalArgumentException e) {
-      ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-      result = ResultBuilder.buildResult(errorResultData);
-      return result;
-    } catch (SecurityException e) {
-      ErrorResultData errorResultData = ResultBuilder.createErrorResultData()
-          .setErrorCode(ResultBuilder.ERRORCODE_DEFAULT).addLine(e.getMessage());
-      result = ResultBuilder.buildResult(errorResultData);
-      return result;
+  private boolean isMoreThanOneIsTrue(Boolean... values) {
+    return Stream.of(values).mapToInt(BooleanUtils::toInteger).sum() > 1;
+  }
+
-    StringBuilder resultMessege = new StringBuilder();
+    StringBuilder resultMessage = new StringBuilder();
-        args[3] = new String();
+        args[3] = "";
-                resultMessege.append(((String) resultObj));
+                resultMessage.append(((String) resultObj));
-                resultMessege.append(((Exception) resultObj).getMessage());
+                resultMessage.append(((Exception) resultObj).getMessage());
-                resultMessege.append(resultObj);
+                resultMessage.append(resultObj);
-        toTabularResultData(resultTable, member.getId(), resultMessege.toString());
+        toTabularResultData(resultTable, member.getId(), resultMessage.toString());
-    } catch (FunctionException e) {
-      resultMessege.append(CliStrings.format(
-          CliStrings.EXECUTE_FUNCTION__MSG__COULD_NOT_EXECUTE_FUNCTION_0_ON_MEMBER_1_ERROR_2,
-          functionId, member.getId(), e.getMessage()));
-      toTabularResultData(resultTable, member.getId(), resultMessege.toString());
-      resultMessege.append(CliStrings.format(
+      resultMessage.append(CliStrings.format(
-      toTabularResultData(resultTable, member.getId(), resultMessege.toString());
+      toTabularResultData(resultTable, member.getId(), resultMessage.toString());
-  @ResourceOperation(resource = Resource.DATA, operation = Operation.MANAGE)
+  @ResourceOperation(resource = Resource.CLUSTER, operation = Operation.MANAGE, target = Target.JAR)
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      @CliOption(key = CliStrings.MEMBER,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          optionContext = ConverterHint.MEMBERIDNAME,
+      @CliOption(key = CliStrings.MEMBER, optionContext = ConverterHint.MEMBERIDNAME,
-    Result result = null;
+    Result result;
-      Set<DistributedMember> dsMembers = new HashSet<DistributedMember>();
+      Set<DistributedMember> dsMembers = new HashSet<>();
-    List resultList = null;
+    List resultList;
-          for (int i = 0; i < strings.length; i++) {
+          for (String string : strings) {
-            tabularData.accumulate("Function", strings[i]);
+            tabularData.accumulate("Function", string);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS40 UPD40 UPD40 INS31 INS83 INS39 INS42 INS44 INS8 INS43 INS42 INS41 INS80 INS42 INS27 UPD40 INS42 INS40 MOV25 INS32 INS34 UPD42 UPD74 INS32 INS32 INS42 UPD43 MOV42 INS42 MOV27 MOV27 MOV27 INS32 INS42 INS90 MOV42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV32 UPD74 INS45 MOV32 UPD42 UPD42 INS70 INS42 INS44 INS42 MOV8 UPD74 MOV43 INS42 INS38 INS42 INS42 UPD42 UPD42 UPD42 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL43 DEL33 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL33 DEL27 DEL27 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL25 DEL25 DEL25 DEL25 DEL42 DEL9 DEL27 DEL42 DEL9 DEL27 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL41 DEL8 DEL12 DEL14 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL12 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL33 DEL42 DEL43 DEL33 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24