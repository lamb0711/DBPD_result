Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * An efficient sizer for some commonly used
- * classes.
+ * An efficient sizer for some commonly used classes.
- * This will return 0 if it does not know
- * how to size the object
+ * This will return 0 if it does not know how to size the object
-  
+
-  
+
-      STRING_OVERHEAD = (int) (ReflectionSingleObjectSizer.sizeof(String.class) + objSizer.sizeof(new char[0], false));
+      STRING_OVERHEAD = (int) (ReflectionSingleObjectSizer.sizeof(String.class)
+          + objSizer.sizeof(new char[0], false));
-    
-    if(o instanceof byte[]) {
-      size =  BYTE_ARRAY_OVERHEAD + ((byte[]) o).length;
-    }
-    else if(o instanceof String) {
-      size = STRING_OVERHEAD + ((String) o).length() * 2; 
+
+    if (o instanceof byte[]) {
+      size = BYTE_ARRAY_OVERHEAD + ((byte[]) o).length;
+    } else if (o instanceof String) {
+      size = STRING_OVERHEAD + ((String) o).length() * 2;
-    
+

UPD66 UPD66 DEL66 DEL66