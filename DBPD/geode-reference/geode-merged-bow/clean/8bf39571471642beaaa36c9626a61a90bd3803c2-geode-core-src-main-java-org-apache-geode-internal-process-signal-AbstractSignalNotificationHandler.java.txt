Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-    final String[] SIGNAL_NAMES_ARRAY = new String[] {
-      "", "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT", "EMT", "FPE", "KILL", "BUS", "SEGV", "SYS", "PIPE", "ALRM",
-      "TERM", "URG", "STOP", "TSTP", "CONT", "CHLD", "TTIN", "TTOU", "IO", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH",
-      "INFO", "USR1", "USR2"
-    };
+    final String[] SIGNAL_NAMES_ARRAY =
+        new String[] {"", "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT", "EMT", "FPE", "KILL", "BUS",
+            "SEGV", "SYS", "PIPE", "ALRM", "TERM", "URG", "STOP", "TSTP", "CONT", "CHLD", "TTIN",
+            "TTOU", "IO", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH", "INFO", "USR1", "USR2"};
-      System.out.printf("Logging SignalListener Received Signal '%1$s' (%2$d)%n", event.getSignal().getName(),
-        event.getSignal().getNumber());
+      System.out.printf("Logging SignalListener Received Signal '%1$s' (%2$d)%n",
+          event.getSignal().getName(), event.getSignal().getNumber());
-  private final Map<Signal, Set<SignalListener>> signalListeners = Collections.synchronizedMap(
-    new HashMap<Signal, Set<SignalListener>>(Signal.values().length));
+  private final Map<Signal, Set<SignalListener>> signalListeners =
+      Collections.synchronizedMap(new HashMap<Signal, Set<SignalListener>>(Signal.values().length));
-  protected static void assertNotNull(final Object obj, final String message, final Object... arguments) {
+  protected static void assertNotNull(final Object obj, final String message,
+      final Object... arguments) {
-  protected static void assertState(final boolean state, final String message, final Object... arguments) {
+  protected static void assertState(final boolean state, final String message,
+      final Object... arguments) {
-  protected static void assertValidArgument(final boolean valid, final String message, final Object... arguments) {
+  protected static void assertValidArgument(final boolean valid, final String message,
+      final Object... arguments) {
-    //registerListener(LOGGING_SIGNAL_LISTENER);
+    // registerListener(LOGGING_SIGNAL_LISTENER);
-    assertNotNull(signal, "The signal to determine whether the listener is registered listening for cannot be null!");
+    assertNotNull(signal,
+        "The signal to determine whether the listener is registered listening for cannot be null!");
-    assertNotNull(listener, "The SignalListener to register, listening for all signals cannot be null!");
+    assertNotNull(listener,
+        "The SignalListener to register, listening for all signals cannot be null!");
-    assertNotNull(listener, "The SignalListener being registered to listen for '%1$s' signals cannot be null!",
-      signal.getName());
+    assertNotNull(listener,
+        "The SignalListener being registered to listen for '%1$s' signals cannot be null!",
+        signal.getName());

