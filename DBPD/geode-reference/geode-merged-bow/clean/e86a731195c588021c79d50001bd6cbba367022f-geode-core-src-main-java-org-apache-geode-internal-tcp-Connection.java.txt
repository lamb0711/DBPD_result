Merge branch 'release/1.3.0'

-  protected static Connection createReceiver(ConnectionTable t, Socket s)
+  protected static Connection createReceiver(ConnectionTable table, Socket socket)
-    Connection c = new Connection(t, s);
+    Connection connection = new Connection(table, socket);
-      c.startReader(t);
+      connection.startReader(table);
-        c.closeForReconnect(
+        connection.closeForReconnect(
-    c.waitForHandshake();
-    c.finishedConnecting = true;
-    return c;
+    connection.waitForHandshake();
+    connection.finishedConnecting = true;
+    return connection;
+  protected void initReceiver() {
+    this.startReader(owner);
+    this.waitForHandshake();
+    this.finishedConnecting = true;
+  }
+
-      this.owner.getConduit().stats.incLostLease();
+      this.owner.getConduit().getStats().incLostLease();
-          t.getConduit().stats.incReconnectAttempts();
+          t.getConduit().getStats().incReconnectAttempts();
-            t.getConduit().stats.incFailedConnect();
+            t.getConduit().getStats().incFailedConnect();
+  public void cleanUpOnIdleTaskCancel() {
+    // Make sure receivers are removed from the connection table, this should always be a noop, but
+    // is done here as a failsafe.
+    if (isReceiver) {
+      owner.removeReceiver(this);
+    }
+  }
+
-      this.stats = owner.getConduit().stats;
+      this.stats = owner.getConduit().getStats();
-        owner.getConduit().stats.incBatchWaitTime(start);
+        owner.getConduit().getStats().incBatchWaitTime(start);
-            this.owner.getConduit().stats.incBatchCopyTime(copyStart);
+            this.owner.getConduit().getStats().incBatchCopyTime(copyStart);
-      this.owner.getConduit().stats.incBatchSendTime(start);
+      this.owner.getConduit().getStats().incBatchSendTime(start);
-            final DMStats stats = this.owner.getConduit().stats;
+            final DMStats stats = this.owner.getConduit().getStats();
-          this.conduit.stats.incThreadOwnedReceivers(-1L, dominoCount.get());
+          this.conduit.getStats().incThreadOwnedReceivers(-1L, dominoCount.get());
-        final DMStats stats = this.owner.getConduit().stats;
+        final DMStats stats = this.owner.getConduit().getStats();
-          result = new MsgDestreamer(this.owner.getConduit().stats,
+          result = new MsgDestreamer(this.owner.getConduit().getStats(),
-    byte[] lenbytes = new byte[MSG_HEADER_BYTES];
+    byte[] headerBytes = new byte[MSG_HEADER_BYTES];
-        if (readFully(input, lenbytes, lenbytes.length) < 0) {
+        if (readFully(input, headerBytes, headerBytes.length) < 0) {
-        len = ((lenbytes[MSG_HEADER_SIZE_OFFSET] & 0xff) * 0x1000000)
-            + ((lenbytes[MSG_HEADER_SIZE_OFFSET + 1] & 0xff) * 0x10000)
-            + ((lenbytes[MSG_HEADER_SIZE_OFFSET + 2] & 0xff) * 0x100)
-            + (lenbytes[MSG_HEADER_SIZE_OFFSET + 3] & 0xff);
+        len = ((headerBytes[MSG_HEADER_SIZE_OFFSET] & 0xff) * 0x1000000)
+            + ((headerBytes[MSG_HEADER_SIZE_OFFSET + 1] & 0xff) * 0x10000)
+            + ((headerBytes[MSG_HEADER_SIZE_OFFSET + 2] & 0xff) * 0x100)
+            + (headerBytes[MSG_HEADER_SIZE_OFFSET + 3] & 0xff);
-        int msgType = lenbytes[MSG_HEADER_TYPE_OFFSET];
-        short msgId = (short) (((lenbytes[MSG_HEADER_ID_OFFSET] & 0xff) << 8)
-            + (lenbytes[MSG_HEADER_ID_OFFSET + 1] & 0xff));
+        int msgType = headerBytes[MSG_HEADER_TYPE_OFFSET];
+        short msgId = (short) (((headerBytes[MSG_HEADER_ID_OFFSET] & 0xff) << 8)
+            + (headerBytes[MSG_HEADER_ID_OFFSET + 1] & 0xff));
-              this.owner.getConduit().stats.incMessagesBeingReceived(true, len);
+              this.owner.getConduit().getStats().incMessagesBeingReceived(true, len);
-                long startSer = this.owner.getConduit().stats.startMsgDeserialization();
+                long startSer = this.owner.getConduit().getStats().startMsgDeserialization();
-                this.owner.getConduit().stats.endMsgDeserialization(startSer);
+                this.owner.getConduit().getStats().endMsgDeserialization(startSer);
-              this.owner.getConduit().stats.incMessagesBeingReceived(md.size() == 0, len);
+              this.owner.getConduit().getStats().incMessagesBeingReceived(md.size() == 0, len);
-              this.owner.getConduit().stats.incMessagesBeingReceived(md.size() == 0, len);
+              this.owner.getConduit().getStats().incMessagesBeingReceived(md.size() == 0, len);
-                this.owner.getConduit().stats.decMessagesBeingReceived(md.size());
+                this.owner.getConduit().getStats().decMessagesBeingReceived(md.size());
-                this.owner.getConduit().stats.decMessagesBeingReceived(md.size());
+                this.owner.getConduit().getStats().decMessagesBeingReceived(md.size());
-                this.owner.getConduit().stats.decMessagesBeingReceived(md.size());
+                this.owner.getConduit().getStats().decMessagesBeingReceived(md.size());
-                this.conduit.stats.incThreadOwnedReceivers(1L, dominoNumber);
+                this.conduit.getStats().incThreadOwnedReceivers(1L, dominoNumber);
-    final DMStats stats = this.owner.getConduit().stats;
+    final DMStats stats = this.owner.getConduit().getStats();
-    final DMStats stats = this.owner.getConduit().stats;
+    final DMStats stats = this.owner.getConduit().getStats();
-      final DMStats stats = this.owner.getConduit().stats;
+      final DMStats stats = this.owner.getConduit().getStats();
-    final DMStats stats = this.owner.getConduit().stats;
+    final DMStats stats = this.owner.getConduit().getStats();
-    final DMStats stats = this.owner.getConduit().stats;
+    final DMStats stats = this.owner.getConduit().getStats();
-    DMStats stats = owner.getConduit().stats;
+    DMStats stats = owner.getConduit().getStats();
-              this.owner.getConduit().stats.incMessagesBeingReceived(true, nioMessageLength);
+              this.owner.getConduit().getStats().incMessagesBeingReceived(true, nioMessageLength);
-                long startSer = this.owner.getConduit().stats.startMsgDeserialization();
+                long startSer = this.owner.getConduit().getStats().startMsgDeserialization();
-                this.owner.getConduit().stats.endMsgDeserialization(startSer);
+                this.owner.getConduit().getStats().endMsgDeserialization(startSer);
-              this.owner.getConduit().stats.incMessagesBeingReceived(md.size() == 0,
+              this.owner.getConduit().getStats().incMessagesBeingReceived(md.size() == 0,
-              this.owner.getConduit().stats.incMessagesBeingReceived(md.size() == 0,
+              this.owner.getConduit().getStats().incMessagesBeingReceived(md.size() == 0,
-                this.owner.getConduit().stats.decMessagesBeingReceived(md.size());
+                this.owner.getConduit().getStats().decMessagesBeingReceived(md.size());
-                this.owner.getConduit().stats.decMessagesBeingReceived(md.size());
+                this.owner.getConduit().getStats().decMessagesBeingReceived(md.size());
-                this.owner.getConduit().stats.decMessagesBeingReceived(md.size());
+                this.owner.getConduit().getStats().decMessagesBeingReceived(md.size());
-                  this.conduit.stats.incThreadOwnedReceivers(1L, dominoNumber);
+                  this.conduit.getStats().incThreadOwnedReceivers(1L, dominoNumber);
-    final DMStats stats = this.owner.getConduit().stats;
+    final DMStats stats = this.owner.getConduit().getStats();
+  public boolean isReceiverStopped() {
+    return this.stopped;
+  }
+

INS31 INS31 INS31 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 UPD42 UPD42 INS21 INS21 INS21 INS25 INS41 UPD42 INS32 INS32 INS7 INS42 INS8 INS22 UPD42 UPD42 UPD40 INS52 INS42 INS42 INS52 INS42 INS22 INS9 INS21 MOV21 UPD42 INS32 INS32 INS32 INS32 INS32 INS32 INS52 INS42 UPD42 UPD42 INS52 INS42 INS32 INS32 INS32 INS32 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 UPD42 UPD42 MOV32 INS42 INS42 INS42 INS52 MOV32 INS42 INS32 MOV32 INS42 INS42 INS32 MOV32 INS42 MOV32 INS42 INS42 MOV32 INS42 MOV32 INS42 UPD42 MOV32 INS42 INS32 INS32 MOV32 INS42 UPD42 UPD40 UPD42 MOV32 INS42 INS21 INS32 MOV32 INS42 INS32 INS32 INS32 MOV22 INS42 INS32 MOV32 INS42 INS32 INS42 INS42 MOV32 INS42 MOV32 INS42 UPD42 INS21 INS21 MOV32 INS42 MOV32 INS42 INS32 INS32 UPD42 UPD42 UPD42 UPD42 MOV32 INS42 INS9 INS42 MOV21 INS32 MOV32 INS42 INS9 INS42 MOV21 INS32 MOV32 INS42 INS32 INS32 INS42 MOV27 INS42 MOV32 MOV27 INS32 MOV32 INS42 INS32 INS32 INS42 MOV27 INS42 MOV32 MOV27 UPD42 INS32 MOV32 INS42 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 INS34 INS42 INS32 MOV32 INS42 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 INS32 MOV22 INS42 MOV32 INS42 MOV32 INS42 INS32 INS32 MOV32 INS42 INS32 INS42 MOV32 MOV32 MOV32 INS32 MOV32 INS42 INS32 INS42 MOV32 MOV32 MOV32 INS32 MOV32 INS42 INS34 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV22 INS42 DEL42 DEL22 DEL42 DEL42 DEL22 DEL42 DEL42 DEL22 DEL42 DEL42 DEL22 DEL42 DEL22 DEL42 DEL42 DEL42 DEL22 DEL42 DEL42 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL42 DEL22 DEL42 DEL42 DEL42 DEL22 DEL42 DEL9 DEL42 DEL21 DEL42 DEL22 DEL42 DEL42 DEL22 DEL42 DEL22 DEL42 DEL42 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL34 DEL42 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL42 DEL22 DEL42 DEL42 DEL42 DEL22 DEL42 DEL9 DEL42 DEL21 DEL42 DEL22 DEL42 DEL42 DEL22 DEL42 DEL22 DEL42 DEL42 DEL42 DEL22 DEL42 DEL22 DEL42 DEL22 DEL42 DEL34 DEL42 DEL42 DEL22