Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-   * @return the query reply or null if there was no reply due to membership
-   * change
+   * @return the query reply or null if there was no reply due to membership change
-                                      final String serviceName, 
-                                      final Object objectName,
-                                      final boolean lockBatch,
-                                      final DM dm) {
-    DLockQueryProcessor processor = new DLockQueryProcessor(
-        dm, grantor, serviceName);
+      final String serviceName, final Object objectName, final boolean lockBatch, final DM dm) {
+    DLockQueryProcessor processor = new DLockQueryProcessor(dm, grantor, serviceName);
-    
+
-    }
-    else {
+    } else {
-    try { 
+    try {
-    }
-    catch (ReplyException e) {
+    } catch (ReplyException e) {
-    
+
-    }
-    else {
+    } else {
-  
+
-  private DLockQueryProcessor(DM dm,
-                              InternalDistributedMember grantor,
-                              String serviceName) {
+  private DLockQueryProcessor(DM dm, InternalDistributedMember grantor, String serviceName) {
-  
+
-  
+
-    }
-    finally {
+    } finally {
-  
+
-  //   DLockQueryMessage
+  // DLockQueryMessage
-  public static final class DLockQueryMessage 
-  extends PooledDistributionMessage
-  implements MessageWithReply {
+  public static final class DLockQueryMessage extends PooledDistributionMessage
+      implements MessageWithReply {
-  
+
-    
+
-    
+
-    
+
-    
-    public DLockQueryMessage() {
-    }
-  
+
+    public DLockQueryMessage() {}
+
-      
+
-        if (this.svc == null) { 
+        if (this.svc == null) {
-        }
-        else {
+        } else {
-      }
-      catch (RuntimeException e) {
+      } catch (RuntimeException e) {
-      }
-      catch (VirtualMachineError e) {
+      } catch (VirtualMachineError e) {
-      }
-      catch (Error e) {
+      } catch (Error e) {
-      }
-      finally {
+      } finally {
-          
+
-          }
-          else {
+          } else {
-    
+
-    /** 
-     * Execute basicProcess inside Pooled Executor because grantor may not 
-     * be initializing which will require us to wait.
+    /**
+     * Execute basicProcess inside Pooled Executor because grantor may not be initializing which
+     * will require us to wait.
-    
-    /** 
+
+    /**
-      
+
-        if (svc == null || svc.isDestroyed()) return;
-        
+        if (svc == null || svc.isDestroyed())
+          return;
+
-          }
-          catch (InterruptedException e) {
+          } catch (InterruptedException e) {
-        
+
-        
+
-        }
-        else {
+        } else {
-          }
-          catch (InterruptedException e) {
+          } catch (InterruptedException e) {
-        
+
-      }
-      catch (LockGrantorDestroyedException ignore) {
-      }
-      catch (LockServiceDestroyedException ignore) {
-      }
-      catch (RuntimeException e) {
+      } catch (LockGrantorDestroyedException ignore) {
+      } catch (LockServiceDestroyedException ignore) {
+      } catch (RuntimeException e) {
-      }
-      catch (VirtualMachineError err) {
+      } catch (VirtualMachineError err) {
-        // If this ever returns, rethrow the error.  We're poisoned
+        // If this ever returns, rethrow the error. We're poisoned
-      }
-      catch (Error e) {
+      } catch (Error e) {
-        // catch VirtualMachineError (see above).  However, there is
+        // catch VirtualMachineError (see above). However, there is
-      }
-      finally {
+      } finally {
-        }
-        else {
+        } else {
-    
+
-    
+
-  
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  
+
-      sb.append(Integer.toHexString(hashCode())); 
+      sb.append(Integer.toHexString(hashCode()));
-  
+
-  //   DLockQueryReplyMessage
+  // DLockQueryReplyMessage
-  public static final class DLockQueryReplyMessage
-  extends ReplyMessage {
-   
+  public static final class DLockQueryReplyMessage extends ReplyMessage {
+
-    
-    /** OK or NOT_GRANTOR for the service  */
+
+    /** OK or NOT_GRANTOR for the service */
-    
+
-    
+
-    
+
-    
-    public DLockQueryReplyMessage() {
-    }
-    
+
+    public DLockQueryReplyMessage() {}
+
-     * Returns true if the queried grantor replied with the current lease info
-     * for the named lock.
+     * Returns true if the queried grantor replied with the current lease info for the named lock.
-    
+
-    
+
-      }
-      else {
+      } else {
-    
+
-    
+
-    
+
-    
+
-    public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-        InternalDistributedMember lessee = 
-          (InternalDistributedMember) DataSerializer.readObject(in);
+        InternalDistributedMember lessee =
+            (InternalDistributedMember) DataSerializer.readObject(in);
-    
+
-        }
-        else {
+        } else {
-      sb.append(Integer.toHexString(hashCode())); 
+      sb.append(Integer.toHexString(hashCode()));
-        case NOT_GRANTOR: sb.append("NOT_GRANTOR"); break;
-        case OK:          sb.append("OK"); break;
-        default: sb.append(String.valueOf(this.replyCode)); break;
+        case NOT_GRANTOR:
+          sb.append("NOT_GRANTOR");
+          break;
+        case OK:
+          sb.append("OK");
+          break;
+        default:
+          sb.append(String.valueOf(this.replyCode));
+          break;

UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66