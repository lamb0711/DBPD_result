GEODE-4372: clean up RemoteOperationMessage classes (#1338)


* throw RemoteOperationException instead of ForceReattemptException when cache is closing. All ForceReattemptException throwing by RemoteOperationMessage has been removed.

* now uses SERIAL_EXECUTOR for all RemoteOperationMessages.
Previously most of these messages where processed in the partitioned message
thread pool even though most all of these messages where not partitioned.
It is possible that RemotePutAll and RemoteRemoveAll will have some trouble
being SERIAL_EXECUTOR.

* added comments for all RemoteOperationMessages describing what
they are used for

* Improved RemoteOperationMessageTest

* added a BucketTXRegionStub to calculate bucket region size on a stub.

* removed GemFireCacheImpl.getInstance call

* added RemoteOperationResponse unit test

* renamed handleAsUnexpected to handleCause

* renamed waitForCacheException to waitForRemoteResponse

* moved RemoteOperation classes to tx package


-import org.apache.geode.cache.TransactionDataNotColocatedException;
-import org.apache.geode.cache.TransactionException;
-import org.apache.geode.internal.cache.RemoteFetchVersionMessage.FetchVersionResponse;
-import org.apache.geode.internal.cache.partitioned.RemoteSizeMessage;
+import org.apache.geode.internal.cache.tx.RemoteClearMessage;
+import org.apache.geode.internal.cache.tx.RemoteDestroyMessage;
+import org.apache.geode.internal.cache.tx.RemoteFetchVersionMessage;
+import org.apache.geode.internal.cache.tx.RemoteFetchVersionMessage.FetchVersionResponse;
+import org.apache.geode.internal.cache.tx.RemoteInvalidateMessage;
+import org.apache.geode.internal.cache.tx.RemotePutMessage;
-  protected void checkForLimitedOrNoAccess() {
+  public void checkForLimitedOrNoAccess() {
-  protected void basicDestroy(EntryEventImpl event, boolean cacheWrite, Object expectedOldValue)
+  public void basicDestroy(EntryEventImpl event, boolean cacheWrite, Object expectedOldValue)
-  void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
+  public void basicInvalidate(EntryEventImpl event) throws EntryNotFoundException {
-          RemoteRegionOperation op = RemoteRegionOperation.clear(mbr, this);
+          RemoteClearMessage op = RemoteClearMessage.create(mbr, this);
-          } catch (CancelException e) {
-            this.stopper.checkCancelInProgress(e);
-            retry = true;
-          } catch (RemoteOperationException e) {
+          } catch (CancelException | RegionDestroyedException | RemoteOperationException e) {
-
-  /**
-   * Returns the size in this region.
-   *
-   * This is used in a transaction to find the size of the region on the transaction hosting node.
-   *
-   * @param target the host of the transaction TXState
-   * @return the number of entries in this region
-   */
-  public int getRegionSize(DistributedMember target) {
-    try {
-      RemoteSizeMessage.SizeResponse response =
-          RemoteSizeMessage.send(Collections.singleton(target), this);
-      return response.waitForSize();
-    } catch (RegionDestroyedException rde) {
-      throw new TransactionDataNotColocatedException(
-          LocalizedStrings.RemoteMessage_REGION_0_NOT_COLOCATED_WITH_TRANSACTION
-              .toLocalizedString(rde.getRegionFullPath()),
-          rde);
-    } catch (Exception e) {
-      throw new TransactionException(e);
-    }
-  }
-

MOV26 MOV26 MOV26 MOV26 INS26 INS26 UPD40 UPD40 INS40 UPD40 INS40 UPD40 UPD83 UPD83 INS83 UPD43 UPD42 UPD42 UPD42 INS84 MOV43 MOV43 MOV43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL40 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL52 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL44 DEL42 DEL43 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL31