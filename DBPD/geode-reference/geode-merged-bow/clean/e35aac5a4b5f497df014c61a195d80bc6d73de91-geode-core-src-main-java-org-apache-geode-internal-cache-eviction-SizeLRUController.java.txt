Merge branch 'release/1.5.0'

-import org.apache.geode.cache.Region;
+import org.apache.geode.cache.EvictionAlgorithm;
+import org.apache.geode.internal.cache.CachedDeserializableFactory;
+import org.apache.geode.internal.cache.Token;
+import org.apache.geode.internal.size.Sizeable;
-  private ObjectSizer sizer;
+  private int perEntryOverhead;
-  SizeLRUController(EvictionAction evictionAction, Region region, ObjectSizer sizer) {
-    super(evictionAction, region);
+  private final ObjectSizer sizer;
+
+  SizeLRUController(EvictionCounters evictionCounters, EvictionAction evictionAction,
+      ObjectSizer sizer, EvictionAlgorithm algorithm) {
+    super(evictionCounters, evictionAction, algorithm);
+  public int getPerEntryOverhead() {
+    return perEntryOverhead;
+  }
+
+  @Override
+  public void setPerEntryOverhead(int entryOverhead) {
+    this.perEntryOverhead = entryOverhead;
+  }
+
-   * bytes. This implementation is slow. Need to add Sizer interface and call it for customer
-   * objects.
+   * bytes.
-  int sizeof(Object object) throws IllegalArgumentException {
-    return MemoryLRUController.basicSizeof(object, this.sizer);
-  }
+  int sizeof(Object object) {
+    final boolean cdChangingForm = object instanceof CachedDeserializableValueWrapper;
+    if (cdChangingForm) {
+      object = ((CachedDeserializableValueWrapper) object).getValue();
+    }
+    if (object == null || object == Token.INVALID || object == Token.LOCAL_INVALID
+        || object == Token.DESTROYED || object == Token.TOMBSTONE) {
+      return 0;
+    }
-  /**
-   * Sets the {@link ObjectSizer} used to calculate the size of objects placed in the cache.
-   *
-   * @param sizer The name of the sizer class
-   */
-  void setSizer(ObjectSizer sizer) {
-    this.sizer = sizer;
+    int size;
+    // Shouldn't we defer to the user's object sizer for these things?
+    if (object instanceof byte[] || object instanceof String) {
+      size = ObjectSizer.DEFAULT.sizeof(object);
+    } else if (object instanceof Sizeable) {
+      size = ((Sizeable) object).getSizeInBytes();
+    } else if (this.sizer != null) {
+      size = this.sizer.sizeof(object);
+    } else {
+      size = ObjectSizer.DEFAULT.sizeof(object);
+    }
+    if (cdChangingForm) {
+      size += CachedDeserializableFactory.overhead();
+    }
+    return size;
-

INS26 INS26 INS26 UPD40 INS40 INS40 INS40 INS23 MOV44 INS31 INS31 INS31 INS83 INS39 INS59 INS83 INS44 INS83 INS39 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS8 MOV29 MOV39 MOV42 MOV44 INS8 INS42 UPD43 UPD42 INS43 INS42 INS41 INS42 INS39 INS42 INS21 INS60 INS25 INS25 INS60 INS25 INS25 INS41 UPD42 INS42 INS42 UPD42 INS42 INS7 UPD66 INS83 INS39 INS59 INS42 INS8 INS27 INS8 INS39 INS59 INS27 INS8 INS25 INS42 INS8 INS42 INS22 INS42 INS42 INS62 INS21 INS27 INS27 INS41 INS42 INS62 INS62 INS21 INS62 INS8 INS25 INS21 INS52 INS42 INS42 INS43 INS7 INS27 INS27 INS42 INS40 INS34 INS42 INS5 INS42 INS43 INS7 INS42 INS43 INS21 INS27 INS8 INS8 INS7 UPD42 MOV42 INS42 INS32 INS27 INS27 INS42 INS40 INS39 INS85 INS42 INS42 INS32 UPD42 MOV42 INS7 MOV22 INS33 MOV21 INS21 INS42 INS32 INS36 INS42 INS27 INS27 INS42 INS40 INS40 INS42 INS42 INS42 INS32 INS7 INS42 INS42 INS11 INS42 INS33 INS42 INS40 INS36 INS42 INS42 INS32 INS42 INS32 INS43 INS42 INS11 INS22 INS42 INS42 INS40 INS42 INS42 INS42 INS43 INS42 MOV52 MOV42 INS42 DEL66 DEL22 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL39 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31