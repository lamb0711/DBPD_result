GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)

* GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions

This PR builds on the work originally submitted by Greg Green in
https://github.com/apache/geode/pull/404. Also acknowledgements to Galen
O'Sullivan for addressing locking issues in that PR.

This commit changes the storage model of Redis hashes and sets from one
region per each Redis key to a single hash region and single set region.
The Redis key is now also the region key and the data is stored in a Map
and Set respectively in the region. Currently, the backing values do not
implement Delta changes, however this will be a future optimization.

This also fixes the inability of Redis keys to contain other characters
commonly used, such as colons (':').

- Add `RedisLockService` which manages a lock per key within a single
  JVM. Locks are held in a WeakHasMap to allow for automatic cleanup
  (prior PR work, using a pure ConcurrentHashMap, ended up leaking
  memory since there is no straight-forward way to clean up unused
  keys/locks).
- Add new tests including concurrency tests for hashes and sets

Co-authored-by: Greg Green <ggreen@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Prasath Durairaj <prasathd@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

+import java.util.Map;
-import org.apache.geode.cache.Region;
-import org.apache.geode.redis.internal.RedisDataType;
+/**
+ * Implementation of the HScan command used to incrementally iterate over a collection of elements.
+ */
-    @SuppressWarnings("unchecked")
-    Region<ByteArrayWrapper, ByteArrayWrapper> keyRegion =
-        (Region<ByteArrayWrapper, ByteArrayWrapper>) context.getRegionProvider().getRegion(key);
-    checkDataType(key, RedisDataType.REDIS_HASH, context);
-    if (keyRegion == null) {
-      command.setResponse(
-          Coder.getScanResponse(context.getByteBufAllocator(), new ArrayList<String>()));
+
+    Map<ByteArrayWrapper, ByteArrayWrapper> map =
+        context.getRegionProvider().getHashRegion().get(key);
+
+    if (map == null || map.isEmpty()) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_CURSOR));
-        getIteration(new HashSet(keyRegion.entrySet()), matchPattern, count, cursor);
+        getIteration(new HashSet<Object>(map.entrySet()), matchPattern, count, cursor);
-      } else
+      } else {
+      }
-    if (i == size - 1)
+    if (i == size - 1) {
-    else
+    } else {
+    }

MOV26 UPD40 INS29 INS65 INS66 UPD74 INS27 INS8 INS8 UPD43 UPD42 INS32 INS27 INS32 MOV21 MOV21 UPD42 MOV32 INS42 INS42 UPD42 MOV42 MOV33 INS42 INS42 UPD42 INS74 INS8 UPD42 INS42 MOV43 INS43 UPD42 INS10 INS42 DEL40 DEL26 DEL42 DEL45 DEL79 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL11 DEL42 DEL42 DEL40 DEL42 DEL32 DEL21 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL10