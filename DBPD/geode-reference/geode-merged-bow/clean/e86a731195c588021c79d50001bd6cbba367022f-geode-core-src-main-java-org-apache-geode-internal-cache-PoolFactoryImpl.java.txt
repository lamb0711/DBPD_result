Merge branch 'release/1.3.0'

+import org.apache.geode.distributed.internal.membership.gms.membership.HostAddress;
+  private List<HostAddress> locatorAddresses = new ArrayList<>();
+
+  public PoolFactory setSocketConnectTimeout(int socketConnectTimeout) {
+    if (socketConnectTimeout <= -1) {
+      throw new IllegalArgumentException("socketConnectTimeout must be greater than -1");
+    }
+    this.attributes.socketConnectTimeout = socketConnectTimeout;
+    return this;
+  }
+
-  private PoolFactory add(String host, int port, List l) {
+  private InetSocketAddress getInetSocketAddress(String host, int port) {
+    InetSocketAddress sockAddr = null;
-      InetSocketAddress sockAddr = new InetSocketAddress(hostAddr, port);
-      l.add(sockAddr);
+      sockAddr = new InetSocketAddress(hostAddr, port);
-      InetSocketAddress sockAddr = new InetSocketAddress(host, port);
-      l.add(sockAddr);
+      sockAddr = new InetSocketAddress(host, port);
-    return this;
+    return sockAddr;
-    return add(host, port, this.attributes.locators);
+    InetSocketAddress isa = getInetSocketAddress(host, port);
+    this.attributes.locators.add(isa);
+    locatorAddresses.add(new HostAddress(isa, host));
+    return this;
-    return add(host, port, this.attributes.servers);
+    this.attributes.servers.add(getInetSocketAddress(host, port));
+    return this;
+    setSocketConnectTimeout(cp.getSocketConnectTimeout());
-    this.attributes.locators.addAll(cp.getLocators());
+    for (InetSocketAddress inetSocketAddress : cp.getLocators()) {
+      addLocator(inetSocketAddress.getHostName(), inetSocketAddress.getPort());
+    }
-    return PoolImpl.create(this.pm, name, this.attributes);
+    return PoolImpl.create(this.pm, name, this.attributes, this.locatorAddresses);
+    public int socketConnectTimeout = DEFAULT_SOCKET_CONNECT_TIMEOUT;
+    public int getSocketConnectTimeout() {
+      return this.socketConnectTimeout;
+    }
+
+      DataSerializer.writePrimitiveInt(this.socketConnectTimeout, out);
+      this.socketConnectTimeout = DataSerializer.readPrimitiveInt(in);

INS26 INS40 INS23 INS31 INS83 INS74 INS59 INS83 MOV43 INS42 INS44 INS8 MOV43 UPD42 INS23 INS31 MOV43 INS43 INS42 INS14 INS39 INS42 INS25 INS21 INS41 INS60 INS41 INS60 INS21 INS21 INS41 INS21 MOV41 INS21 INS70 INS83 INS39 INS59 INS83 INS39 INS42 INS8 INS42 INS74 INS27 INS8 INS7 INS52 MOV43 INS59 INS42 INS43 INS59 INS32 INS32 INS52 MOV32 MOV42 INS32 INS44 MOV32 INS8 INS42 INS42 INS41 INS21 INS21 INS43 INS42 INS38 INS53 INS22 INS42 INS42 INS33 INS42 INS42 INS32 MOV22 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS43 INS42 MOV21 INS22 INS22 INS32 INS7 INS42 INS34 INS14 INS22 INS42 INS7 INS42 MOV42 MOV42 INS43 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS22 INS42 INS22 INS32 INS43 INS45 INS52 INS42 INS42 MOV14 INS7 MOV52 INS42 INS42 INS32 INS32 INS52 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 MOV14 INS42 UPD42 MOV42 INS42 INS42 DEL42 DEL44 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL41