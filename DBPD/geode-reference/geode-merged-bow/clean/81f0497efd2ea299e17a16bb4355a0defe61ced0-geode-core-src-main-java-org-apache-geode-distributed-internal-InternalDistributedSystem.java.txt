GEODE-6353: remove the ThreadLocal from SecurityConfig. (#3154)

* GEODE-6353: remove the ThreadLocal from SecurityConfig.

* Extract `DistributedSystem.connect()` to `InternalDistributedSystem.connectInternal()` so that parameters can be passed in.
* Make `DistributedSystem.existingSystems` a
`List<InternalDistributedSystem>.
* Add a comment making it clear that users should never override `DistributedSystem`.
* Remove commented code

-  final ThreadLocal<Boolean> isDisconnectThread = new ThreadLocal() {
-    @Override
-    public Boolean initialValue() {
-      return Boolean.FALSE;
-    }
-  };
+  private final ThreadLocal<Boolean> isDisconnectThread =
+      ThreadLocal.withInitial(() -> Boolean.FALSE);
+  /**
+   * If the experimental multiple-system feature is enabled, always create a new system.
+   *
+   * Otherwise, create a new InternalDistributedSystem with the given properties, or connect to an
+   * existing one with the same properties.
+   */
+  public static DistributedSystem connectInternal(Properties config,
+      SecurityConfig securityConfig) {
+    if (config == null) {
+      config = new Properties();
+    }
+
+    if (ALLOW_MULTIPLE_SYSTEMS) {
+      return InternalDistributedSystem.newInstance(config);
+    }
+
+    synchronized (existingSystemsLock) {
+      if (ClusterDistributionManager.isDedicatedAdminVM()) {
+        // For a dedicated admin VM, check to see if there is already
+        // a connect that will suit our purposes.
+        DistributedSystem existingSystem = getConnection(config);
+        if (existingSystem != null) {
+          return existingSystem;
+        }
+
+      } else {
+        boolean existingSystemDisconnecting = true;
+        boolean isReconnecting = false;
+        while (!existingSystems.isEmpty() && existingSystemDisconnecting && !isReconnecting) {
+          Assert.assertTrue(existingSystems.size() == 1);
+
+          InternalDistributedSystem existingSystem = existingSystems.get(0);
+          existingSystemDisconnecting = existingSystem.isDisconnecting();
+          // a reconnecting DS will block on GemFireCache.class and a ReconnectThread
+          // holds that lock and invokes this method, so we break out of the loop
+          // if we detect this condition
+          isReconnecting = existingSystem.isReconnectingDS();
+          if (existingSystemDisconnecting) {
+            boolean interrupted = Thread.interrupted();
+            try {
+              // no notify for existingSystemsLock, just to release the sync
+              existingSystemsLock.wait(50);
+            } catch (InterruptedException ex) {
+              interrupted = true;
+            } finally {
+              if (interrupted) {
+                Thread.currentThread().interrupt();
+              }
+            }
+          } else if (existingSystem.isConnected()) {
+            existingSystem.validateSameProperties(config, existingSystem.isConnected());
+            return existingSystem;
+          } else {
+            throw new AssertionError(
+                "system should not have both disconnecting==false and isConnected==false");
+          }
+        }
+      }
+
+      // Make a new connection to the distributed system
+      InternalDistributedSystem newSystem =
+          InternalDistributedSystem.newInstance(config, securityConfig);
+      addSystem(newSystem);
+      return newSystem;
+    }
+  }
+
-  private static List<ReconnectListener> reconnectListeners = new ArrayList<ReconnectListener>();
+  private static List<ReconnectListener> reconnectListeners = new ArrayList<>();
-  private volatile boolean shareSockets = DistributionConfig.DEFAULT_CONSERVE_SOCKETS;
+  private volatile boolean shareSockets;
-    return newInstance(config, SecurityConfig.get());
+    return newInstance(config, null);

INS31 INS83 INS29 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS32 INS65 INS42 INS43 INS42 INS43 INS42 INS25 INS25 INS51 INS42 INS42 INS86 INS66 INS66 INS66 INS42 INS42 INS27 INS8 INS42 INS8 INS42 INS8 UPD74 INS40 INS42 INS33 INS21 INS41 INS25 INS60 INS21 INS41 INS33 INS7 INS32 INS32 INS8 INS8 INS43 INS59 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS60 INS25 INS60 INS60 INS61 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS59 INS27 INS8 INS39 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS41 INS42 INS9 INS42 INS9 INS38 INS42 INS38 INS21 INS60 INS21 INS21 INS25 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS7 INS7 INS42 INS8 INS25 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS42 INS32 INS42 INS32 INS60 INS54 INS32 INS8 INS8 INS32 INS34 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS39 INS59 INS8 INS12 INS8 INS42 INS42 INS21 INS41 INS53 INS42 INS42 INS42 INS32 INS21 INS44 INS8 INS25 INS32 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS8 INS42 INS42 INS42 INS32 INS43 INS45 INS42 INS42 INS34 INS42 INS7 INS21 INS42 INS42 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL1 DEL14 DEL42 DEL43 DEL40 DEL42 DEL42 DEL32