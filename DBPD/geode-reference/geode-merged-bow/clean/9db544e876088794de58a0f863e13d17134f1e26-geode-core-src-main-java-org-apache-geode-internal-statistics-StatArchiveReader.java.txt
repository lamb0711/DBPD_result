GEODE-7852: test ClientHealthMonitor functionality behind a SNI gateway (#4958)

* GEODE-7852: test ClientHealthMonitor functionality behind a SNI gateway

This ensures that a server sitting behind an SNI gateway detects the
loss of a client and cleans up after it.  In this case the test detects
that the server has closed CQs created by the non-durable client.

Since test code is not accessible in the Docker container that's running
the server I've enhanced the StatArchiveReader to be able to report the
values of a statistic and have enabled statistics recording in the
server.

(cherry picked from commit 376df4cc7abc6db38b4b298f8af6f3c53baedf15)

* change the docker rule to be a class-rule in case we add more tests to this class

* removed system.out.println per Bill's review
+  private static class SingleStatRawStatSpec implements StatSpec {
+
+    private final String archive;
+    private final String statType;
+    private final String statName;
+
+    SingleStatRawStatSpec(String archive, String typeAndStat) {
+      this.archive = archive;
+      String[] parts = typeAndStat.split("\\.", 0);
+      this.statType = parts[0];
+      this.statName = parts[1];
+    }
+
+    @Override
+    public boolean archiveMatches(File archive) {
+      return true; // this.archive.equalsIgnoreCase(archive.getName());
+    }
+
+    @Override
+    public boolean typeMatches(String typeName) {
+      return this.statType.equalsIgnoreCase(typeName);
+    }
+
+    @Override
+    public boolean statMatches(String statName) {
+      return this.statName.equalsIgnoreCase(statName);
+    }
+
+    @Override
+    public boolean instanceMatches(String textId, long numericId) {
+      return true;
+    }
+
+    @Override
+    public int getCombineType() {
+      return StatSpec.NONE;
+    }
+  }
+
+  private static void printStatValue(StatArchiveReader.StatValue v, long startTime, long endTime,
+      boolean nofilter, boolean persec, boolean persample, boolean prunezeros, boolean details) {
+    v = v.createTrimmed(startTime, endTime);
+    if (nofilter) {
+      v.setFilter(StatArchiveReader.StatValue.FILTER_NONE);
+    } else if (persec) {
+      v.setFilter(StatArchiveReader.StatValue.FILTER_PERSEC);
+    } else if (persample) {
+      v.setFilter(StatArchiveReader.StatValue.FILTER_PERSAMPLE);
+    }
+    if (prunezeros) {
+      if (v.getSnapshotsMinimum() == 0.0 && v.getSnapshotsMaximum() == 0.0) {
+        return;
+      }
+    }
+    System.out.println("  " + v.toString());
+    if (details) {
+      System.out.print("  values=");
+      double[] snapshots = v.getSnapshots();
+      for (int i = 0; i < snapshots.length; i++) {
+        System.out.print(' ');
+        System.out.print(snapshots[i]);
+      }
+      System.out.println();
+      String desc = v.getDescriptor().getDescription();
+      if (desc != null && desc.length() > 0) {
+        System.out.println("    " + desc);
+      }
+    }
+  }
+
+
+    final StatArchiveReader reader;
-      System.err.println("Usage: [archiveName]");
-      ExitCode.FATAL.doSystemExit();
-    } else if (args.length == 1) {
-      archiveName = args[0];
+      if (!args[0].equals("stat") || args.length > 3) {
+        System.err.println("Usage: stat archiveName statType.statName");
+        ExitCode.FATAL.doSystemExit();
+      }
+      archiveName = args[1];
+      String statSpec = args[2];
+      if (!statSpec.contains(".")) {
+        throw new IllegalArgumentException(
+            "stat spec '" + statSpec + "' is malformed - use StatType.statName");
+      }
+      File archiveFile = new File(archiveName);
+      if (!archiveFile.exists()) {
+        throw new IllegalArgumentException("archive file does not exist: " + archiveName);
+      }
+      if (!archiveFile.canRead()) {
+        throw new IllegalArgumentException("archive file exists but is unreadable: " + archiveName);
+      }
+      File[] archives = new File[] {archiveFile};
+      SingleStatRawStatSpec[] filters =
+          new SingleStatRawStatSpec[] {new SingleStatRawStatSpec(archiveName, args[2])};
+      reader = new StatArchiveReader(archives, filters, false);
+      final StatValue[] statValues = reader.matchSpec(filters[0]);
+      System.out.println(statSpec + " matched " + statValues.length + " stats...");
+      for (StatValue value : statValues) {
+        printStatValue(value, -1, -1, true, false, false, false, true);
+      }
+      System.out.println("");
+      System.out.flush();
-      archiveName = "statArchive.gfs";
+      if (args.length == 1) {
+        archiveName = args[0];
+      } else {
+        archiveName = "statArchive.gfs";
+      }
+      reader = new StatArchiveReader(archiveName);
+      System.out.println("DEBUG: memory used = " + reader.getMemoryUsed());
-    StatArchiveReader reader = new StatArchiveReader(archiveName);
-    System.out.println("DEBUG: memory used = " + reader.getMemoryUsed());

INS55 INS31 INS83 INS83 INS42 INS43 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS8 INS42 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS8 INS43 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS21 INS25 INS25 INS21 INS25 MOV60 INS60 INS25 MOV21 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS21 INS60 INS21 INS21 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS41 INS42 INS43 INS42 INS39 INS42 INS41 INS42 INS41 INS40 INS7 INS42 INS8 INS25 INS42 INS8 INS32 INS42 INS8 INS83 INS43 INS59 MOV27 INS8 MOV8 INS42 INS42 INS7 INS5 INS59 INS7 INS7 INS42 INS9 INS42 INS32 INS42 INS32 INS42 INS9 INS40 INS42 INS32 INS21 INS42 INS8 INS25 INS25 INS40 INS42 INS27 INS21 INS60 INS24 INS21 INS60 INS25 INS42 INS42 INS25 INS21 INS60 INS25 INS60 INS25 INS25 INS60 INS60 INS21 INS60 INS21 INS70 INS21 INS21 MOV25 MOV21 INS22 INS42 INS43 INS85 INS42 INS32 INS22 INS2 INS22 INS2 INS22 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS21 INS42 INS8 INS27 INS8 INS45 INS32 INS32 INS5 INS59 INS58 INS27 INS37 INS8 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS7 INS43 INS59 INS38 INS8 INS43 INS59 INS38 INS8 INS38 INS8 INS5 INS59 INS5 INS59 INS7 INS83 INS5 INS59 INS32 INS44 INS42 INS8 INS32 INS32 INS7 INS52 INS42 INS42 INS42 INS42 INS45 INS34 INS52 INS42 INS42 INS34 INS52 INS42 INS42 INS34 INS52 INS42 INS52 INS42 INS42 INS42 INS40 INS32 INS21 INS27 INS27 INS41 INS42 INS42 INS40 INS42 INS45 INS39 INS85 INS42 INS32 INS39 INS59 INS42 INS40 INS42 INS21 INS21 INS40 INS42 INS42 INS42 INS32 INS27 INS27 INS21 INS38 INS27 INS21 MOV21 INS42 INS2 INS42 INS42 INS2 INS32 INS53 INS42 INS42 INS14 INS32 INS53 INS32 INS53 INS43 INS85 INS42 INS3 INS43 INS85 INS42 INS3 INS42 INS14 INS43 INS85 INS42 INS32 INS40 INS42 INS27 INS43 INS42 INS21 INS40 INS42 INS45 INS40 INS42 INS42 MOV14 INS42 INS42 INS40 INS32 INS32 INS34 INS32 INS34 INS42 INS42 INS42 INS34 INS32 INS32 INS32 INS42 INS42 INS33 INS32 INS34 INS32 INS32 INS40 INS34 INS32 INS42 INS34 INS42 INS34 INS42 INS42 INS45 INS14 INS43 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS5 INS4 INS42 INS5 INS4 MOV43 INS42 INS42 INS9 INS42 INS42 INS42 INS2 INS42 INS45 INS40 INS45 INS42 INS32 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS40 INS42 INS13 INS40 INS42 INS2 INS42 INS42 INS42 INS42 INS40 INS42 INS27 INS2 INS42 INS45 INS40 INS42 INS45 INS43 INS27 INS42 INS43 INS27 INS43 INS27 INS43 INS85 INS42 INS43 INS85 INS14 INS42 INS34 INS42 INS42 INS38 INS38 INS9 INS9 INS9 INS9 INS9 INS42 INS42 INS45 INS42 INS42 INS34 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS43 INS42 INS2 INS34 INS34 INS42 INS42 INS34 DEL40 DEL42 DEL45 DEL32 DEL8 DEL25 DEL42 DEL59 DEL60