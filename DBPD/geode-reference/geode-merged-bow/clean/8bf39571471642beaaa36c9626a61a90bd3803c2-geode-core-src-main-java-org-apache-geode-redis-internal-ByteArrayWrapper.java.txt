Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This class is a wrapper for the any Regions that need to store a 
- * byte[]. The only data this an instance will store is a byte[]
- * for the data but it is also serializable and comparable so it is able to be used
- * in querying
+ * This class is a wrapper for the any Regions that need to store a byte[]. The only data this an
+ * instance will store is a byte[] for the data but it is also serializable and comparable so it is
+ * able to be used in querying
-  public ByteArrayWrapper() {
-  }
+  public ByteArrayWrapper() {}
-   * Default constructor constructs a ValueWrapper
-   * and initialize the {@link #value}
+   * Default constructor constructs a ValueWrapper and initialize the {@link #value}
+   * 
-   * Hash code for byte[] wrapped by this object,
-   * the actual hashcode is determined by Arrays.hashCode(byte[])
+   * Hash code for byte[] wrapped by this object, the actual hashcode is determined by
+   * Arrays.hashCode(byte[])
-   * This equals is neither symmetric and therefore not transitive, 
-   * because a String with the same underlying bytes is considered
-   * equal. Clearly calling {@link String#equals(Object)} would not 
+   * This equals is neither symmetric and therefore not transitive, because a String with the same
+   * underlying bytes is considered equal. Clearly calling {@link String#equals(Object)} would not
-   * This is a byte to byte comparator, it is not lexicographical but purely compares
-   * byte by byte values
+   * This is a byte to byte comparator, it is not lexicographical but purely compares byte by byte
+   * values
-   * Private helper method to compare two byte arrays, A.compareTo(B). The comparison
-   * is basically numerical, for each byte index, the byte representing the greater
-   * value will be the greater
+   * Private helper method to compare two byte arrays, A.compareTo(B). The comparison is basically
+   * numerical, for each byte index, the byte representing the greater value will be the greater

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66