Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import com.gemstone.gemfire.cache.query.Struct;
-      boolean useLinkedSet = false;      
+      boolean useLinkedDataStructure = false;   
+      boolean nullValuesAtStart = true;
-        useLinkedSet =orderByAttrs.size()==1; 
+        useLinkedDataStructure =orderByAttrs.size()==1;
+        nullValuesAtStart = !((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();
-        if (useLinkedSet) {
-          set = new LinkedStructSet((StructTypeImpl)resultType) ;
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) 
+          : new SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
-          set = (SelectResults)new StructBag((StructTypeImpl)resultType,
-                                           context.getCachePerfStats());
+          set = QueryUtils.createStructCollection(context, (StructTypeImpl)resultType) ;
-        if (useLinkedSet) {
-          set = new LinkedResultSet(resultType); 
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,
+              nullValuesAtStart); 
-          set = new ResultsBag(resultType, context.getCachePerfStats());
+          set = QueryUtils.createResultCollection(context, resultType);
-      boolean useLinkedSet = false;      
+      boolean useLinkedDataStructure = false;
+      boolean nullValuesAtStart = true;
-        useLinkedSet =orderByAttrs.size()==1; 
+        useLinkedDataStructure =orderByAttrs.size()==1; 
+        nullValuesAtStart = !((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();
-        if (useLinkedSet) {
-          set = new LinkedStructSet((StructTypeImpl)resultType);
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) 
+          : new SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
-          set = (SelectResults)new StructBag((StructTypeImpl)resultType,
-              context.getCachePerfStats());
+          set = QueryUtils.createStructCollection(context, (StructTypeImpl)resultType) ;
-        if (useLinkedSet) {
-          set = new LinkedResultSet(resultType); 
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedResultSet(resultType) : new SortedResultsBag(resultType,
+              nullValuesAtStart); 
-          set = new ResultsBag(resultType, context.getCachePerfStats());
+          set = QueryUtils.createResultCollection(context, resultType);
-      boolean useLinkedSet = false;      
+      boolean useLinkedDataStructure = false; 
+      boolean nullValuesAtStart = true;
-        useLinkedSet =orderByAttrs.size()==1; 
+        useLinkedDataStructure =orderByAttrs.size()==1;
+        nullValuesAtStart = !((CompiledSortCriterion)orderByAttrs.get(0)).getCriterion();
-        if(useLinkedSet) {
-          set = new LinkedStructSet((StructTypeImpl)resultType);
+        if(useLinkedDataStructure) {
+          set = context.isDistinct() ? new LinkedStructSet((StructTypeImpl)resultType) 
+          : new SortedResultsBag<Struct>((StructTypeImpl)resultType, nullValuesAtStart);
-          set = new StructBag((StructTypeImpl)resultType,
-                                           context.getCachePerfStats());
+          set = QueryUtils.createStructCollection(context, (StructTypeImpl)resultType) ;
-        if (useLinkedSet) {
-          set = new  LinkedResultSet(resultType); 
+        if (useLinkedDataStructure) {
+          set = context.isDistinct() ? new  LinkedResultSet(resultType): 
+            new SortedResultsBag(resultType, nullValuesAtStart); 
-          set = new ResultsBag(resultType, context.getCachePerfStats());
+          set = QueryUtils.createResultCollection(context, resultType);

INS26 INS40 INS60 INS60 INS60 INS39 INS59 INS39 INS59 INS39 INS59 UPD42 INS42 INS9 INS21 UPD42 INS42 INS9 INS21 UPD42 INS42 INS9 INS21 INS7 UPD42 UPD42 INS7 UPD42 UPD42 INS7 UPD42 UPD42 UPD42 INS42 INS38 UPD42 INS42 INS38 UPD42 INS42 INS38 INS32 INS32 INS32 INS36 INS42 INS16 INS32 INS16 INS32 INS36 INS42 INS16 INS32 INS16 INS32 INS36 INS42 INS16 INS32 INS16 INS32 INS11 INS32 MOV14 INS14 INS42 INS42 MOV42 INS11 INS32 MOV14 INS14 INS42 INS42 MOV42 UPD42 MOV42 INS11 INS32 MOV14 INS14 INS42 INS42 MOV42 INS11 INS32 MOV14 INS14 INS42 INS42 MOV42 UPD42 MOV42 INS11 INS32 MOV14 INS14 INS42 INS42 MOV42 INS11 INS32 MOV14 INS14 INS42 INS42 MOV42 UPD42 MOV42 INS43 INS32 INS42 INS42 INS74 MOV11 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS32 INS42 INS42 INS74 MOV11 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS32 INS42 INS42 INS74 MOV11 INS42 INS43 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS34 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL14 DEL11 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL14 DEL11 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL32 DEL14