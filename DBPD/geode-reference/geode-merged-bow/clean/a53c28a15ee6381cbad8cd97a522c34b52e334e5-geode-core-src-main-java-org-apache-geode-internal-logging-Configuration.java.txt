GEODE-6122: Make log4j core optional (#2944)

* Add Logging ProviderAgent support for ServiceLoader
* Test for availability of Log4j Core before defaulting to Log4jAgent
* Change optional ProviderAgent methods to have default impls
* Extract LogLevelUpdateOccurs enum to top level class
* Extract LogLevelUpdateScope enum to top level class
* Move Banner to internal.logging package
* Break Banner's hard dependency on Log4J Core
* Improve javadocs
* Add field type to TestingOnly annotation
* Replace use of InternalLogWriter constants with LogWriterLevel enum

-import static org.apache.geode.internal.logging.Configuration.LogLevelUpdateOccurs.ONLY_WHEN_USING_DEFAULT_CONFIG;
-import static org.apache.geode.internal.logging.Configuration.LogLevelUpdateScope.GEODE_LOGGERS;
-import static org.apache.geode.internal.logging.InternalLogWriter.CONFIG_LEVEL;
-
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.status.StatusLogger;
+import static org.apache.geode.internal.logging.LogLevelUpdateOccurs.ONLY_WHEN_USING_DEFAULT_CONFIG;
+import static org.apache.geode.internal.logging.LogLevelUpdateScope.GEODE_LOGGERS;
-import org.apache.geode.internal.ClassPathLoader;
+import org.apache.geode.cache.Cache;
- * Provides logging configuration by managing an {@link ProviderAgent} for the logging backend
- * provider.
+ * Provides logging configuration by managing a {@link ProviderAgent} for the logging backend.
-  private static final Logger LOGGER = StatusLogger.getLogger();
+  /**
+   * The default {@link LogWriterLevel} is {@link LogWriterLevel#CONFIG}.
+   */
+  @TestingOnly
+  public static final int DEFAULT_LOGWRITER_LEVEL = LogWriterLevel.CONFIG.intLevel();
-  public static final int DEFAULT_LOGWRITER_LEVEL = CONFIG_LEVEL;
-
+  /**
+   * Header for logging the Startup Configuration during {@code Cache} creation.
+   */
+  /**
+   * The root name of all Geode loggers.
+   */
+
+  /**
+   * The name of the main Geode logger returned by {@link Cache#getLogger()}.
+   */
+
+  /**
+   * The name of the security Geode logger returned by {@link Cache#getSecurityLogger()}.
+   */
-  /**
-   * System property that may be used to override which {@code ProviderAgent} to use.
-   */
-  static final String PROVIDER_AGENT_NAME_PROPERTY = GEODE_PREFIX + "PROVIDER_AGENT_NAME";
-
-  /**
-   * The default {@code ProviderAgent} is {@code Log4jAgent}.
-   */
-  static final String DEFAULT_PROVIDER_AGENT_NAME =
-      "org.apache.geode.internal.logging.log4j.Log4jAgent";
-
-  /**
-   * The default {@code LogLevelUpdateOccurs} is {@code ONLY_WHEN_USING_DEFAULT_CONFIG}.
-   */
-  private static final LogLevelUpdateOccurs DEFAULT_LOG_LEVEL_UPDATE_OCCURS =
-      ONLY_WHEN_USING_DEFAULT_CONFIG;
-
-  /**
-   * The default {@code LogLevelUpdateScope} is {@code GEODE_LOGGERS}.
-   */
-  private static final LogLevelUpdateScope DEFAULT_LOG_LEVEL_UPDATE_SCOPE = GEODE_LOGGERS;
-
-    return create(getLogLevelUpdateOccurs(), getLogLevelUpdateScope(), createProviderAgent());
+    return create(getLogLevelUpdateOccurs(), getLogLevelUpdateScope(), new ProviderAgentLoader()
+        .findProviderAgent());
-    return create(logLevelUpdateOccurs, logLevelUpdateScope, createProviderAgent());
+    return create(logLevelUpdateOccurs, logLevelUpdateScope,
+        new ProviderAgentLoader().findProviderAgent());
-          DEFAULT_LOG_LEVEL_UPDATE_OCCURS.name()).toUpperCase());
+          ONLY_WHEN_USING_DEFAULT_CONFIG.name()).toUpperCase());
-      return DEFAULT_LOG_LEVEL_UPDATE_OCCURS;
+      return ONLY_WHEN_USING_DEFAULT_CONFIG;
-          DEFAULT_LOG_LEVEL_UPDATE_SCOPE.name()).toUpperCase());
+          GEODE_LOGGERS.name()).toUpperCase());
-      return DEFAULT_LOG_LEVEL_UPDATE_SCOPE;
+      return GEODE_LOGGERS;
-  static ProviderAgent createProviderAgent() {
-    String agentClassName =
-        System.getProperty(PROVIDER_AGENT_NAME_PROPERTY, DEFAULT_PROVIDER_AGENT_NAME);
-    try {
-      Class<? extends ProviderAgent> agentClass =
-          ClassPathLoader.getLatest().forName(agentClassName).asSubclass(ProviderAgent.class);
-      return agentClass.newInstance();
-    } catch (ClassNotFoundException | ClassCastException | InstantiationException
-        | IllegalAccessException e) {
-      LOGGER.warn("Unable to create ProviderAgent of type {}", agentClassName, e);
-    }
-    return new NullProviderAgent();
-  }
-
-  void enableLoggingToStandardOutput() {
-    providerAgent.enableLoggingToStandardOutput();
-  }
-
-  void disableLoggingToStandardOutputIfLoggingToFile() {
-    LogConfig logConfig = logConfigSupplier.getLogConfig();
-    if (logConfig.getLogFile().exists()) {
-      providerAgent.disableLoggingToStandardOutput();
-    }
-  }
-
+  String getConfigurationInfo() {
+    return providerAgent.getConfigurationInfo();
+  }
+
+  void enableLoggingToStandardOutput() {
+    LogConfig logConfig = logConfigSupplier.getLogConfig();
+    if (logConfig.getLogFile().exists()) {
+      providerAgent.enableLoggingToStandardOutput();
+    }
+  }
+
+  void disableLoggingToStandardOutputIfLoggingToFile() {
+    LogConfig logConfig = logConfigSupplier.getLogConfig();
+    if (logConfig.getLogFile().exists()) {
+      providerAgent.disableLoggingToStandardOutput();
+    }
+  }
+
-
-  /**
-   * Controls whether or not log level updates should be triggered.
-   */
-  public enum LogLevelUpdateOccurs {
-    NEVER,
-    ONLY_WHEN_USING_DEFAULT_CONFIG,
-    ALWAYS;
-
-    public boolean never() {
-      return this == NEVER;
-    }
-
-    public boolean always() {
-      return this == ALWAYS;
-    }
-
-    public boolean onlyWhenUsingDefaultConfig() {
-      return this == ONLY_WHEN_USING_DEFAULT_CONFIG;
-    }
-  }
-
-  /**
-   * Controls the scope of which packages of loggers are updated when the log level changes.
-   */
-  public enum LogLevelUpdateScope {
-    GEODE_LOGGERS,
-    GEODE_AND_SECURITY_LOGGERS,
-    GEODE_AND_APPLICATION_LOGGERS,
-    ALL_LOGGERS
-  }

MOV23 MOV23 MOV23 MOV31 MOV31 UPD40 UPD40 UPD40 INS31 INS78 INS83 INS39 UPD83 MOV43 MOV59 INS29 UPD83 MOV43 MOV59 INS29 MOV43 INS42 INS8 MOV39 MOV42 INS8 UPD66 UPD66 INS42 UPD42 INS32 INS65 INS65 MOV41 INS60 INS25 UPD65 UPD65 INS40 INS42 UPD66 UPD66 INS66 UPD66 UPD65 INS66 INS65 INS66 MOV12 MOV12 INS43 INS59 INS32 MOV8 INS42 INS67 UPD66 INS68 INS68 UPD42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 UPD42 INS14 UPD42 INS42 INS42 INS42 INS42 INS43 INS43 UPD42 UPD42 INS42 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL42 DEL43 DEL45 DEL66 DEL66 DEL65 DEL42 DEL43 DEL42 DEL42 DEL59 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL59 DEL23 DEL83 DEL83 DEL83 DEL23 DEL66 DEL66 DEL66 DEL65 DEL42 DEL43 DEL42 DEL42 DEL59 DEL83 DEL83 DEL83 DEL23 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL45 DEL27 DEL59 DEL23 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL43 DEL14 DEL41 DEL8 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL83 DEL39 DEL42 DEL52 DEL42 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL27 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL27 DEL41 DEL8 DEL31 DEL71 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL42 DEL72 DEL71