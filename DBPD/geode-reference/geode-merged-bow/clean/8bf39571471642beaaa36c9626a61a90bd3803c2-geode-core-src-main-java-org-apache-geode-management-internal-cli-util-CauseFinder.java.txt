Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Helper class to navigate through the nested causes of an exception. 
- * Provides method to
+ * Helper class to navigate through the nested causes of an exception. Provides method to
- * <li> find index of an Exception of a specific type
- * <li> find Root Cause of the Exception
- * <li> retrieve a nested cause at a specific index/depth
- * <li> find a cause by specific type 
+ * <li>find index of an Exception of a specific type
+ * <li>find Root Cause of the Exception
+ * <li>retrieve a nested cause at a specific index/depth
+ * <li>find a cause by specific type
-   * Returns the index of a first nested cause which is of the given Throwable
-   * type or its sub-type depending on <code>isSubtypeOk</code> value. <p /> 
-   * NOTE: It looks for the "nested" causes & doesn't try to match the
-   * <code>causeClass</code> of the <code>parent</code>. <p />
+   * Returns the index of a first nested cause which is of the given Throwable type or its sub-type
+   * depending on <code>isSubtypeOk</code> value.
+   * <p />
+   * NOTE: It looks for the "nested" causes & doesn't try to match the <code>causeClass</code> of
+   * the <code>parent</code>.
+   * <p />
-   * @param parent
-   *          parent Throwable instance
-   * @param causeClass
-   *          type of the nested Throwable cause
-   * @param isSubtypeOk
-   *          whether any matching sub-type is required or exact match is
-   *          required
-   * @return index/depth of the cause starting from the 'top most' Throwable in
-   *         the stack. -1 if can't find it.
+   * @param parent parent Throwable instance
+   * @param causeClass type of the nested Throwable cause
+   * @param isSubtypeOk whether any matching sub-type is required or exact match is required
+   * @return index/depth of the cause starting from the 'top most' Throwable in the stack. -1 if
+   *         can't find it.
-  public static int indexOfCause(Throwable parent, Class<? extends Throwable> causeClass, final boolean isSubtypeOk) {
+  public static int indexOfCause(Throwable parent, Class<? extends Throwable> causeClass,
+      final boolean isSubtypeOk) {
-  
+
-   * Returns the index of a first nested cause which is of the given Throwable
-   * type or its sub-type depending on <code>isSubtypeOk</code> value. <p /> 
-   * NOTE: It looks for the "nested" causes & doesn't try to match the
-   * <code>causeClass</code> of the <code>parent</code>. <p />
+   * Returns the index of a first nested cause which is of the given Throwable type or its sub-type
+   * depending on <code>isSubtypeOk</code> value.
+   * <p />
+   * NOTE: It looks for the "nested" causes & doesn't try to match the <code>causeClass</code> of
+   * the <code>parent</code>.
+   * <p />
-   * @param parent
-   *          parent Throwable instance
-   * @param causeClass
-   *          type of the nested Throwable cause
-   * @param cindex
-   *          variable to store current index/depth of the cause
-   * @param isSubtypeOk
-   *          whether any matching sub-type is required or exact match is
-   *          required
-   * @return index/depth of the cause starting from the 'top most' Throwable
-   *         in the stack. -1 if can't find it.
+   * @param parent parent Throwable instance
+   * @param causeClass type of the nested Throwable cause
+   * @param cindex variable to store current index/depth of the cause
+   * @param isSubtypeOk whether any matching sub-type is required or exact match is required
+   * @return index/depth of the cause starting from the 'top most' Throwable in the stack. -1 if
+   *         can't find it.
-  private static int indexOfCause(Throwable parent, Class<? extends Throwable> causeClass, final int cindex, final boolean isSubtypeOk) {
+  private static int indexOfCause(Throwable parent, Class<? extends Throwable> causeClass,
+      final int cindex, final boolean isSubtypeOk) {
-    //(cause is not null & cause is not of type causeClass)
+    // (cause is not null & cause is not of type causeClass)
-      //recurse deeper
+      // recurse deeper
-    
+
-  
+
-   * Returns whether the given <code>cause</code> is assignable or has same
-   * type as that of <code>causeClass</code> depending on
-   * <code>isSubtypeOk</code> value.
+   * Returns whether the given <code>cause</code> is assignable or has same type as that of
+   * <code>causeClass</code> depending on <code>isSubtypeOk</code> value.
-   * @param cause
-   *          parent Throwable instance
-   * @param causeClass
-   *          type of the nested Throwable cause
-   * @param isSubtypeOk
-   *          whether any matching sub-type is required or exact match is
-   *          required
-   * @return true if <code>cause</code> is assignable or has same type as that
-   *         of <code>causeClass</code>. false otherwise
+   * @param cause parent Throwable instance
+   * @param causeClass type of the nested Throwable cause
+   * @param isSubtypeOk whether any matching sub-type is required or exact match is required
+   * @return true if <code>cause</code> is assignable or has same type as that of
+   *         <code>causeClass</code>. false otherwise
-  //Note: No not null check on 'Throwable cause' - currently called after null check 
-  private static boolean isMatching(Throwable cause, Class<? extends Throwable> causeClass, final boolean isSubtypeOk) {
+  // Note: No not null check on 'Throwable cause' - currently called after null check
+  private static boolean isMatching(Throwable cause, Class<? extends Throwable> causeClass,
+      final boolean isSubtypeOk) {
-  
+
-   * Returns nested 'root' cause of the given parent Throwable. Will return the
-   * same Throwable if it has no 'cause'.
+   * Returns nested 'root' cause of the given parent Throwable. Will return the same Throwable if it
+   * has no 'cause'.
-   * @param parent
-   *          Throwable whose root cause is to be found
+   * @param parent Throwable whose root cause is to be found
-   * @throws IllegalArgumentException
-   *           when parent is <code>null</code>
+   * @throws IllegalArgumentException when parent is <code>null</code>
-   * Returns nested 'root' cause of the given parent Throwable. Will return the
-   * same Throwable if it has no 'cause'. If <code>depth</code> is 0, does a
-   * <code>null</code> check on the given <code>parent Throwable</code> & if
-   * <code>parent</code> is <code>null</code>, throws
+   * Returns nested 'root' cause of the given parent Throwable. Will return the same Throwable if it
+   * has no 'cause'. If <code>depth</code> is 0, does a <code>null</code> check on the given
+   * <code>parent Throwable</code> & if <code>parent</code> is <code>null</code>, throws
-   * @param parent
-   *          Throwable whose root cause is to be found
-   * @param depth
-   *          recurse depth indicator
+   * @param parent Throwable whose root cause is to be found
+   * @param depth recurse depth indicator
-   * @throws IllegalArgumentException
-   *           when parent is <code>null</code> at <code>depth = 0</code>
+   * @throws IllegalArgumentException when parent is <code>null</code> at <code>depth = 0</code>
-  //Note: private method
+  // Note: private method
-      //recurse deeper
+      // recurse deeper
-  
+
-   * Returns cause at the specified depth/index starting from the 'top most'
-   * Throwable <code>parent</code> in the stack. Returns <code>null</code> if
-   * it can't find it.
+   * Returns cause at the specified depth/index starting from the 'top most' Throwable
+   * <code>parent</code> in the stack. Returns <code>null</code> if it can't find it.
-   * @param parent
-   *          Throwable to use to find the cause at given index/depth
-   * @param requiredIndex
-   *          index/depth of nesting the cause
-   * @return cause at the specified index starting from the 'top most'
-   *         Throwable in the stack. <code>null</code> if it can't find it.
+   * @param parent Throwable to use to find the cause at given index/depth
+   * @param requiredIndex index/depth of nesting the cause
+   * @return cause at the specified index starting from the 'top most' Throwable in the stack.
+   *         <code>null</code> if it can't find it.
-    //  NEED TO CHECK WHETHER RIGHT PARENT CAUSE RETRUNED
+    // NEED TO CHECK WHETHER RIGHT PARENT CAUSE RETRUNED
-      //recurse deeper
+      // recurse deeper
-    
-    //when there isn't required depth
+
+    // when there isn't required depth
-  
+
-   * Returns the first occurrence of nested cause of <code>parent</code> which
-   * matches the specified <code>causeType</code> or its sub-type depending on
-   * <code>isSubtypeOk</code> value.
+   * Returns the first occurrence of nested cause of <code>parent</code> which matches the specified
+   * <code>causeType</code> or its sub-type depending on <code>isSubtypeOk</code> value.
-   * @param parent
-   *          Throwable to use to find the cause of given type
-   * @param causeType
-   *          type of the nested Throwable cause
-   * @param isSubtypeOk
-   *          whether any matching sub-type is required or exact match is
-   *          required
-   * @return the first occurrence of nested cause which matches the specified
-   *         <code>causeType</code> or its sub-type. <code>null</code> if it
-   *         can't find it.
+   * @param parent Throwable to use to find the cause of given type
+   * @param causeType type of the nested Throwable cause
+   * @param isSubtypeOk whether any matching sub-type is required or exact match is required
+   * @return the first occurrence of nested cause which matches the specified <code>causeType</code>
+   *         or its sub-type. <code>null</code> if it can't find it.
-  public static Throwable causeByType(Throwable parent, Class<? extends Throwable> causeType, boolean isSubtypeOk) {
+  public static Throwable causeByType(Throwable parent, Class<? extends Throwable> causeType,
+      boolean isSubtypeOk) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66