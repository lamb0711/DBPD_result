Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  UnregisterInterest() {
-  }
+  UnregisterInterest() {}
-    throws ClassNotFoundException, IOException {
+      throws ClassNotFoundException, IOException {
-      logger.debug("{}: Received unregister interest request ({} bytes) from {} for region {} key {}", servConn.getName(), msg
-        .getPayloadLength(), servConn.getSocketString(), regionName, key);
+      logger.debug(
+          "{}: Received unregister interest request ({} bytes) from {} for region {} key {}",
+          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), regionName, key);
-      errMessage = LocalizedStrings.UnRegisterInterest_THE_INPUT_REGION_NAME_AND_KEY_FOR_THE_UNREGISTER_INTEREST_REQUEST_ARE_NULL;
+      errMessage =
+          LocalizedStrings.UnRegisterInterest_THE_INPUT_REGION_NAME_AND_KEY_FOR_THE_UNREGISTER_INTEREST_REQUEST_ARE_NULL;
-      errMessage = LocalizedStrings.UnRegisterInterest_THE_INPUT_KEY_FOR_THE_UNREGISTER_INTEREST_REQUEST_IS_NULL;
+      errMessage =
+          LocalizedStrings.UnRegisterInterest_THE_INPUT_KEY_FOR_THE_UNREGISTER_INTEREST_REQUEST_IS_NULL;
-      errMessage = LocalizedStrings.UnRegisterInterest_THE_INPUT_REGION_NAME_FOR_THE_UNREGISTER_INTEREST_REQUEST_IS_NULL;
+      errMessage =
+          LocalizedStrings.UnRegisterInterest_THE_INPUT_REGION_NAME_FOR_THE_UNREGISTER_INTEREST_REQUEST_IS_NULL;
-    if (interestType == InterestType.REGULAR_EXPRESSION) {
-      this.securityService.authorizeRegionRead(regionName);
-    } else {
-      this.securityService.authorizeRegionRead(regionName, key.toString());
-    }
+      if (interestType == InterestType.REGULAR_EXPRESSION) {
+        this.securityService.authorizeRegionRead(regionName);
+      } else {
+        this.securityService.authorizeRegionRead(regionName, key.toString());
+      }
-          UnregisterInterestOperationContext unregisterContext = authzRequest.unregisterInterestAuthorize(regionName, key, interestType);
+          UnregisterInterestOperationContext unregisterContext =
+              authzRequest.unregisterInterestAuthorize(regionName, key, interestType);
-      /*
-       * Region destroy message from server to client results in client calling
-       * unregister to server (an unnecessary callback). The unregister
-       * encounters an error because the region has been destroyed on the server
-       * and hence falsely marks the server dead.
-       */
-      /*
-       * Region region = crHelper.getRegion(regionName); if (region == null) {
-       * logger.warning(this.name + ": Region named " + regionName + " was not
-       * found during unregister interest request"); writeErrorResponse(msg,
-       * MessageType.UNREGISTER_INTEREST_DATA_ERROR); responded = true; } else {
-       */
+    /*
+     * Region destroy message from server to client results in client calling unregister to server
+     * (an unnecessary callback). The unregister encounters an error because the region has been
+     * destroyed on the server and hence falsely marks the server dead.
+     */
+    /*
+     * Region region = crHelper.getRegion(regionName); if (region == null) {
+     * logger.warning(this.name + ": Region named " + regionName + " was not found during unregister
+     * interest request"); writeErrorResponse(msg, MessageType.UNREGISTER_INTEREST_DATA_ERROR);
+     * responded = true; } else {
+     */
-    servConn.getAcceptor()
-            .getCacheClientNotifier()
-            .unregisterClientInterest(regionName, key, interestType, isClosing, servConn.getProxyID(), keepalive);
+    servConn.getAcceptor().getCacheClientNotifier().unregisterClientInterest(regionName, key,
+        interestType, isClosing, servConn.getProxyID(), keepalive);
-      logger.debug("{}: Sent unregister interest response for region {} key {}", servConn.getName(), regionName, key);
+      logger.debug("{}: Sent unregister interest response for region {} key {}", servConn.getName(),
+          regionName, key);

