Merge branch 'release/1.0.0-incubating.M3'

-import java.io.File;
-import java.io.IOException;
-import java.io.Reader;
-import java.lang.reflect.Array;
-import java.lang.reflect.Method;
-import java.net.InetAddress;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Properties;
-import java.util.Set;
-import java.util.SortedSet;
-import java.util.StringTokenizer;
-import java.util.TreeSet;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicReference;
-
-import org.apache.logging.log4j.Logger;
-
-import com.gemstone.gemfire.CancelCriterion;
-import com.gemstone.gemfire.CancelException;
-import com.gemstone.gemfire.ForcedDisconnectException;
-import com.gemstone.gemfire.GemFireConfigException;
-import com.gemstone.gemfire.GemFireIOException;
-import com.gemstone.gemfire.LogWriter;
-import com.gemstone.gemfire.StatisticDescriptor;
-import com.gemstone.gemfire.Statistics;
-import com.gemstone.gemfire.StatisticsType;
-import com.gemstone.gemfire.StatisticsTypeFactory;
-import com.gemstone.gemfire.SystemConnectException;
-import com.gemstone.gemfire.SystemFailure;
+import com.gemstone.gemfire.*;
-import com.gemstone.gemfire.internal.Assert;
-import com.gemstone.gemfire.internal.DSFIDFactory;
-import com.gemstone.gemfire.internal.DummyStatisticsImpl;
-import com.gemstone.gemfire.internal.GemFireStatSampler;
-import com.gemstone.gemfire.internal.InternalDataSerializer;
-import com.gemstone.gemfire.internal.InternalInstantiator;
-import com.gemstone.gemfire.internal.LinuxProcFsStatistics;
-import com.gemstone.gemfire.internal.LocalStatisticsImpl;
-import com.gemstone.gemfire.internal.OSProcess;
-import com.gemstone.gemfire.internal.OsStatisticsFactory;
-import com.gemstone.gemfire.internal.SocketCreator;
-import com.gemstone.gemfire.internal.StatisticsImpl;
-import com.gemstone.gemfire.internal.StatisticsManager;
-import com.gemstone.gemfire.internal.StatisticsTypeFactoryImpl;
-import com.gemstone.gemfire.internal.SystemTimer;
+import com.gemstone.gemfire.internal.*;
+import org.apache.logging.log4j.Logger;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Reader;
+import java.lang.reflect.Array;
+import java.net.InetAddress;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicReference;
+
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.LOCATORS;
+import static com.gemstone.gemfire.distributed.ConfigurationProperties.MCAST_PORT;
- * @since 3.0
+ * @since GemFire 3.0
-  
-  public static final String DISABLE_MANAGEMENT_PROPERTY = "gemfire.disableManagement";
+
+  public static final String DISABLE_MANAGEMENT_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "disableManagement";
-  
-  /** sqlfire disconnect listener */
-  private DisconnectListener sqlfDisconnectListener;
-  public final static String DISABLE_SHUTDOWN_HOOK_PROPERTY = "gemfire.disableShutdownHook";
+  public final static String DISABLE_SHUTDOWN_HOOK_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "disableShutdownHook";
-  public final static String APPEND_TO_LOG_FILE = "gemfire.append-log";
+  public final static String APPEND_TO_LOG_FILE = DistributionConfig.GEMFIRE_PREFIX + "append-log";
-  private final boolean statsDisabled = Boolean.getBoolean("gemfire.statsDisabled");
+  private final boolean statsDisabled = Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "statsDisabled");
-   * @since 4.0
+   * @since GemFire 4.0
-   * @since 5.0
+   * @since GemFire 5.0
-   * @since 5.0
+   * @since GemFire 5.0
-                                          + DistributionConfig.LOCATORS_NAME
+            + LOCATORS
-                                          + DistributionConfig.MCAST_PORT_NAME
+            + MCAST_PORT
-   * @since 5.7
+   * @since GemFire 5.7
-   * @since 5.7
+   * @since GemFire 5.7
-    if (this.dm.getCancelCriterion().cancelInProgress() != null) {
+    if (this.dm.getCancelCriterion().isCancelInProgress()) {
-    if (this.dm.getCancelCriterion().cancelInProgress() != null) {
+    if (this.dm.getCancelCriterion().isCancelInProgress()) {
-    return this.reconnectCancelled;
+    return reconnectCancelled;
-   * @since 4.0
+   * @since GemFire 4.0
-   * @since 4.0
+   * @since GemFire 4.0
-  private final ArrayList<Statistics> statsList = new ArrayList<Statistics>();
+  private final CopyOnWriteArrayList<Statistics> statsList = new CopyOnWriteArrayList<Statistics>();
-    synchronized (statsList) {
-      for (Statistics s : statsList) {
-        if (s.getUniqueId() == id) {
-          return s;
-        }
+    for (Statistics s : statsList) {
+      if (s.getUniqueId() == id) {
+        return s;
-    synchronized (statsList) {
-      for (Statistics s : statsList) {
-        if (s.getUniqueId() == id) {
-          return true;
-        }
+    for (Statistics s : statsList) {
+      if (s.getUniqueId() == id) {
+        return true;
-    synchronized (statsList) {
-      return (Statistics[])statsList.toArray(new Statistics[statsList.size()]);
-    }
+    return (Statistics[])statsList.toArray(new Statistics[0]);
-    synchronized (this.statsList) {
-      for (Statistics s: this.statsList) {
-        visitor.visit(s);
-      }
+    for (Statistics s: this.statsList) {
+      visitor.visit(s);
-    synchronized (this.statsList) {
-      for (Statistics s: this.statsList) {
-        if (uniqueId == s.getUniqueId()) {
-          return s;
-        }
+    for (Statistics s: this.statsList) {
+      if (uniqueId == s.getUniqueId()) {
+        return s;
-      } catch (ManagementException ex) {
+      } catch (GemFireSecurityException|ManagementException ex) {
-  
-  /**
-   * sqlfire's disconnect listener is invoked before the cache is closed when
-   * there is a forced disconnect
-   */
-  public void setSqlfForcedDisconnectListener(DisconnectListener listener) {
-    synchronized(this.listeners) { 
-      this.sqlfDisconnectListener = listener;
-    }
-  }
-  
-  private void notifySqlfForcedDisconnectListener() {
-    if (this.sqlfDisconnectListener != null) {
-      final boolean isDebugEnabled = logger.isDebugEnabled();
-      try {
-        if (isDebugEnabled) {
-          logger.debug("notifying sql disconnect listener");
-        }
-        this.sqlfDisconnectListener.onDisconnect(this);
-      } catch (VirtualMachineError e) {
-        SystemFailure.initiateFailure(e);
-        throw e;
-      } catch (Throwable e) {
-        SystemFailure.checkFailure();
-        // TODO: should these be logged or ignored?  We need to see them
-        logger.info("", e);
-      }
-      if (isDebugEnabled) {
-        logger.debug("finished notifying sql disconnect listener");
-      }
-    }
-  }
-  
-  
-   * @since 4.0
+   * @since GemFire 4.0
-  public static int getReconnectAttemptCounter() {
-    return reconnectAttemptCounter;
-  }
-  
+
-    return attemptingToReconnect || (reconnectDS != null);
+    InternalDistributedSystem rds = this.reconnectDS;
+    if (!attemptingToReconnect) {
+      return false;
+    }
+    if (reconnectCancelled) {
+      return false;
+    }
+    boolean newDsConnected = (rds == null || !rds.isConnected());
+    if (!newDsConnected) {
+      return false;
+    }
+    return true;
-  
+
+
-  private boolean reconnectCancelled = false;
-  private Object reconnectCancelledLock = new Object();
+  private volatile boolean reconnectCancelled = false;
-    synchronized(this.reconnectCancelledLock) {
-      this.reconnectCancelled = true;
-    }
+    this.reconnectCancelled = true;
+    if (this.isReconnectingDS && forcedDisconnect) {
+      return false;
+    }
-            logger.debug("tryReconnect: forcedDisconnect={} sqlf listener={}", forcedDisconnect, this.sqlfDisconnectListener);
+            logger.debug("tryReconnect: forcedDisconnect={}", forcedDisconnect);
-            // allow the fabric-service to stop before dismantling everything
-            notifySqlfForcedDisconnectListener();
-
-  public static int getReconnectCount(){
+  public static int getReconnectAttemptCounter() {
-    boolean inhibitCacheForSQLFire = false;
-      if (cache.isSqlfSystem()) {
-        inhibitCacheForSQLFire = true;
-      } else {
-        cacheXML = cache.getCacheConfig().getCacheXMLDescription();
-        cacheServerCreation = cache.getCacheConfig().getCacheServerCreation();
-      }
+      cacheXML = cache.getCacheConfig().getCacheXMLDescription();
+      cacheServerCreation = cache.getCacheConfig().getCacheServerCreation();
-    
-//    logger.info("reconnecting IDS@"+System.identityHashCode(this));
-        synchronized(this.reconnectCancelledLock) {
-          if (this.reconnectCancelled) {
-            break;
-          }
+        if (isReconnectCancelled()) {
+          break;
+
-              logger.debug("Stopping the checkrequiredrole thread becuase reconnect : {} reached the max number of reconnect tries : {}", reconnectAttemptCounter, maxTries);
+              logger.debug("Stopping the checkrequiredrole thread because reconnect : {} reached the max number of reconnect tries : {}", reconnectAttemptCounter, maxTries);
-        synchronized(this.reconnectCancelledLock) { 
-          if (this.reconnectCancelled) {
-            if (isDebugEnabled) {
-              logger.debug("reconnect can no longer be done because of an explicit disconnect");
-            }
-            return;
-          }
+        if (isReconnectCancelled()) {
+          return;
-//        logger.info("IDS@"+System.identityHashCode(this));
-        
+
-  //        log.fine("waiting " + timeOut + " before reconnecting to the distributed system");
-        synchronized(this.reconnectCancelledLock) { 
-          if (this.reconnectCancelled) {
-            if (isDebugEnabled) {
-              logger.debug("reconnect can no longer be done because of an explicit disconnect");
-            }
-            return;
-          }
+
+        if (isReconnectCancelled()) {
+          return;
+
-  //        log.fine("DistributedSystem@"+System.identityHashCode(this)+" reconnecting distributed system.  attempt #"+reconnectAttemptCounter);
+
+
-          synchronized(this.reconnectCancelledLock) { 
-            if (this.reconnectCancelled) {
-              if (isDebugEnabled) {
-                logger.debug("reconnect can no longer be done because of an explicit disconnect");
-              }
-              return;
-            }
+          if (isReconnectCancelled()) {
+            return;
+
+
-          } catch (DistributedSystemDisconnectedException e) {
-            synchronized(this.reconnectCancelledLock) {
-          	  if (this.reconnectCancelled) {
-          	    return;
-          	  } else {
-          	    throw e;
-          	  }
+
+          } catch (CancelException e) {
+            if (isReconnectCancelled()) {
+              return;
+            } else {
+              throw e;
-          if (newDS != null) { // newDS will not be null here but findbugs requires this check
-            boolean cancelled;
-            synchronized(this.reconnectCancelledLock) { 
-              cancelled = this.reconnectCancelled;
-            }
-            if (cancelled) {
-              newDS.disconnect();
-            } else {
-              this.reconnectDS = newDS;
-              newDS.isReconnectingDS = false;
-              notifyReconnectListeners(this, this.reconnectDS, false);
-            }
+
+          if (this.reconnectCancelled) {
+            newDS.disconnect();
+            continue;
+
+          this.reconnectDS = newDS;
-          // retry;
-          if (isDebugEnabled) {
-            logger.debug("Attempt to reconnect failed with SystemConnectException");
-          }
-          if (e.getMessage().contains("Rejecting the attempt of a member using an older version")
-              || e.getMessage().contains("15806")) { // 15806 is in the message if it's been localized to another language
+          logger.debug("Attempt to reconnect failed with SystemConnectException");
+
+          if (e.getMessage().contains("Rejecting the attempt of a member using an older version")) {
+          continue;
+          continue;
+
+
+        DM newDM = this.reconnectDS.getDistributionManager();
+        if (newDM instanceof DistributionManager) {
+          // Admin systems don't carry a cache, but for others we can now create
+          // a cache
+          if (((DistributionManager)newDM).getDMType() != DistributionManager.ADMIN_ONLY_DM_TYPE) {
+            try {
+              CacheConfig config = new CacheConfig();
+              if (cacheXML != null) {
+                config.setCacheXMLDescription(cacheXML);
+              }
+              cache = GemFireCacheImpl.create(this.reconnectDS, config);
+
+              createAndStartCacheServers(cacheServerCreation, cache);
+
+              if (cache.getCachePerfStats().getReliableRegionsMissing() == 0){
+                reconnectAttemptCounter = 0;
+              }
+              else {
+                // this try failed. The new cache will call reconnect again
+              }
+            }
+            catch (CancelException ignor) {
+              logger.warn("Exception occured while trying to create the cache during reconnect",ignor);
+              reconnectDS.disconnect();
+              reconnectDS = null;
+            }
+            catch (Exception e) {
+              logger.warn(LocalizedMessage.create(LocalizedStrings.InternalDistributedSystem_EXCEPTION_OCCURED_WHILE_TRYING_TO_CREATE_THE_CACHE_DURING_RECONNECT), e);
+            }
+          }
+        }
+
+        if (reconnectDS != null && reconnectDS.isConnected()) {
+          // make sure the new DS and cache are stable before exiting this loop
+          try {
+            Thread.sleep(config.getMemberTimeout() * 3);
+          } catch (InterruptedException e) {
+            logger.info("Reconnect thread has been interrupted - exiting");
+            Thread.currentThread().interrupt();
+            return;
+          }
+        }
+
+
+      if (isReconnectCancelled()) {
+        reconnectDS.disconnect();
+      } else {
+        reconnectDS.isReconnectingDS = false;
+        notifyReconnectListeners(this, this.reconnectDS, false);
+      }
+
+      attemptingToReconnect = false;
-    
-    boolean cancelled;
-    synchronized(this.reconnectCancelledLock) { 
-      cancelled = this.reconnectCancelled;
-    }
-    if (cancelled) {
-      if (isDebugEnabled) {
-        logger.debug("reconnect can no longer be done because of an explicit disconnect");
-      }
+
+    if (isReconnectCancelled()) {
+      logger.debug("reconnect can no longer be done because of an explicit disconnect");
+    } else {
+      logger.info("Reconnect completed.\nNew DistributedSystem is {}\nNew Cache is {}", reconnectDS, cache);
-    try {
-      DM newDM = this.reconnectDS.getDistributionManager();
-      if ( !inhibitCacheForSQLFire && (newDM instanceof DistributionManager) ) {
-        // sqlfire will have already replayed DDL and recovered.
-        // Admin systems don't carry a cache, but for others we can now create
-        // a cache
-        if (((DistributionManager)newDM).getDMType() != DistributionManager.ADMIN_ONLY_DM_TYPE) {
-          try {
-            CacheConfig config = new CacheConfig();
-            if (cacheXML != null) {
-              config.setCacheXMLDescription(cacheXML);
-            }
-            cache = GemFireCacheImpl.create(this.reconnectDS, config);
-            
-            createAndStartCacheServers(cacheServerCreation, cache);
-
-            if (cache.getCachePerfStats().getReliableRegionsMissing() == 0){
-              reconnectAttemptCounter = 0;
-              logger.info("Reconnected properly");
-            }
-            else {
-              // this try failed. The new cache will call reconnect again
-            }
-          }
-          catch (CancelException ignor) {
-              //getLogWriter().warning("Exception occured while trying to create the cache during reconnect : "+ignor.toString());
-              throw ignor;
-              // this.reconnectDS.reconnect();
-          }
-          catch (Exception e) {
-            logger.warn(LocalizedMessage.create(LocalizedStrings.InternalDistributedSystem_EXCEPTION_OCCURED_WHILE_TRYING_TO_CREATE_THE_CACHE_DURING_RECONNECT), e);
-          }
-        }
-      }
-    } finally {
-      attemptingToReconnect = false;
-    }
-   * @since 5.7
+   * @since GemFire 5.7
-//      (new ManagerLogWriter(LogWriterImpl.FINE_LEVEL, System.out)).fine("IDS.waitUntilReconnected: reconnectCancelled = "+reconnectCancelled
-//          +"; reconnectDS="+reconnectDS);
-          
-      while (attemptingToReconnect && (recon == null || !recon.isConnected())) {
-        synchronized(this.reconnectCancelledLock) {
-          if (this.reconnectCancelled) {
-            break;
-          }
+      while (isReconnecting()) {
+        if (this.reconnectCancelled) {
+          break;
-        if (recon == null) {
-          recon = this.reconnectDS;
-        }
-//          (new ManagerLogWriter(LogWriterImpl.FINE_LEVEL, System.out)).fine("IDS.waitUntilReconnected timed out");
-//      (new ManagerLogWriter(LogWriterImpl.FINE_LEVEL, System.out)).fine("IDS.waitUntilReconnected finished & returning: attemptingToReconnect="
-//                +attemptingToReconnect+"; reconnectDS=" + recon);
+
+      recon = this.reconnectDS;
-    synchronized(this.reconnectCancelledLock) {
-      this.reconnectCancelled = true;
-    }
+    this.reconnectCancelled = true;

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 UPD40 INS31 UPD74 MOV74 MOV8 MOV8 MOV8 MOV8 MOV8 MOV29 MOV83 UPD39 MOV39 UPD42 MOV42 INS8 INS83 UPD42 MOV8 UPD66 INS27 INS27 INS27 INS25 MOV25 UPD43 MOV60 MOV53 MOV60 MOV41 MOV60 MOV41 INS60 INS25 INS25 MOV60 INS25 MOV41 MOV21 INS25 MOV21 MOV60 MOV25 MOV60 MOV60 MOV60 MOV25 MOV60 MOV60 MOV60 MOV60 MOV60 MOV25 MOV60 MOV21 MOV25 MOV60 MOV25 MOV60 MOV25 MOV25 INS54 INS25 MOV21 INS40 INS45 INS40 INS45 INS40 INS45 INS27 UPD66 UPD66 UPD66 UPD66 UPD66 INS32 MOV8 MOV32 MOV8 INS42 UPD66 UPD66 UPD42 UPD74 MOV74 UPD66 INS43 INS59 INS38 INS8 INS42 INS8 INS38 INS8 INS9 INS27 INS8 MOV27 MOV8 INS8 INS32 INS8 INS8 UPD66 INS40 INS45 MOV32 INS42 UPD42 UPD43 MOV5 UPD42 MOV42 INS42 INS22 INS42 INS41 INS41 UPD42 INS36 INS42 MOV41 INS22 INS42 INS41 INS61 MOV25 MOV21 MOV21 MOV25 MOV25 MOV25 INS42 MOV21 MOV25 MOV21 INS41 INS21 MOV21 UPD42 MOV52 UPD42 MOV42 INS9 INS9 INS27 INS9 INS52 INS42 INS9 MOV27 INS8 INS32 INS8 INS32 INS32 MOV5 INS34 INS27 INS38 INS25 MOV25 MOV25 MOV21 MOV25 MOV21 MOV54 MOV54 INS25 MOV21 MOV60 MOV54 MOV60 MOV25 MOV25 INS42 INS21 INS42 INS42 INS45 INS42 INS42 UPD42 MOV42 MOV25 INS84 INS42 INS33 INS32 INS32 INS8 INS32 INS32 INS8 MOV62 UPD27 MOV27 INS32 INS43 MOV43 UPD42 MOV42 UPD42 MOV42 INS42 INS10 INS42 INS41 INS42 INS41 MOV25 MOV21 MOV27 INS32 INS54 INS42 INS42 UPD40 INS42 INS42 INS42 INS32 MOV22 MOV8 MOV21 INS18 INS18 MOV27 INS8 INS42 INS42 INS8 INS12 INS42 MOV8 INS18 MOV32 INS54 INS21 INS44 INS8 UPD43 INS8 INS12 MOV12 INS32 INS43 INS42 MOV21 INS21 INS41 UPD45 UPD42 INS32 MOV60 MOV25 MOV21 MOV21 INS25 MOV44 INS8 INS42 INS42 INS27 INS42 INS32 INS42 MOV27 INS8 INS8 MOV21 INS21 INS21 INS32 INS34 UPD42 UPD45 INS32 INS42 UPD45 MOV21 INS32 INS7 INS42 INS42 INS42 INS42 UPD42 UPD45 INS42 INS42 INS42 INS42 INS33 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL45 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL45 DEL45 DEL45 DEL40 DEL40 DEL33 DEL27 DEL42 DEL32 DEL33 DEL27 DEL25 DEL52 DEL42 DEL22 DEL42 DEL51 DEL8 DEL42 DEL51 DEL8 DEL42 DEL42 DEL32 DEL42 DEL51 DEL8 DEL52 DEL42 DEL22 DEL51 DEL8 DEL52 DEL42 DEL22 DEL51 DEL8 DEL66 DEL66 DEL65 DEL29 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL22 DEL42 DEL7 DEL21 DEL8 DEL51 DEL8 DEL31 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL52 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL32 DEL42 DEL83 DEL39 DEL42 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL52 DEL42 DEL22 DEL8 DEL51 DEL52 DEL42 DEL22 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL10 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL8 DEL51 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL51 DEL8 DEL42 DEL33 DEL27 DEL39 DEL42 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL51 DEL8 DEL42 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL27 DEL42 DEL8 DEL41 DEL42 DEL36 DEL52 DEL42 DEL22 DEL42 DEL8 DEL25 DEL41 DEL42 DEL52 DEL42 DEL22 DEL8 DEL51 DEL22 DEL8 DEL51 DEL52 DEL42 DEL22 DEL8 DEL51 DEL61 DEL39 DEL42 DEL9 DEL59 DEL60 DEL8 DEL25 DEL8 DEL54 DEL39 DEL42 DEL59 DEL60 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL8 DEL51 DEL42 DEL42 DEL8 DEL25 DEL41 DEL8 DEL25 DEL42 DEL38 DEL36 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL42 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL25 DEL8 DEL8 DEL54 DEL8 DEL42 DEL42 DEL33 DEL27 DEL42 DEL32 DEL38 DEL27 DEL36 DEL27 DEL52 DEL42 DEL22 DEL8 DEL51 DEL42 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL8 DEL51