Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)

This reverts commit 2f6bf013368df5a4b5efe68162a4953f9a88bbf2.
+import java.util.HashMap;
+import java.util.Map;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
+  @SuppressWarnings("unchecked")
-
-
-    RegionProvider regionProvider = context.getRegionProvider();
+    RegionProvider rC = context.getRegionProvider();
-    if (isStorage()) {
+    if (isStorage())
-    }
-    if (destination != null) {
-      try (AutoCloseableLock regionLock = withRegionLock(context, destination)) {
-        doActualSetOperation(command, context, commandElems, setsStartIndex, regionProvider,
-            destination, firstSetKey);
-      } catch (InterruptedException e) {
-        Thread.currentThread().interrupt();
-        command.setResponse(
-            Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      } catch (TimeoutException e) {
-        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-            "Timeout acquiring lock. Please try again."));
-      }
-    } else {
-      doActualSetOperation(command, context, commandElems, setsStartIndex, regionProvider,
-          destination, firstSetKey);
+    if (!isStorage())
+      checkDataType(firstSetKey, RedisDataType.REDIS_SET, context);
+    Region<ByteArrayWrapper, Boolean> region =
+        (Region<ByteArrayWrapper, Boolean>) rC.getRegion(firstSetKey);
+    Set<ByteArrayWrapper> firstSet = null;
+    if (region != null) {
+      firstSet = new HashSet<ByteArrayWrapper>(region.keySet());
-  }
-
-  private boolean doActualSetOperation(Command command, ExecutionHandlerContext context,
-      List<byte[]> commandElems, int setsStartIndex,
-      RegionProvider regionProvider, ByteArrayWrapper destination,
-      ByteArrayWrapper firstSetKey) {
-    Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = this.getRegion(context);
-    Set<ByteArrayWrapper> firstSet = region.get(firstSetKey);
-
-    List<Set<ByteArrayWrapper>> setList = new ArrayList<>();
+    ArrayList<Set<ByteArrayWrapper>> setList = new ArrayList<Set<ByteArrayWrapper>>();
-
-      Set<ByteArrayWrapper> entry = region.get(key);
-      if (entry != null) {
-        setList.add(entry);
-      } else if (this instanceof SInterExecutor) {
-        setList.add(new HashSet<>());
-      }
+      checkDataType(key, RedisDataType.REDIS_SET, context);
+      region = (Region<ByteArrayWrapper, Boolean>) rC.getRegion(key);
+      if (region != null)
+        setList.add(region.keySet());
+      else if (this instanceof SInterExecutor)
+        setList.add(null);
-
-    if (setList.isEmpty() && !isStorage()) {
-      respondBulkStrings(command, context, firstSet);
-      return true;
+    if (setList.isEmpty()) {
+      if (isStorage()) {
+        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), 0));
+        context.getRegionProvider().removeKey(destination);
+      } else {
+        respondBulkStrings(command, context, firstSet);
+      }
+      return;
-      Set<ByteArrayWrapper> newSet = null;
-      regionProvider.removeKey(destination);
+      Region<ByteArrayWrapper, Boolean> newRegion = null; // (Region<ByteArrayWrapper, Boolean>)
+                                                          // rC.getRegion(destination);
+      rC.removeKey(destination);
-        Set<ByteArrayWrapper> set = new HashSet<>();
-        for (ByteArrayWrapper entry : resultSet) {
-          set.add(entry);
-        }
-        if (!set.isEmpty()) {
-          newSet = new HashSet<>(set);
-          region.put(destination, newSet);
-          context.getKeyRegistrar().register(destination, RedisDataType.REDIS_SET);
+        Map<ByteArrayWrapper, Boolean> map = new HashMap<ByteArrayWrapper, Boolean>();
+        for (ByteArrayWrapper entry : resultSet)
+          map.put(entry, Boolean.TRUE);
+        if (!map.isEmpty()) {
+          newRegion = (Region<ByteArrayWrapper, Boolean>) rC.getOrCreateRegion(destination,
+              RedisDataType.REDIS_SET, context);
+          newRegion.putAll(map);
-            .setResponse(
-                Coder.getIntegerResponse(context.getByteBufAllocator(), resultSet.size()));
+            .setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), resultSet.size()));
-      if (resultSet == null || resultSet.isEmpty()) {
+      if (resultSet == null || resultSet.isEmpty())
-      } else {
+      else
-      }
-    return false;

MOV26 MOV26 UPD40 UPD40 INS31 INS79 MOV78 MOV83 MOV39 MOV42 MOV44 MOV44 INS8 INS42 INS45 MOV60 MOV60 MOV25 MOV60 MOV60 MOV25 MOV60 INS25 INS60 MOV60 INS25 MOV60 INS24 INS25 MOV60 MOV25 MOV21 MOV38 INS21 INS74 INS59 INS27 INS8 UPD74 MOV74 MOV58 MOV27 MOV37 INS8 MOV32 INS8 MOV8 UPD42 INS32 INS43 INS43 INS43 INS42 INS11 INS33 INS42 INS33 MOV21 INS43 MOV60 MOV21 INS21 MOV25 MOV25 INS41 INS25 INS42 INS42 INS40 INS42 INS42 UPD42 MOV42 INS42 INS74 INS32 INS7 INS42 UPD74 MOV74 INS7 INS21 INS32 MOV8 UPD74 MOV27 MOV21 MOV21 INS43 MOV43 INS43 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 MOV14 MOV43 UPD42 UPD42 INS40 INS42 INS11 UPD42 MOV32 INS21 INS42 INS21 UPD43 MOV43 UPD43 UPD42 UPD42 INS42 INS42 UPD74 INS32 INS74 INS32 INS32 MOV32 INS32 UPD42 UPD42 UPD74 INS21 INS43 INS42 INS42 MOV43 MOV43 UPD43 MOV43 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 INS33 INS32 INS42 INS42 UPD43 INS43 UPD42 MOV32 INS21 INS42 UPD42 UPD42 INS34 INS42 INS42 UPD42 INS42 UPD74 UPD42 UPD42 INS40 UPD42 INS7 UPD43 INS43 INS43 UPD42 MOV42 INS11 UPD42 MOV42 UPD42 UPD42 UPD42 INS42 INS42 INS74 INS32 UPD43 MOV43 INS43 INS43 UPD42 MOV42 UPD42 MOV42 MOV42 INS40 UPD42 MOV42 UPD42 INS42 INS42 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL21 DEL8 DEL21 DEL8 DEL45 DEL27 DEL9 DEL41 DEL21 DEL8 DEL74 DEL42 DEL14 DEL7 DEL21 DEL32 DEL21 DEL42 DEL32 DEL40 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL12 DEL54 DEL8 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL39 DEL85 DEL5 DEL74 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL44 DEL42 DEL52 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL8 DEL24 DEL9 DEL41 DEL8 DEL31