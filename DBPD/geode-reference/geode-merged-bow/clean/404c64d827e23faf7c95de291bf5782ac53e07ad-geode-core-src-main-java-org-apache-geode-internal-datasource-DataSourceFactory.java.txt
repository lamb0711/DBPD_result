GEODE-5861: change jdbc connector to use jndi binding (#2650)

The jdbc connector now uses the existing "jndi-binding" xml/gfsh instead of adding "jdbc-connection" xml/gfsh. All the old "jdbc-connection" commands have been removed.

The create jndi-binding command has been changed in the following ways:
* the driver-class-name gfsh parameter is now optional.
* --url can be used as a replacement for --connnection-url
* the --type now defaults to SIMPLE (it used to not have a default).
* the --type=POOLED now defaults to creating a Hikari pool and an SPI exists to customize the class 
that implements the pool.

New External APIS:
  DataSourceFactoryTest: this is the SPI users can implement for the POOLED type.

Co-authored-by: @BenjaminPerryRoss 
+import java.util.Properties;
-import javax.sql.ConnectionPoolDataSource;
+import org.apache.geode.datasource.PooledDataSourceFactory;
+  private static final String DEFAULT_CONNECTION_POOL_DS_CLASS =
+      "org.apache.geode.connectors.jdbc.JdbcPooledDataSourceFactory";
+
-    if (configs.getJDBCDriver() == null) {
-      logger.error("DataSourceFactory::getSimpleDataSource:JDBC Driver is not available");
-      throw new DataSourceCreateException(
-          "DataSourceFactory::getSimpleDataSource:JDBC Driver is not available");
-    }
-   *
-   * @param configMap a map containing configurations required for datasource.
-   * @return ???
-      logger.error(
-          "DataSourceFactory::getPooledDataSource:ConnectionPoolDataSource class name for the ResourceManager is not available");
-      throw new DataSourceCreateException(
-          "DataSourceFactory::getPooledDataSource:ConnectionPoolDataSource class name for the ResourceManager is not available");
+      connpoolClassName = DEFAULT_CONNECTION_POOL_DS_CLASS;
-      Class cl = ClassPathLoader.getLatest().forName(connpoolClassName);
-      Object Obj = cl.newInstance();
-      invokeAllMethods(cl, Obj, props);
-      return new GemFireConnPooledDataSource((ConnectionPoolDataSource) Obj, configs);
+      Properties poolProperties = createPoolProperties(configMap);
+      Properties dataSourceProperties = createDataSourceProperties(props);
+      Class<?> cl = ClassPathLoader.getLatest().forName(connpoolClassName);
+      PooledDataSourceFactory factory = (PooledDataSourceFactory) cl.newInstance();
+      return factory.createDataSource(poolProperties, dataSourceProperties);
+  static Properties createPoolProperties(Map<String, String> configMap) {
+    Properties result = new Properties();
+    if (configMap != null) {
+      for (Map.Entry<String, String> entry : configMap.entrySet()) {
+        if (entry.getValue() == null || entry.getValue().equals("")) {
+          continue;
+        }
+        if (entry.getKey().equals("type")) {
+          continue;
+        }
+        if (entry.getKey().equals("jndi-name")) {
+          continue;
+        }
+        if (entry.getKey().equals("transaction-type")) {
+          continue;
+        }
+        if (entry.getKey().equals("conn-pooled-datasource-class")) {
+          continue;
+        }
+        if (entry.getKey().equals("managed-conn-factory-class")) {
+          continue;
+        }
+        if (entry.getKey().equals("xa-datasource-class")) {
+          continue;
+        }
+        result.setProperty(entry.getKey(), entry.getValue());
+      }
+    }
+    return result;
+  }
+
+  private static Properties createDataSourceProperties(List<ConfigProperty> props) {
+    Properties result = new Properties();
+    if (props != null) {
+      for (ConfigProperty prop : props) {
+        result.setProperty(prop.getName(), prop.getValue());
+      }
+    }
+    return result;
+  }
+
+

MOV26 INS26 INS40 UPD40 INS23 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS42 INS42 INS45 INS42 INS74 INS42 INS60 INS25 INS41 INS42 INS74 INS42 INS60 INS25 INS41 INS43 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS43 INS43 INS43 INS59 INS27 INS8 INS42 INS60 INS60 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS70 INS42 INS42 INS42 INS42 INS14 INS42 INS33 INS70 INS7 INS43 INS59 INS43 INS59 INS74 UPD43 INS32 INS43 INS44 INS32 INS8 INS43 INS44 INS42 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 MOV43 INS76 UPD42 UPD42 INS11 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS25 INS25 INS25 INS25 INS25 INS25 INS25 INS21 INS42 INS43 INS42 INS21 INS42 UPD42 MOV42 INS42 MOV42 INS43 MOV32 INS43 INS43 INS43 INS27 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS8 INS32 INS42 INS32 INS42 INS40 INS42 INS42 INS27 INS32 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS32 INS42 INS45 INS18 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS32 INS32 INS33 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL66 DEL65 DEL66 DEL65 DEL42 DEL42 DEL45 DEL32 DEL42 DEL43 DEL45 DEL14 DEL53 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL42 DEL14