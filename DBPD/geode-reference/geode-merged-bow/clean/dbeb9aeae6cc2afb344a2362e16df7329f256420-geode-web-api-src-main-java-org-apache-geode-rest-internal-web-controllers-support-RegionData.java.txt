Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-  public RegionData() {
-  }
+  public RegionData() {}
-    Assert.state(StringUtils.hasText(this.regionNamePath), "The Region name/path was not properly initialized!");
+    Assert.state(StringUtils.hasText(this.regionNamePath),
+        "The Region name/path was not properly initialized!");
- public final void setRegionNamePath(final String regionNamePath) {
-   Assert.hasText(regionNamePath, "The name or path of the Region must be specified!");
-   this.regionNamePath = regionNamePath;
- }
+  public final void setRegionNamePath(final String regionNamePath) {
+    Assert.hasText(regionNamePath, "The name or path of the Region must be specified!");
+    this.regionNamePath = regionNamePath;
+  }
-    //We are adding null data into the response
-    //Assert.notNull(data, String.format("The data to add to Region (%1$s) cannot be null!", getRegionNamePath()));
-    //if(data != null) {
-      this.data.add(data);
-    //}
+    // We are adding null data into the response
+    // Assert.notNull(data, String.format("The data to add to Region (%1$s) cannot be null!",
+    // getRegionNamePath()));
+    // if(data != null) {
+    this.data.add(data);
+    // }
-      //Adding null data into the response
+      // Adding null data into the response
-      if (element != null) {
-        add(element);
-      }
-      */
+       * if (element != null) { add(element); }
+       */
-  
-  public void serialize(final JsonGenerator jsonGenerator, final SerializerProvider serializerProvider)
-    throws IOException
-  {
- 
-    //if(this!=null && this.size() > 1) {
+
+  public void serialize(final JsonGenerator jsonGenerator,
+      final SerializerProvider serializerProvider) throws IOException {
+
+    // if(this!=null && this.size() > 1) {
-    //}
-    
+    // }
+
-    
-    //if(this!=null && this.size() > 1) {
+
+    // if(this!=null && this.size() > 1) {
-    //}   
+    // }
-                               final SerializerProvider serializerProvider,
-                               final TypeSerializer typeSerializer)
-   throws IOException
-  {
+      final SerializerProvider serializerProvider, final TypeSerializer typeSerializer)
+      throws IOException {
-  
+

