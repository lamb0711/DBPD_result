Merge branch 'develop' into feature/GEODE-7049

-import java.util.HashSet;
+import java.util.Objects;
+import java.util.stream.Collectors;
-import joptsimple.internal.Strings;
-import org.apache.geode.management.api.ConfigurationResult;
+import org.apache.geode.management.configuration.Region;
-import org.apache.geode.management.runtime.RuntimeRegionInfo;
-      RegionConfig config = getRegionConfig(cms, regionName);
-      if (config == null) {
+      Set<String> calculatedGroups = getGroupsContainingRegion(cms, regionName);
+      if (calculatedGroups.isEmpty()) {
-      String[] calculatedGroups = config.getGroups().toArray(new String[0]);
-      if (groups != null && !containsExactlyInAnyOrder(groups, calculatedGroups)) {
-        info.addLine("--groups=" + Strings.join(groups, ",") + " is ignored.");
+      if (groups != null && !calculatedGroups.containsAll(Arrays.asList(groups))) {
+        return ResultModel
+            .createError("Region " + regionName + " does not exist in some of the groups.");
-      groups = calculatedGroups;
+      if (groups == null) {
+        // the calculatedGroups will have null value to indicate the "cluster" level, in thise case
+        // we want the groups to an empty array
+        groups = calculatedGroups.stream().filter(Objects::nonNull).toArray(String[]::new);
+      }
-  private static boolean containsExactlyInAnyOrder(String[] a, String[] b) {
-    return new HashSet(Arrays.asList(a)).equals(new HashSet(Arrays.asList(b)));
-  }
-
-      RegionConfig region = getRegionConfig(cms, regionName);
-      if (region != null) {
+      Set<String> groupsContainingRegion = getGroupsContainingRegion(cms, regionName);
+      if (!groupsContainingRegion.isEmpty()) {
-  RegionConfig getRegionConfig(ClusterManagementService cms,
+  // if region belongs to "cluster" level, it will return a set of one null value
+  Set<String> getGroupsContainingRegion(ClusterManagementService cms,
-    RegionConfig regionConfig = new RegionConfig();
+    Region regionConfig = new Region();
-    List<ConfigurationResult<RegionConfig, RuntimeRegionInfo>> list =
-        cms.list(regionConfig).getResult();
-    if (list.isEmpty()) {
-      return null;
-    } else {
-      return list.get(0).getConfig();
-    }
+    List<Region> regions = cms.list(regionConfig).getConfigResult();
+    return regions.stream().map(Region::getGroup)
+        .collect(Collectors.toSet());

MOV26 MOV26 UPD40 UPD40 UPD40 INS74 UPD42 INS43 INS43 INS41 INS42 UPD42 MOV42 UPD43 UPD74 INS32 INS60 INS25 UPD42 UPD43 MOV43 UPD42 INS32 UPD42 MOV42 INS32 INS74 MOV59 INS32 INS27 INS8 INS74 INS38 UPD43 UPD42 UPD42 INS32 UPD42 MOV42 INS90 INS42 INS42 INS43 INS43 INS42 INS42 INS41 INS42 INS33 MOV21 INS43 INS43 UPD42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 INS32 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 MOV27 INS32 UPD42 MOV42 INS42 UPD42 MOV42 UPD45 INS42 UPD45 INS32 INS42 INS89 INS32 INS42 INS90 MOV5 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL32 DEL34 DEL3 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL43 DEL85 DEL5 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL32 DEL21 DEL42 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL41 DEL8 DEL31 DEL43 DEL42 DEL33 DEL27 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL32 DEL33 DEL41 DEL8 DEL42 DEL34 DEL32 DEL32 DEL41 DEL8 DEL25