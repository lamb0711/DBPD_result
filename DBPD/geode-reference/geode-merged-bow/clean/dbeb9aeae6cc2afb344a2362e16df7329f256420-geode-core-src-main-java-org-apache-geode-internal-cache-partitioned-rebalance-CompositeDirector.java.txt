Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * The composite director performs a complete rebalance, which can remove over
- * redundant buckets, satisfy redundancy, move buckets, and move primaries.
+ * The composite director performs a complete rebalance, which can remove over redundant buckets,
+ * satisfy redundancy, move buckets, and move primaries.
-  
+
-  
+
-  
+
-  * @param removeOverRedundancy true to remove buckets that exceed redundancy
-  * levels
-  * @param satisfyRedundancy true to satisfy redundancy as part of the operation
-  * @param moveBuckets true to move buckets as part of the operation
-  * @param movePrimaries true to move primaries as part of the operation
-  */
-  public CompositeDirector(boolean removeOverRedundancy,
-      boolean satisfyRedundancy, boolean moveBuckets,
-      boolean movePrimaries) {
+   * @param removeOverRedundancy true to remove buckets that exceed redundancy levels
+   * @param satisfyRedundancy true to satisfy redundancy as part of the operation
+   * @param moveBuckets true to move buckets as part of the operation
+   * @param movePrimaries true to move primaries as part of the operation
+   */
+  public CompositeDirector(boolean removeOverRedundancy, boolean satisfyRedundancy,
+      boolean moveBuckets, boolean movePrimaries) {
-  
-  
+
+
-  public boolean isRebalanceNecessary(boolean redundancyImpaired,
-      boolean withPersistence) {
-    //We can skip a rebalance is redundancy is not impaired and we
-    //don't need to move primaries.
+  public boolean isRebalanceNecessary(boolean redundancyImpaired, boolean withPersistence) {
+    // We can skip a rebalance is redundancy is not impaired and we
+    // don't need to move primaries.
-    if(this.removeOverRedundancy) {
+    if (this.removeOverRedundancy) {
-    if(!attemptedOperation) {
+    if (!attemptedOperation) {
-    
-    if(!attemptedOperation && this.satisfyRedundancy) {
+
+    if (!attemptedOperation && this.satisfyRedundancy) {
-    if(!attemptedOperation) {
+    if (!attemptedOperation) {
-    
-    if(!attemptedOperation && this.moveBuckets) {
+
+    if (!attemptedOperation && this.moveBuckets) {
-    if(!attemptedOperation) {
+    if (!attemptedOperation) {
-    
-    if(!attemptedOperation && this.movePrimaries) {
+
+    if (!attemptedOperation && this.movePrimaries) {
-    if(!attemptedOperation) {
-      this.movePrimaries= false;
+    if (!attemptedOperation) {
+      this.movePrimaries = false;
-      
+

UPD66 UPD66 UPD66 DEL66