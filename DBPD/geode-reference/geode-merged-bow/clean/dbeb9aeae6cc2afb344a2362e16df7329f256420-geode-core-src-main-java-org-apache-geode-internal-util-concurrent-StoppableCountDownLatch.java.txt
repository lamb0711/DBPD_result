Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  static final long RETRY_TIME = Long.getLong(DistributionConfig.GEMFIRE_PREFIX + "stoppable-retry-interval", 2000).longValue();
+  static final long RETRY_TIME = Long
+      .getLong(DistributionConfig.GEMFIRE_PREFIX + "stoppable-retry-interval", 2000).longValue();
-  
+
-  
+
-   * @param count the number of times {@link #countDown} must be invoked
-   *        before threads can pass through {@link #await()}
+   * @param count the number of times {@link #countDown} must be invoked before threads can pass
+   *        through {@link #await()}
+   *
-      Assert.assertTrue(stopper != null);
-      this.latch = new CountDownLatch(count);
-      this.stopper = stopper;
+    Assert.assertTrue(stopper != null);
+    this.latch = new CountDownLatch(count);
+    this.stopper = stopper;
-      for (;;) {
-        stopper.checkCancelInProgress(null);
-        if (latch.await(RETRY_TIME, TimeUnit.MILLISECONDS)) {
-          break;
-        }
+    for (;;) {
+      stopper.checkCancelInProgress(null);
+      if (latch.await(RETRY_TIME, TimeUnit.MILLISECONDS)) {
+        break;
+    }
+   *
-   * @throws InterruptedException
+  public boolean await(final long timeout, final TimeUnit unit) throws InterruptedException {
+    stopper.checkCancelInProgress(null);
+    return latch.await(timeout, unit);
+  }
+
-      return "(Stoppable) " + latch.toString();
+    return "(Stoppable) " + latch.toString();

INS31 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS83 INS39 INS42 INS83 INS43 INS42 INS42 INS21 INS41 UPD66 UPD66 INS42 INS32 INS32 INS42 INS42 INS33 INS42 INS42 INS42 INS42 DEL42 DEL65