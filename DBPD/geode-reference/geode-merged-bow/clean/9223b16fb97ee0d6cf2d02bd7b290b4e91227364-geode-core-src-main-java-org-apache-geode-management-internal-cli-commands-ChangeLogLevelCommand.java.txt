GEODE-4527: get rid of static getAnyInstance or getInstance call to get the cache. (#1596)


+import org.apache.logging.log4j.Logger;
-import org.apache.geode.LogWriter;
-import org.apache.geode.internal.cache.GemFireCacheImpl;
+import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.management.internal.cli.LogWrapper;
+  private static Logger logger = LogService.getLogger();
+
-    try {
-      if ((memberIds == null || memberIds.length == 0) && (grps == null || grps.length == 0)) {
-        return ResultBuilder
-            .createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__SPECIFY_GRP_OR_MEMBER);
-      }
-      InternalCache cache = getCache();
-      LogWriter logger = cache.getLogger();
-
-      Set<DistributedMember> dsMembers = new HashSet<>();
-      Set<DistributedMember> ds = getAllMembers();
-
-      if (grps != null && grps.length > 0) {
-        for (String grp : grps) {
-          dsMembers.addAll(cache.getDistributedSystem().getGroupMembers(grp));
-        }
-      }
-
-      if (memberIds != null && memberIds.length > 0) {
-        for (String member : memberIds) {
-          for (DistributedMember mem : ds) {
-            if (mem.getName() != null
-                && (mem.getName().equals(member) || mem.getId().equals(member))) {
-              dsMembers.add(mem);
-              break;
-            }
-          }
-        }
-      }
-
-      if (dsMembers.size() == 0) {
-        return ResultBuilder.createGemFireErrorResult(
-            "No members were found matching the given member IDs or groups.");
-      }
-
-      Function logFunction = new ChangeLogLevelFunction();
-      FunctionService.registerFunction(logFunction);
-      Object[] functionArgs = new Object[1];
-      functionArgs[0] = logLevel;
-
-      CompositeResultData compositeResultData = ResultBuilder.createCompositeResultData();
-      CompositeResultData.SectionResultData section = compositeResultData.addSection("section");
-      TabularResultData resultTable = section.addTable("ChangeLogLevel");
-      resultTable = resultTable.setHeader("Summary");
-
-      Execution execution = FunctionService.onMembers(dsMembers).setArguments(functionArgs);
-      if (execution == null) {
-        return ResultBuilder.createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__CANNOT_EXECUTE);
-      }
-      List<?> resultList = (List<?>) execution.execute(logFunction).getResult();
-
-      for (Object object : resultList) {
-        try {
-          if (object instanceof Throwable) {
-            logger.warning(
-                "Exception in ChangeLogLevelFunction " + ((Throwable) object).getMessage(),
-                ((Throwable) object));
-            continue;
-          }
-
-          if (object != null) {
-            Map<String, String> resultMap = (Map<String, String>) object;
-            Map.Entry<String, String> entry = resultMap.entrySet().iterator().next();
-
-            if (entry.getValue().contains("ChangeLogLevelFunction exception")) {
-              resultTable.accumulate(CliStrings.CHANGE_LOGLEVEL__COLUMN_MEMBER, entry.getKey());
-              resultTable.accumulate(CliStrings.CHANGE_LOGLEVEL__COLUMN_STATUS, "false");
-            } else {
-              resultTable.accumulate(CliStrings.CHANGE_LOGLEVEL__COLUMN_MEMBER, entry.getKey());
-              resultTable.accumulate(CliStrings.CHANGE_LOGLEVEL__COLUMN_STATUS, "true");
-            }
-
-          }
-        } catch (Exception ex) {
-          LogWrapper.getInstance(getCache()).warning("change log level command exception " + ex);
-        }
-      }
-
-      Result result = ResultBuilder.buildResult(compositeResultData);
-      logger.info("change log-level command result=" + result);
-      return result;
-    } catch (Exception ex) {
-      GemFireCacheImpl.getInstance().getLogger().error("GFSH Changeloglevel exception: " + ex);
-      return ResultBuilder.createUserErrorResult(ex.getMessage());
+    if ((memberIds == null || memberIds.length == 0) && (grps == null || grps.length == 0)) {
+      return ResultBuilder
+          .createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__SPECIFY_GRP_OR_MEMBER);
+
+    InternalCache cache = getCache();
+
+    Set<DistributedMember> dsMembers = new HashSet<>();
+    Set<DistributedMember> ds = getAllMembers();
+
+    if (grps != null && grps.length > 0) {
+      for (String grp : grps) {
+        dsMembers.addAll(cache.getDistributedSystem().getGroupMembers(grp));
+      }
+    }
+
+    if (memberIds != null && memberIds.length > 0) {
+      for (String member : memberIds) {
+        for (DistributedMember mem : ds) {
+          if (mem.getName() != null
+              && (mem.getName().equals(member) || mem.getId().equals(member))) {
+            dsMembers.add(mem);
+            break;
+          }
+        }
+      }
+    }
+
+    if (dsMembers.size() == 0) {
+      return ResultBuilder.createGemFireErrorResult(
+          "No members were found matching the given member IDs or groups.");
+    }
+
+    Function logFunction = new ChangeLogLevelFunction();
+    FunctionService.registerFunction(logFunction);
+    Object[] functionArgs = new Object[1];
+    functionArgs[0] = logLevel;
+
+    CompositeResultData compositeResultData = ResultBuilder.createCompositeResultData();
+    CompositeResultData.SectionResultData section = compositeResultData.addSection("section");
+    TabularResultData resultTable = section.addTable("ChangeLogLevel");
+    resultTable = resultTable.setHeader("Summary");
+
+    Execution execution = FunctionService.onMembers(dsMembers).setArguments(functionArgs);
+    if (execution == null) {
+      return ResultBuilder.createUserErrorResult(CliStrings.CHANGE_LOGLEVEL__MSG__CANNOT_EXECUTE);
+    }
+    List<?> resultList =
+        (List<?>) this.executeFunction(logFunction, functionArgs, dsMembers).getResult();
+    for (Object object : resultList) {
+      try {
+        if (object instanceof Throwable) {
+          logger.warn("Exception in ChangeLogLevelFunction " + ((Throwable) object).getMessage(),
+              ((Throwable) object));
+          continue;
+        }
+
+        if (object != null) {
+          Map<String, String> resultMap = (Map<String, String>) object;
+          Map.Entry<String, String> entry = resultMap.entrySet().iterator().next();
+
+          if (entry.getValue().contains("ChangeLogLevelFunction exception")) {
+            resultTable.accumulate(CliStrings.CHANGE_LOGLEVEL__COLUMN_MEMBER, entry.getKey());
+            resultTable.accumulate(CliStrings.CHANGE_LOGLEVEL__COLUMN_STATUS, "false");
+          } else {
+            resultTable.accumulate(CliStrings.CHANGE_LOGLEVEL__COLUMN_MEMBER, entry.getKey());
+            resultTable.accumulate(CliStrings.CHANGE_LOGLEVEL__COLUMN_STATUS, "true");
+          }
+
+        }
+      } catch (Exception ex) {
+        logger.warn("change log level command exception " + ex);
+      }
+    }
+
+    Result result = ResultBuilder.buildResult(compositeResultData);
+    logger.info("change log-level command result=" + result);
+    return result;
+

MOV26 MOV26 UPD40 UPD40 INS23 INS83 INS83 INS43 INS59 MOV8 INS42 INS42 INS32 INS42 INS42 INS52 UPD42 UPD42 UPD42 INS42 UPD42 MOV42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8