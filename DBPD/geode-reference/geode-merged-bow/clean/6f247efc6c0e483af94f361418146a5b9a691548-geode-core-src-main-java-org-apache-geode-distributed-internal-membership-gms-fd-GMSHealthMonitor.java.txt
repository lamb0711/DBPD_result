GEODE-7479: Change Membership interface to use MemberIdentifier interface (#4420)

Changing all classes in Membership to be parameterized by an ID type,
which extends MemberIdentifier. This allows core to create a membership
system that manages InternalDistributedMember objects in a type safe
way.

Removing all uses of InternalDistributedMember, DistributedMember, and
friends from within the membership code.

-public class GMSHealthMonitor implements HealthMonitor {
+public class GMSHealthMonitor<ID extends MemberIdentifier> implements HealthMonitor<ID> {
-  private Services services;
-  private volatile GMSMembershipView currentView;
-  private volatile MemberIdentifier nextNeighbor;
+  private Services<ID> services;
+  private volatile GMSMembershipView<ID> currentView;
+  private volatile ID nextNeighbor;
-  private MemberIdentifier localAddress;
+  private ID localAddress;
-  final ConcurrentMap<MemberIdentifier, TimeStamp> memberTimeStamps =
+  final ConcurrentMap<ID, TimeStamp> memberTimeStamps =
-  private final ConcurrentHashMap<MemberIdentifier, GMSMembershipView> suspectedMemberIds =
+  private final ConcurrentHashMap<ID, GMSMembershipView<ID>> suspectedMemberIds =
-  private final List<MemberIdentifier> membersInFinalCheck =
+  private final List<ID> membersInFinalCheck =
-  private final Map<GMSMembershipView, Set<SuspectRequest>> suspectRequestsInView = new HashMap<>();
+  private final Map<GMSMembershipView<ID>, Set<SuspectRequest<ID>>> suspectRequestsInView =
+      new HashMap<>();
-      MemberIdentifier neighbor = nextNeighbor;
+      ID neighbor = nextNeighbor;
-        GMSMembershipView myView = GMSHealthMonitor.this.currentView;
+        GMSMembershipView<ID> myView = GMSHealthMonitor.this.currentView;
-          for (MemberIdentifier member : myView.getMembers()) {
+          for (ID member : myView.getMembers()) {
-    private AbstractGMSMessage responseMsg;
+    private AbstractGMSMessage<ID> responseMsg;
-    public AbstractGMSMessage getResponseMsg() {
+    public AbstractGMSMessage<ID> getResponseMsg() {
-    public void setResponseMsg(AbstractGMSMessage responseMsg) {
+    public void setResponseMsg(AbstractGMSMessage<ID> responseMsg) {
-        MemberIdentifier gmbr = localAddress;
+        ID gmbr = localAddress;
-  public void contactedBy(MemberIdentifier sender) {
+  public void contactedBy(ID sender) {
-  private void contactedBy(MemberIdentifier sender, long timeStamp) {
+  private void contactedBy(ID sender, long timeStamp) {
-  private HeartbeatRequestMessage constructHeartbeatRequestMessage(
-      final MemberIdentifier mbr) {
+  private HeartbeatRequestMessage<ID> constructHeartbeatRequestMessage(
+      final ID mbr) {
-    final HeartbeatRequestMessage hrm = new HeartbeatRequestMessage(mbr, reqId);
+    final HeartbeatRequestMessage<ID> hrm = new HeartbeatRequestMessage<ID>(mbr, reqId);
-  private void checkMember(final MemberIdentifier mbr) {
-    final GMSMembershipView cv = GMSHealthMonitor.this.currentView;
+  private void checkMember(final ID mbr) {
+    final GMSMembershipView<ID> cv = GMSHealthMonitor.this.currentView;
-  private void initiateSuspicion(MemberIdentifier mbr, String reason) {
+  private void initiateSuspicion(ID mbr, String reason) {
-    sendSuspectRequest(Collections.singletonList(new SuspectRequest(mbr, reason)));
+    sendSuspectRequest(Collections.singletonList(new SuspectRequest<ID>(mbr, reason)));
-  private boolean doCheckMember(MemberIdentifier member, boolean waitForResponse) {
+  private boolean doCheckMember(ID member, boolean waitForResponse) {
-    final HeartbeatRequestMessage hrm = constructHeartbeatRequestMessage(member);
+    final HeartbeatRequestMessage<ID> hrm = constructHeartbeatRequestMessage(member);
-      Set<MemberIdentifier> membersNotReceivedMsg = this.services.getMessenger().send(hrm);
+      Set<ID> membersNotReceivedMsg = this.services.getMessenger().send(hrm);
-  boolean doTCPCheckMember(MemberIdentifier suspectMember, int port,
+  boolean doTCPCheckMember(ID suspectMember, int port,
-  boolean doTCPCheckMember(MemberIdentifier suspectMember, Socket clientSocket) {
+  boolean doTCPCheckMember(ID suspectMember, Socket clientSocket) {
-        MemberIdentifier gmbr = suspectMember;
+        ID gmbr = suspectMember;
-  void writeMemberToStream(MemberIdentifier gmbr, DataOutputStream out) throws IOException {
+  void writeMemberToStream(ID gmbr, DataOutputStream out) throws IOException {
-  public void suspect(MemberIdentifier mbr, String reason) {
+  public void suspect(ID mbr, String reason) {
-  public boolean checkIfAvailable(MemberIdentifier mbr, String reason,
+  public boolean checkIfAvailable(ID mbr, String reason,
-          GMSMembershipView v = currentView;
+          GMSMembershipView<ID> v = currentView;
-            List<MemberIdentifier> mbrs = v.getMembers();
+            List<ID> mbrs = v.getMembers();
-      private void sendHeartbeats(List<MemberIdentifier> mbrs, int startIndex) {
-        MemberIdentifier coordinator = currentView.getCoordinator();
+      private void sendHeartbeats(List<ID> mbrs, int startIndex) {
+        ID coordinator = currentView.getCoordinator();
-          HeartbeatMessage message = new HeartbeatMessage(-1);
+          HeartbeatMessage<ID> message = new HeartbeatMessage<>(-1);
-          MemberIdentifier mbr = mbrs.get(index);
+          ID mbr = mbrs.get(index);
-          HeartbeatMessage message = new HeartbeatMessage(-1);
+          HeartbeatMessage<ID> message = new HeartbeatMessage<>(-1);
-  public synchronized void installView(GMSMembershipView newView) {
+  public synchronized void installView(GMSMembershipView<ID> newView) {
-    for (Iterator<MemberIdentifier> it = memberTimeStamps.keySet().iterator(); it
+    for (Iterator<ID> it = memberTimeStamps.keySet().iterator(); it
-    for (Iterator<MemberIdentifier> it = suspectedMemberIds.keySet().iterator(); it
+    for (Iterator<ID> it = suspectedMemberIds.keySet().iterator(); it
-  public synchronized GMSMembershipView getView() {
+  public synchronized GMSMembershipView<ID> getView() {
-  protected synchronized void setNextNeighbor(GMSMembershipView newView, MemberIdentifier nextTo) {
+  protected synchronized void setNextNeighbor(GMSMembershipView<ID> newView,
+      ID nextTo) {
-    List<MemberIdentifier> allMembers = newView.getMembers();
+    List<ID> allMembers = newView.getMembers();
-      for (MemberIdentifier member : allMembers) {
+      for (ID member : allMembers) {
-      MemberIdentifier newNeighbor = allMembers.get(nextNeighborIndex);
+      ID newNeighbor = allMembers.get(nextNeighborIndex);
-      MemberIdentifier oldNeighbor = nextNeighbor;
+      ID oldNeighbor = nextNeighbor;
-  public MemberIdentifier getNextNeighbor() {
+  public ID getNextNeighbor() {
-  public void init(Services s) {
+  public void init(Services<ID> s) {
-  public boolean isSuspectMember(MemberIdentifier m) {
+  public boolean isSuspectMember(ID m) {
-  public void memberSuspected(MemberIdentifier initiator,
-      MemberIdentifier suspect, String reason) {
+  public void memberSuspected(ID initiator,
+      ID suspect, String reason) {
-      Collection<SuspectRequest> requests = suspectRequestsInView.get(currentView);
+      Collection<SuspectRequest<ID>> requests = suspectRequestsInView.get(currentView);
-        requests.add(new SuspectRequest(suspect, reason));
+        requests.add(new SuspectRequest<>(suspect, reason));
-      for (SuspectRequest request : requests) {
+      for (SuspectRequest<ID> request : requests) {
-        requests.add(new SuspectRequest(suspect, reason));
+        requests.add(new SuspectRequest<>(suspect, reason));
-  private void memberUnsuspected(MemberIdentifier mbr) {
+  private void memberUnsuspected(ID mbr) {
-      Collection<SuspectRequest> suspectRequests = suspectRequestsInView.get(currentView);
+      Collection<SuspectRequest<ID>> suspectRequests = suspectRequestsInView.get(currentView);
-        Collection<SuspectRequest> removals = new ArrayList<>(suspectRequests.size());
-        for (SuspectRequest suspectRequest : suspectRequests) {
+        Collection<SuspectRequest<ID>> removals = new ArrayList<>(suspectRequests.size());
+        for (SuspectRequest<ID> suspectRequest : suspectRequests) {
-  public void setLocalAddress(MemberIdentifier idm) {
+  public void setLocalAddress(ID idm) {
-  void processMessage(HeartbeatRequestMessage m) {
+  void processMessage(HeartbeatRequestMessage<ID> m) {
-    MemberIdentifier me = localAddress;
+    ID me = localAddress;
-      HeartbeatMessage hm = new HeartbeatMessage(m.getRequestId());
+      HeartbeatMessage<ID> hm = new HeartbeatMessage<>(m.getRequestId());
-      Set<MemberIdentifier> membersNotReceivedMsg = services.getMessenger().send(hm);
+      Set<ID> membersNotReceivedMsg = services.getMessenger().send(hm);
-  void processMessage(HeartbeatMessage m) {
+  void processMessage(HeartbeatMessage<ID> m) {
-  void processMessage(SuspectMembersMessage incomingRequest) {
+  void processMessage(SuspectMembersMessage<ID> incomingRequest) {
-    GMSMembershipView cv = currentView;
+    GMSMembershipView<ID> cv = currentView;
-    List<SuspectRequest> suspectRequests = incomingRequest.getMembers();
+    List<SuspectRequest<ID>> suspectRequests = incomingRequest.getMembers();
-    MemberIdentifier sender = incomingRequest.getSender();
+    ID sender = incomingRequest.getSender();
-    for (Iterator<SuspectRequest> it = incomingRequest.getMembers().iterator(); it.hasNext();) {
-      SuspectRequest req = it.next();
+    for (Iterator<SuspectRequest<ID>> it = incomingRequest.getMembers().iterator(); it.hasNext();) {
+      SuspectRequest<ID> req = it.next();
-        HeartbeatMessage message = new HeartbeatMessage(-1);
+        HeartbeatMessage<ID> message = new HeartbeatMessage<>(-1);
-      GMSMembershipView check = new GMSMembershipView(cv, cv.getViewId() + 1);
-      ArrayList<SuspectRequest> membersToCheck = new ArrayList<>();
+      GMSMembershipView<ID> check = new GMSMembershipView<>(cv, cv.getViewId() + 1);
+      ArrayList<SuspectRequest<ID>> membersToCheck = new ArrayList<>();
-        Set<SuspectRequest> suspectsInView = suspectRequestsInView.get(cv);
+        Set<SuspectRequest<ID>> suspectsInView = suspectRequestsInView.get(cv);
-        for (final SuspectRequest sr : suspectsInView) {
+        for (final SuspectRequest<ID> sr : suspectsInView) {
-      List membersLeaving = new ArrayList();
-      for (MemberIdentifier member : cv.getMembers()) {
+      List<ID> membersLeaving = new ArrayList<>();
+      for (ID member : cv.getMembers()) {
-      MemberIdentifier coordinator = check.getCoordinator();
+      ID coordinator = check.getCoordinator();
-  void processMessage(FinalCheckPassedMessage m) {
+  void processMessage(FinalCheckPassedMessage<ID> m) {
-  private void logSuspectRequests(SuspectMembersMessage incomingRequest,
-      MemberIdentifier sender) {
-    for (SuspectRequest req : incomingRequest.getMembers()) {
+  private void logSuspectRequests(SuspectMembersMessage<ID> incomingRequest,
+      ID sender) {
+    for (SuspectRequest<ID> req : incomingRequest.getMembers()) {
-  private void recordSuspectRequests(List<SuspectRequest> suspectRequests, GMSMembershipView cv) {
+  private void recordSuspectRequests(List<SuspectRequest<ID>> suspectRequests,
+      GMSMembershipView<ID> cv) {
-    Set<SuspectRequest> suspectedMembers;
+    Set<SuspectRequest<ID>> suspectedMembers;
-  private void checkIfAvailable(final MemberIdentifier initiator,
-      List<SuspectRequest> sMembers, final GMSMembershipView cv) {
+  private void checkIfAvailable(final ID initiator,
+      List<SuspectRequest<ID>> sMembers, final GMSMembershipView<ID> cv) {
-    for (final SuspectRequest sr : sMembers) {
-      final MemberIdentifier mbr = sr.getSuspectMember();
+    for (final SuspectRequest<ID> sr : sMembers) {
+      final ID mbr = sr.getSuspectMember();
-  protected boolean inlineCheckIfAvailable(final MemberIdentifier initiator,
-      final GMSMembershipView cv, boolean isFinalCheck, final MemberIdentifier mbr,
+  protected boolean inlineCheckIfAvailable(final ID initiator,
+      final GMSMembershipView<ID> cv, boolean isFinalCheck, final ID mbr,
-              SuspectMembersMessage suspectMembersMessage =
-                  new SuspectMembersMessage(Collections.singletonList(localAddress),
+              SuspectMembersMessage<ID> suspectMembersMessage =
+                  new SuspectMembersMessage<>(Collections.singletonList(localAddress),
-                          .singletonList(new SuspectRequest(mbr, "failed availability check")));
+                          .singletonList(new SuspectRequest<>(mbr, "failed availability check")));
-          FinalCheckPassedMessage message = new FinalCheckPassedMessage(initiator, mbr);
-          List<MemberIdentifier> members = cv.getMembers();
-          List<MemberIdentifier> recipients = new ArrayList<>(members.size());
-          for (MemberIdentifier member : members) {
+          FinalCheckPassedMessage<ID> message = new FinalCheckPassedMessage<>(initiator, mbr);
+          List<ID> members = cv.getMembers();
+          List<ID> recipients = new ArrayList<>(members.size());
+          for (ID member : members) {
-  public void memberShutdown(MemberIdentifier mbr, String reason) {}
+  public void memberShutdown(ID mbr, String reason) {}
-  private void sendSuspectRequest(final List<SuspectRequest> requests) {
+  private void sendSuspectRequest(final List<SuspectRequest<ID>> requests) {
-    List<MemberIdentifier> recipients;
+    List<ID> recipients;
-      HashSet<MemberIdentifier> filter = new HashSet<>();
-      for (Enumeration<MemberIdentifier> e = suspectedMemberIds.keys(); e
+      HashSet<ID> filter = new HashSet<>();
+      for (Enumeration<ID> e = suspectedMemberIds.keys(); e
-          requests.stream().map(SuspectRequest::getSuspectMember).collect(Collectors.toList()));
+          requests.stream().map(SuspectRequest::getSuspectMember)
+              .collect(Collectors.toList()));
-    SuspectMembersMessage smm = new SuspectMembersMessage(recipients, requests);
+    SuspectMembersMessage<ID> smm = new SuspectMembersMessage<>(recipients, requests);
-    Set<MemberIdentifier> failedRecipients;
+    Set<ID> failedRecipients;

INS73 INS74 INS42 MOV43 MOV43 INS43 INS74 INS74 UPD43 UPD43 UPD74 UPD74 UPD74 UPD74 INS74 INS74 UPD43 INS42 MOV43 INS43 MOV43 INS43 UPD42 UPD42 INS43 UPD43 INS74 UPD43 INS74 UPD74 INS74 INS74 UPD43 UPD43 MOV43 INS43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 INS74 MOV43 INS43 INS74 UPD43 UPD42 INS74 UPD43 UPD43 UPD43 UPD43 UPD43 INS74 INS74 INS74 INS74 INS74 UPD43 UPD74 INS74 UPD43 UPD74 INS74 UPD43 INS74 UPD43 UPD43 INS74 INS42 INS42 INS42 UPD42 MOV43 INS43 UPD42 MOV43 INS43 INS74 MOV43 INS43 MOV43 INS43 INS74 UPD42 UPD42 INS42 UPD42 INS74 UPD42 INS74 UPD42 UPD42 INS74 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 INS43 INS42 MOV43 INS43 UPD42 UPD74 MOV43 INS43 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 INS43 UPD43 MOV43 INS43 MOV43 INS43 INS74 INS74 UPD43 MOV43 INS43 MOV43 INS43 UPD42 INS74 MOV43 INS43 UPD74 MOV74 UPD42 UPD74 MOV74 MOV43 INS43 UPD42 MOV43 INS43 UPD42 UPD42 MOV43 UPD74 MOV74 MOV43 UPD74 INS74 UPD74 INS42 INS42 MOV43 INS43 UPD43 INS42 INS42 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS43 INS42 INS42 INS74 UPD74 MOV74 UPD42 MOV42 UPD43 INS42 INS42 UPD42 UPD42 MOV42 INS42 MOV43 INS43 MOV43 INS74 UPD42 INS74 INS42 INS42 INS74 MOV43 INS43 UPD42 MOV42 INS74 INS43 INS42 INS42 UPD74 MOV74 UPD42 MOV42 UPD43 MOV43 UPD43 MOV43 INS43 UPD43 INS42 UPD42 INS42 INS42 INS74 INS42 INS42 UPD74 MOV43 INS43 UPD43 UPD42 UPD43 UPD43 INS74 INS74 INS74 UPD74 INS42 INS42 MOV43 INS43 MOV43 INS74 INS74 INS74 INS74 INS74 UPD43 MOV43 INS43 INS42 MOV43 INS43 INS42 INS43 UPD43 UPD42 UPD42 UPD74 UPD42 MOV42 INS74 UPD42 INS74 UPD43 MOV43 INS43 INS74 UPD43 INS42 UPD42 UPD43 UPD42 UPD42 INS43 INS74 INS74 MOV43 INS74 MOV43 INS43 UPD43 INS42 INS42 MOV43 INS43 MOV43 INS43 MOV43 INS43 MOV43 INS74 INS43 INS43 UPD43 UPD42 INS42 INS42 INS42 UPD42 UPD43 UPD74 MOV43 MOV43 INS43 UPD42 INS42 MOV43 INS43 UPD42 UPD43 UPD42 INS42 MOV43 INS43 MOV43 INS43 MOV43 INS43 UPD74 INS42 INS42 INS74 UPD42 INS42 MOV42 INS42 INS74 UPD42 MOV42 INS74 MOV43 INS43 INS74 INS42 INS42 UPD74 MOV74 UPD42 UPD42 UPD43 INS42 INS42 UPD42 UPD74 MOV74 INS42 MOV42 INS42 INS42 MOV43 UPD74 MOV74 MOV43 UPD74 MOV74 MOV43 MOV43 INS43 MOV43 INS42 MOV43 INS74 INS74 UPD42 UPD43 UPD43 UPD43 INS74 INS74 UPD43 INS43 INS42 INS74 INS42 INS43 INS43 MOV43 INS43 INS74 UPD74 UPD74 UPD42 UPD42 UPD42 INS60 MOV60 MOV43 MOV43 UPD42 INS42 MOV43 INS42 INS42 MOV42 INS42 MOV43 INS43 UPD43 UPD43 INS43 UPD43 INS74 INS74 INS59 UPD43 INS74 INS42 INS42 INS74 UPD42 UPD42 INS42 UPD42 MOV43 INS43 MOV43 INS43 INS42 INS14 UPD42 MOV43 INS43 MOV43 INS42 INS74 INS42 INS74 MOV38 INS42 INS74 INS74 MOV43 INS43 MOV43 MOV43 MOV43 INS43 INS42 INS42 INS74 MOV43 INS42 INS74 MOV43 DEL42 DEL43 DEL74 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL74 DEL74 DEL42 DEL43