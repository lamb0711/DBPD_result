GEODE-3622: Implement new algorithm for eviction (#1017)

* GEODE-3622: Implement new algorithm for eviction

  * Old algorithm is still used by default. Use "-Dgeode.EvictionScanAsync=true"
    to enable the new algorithm. Note that the new algorithm is still experimental
    and is subject to change. The new algorithm uses asynchronous sorting of the
    LRU list to prevent a long synchronous sort when the first item is evicted.
  * Moved region entries into their own package
  * Organized eviction code into new eviction package
  * General refactoring of eviction classes

-import org.apache.geode.internal.cache.lru.EnableLRU;
-import org.apache.geode.internal.cache.lru.LRUClockNode;
-import org.apache.geode.internal.cache.lru.LRUEntry;
-import org.apache.geode.internal.cache.partitioned.Bucket;
+import org.apache.geode.internal.cache.eviction.EvictableEntry;
+import org.apache.geode.internal.cache.eviction.EvictionController;
-  public int updateAsyncEntrySize(EnableLRU capacityController);
+  public int updateAsyncEntrySize(EvictionController capacityController);
-      if (entry instanceof LRUEntry) {
-        LRUEntry le = (LRUEntry) entry;
+      if (entry instanceof EvictableEntry) {
+        EvictableEntry le = (EvictableEntry) entry;
-        if (entry instanceof LRUEntry && !dr.isSync()) {
+        if (entry instanceof EvictableEntry && !dr.isSync()) {
-              boolean evicted = ((LRUClockNode) entry).testEvicted();
+              boolean evicted = ((EvictableEntry) entry).isEvicted();
-              lruEntryFaultIn((LRUEntry) entry, (DiskRecoveryStore) region);
+              lruEntryFaultIn((EvictableEntry) entry, (DiskRecoveryStore) region);
-              if (entry instanceof LRUEntry) {
+              if (entry instanceof EvictableEntry) {
-                  lruEntryFaultIn((LRUEntry) entry, (DiskRecoveryStore) region);
+                  lruEntryFaultIn((EvictableEntry) entry, (DiskRecoveryStore) region);
-        ((RegionEntry) entry).setRecentlyUsed();
+        entry.setRecentlyUsed(region);
-            if (entry instanceof LRUEntry) {
+            if (entry instanceof EvictableEntry) {
-                lruEntryFaultIn((LRUEntry) entry, recoveryStore);
+                lruEntryFaultIn((EvictableEntry) entry, recoveryStore);
-    private static void lruEntryFaultIn(LRUEntry entry, DiskRecoveryStore recoveryStore) {
+    private static void lruEntryFaultIn(EvictableEntry entry, DiskRecoveryStore recoveryStore) {
-        rm.lruEntryFaultIn((LRUEntry) entry);
+        rm.lruEntryFaultIn((EvictableEntry) entry);
-    public static int overflowToDisk(DiskEntry entry, InternalRegion region, EnableLRU ccHelper)
-        throws RegionClearedException {
+    public static int overflowToDisk(DiskEntry entry, InternalRegion region,
+        EvictionController ccHelper) throws RegionClearedException {
-        ((LRUEntry) entry).setDelayedDiskId((DiskRecoveryStore) region);
+        ((EvictableEntry) entry).setDelayedDiskId((DiskRecoveryStore) region);
-            change = ((LRUClockNode) entry).updateEntrySize(ccHelper);
+            change = ((EvictableEntry) entry).updateEntrySize(ccHelper);
-                        && entry instanceof LRUEntry && ((LRUClockNode) entry).testEvicted()) {
+                        && entry instanceof EvictableEntry
+                        && ((EvictableEntry) entry).isEvicted()) {

UPD40 UPD40 UPD43 UPD42 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 INS42 INS42 UPD43 UPD43 UPD43 UPD42 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD43 UPD42 UPD42 UPD43 UPD42 UPD43 UPD42 UPD42 UPD43 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL11 DEL36