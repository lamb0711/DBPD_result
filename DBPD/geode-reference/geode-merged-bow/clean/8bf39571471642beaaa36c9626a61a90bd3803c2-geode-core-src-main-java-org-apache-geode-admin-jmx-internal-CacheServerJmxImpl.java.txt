Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * MBean representation of a {@link
- * org.apache.geode.admin.CacheVm}. 
+ * MBean representation of a {@link org.apache.geode.admin.CacheVm}.
-  implements ManagedResource, CacheVmConfig, CacheServerConfig, SystemMemberJmx {
+    implements ManagedResource, CacheVmConfig, CacheServerConfig, SystemMemberJmx {
-  
-  /** 
-   * Interval in seconds between refreshes. Value less than one results in no 
-   * refreshing 
+
+  /**
+   * Interval in seconds between refreshes. Value less than one results in no refreshing
-  
-  /** collection to collect all the resources created for this member */
-  private Map<StatResource, StatisticResourceJmxImpl> managedStatisticsResourcesMap = new HashMap<StatResource, StatisticResourceJmxImpl>();
-  //////////////////////  Constructors  //////////////////////
+  /** collection to collect all the resources created for this member */
+  private Map<StatResource, StatisticResourceJmxImpl> managedStatisticsResourcesMap =
+      new HashMap<StatResource, StatisticResourceJmxImpl>();
+
+  ////////////////////// Constructors //////////////////////
-   * Creates a new <code>CacheServerJmxImpl</code> for an existing
-   * cache server.
+   * Creates a new <code>CacheServerJmxImpl</code> for an existing cache server.
-  CacheServerJmxImpl(AdminDistributedSystemJmxImpl system,
-                     GemFireVM vm)
-    throws AdminException {
+  CacheServerJmxImpl(AdminDistributedSystemJmxImpl system, GemFireVM vm) throws AdminException {
-   * Creates a new <code>CacheServerJmxImpl</code> for an
-   * newly-created cache server.
+   * Creates a new <code>CacheServerJmxImpl</code> for an newly-created cache server.
-  CacheServerJmxImpl(AdminDistributedSystemJmxImpl system,
-                     CacheVmConfig config)
-    throws AdminException {
+  CacheServerJmxImpl(AdminDistributedSystemJmxImpl system, CacheVmConfig config)
+      throws AdminException {
-  //////////////////////  Instance Methods  //////////////////////
+  ////////////////////// Instance Methods //////////////////////
-  /** 
+  /**
-  private void initializeMBean()
-    throws AdminException {
-    //initialize Managed Resources for stats & cache first.
-//    initializeManagedResources();
-    
-    this.mbeanName = new StringBuffer("GemFire.CacheVm:")
-        .append("id=")
-        .append(MBeanUtil.makeCompliantMBeanNameProperty(getId()))
-        .append(",type=")
-        .append(MBeanUtil.makeCompliantMBeanNameProperty(getType().getName()))
-        .toString();
+  private void initializeMBean() throws AdminException {
+    // initialize Managed Resources for stats & cache first.
+    // initializeManagedResources();
-    this.objectName = MBeanUtil.createMBean(this, 
-        addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));
+    this.mbeanName = new StringBuffer("GemFire.CacheVm:").append("id=")
+        .append(MBeanUtil.makeCompliantMBeanNameProperty(getId())).append(",type=")
+        .append(MBeanUtil.makeCompliantMBeanNameProperty(getType().getName())).toString();
+
+    this.objectName =
+        MBeanUtil.createMBean(this, addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));
-    AdminDistributedSystemJmxImpl sysJmx = (AdminDistributedSystemJmxImpl)system;
-    if (sysJmx.getRefreshInterval()>0)
+    AdminDistributedSystemJmxImpl sysJmx = (AdminDistributedSystemJmxImpl) system;
+    if (sysJmx.getRefreshInterval() > 0)
-  
+
+
-  
+
-  
+
-   * Un-registers all the statistics & cache managed resource created for this 
-   * member. After un-registering the resource MBean instances, clears 
-   * managedStatisticsResourcesMap collection & sets managedSystemMemberCache 
-   * to null.
+   * Un-registers all the statistics & cache managed resource created for this member. After
+   * un-registering the resource MBean instances, clears managedStatisticsResourcesMap collection &
+   * sets managedSystemMemberCache to null.
-   * Creates ConfigurationParameterJmxImpl, StatisticResourceJmxImpl and 
-   * SystemMemberCacheJmxImpl. But cleans up only StatisticResourceJmxImpl and 
-   * SystemMemberCacheJmxImpl which are of type ManagedResource.
+   * Creates ConfigurationParameterJmxImpl, StatisticResourceJmxImpl and SystemMemberCacheJmxImpl.
+   * But cleans up only StatisticResourceJmxImpl and SystemMemberCacheJmxImpl which are of type
+   * ManagedResource.
-  public void cleanupResource() {    
+  public void cleanupResource() {
-      
-      Collection<StatisticResourceJmxImpl> statisticResources = managedStatisticsResourcesMap.values();
-      
+
+      Collection<StatisticResourceJmxImpl> statisticResources =
+          managedStatisticsResourcesMap.values();
+
-        
+
-    
+
-  ///////////////////////  Configuration  ///////////////////////
+  /////////////////////// Configuration ///////////////////////
-  //   MBean attribute accessors/mutators
+  // MBean attribute accessors/mutators
-  
+
-  
-   /**
-   * Sets interval in seconds between cache config refreshes; zero or less turns 
-   * off auto refreshing.  Manual refreshing has no effect on when the next
-   * scheduled refresh will occur.
+
+  /**
+   * Sets interval in seconds between cache config refreshes; zero or less turns off auto
+   * refreshing. Manual refreshing has no effect on when the next scheduled refresh will occur.
-   * @param refreshInterval  the new refresh interval in seconds
-   */  
+   * @param refreshInterval the new refresh interval in seconds
+   */
-   * RefreshInterval is now set only through the AdminDistributedSystem property
-   * refreshInterval. Attempt to set refreshInterval on CacheServerJmx MBean
-   * would result in an OperationNotSupportedException Auto-refresh is enabled
-   * on demand when a call to refreshConfig is made
+   * RefreshInterval is now set only through the AdminDistributedSystem property refreshInterval.
+   * Attempt to set refreshInterval on CacheServerJmx MBean would result in an
+   * OperationNotSupportedException Auto-refresh is enabled on demand when a call to refreshConfig
+   * is made
-   * @param refreshInterval
-   *          the new refresh interval in seconds
+   * @param refreshInterval the new refresh interval in seconds
-  public void setRefreshInterval(int refreshInterval)
-      throws OperationNotSupportedException {
+  public void setRefreshInterval(int refreshInterval) throws OperationNotSupportedException {
-        LocalizedStrings.MANAGED_RESOURCE_REFRESH_INTERVAL_CANT_BE_SET_DIRECTLY.toLocalizedString());
-  }  
-  
+        LocalizedStrings.MANAGED_RESOURCE_REFRESH_INTERVAL_CANT_BE_SET_DIRECTLY
+            .toLocalizedString());
+  }
+
-  //   MBean Operations
+  // MBean Operations
-  public void refreshConfig()
-    throws org.apache.geode.admin.AdminException {
-    // 1st call to refreshConfig would trigger 
+  public void refreshConfig() throws org.apache.geode.admin.AdminException {
+    // 1st call to refreshConfig would trigger
-    if (this.refreshInterval>0) {
+    if (this.refreshInterval > 0) {
-   * @throws AdminException
-   *           if initialization of managed resources fails
+   * @throws AdminException if initialization of managed resources fails
-//  private void initializeManagedResources() throws AdminException {
-//    try {
-//      manageCache();
-//    } catch (MalformedObjectNameException e) {
-//      throw new AdminException(LocalizedStrings.SystemMemberJmxImpl_EXCEPTION_OCCURRED_WHILE_INITIALIZING_0_MBEANS_FOR_1.toLocalizedString(
-//              new Object[] {"Cache", getId()}), 
-//              e);
-//    } catch (AdminException ae) {
-//      if (LocalizedStrings.SystemMemberJmx_THIS_SYSTEM_MEMBER_DOES_NOT_HAVE_A_CACHE.toLocalizedString().equals(ae.getMessage())) {
-//        //ignore this exception for a cache-less peer 
-//      } else {
-//        throw ae;
-//      }
-//    }
-//    try {
-//      manageStats();
-//    } catch (MalformedObjectNameException e) {
-//      throw new AdminException(LocalizedStrings.SystemMemberJmxImpl_EXCEPTION_OCCURRED_WHILE_INITIALIZING_0_MBEANS_FOR_1.toLocalizedString(
-//          new Object[] {"Statistics", getId()}), 
-//          e);
-//    }
-//  }
-  
-  /** 
+  // private void initializeManagedResources() throws AdminException {
+  // try {
+  // manageCache();
+  // } catch (MalformedObjectNameException e) {
+  // throw new
+  // AdminException(LocalizedStrings.SystemMemberJmxImpl_EXCEPTION_OCCURRED_WHILE_INITIALIZING_0_MBEANS_FOR_1.toLocalizedString(
+  // new Object[] {"Cache", getId()}),
+  // e);
+  // } catch (AdminException ae) {
+  // if
+  // (LocalizedStrings.SystemMemberJmx_THIS_SYSTEM_MEMBER_DOES_NOT_HAVE_A_CACHE.toLocalizedString().equals(ae.getMessage()))
+  // {
+  // //ignore this exception for a cache-less peer
+  // } else {
+  // throw ae;
+  // }
+  // }
+  // try {
+  // manageStats();
+  // } catch (MalformedObjectNameException e) {
+  // throw new
+  // AdminException(LocalizedStrings.SystemMemberJmxImpl_EXCEPTION_OCCURRED_WHILE_INITIALIZING_0_MBEANS_FOR_1.toLocalizedString(
+  // new Object[] {"Statistics", getId()}),
+  // e);
+  // }
+  // }
+
+  /**
-  public ObjectName manageCache() 
-  throws AdminException, MalformedObjectNameException {
+  public ObjectName manageCache() throws AdminException, MalformedObjectNameException {
-  /** 
+  /**
-  public ObjectName[] manageStats() 
-  throws AdminException, MalformedObjectNameException {
+  public ObjectName[] manageStats() throws AdminException, MalformedObjectNameException {
-  /** 
-   * Gets the active StatisticResources for this manager, based on the
-   * typeName as the key
+  /**
+   * Gets the active StatisticResources for this manager, based on the typeName as the key
-  public ObjectName[] manageStat(String statisticsTypeName) 
-    throws AdminException, MalformedObjectNameException {
-    
+  public ObjectName[] manageStat(String statisticsTypeName)
+      throws AdminException, MalformedObjectNameException {
+
-  //   JMX Notification listener
+  // JMX Notification listener
-   * Handles notification to refresh. Reacts by refreshing the values of this
-   * GemFireManager's ConfigurationParamaters. Any other notification is
-   * ignored. Given notification is handled only if there is any JMX client
-   * connected to the system.
+   * Handles notification to refresh. Reacts by refreshing the values of this GemFireManager's
+   * ConfigurationParamaters. Any other notification is ignored. Given notification is handled only
+   * if there is any JMX client connected to the system.
-   * @param notification
-   *          the JMX notification being received
-   * @param hb
-   *          handback object is unused
+   * @param notification the JMX notification being received
+   * @param hb handback object is unused
-    AdminDistributedSystemJmxImpl systemJmx = 
-                                  (AdminDistributedSystemJmxImpl) this.system;
+    AdminDistributedSystemJmxImpl systemJmx = (AdminDistributedSystemJmxImpl) this.system;
-  //   Template methods overriden from superclass...
+  // Template methods overriden from superclass...
-  
+
-   * Template method for creating instance of ConfigurationParameter.  
-   * Overridden to return ConfigurationParameterJmxImpl.
+   * Template method for creating instance of ConfigurationParameter. Overridden to return
+   * ConfigurationParameterJmxImpl.
-  protected ConfigurationParameter createConfigurationParameter(String name,
-                                                                String description,
-                                                                Object value,
-                                                                Class type,
-                                                                boolean userModifiable) {
-    return new ConfigurationParameterJmxImpl(
-        name, description, value, type, userModifiable);
+  protected ConfigurationParameter createConfigurationParameter(String name, String description,
+      Object value, Class type, boolean userModifiable) {
+    return new ConfigurationParameterJmxImpl(name, description, value, type, userModifiable);
-  
+
-   * Override createStatisticResource by instantiating StatisticResourceJmxImpl 
-   * if it was not created earlier otherwise returns the same instance.
+   * Override createStatisticResource by instantiating StatisticResourceJmxImpl if it was not
+   * created earlier otherwise returns the same instance.
-   * @param stat
-   *         StatResource reference for which this JMX resource is to be created
+   * @param stat StatResource reference for which this JMX resource is to be created
-   * @throws AdminException
-   *           if constructing StatisticResourceJmxImpl instance fails
+   * @throws AdminException if constructing StatisticResourceJmxImpl instance fails
-    throws org.apache.geode.admin.AdminException {
+      throws org.apache.geode.admin.AdminException {
-    
+
-      /* 
-       * Ensuring that a single instance of Statistic Resource is created per 
-       * StatResource.
+      /*
+       * Ensuring that a single instance of Statistic Resource is created per StatResource.
-        managedStatisticResource.getStatistics();//inits timer
+        managedStatisticResource.getStatistics();// inits timer
-   * Override createSystemMemberCache by instantiating SystemMemberCacheJmxImpl 
-   * if it was not created earlier.
+   * Override createSystemMemberCache by instantiating SystemMemberCacheJmxImpl if it was not
+   * created earlier.
-   * @param vm
-   *          GemFireVM reference for which this JMX resource is to be created
+   * @param vm GemFireVM reference for which this JMX resource is to be created
-   * @throws AdminException
-   *           if constructing SystemMemberCacheJmxImpl instance fails
+   * @throws AdminException if constructing SystemMemberCacheJmxImpl instance fails
-    throws org.apache.geode.admin.AdminException {
+      throws org.apache.geode.admin.AdminException {
-  
+
-  //   Create MBean attributes for each ConfigurationParameter
+  // Create MBean attributes for each ConfigurationParameter
-  
+
-   * @return a new instance of ManagedBean copied from <code>managed</code> but 
-   *         with the new attributes added
+   * @return a new instance of ManagedBean copied from <code>managed</code> but with the new
+   *         attributes added
-  public ManagedBean addDynamicAttributes(ManagedBean managed) 
-  throws org.apache.geode.admin.AdminException {
+  public ManagedBean addDynamicAttributes(ManagedBean managed)
+      throws org.apache.geode.admin.AdminException {
-   * Cleans up Managed Resources created for the client that was connected to
-   * the server represented by this class.
+   * Cleans up Managed Resources created for the client that was connected to the server represented
+   * by this class.
-   * @param clientId
-   *          id of the client to be removed
-   * @return List of ManagedResources associated with the client of given client
-   *         id
+   * @param clientId id of the client to be removed
+   * @return List of ManagedResources associated with the client of given client id
-   * This clean up is for the clients. The clients are started with a loner DM.
-   * Hence the clientId is not supposed to contain '/' as per 
-   * InternalDistributedMember.toString().
+   * This clean up is for the clients. The clients are started with a loner DM. Hence the clientId
+   * is not supposed to contain '/' as per InternalDistributedMember.toString().
-    String compatibleId = "id_"+MBeanUtil.makeCompliantMBeanNameProperty(clientId);
+    String compatibleId = "id_" + MBeanUtil.makeCompliantMBeanNameProperty(clientId);
-      Set<Entry<StatResource, StatisticResourceJmxImpl>> entrySet = this.managedStatisticsResourcesMap.entrySet();
-      
-      for (Iterator<Entry<StatResource, StatisticResourceJmxImpl>> it = entrySet.iterator(); it.hasNext();) {
+      Set<Entry<StatResource, StatisticResourceJmxImpl>> entrySet =
+          this.managedStatisticsResourcesMap.entrySet();
+
+      for (Iterator<Entry<StatResource, StatisticResourceJmxImpl>> it = entrySet.iterator(); it
+          .hasNext();) {
-          it.remove(); //remove matching entry
+          it.remove(); // remove matching entry
-  
+
-   * @param clientId
-   *          id of the client for whom membership change happened
-   * @param eventType
-   *          membership change type; one of
-   *          {@link ClientMembershipMessage#JOINED},
-   *          {@link ClientMembershipMessage#LEFT}, 
-   *          {@link ClientMembershipMessage#CRASHED}
+   * @param clientId id of the client for whom membership change happened
+   * @param eventType membership change type; one of {@link ClientMembershipMessage#JOINED},
+   *        {@link ClientMembershipMessage#LEFT}, {@link ClientMembershipMessage#CRASHED}
-    String notifType                = null;
+    String notifType = null;
-    
+
-    
+
-    Helper.sendNotification(this, 
-        new Notification(notifType, this.modelMBean, 
-        Helper.getNextNotificationSequenceNumber(),
-        clientId));
+    Helper.sendNotification(this, new Notification(notifType, this.modelMBean,
+        Helper.getNextNotificationSequenceNumber(), clientId));
-  
+
-   * Implementation handles creation of cache by extracting the details from the 
-   * given event object and sending the 
-   * {@link SystemMemberJmx#NOTIF_CACHE_CREATED} notification to the connected 
-   * JMX Clients.
+   * Implementation handles creation of cache by extracting the details from the given event object
+   * and sending the {@link SystemMemberJmx#NOTIF_CACHE_CREATED} notification to the connected JMX
+   * Clients.
-   * @param event
-   *          event object corresponding to the creation of the cache
+   * @param event event object corresponding to the creation of the cache
-    Helper.sendNotification(this, 
-      new Notification(NOTIF_CACHE_CREATED, this.modelMBean, 
-      Helper.getNextNotificationSequenceNumber(),
-      Helper.getCacheEventDetails(event)));
-  }  
-
-  /**
-   * Implementation handles closure of cache by extracting the details from the 
-   * given event object and sending the
-   * {@link SystemMemberJmx#NOTIF_CACHE_CLOSED} notification to the connected 
-   * JMX Clients. 
-   * 
-   * @param event
-   *          event object corresponding to the closure of the cache
-   */
-  public void handleCacheClose(SystemMemberCacheEvent event) {
-    Helper.sendNotification(this, 
-        new Notification(NOTIF_CACHE_CLOSED, this.modelMBean, 
-        Helper.getNextNotificationSequenceNumber(),
-        Helper.getCacheEventDetails(event)));
+    Helper.sendNotification(this, new Notification(NOTIF_CACHE_CREATED, this.modelMBean,
+        Helper.getNextNotificationSequenceNumber(), Helper.getCacheEventDetails(event)));
-   * Implementation handles creation of region by extracting the details from 
-   * the given event object and sending the
-   * {@link SystemMemberJmx#NOTIF_REGION_CREATED} notification to the connected 
-   * JMX Clients. Region Path is set as User Data in Notification. 
+   * Implementation handles closure of cache by extracting the details from the given event object
+   * and sending the {@link SystemMemberJmx#NOTIF_CACHE_CLOSED} notification to the connected JMX
+   * Clients.
-   * @param event
-   *          event object corresponding to the creation of a region
+   * @param event event object corresponding to the closure of the cache
+   */
+  public void handleCacheClose(SystemMemberCacheEvent event) {
+    Helper.sendNotification(this, new Notification(NOTIF_CACHE_CLOSED, this.modelMBean,
+        Helper.getNextNotificationSequenceNumber(), Helper.getCacheEventDetails(event)));
+  }
+
+  /**
+   * Implementation handles creation of region by extracting the details from the given event object
+   * and sending the {@link SystemMemberJmx#NOTIF_REGION_CREATED} notification to the connected JMX
+   * Clients. Region Path is set as User Data in Notification.
+   * 
+   * @param event event object corresponding to the creation of a region
-    Notification notification = new Notification(NOTIF_REGION_CREATED, 
-                                    this.modelMBean, 
-                                    Helper.getNextNotificationSequenceNumber(),
-                                    Helper.getRegionEventDetails(event));
-    
+    Notification notification = new Notification(NOTIF_REGION_CREATED, this.modelMBean,
+        Helper.getNextNotificationSequenceNumber(), Helper.getRegionEventDetails(event));
+
-   * Implementation should handle loss of region by extracting the details from 
-   * the given event object and sending the
-   * {@link SystemMemberJmx#NOTIF_REGION_LOST} notification to the connected 
-   * JMX Clients. Region Path is set as User Data in Notification. Additionally, 
-   * it also clears the ManagedResources created for the region that is lost. 
+   * Implementation should handle loss of region by extracting the details from the given event
+   * object and sending the {@link SystemMemberJmx#NOTIF_REGION_LOST} notification to the connected
+   * JMX Clients. Region Path is set as User Data in Notification. Additionally, it also clears the
+   * ManagedResources created for the region that is lost.
-   * @param event
-   *          event object corresponding to the loss of a region
+   * @param event event object corresponding to the loss of a region
-    
+
-      ManagedResource cleanedUp = 
-                cacheResource.cleanupRegionResources(event.getRegionPath());
-      
+      ManagedResource cleanedUp = cacheResource.cleanupRegionResources(event.getRegionPath());
+
-    Notification notification = new Notification(NOTIF_REGION_LOST, 
-                                    this.modelMBean, 
-                                    Helper.getNextNotificationSequenceNumber(),
-                                    Helper.getRegionEventDetails(event));
-    
+    Notification notification = new Notification(NOTIF_REGION_LOST, this.modelMBean,
+        Helper.getNextNotificationSequenceNumber(), Helper.getRegionEventDetails(event));
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66