GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)

* GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions

This PR builds on the work originally submitted by Greg Green in
https://github.com/apache/geode/pull/404. Also acknowledgements to Galen
O'Sullivan for addressing locking issues in that PR.

This commit changes the storage model of Redis hashes and sets from one
region per each Redis key to a single hash region and single set region.
The Redis key is now also the region key and the data is stored in a Map
and Set respectively in the region. Currently, the backing values do not
implement Delta changes, however this will be a future optimization.

This also fixes the inability of Redis keys to contain other characters
commonly used, such as colons (':').

- Add `RedisLockService` which manages a lock per key within a single
  JVM. Locks are held in a WeakHasMap to allow for automatic cleanup
  (prior PR work, using a pure ConcurrentHashMap, ended up leaking
  memory since there is no straight-forward way to clean up unused
  keys/locks).
- Add new tests including concurrency tests for hashes and sets

Co-authored-by: Greg Green <ggreen@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Prasath Durairaj <prasathd@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Set;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
+import org.apache.geode.redis.internal.CoderException;
+import org.apache.geode.redis.internal.RedisConstants;
+    int popCount = 1;
-    if (commandElems.size() < 2) {
+    if (commandElems.size() < 2 || commandElems.size() > 3) {
+    if (commandElems.size() == 3) {
+      try {
+        popCount = Integer.parseInt(new String(commandElems.get(2)));
+      } catch (NumberFormatException nex) {
+        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ArityDef.SPOP));
+        return;
+      }
+    }
+
-    @SuppressWarnings("unchecked")
-    Region<ByteArrayWrapper, Boolean> keyRegion =
-        (Region<ByteArrayWrapper, Boolean>) context.getRegionProvider().getRegion(key);
-    if (keyRegion == null || keyRegion.isEmpty()) {
-      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
+
+    List<ByteArrayWrapper> popped = new ArrayList<>();
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
+
+      Set<ByteArrayWrapper> set = region.get(key);
+
+      if (set == null || set.isEmpty()) {
+        command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
+        return;
+      }
+
+      Random rand = new Random();
+
+      Set<Integer> randomIndexes = new HashSet<>();
+      while (randomIndexes.size() < popCount) {
+        randomIndexes.add(rand.nextInt(set.size()));
+      }
+
+      int counter = 0;
+      for (ByteArrayWrapper entry : set) {
+        if (randomIndexes.contains(counter)) {
+          popped.add(entry);
+        }
+        counter++;
+      }
+
+      set.removeAll(popped);
+
+      // save the updated set
+      region.put(key, set);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      return;
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
-    Random rand = new Random();
-
-    ByteArrayWrapper[] entries = keyRegion.keySet().toArray(new ByteArrayWrapper[keyRegion.size()]);
-
-    ByteArrayWrapper pop = entries[rand.nextInt(entries.length)];
-
-    keyRegion.remove(pop);
-    if (keyRegion.isEmpty()) {
-      context.getRegionProvider().removeKey(key);
+    try {
+      if (popCount == 1) {
+        command
+            .setResponse(Coder.getBulkStringResponse(context.getByteBufAllocator(), popped.get(0)));
+      } else {
+        command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), popped));
+      }
+    } catch (CoderException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          RedisConstants.SERVER_ERROR_MESSAGE));
-
-    respondBulkStrings(command, context, pop);

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS60 INS25 INS60 INS54 INS54 INS39 INS59 INS27 INS27 INS8 INS74 INS59 INS58 INS8 INS12 INS12 INS8 INS12 INS42 INS34 MOV27 INS27 INS32 INS34 INS54 UPD43 MOV43 MOV43 INS42 INS14 INS43 INS59 INS60 INS60 MOV25 MOV60 INS60 INS61 INS60 INS70 MOV21 INS21 INS44 INS8 INS44 INS8 INS25 INS44 INS8 INS32 INS34 INS42 INS42 INS8 INS12 UPD42 INS74 INS42 INS42 INS32 INS74 INS59 INS74 INS59 INS74 INS59 INS27 INS8 INS39 INS59 INS44 INS42 INS8 INS32 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 INS41 INS27 MOV8 INS8 INS43 INS42 INS21 INS42 INS42 INS21 INS44 INS8 INS43 INS42 MOV42 UPD42 MOV42 MOV43 MOV43 INS74 INS42 INS32 INS43 MOV43 INS42 INS32 INS43 INS43 INS42 INS14 INS32 INS42 INS21 INS42 INS34 MOV43 INS42 INS25 INS21 UPD42 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS34 MOV21 INS42 INS32 INS7 INS43 INS42 INS21 INS41 INS42 INS43 MOV43 MOV42 UPD42 MOV42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS74 UPD42 MOV42 MOV42 INS32 INS32 INS8 INS37 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 UPD42 MOV42 INS32 INS42 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS32 INS45 INS42 INS42 INS32 INS42 UPD42 INS32 INS42 INS42 INS32 INS40 INS42 INS42 INS14 INS42 INS42 INS32 INS42 MOV42 MOV42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS32 UPD42 MOV42 INS42 INS32 UPD42 MOV42 INS42 INS42 INS43 INS32 INS42 INS42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS34 MOV42 INS42 UPD42 MOV42 INS42 INS42 INS34 INS42 INS42 DEL32 DEL42 DEL45 DEL79 DEL43 DEL43 DEL74 DEL42 DEL74 DEL32 DEL32 DEL11 DEL59 DEL60 DEL85 DEL5 DEL42 DEL32 DEL42 DEL85 DEL5 DEL32 DEL3 DEL32 DEL59 DEL60 DEL42 DEL42 DEL40 DEL32 DEL2 DEL59 DEL60 DEL32 DEL25