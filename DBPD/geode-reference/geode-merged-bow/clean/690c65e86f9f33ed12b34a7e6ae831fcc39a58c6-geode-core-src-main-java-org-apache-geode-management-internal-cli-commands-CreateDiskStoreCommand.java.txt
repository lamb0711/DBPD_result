GEODE-6749: Prevent gfsh from creating duplicate named disk stores (#3562)


+import java.util.Collections;
+import org.apache.commons.lang3.tuple.Pair;
+import org.apache.geode.annotations.VisibleForTesting;
+import org.apache.geode.cache.execute.Execution;
+import org.apache.geode.cache.execute.ResultCollector;
+import org.apache.geode.internal.cache.execute.AbstractExecution;
+import org.apache.geode.management.internal.cli.domain.DiskStoreDetails;
+import org.apache.geode.management.internal.cli.functions.ListDiskStoresFunction;
+    Pair<Boolean, String> validationResult =
+        validateDiskstoreAttributes(diskStoreAttributes, targetMembers);
+    if (validationResult.getLeft().equals(Boolean.FALSE)) {
+      return ResultModel.createError(validationResult.getRight());
+    }
+
+  @VisibleForTesting
+  Pair<Boolean, String> validateDiskstoreAttributes(
+      DiskStoreAttributes diskStoreAttributes,
+      Set<DistributedMember> targetMembers) {
+    List<DiskStoreDetails> currentDiskstores = getDiskStoreListing(targetMembers);
+
+    for (DiskStoreDetails detail : currentDiskstores) {
+      if (detail.getName().equals(diskStoreAttributes.getName())) {
+        return Pair.of(Boolean.FALSE,
+            String.format("Error: Disk store %s already exists", diskStoreAttributes.getName()));
+      }
+    }
+
+    return Pair.of(Boolean.TRUE, null);
+  }
+
+  @SuppressWarnings("unchecked")
+  List<DiskStoreDetails> getDiskStoreListing(Set<DistributedMember> members) {
+    final Execution membersFunctionExecutor = getMembersFunctionExecutor(members);
+    if (membersFunctionExecutor instanceof AbstractExecution) {
+      ((AbstractExecution) membersFunctionExecutor).setIgnoreDepartedMembers(true);
+    }
+
+    final ResultCollector<?, ?> resultCollector =
+        membersFunctionExecutor.execute(new ListDiskStoresFunction());
+
+    final List<?> results = (List<?>) resultCollector.getResult();
+    final List<DiskStoreDetails> distributedSystemMemberDiskStores =
+        new ArrayList<>(results.size());
+
+    for (final Object result : results) {
+      if (result instanceof Set) {
+        distributedSystemMemberDiskStores.addAll((Set<DiskStoreDetails>) result);
+      }
+    }
+
+    Collections.sort(distributedSystemMemberDiskStores);
+
+    return distributedSystemMemberDiskStores;
+  }
+
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS78 INS74 INS42 INS44 INS44 INS8 INS79 INS74 INS42 INS44 INS8 INS60 INS25 INS42 INS43 INS43 INS43 INS43 INS42 INS74 INS42 INS60 INS70 INS41 INS42 INS45 INS43 INS43 INS74 INS42 INS60 INS25 INS60 INS60 INS60 INS70 INS21 INS41 INS74 INS59 INS32 INS8 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS42 INS43 INS43 INS83 INS43 INS59 INS62 INS8 INS83 INS74 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS44 INS42 INS8 INS32 INS42 INS43 INS43 INS43 INS42 INS32 INS32 INS42 INS40 INS41 INS42 INS42 INS43 INS43 INS42 INS32 INS43 INS42 INS25 INS42 INS42 INS40 INS33 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS21 INS43 INS76 INS76 INS42 INS32 INS43 INS76 INS42 INS11 INS43 INS43 INS42 INS14 INS83 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS14 INS42 INS74 INS32 INS42 INS42 INS74 INS32 INS42 INS62 INS8 INS42 INS42 INS32 INS32 INS42 INS32 INS41 INS36 INS42 INS9 INS43 INS43 INS76 INS42 INS42 INS43 INS42 INS42 INS42 INS43 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS11 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS32 INS43 INS42 INS42 INS42 INS11 INS42 INS42 INS45 INS32 INS42 INS74 INS42 INS42 INS42 INS43 INS43 INS42 INS42