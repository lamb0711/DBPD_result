GEODE-6152: Removed use of futures (optimized get) for proxy region. (#3371)

* GEODE-6152: Removed use of futures (optimized get) for proxy region.
-   * optimized to only allow one thread to do a search/load, other threads wait on a future
-   *
-
+    Object result;
+    if (isProxy()) {
+      result =
+          getObject(keyInfo, isCreate, generateCallbacks, localValue, disableCopyOnRead, preferCD,
+              requestingClient, clientEvent, returnTombstones);
+    } else {
+      result = optimizedGetObject(keyInfo, isCreate, generateCallbacks, localValue,
+          disableCopyOnRead, preferCD,
+          requestingClient, clientEvent, returnTombstones);
+    }
+    return result;
+  }
+
+
+  private Object getObject(KeyInfo keyInfo, boolean isCreate, boolean generateCallbacks,
+      Object localValue, boolean disableCopyOnRead, boolean preferCD,
+      ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent,
+      boolean returnTombstones) {
+    Object result;
+    boolean partitioned = getDataPolicy().withPartitioning();
+    if (!partitioned) {
+      localValue = getDeserializedValue(null, keyInfo, isCreate, disableCopyOnRead, preferCD,
+          clientEvent, false, false);
+
+      // stats have now been updated
+      if (localValue != null && !Token.isInvalid(localValue)) {
+        result = localValue;
+        return result;
+      }
+      isCreate = localValue == null;
+      result = findObjectInSystem(keyInfo, isCreate, null, generateCallbacks, localValue,
+          disableCopyOnRead, preferCD, requestingClient, clientEvent, returnTombstones);
+
+    } else {
+      // For PRs we don't want to deserialize the value and we can't use findObjectInSystem
+      // because it can invoke code that is transactional.
+      result =
+          getSharedDataView().findObject(keyInfo, this, isCreate, generateCallbacks, localValue,
+              disableCopyOnRead, preferCD, requestingClient, clientEvent, returnTombstones);
+    }
+
+    if (result == null && localValue != null) {
+      if (localValue != Token.TOMBSTONE || returnTombstones) {
+        result = localValue;
+      }
+    }
+    // findObjectInSystem does not call conditionalCopy
+    if (!disableCopyOnRead) {
+      result = conditionalCopy(result);
+    }
+    return result;
+  }
+
+  /**
+   * optimized to only allow one thread to do a search/load, other threads wait on a future
+   */
+  private Object optimizedGetObject(KeyInfo keyInfo, boolean isCreate, boolean generateCallbacks,
+      Object localValue, boolean disableCopyOnRead, boolean preferCD,
+      ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent,
+      boolean returnTombstones) {
-            if (!disableCopyOnRead && isCopyOnRead()) {
+            if (!disableCopyOnRead && (isCopyOnRead() || isProxy())) {
-        // if value == null, try our own search/load
-    // didn't find a future, do one more probe for the entry to catch a race
-    // condition where the future was just removed by another thread
-      boolean partitioned = getDataPolicy().withPartitioning();
-      if (!partitioned) {
-        localValue = getDeserializedValue(null, keyInfo, isCreate, disableCopyOnRead, preferCD,
-            clientEvent, false, false);
+      result =
+          getObject(keyInfo, isCreate, generateCallbacks, localValue, disableCopyOnRead, preferCD,
+              requestingClient, clientEvent, returnTombstones);
-        // stats have now been updated
-        if (localValue != null && !Token.isInvalid(localValue)) {
-          result = localValue;
-          return result;
-        }
-        isCreate = localValue == null;
-        result = findObjectInSystem(keyInfo, isCreate, null, generateCallbacks, localValue,
-            disableCopyOnRead, preferCD, requestingClient, clientEvent, returnTombstones);
-
-      } else {
-
-        // For PRs we don't want to deserialize the value and we can't use findObjectInSystem
-        // because it can invoke code that is transactional.
-        result =
-            getSharedDataView().findObject(keyInfo, this, isCreate, generateCallbacks, localValue,
-                disableCopyOnRead, preferCD, requestingClient, clientEvent, returnTombstones);
-      }
-
-      if (result == null && localValue != null) {
-        if (localValue != Token.TOMBSTONE || returnTombstones) {
-          result = localValue;
-        }
-      }
-      // findObjectInSystem does not call conditionalCopy
-      if (result != null) {
-        VersionTag tag = clientEvent == null ? null : clientEvent.getVersionTag();
-        thisFuture.set(new Object[] {result, tag});
-      } else {
-        thisFuture.set(null);
+      if (otherFuture == null) {
+        if (result != null) {
+          VersionTag tag = clientEvent == null ? null : clientEvent.getVersionTag();
+          thisFuture.set(new Object[] {result, tag});
+        } else {
+          thisFuture.set(null);
+        }
+        getFutures.remove(keyInfo.getKey());
-      getFutures.remove(keyInfo.getKey());
-    if (!disableCopyOnRead) {
-      result = conditionalCopy(result);
-    }
+
+

INS31 INS31 MOV29 MOV78 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 MOV43 MOV43 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 MOV8 INS29 INS83 UPD42 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS60 INS25 INS41 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS39 INS42 INS60 MOV25 INS41 MOV65 INS54 INS42 INS42 INS42 INS42 MOV78 INS43 INS59 INS32 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS42 INS8 INS8 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS21 MOV21 INS25 INS7 INS7 INS7 INS27 MOV8 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS33 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS36 INS27 MOV32 INS32 INS42 DEL54