GEODE-3413: overhaul launcher and process classes and tests

This is primarily an overall of all ServerLauncher and LocatorLauncher
tests and org.apache.geode.internal.process tests. The main classes in
org.apachage.geode.internal.process package are also cleaned up.

In addition, several bugs involving these classes and tests are fixed.

Here is the complete list of tickets that are resolved in this overhaul:

* GEODE-1229: LocatorLauncherRemoteJUnitTest.testStartOverwritesStalePidFile
* GEODE-2791: LocatorLauncherAssemblyIntegrationTest.testLocatorStopsWhenJmxPortIsNonZero fails intermittently with AssertionError
* GEODE-1308: CI failure: LocatorLauncherTest.testSetBindAddressToNonLocalHost
* GEODE-1309: CI failure: ServerLauncherTest.testSetServerBindAddressToNonLocalHost
* GEODE-3193: locator pid file is removed even if there was a problem while shutting down
* GEODE-3413: Overhaul launcher tests and process tests
* GEODE-3414: Cleanup org.apache.geode.internal.process package

Note I moved all useful tests from LocatorLauncherAssemblyIntegrationTest
into the other launcher tests in geode-core.

-import org.apache.commons.lang.StringUtils;
-import org.apache.geode.distributed.internal.DistributionConfig;
-import org.apache.geode.internal.i18n.LocalizedStrings;
-import org.apache.geode.internal.logging.LogService;
-import org.apache.geode.internal.process.ControlFileWatchdog.ControlRequestHandler;
-import org.apache.geode.lang.AttachAPINotFoundException;
-import org.apache.logging.log4j.Logger;
+import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static org.apache.commons.lang.StringUtils.isBlank;
+import static org.apache.commons.lang.Validate.isTrue;
+import static org.apache.commons.lang.Validate.notNull;
+import org.apache.geode.internal.i18n.LocalizedStrings;
+import org.apache.geode.internal.process.ControlFileWatchdog.ControlRequestHandler;
+import org.apache.geode.lang.AttachAPINotFoundException;
+
-public class FileProcessController implements ProcessController {
-  private static final Logger logger = LogService.getLogger();
+class FileProcessController implements ProcessController {
-  public static final String STATUS_TIMEOUT_PROPERTY =
-      DistributionConfig.GEMFIRE_PREFIX + "FileProcessController.STATUS_TIMEOUT";
+  static final long DEFAULT_STATUS_TIMEOUT_MILLIS = 60 * 1000;
-  private final FileControllerParameters arguments;
+  private final FileControllerParameters parameters;
-   * @param arguments details about the controllable process
+   * @param parameters details about the controllable process
-  public FileProcessController(final FileControllerParameters arguments, final int pid) {
-    this(arguments, pid, Long.getLong(STATUS_TIMEOUT_PROPERTY, 60 * 1000), TimeUnit.MILLISECONDS);
+  FileProcessController(final FileControllerParameters parameters, final int pid) {
+    this(parameters, pid, DEFAULT_STATUS_TIMEOUT_MILLIS, MILLISECONDS);
-   * @param arguments details about the controllable process
+   * @param parameters details about the controllable process
-  public FileProcessController(final FileControllerParameters arguments, final int pid,
+  FileProcessController(final FileControllerParameters parameters, final int pid,
-    if (pid < 1) {
-      throw new IllegalArgumentException("Invalid pid '" + pid + "' specified");
-    }
+    notNull(parameters, "Invalid parameters '" + parameters + "' specified");
+    isTrue(pid > 0, "Invalid pid '" + pid + "' specified");
+    isTrue(timeout >= 0, "Invalid timeout '" + timeout + "' specified");
+    notNull(units, "Invalid units '" + units + "' specified");
+
-    this.arguments = arguments;
+    this.parameters = parameters;
-    return this.pid;
+    return pid;
-    return status(this.arguments.getWorkingDirectory(),
-        this.arguments.getProcessType().getStatusRequestFileName(),
-        this.arguments.getProcessType().getStatusFileName());
+    return status(parameters.getDirectory(), parameters.getProcessType().getStatusRequestFileName(),
+        parameters.getProcessType().getStatusFileName());
-    stop(this.arguments.getWorkingDirectory(),
-        this.arguments.getProcessType().getStopRequestFileName());
+    stop(parameters.getDirectory(), parameters.getProcessType().getStopRequestFileName());
+  long getStatusTimeoutMillis() {
+    return statusTimeoutMillis;
+  }
+
-    final File stopRequestFile = new File(workingDir, stopRequestFileName);
+    File stopRequestFile = new File(workingDir, stopRequestFileName);
-    final File statusFile = new File(workingDir, statusFileName);
-    final AtomicReference<String> statusRef = new AtomicReference<>();
+    File statusFile = new File(workingDir, statusFileName);
+    AtomicReference<String> statusRef = new AtomicReference<>();
-    final ControlRequestHandler statusHandler = new ControlRequestHandler() {
-      @Override
-      public void handleRequest() throws IOException {
-        // read the statusFile
-        final BufferedReader reader = new BufferedReader(new FileReader(statusFile));
-        final StringBuilder lines = new StringBuilder();
-        try {
-          String line = null;
-          while ((line = reader.readLine()) != null) {
-            lines.append(line);
-          }
-        } finally {
-          statusRef.set(lines.toString());
-          reader.close();
-        }
+    ControlRequestHandler statusHandler = () -> {
+      // read the statusFile
+      StringBuilder lines = new StringBuilder();
+      try (BufferedReader reader = new BufferedReader(new FileReader(statusFile))) {
+        reader.lines().forEach(lines::append);
+      } finally {
+        statusRef.set(lines.toString());
-    final ControlFileWatchdog statusFileWatchdog =
+    ControlFileWatchdog statusFileWatchdog =
-    final File statusRequestFile = new File(workingDir, statusRequestFileName);
+    File statusRequestFile = new File(workingDir, statusRequestFileName);
-    final long start = System.currentTimeMillis();
+    long start = System.currentTimeMillis();
-      if (System.currentTimeMillis() >= start + this.statusTimeoutMillis) {
-        final TimeoutException te =
-            new TimeoutException("Timed out waiting for process to create " + statusFile);
-        try {
-          statusFileWatchdog.stop();
-        } catch (InterruptedException e) {
-          logger.info("Interrupted while stopping status file watchdog.", e);
-        } catch (RuntimeException e) {
-          logger.info("Unexpected failure while stopping status file watchdog.", e);
-        }
-        throw te;
+      if (System.currentTimeMillis() >= start + statusTimeoutMillis) {
+        statusFileWatchdog.stop();
+        throw new TimeoutException("Timed out waiting for process to create " + statusFile);
-    final String lines = statusRef.get();
-    if (StringUtils.isBlank(lines)) {
+    String lines = statusRef.get();
+    if (isBlank(lines)) {

MOV26 MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS31 INS39 INS39 INS42 INS8 UPD42 MOV27 UPD42 UPD42 UPD42 INS21 INS21 INS21 INS21 INS41 UPD42 UPD42 INS42 INS42 UPD42 INS32 INS32 INS32 INS32 INS42 INS42 MOV43 INS42 INS42 INS27 INS42 INS27 MOV27 INS42 INS27 INS27 INS42 INS42 INS27 UPD42 INS86 INS45 INS42 INS45 MOV42 UPD34 MOV34 INS42 INS34 INS45 INS42 INS45 INS45 INS42 INS45 UPD42 INS42 UPD42 INS42 UPD42 MOV8 MOV8 INS42 INS42 INS42 INS53 INS58 INS42 MOV14 MOV43 MOV59 INS21 INS32 INS32 INS42 INS90 MOV42 UPD42 MOV42 INS42 INS42 DEL83 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL23 DEL83 DEL42 DEL43 DEL40 DEL45 DEL27 DEL83 DEL42 DEL42 DEL42 DEL32 DEL40 DEL83 DEL27 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL83 DEL83 DEL83 DEL42 DEL43 DEL83 DEL60 DEL83 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL32 DEL21 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL31 DEL1 DEL14 DEL83 DEL83 DEL83 DEL52 DEL42 DEL22 DEL83 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL53 DEL8 DEL83 DEL42