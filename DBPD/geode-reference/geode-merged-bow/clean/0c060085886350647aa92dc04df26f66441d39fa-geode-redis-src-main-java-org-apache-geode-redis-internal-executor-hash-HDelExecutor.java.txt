GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4781)

* Revert "Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)"

This reverts commit f0982cdedf1b122f734919d0647434cca33ec254.

* Fix sporadic test failures for concurrent HSetNX
+import java.util.Map;
-import org.apache.geode.cache.Region;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
-import org.apache.geode.redis.internal.RedisDataType;
+/**
+ * <pre>
+ * Implements the Redis HDEL command.
+ *
+ * Removes the specified fields from the hash for a given key.
+ *
+ * Examples:
+ *
+ * redis> HSET myhash field1 "foo"
+ * (integer) 1
+ * redis> HDEL myhash field1
+ * (integer) 1
+ * redis> HDEL myhash field2
+ * (integer) 0
+ *
+ * </pre>
+ */
-    checkDataType(key, RedisDataType.REDIS_HASH, context);
-    Region<ByteArrayWrapper, ByteArrayWrapper> keyRegion = getRegion(context, key);
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Map<ByteArrayWrapper, ByteArrayWrapper> map = getMap(context, key);
-    if (keyRegion == null) {
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), numDeleted));
+      if (map == null || map.isEmpty()) {
+        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), numDeleted));
+        return;
+      }
+
+      for (int i = START_FIELDS_INDEX; i < commandElems.size(); i++) {
+        ByteArrayWrapper field = new ByteArrayWrapper(commandElems.get(i));
+        Object oldValue = map.remove(field);
+        if (oldValue != null) {
+          numDeleted++;
+        }
+      }
+      // save map
+      saveMap(map, context, key);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      return;
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
-
-    for (int i = START_FIELDS_INDEX; i < commandElems.size(); i++) {
-      ByteArrayWrapper field = new ByteArrayWrapper(commandElems.get(i));
-      Object oldValue = keyRegion.remove(field);
-      if (oldValue != null)
-        numDeleted++;
-    }
-    if (keyRegion.isEmpty()) {
-      context.getRegionProvider().removeKey(key, RedisDataType.REDIS_HASH);
-    }

MOV26 INS26 INS40 UPD40 UPD40 INS29 INS65 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS54 INS58 INS8 INS12 INS12 INS43 INS59 MOV60 MOV25 MOV24 MOV21 INS44 INS8 INS44 INS8 INS42 INS42 INS32 UPD74 INS27 INS43 INS42 INS21 INS21 INS41 INS43 INS42 MOV21 INS41 INS42 INS42 INS42 UPD43 UPD42 INS27 INS32 UPD42 UPD42 INS42 INS42 INS32 INS32 INS42 UPD42 UPD42 UPD42 MOV42 MOV33 INS42 INS42 INS8 INS32 UPD42 MOV42 INS42 INS42 INS32 UPD42 MOV42 INS42 INS32 MOV21 UPD42 MOV42 INS42 INS42 INS42 INS32 INS45 UPD42 MOV42 UPD42 MOV42 INS32 INS45 UPD42 INS42 INS42 UPD42 MOV42 INS42 DEL27 DEL40 DEL32 DEL40 DEL32 DEL8 DEL25