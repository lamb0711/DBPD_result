Merge branch 'release/1.4.0'

-import java.util.HashMap;
-import java.util.Map;
-import java.util.ServiceLoader;
+import org.apache.geode.internal.cache.client.protocol.ClientProtocolProcessor;
+import org.apache.geode.internal.cache.client.protocol.ClientProtocolService;
+import org.apache.geode.internal.cache.client.protocol.ClientProtocolServiceLoader;
+import org.apache.geode.internal.cache.client.protocol.exception.ServiceLoadingFailureException;
+import org.apache.geode.internal.cache.client.protocol.exception.ServiceVersionNotFoundException;
-import org.apache.geode.security.internal.server.Authenticator;
+  private final ClientProtocolServiceLoader clientProtocolServiceLoader;
-  private Map<String, Class<? extends Authenticator>> authenticators = null;
-  public ServerConnectionFactory() {}
-
-  private synchronized void initializeAuthenticatorsMap() {
-    if (authenticators != null) {
-      return;
-    }
-    HashMap<String, Class<? extends Authenticator>> tmp = new HashMap<>();
-
-    ServiceLoader<Authenticator> loader = ServiceLoader.load(Authenticator.class);
-    for (Authenticator streamAuthenticator : loader) {
-      tmp.put(streamAuthenticator.implementationID(), streamAuthenticator.getClass());
-    }
-
-    authenticators = tmp;
+  public ServerConnectionFactory() {
+    clientProtocolServiceLoader = new ClientProtocolServiceLoader();
-  private synchronized ClientProtocolService initializeClientProtocolService(
-      StatisticsFactory statisticsFactory, String statisticsName) {
-    if (clientProtocolService != null) {
-      return clientProtocolService;
-    }
-    // use temp to make sure we publish properly.
-    ClientProtocolService tmp = new ClientProtocolServiceLoader().loadService();
-    tmp.initializeStatistics(statisticsName, statisticsFactory);
-
-    clientProtocolService = tmp;
-    return clientProtocolService;
-  }
-
-  private Authenticator findStreamAuthenticator(String implementationID) {
-    if (authenticators == null) {
-      initializeAuthenticatorsMap();
-    }
-    Class<? extends Authenticator> streamAuthenticatorClass = authenticators.get(implementationID);
-    if (streamAuthenticatorClass == null) {
-      throw new ServiceLoadingFailureException(
-          "Could not find implementation for Authenticator with implementation ID "
-              + implementationID);
-    } else {
-      try {
-        return streamAuthenticatorClass.newInstance();
-      } catch (InstantiationException | IllegalAccessException e) {
-        throw new ServiceLoadingFailureException(
-            "Unable to instantiate authenticator for ID " + implementationID, e);
-      }
-    }
-  }
-
-  private ClientProtocolService getOrCreateClientProtocolService(
+  private synchronized ClientProtocolService getClientProtocolService(
-      return initializeClientProtocolService(statisticsFactory, serverName);
+      clientProtocolService = clientProtocolServiceLoader.lookupService();
+      clientProtocolService.initializeStatistics(serverName, statisticsFactory);
-    if (communicationMode == ProtobufClientServerProtocol.getModeNumber()) {
+    if (ProtobufClientServerProtocol.getModeNumber() == communicationMode) {
-          String authenticationMode =
-              System.getProperty("geode.protocol-authentication-mode", "NOOP");
-
-              socketBufferSize, communicationModeStr, communicationMode, acceptor, securityService,
-              authenticationMode);
+              socketBufferSize, communicationModeStr, communicationMode, acceptor, securityService);
+        } catch (ServiceVersionNotFoundException ex) {
+          throw new IOException("No service matching provided version byte", ex);
-      SecurityService securityService, String authenticationMode) {
+      SecurityService securityService) {
-        getOrCreateClientProtocolService(cache.getDistributedSystem(), acceptor.getServerName());
+        getClientProtocolService(cache.getDistributedSystem(), acceptor.getServerName());
-    ClientProtocolProcessor processor = service.createProcessorForCache(cache,
-        findStreamAuthenticator(authenticationMode), securityService);
+    ClientProtocolProcessor processor = service.createProcessorForCache(cache, securityService);

MOV26 MOV26 MOV26 INS26 UPD40 UPD40 UPD40 UPD40 INS40 INS23 MOV83 INS83 INS43 INS59 UPD83 INS42 INS83 UPD42 UPD42 MOV42 INS42 MOV42 UPD42 MOV14 INS21 INS21 INS7 INS32 UPD42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS42 INS12 INS44 INS8 INS43 INS42 INS53 INS42 INS14 INS43 INS45 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL33 DEL59 DEL23 DEL83 DEL42 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL41 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL43 DEL84 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31 DEL32 DEL41 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32