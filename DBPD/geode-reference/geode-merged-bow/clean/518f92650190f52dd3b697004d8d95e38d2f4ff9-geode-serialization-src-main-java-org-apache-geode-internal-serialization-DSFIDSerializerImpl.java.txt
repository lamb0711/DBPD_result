GEODE-7344: DSFID implements BasicSerializable (#4364)


+import java.io.NotSerializableException;
-        DSFIDSerializerImpl.this.writeDSFID((DataSerializableFixedID) obj, output);
+        if (obj == null || obj instanceof BasicSerializable) {
+          write((BasicSerializable) obj, output);
+        } else {
+          throw new NotSerializableException("object with class " + obj.getClass().getName() +
+              " is not serializable via DSFIDSerializerImpl");
+        }
-  public void writeDSFID(DataSerializableFixedID o, DataOutput out) throws IOException {
-    if (o == null) {
+  public void write(final BasicSerializable bs, final DataOutput out) throws IOException {
+    writeMetaData(bs, out);
+    if (bs != null) {
+      invokeToData(bs, out);
+    }
+  }
+
+  private void writeMetaData(final BasicSerializable bs, final DataOutput out)
+      throws IOException {
+    if (bs == null) {
-    int dsfid = o.getDSFID();
-    if (dsfid == NO_FIXED_ID) {
-      throw new IllegalArgumentException(
-          "NO_FIXED_ID is not supported by BasicDSFIDSerializer - use InternalDataSerializer instead: "
-              + o.getClass().getName());
+    if (bs instanceof DataSerializableFixedID) {
+      final DataSerializableFixedID dsfid = (DataSerializableFixedID) bs;
+      final int id = dsfid.getDSFID();
+      if (id == NO_FIXED_ID) {
+        throw new IllegalArgumentException(
+            "NO_FIXED_ID is not supported by BasicDSFIDSerializer - use InternalDataSerializer instead: "
+                + dsfid.getClass().getName());
+      }
+      writeDSFIDHeader(id, out);
+    } else {
+      out.writeByte(DSCODE.DATA_SERIALIZABLE.toByte());
+      final Class c = bs.getClass();
+      StaticSerialization.writeClass(c, out);
-    writeDSFIDHeader(dsfid, out);
-    invokeToData(o, out);
+
+    final SerializationContext context = new SerializationContextImpl(out, this);
+
+
+      if (ds instanceof BasicSerializable) {
+        ((BasicSerializable) ds).toData(out, context);
+        return;
+      }
-    SerializationContext context = new SerializationContextImpl(out, this);
+
+  private Object readDSFID(final DataInput in) throws IOException, ClassNotFoundException {
+    checkIn(in);
+    DSCODE dsHeaderType = DscodeHelper.toDSCODE(in.readByte());
+    if (dsHeaderType == DSCODE.NULL) {
+      return null;
+    }
+    return readDSFID(in, dsHeaderType);
+  }
-  public Object readDSFID(final DataInput in, DSCODE dscode)
+  private Object readDSFID(final DataInput in, DSCODE dscode)
+      case DATA_SERIALIZABLE:
+        return readDataSerializable(in);
-  public Object readDSFID(final DataInput in) throws IOException, ClassNotFoundException {
-    checkIn(in);
-    DSCODE dsHeaderType = DscodeHelper.toDSCODE(in.readByte());
-    if (dsHeaderType == DSCODE.NULL) {
-      return null;
-    }
-    return readDSFID(in, dsHeaderType);
-  }
-
-  public int readDSFIDHeader(final DataInput in, DSCODE dscode) throws IOException {
+  private int readDSFIDHeader(final DataInput in, DSCODE dscode) throws IOException {
-      if (!v.isCurrentVersion()) {
+      if (!v.isCurrentVersion() && ds instanceof SerializationVersions) {
-        ((DataSerializableFixedID) ds).fromData(in, context);
+        if (ds instanceof BasicSerializable) {
+          ((BasicSerializable) ds).fromData(in, context);
+        } else {
+          throw new IOException(
+              "problem invoking fromData method on object of class" + ds.getClass().getName());
+        }
+  private Object readDataSerializable(final DataInput in)
+      throws IOException, ClassNotFoundException {
+    Class<?> c = StaticSerialization.readClass(in);
+    try {
+      Constructor<?> init = c.getConstructor();
+      init.setAccessible(true);
+      Object o = init.newInstance();
+
+      invokeFromData(o, in);
+
+      return o;
+    } catch (EOFException | SocketException ex) {
+      // client went away - ignore
+      throw ex;
+    } catch (Exception ex) {
+      throw new IOException(
+          String.format("Could not create an instance of %s .",
+              c.getName()),
+          ex);
+    }
+  }

INS26 MOV31 INS40 INS31 INS31 INS31 MOV78 MOV83 MOV39 UPD42 MOV42 INS44 MOV44 INS43 INS8 INS83 INS39 INS42 INS44 MOV44 MOV43 MOV8 MOV60 UPD83 UPD83 UPD83 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS83 INS43 INS42 INS83 INS43 UPD42 INS42 INS21 INS25 INS83 INS43 INS42 INS83 INS25 INS42 INS83 INS43 INS42 INS42 INS42 INS60 INS54 INS42 INS42 INS32 INS27 INS8 INS42 INS62 INS8 INS8 INS83 INS41 INS49 INS42 INS74 INS59 INS8 INS12 INS12 INS42 INS42 INS42 INS42 INS33 INS21 UPD42 INS42 MOV43 INS60 MOV60 MOV25 MOV21 INS21 INS60 MOV21 INS25 INS42 INS32 INS25 INS43 INS76 INS42 INS32 INS60 INS21 INS60 INS21 INS41 INS44 INS8 INS44 INS8 INS32 INS83 MOV43 INS59 INS83 INS32 INS83 INS43 INS59 INS62 INS8 INS42 INS42 INS27 MOV38 INS8 INS42 INS42 INS42 INS42 INS74 INS59 INS32 INS43 INS59 INS32 INS42 INS84 INS42 INS53 INS43 INS42 INS53 INS8 INS42 INS42 INS42 INS42 INS11 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS42 INS42 INS43 INS21 INS41 MOV38 INS62 MOV25 INS43 INS76 INS42 INS32 INS42 INS42 INS9 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS42 INS14 INS25 MOV43 INS42 UPD42 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS62 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS27 INS8 INS8 INS36 INS42 INS42 INS42 INS42 INS42 INS43 INS53 INS42 INS42 INS42 INS45 INS32 INS27 INS62 MOV21 INS53 INS11 INS42 INS14 INS42 INS42 INS42 INS33 INS42 INS43 INS14 INS43 INS42 INS43 INS27 INS42 UPD42 INS43 INS27 UPD42 INS42 INS42 INS45 INS32 INS43 INS42 INS45 INS32 INS45 INS43 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL52 DEL8 DEL31