GEODE-6551: Fix Constraints Check in Alter Region (#3349)

* GEODE-6551: Fix Constraints Check in Alter Region

Some persistence constraints were not correctly validated for a
partitioned region before associating an async-event-queue and/or
gateway-sender, leaving the region and the cluster configuration
service inconsistent.

- Fixed minor warnings.
- Fixed the internal validation implemented by PartitionedRegion.
- Some method's signatures were changed from "parallelGatewaySender" to
"parallelAsynchronousEventDispatcher" as they are used alike for
both a gateway-sender and async-event-queue.
+import java.util.function.Predicate;
-
-  private static final String NULLSTR = "null";
+  public String getId() {
+    return RegionAlterFunction.class.getName();
+  }
+
+  @Override
+
+  private static <T> Predicate<T> not(Predicate<T> t) {
+    return t.negate();
+  }
+
-      throw new IllegalArgumentException(String.format(
-          "Region does not exist: %s", regionPathString));
+      throw new IllegalArgumentException(
+          String.format("Region does not exist: %s", regionPathString));
+    AttributesMutator<?, ?> mutator = region.getAttributesMutator();
-    AttributesMutator mutator = region.getAttributesMutator();
-        region.getEntryIdleTimeout(), p -> mutator.setEntryIdleTimeout(p),
-        p -> mutator.setCustomEntryIdleTimeout(p));
+        region.getEntryIdleTimeout(), mutator::setEntryIdleTimeout,
+        mutator::setCustomEntryIdleTimeout);
-        region.getEntryTimeToLive(), p -> mutator.setEntryTimeToLive(p),
-        p -> mutator.setCustomEntryTimeToLive(p));
+        region.getEntryTimeToLive(), mutator::setEntryTimeToLive,
+        mutator::setCustomEntryTimeToLive);
-        region.getRegionIdleTimeout(), p -> mutator.setRegionIdleTimeout(p), null);
+        region.getRegionIdleTimeout(), mutator::setRegionIdleTimeout, null);
-        region.getRegionTimeToLive(), p -> mutator.setRegionTimeToLive(p), null);
-
+        region.getRegionTimeToLive(), mutator::setRegionTimeToLive, null);
+
+
-        validateParallelGatewaySenderIDs((PartitionedRegion) region, newAsyncEventQueueIds);
+        validateParallelAsynchronousEventQueueIDs((PartitionedRegion) region,
+            newAsyncEventQueueIds);
-      ((PartitionedRegion) region).updatePRConfigWithNewSetOfGatewaySenders(senderIds);
+
+      ((PartitionedRegion) region)
+          .updatePRConfigWithNewSetOfAsynchronousEventDispatchers(senderIds);
-      // Remove old gateway sender ids that aren't in the new list
-      if (!oldGatewaySenderIds.isEmpty()) {
-        for (String gatewaySenderId : oldGatewaySenderIds) {
-          if (!newGatewaySenderIds.contains(gatewaySenderId)) {
-            mutator.removeGatewaySenderId(gatewaySenderId);
-          }
-        }
-      }
+      // Remove old gateway sender ids that aren't in the new list
+      oldGatewaySenderIds.stream().filter(not(newGatewaySenderIds::contains))
+          .forEach(mutator::removeGatewaySenderId);
-      for (String gatewaySenderId : newGatewaySenderIds) {
-        if (!oldGatewaySenderIds.contains(gatewaySenderId)) {
-          mutator.addGatewaySenderId(gatewaySenderId);
-        }
-      }
+      newGatewaySenderIds.stream().filter(not(oldGatewaySenderIds::contains))
+          .forEach(mutator::addGatewaySenderId);
+      Set<String> oldAsyncEventQueueIds = region.getAsyncEventQueueIds();
-      Set<String> oldAsyncEventQueueIds = region.getAsyncEventQueueIds();
-      if (!oldAsyncEventQueueIds.isEmpty()) {
-        for (String asyncEventQueueId : oldAsyncEventQueueIds) {
-          if (!newAsyncEventQueueIds.contains(asyncEventQueueId)) {
-            mutator.removeAsyncEventQueueId(asyncEventQueueId);
-          }
-        }
-      }
+      oldAsyncEventQueueIds.stream().filter(not(newAsyncEventQueueIds::contains))
+          .forEach(mutator::removeAsyncEventQueueId);
-      for (String asyncEventQueueId : newAsyncEventQueueIds) {
-        if (!oldAsyncEventQueueIds.contains(asyncEventQueueId)) {
-          mutator.addAsyncEventQueueId(asyncEventQueueId);
-        }
-      }
+      newAsyncEventQueueIds.stream().filter(not(oldAsyncEventQueueIds::contains))
+          .forEach(mutator::addAsyncEventQueueId);
-      ExpirationAttributes existingAttributes,
-      Consumer<ExpirationAttributes> mutator1,
+      ExpirationAttributes existingAttributes, Consumer<ExpirationAttributes> mutator1,
+
+
+
-
-      region.validateParallelGatewaySenderIds(parallelSenders);
+      region.validateParallelAsynchronousEventDispatcherIds(parallelSenders);
-  @Override
-  public String getId() {
-    return RegionAlterFunction.class.getName();
+  private void validateParallelAsynchronousEventQueueIDs(PartitionedRegion region,
+      Set<String> newAsyncEventQueueIds) {
+    try {
+      Set<String> parallelSenders =
+          region.filterOutNonParallelAsyncEventQueues(newAsyncEventQueueIds);
+      region.validateParallelAsynchronousEventDispatcherIds(parallelSenders);
+    } catch (PRLocallyDestroyedException e) {
+      throw new IllegalStateException("Partitioned Region not found registered", e);
+    }

INS26 MOV31 INS40 INS31 INS31 INS83 INS83 INS73 INS74 INS42 INS44 INS8 MOV60 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS43 INS43 INS74 INS42 INS41 INS43 INS42 INS74 INS42 INS54 INS42 INS42 INS43 INS43 INS32 INS74 INS42 INS43 MOV43 INS8 INS12 INS42 INS42 INS42 INS42 MOV43 INS76 INS76 INS90 INS90 INS90 INS90 INS90 INS90 INS21 INS21 INS21 INS21 INS42 INS60 INS21 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS32 INS74 INS59 INS32 INS43 INS42 INS53 UPD42 INS32 UPD42 MOV42 INS90 INS32 UPD42 MOV42 INS90 INS32 UPD42 MOV42 INS90 INS32 UPD42 MOV42 INS90 UPD42 INS43 MOV43 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS45 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS90 UPD42 MOV42 INS42 INS42 INS90 MOV42 UPD42 MOV42 INS42 INS90 UPD42 MOV42 INS42 INS42 INS90 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL42 DEL59 DEL42 DEL42 DEL42 DEL32 DEL86 DEL32 DEL38 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL32 DEL38 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL8 DEL25 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70