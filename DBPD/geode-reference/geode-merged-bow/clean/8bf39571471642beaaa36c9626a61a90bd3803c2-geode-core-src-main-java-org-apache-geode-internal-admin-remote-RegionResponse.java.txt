Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
-   
+
+
-//import org.apache.geode.internal.*;
+// import org.apache.geode.internal.*;
-//import java.util.*;
+// import java.util.*;
+ * 
-//   instance variables
+  // instance variables
-  ///////////////////////  Static Methods  ///////////////////////
-  
+  /////////////////////// Static Methods ///////////////////////
+
-   * Returns a <code>RegionResponse</code> that will be returned to the
-   * specified recipient. The message will contains a copy of the local manager's
-   * system config.
+   * Returns a <code>RegionResponse</code> that will be returned to the specified recipient. The
+   * message will contains a copy of the local manager's system config.
-  public static RegionResponse create(DistributionManager dm,
-                                      InternalDistributedMember recipient,
-                                      RegionRequest request) {
+  public static RegionResponse create(DistributionManager dm, InternalDistributedMember recipient,
+      RegionRequest request) {
-        case RegionRequest.GET_REGION:
-          r = cache.getRegion(request.path);
-          break;
+          case RegionRequest.GET_REGION:
+            r = cache.getRegion(request.path);
+            break;
-        case RegionRequest.CREATE_VM_ROOT:
-          r = cache.createRegion(request.newRegionName,
-                                 request.newRegionAttributes);
-          break;
+          case RegionRequest.CREATE_VM_ROOT:
+            r = cache.createRegion(request.newRegionName, request.newRegionAttributes);
+            break;
-        case RegionRequest.CREATE_VM_REGION:
-          Region parent = cache.getRegion(request.path);
-          r = parent.createSubregion(request.newRegionName,
-                                     request.newRegionAttributes); 
-          break;
+          case RegionRequest.CREATE_VM_REGION:
+            Region parent = cache.getRegion(request.path);
+            r = parent.createSubregion(request.newRegionName, request.newRegionAttributes);
+            break;
-        default:
-          throw new InternalGemFireException(LocalizedStrings.RegionResponse_UNKNOWN_REGIONREQUEST_OPERATION_0.toLocalizedString(Integer.valueOf(action)));
+          default:
+            throw new InternalGemFireException(
+                LocalizedStrings.RegionResponse_UNKNOWN_REGIONREQUEST_OPERATION_0
+                    .toLocalizedString(Integer.valueOf(action)));
-          m.userAttribute = (String)CacheDisplay.getCachedObjectDisplay(r.getUserAttribute(), GemFireVM.LIGHTWEIGHT_CACHE_VALUE);
+          m.userAttribute = (String) CacheDisplay.getCachedObjectDisplay(r.getUserAttribute(),
+              GemFireVM.LIGHTWEIGHT_CACHE_VALUE);
-    } 
-    catch (CancelException cce){
-      /*no cache yet*/
+    } catch (CancelException cce) {
+      /* no cache yet */
-    m.setRecipient(recipient);    
+    m.setRecipient(recipient);
-  
+
-  
+
-  
+
-   * Returns any exception that was thrown while generating this
-   * response.
+   * Returns any exception that was thrown while generating this response.
-  public void fromData(DataInput in)
-    throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {

UPD66 UPD66 UPD66 DEL66 DEL66