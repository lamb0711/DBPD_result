Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-public final class DistributedRegionFunctionResultSender implements
-    InternalResultSender {
+public final class DistributedRegionFunctionResultSender implements InternalResultSender {
-  
+
-  
+
-   * Have to combine next two construcotr in one and make a new class which will
-   * send Results back.
+   * Have to combine next two construcotr in one and make a new class which will send Results back.
-  public DistributedRegionFunctionResultSender(DM dm,
-      DistributedRegionFunctionStreamingMessage msg, Function function) {
+  public DistributedRegionFunctionResultSender(DM dm, DistributedRegionFunctionStreamingMessage msg,
+      Function function) {
-   * Have to combine next two construcotr in one and make a new class which will
-   * send Results back.
+   * Have to combine next two construcotr in one and make a new class which will send Results back.
-  public DistributedRegionFunctionResultSender(DM dm, ResultCollector rc,
-      Function function, final ServerToClientFunctionResultSender sender) {
+  public DistributedRegionFunctionResultSender(DM dm, ResultCollector rc, Function function,
+      final ServerToClientFunctionResultSender sender) {
-    this.isLocal = true;  
+    this.isLocal = true;
-    if(this.localLastResultRecieved){
+    if (this.localLastResultRecieved) {
-      if(this.rc != null) {
+      if (this.rc != null) {
-    }
-    else {
+    } else {
-        FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem()).incResultsReceived();
-      }
-      else {
+        FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem())
+            .incResultsReceived();
+      } else {
-        }
-        catch (ForceReattemptException e) {
+        } catch (ForceReattemptException e) {
-        }
-        catch (InterruptedException e) {
+        } catch (InterruptedException e) {
-    //incrementing result sent stats.
-      FunctionStats.getFunctionStats(functionObject.getId(),
-              this.dm.getSystem()).incResultsReturned();
+      // incrementing result sent stats.
+      FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem())
+          .incResultsReturned();
-  
+
-  
+
-    }
-    else {
+    } else {
-      }
-      else {
+      } else {
-        }
-        catch (ForceReattemptException e) {
+        } catch (ForceReattemptException e) {
-        }
-        catch (InterruptedException e) {
+        } catch (InterruptedException e) {
-        FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem()).incResultsReceived();
+        FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem())
+            .incResultsReceived();
-    }
-    else {
+    } else {
-        FunctionStats.getFunctionStats(functionObject.getId(),
-                this.dm.getSystem()).incResultsReceived();
-      }
-      else {
+        FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem())
+            .incResultsReceived();
+      } else {
-        }
-        catch (ForceReattemptException e) {
+        } catch (ForceReattemptException e) {
-        }
-        catch (InterruptedException e) {
+        } catch (InterruptedException e) {
-    //incrementing result sent stats.
-      FunctionStats.getFunctionStats(functionObject.getId(),
-              this.dm.getSystem()).incResultsReturned();
+      // incrementing result sent stats.
+      FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem())
+          .incResultsReturned();
-  
-  public synchronized void sendResult(Object oneResult,
-      DistributedMember memberID) {
+
+  public synchronized void sendResult(Object oneResult, DistributedMember memberID) {
-    }
-    else {
+    } else {
-          FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem()).incResultsReceived();
+          FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem())
+              .incResultsReceived();
-      }
-      else {
+      } else {
-        }
-        catch (ForceReattemptException e) {
+        } catch (ForceReattemptException e) {
-        }
-        catch (InterruptedException e) {
+        } catch (InterruptedException e) {
-        FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem()).incResultsReturned();
+        FunctionStats.getFunctionStats(functionObject.getId(), this.dm.getSystem())
+            .incResultsReturned();
-  
+
-    InternalFunctionException iFunxtionException = new InternalFunctionException(
-        exception);
+    InternalFunctionException iFunxtionException = new InternalFunctionException(exception);
-  
+
-      //this.sender.lastResult(exception);
-    }
-    else {
-      ((LocalResultCollector)this.rc).setException(exception);
-      //this.lastResult(exception);
-      logger.info(LocalizedMessage.create(
-          LocalizedStrings.DistributedRegionFunctionResultSender_UNEXPECTED_EXCEPTION_DURING_FUNCTION_EXECUTION_ON_LOCAL_NODE), exception);
+      // this.sender.lastResult(exception);
+    } else {
+      ((LocalResultCollector) this.rc).setException(exception);
+      // this.lastResult(exception);
+      logger.info(
+          LocalizedMessage.create(
+              LocalizedStrings.DistributedRegionFunctionResultSender_UNEXPECTED_EXCEPTION_DURING_FUNCTION_EXECUTION_ON_LOCAL_NODE),
+          exception);
-  
+
-  public boolean isLocallyExecuted()
-  {
+  public boolean isLocallyExecuted() {
-    return this.localLastResultRecieved ;
+    return this.localLastResultRecieved;

UPD66 UPD66 DEL66 DEL66