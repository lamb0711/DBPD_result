GEODE-6035 Increase backlog for peer-to-peer connection formation

I've made a sweep through the code to make TCP/IP backlog defaults
consistent.  All of them now default to 1280 but all are limited
by the operating system limit.  On Linux this is usually 128 and
is configured with the somaxconn setting.

The figure 1280 was recommended by Pivotal field engineers.

This also adds the following LinuxSystemStats:

    tcpExtSynCookiesRecv    The number of TCP/IP SYN cookies received due to a full server socket backlog.
                            If this is non-zero consider disabling SYN cookies because they form sub-optimal connections.
                            units: cookies received
    tcpExtSynCookiesSent    The number of TCP/IP SYN cookies sent due to a full server socket backlog.
                            If this is non-zero consider disabling SYN cookies because they form sub-optimal connections.
                            units: cookies sent
    tcpExtListenDrops       The number of TCP/IP connection requests that have been dropped due to a full backlog.
                            If this is large increase the OS SOMAXCONN setting and increase socket backlog settings.
                            units: requests
    tcpExtListenOverflows   The number of TCP/IP connection requests that could not be queued due to a small backlog.
                            These are either dropped (tcpExtListenDrops) or handled via cookies (tcpSynCookiesSent).
                            In either case you should consider increasing SOMAXCONN and increasing backlog settings.
                            units: requests
    soMaxConn               Maximum TCP/IP server socket connection request backlog
                            units: connection requests

+  private static boolean soMaxConnProcessed;
+  private static int soMaxConn;
+
+    getNetStatStats(longs, ints);
+   * TcpExt:=0 SyncookiesSent=1
+   * ListenOverflows=20 ListenDrops=21
+   */
+  private static void getNetStatStats(long[] longs, int[] ints) {
+    InputStreamReader isr;
+    BufferedReader br = null;
+    try {
+      isr = new InputStreamReader(new FileInputStream("/proc/net/netstat"));
+      br = new BufferedReader(isr);
+      String line;
+      do {
+        br.readLine(); // header
+        line = br.readLine();
+      } while (line != null && !line.startsWith("TcpExt:"));
+
+      st.setString(line);
+      st.skipTokens(1);
+      long tcpSyncookiesSent = st.nextTokenAsLong();
+      long tcpSyncookiesRecv = st.nextTokenAsLong();
+      st.skipTokens(17);
+      long tcpListenOverflows = st.nextTokenAsLong();
+      long tcpListenDrops = st.nextTokenAsLong();
+
+      longs[LinuxSystemStats.tcpExtSynCookiesRecvLONG] = tcpSyncookiesRecv;
+      longs[LinuxSystemStats.tcpExtSynCookiesSentLONG] = tcpSyncookiesSent;
+      longs[LinuxSystemStats.tcpExtListenDropsLONG] = tcpListenDrops;
+      longs[LinuxSystemStats.tcpExtListenOverflowsLONG] = tcpListenOverflows;
+
+      if (!soMaxConnProcessed) {
+        br.close();
+        isr = new InputStreamReader(new FileInputStream("/proc/sys/net/core/somaxconn"));
+        br = new BufferedReader(isr);
+        line = br.readLine();
+        st.setString(line);
+        soMaxConn = st.nextTokenAsInt();
+        soMaxConnProcessed = true;
+      }
+
+      ints[LinuxSystemStats.tcpSOMaxConnINT] = soMaxConn;
+
+    } catch (NoSuchElementException nsee) {
+    } catch (IOException ioe) {
+    } finally {
+      st.releaseResources();
+      if (br != null) {
+        try {
+          br.close();
+        } catch (IOException ignore) {
+        }
+      }
+    }
+  }
+
+  /*

INS23 INS23 INS31 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS59 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS21 INS5 INS42 INS5 INS42 INS60 INS60 INS54 INS32 INS39 INS85 INS39 INS85 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS60 INS19 INS21 INS21 INS60 INS60 INS21 INS60 INS60 INS21 INS21 INS21 INS21 INS25 INS21 INS44 INS8 INS44 INS8 INS21 INS25 INS7 INS7 INS43 INS59 INS8 INS27 INS32 INS32 INS39 INS59 INS39 INS59 INS32 INS39 INS59 INS39 INS59 INS7 INS7 INS7 INS7 INS38 INS8 INS7 INS43 INS42 INS43 INS42 INS32 INS27 INS8 INS42 INS14 INS42 INS14 INS42 INS42 INS21 INS21 INS27 INS38 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS32 INS42 INS42 INS34 INS42 INS32 INS42 INS32 INS2 INS42 INS2 INS42 INS2 INS42 INS2 INS42 INS42 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS54 INS43 INS14 INS43 INS42 INS32 INS7 INS42 INS33 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS40 INS42 INS40 INS32 INS7 INS7 INS7 INS32 INS7 INS7 INS42 INS40 INS8 INS12 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS45 INS42 INS42 INS42 INS14 INS42 INS14 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS9 INS21 INS44 INS8 INS42 INS42 INS42 INS43 INS14 INS43 INS42 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42