Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This function can be used by GemFire clients and peers to commit an existing
- * transaction. A {@link TransactionId} corresponding to the transaction to be
- * committed must be provided as an argument while invoking this function.<br />
+ * This function can be used by GemFire clients and peers to commit an existing transaction. A
+ * {@link TransactionId} corresponding to the transaction to be committed must be provided as an
+ * argument while invoking this function.<br />
- * This function should execute only on one server. If the transaction is not
- * hosted on the server where the function is invoked then this function decides
- * to invoke a nested {@link NestedTransactionFunction} which executes on the member where
- * transaction is hosted.<br />
+ * This function should execute only on one server. If the transaction is not hosted on the server
+ * where the function is invoked then this function decides to invoke a nested
+ * {@link NestedTransactionFunction} which executes on the member where transaction is hosted.<br />
- * This function returns a single Boolean as result, whose value is <code>Boolean.TRUE</code>
- * if the transaction committed successfully otherwise the return value is
+ * This function returns a single Boolean as result, whose value is <code>Boolean.TRUE</code> if the
+ * transaction committed successfully otherwise the return value is
- * To execute this function, it is recommended to use the {@link Execution} obtained by
- * using TransactionFunctionService. <br />
+ * To execute this function, it is recommended to use the {@link Execution} obtained by using
+ * TransactionFunctionService. <br />
- * This function is <b>not</b> registered on the cache servers by default, and
- * it is the user's responsibility to register this function. see
- * {@link FunctionService#registerFunction(Function)}
+ * This function is <b>not</b> registered on the cache servers by default, and it is the user's
+ * responsibility to register this function. see {@link FunctionService#registerFunction(Function)}
-      logger.info("CommitFunction should be invoked with a TransactionId as an argument i.e. withArgs(txId).execute(function)");
+      logger.info(
+          "CommitFunction should be invoked with a TransactionId as an argument i.e. withArgs(txId).execute(function)");
-      Execution ex = FunctionService.onMember(cache.getDistributedSystem(),
-          member).withArgs(args);
+      Execution ex = FunctionService.onMember(cache.getDistributedSystem(), member).withArgs(args);
-        logger.debug("CommitFunction: for transaction: {} executing NestedTransactionFunction on member: {}", txId, member);
+        logger.debug(
+            "CommitFunction: for transaction: {} executing NestedTransactionFunction on member: {}",
+            txId, member);
-          throw new TransactionDataNodeHasDepartedException("Could not commit on member:"+member);
+          throw new TransactionDataNodeHasDepartedException("Could not commit on member:" + member);
-    //GEM-207
+    // GEM-207

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66