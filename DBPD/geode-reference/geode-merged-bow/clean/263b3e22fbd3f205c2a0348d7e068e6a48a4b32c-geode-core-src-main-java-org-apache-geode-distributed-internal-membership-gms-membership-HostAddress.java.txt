GEODE-7634: create an ArchUnitTest that asserts that geode-core only â€¦ (#4549)

* GEODE-7634: create an ArchUnitTest that asserts that geode-core only uses the membership API

creating a new test to enforce use of membership APIs.  There are a few
exceptions in test code, plus others that aren't in the "integration
test" source set.

* removing test dependencies and fixing crashDistributedSystem method

* moved membership API classes to membership.api package and fixed OOME

* move address verification class to tcp-server module and subclass in membership

* rebasing on Ernie's GeodeGlossary stuff

-import org.apache.commons.validator.routines.InetAddressValidator;
+import org.apache.geode.distributed.internal.tcpserver.LocatorAddress;
-public class HostAddress {
-
-  private final InetSocketAddress socketInetAddress;
-  private final String hostname;
-  private final int port;
-  private final boolean isIpString;
+public class HostAddress extends LocatorAddress {
-    this.socketInetAddress = loc;
-    this.hostname = locStr;
-    this.port = loc.getPort();
-    this.isIpString = InetAddressValidator.getInstance().isValid(locStr);
-  }
-
-  public boolean isIpString() {
-    return isIpString;
-  }
-
-  /**
-   * if host is ipString then it will return the cached InetSocketAddress Otherwise it will create
-   * the new instance of InetSocketAddress
-   */
-  public InetSocketAddress getSocketInetAddress() {
-    if (this.isIpString) {
-      return this.socketInetAddress;
-    } else {
-      return new InetSocketAddress(hostname, this.socketInetAddress.getPort());
-    }
-  }
-
-  public String getHostName() {
-    return hostname;
-  }
-
-  public int getPort() {
-    return port;
-  }
-
-  /**
-   * If component has retry logic then use this method to get the InetSocketAddress address
-   * AutoConnectionSourceImpl for client has retry logic; This way client will not make DNS query
-   * each time
-   *
-   */
-  public InetSocketAddress getSocketInetAddressNoLookup() {
-    return this.socketInetAddress;
-  }
-
-  @Override
-  public int hashCode() {
-    int prime = 31;
-    int result = 1;
-    result = prime * result + (isIpString ? 1231 : 1237);
-    result = prime * result + (socketInetAddress == null ? 0 : socketInetAddress.hashCode());
-    result = prime * result + (hostname == null ? 0 : hostname.hashCode());
-    return result;
-  }
-
-  @Override
-  public boolean equals(Object obj) {
-    if (this == obj)
-      return true;
-    if (obj == null)
-      return false;
-    if (getClass() != obj.getClass())
-      return false;
-    HostAddress other = (HostAddress) obj;
-    if (isIpString != other.isIpString)
-      return false;
-    if (socketInetAddress == null) {
-      if (other.socketInetAddress != null)
-        return false;
-    } else if (!socketInetAddress.equals(other.socketInetAddress))
-      return false;
-    if (hostname == null) {
-      if (other.hostname != null)
-        return false;
-    } else if (!hostname.equals(other.hostname))
-      return false;
-    return true;
-  }
-
-  @Override
-  public String toString() {
-    return "LocatorAddress [socketInetAddress=" + socketInetAddress + ", hostname=" + hostname
-        + ", isIpString=" + isIpString + "]";
+    super(loc, locStr);

UPD40 INS43 UPD42 MOV42 INS46 INS42 INS42 DEL83 DEL83 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL7 DEL21 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL41 DEL8 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL14 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL42 DEL27 DEL42 DEL34 DEL34 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL42 DEL33 DEL27 DEL34 DEL42 DEL42 DEL32 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL42 DEL42 DEL27 DEL42 DEL33 DEL27 DEL34 DEL42 DEL42 DEL32 DEL16 DEL36 DEL27 DEL7 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL27 DEL9 DEL41 DEL25 DEL42 DEL33 DEL27 DEL9 DEL41 DEL25 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL9 DEL41 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL40 DEL27 DEL9 DEL41 DEL25 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL9 DEL41 DEL25 DEL8 DEL42 DEL42 DEL40 DEL32 DEL38 DEL9 DEL41 DEL25 DEL25 DEL42 DEL33 DEL27 DEL40 DEL33 DEL27 DEL9 DEL41 DEL25 DEL8 DEL42 DEL42 DEL40 DEL32 DEL38 DEL9 DEL41 DEL25 DEL25 DEL9 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL41 DEL8 DEL31