Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  private static final String[] execTypeStrings = 
-          new String[] {"hand-coded", "brute force", "indexed", "index-create"};
-  private static final int[] DATA_SET_SIZES = new int[] {100, 1000, 10000 , 20000};
-  
-  
+  private static final String[] execTypeStrings =
+      new String[] {"hand-coded", "brute force", "indexed", "index-create"};
+  private static final int[] DATA_SET_SIZES = new int[] {100, 1000, 10000, 20000};
+
+
-  
+
-  
-    
+
+
-  
+
-    System.out.println("Test took " + durationH + "hrs, " + durationMM + "min.");      
+    System.out.println("Test took " + durationH + "hrs, " + durationMM + "min.");
-  
+
-    
+
-          
+
-          
+
-    
+
-    
+
-    
+
-    
+
-    
+
-  
-  private void runQuery(Query query, int execType)
-  throws Exception {   
+
+  private void runQuery(Query query, int execType) throws Exception {
-        results = (SelectResults)query.execute();
+        results = (SelectResults) query.execute();
-  //--------------------------------------------------------
+  // --------------------------------------------------------
-  
+
-        for (Iterator itr = region.values().iterator(); itr.hasNext(); ) {
-          Portfolio ptflo = (Portfolio)itr.next();
+        for (Iterator itr = region.values().iterator(); itr.hasNext();) {
+          Portfolio ptflo = (Portfolio) itr.next();
-  
+
-        for (Iterator itr = region.values().iterator(); itr.hasNext(); ) {
-          Portfolio ptflo = (Portfolio)itr.next();
+        for (Iterator itr = region.values().iterator(); itr.hasNext();) {
+          Portfolio ptflo = (Portfolio) itr.next();
-  
-  
-  //--------------------------------------------------------
-  
+
+
+  // --------------------------------------------------------
+
-  
+
-  private void populate(int numPortfolios, boolean indexed)
-  throws CacheException, QueryException {
+  private void populate(int numPortfolios, boolean indexed) throws CacheException, QueryException {
-  
+
-  
+
-  
-  
+
+
-    
+
-    
-    public abstract Object execute()
-      throws FunctionDomainException, TypeMismatchException, NameResolutionException,
-             QueryInvocationTargetException;
-    
-    
-    public void compile() 
-      throws TypeMismatchException, NameResolutionException {
+
+    public abstract Object execute() throws FunctionDomainException, TypeMismatchException,
+        NameResolutionException, QueryInvocationTargetException;
+
+
+    public void compile() throws TypeMismatchException, NameResolutionException {
-    } 
+    }
-    public Object execute(Object[] params)
-      throws FunctionDomainException, TypeMismatchException, NameResolutionException,
-             QueryInvocationTargetException {
+
+    public Object execute(Object[] params) throws FunctionDomainException, TypeMismatchException,
+        NameResolutionException, QueryInvocationTargetException {
+
-    }    
-    
+    }
+
-    public Object execute(RegionFunctionContext context)
-        throws FunctionDomainException, TypeMismatchException,
-        NameResolutionException, QueryInvocationTargetException {
+    public Object execute(RegionFunctionContext context) throws FunctionDomainException,
+        TypeMismatchException, NameResolutionException, QueryInvocationTargetException {
-        throws FunctionDomainException, TypeMismatchException,
-        NameResolutionException, QueryInvocationTargetException {
+        throws FunctionDomainException, TypeMismatchException, NameResolutionException,
+        QueryInvocationTargetException {
-  
-  
+
+

