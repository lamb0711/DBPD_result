GEODE-8385: hang recovering from disk with cyclic dependencies (#5403)

* GEODE-8385: hang recovering from disk with cyclic dependencies

This restores the point at which we notify membership listeners of
departures.  We used to do this (in 1.12 and earlier) when a ShutdownMessage
is received instead of waiting for a new membership view announcing the departure.
Membership views can take some time to form and install, which can cause
persistent (disk store) views to be updated later than they used to be.

In the case of this ticket the disk store of one member was being
closed while another was shutting down.  The member closing its disk
store did not see the view announcing that shutdown until most of its
disk store regions had closed their persistence advisors.  This left the
disk store thinking that the other member was still up at the time it
was closed.
-   * Returns true if id was removed. Returns false if it was not in the list of managers.
-   */
-  private boolean removeManager(InternalDistributedMember theId, boolean crashed, String p_reason) {
-    String reason = p_reason;
-
-    reason = prettifyReason(reason);
-    if (logger.isDebugEnabled()) {
-      logger.debug("DistributionManager: removing member <{}>; crashed {}; reason = {}", theId,
-          crashed, reason);
-    }
-    removeHostedLocators(theId);
-
-    redundancyZones.remove(theId);
-
-    return true;
-  }
-
-  /**
+    handleManagerDeparture(theId, false, reason);
+  /*
+   * handleManagerDeparted may be invoked multiple times for a member identifier.
+   * We allow this and inform listeners on each invocation, but only perform some
+   * actions (such as decrementing the node count) if the change came from a
+   * membership view.
+   */
-  public void handleManagerDeparture(InternalDistributedMember theId, boolean p_crashed,
-      String p_reason) {
-
+  public void handleManagerDeparture(InternalDistributedMember theId, boolean memberCrashed,
+      String reason) {
-    int vmType = theId.getVmKind();
-    if (vmType == ADMIN_ONLY_DM_TYPE) {
-      removeUnfinishedStartup(theId, true);
-      handleConsoleShutdown(theId, p_crashed, p_reason);
-      return;
-    }
-
-    if (removeManager(theId, p_crashed, p_reason)) {
-      if (theId.getVmKind() != ClusterDistributionManager.LOCATOR_DM_TYPE) {
-        stats.incNodes(-1);
-      }
-      String msg;
-      if (p_crashed && !shouldInhibitMembershipWarnings()) {
-        msg =
-            "Member at {} unexpectedly left the distributed cache: {}";
-        addMemberEvent(new MemberCrashedEvent(theId, p_reason));
-      } else {
-        msg =
-            "Member at {} gracefully left the distributed cache: {}";
-        addMemberEvent(new MemberDepartedEvent(theId, p_reason));
-      }
-      logger.info(msg, new Object[] {theId, prettifyReason(p_reason)});
-
-      executors.handleManagerDeparture(theId);
+    int vmType = theId.getVmKind();
+    if (vmType == ADMIN_ONLY_DM_TYPE) {
+      handleConsoleShutdown(theId, memberCrashed, reason);
+      return;
+
+    if (logger.isDebugEnabled()) {
+      logger.debug(
+          "DistributionManager: removing member <{}>; crashed {}; reason = {}", theId,
+          memberCrashed, prettifyReason(reason));
+    }
+    removeHostedLocators(theId);
+    redundancyZones.remove(theId);
+
+    if (theId.getVmKind() != ClusterDistributionManager.LOCATOR_DM_TYPE) {
+      stats.incNodes(-1);
+    }
+    String msg;
+    if (memberCrashed && !shouldInhibitMembershipWarnings()) {
+      msg =
+          "Member at {} unexpectedly left the distributed cache: {}";
+      addMemberEvent(new MemberCrashedEvent(theId, reason));
+    } else {
+      msg =
+          "Member at {} gracefully left the distributed cache: {}";
+      addMemberEvent(new MemberDepartedEvent(theId, reason));
+    }
+    logger.info(msg, new Object[] {theId, prettifyReason(reason)});
+    executors.handleManagerDeparture(theId);
-        // let's not get huffy about it
+        // ignored

MOV8 INS21 UPD42 UPD42 MOV21 MOV21 MOV60 INS25 INS25 MOV21 MOV21 INS32 MOV27 INS8 MOV32 INS8 INS42 INS42 INS9 INS42 INS21 INS41 INS21 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS32 MOV32 INS42 INS42 UPD42 UPD42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL59 DEL60 DEL42 DEL7 DEL21 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL25 DEL8