GEODE-6630: move allBucketsRecoveredFromDisk count down latch (#3477)

* Rename RedundancyLogger to PersistentBucketRecoverer
* Move allBucketsRecoveredFromDisk count down latch from PRHARedundancyProvider to PersistentBucketRecoverer.
* Provide utility methods for using the count down latch.

+import java.util.concurrent.TimeUnit;
+import org.apache.geode.internal.logging.LoggingThread;
- * member. This logger is meant to run in its own thread and utilizes the PRHARedundancyProvider's
- * count down latch in order to determine when it is finished.
- *
+ * member. The logger is meant to run in its own thread.
+ * It uses a count down latch to determine whether the recovery is finished.
-public class RedundancyLogger extends RecoveryRunnable implements PersistentStateListener {
+public class PersistentBucketRecoverer extends RecoveryRunnable implements PersistentStateListener {
-   * Creates a new RedundancyLogger.
+   * Creates a new PersistentBucketRecoverer.
-  public RedundancyLogger(PRHARedundancyProvider prhaRedundancyProvider) {
+  public PersistentBucketRecoverer(PRHARedundancyProvider prhaRedundancyProvider,
+      int proxyBuckets) {
-        ColocationHelper.getColocatedChildRegions(baseRegion);
+        getColocatedChildRegions(baseRegion);
-    this.regions = Collections.unmodifiableList(allRegions);
-
-
-    this.allBucketsRecoveredFromDisk = redundancyProvider.getAllBucketsRecoveredFromDiskLatch();
-    this.membershipChanged = true;
+    regions = Collections.unmodifiableList(allRegions);
+    allBucketsRecoveredFromDisk = new CountDownLatch(proxyBuckets);
+    membershipChanged = true;
+
+  }
+
+  List<PartitionedRegion> getColocatedChildRegions(PartitionedRegion baseRegion) {
+    return ColocationHelper.getColocatedChildRegions(baseRegion);
+  }
+
+  public void startLoggingThread() {
+    Thread loggingThread = new LoggingThread(
+        "PersistentBucketRecoverer for region " + redundancyProvider.prRegion.getName(), false,
+        this);
+    loggingThread.start();
-   * Add this RedundancyLogger as a persistence listener to all the region's bucket advisors.
+   * Add this PersistentBucketRecoverer as a persistence listener to all the region's bucket
+   * advisors.
-   * Removes this RedundancyLogger as a persistence listener from all the region's bucket advisors.
+   * Removes this PersistentBucketRecoverer as a persistence listener from all the region's bucket
+   * advisors.
-      while (this.allBucketsRecoveredFromDisk.getCount() > 0) {
+      while (getLatchCount() > 0) {
-     * The persistent identifier of the member running this RedundancyLogger.
+     * The persistent identifier of the member running this PersistentBucketRecoverer.
-        proxyBucket.getPersistenceAdvisor().removeListener(RedundancyLogger.this);
+        proxyBucket.getPersistenceAdvisor().removeListener(PersistentBucketRecoverer.this);
-        proxyBucket.getPersistenceAdvisor().addListener(RedundancyLogger.this);
+        proxyBucket.getPersistenceAdvisor().addListener(PersistentBucketRecoverer.this);
-      boolean thereAreBucketsToBeRecovered =
-          (RedundancyLogger.this.allBucketsRecoveredFromDisk.getCount() > 0);
+      boolean thereAreBucketsToBeRecovered = (getLatchCount() > 0);
+
+  public void await(long timeout, TimeUnit unit) {
+    boolean interrupted = false;
+    while (true) {
+      try {
+        redundancyProvider.prRegion.getCancelCriterion().checkCancelInProgress(null);
+        boolean done = allBucketsRecoveredFromDisk.await(timeout, unit);
+        if (done) {
+          break;
+        }
+      } catch (InterruptedException e) {
+        interrupted = true;
+      }
+    }
+    if (interrupted) {
+      Thread.currentThread().interrupt();
+    }
+  }
+
+  public void await() {
+    boolean interrupted = false;
+    while (true) {
+      try {
+        getAllBucketsRecoveredFromDiskLatch().await();
+        break;
+      } catch (InterruptedException e) {
+        interrupted = true;
+      }
+    }
+    if (interrupted) {
+      Thread.currentThread().interrupt();
+    }
+  }
+
+  public void countDown() {
+    allBucketsRecoveredFromDisk.countDown();
+  }
+
+  public void countDown(int size) {
+    while (size > 0) {
+      allBucketsRecoveredFromDisk.countDown();
+      --size;
+    }
+  }
+
+  public boolean hasRecoveryCompleted() {
+    if (getLatchCount() > 0) {
+      return false;
+    }
+    return true;
+  }
+
+  long getLatchCount() {
+    return allBucketsRecoveredFromDisk.getCount();
+  }
+
+  CountDownLatch getAllBucketsRecoveredFromDiskLatch() {
+    return allBucketsRecoveredFromDisk;
+  }
+

INS26 INS26 INS40 INS40 INS42 INS31 INS31 MOV31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 UPD42 INS44 MOV74 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS8 INS39 INS42 INS8 INS43 INS42 INS8 UPD66 UPD66 INS39 INS42 INS43 INS42 INS41 INS60 INS21 UPD42 UPD42 INS39 INS42 INS43 INS42 INS60 INS61 INS25 INS60 INS61 INS25 INS21 INS39 INS42 INS61 INS25 INS41 INS41 INS42 INS41 UPD66 INS74 INS42 MOV32 INS43 INS59 INS32 UPD66 INS66 UPD66 INS66 INS42 INS39 INS59 INS9 INS8 INS42 INS8 INS39 INS59 INS9 INS8 INS42 INS8 INS32 INS27 INS8 INS27 INS8 INS9 INS32 INS42 INS43 INS43 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS14 INS42 INS42 UPD66 INS42 INS9 INS54 INS21 INS42 INS9 INS54 INS21 INS42 INS42 INS42 INS34 INS21 INS21 INS32 INS34 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS43 INS27 INS9 INS52 INS8 INS12 INS32 INS8 INS12 INS32 INS32 INS38 INS42 INS9 INS42 INS42 INS45 INS32 INS21 INS60 INS25 INS44 INS8 INS32 INS42 INS21 INS10 INS44 INS8 INS32 INS42 INS42 INS42 INS42 INS40 INS42 UPD42 UPD42 UPD42 INS32 INS39 INS59 INS42 INS8 INS43 INS42 INS21 INS42 INS42 INS32 INS43 INS42 INS21 INS42 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS33 INS42 INS32 INS10 INS42 INS7 INS32 INS42 INS42 INS7 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS9 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22