Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *   http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+  private static final int repositoryQueryExecutionsId;
+  private static final int repositoryQueryExecutionTimeId;
+  private static final int repositoryQueryExecutionsInProgressId;
+  private static final int repositoryQueryExecutionTotalHitsId;
-    statsType = f.createType(
-      statsTypeName,
-      statsTypeDescription,
-      new StatisticDescriptor[] {
-        f.createIntCounter("queryExecutions", "Number of lucene queries executed on this member", "operations"),
-        f.createLongCounter("queryExecutionTime", "Amount of time spent executing lucene queries", "nanoseconds"),
-        f.createIntGauge("queryExecutionsInProgress", "Number of query executions currently in progress", "operations"),
-        f.createLongCounter("queryExecutionTotalHits", "Total number of documents returned by query executions", "entries"),
-        f.createIntCounter("updates", "Number of lucene index documents added/removed on this member", "operations"),
-        f.createLongCounter("updateTime", "Amount of time spent adding or removing documents from the index", "nanoseconds"),
+    statsType = f.createType(statsTypeName, statsTypeDescription, new StatisticDescriptor[] {
+        f.createIntCounter("queryExecutions", "Number of lucene queries executed on this member",
+            "operations"),
+        f.createLongCounter("queryExecutionTime", "Amount of time spent executing lucene queries",
+            "nanoseconds"),
+        f.createIntGauge("queryExecutionsInProgress",
+            "Number of query executions currently in progress", "operations"),
+        f.createLongCounter("queryExecutionTotalHits",
+            "Total number of documents returned by query executions", "entries"),
+        f.createIntCounter("repositoryQueryExecutions",
+            "Number of lucene repository queries executed on this member", "operations"),
+        f.createLongCounter("repositoryQueryExecutionTime",
+            "Amount of time spent executing lucene repository queries", "nanoseconds"),
+        f.createIntGauge("repositoryQueryExecutionsInProgress",
+            "Number of repository query executions currently in progress", "operations"),
+        f.createLongCounter("repositoryQueryExecutionTotalHits",
+            "Total number of documents returned by repository query executions", "entries"),
+        f.createIntCounter("updates",
+            "Number of lucene index documents added/removed on this member", "operations"),
+        f.createLongCounter("updateTime",
+            "Amount of time spent adding or removing documents from the index", "nanoseconds"),
-        f.createIntCounter("commits", "Number of lucene index commits on this member", "operations"),
-        f.createLongCounter("commitTime", "Amount of time spent in lucene index commits", "nanoseconds"),
-        f.createIntGauge("commitsInProgress", "Number of lucene index commits in progress", "operations"),
-        f.createIntGauge("documents", "Number of documents in the index", "documents"),
-      }
-    );
+        f.createIntCounter("commits", "Number of lucene index commits on this member",
+            "operations"),
+        f.createLongCounter("commitTime", "Amount of time spent in lucene index commits",
+            "nanoseconds"),
+        f.createIntGauge("commitsInProgress", "Number of lucene index commits in progress",
+            "operations"),
+        f.createIntGauge("documents", "Number of documents in the index", "documents"),});
+    repositoryQueryExecutionsId = statsType.nameToId("repositoryQueryExecutions");
+    repositoryQueryExecutionTimeId = statsType.nameToId("repositoryQueryExecutionTime");
+    repositoryQueryExecutionsInProgressId =
+        statsType.nameToId("repositoryQueryExecutionsInProgress");
+    repositoryQueryExecutionTotalHitsId = statsType.nameToId("repositoryQueryExecutionTotalHits");
+  public long startRepositoryQuery() {
+    stats.incInt(repositoryQueryExecutionsInProgressId, 1);
+    return getStatTime();
+  }
+
+  /**
+   * @param start the timestamp taken when the operation started
+   */
+  public void endRepositoryQuery(long start, final int totalHits) {
+    stats.incLong(repositoryQueryExecutionTimeId, getStatTime() - start);
+    stats.incInt(repositoryQueryExecutionsInProgressId, -1);
+    stats.incInt(repositoryQueryExecutionsId, 1);
+    stats.incLong(repositoryQueryExecutionTotalHitsId, totalHits);
+  }
+
+  /**
+   * @return the timestamp that marks the start of the operation
+   */
+
-    stats.incLong(queryExecutionTimeId, getStatTime()-start);
+    stats.incLong(queryExecutionTimeId, getStatTime() - start);
+
-    stats.incLong(updateTimeId, getStatTime()-start);
+    stats.incLong(updateTimeId, getStatTime() - start);
+
-    stats.incLong(commitTimeId, getStatTime()-start);
+    stats.incLong(commitTimeId, getStatTime() - start);
-    return this.documentsSuppliers.stream()
-      .mapToInt(IntSupplier::getAsInt)
-      .sum();
+    return this.documentsSuppliers.stream().mapToInt(IntSupplier::getAsInt).sum();

INS23 INS23 INS23 INS23 INS31 INS31 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS39 INS59 INS29 INS83 INS39 INS42 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS21 INS21 INS21 INS21 INS65 INS21 INS41 INS65 INS39 INS42 INS83 INS39 INS42 INS21 INS21 INS21 INS21 INS7 INS7 INS7 INS7 INS66 INS32 INS32 INS42 INS66 INS32 INS32 INS32 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS38 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS45 INS32 INS42 INS34 INS42 INS32 INS32 INS32 INS32 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS45 INS45 INS45 INS42 INS42 INS45 INS45 INS45