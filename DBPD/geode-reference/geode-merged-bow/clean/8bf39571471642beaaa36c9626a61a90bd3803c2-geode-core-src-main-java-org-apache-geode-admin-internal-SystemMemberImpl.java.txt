Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * @since GemFire     3.5
+ * @since GemFire 3.5
-public class SystemMemberImpl 
-implements org.apache.geode.admin.SystemMember,
-           org.apache.geode.admin.internal.ConfigurationParameterListener {
+public class SystemMemberImpl implements org.apache.geode.admin.SystemMember,
+    org.apache.geode.admin.internal.ConfigurationParameterListener {
-  
-  /** Identifying name of this member.
-   * Note that by default this is the string form of internalId but the
-   * ManagedSystemMemberImpl subclass resets it to getNewId()
+
+  /**
+   * Identifying name of this member. Note that by default this is the string form of internalId but
+   * the ManagedSystemMemberImpl subclass resets it to getNewId()
-//  private Config config;
+  // private Config config;
-  /** The configuration parameters for this member.  Maps the name of
-      the ConfigurationParameter to the ConfigurationParameter. */
+  /**
+   * The configuration parameters for this member. Maps the name of the ConfigurationParameter to
+   * the ConfigurationParameter.
+   */
-  
+
-  //   Constructor(s)
+  // Constructor(s)
-  /** 
-   * Constructs new <code>SystemMemberImpl</code> for a
-   * <code>ManagedEntity</code> that has yet to be started.
+  /**
+   * Constructs new <code>SystemMemberImpl</code> for a <code>ManagedEntity</code> that has yet to
+   * be started.
-   * @param system  the distributed system this member belongs to
+   * @param system the distributed system this member belongs to
-  protected SystemMemberImpl(AdminDistributedSystem system) 
-    throws AdminException {
+  protected SystemMemberImpl(AdminDistributedSystem system) throws AdminException {
-  /** 
-   * Constructs new <code>SystemMemberImpl</code> from the given
-   * <code>GemFireVM</code>.  This constructor is invoked when we
-   * discover a new member of the distributed system.
+  /**
+   * Constructs new <code>SystemMemberImpl</code> from the given <code>GemFireVM</code>. This
+   * constructor is invoked when we discover a new member of the distributed system.
-   * @param system      the distributed system this member belongs to
+   * @param system the distributed system this member belongs to
-  public SystemMemberImpl(AdminDistributedSystem system, 
-                          GemFireVM vm)
-    throws AdminException {
+  public SystemMemberImpl(AdminDistributedSystem system, GemFireVM vm) throws AdminException {
-   * Constructs the instance of SystemMember using the corresponding
-   * InternalDistributedMember instance of a DS member for the given
-   * AdminDistributedSystem.
+   * Constructs the instance of SystemMember using the corresponding InternalDistributedMember
+   * instance of a DS member for the given AdminDistributedSystem.
-   * @param system
-   *          Current AdminDistributedSystem instance
-   * @param member
-   *          InternalDistributedMember instance for which a SystemMember
-   *          instance is to be constructed.
-   * @throws AdminException
-   *           if construction of SystemMember fails
-   *           
+   * @param system Current AdminDistributedSystem instance
+   * @param member InternalDistributedMember instance for which a SystemMember instance is to be
+   *        constructed.
+   * @throws AdminException if construction of SystemMember fails
+   * 
-  protected SystemMemberImpl(AdminDistributedSystem system,
-                          InternalDistributedMember member) 
-                          throws AdminException {
+  protected SystemMemberImpl(AdminDistributedSystem system, InternalDistributedMember member)
+      throws AdminException {
-  //   Attribute accessors and mutators
+  // Attribute accessors and mutators
-   * Returns a <code>Config</code> object with the appropriate default
-   * values for a newly-created system member.
+   * Returns a <code>Config</code> object with the appropriate default values for a newly-created
+   * system member.
-  
+
-  
+
-  
+
-  //   Operations
+  // Operations
-  
+
-      if (log != null && log.length > 0) mainTail = log[0];
-      if (log != null && log.length > 1) childTail = log[1];
+      if (log != null && log.length > 0)
+        mainTail = log[0];
+      if (log != null && log.length > 1)
+        childTail = log[1];
-    
+
-      return LocalizedStrings.SystemMemberImpl_NO_LOG_FILE_CONFIGURED_LOG_MESSAGES_WILL_BE_DIRECTED_TO_STDOUT.toLocalizedString();
-    } 
-    else {
+      return LocalizedStrings.SystemMemberImpl_NO_LOG_FILE_CONFIGURED_LOG_MESSAGES_WILL_BE_DIRECTED_TO_STDOUT
+          .toLocalizedString();
+    } else {
-        result.append("\n" + LocalizedStrings.SystemMemberImpl_TAIL_OF_CHILD_LOG.toLocalizedString() + "\n");
+        result.append(
+            "\n" + LocalizedStrings.SystemMemberImpl_TAIL_OF_CHILD_LOG.toLocalizedString() + "\n");
-    if (vm == null) return null;
+    if (vm == null)
+      return null;
-    if (vm == null) return null;
+    if (vm == null)
+      return null;
-  public StatisticResource[] getStat(String statisticsTypeName) 
-  throws org.apache.geode.admin.AdminException {
+  public StatisticResource[] getStat(String statisticsTypeName)
+      throws org.apache.geode.admin.AdminException {
-    return res.length==0 ? null : res;
+    return res.length == 0 ? null : res;
-  public StatisticResource[] getStats() 
-  throws org.apache.geode.admin.AdminException {
+  public StatisticResource[] getStats() throws org.apache.geode.admin.AdminException {
-  public final SystemMemberCache getCache()
-    throws org.apache.geode.admin.AdminException
-  {
+  public final SystemMemberCache getCache() throws org.apache.geode.admin.AdminException {
-    if (vm == null) return null;
+    if (vm == null)
+      return null;
-  
-  public void refreshConfig() 
-  throws org.apache.geode.admin.AdminException {
+
+  public void refreshConfig() throws org.apache.geode.admin.AdminException {
-    if (vm == null) return;
+    if (vm == null)
+      return;
-  
+
-   * Sets the value of this system member's distribution-related
-   * configuration based on the given <code>Config</code> object.
+   * Sets the value of this system member's distribution-related configuration based on the given
+   * <code>Config</code> object.
-  public final void refreshConfig(Config config) 
-  throws org.apache.geode.admin.AdminException {
+  public final void refreshConfig(Config config) throws org.apache.geode.admin.AdminException {
-      throw new AdminException(LocalizedStrings.SystemMemberImpl_FAILED_TO_REFRESH_CONFIGURATION_PARAMETERS_FOR_0.toLocalizedString(new Object[] {getId()}));
+      throw new AdminException(
+          LocalizedStrings.SystemMemberImpl_FAILED_TO_REFRESH_CONFIGURATION_PARAMETERS_FOR_0
+              .toLocalizedString(new Object[] {getId()}));
-    
+
-      throw new AdminException(LocalizedStrings.SystemMemberImpl_FAILED_TO_REFRESH_CONFIGURATION_PARAMETERS_FOR_0.toLocalizedString(new Object[] {getId()}));
+      throw new AdminException(
+          LocalizedStrings.SystemMemberImpl_FAILED_TO_REFRESH_CONFIGURATION_PARAMETERS_FOR_0
+              .toLocalizedString(new Object[] {getId()}));
-    
+
-        ConfigurationParameter parm = createConfigurationParameter(
-              name,                                 // name
-              config.getAttributeDescription(name), // description
-              value,      // value
-              config.getAttributeType(name),        // valueType
-              config.isAttributeModifiable(name) ); // isModifiable
+        ConfigurationParameter parm = createConfigurationParameter(name, // name
+            config.getAttributeDescription(name), // description
+            value, // value
+            config.getAttributeType(name), // valueType
+            config.isAttributeModifiable(name)); // isModifiable
-  
+
-    ConfigurationParameter[] array =
-      new ConfigurationParameter[this.parms.size()];
+    ConfigurationParameter[] array = new ConfigurationParameter[this.parms.size()];
-  
-  public ConfigurationParameter[]
-    setConfiguration(ConfigurationParameter[] parms) 
-    throws AdminException {
+
+  public ConfigurationParameter[] setConfiguration(ConfigurationParameter[] parms)
+      throws AdminException {
-      // update internal vm's config...    
+      // update internal vm's config...
-  
+
-  
+
-  //   Listener callbacks
+  // Listener callbacks
-  
+
-      setConfiguration(new ConfigurationParameter[] { parm });
+      setConfiguration(new ConfigurationParameter[] {parm});
-//    catch (java.lang.RuntimeException e) {
-//      logWriter.warning(e);
-//      throw e;
-//    }
+    // catch (java.lang.RuntimeException e) {
+    // logWriter.warning(e);
+    // throw e;
+    // }
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-  
+
-  //   Overridden method(s) from java.lang.Object
+  // Overridden method(s) from java.lang.Object
-  
+
-  
+
-  //   Template methods with default behavior impl'ed.  Override if needed.
+  // Template methods with default behavior impl'ed. Override if needed.
-  
+
-   * Returns the <code>GemFireVM</code> that underlies this
-   * <code>SystemMember</code>. 
+   * Returns the <code>GemFireVM</code> that underlies this <code>SystemMember</code>.
-   * Sets the <code>GemFireVM</code> that underlies this
-   * <code>SystemMember</code>.  This method is used when a member,
-   * such as a cache server, is started by the admin API.
+   * Sets the <code>GemFireVM</code> that underlies this <code>SystemMember</code>. This method is
+   * used when a member, such as a cache server, is started by the admin API.
-   * Updates this SystemMember instance using the corresponding
-   * InternalDistributedMember
+   * Updates this SystemMember instance using the corresponding InternalDistributedMember
-   * @param member
-   *          InternalDistributedMember instance to update this SystemMember
-   *          
+   * @param member InternalDistributedMember instance to update this SystemMember
+   * 
-  private void updateByInternalDistributedMember(
-      InternalDistributedMember member) {
+  private void updateByInternalDistributedMember(InternalDistributedMember member) {
-      this.id         = this.internalId.toString();
-      this.host       = this.internalId.getHost();
-      this.name       = this.internalId.getName();      
-      if (this.name == null || 
-          DistributionConfig.DEFAULT_NAME.equals(this.name)) { 
+      this.id = this.internalId.toString();
+      this.host = this.internalId.getHost();
+      this.name = this.internalId.getName();
+      if (this.name == null || DistributionConfig.DEFAULT_NAME.equals(this.name)) {
-  
+
-   * @param stat  the internal stat resource to wrap with {@link StatisticResource}
+   * @param stat the internal stat resource to wrap with {@link StatisticResource}
-  throws org.apache.geode.admin.AdminException {
+      throws org.apache.geode.admin.AdminException {
-  
+
-   * @param name            the name of this parameter which cannot change
-   * @param description     full description to use
-   * @param value           the value of this parameter
-   * @param type            the class type of the value
-   * @param userModifiable  true if this is modifiable; false if read-only
+   * @param name the name of this parameter which cannot change
+   * @param description full description to use
+   * @param value the value of this parameter
+   * @param type the class type of the value
+   * @param userModifiable true if this is modifiable; false if read-only
-  protected ConfigurationParameter createConfigurationParameter(String name,
-                                                                String description,
-                                                                Object value,
-                                                                Class type,
-                                                                boolean userModifiable) {
-    return new ConfigurationParameterImpl(
-        name, description, value, type, userModifiable);
+  protected ConfigurationParameter createConfigurationParameter(String name, String description,
+      Object value, Class type, boolean userModifiable) {
+    return new ConfigurationParameterImpl(name, description, value, type, userModifiable);
-  
+
-   * @param vm  the GemFire vm to retrieve cache info from
+   * @param vm the GemFire vm to retrieve cache info from
-    throws org.apache.geode.admin.AdminException
-  {
+      throws org.apache.geode.admin.AdminException {
-  throws org.apache.geode.admin.AdminException {
+      throws org.apache.geode.admin.AdminException {
-  
+
-    return this.internalId;    
+    return this.internalId;

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66