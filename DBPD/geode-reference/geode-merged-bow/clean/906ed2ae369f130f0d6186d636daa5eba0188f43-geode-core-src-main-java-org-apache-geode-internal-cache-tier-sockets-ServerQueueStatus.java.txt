GEODE-3948 Improve CQ performance under flaky network conditions

This adds a new PoolFactory setting allowing subscription connections to
time out and initiate failover to a backup server. The new setting is
setSubscriptionTimeoutMultiplier:

A server has an inactivity monitor that ensures a message is sent to a client at least once a
minute (60,000 milliseconds). If a subscription timeout multipler is set in the client it
enables timing out of the subscription feed with failover to another server.

A value of zero (the default) disables timeouts

A value of one will time out the server connection after one of its ping intervals (not
recommended)

A value of two or more will time out the server connection after that many ping intervals have
elapsed

The client/server handshake is modified for clients having version 1.5 or
later. The server sends its ping-interval setting to the client. The client
then uses this and the multiplier to establish a read-timeout in the
CacheClientUpdater subscription processor.

Two tests are added to ensure that 1) the Message method that allows a
read to timeout functions correctly and 2) the CacheClientUpdater
correctly receives the multiplier setting.

This closes #1364

+  /**
+   * interval that server sends pings if connection is idle. This is only known for
+   * CacheClientUpdater subscription feed status objects
+   */
+  private final int pingInterval;
-   * Default constructor Called when connectionsPerServer=0
+   * Constructor Called when connectionsPerServer is nto equal to 0
+   *
-  public ServerQueueStatus(DistributedMember memberId) {
-    this((byte) 0, 0, memberId);
+  public ServerQueueStatus(byte endpointType, int queueSize, DistributedMember memberId,
+      int pingInterval) {
+    this.qSize = queueSize;
+    this.endpointType = endpointType;
+    this.memberId = memberId;
+    this.pingInterval = pingInterval;
-   * @param endpointType
-   * @param queueSize
-
+    this.pingInterval = -1;
+  /** returns the time between server-to-client ping messages on idle subscription connections */
+  public int getPingInterval() {
+    if (this.pingInterval < 0) {
+      throw new IllegalStateException(
+          "ping interval is only known for a subscription feed connection");
+    }
+    return this.pingInterval;
+  }
+
-        .append("; endpointType=").append(getTypeAsString()).append("]");
+        .append("; endpointType=").append(getTypeAsString()).append("; pingInterval=")
+        .append(this.pingInterval).append("ms]");

INS23 INS31 INS31 INS29 INS83 INS83 INS39 INS59 INS44 MOV29 MOV83 MOV42 INS44 INS44 MOV44 INS8 INS29 INS83 INS39 INS42 INS8 INS65 INS42 INS39 INS42 INS21 INS39 INS42 INS39 INS42 INS21 INS21 INS21 INS21 INS65 INS25 INS41 INS66 INS66 INS7 UPD66 INS7 INS7 INS7 INS7 INS66 INS27 INS8 INS22 INS32 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS22 INS38 INS22 INS34 INS53 INS52 INS42 INS32 INS42 INS45 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS34 INS52 INS42 INS14 MOV32 INS42 INS22 INS43 INS45 UPD45 INS52 INS42 INS42 DEL39 DEL34 DEL11 DEL34 DEL42 DEL17 DEL8 DEL31 DEL42 DEL65 DEL42 DEL65