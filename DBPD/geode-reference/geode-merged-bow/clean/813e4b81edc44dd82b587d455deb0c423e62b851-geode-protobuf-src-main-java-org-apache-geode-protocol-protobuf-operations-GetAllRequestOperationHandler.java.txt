Merge branch 'feature/GEODE-3385' into develop

This closes #739

Signed-off-by: Hitesh Khamesra <hkameshra@pivotal.io>

-import java.util.HashSet;
+import java.util.List;
-import java.util.Set;
+import java.util.stream.Collectors;
+import org.apache.geode.cache.CacheLoaderException;
+import org.apache.geode.cache.PartitionedRegionStorageException;
+import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.protocol.operations.OperationHandler;
+import org.apache.geode.internal.protocol.protobuf.RegionAPI;
+import org.apache.geode.protocol.operations.OperationHandler;
-import org.apache.geode.internal.protocol.protobuf.RegionAPI;
-    try {
-      Set<Object> keys = new HashSet<>();
-      for (BasicTypes.EncodedValue key : request.getKeyList()) {
-        keys.add(ProtobufUtilities.decodeValue(serializationService, key));
-      }
-      Map<?, ?> results = region.getAll(keys);
-      Set<BasicTypes.Entry> entries = new HashSet<>();
-      for (Map.Entry entry : results.entrySet()) {
-        entries.add(
-            ProtobufUtilities.createEntry(serializationService, entry.getKey(), entry.getValue()));
-      }
-      return Success.of(RegionAPI.GetAllResponse.newBuilder().addAllEntries(entries).build());
-    } catch (UnsupportedEncodingTypeException ex) {
-      return Failure.of(ProtobufResponseUtilities.makeErrorResponse(
-          ProtocolErrorCode.VALUE_ENCODING_ERROR.codeValue, "Encoding not supported."));
-    } catch (CodecNotRegisteredForTypeException ex) {
-      return Failure.of(ProtobufResponseUtilities.makeErrorResponse(
-          ProtocolErrorCode.VALUE_ENCODING_ERROR.codeValue,
-          "Codec error in protobuf deserialization."));
+    Map<Boolean, List<Object>> resultsCollection = request.getKeyList().stream()
+        .map((key) -> processOneMessage(serializationService, region, key))
+        .collect(Collectors.partitioningBy(x -> x instanceof BasicTypes.Entry));
+    RegionAPI.GetAllResponse.Builder responseBuilder = RegionAPI.GetAllResponse.newBuilder();
+
+    for (Object entry : resultsCollection.get(true)) {
+      responseBuilder.addEntries((BasicTypes.Entry) entry);
+
+    for (Object entry : resultsCollection.get(false)) {
+      responseBuilder.addFailures((BasicTypes.KeyedError) entry);
+    }
+
+    return Success.of(responseBuilder.build());
+  private Object processOneMessage(SerializationService serializationService, Region region,
+      BasicTypes.EncodedValue key) {
+    try {
+      Object decodedKey = ProtobufUtilities.decodeValue(serializationService, key);
+      Object value = region.get(decodedKey);
+      return ProtobufUtilities.createEntry(serializationService, decodedKey, value);
+    } catch (CodecNotRegisteredForTypeException | UnsupportedEncodingTypeException ex) {
+      return BasicTypes.KeyedError.newBuilder().setKey(key)
+          .setError(BasicTypes.Error.newBuilder()
+              .setErrorCode(ProtocolErrorCode.VALUE_ENCODING_ERROR.codeValue)
+              .setMessage("Encoding not supported."))
+          .build();
+    } catch (org.apache.geode.distributed.LeaseExpiredException | TimeoutException e) {
+      return BasicTypes.KeyedError.newBuilder().setKey(key)
+          .setError(BasicTypes.Error.newBuilder()
+              .setErrorCode(ProtocolErrorCode.OPERATION_TIMEOUT.codeValue)
+              .setMessage("Operation timed out: " + e.getMessage()))
+          .build();
+    } catch (CacheLoaderException | PartitionedRegionStorageException e) {
+      return BasicTypes.KeyedError.newBuilder().setKey(key)
+          .setError(BasicTypes.Error.newBuilder()
+              .setErrorCode(ProtocolErrorCode.DATA_UNREACHABLE.codeValue)
+              .setMessage("Data unreachable: " + e.getMessage()))
+          .build();
+    } catch (NullPointerException | IllegalArgumentException e) {
+      return BasicTypes.KeyedError.newBuilder().setKey(key)
+          .setError(BasicTypes.Error.newBuilder()
+              .setErrorCode(ProtocolErrorCode.CONSTRAINT_VIOLATION.codeValue)
+              .setMessage("Invalid input: " + e.getMessage()))
+          .build();
+    }
+  }

MOV26 MOV26 INS26 INS26 INS26 UPD40 UPD40 INS40 INS40 INS40 INS31 INS31 MOV78 MOV83 MOV74 MOV42 MOV44 MOV44 MOV44 MOV43 INS8 INS83 INS43 INS42 INS44 INS44 MOV44 INS8 MOV60 MOV60 MOV25 MOV60 INS60 MOV70 INS70 INS41 UPD42 MOV42 INS43 INS42 UPD43 MOV43 UPD42 MOV42 INS54 INS74 INS43 INS59 INS44 INS32 INS44 INS32 INS8 INS32 UPD42 MOV42 INS42 INS8 INS12 INS12 MOV12 MOV12 MOV43 INS43 UPD74 MOV74 INS42 INS32 INS40 INS42 MOV32 INS43 INS42 INS42 INS42 INS9 INS43 INS42 INS42 INS42 INS9 INS21 INS42 INS42 INS32 INS60 INS60 INS41 INS44 INS8 INS44 INS8 INS42 UPD43 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS43 INS59 INS43 INS59 INS32 INS84 INS42 INS41 INS84 INS42 MOV41 INS84 UPD42 INS84 UPD42 UPD42 INS32 INS42 INS86 INS42 INS42 INS86 UPD42 UPD42 INS11 UPD42 MOV42 UPD42 MOV42 INS11 INS42 INS42 MOV32 INS42 INS42 INS32 MOV42 MOV42 MOV42 INS42 INS42 MOV43 MOV43 INS32 INS43 INS43 INS43 INS43 INS32 INS43 INS43 INS32 MOV32 INS42 INS59 INS32 INS59 INS62 INS43 INS42 INS43 INS42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS40 INS42 INS32 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 MOV43 INS40 INS40 MOV32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 INS42 MOV32 INS32 UPD42 INS42 INS32 UPD42 INS45 INS32 UPD42 MOV42 INS42 INS32 INS42 INS27 INS32 UPD42 MOV42 INS42 INS32 INS42 INS27 INS32 UPD42 MOV42 INS42 INS32 INS42 INS27 INS40 UPD42 MOV42 INS32 INS42 INS40 INS40 UPD42 MOV42 INS32 INS42 INS40 INS45 INS32 INS40 UPD42 MOV42 INS32 UPD42 MOV42 UPD40 MOV40 INS45 INS32 INS40 UPD42 MOV42 INS32 UPD42 MOV42 UPD40 MOV40 INS45 INS32 INS40 UPD42 MOV42 INS40 UPD42 MOV42 UPD42 MOV42 INS42 INS40 UPD42 MOV42 INS42 INS42 INS40 UPD42 MOV42 INS42 INS42 DEL42 DEL43 DEL74 DEL14 DEL40 DEL32 DEL45 DEL32 DEL45 DEL32 DEL76 DEL76 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL43 DEL74 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL54 DEL8 DEL31