GEODE-8372: Configure CMS to send UTF-8 regardless of JVM default (#5411)


-import java.util.concurrent.atomic.AtomicLong;
-@SuppressWarnings("unused")
-    HttpOutputMessageWrapper outputMessageWrapper =
+    BufferingHttpOutputMessageWrapper outputMessageWrapper =
-  protected static class BufferingHttpOutputMessageWrapper implements HttpOutputMessageWrapper {
-
+  protected static class BufferingHttpOutputMessageWrapper implements HttpOutputMessage {
-
-    public OutputStream getBody() throws IOException {
+    public OutputStream getBody() {
-
-  /**
-   * While sound idea in theory to "count the bytes as you stream/write", thus preserving memory,
-   * this does not work in practice since the HTTP headers must be written to the HTTP output stream
-   * response before the body!
-   */
-  protected static class ContentLengthAccessibleHttpOutputMessageWrapper
-      implements HttpOutputMessageWrapper {
-
-    private final ByteCountingOutputStream outputStream;
-
-    private final HttpOutputMessage httpOutputMessage;
-
-    protected ContentLengthAccessibleHttpOutputMessageWrapper(
-        final HttpOutputMessage httpOutputMessage) throws IOException {
-      Assert.notNull(httpOutputMessage, "The HttpOutputMessage instance to wrap must not be null!");
-      this.httpOutputMessage = httpOutputMessage;
-      this.outputStream = new ByteCountingOutputStream(this.httpOutputMessage.getBody());
-    }
-
-    @Override
-    public OutputStream getBody() throws IOException {
-      return outputStream;
-    }
-
-    public long getContentLength() {
-      return outputStream.getByteCount();
-    }
-
-    @Override
-    public HttpHeaders getHeaders() {
-      return httpOutputMessage.getHeaders();
-    }
-
-    public void flush() throws IOException {
-      getHeaders().setContentLength(getContentLength());
-    }
-  }
-
-  protected interface HttpOutputMessageWrapper extends HttpOutputMessage {
-
-    long getContentLength();
-
-    void flush() throws IOException;
-
-  }
-
-  protected static class ByteCountingOutputStream extends OutputStream {
-
-    private AtomicLong byteCount = new AtomicLong(0l);
-
-    private final OutputStream outputStream;
-
-    protected ByteCountingOutputStream(final OutputStream outputStream) {
-      Assert.notNull(outputStream, "The OutputStream to wrap must not be null!");
-      this.outputStream = outputStream;
-    }
-
-    protected long getByteCount() {
-      return byteCount.get();
-    }
-
-    @Override
-    public void write(final int byteData) throws IOException {
-      outputStream.write(byteData);
-      byteCount.incrementAndGet();
-    }
-
-    @Override
-    public void write(byte[] b, int off, int len) throws IOException {
-      outputStream.write(b, off, len);
-      byteCount.addAndGet(len);
-    }
-  }
-

UPD43 MOV42 UPD43 UPD42 DEL40 DEL26 DEL42 DEL45 DEL79 DEL42 DEL43 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL42 DEL22 DEL42 DEL43 DEL52 DEL42 DEL22 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL31 DEL55 DEL83 DEL42 DEL39 DEL42 DEL31 DEL39 DEL42 DEL42 DEL43 DEL31 DEL55 DEL83 DEL83 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL34 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL83 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL55