Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-   
+
- * This is the abstract superclass of exceptions that are thrown to
- * indicate incorrect usage of GemFire.
+ * This is the abstract superclass of exceptions that are thrown to indicate incorrect usage of
+ * GemFire.
- * Since these exceptions are unchecked, this class really
- * <em>ought</em> to be called <code>GemFireRuntimeException</code>;
- * however, the current name is retained for compatibility's sake.
+ * Since these exceptions are unchecked, this class really <em>ought</em> to be called
+ * <code>GemFireRuntimeException</code>; however, the current name is retained for compatibility's
+ * sake.
-// to have more specific exception types.  We want to avoid using
+// to have more specific exception types. We want to avoid using
-//  private Throwable cause;
+  // private Throwable cause;
-  //////////////////////  Constructors  //////////////////////
+  ////////////////////// Constructors //////////////////////
-   * Creates a new <code>GemFireException</code> with the given detail
-   * message.
+   * Creates a new <code>GemFireException</code> with the given detail message.
-   * Creates a new <code>GemFireException</code> with the given detail
-   * message and cause.
+   * Creates a new <code>GemFireException</code> with the given detail message and cause.
-//    this.cause = cause;
+    // this.cause = cause;
-  
+
-   * Creates a new <code>GemFireException</code> with the given cause and
-   * no detail message
+   * Creates a new <code>GemFireException</code> with the given cause and no detail message
-//    this.cause = cause;
+    // this.cause = cause;
-  ////////////////////  Instance Methods  ////////////////////
+  //////////////////// Instance Methods ////////////////////
-   * Returns the cause of this <code>GemFireException</code> or
-   * <code>null</code> if the cause is nonexistent or unknown.
+   * Returns the cause of this <code>GemFireException</code> or <code>null</code> if the cause is
+   * nonexistent or unknown.
-//  public Throwable getCause() {
-//    return this.cause;
-//  }
+  // public Throwable getCause() {
+  // return this.cause;
+  // }
-   * Returns the root cause of this <code>GemFireException</code> or
-   * <code>null</code> if the cause is nonexistent or unknown.
+   * Returns the root cause of this <code>GemFireException</code> or <code>null</code> if the cause
+   * is nonexistent or unknown.
-    if ( this.getCause() == null ) {
+    if (this.getCause() == null) {
-    while ( root.getCause() != null ) {
+    while (root.getCause() != null) {
-  
-//  public void printStackTrace() {
-//    super.printStackTrace();
-//    if (this.cause != null) {
-//      System.err.println("Caused by:");
-//      this.cause.printStackTrace();
-//    }
-//  }
-  
-//  public void printStackTrace(java.io.PrintWriter pw) {
-//    super.printStackTrace(pw);
-//
-//    if (this.cause != null) {
-//      pw.println("Caused by:");
-//      this.cause.printStackTrace(pw);
-//    }
-//  }
-//  
-//  public String getMessage() {
-//    if (this.cause != null) {
-//      String ourMsg = super.getMessage();
-//      if (ourMsg == null || ourMsg.length() == 0) {
-//        //ourMsg = super.toString(); //causes inifinite recursion
-//        ourMsg = "";
-//      }
-//      StringBuffer sb = new StringBuffer(ourMsg);
-//      sb.append(" Caused by: ");
-//      String causeMsg = this.cause.getMessage();
-//      if (causeMsg == null || causeMsg.length() == 0) {
-//        causeMsg = this.cause.toString();
-//      }
-//      sb.append(causeMsg);
-//      return sb.toString();
-//    } else {
-//      return super.getMessage();
-//    }
-//  }
+
+  // public void printStackTrace() {
+  // super.printStackTrace();
+  // if (this.cause != null) {
+  // System.err.println("Caused by:");
+  // this.cause.printStackTrace();
+  // }
+  // }
+
+  // public void printStackTrace(java.io.PrintWriter pw) {
+  // super.printStackTrace(pw);
+  //
+  // if (this.cause != null) {
+  // pw.println("Caused by:");
+  // this.cause.printStackTrace(pw);
+  // }
+  // }
+  //
+  // public String getMessage() {
+  // if (this.cause != null) {
+  // String ourMsg = super.getMessage();
+  // if (ourMsg == null || ourMsg.length() == 0) {
+  // //ourMsg = super.toString(); //causes inifinite recursion
+  // ourMsg = "";
+  // }
+  // StringBuffer sb = new StringBuffer(ourMsg);
+  // sb.append(" Caused by: ");
+  // String causeMsg = this.cause.getMessage();
+  // if (causeMsg == null || causeMsg.length() == 0) {
+  // causeMsg = this.cause.toString();
+  // }
+  // sb.append(causeMsg);
+  // return sb.toString();
+  // } else {
+  // return super.getMessage();
+  // }
+  // }
-//  public String toString() {
-//    String result = super.toString();
-//    if (cause != null) {
-//      result = result + ", caused by " + cause.toString();
-//    }
-//    return result;
-//  }
+  // public String toString() {
+  // String result = super.toString();
+  // if (cause != null) {
+  // result = result + ", caused by " + cause.toString();
+  // }
+  // return result;
+  // }

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66