Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private Put70() {
-  }
+  private Put70() {}
-  protected void writeReply(Message origMsg, ServerConnection servConn,
-      boolean sendOldValue, boolean oldValueIsObject, Object oldValue,
-      VersionTag versionTag)
-  throws IOException {
+  protected void writeReply(Message origMsg, ServerConnection servConn, boolean sendOldValue,
+      boolean oldValueIsObject, Object oldValue, VersionTag versionTag) throws IOException {
-      logger.trace("{}: rpl tx: {} parts={}", servConn.getName(), origMsg.getTransactionId(), replyMsg.getNumberOfParts());
+      logger.trace("{}: rpl tx: {} parts={}", servConn.getName(), origMsg.getTransactionId(),
+          replyMsg.getNumberOfParts());
-  protected void writeReplyWithRefreshMetadata(Message origMsg,
-      ServerConnection servConn, PartitionedRegion pr,
-      boolean sendOldValue, boolean oldValueIsObject, Object oldValue, byte nwHopType, VersionTag versionTag)
-  throws IOException {
+  protected void writeReplyWithRefreshMetadata(Message origMsg, ServerConnection servConn,
+      PartitionedRegion pr, boolean sendOldValue, boolean oldValueIsObject, Object oldValue,
+      byte nwHopType, VersionTag versionTag) throws IOException {
-    replyMsg.addBytesPart(new byte[]{pr.getMetadataVersion(), nwHopType});
+    replyMsg.addBytesPart(new byte[] {pr.getMetadataVersion(), nwHopType});
-//      if (logger.fineEnabled()) {
-//        logger.fine("sending old value in Put response");
-//      }
+      // if (logger.fineEnabled()) {
+      // logger.fine("sending old value in Put response");
+      // }
-      logger.trace("{}: rpl with REFRESH_METADAT tx: {} parts={}", servConn.getName(), origMsg.getTransactionId(), replyMsg.getNumberOfParts());
+      logger.trace("{}: rpl with REFRESH_METADAT tx: {} parts={}", servConn.getName(),
+          origMsg.getTransactionId(), replyMsg.getNumberOfParts());

