change more string commands to have CommandFunction support (#5184)

* CommandFunction now supports getrange, setrange, bitcount, bitop, bitpos, getbit, setbit, incrbyfloat, mget, and strlen.

Added integration test coverage for untested string commands.

+import java.util.ArrayList;
-    ByteArrayWrapper destKey = new ByteArrayWrapper(commandElems.get(2));
-
-    byte[][] values = new byte[commandElems.size() - 3][];
-    int maxLength = 0;
-    for (int i = 3; i < commandElems.size(); i++) {
-      ByteArrayWrapper key = new ByteArrayWrapper(commandElems.get(i));
-      ByteArrayWrapper value = getRedisStringCommands(context).get(key);
-      if (value == null) {
-        values[i - 3] = null;
-        continue;
-      }
-
-      byte[] val = value.toBytes();
-      values[i - 3] = val;
-      if (val.length > maxLength) {
-        maxLength = val.length;
-        byte[] tmp = values[0];
-        values[0] = val;
-        values[i - 3] = tmp;
-      }
-      if (i == 3 && operation.equalsIgnoreCase("NOT")) {
-        break;
-      }
-    }
-
-    if (operation.equals("AND")) {
-      and(context, destKey, values, maxLength);
-    } else if (operation.equals("OR")) {
-      or(context, destKey, values, maxLength);
-    } else if (operation.equals("XOR")) {
-      xor(context, destKey, values, maxLength);
-    } else if (operation.equals("NOT")) {
-      not(context, destKey, values, maxLength);
-    } else {
+    if (!operation.equals("AND")
+        && !operation.equals("OR")
+        && !operation.equals("XOR")
+        && !operation.equals("NOT")) {
-    return RedisResponse.integer(maxLength);
-  }
+    ByteArrayWrapper destKey = new ByteArrayWrapper(commandElems.get(2));
-  private void and(ExecutionHandlerContext context,
-      ByteArrayWrapper destKey, byte[][] values, int max) {
-    byte[] dest = new byte[max];
-    outer: for (int i = 0; i < max; i++) {
-      byte b = values[0][i];
-      for (int j = 1; j < values.length; j++) {
-        if (values[j] == null) {
-          break outer;
-        } else if (i < values[j].length) {
-          b &= values[j][i];
-        } else {
-          b &= 0;
-        }
-      }
-      dest[i] = b;
+    List<ByteArrayWrapper> values = new ArrayList<>();
+    for (int i = 3; i < commandElems.size(); i++) {
+      ByteArrayWrapper key = new ByteArrayWrapper(commandElems.get(i));
+      values.add(key);
-    getRedisStringCommands(context).set(destKey, new ByteArrayWrapper(dest), null);
-  }
-
-  private void or(ExecutionHandlerContext context,
-      ByteArrayWrapper destKey, byte[][] values, int max) {
-    byte[] dest = new byte[max];
-    for (int i = 0; i < max; i++) {
-      byte b = values[0][i];
-      for (int j = 1; j < values.length; j++) {
-        byte[] cA = values[j];
-        if (cA != null && i < cA.length) {
-          b |= cA[i];
-        } else {
-          b |= 0;
-        }
-      }
-      dest[i] = b;
+    if (operation.equals("NOT") && values.size() != 1) {
+      return RedisResponse.error(ArityDef.BITOP);
-    getRedisStringCommands(context).set(destKey, new ByteArrayWrapper(dest), null);
-  }
-  private void xor(ExecutionHandlerContext context,
-      ByteArrayWrapper destKey, byte[][] values, int max) {
-    byte[] dest = new byte[max];
-    for (int i = 0; i < max; i++) {
-      byte b = values[0][i];
-      for (int j = 1; j < values.length; j++) {
-        byte[] cA = values[j];
-        if (cA != null && i < cA.length) {
-          b ^= cA[i];
-        } else {
-          b ^= 0;
-        }
-      }
-      dest[i] = b;
-    }
-    getRedisStringCommands(context).set(destKey, new ByteArrayWrapper(dest), null);
-  }
+    int result = getRedisStringCommands(context).bitop(operation, destKey, values);
-  private void not(ExecutionHandlerContext context,
-      ByteArrayWrapper destKey, byte[][] values, int max) {
-    byte[] dest = new byte[max];
-    byte[] cA = values[0];
-    for (int i = 0; i < max; i++) {
-      if (cA == null) {
-        dest[i] = ~0;
-      } else {
-        dest[i] = (byte) (~cA[i] & 0xFF);
-      }
-    }
-    getRedisStringCommands(context).set(destKey, new ByteArrayWrapper(dest), null);
+    return RedisResponse.integer(result);
-

INS26 INS40 MOV25 INS60 INS24 INS25 MOV60 MOV8 INS74 INS59 MOV58 MOV27 MOV37 INS8 INS27 MOV8 INS39 INS38 INS38 INS38 INS38 INS43 MOV43 INS42 INS14 MOV60 MOV21 MOV32 INS27 INS41 UPD42 UPD42 MOV32 MOV32 MOV32 INS32 INS42 INS74 INS32 INS34 INS32 UPD42 INS42 UPD42 INS42 MOV42 UPD42 MOV42 MOV45 INS43 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS40 INS42 DEL42 DEL34 DEL27 DEL32 DEL10 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL85 DEL85 DEL5 DEL42 DEL39 DEL85 DEL85 DEL5 DEL42 DEL42 DEL32 DEL34 DEL27 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL34 DEL27 DEL2 DEL33 DEL7 DEL21 DEL18 DEL8 DEL25 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL40 DEL42 DEL27 DEL42 DEL40 DEL7 DEL21 DEL39 DEL85 DEL5 DEL42 DEL42 DEL34 DEL2 DEL59 DEL60 DEL42 DEL34 DEL2 DEL42 DEL7 DEL21 DEL42 DEL42 DEL34 DEL27 DEL2 DEL42 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL25 DEL25 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL42 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL34 DEL2 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL33 DEL27 DEL42 DEL10 DEL8 DEL42 DEL42 DEL42 DEL2 DEL42 DEL22 DEL27 DEL42 DEL42 DEL42 DEL2 DEL42 DEL2 DEL7 DEL21 DEL8 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL25 DEL8 DEL24 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL8 DEL24 DEL30 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL33 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL34 DEL2 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL2 DEL7 DEL21 DEL8 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL33 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL39 DEL42 DEL42 DEL34 DEL2 DEL42 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL27 DEL42 DEL42 DEL42 DEL2 DEL7 DEL21 DEL8 DEL42 DEL34 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL2 DEL42 DEL7 DEL21 DEL8 DEL24 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL33 DEL32 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL85 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL3 DEL59 DEL60 DEL39 DEL85 DEL5 DEL42 DEL42 DEL34 DEL2 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL33 DEL27 DEL42 DEL42 DEL2 DEL34 DEL38 DEL7 DEL21 DEL8 DEL42 DEL42 DEL2 DEL39 DEL42 DEL42 DEL2 DEL38 DEL34 DEL27 DEL36 DEL11 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL33 DEL32 DEL21 DEL8 DEL31