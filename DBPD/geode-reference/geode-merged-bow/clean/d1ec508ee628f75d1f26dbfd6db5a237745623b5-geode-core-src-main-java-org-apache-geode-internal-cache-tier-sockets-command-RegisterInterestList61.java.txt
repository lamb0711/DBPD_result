GEODE-2632: refactoring preparations for SecurityService and BaseCommand changes

-  public void cmdExecute(Message msg, ServerConnection servConn, long start)
+  public void cmdExecute(Message clientMessage, ServerConnection serverConnection, long start)
-    CachedRegionHelper crHelper = servConn.getCachedRegionHelper();
+    CachedRegionHelper crHelper = serverConnection.getCachedRegionHelper();
-    servConn.setAsTrue(REQUIRES_RESPONSE);
-    servConn.setAsTrue(REQUIRES_CHUNKED_RESPONSE);
-    ChunkedMessage chunkedResponseMsg = servConn.getRegisterInterestResponseMessage();
+    serverConnection.setAsTrue(REQUIRES_RESPONSE);
+    serverConnection.setAsTrue(REQUIRES_CHUNKED_RESPONSE);
+    ChunkedMessage chunkedResponseMsg = serverConnection.getRegisterInterestResponseMessage();
-    regionNamePart = msg.getPart(0);
+    regionNamePart = clientMessage.getPart(0);
-      policy = (InterestResultPolicy) msg.getPart(1).getObject();
+      policy = (InterestResultPolicy) clientMessage.getPart(1).getObject();
-      writeChunkedException(msg, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, e, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      Part durablePart = msg.getPart(2);
+      Part durablePart = clientMessage.getPart(2);
-      writeChunkedException(msg, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, e, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-      Part regionDataPolicyPart = msg.getPart(msg.getNumberOfParts() - 1);
+      Part regionDataPolicyPart = clientMessage.getPart(clientMessage.getNumberOfParts() - 1);
-      writeChunkedException(msg, e, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, e, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    numberOfKeysPart = msg.getPart(3);
+    numberOfKeysPart = clientMessage.getPart(3);
-      keyPart = msg.getPart(partNumber + i);
+      keyPart = clientMessage.getPart(partNumber + i);
-        writeChunkedException(msg, e, false, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeChunkedException(clientMessage, e, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-    if (msg.getNumberOfParts() > (numberOfKeys + partNumber)) {
+    if (clientMessage.getNumberOfParts() > (numberOfKeys + partNumber)) {
-        Part notifyPart = msg.getPart(numberOfKeys + partNumber);
+        Part notifyPart = clientMessage.getPart(numberOfKeys + partNumber);
-        writeChunkedException(msg, e, false, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeChunkedException(clientMessage, e, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-          servConn.getName(), msg.getPayloadLength(), servConn.getSocketString(), numberOfKeys,
-          regionName, keys);
+          serverConnection.getName(), clientMessage.getPayloadLength(),
+          serverConnection.getSocketString(), numberOfKeys, regionName, keys);
-      logger.warn("{}: {}", servConn.getName(), s);
-      writeChunkedErrorResponse(msg, MessageType.REGISTER_INTEREST_DATA_ERROR, s, servConn);
-      servConn.setAsTrue(RESPONDED);
+      logger.warn("{}: {}", serverConnection.getName(), s);
+      writeChunkedErrorResponse(clientMessage, MessageType.REGISTER_INTEREST_DATA_ERROR, s,
+          serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    LocalRegion region = (LocalRegion) servConn.getCache().getRegion(regionName);
+    LocalRegion region = (LocalRegion) serverConnection.getCache().getRegion(regionName);
-          new Object[] {servConn.getName(), regionName}));
+          new Object[] {serverConnection.getName(), regionName}));
-      AuthorizeRequest authzRequest = servConn.getAuthzRequest();
+      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();
-      servConn.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName, keys,
-          servConn.getProxyID(), isDurable, sendUpdatesAsInvalidates, true,
+      serverConnection.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName,
+          keys, serverConnection.getProxyID(), isDurable, sendUpdatesAsInvalidates, true,
-      checkForInterrupt(servConn, ex);
+      checkForInterrupt(serverConnection, ex);
-      writeChunkedException(msg, ex, false, servConn);
-      servConn.setAsTrue(RESPONDED);
+      writeChunkedException(clientMessage, ex, serverConnection);
+      serverConnection.setAsTrue(RESPONDED);
-    boolean isPrimary = servConn.getAcceptor().getCacheClientNotifier()
-        .getClientProxy(servConn.getProxyID()).isPrimary();
+    boolean isPrimary = serverConnection.getAcceptor().getCacheClientNotifier()
+        .getClientProxy(serverConnection.getProxyID()).isPrimary();
-      chunkedResponseMsg.setTransactionId(msg.getTransactionId());
+      chunkedResponseMsg.setTransactionId(clientMessage.getTransactionId());
-            servConn.getName(), regionName, key, chunkedResponseMsg);
+            serverConnection.getName(), regionName, key, chunkedResponseMsg);
-      chunkedResponseMsg.sendChunk(servConn);
+      chunkedResponseMsg.sendChunk(serverConnection);
-      chunkedResponseMsg.setTransactionId(msg.getTransactionId());
+      chunkedResponseMsg.setTransactionId(clientMessage.getTransactionId());
-        fillAndSendRegisterInterestResponseChunks(region, keys, InterestType.KEY, policy, servConn);
-        servConn.setAsTrue(RESPONDED);
+        fillAndSendRegisterInterestResponseChunks(region, keys, InterestType.KEY, policy,
+            serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-        checkForInterrupt(servConn, e);
+        checkForInterrupt(serverConnection, e);
-        writeChunkedException(msg, e, false, servConn);
-        servConn.setAsTrue(RESPONDED);
+        writeChunkedException(clientMessage, e, serverConnection);
+        serverConnection.setAsTrue(RESPONDED);
-            servConn.getName(), numberOfKeys, regionName, keys);
+            serverConnection.getName(), numberOfKeys, regionName, keys);

UPD42 UPD42 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL9 DEL9 DEL9 DEL9 DEL9 DEL9 DEL9