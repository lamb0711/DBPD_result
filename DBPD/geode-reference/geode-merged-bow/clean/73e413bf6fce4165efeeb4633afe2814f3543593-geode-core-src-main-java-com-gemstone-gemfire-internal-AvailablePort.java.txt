GEODE-1722 Distributed tests should use a restricted membership-port-range

fixing a damaged unit test.  AvailablePort & AvailablePortHelper can now
be told to use the membership-port-range to find available ports.  The
default is to use ports outside of the membership-port-range.

-  private static InetAddress getAddress(int protocol) {
+  public static InetAddress getAddress(int protocol) {
+    return getRandomAvailablePort(protocol, addr, false);
+  }
+
+  /**
+   * Returns a randomly selected available port in the range 5001 to
+   * 32767.
+   *
+   * @param protocol
+   *        The protocol to check (either {@link #SOCKET} or {@link
+   *        #MULTICAST}). 
+   * @param addr the bind-address or mcast address to use
+   * @param useMembershipPortRange use true if the port will be used for membership
+   *
+   * @throws IllegalArgumentException
+   *         <code>protocol</code> is unknown
+   */
+  public static int getRandomAvailablePort(int protocol, InetAddress addr, boolean useMembershipPortRange) {
-      int port = getRandomWildcardBindPortNumber();
+      int port = getRandomWildcardBindPortNumber(useMembershipPortRange);
+    return getRandomAvailablePortKeeper(protocol, addr, false);
+  }
+  
+  public static Keeper getRandomAvailablePortKeeper(int protocol, InetAddress addr, boolean useMembershipPortRange) {
-      int port = getRandomWildcardBindPortNumber();
+      int port = getRandomWildcardBindPortNumber(useMembershipPortRange);
+    return getRandomWildcardBindPortNumber(false);
+  }
+  
+  private static int getRandomWildcardBindPortNumber(boolean useMembershipPortRange) {
-// wcb port range on Windows is 1024..5000 (and Linux?)
-// wcb port range on Solaris is 32768..65535
-//     if (System.getProperty("os.name").equals("SunOS")) {
-//       rangeBase=32768;
-//       rangeTop=65535;
-//     } else {
-//       rangeBase=1024;
-//       rangeTop=5000;
-//     }
-    rangeBase = AVAILABLE_PORTS_LOWER_BOUND; // 20000/udp is securid
-    rangeTop =  AVAILABLE_PORTS_UPPER_BOUND; // 30000/tcp is spoolfax
+    if ( !useMembershipPortRange ) {
+      rangeBase = AVAILABLE_PORTS_LOWER_BOUND; // 20000/udp is securid
+      rangeTop = AVAILABLE_PORTS_UPPER_BOUND; // 30000/tcp is spoolfax
+    } else {
+      rangeBase = DistributionConfig.DEFAULT_MEMBERSHIP_PORT_RANGE[0];
+      rangeTop = DistributionConfig.DEFAULT_MEMBERSHIP_PORT_RANGE[1];
+    }

INS31 INS31 INS31 UPD83 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS44 MOV8 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS44 INS83 INS83 INS39 INS42 INS8 INS44 INS41 INS65 INS65 INS65 INS65 INS65 INS39 INS42 INS43 INS42 INS39 INS42 INS42 INS39 INS42 INS43 INS42 INS41 INS39 INS42 INS41 INS39 INS42 INS25 INS32 INS66 INS66 INS42 INS66 INS65 INS66 INS65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS32 INS32 INS38 INS8 INS8 INS42 INS42 INS42 INS9 INS67 INS67 INS42 INS42 INS42 INS9 INS42 INS9 INS42 MOV21 MOV21 INS21 INS21 INS42 INS42 INS7 INS7 INS42 INS2 INS42 INS2 INS42 INS42 INS40 INS34 INS40 INS34