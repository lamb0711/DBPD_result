Merge branch 'release/1.4.0'

+import java.util.concurrent.atomic.AtomicBoolean;
-import org.apache.geode.cache.EvictionAlgorithm;
-import org.apache.geode.cache.EvictionAttributes;
+import org.apache.geode.cache.lucene.LuceneSerializer;
+  private LuceneSerializer serializer;
+
+  private AtomicBoolean beforeCreateInvoked = new AtomicBoolean();
+
+  private AtomicBoolean afterCreateInvoked = new AtomicBoolean();
+
-      String regionPath, String[] fields, Analyzer analyzer, Map<String, Analyzer> fieldAnalyzers) {
+      String regionPath, String[] fields, Analyzer analyzer, Map<String, Analyzer> fieldAnalyzers,
+      LuceneSerializer serializer) {
+    this.serializer = serializer;
-    if (path.equals(this.regionPath)) {
+    if (path.equals(this.regionPath) && this.beforeCreateInvoked.compareAndSet(false, true)) {
-      if (!attrs.getDataPolicy().withPartitioning()) {
-        // replicated region
-        throw new UnsupportedOperationException(
-            "Lucene indexes on replicated regions are not supported");
-      }
-
-      // For now we cannot support eviction with local destroy.
-      // Eviction with overflow to disk still needs to be supported
-      EvictionAttributes evictionAttributes = attrs.getEvictionAttributes();
-      EvictionAlgorithm evictionAlgorithm = evictionAttributes.getAlgorithm();
-      if (evictionAlgorithm != EvictionAlgorithm.NONE
-          && evictionAttributes.getAction().isLocalDestroy()) {
-        throw new UnsupportedOperationException(
-            "Lucene indexes on regions with eviction and action local destroy are not supported");
-      }
+      LuceneServiceImpl.validateRegionAttributes(attrs);
-          this.regionPath, this.fields, this.analyzer, this.fieldAnalyzers));
+          this.regionPath, this.fields, this.analyzer, this.fieldAnalyzers, serializer));
-          this.analyzer, this.fieldAnalyzers, aeqId, this.fields);
+          this.analyzer, this.fieldAnalyzers, aeqId, serializer, this.fields);
-    if (region.getFullPath().equals(this.regionPath)) {
+    if (region.getFullPath().equals(this.regionPath)
+        && this.afterCreateInvoked.compareAndSet(false, true)) {
-      String aeqId = LuceneServiceImpl.getUniqueIndexName(this.indexName, this.regionPath);
-      AsyncEventQueueImpl aeq = (AsyncEventQueueImpl) cache.getAsyncEventQueue(aeqId);
-      AbstractPartitionedRepositoryManager repositoryManager =
-          (AbstractPartitionedRepositoryManager) luceneIndex.getRepositoryManager();
-      repositoryManager.allowRepositoryComputation();
-      this.cache.removeRegionListener(this);
+    }
+  }
+
+  @Override
+  public void beforeDestroyed(Region region) {
+    if (region.getFullPath().equals(this.regionPath)) {
+      this.service.beforeRegionDestroyed(region);
+    }
+  }
+
+  @Override
+  public void cleanupFailedInitialization(Region region) {
+    // Reset the booleans
+    this.beforeCreateInvoked.set(false);
+    this.afterCreateInvoked.set(false);
+
+    // Clean up the region in the LuceneService
+    if (region.getFullPath().equals(this.regionPath)) {
+      this.service.cleanupFailedInitialization(region);

MOV26 MOV26 UPD40 UPD40 INS23 INS23 INS23 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS43 INS59 INS44 MOV78 MOV83 MOV39 MOV42 MOV44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS21 INS25 INS42 INS43 INS42 INS25 INS42 INS43 INS42 INS21 INS21 INS25 INS43 INS43 INS42 INS7 INS27 INS27 INS8 UPD42 MOV42 INS32 INS8 UPD42 MOV42 INS32 INS32 INS32 INS8 INS42 INS42 INS22 INS42 MOV32 INS32 INS21 MOV32 INS32 MOV21 INS32 INS42 MOV22 INS21 INS22 INS42 INS9 INS22 UPD42 MOV42 INS9 INS32 INS42 INS22 MOV21 INS52 INS42 INS22 INS42 INS9 INS9 INS32 INS22 INS42 INS9 INS9 UPD42 MOV42 UPD42 MOV42 INS32 INS52 INS42 INS52 INS42 UPD42 MOV42 INS42 INS52 INS42 INS52 INS42 INS42 INS42 MOV42 INS52 INS42 INS22 INS42 INS42 INS42 UPD42 INS42 INS42 INS52 INS42 UPD42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL32 DEL42 DEL32 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL52 DEL43 DEL42 DEL52 DEL42 DEL22 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL43 DEL42 DEL42 DEL43 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31