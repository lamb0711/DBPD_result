Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-//    DependencyMonitorManager.addMonitor(INSTANCE);
+    // DependencyMonitorManager.addMonitor(INSTANCE);
-  
-  
-  public Set<Dependency<Thread, Serializable>> getBlockedThreads(
-      Thread[] allThreads) {
+
+
+  public Set<Dependency<Thread, Serializable>> getBlockedThreads(Thread[] allThreads) {
-    
+
-          results.add(new Dependency<Thread, Serializable>(thread, new LockId(
-              serviceName, (Serializable) lockName)));
+          results.add(new Dependency<Thread, Serializable>(thread,
+              new LockId(serviceName, (Serializable) lockName)));
-  public Set<Dependency<Serializable, Thread>> getHeldResources(
-      Thread[] allThreads) {
-    
+  public Set<Dependency<Serializable, Thread>> getHeldResources(Thread[] allThreads) {
+
-    if(ds == null) {
+    if (ds == null) {
-    Set<Dependency<Serializable, Thread>> results= new HashSet<Dependency<Serializable, Thread>>();
-    
+    Set<Dependency<Serializable, Thread>> results = new HashSet<Dependency<Serializable, Thread>>();
+
-    for(Map.Entry<String, DLockService> entry : services.entrySet()) {
+    for (Map.Entry<String, DLockService> entry : services.entrySet()) {
-      for(Map.Entry<Object, DLockToken> tokenEntry : tokens.entrySet()) {
+      for (Map.Entry<Object, DLockToken> tokenEntry : tokens.entrySet()) {
-        synchronized(token) {
+        synchronized (token) {
-          if(holdingThread != null) {
-            results.add(new Dependency(new LockId(serviceName,
-                (Serializable) tokenName), holdingThread));
+          if (holdingThread != null) {
+            results.add(
+                new Dependency(new LockId(serviceName, (Serializable) tokenName), holdingThread));
-    
+
-  
+
-    
+
-      result = prime * result
-          + ((serviceName == null) ? 0 : serviceName.hashCode());
-      result = prime * result
-          + ((tokenName == null) ? 0 : tokenName.hashCode());
+      result = prime * result + ((serviceName == null) ? 0 : serviceName.hashCode());
+      result = prime * result + ((tokenName == null) ? 0 : tokenName.hashCode());
-      return "DLock(" + serviceName +", " + tokenName + ")";
+      return "DLock(" + serviceName + ", " + tokenName + ")";

