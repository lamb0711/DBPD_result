Merge branch 'release/1.5.0'

-import org.apache.geode.cache.EntryNotFoundException;
-import org.apache.geode.cache.TransactionDataNotColocatedException;
-import org.apache.geode.distributed.internal.*;
+import org.apache.geode.distributed.internal.ClusterDistributionManager;
+import org.apache.geode.distributed.internal.DirectReplyProcessor;
+import org.apache.geode.distributed.internal.DistributionConfig;
+import org.apache.geode.distributed.internal.DistributionManager;
+import org.apache.geode.distributed.internal.DistributionMessage;
+import org.apache.geode.distributed.internal.DistributionStats;
+import org.apache.geode.distributed.internal.InternalDistributedSystem;
+import org.apache.geode.distributed.internal.ReplyException;
+import org.apache.geode.distributed.internal.ReplyMessage;
+import org.apache.geode.distributed.internal.ReplyProcessor21;
+import org.apache.geode.distributed.internal.ReplySender;
-import org.apache.geode.internal.cache.*;
+import org.apache.geode.internal.cache.BucketRegion;
-          return DistributionManager.PARTITIONED_REGION_EXECUTOR;
+          return ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR;
-      return DistributionManager.PARTITIONED_REGION_EXECUTOR;
+      return ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR;
-      return DistributionManager.PARTITIONED_REGION_EXECUTOR;
+      return ClusterDistributionManager.PARTITIONED_REGION_EXECUTOR;
-      return DistributionManager.SERIAL_EXECUTOR;
+      return ClusterDistributionManager.SERIAL_EXECUTOR;
-  protected boolean operateOnPartitionedRegion(final DistributionManager dm, PartitionedRegion r,
-      long startTime) throws ForceReattemptException {
+  protected boolean operateOnPartitionedRegion(final ClusterDistributionManager dm,
+      PartitionedRegion r, long startTime) throws ForceReattemptException {
+    m.setTransactionDistributed(r.getCache().getTxManager().isDistributed());
-    public void process(final DM dm, ReplyProcessor21 processor) {
+    public void process(final DistributionManager dm, ReplyProcessor21 processor) {
-                  return CachedDeserializableFactory.create(reply.valueInBytes);
+                  return CachedDeserializableFactory.create(reply.valueInBytes,
+                      getDistributionManager().getCache());
-        // waitForRepliesUninterruptibly();
-      }
-      // Neeraj: Adding separate catch block for ENFE because there should not be a reattempt due
-      // to this exception from the sender node. ENFE is a type of CacheException(caught below)
-      // which wraps all CacheException in ForcedReattemptException(which is not correct). Filing
-      // a separate bug for this.(#41717)
-      catch (EntryNotFoundException enfe) {
-        // rethrow this
-        throw enfe;
-      } catch (TransactionDataNotColocatedException e) {
-        // Throw this up to user!
-        throw e;

MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 UPD40 INS40 INS40 UPD40 UPD40 INS44 INS83 INS43 INS42 INS21 MOV44 INS42 INS32 INS42 INS42 INS32 UPD40 INS32 INS42 UPD40 UPD40 INS32 INS42 INS42 INS42 UPD40 INS32 INS32 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL53 DEL8 DEL12