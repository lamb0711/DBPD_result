Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-import com.gemstone.gemfire.cache.client.internal.BridgePoolImpl;
-import com.gemstone.gemfire.cache.control.ResourceManager;
-import com.gemstone.gemfire.cache.util.BridgeClient;
-import com.gemstone.gemfire.cache.util.BridgeLoader;
-import com.gemstone.gemfire.cache.util.BridgeWriter;
+import com.gemstone.gemfire.internal.cache.PartitionAttributesImpl;
+import com.gemstone.gemfire.internal.cache.control.MemoryThresholds;
-        if (generateDefaults() || chp != ResourceManager.DEFAULT_CRITICAL_HEAP_PERCENTAGE) {
+        if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE) {
-        if (generateDefaults() || ehp != ResourceManager.DEFAULT_EVICTION_HEAP_PERCENTAGE) {
+        if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE) {
+      
+      if (this.version.compareTo(CacheXmlVersion.VERSION_9_0) >= 0) {
+        if (this.creation.getResourceManager().hasCriticalOffHeap()) {
+          float chp = this.creation.getResourceManager().getCriticalOffHeapPercentage();
+          if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE) {
+            atts.addAttribute("", "", CRITICAL_OFF_HEAP_PERCENTAGE, "", String.valueOf(chp));
+            generateIt = true;
+          }
+        }
+        if (this.creation.getResourceManager().hasEvictionOffHeap()) {
+          float ehp = this.creation.getResourceManager().getEvictionOffHeapPercentage();
+          if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE) {
+            atts.addAttribute("", "", EVICTION_OFF_HEAP_PERCENTAGE, "", String.valueOf(ehp));
+            generateIt = true;
+          }
+        }
+      }
-        if (generateDefaults() || chp != ResourceManager.DEFAULT_CRITICAL_HEAP_PERCENTAGE)
+        if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE)
+
-        if (generateDefaults() || ehp != ResourceManager.DEFAULT_EVICTION_HEAP_PERCENTAGE)
+        if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE)
+      
+      if (this.version.compareTo(CacheXmlVersion.VERSION_9_0) >= 0) {
+        {
+          int chp = (int)this.cache.getResourceManager().getCriticalOffHeapPercentage();
+          if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE)
+  
+          atts.addAttribute("", "", CRITICAL_OFF_HEAP_PERCENTAGE, "",
+              String.valueOf(chp));
+        }
+        {
+          int ehp = (int)this.cache.getResourceManager().getEvictionOffHeapPercentage();
+          if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE)
+          atts.addAttribute("", "", EVICTION_OFF_HEAP_PERCENTAGE, "",
+              String.valueOf(ehp));
+        }
+      }
-    if (cp instanceof BridgePoolImpl || ((PoolImpl)cp).isUsedByGateway()) {
-      // no need to generate xml for bridge pools
+    if (((PoolImpl)cp).isUsedByGateway()) {
+      // no need to generate xml for gateway pools
-    {
-      BridgeWriter bw = cfg.getBridgeWriter();
-      if (bw != null) {
-        generate(CACHE_WRITER, bw);
-      }
-    }
+    if (this.version.compareTo(CacheXmlVersion.VERSION_9_0) >= 0) {
+      if ((!(attrs instanceof RegionAttributesCreation) ||
+          ((RegionAttributesCreation) attrs).hasOffHeap())) {
+        if (generateDefaults() || attrs.getOffHeap()) {
+          atts.addAttribute("", "", OFF_HEAP, "", String.valueOf(attrs.getOffHeap()));
+        }
+      }
+    }
+
-    if (attrs.getCacheWriter() == attrs.getCacheLoader()
-        && attrs.getCacheWriter() instanceof BridgeClient) {
-      // just do the writer; the single instance will be made both loader and writer
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-           ((RegionAttributesCreation) attrs).hasCacheWriter())) {
-        generate(CACHE_WRITER, attrs.getCacheWriter());
-      }
-    } else {
-      if ((!(attrs instanceof RegionAttributesCreation)
-           || ((RegionAttributesCreation) attrs).hasCacheLoader())) {
-        generate(CACHE_LOADER, attrs.getCacheLoader());
-      }
-      if ((!(attrs instanceof RegionAttributesCreation) ||
-           ((RegionAttributesCreation) attrs).hasCacheWriter())) {
-        generate(CACHE_WRITER, attrs.getCacheWriter());
-      }
+    if ((!(attrs instanceof RegionAttributesCreation)
+        || ((RegionAttributesCreation) attrs).hasCacheLoader())) {
+      generate(CACHE_LOADER, attrs.getCacheLoader());
+    }
+    if ((!(attrs instanceof RegionAttributesCreation) ||
+        ((RegionAttributesCreation) attrs).hasCacheWriter())) {
+      generate(CACHE_WRITER, attrs.getCacheWriter());
-    } else if (callback instanceof BridgeWriter) {
-      props = ((BridgeWriter) callback).getProperties();
-    } else if (callback instanceof BridgeLoader) {
-      props = ((BridgeLoader) callback).getProperties();
-      if (generateDefaults() || pa.getLocalMaxMemory() != PartitionAttributesFactory.LOCAL_MAX_MEMORY_DEFAULT)
+      if (generateDefaults() || pa.getLocalMaxMemory() != ((PartitionAttributesImpl) pa).getLocalMaxMemoryDefault())

MOV26 MOV26 UPD40 UPD40 MOV25 MOV25 MOV25 MOV25 MOV32 INS27 MOV62 MOV8 INS25 MOV32 INS34 INS27 INS8 INS25 INS22 UPD42 INS40 INS8 INS32 INS34 INS25 INS25 INS27 INS8 INS52 INS42 INS25 INS22 INS42 INS40 INS32 INS8 INS32 INS8 INS32 INS34 INS8 INS8 INS27 MOV8 INS32 INS52 INS42 INS32 INS42 INS60 INS25 INS32 INS42 INS60 INS25 INS22 INS42 INS40 INS60 INS25 INS60 INS25 UPD42 INS32 INS32 INS36 INS42 UPD40 UPD40 INS22 INS42 INS39 INS59 INS27 INS8 INS22 INS42 INS39 INS59 INS27 INS8 UPD40 UPD40 INS52 INS42 INS39 INS59 INS27 INS21 INS39 INS59 INS27 INS21 INS42 INS42 INS42 INS11 INS52 INS42 INS42 INS32 INS32 INS27 INS21 INS21 INS52 INS42 INS42 INS32 INS32 INS27 INS21 INS21 INS42 INS11 INS32 INS27 INS32 INS42 INS11 INS32 INS27 INS32 INS42 UPD42 INS45 INS45 UPD42 INS45 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS40 INS32 INS7 INS32 INS42 INS42 INS42 INS40 INS32 INS7 INS39 INS32 INS42 INS42 INS40 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS39 INS32 INS42 INS42 INS40 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS42 INS42 MOV32 INS42 INS22 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS42 INS9 INS22 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS52 INS42 INS52 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL62 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL42 DEL32 DEL42 DEL43 DEL62 DEL27 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL40