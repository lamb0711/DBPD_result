GEODE-7497: Check CQs prior to change authorizer (#4385)

The QueryConfigurationService now requires an extra flag to determine,
in the presence of continuous queries, whether to update the configured
MethodInvocationAuthorizer and invalidate the CQ's internal cache or
throw an exception and abort the update.

- Fixed minor warnings.
- Added unit and distributed tests.
- Updated docs for alter query-service command.
- Added 'forceUpdate' flag to 'AlterQueryServiceFunction' and
  'AlterQueryServiceCommand'.
- Fixed 'AlterQueryServiceCommand' to always require the
  'method-authorizer' parameter.
+import org.apache.geode.cache.query.internal.cq.CqService;
+import org.apache.geode.cache.query.internal.cq.ServerCQ;
-
-  static final String UPDATE_ERROR_MESSAGE =
-      "Exception while updating MethodInvocationAuthorizer. ";
+  private static final Logger logger = LogService.getLogger();
+  static final String NULL_CACHE_ERROR_MESSAGE = "Cache must not be null";
+  private static final String UPDATE_ERROR_MESSAGE =
+      "Exception while updating MethodInvocationAuthorizer.";
+  public static final String CONTINUOUS_QUERIES_RUNNING_MESSAGE =
+      "There are CQs running which might have method invocations not allowed by the new MethodInvocationAuthorizer, the update operation can not be completed on this member.";
-  public static final String DEPRECATION_WARNING = "The property " + GEMFIRE_PREFIX +
-      "QueryService.allowUntrustedMethodInvocation is deprecated. " +
-      "Please use the UnrestrictedMethodAuthorizer implementation of MethodInvocationAuthorizer " +
-      "instead";
+  /**
+   * Delete this once {@code ALLOW_UNTRUSTED_METHOD_INVOCATION} is removed.
+   * Keeping it here and public to avoid using using the same constant String across classes.
+   */
+  @Deprecated
+  public static final String ALLOW_UNTRUSTED_METHOD_INVOCATION_SYSTEM_PROPERTY =
+      GEMFIRE_PREFIX + "QueryService.allowUntrustedMethodInvocation";
-  private static final Logger logger = LogService.getLogger();
+  public static final String DEPRECATION_WARNING = "The property "
+      + ALLOW_UNTRUSTED_METHOD_INVOCATION_SYSTEM_PROPERTY
+      + " is deprecated. Please use the UnrestrictedMethodAuthorizer implementation of MethodInvocationAuthorizer instead.";
-    ALLOW_UNTRUSTED_METHOD_INVOCATION = Boolean.parseBoolean(
-        System.getProperty(GEMFIRE_PREFIX + "QueryService.allowUntrustedMethodInvocation"));
+    ALLOW_UNTRUSTED_METHOD_INVOCATION =
+        Boolean.parseBoolean(System.getProperty(ALLOW_UNTRUSTED_METHOD_INVOCATION_SYSTEM_PROPERTY));
-      throw new IllegalArgumentException("cache must not be null");
+      throw new IllegalArgumentException(NULL_CACHE_ERROR_MESSAGE);
-    if (System
-        .getProperty(GEMFIRE_PREFIX + "QueryService.allowUntrustedMethodInvocation") != null) {
+    if (System.getProperty(ALLOW_UNTRUSTED_METHOD_INVOCATION_SYSTEM_PROPERTY) != null) {
+
-  public void close() {
-
-  }
+  public void close() {}
-  public void updateMethodAuthorizer(Cache cache, QueryMethodAuthorizerCreation creation)
-      throws QueryConfigurationServiceException {
-    updateMethodAuthorizer(cache, creation.getClassName(), creation.getParameters());
+  public void updateMethodAuthorizer(Cache cache, boolean forceUpdate,
+      QueryMethodAuthorizerCreation creation) throws QueryConfigurationServiceException {
+    updateMethodAuthorizer(cache, forceUpdate, creation.getClassName(), creation.getParameters());
+  }
+
+  private boolean isSecurityDisabled(InternalCache cache) {
+    return !cache.getSecurityService().isIntegratedSecurity();
+  }
+
+  private void invalidateContinuousQueryCache(CqService cqService) {
+    cqService.getAllCqs().forEach(cqQuery -> {
+      ServerCQ serverCQ = (ServerCQ) cqQuery;
+      serverCQ.invalidateCqResultKeys();
+    });
-  public void updateMethodAuthorizer(Cache cache, String className, Set<String> parameters)
-      throws QueryConfigurationServiceException {
+  public void updateMethodAuthorizer(Cache cache, boolean forceUpdate, String className,
+      Set<String> parameters) throws QueryConfigurationServiceException {
+    // Return quickly if security is disabled or deprecated flag is set
+    // Throw exception if there are CQs running and forceUpdate flag is false.
+    CqService cqService = ((InternalCache) cache).getCqService();
+    if ((!cqService.getAllCqs().isEmpty()) && (!forceUpdate)) {
+      throw new QueryConfigurationServiceException(CONTINUOUS_QUERIES_RUNNING_MESSAGE);
+    }
+
-        Class userClass = ClassPathLoader.getLatest().forName(className);
+        Class<?> userClass = ClassPathLoader.getLatest().forName(className);
+
-
+
+      invalidateContinuousQueryCache(cqService);
-  private boolean isSecurityDisabled(InternalCache cache) {
-    return !cache.getSecurityService().isIntegratedSecurity();
-  }
-

INS26 INS26 MOV23 MOV31 INS40 INS40 INS23 INS23 INS23 INS31 INS83 INS83 MOV43 INS59 INS83 MOV43 INS83 INS83 INS83 INS43 INS59 INS29 INS78 INS83 INS83 INS83 INS43 INS59 INS43 INS44 INS83 INS39 INS42 INS44 INS8 INS44 INS42 INS45 UPD45 INS42 INS42 INS45 INS65 INS42 INS42 INS42 MOV27 INS42 INS39 INS42 INS43 INS42 INS21 INS39 INS42 INS60 INS25 INS66 INS65 INS66 INS66 UPD42 UPD45 INS42 INS32 INS43 INS59 INS27 INS8 INS66 INS42 INS32 INS42 INS86 INS42 INS42 INS32 INS36 INS36 INS53 INS21 INS42 INS42 INS42 INS59 INS8 INS36 INS42 INS38 INS38 INS14 INS32 INS42 INS42 INS42 INS60 INS21 INS11 INS32 INS42 INS43 INS42 INS42 INS42 INS43 INS59 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS74 MOV43 INS76 DEL45 DEL45 DEL45 DEL42 DEL45 DEL27