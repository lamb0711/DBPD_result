Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-        .<ConnectionEventListener> synchronizedList(new ArrayList<ConnectionEventListener>());
+        .<ConnectionEventListener>synchronizedList(new ArrayList<ConnectionEventListener>());
-    this.connections = Collections
-        .<GFConnectionImpl> synchronizedSet(new HashSet<GFConnectionImpl>());
+    this.connections =
+        Collections.<GFConnectionImpl>synchronizedSet(new HashSet<GFConnectionImpl>());
-  public void addConnectionEventListener(ConnectionEventListener listener)
-  {
+  public void addConnectionEventListener(ConnectionEventListener listener) {
-  public void associateConnection(Object conn) throws ResourceException
-  {
+  public void associateConnection(Object conn) throws ResourceException {
-    ((GFConnectionImpl)conn).resetManagedConnection(this);
-    this.connections.add((GFConnectionImpl)conn);
+    ((GFConnectionImpl) conn).resetManagedConnection(this);
+    this.connections.add((GFConnectionImpl) conn);
-  public void cleanup() throws ResourceException
-  {
+  public void cleanup() throws ResourceException {
-      }
-      catch (NullPointerException npe) {
+      } catch (NullPointerException npe) {
-      }
-      else {
+      } else {
-  public void destroy() throws ResourceException
-  {
+  public void destroy() throws ResourceException {
-      }
-      catch (NullPointerException npe) {
+      } catch (NullPointerException npe) {
-  public Object getConnection(Subject arg0, ConnectionRequestInfo arg1)
-      throws ResourceException
-  {
+  public Object getConnection(Subject arg0, ConnectionRequestInfo arg1) throws ResourceException {
-        throw new NullPointerException(
-            "Asif:JCAManagedConnection:getConnection");
-      }
-      catch (NullPointerException npe) {
+        throw new NullPointerException("Asif:JCAManagedConnection:getConnection");
+      } catch (NullPointerException npe) {
-        logger
-            .fine("JCAManagedConnection:getConnection. Returning new Connection");
+        logger.fine("JCAManagedConnection:getConnection. Returning new Connection");
-    }
-    catch (SystemException e) {
+    } catch (SystemException e) {
-  private void init() throws SystemException
-  {
-    this.cache = (GemFireCacheImpl)CacheFactory.getAnyInstance();
+  private void init() throws SystemException {
+    this.cache = (GemFireCacheImpl) CacheFactory.getAnyInstance();
-  public LocalTransaction getLocalTransaction() throws ResourceException
-  {
+  public LocalTransaction getLocalTransaction() throws ResourceException {
-        throw new NullPointerException(
-            "Asif:JCAManagedConnection:getLocalTransaction");
-      }
-      catch (NullPointerException npe) {
+        throw new NullPointerException("Asif:JCAManagedConnection:getLocalTransaction");
+      } catch (NullPointerException npe) {
-  public PrintWriter getLogWriter() throws ResourceException
-  {
+  public PrintWriter getLogWriter() throws ResourceException {
-  public ManagedConnectionMetaData getMetaData() throws ResourceException
-  {
+  public ManagedConnectionMetaData getMetaData() throws ResourceException {
-      }
-      catch (NullPointerException npe) {
+      } catch (NullPointerException npe) {
-  public XAResource getXAResource() throws ResourceException
-  {
+  public XAResource getXAResource() throws ResourceException {
-  public void removeConnectionEventListener(ConnectionEventListener arg0)
-  {
+  public void removeConnectionEventListener(ConnectionEventListener arg0) {
-  public void setLogWriter(PrintWriter logger) throws ResourceException
-  {
+  public void setLogWriter(PrintWriter logger) throws ResourceException {
-  private void onError(Exception e)
-  {
+  private void onError(Exception e) {
-          ConnectionEvent ce = new ConnectionEvent(this,
-              ConnectionEvent.CONNECTION_ERROR_OCCURRED, e);
+          ConnectionEvent ce =
+              new ConnectionEvent(this, ConnectionEvent.CONNECTION_ERROR_OCCURRED, e);
-  public void onClose(GFConnectionImpl conn) throws ResourceException
-  {
+  public void onClose(GFConnectionImpl conn) throws ResourceException {
-      ConnectionEvent ce = new ConnectionEvent(this,
-          ConnectionEvent.CONNECTION_CLOSED);
+      ConnectionEvent ce = new ConnectionEvent(this, ConnectionEvent.CONNECTION_CLOSED);
-      }
-      else {
+      } else {

