Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Used by tests to get notifications about the lifecycle of a 
- * MemoryAllocatorImpl.
+ * Used by tests to get notifications about the lifecycle of a MemoryAllocatorImpl.
-   * Callback is invoked after creating a new MemoryAllocatorImpl. 
+   * Callback is invoked after creating a new MemoryAllocatorImpl.
-   * Create occurs during the first initialization of an 
-   * InternalDistributedSystem within the JVM.
+   * Create occurs during the first initialization of an InternalDistributedSystem within the JVM.
+
-   * Callback is invoked after reopening an existing MemoryAllocatorImpl 
-   * for reuse. 
+   * Callback is invoked after reopening an existing MemoryAllocatorImpl for reuse.
-   * Reuse occurs during any intialization of an 
-   * InternalDistributedSystem after the first one was connected and then
-   * disconnected within the JVM.
+   * Reuse occurs during any intialization of an InternalDistributedSystem after the first one was
+   * connected and then disconnected within the JVM.
+
-   * Close occurs after the InternalDistributedSystem and DistributionManager 
-   * have completely disconnected. 
+   * Close occurs after the InternalDistributedSystem and DistributionManager have completely
+   * disconnected.
-  
-  static  void invokeBeforeClose(MemoryAllocatorImpl allocator) {
+
+  static void invokeBeforeClose(MemoryAllocatorImpl allocator) {
+
+
+
+   * 
+
+   * 
-  static final List<LifecycleListener> lifecycleListeners = new CopyOnWriteArrayList<LifecycleListener>();
-}
+  static final List<LifecycleListener> lifecycleListeners =
+      new CopyOnWriteArrayList<LifecycleListener>();
+}

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66