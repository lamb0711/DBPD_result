Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-public final class BucketSizeMessage extends PartitionMessage
-  {
+public final class BucketSizeMessage extends PartitionMessage {
-  
+
-  
+
-  private BucketSizeMessage(InternalDistributedMember recipient,  int regionId, ReplyProcessor21 processor, int bucketId) {
+  private BucketSizeMessage(InternalDistributedMember recipient, int regionId,
+      ReplyProcessor21 processor, int bucketId) {
-  
+
-  
+
-   * Sends a BucketSize message to determine the number of bytes the bucket consumes 
-   * @param recipient the member that the contains keys/value message is sent to 
-   * @param r  the PartitionedRegion that contains the bucket
+   * Sends a BucketSize message to determine the number of bytes the bucket consumes
+   * 
+   * @param recipient the member that the contains keys/value message is sent to
+   * @param r the PartitionedRegion that contains the bucket
-  public static BucketSizeResponse send(InternalDistributedMember recipient, 
-      PartitionedRegion r, int bucketId) 
-      throws ForceReattemptException {
+  public static BucketSizeResponse send(InternalDistributedMember recipient, PartitionedRegion r,
+      int bucketId) throws ForceReattemptException {
-    BucketSizeMessage m = new BucketSizeMessage(recipient, r.getPRId(), 
-        p, bucketId);
+    BucketSizeMessage m = new BucketSizeMessage(recipient, r.getPRId(), p, bucketId);
-      throw new ForceReattemptException(LocalizedStrings.BucketSizeMessage_FAILED_SENDING_0.toLocalizedString(m));
+      throw new ForceReattemptException(
+          LocalizedStrings.BucketSizeMessage_FAILED_SENDING_0.toLocalizedString(m));
-  protected boolean operateOnPartitionedRegion(DistributionManager dm, 
-      PartitionedRegion r, long startTime) throws CacheException, ForceReattemptException {
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion r,
+      long startTime) throws CacheException, ForceReattemptException {
-    }
-    else {
+    } else {
-      throw new ForceReattemptException(LocalizedStrings.BucketSizeMessage_NO_DATASTORE_IN_0.toLocalizedString(dm.getDistributionManagerId()));
+      throw new ForceReattemptException(LocalizedStrings.BucketSizeMessage_NO_DATASTORE_IN_0
+          .toLocalizedString(dm.getDistributionManagerId()));
-    
-    r.getPrStats().endPartitionMessagesProcessing(startTime); 
+
+    r.getPrStats().endPartitionMessagesProcessing(startTime);
-    
+
-  
+
-  protected void appendFields(StringBuffer buff)
-  {
+  protected void appendFields(StringBuffer buff) {
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-  
+
-    
+
-  
+
-     * Empty constructor to conform to DataSerializable interface 
+     * Empty constructor to conform to DataSerializable interface
-    public BucketSizeReplyMessage() {
-    }
-  
-    private BucketSizeReplyMessage(int processorId, long size)
-    {
+    public BucketSizeReplyMessage() {}
+
+    private BucketSizeReplyMessage(int processorId, long size) {
-    
+
-    public static void send(InternalDistributedMember recipient, int processorId, DM dm, long size) 
-    {
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm,
+        long size) {
-      
+
-     * Processes this message.  This method is invoked by the receiver
-     * of the message.
+     * Processes this message. This method is invoked by the receiver of the message.
+     * 
-        logger.trace(LogMarker.DM, "PRDistributedBucketSizeReplyMessage process invoking reply processor with processorId: {}", this.processorId);
+        logger.trace(LogMarker.DM,
+            "PRDistributedBucketSizeReplyMessage process invoking reply processor with processorId: {}",
+            this.processorId);
-  
+
-  
+
-  
+
-      dm.getStats().incReplyMessageTime(DistributionStats.getStatTime()-startTime);
+      dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);
-    
-  public int getDSFID() {
-    return PR_BUCKET_SIZE_REPLY_MESSAGE;
-  }
-  @Override
-    public void fromData(DataInput in)
-      throws IOException, ClassNotFoundException {
+    public int getDSFID() {
+      return PR_BUCKET_SIZE_REPLY_MESSAGE;
+    }
+
+    @Override
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  
-  @Override
+
+    @Override
-  
-  @Override
+
+    @Override
-      sb.append("PRDistributedBucketSizeReplyMessage ")
-      .append("processorid=").append(this.processorId)
-      .append(" reply to sender ").append(this.getSender())
-      .append(" returning numEntries=").append(getSize());
+      sb.append("PRDistributedBucketSizeReplyMessage ").append("processorid=")
+          .append(this.processorId).append(" reply to sender ").append(this.getSender())
+          .append(" returning numEntries=").append(getSize());
-    public long getSize()
-    {
+    public long getSize() {
-   * A processor to capture the value returned by {@link 
-   * org.apache.geode.internal.cache.partitioned.GetMessage.GetReplyMessage}
+   * A processor to capture the value returned by
+   * {@link org.apache.geode.internal.cache.partitioned.GetMessage.GetReplyMessage}
+   * 
-  public static class BucketSizeResponse extends ReplyProcessor21  {
+  public static class BucketSizeResponse extends ReplyProcessor21 {
-    
+
-    public void process(DistributionMessage msg)
-    {
+    public void process(DistributionMessage msg) {
-    
+
-      }
-      catch (ReplyException e) {
+      } catch (ReplyException e) {
-          logger.debug("BucketSizeResponse got remote cancellation; forcing reattempt. {}", t.getMessage(), t);
-          throw new ForceReattemptException(LocalizedStrings.BucketSizeMessage_BUCKETSIZERESPONSE_GOT_REMOTE_CACHECLOSEDEXCEPTION_FORCING_REATTEMPT.toLocalizedString(), t);
+          logger.debug("BucketSizeResponse got remote cancellation; forcing reattempt. {}",
+              t.getMessage(), t);
+          throw new ForceReattemptException(
+              LocalizedStrings.BucketSizeMessage_BUCKETSIZERESPONSE_GOT_REMOTE_CACHECLOSEDEXCEPTION_FORCING_REATTEMPT
+                  .toLocalizedString(),
+              t);
-          logger.debug("BucketSizeResponse got remote Region destroyed; forcing reattempt. {}", t.getMessage(), t);
-          throw new ForceReattemptException(LocalizedStrings.BucketSizeMessage_BUCKETSIZERESPONSE_GOT_REMOTE_REGION_DESTROYED_FORCING_REATTEMPT.toLocalizedString(), t);
+          logger.debug("BucketSizeResponse got remote Region destroyed; forcing reattempt. {}",
+              t.getMessage(), t);
+          throw new ForceReattemptException(
+              LocalizedStrings.BucketSizeMessage_BUCKETSIZERESPONSE_GOT_REMOTE_REGION_DESTROYED_FORCING_REATTEMPT
+                  .toLocalizedString(),
+              t);

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66