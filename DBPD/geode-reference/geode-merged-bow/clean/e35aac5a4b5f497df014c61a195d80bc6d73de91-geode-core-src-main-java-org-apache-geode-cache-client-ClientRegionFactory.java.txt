Merge branch 'release/1.5.0'

-  public ClientRegionFactory<K, V> addCacheListener(CacheListener<K, V> aListener);
+  ClientRegionFactory<K, V> addCacheListener(CacheListener<K, V> aListener);
-  public ClientRegionFactory<K, V> initCacheListeners(CacheListener<K, V>[] newListeners);
+  ClientRegionFactory<K, V> initCacheListeners(CacheListener<K, V>[] newListeners);
-  public ClientRegionFactory<K, V> setEvictionAttributes(EvictionAttributes evictionAttributes);
+  ClientRegionFactory<K, V> setEvictionAttributes(EvictionAttributes evictionAttributes);
-  public ClientRegionFactory<K, V> setEntryIdleTimeout(ExpirationAttributes idleTimeout);
+  ClientRegionFactory<K, V> setEntryIdleTimeout(ExpirationAttributes idleTimeout);
-  public ClientRegionFactory<K, V> setCustomEntryIdleTimeout(CustomExpiry<K, V> custom);
+  ClientRegionFactory<K, V> setCustomEntryIdleTimeout(CustomExpiry<K, V> custom);
-  public ClientRegionFactory<K, V> setEntryTimeToLive(ExpirationAttributes timeToLive);
+  ClientRegionFactory<K, V> setEntryTimeToLive(ExpirationAttributes timeToLive);
-  public ClientRegionFactory<K, V> setCustomEntryTimeToLive(CustomExpiry<K, V> custom);
+  ClientRegionFactory<K, V> setCustomEntryTimeToLive(CustomExpiry<K, V> custom);
-  public ClientRegionFactory<K, V> setRegionIdleTimeout(ExpirationAttributes idleTimeout);
+  ClientRegionFactory<K, V> setRegionIdleTimeout(ExpirationAttributes idleTimeout);
-  public ClientRegionFactory<K, V> setRegionTimeToLive(ExpirationAttributes timeToLive);
+  ClientRegionFactory<K, V> setRegionTimeToLive(ExpirationAttributes timeToLive);
-  public ClientRegionFactory<K, V> setKeyConstraint(Class<K> keyConstraint);
+  ClientRegionFactory<K, V> setKeyConstraint(Class<K> keyConstraint);
-  public ClientRegionFactory<K, V> setValueConstraint(Class<V> valueConstraint);
+  ClientRegionFactory<K, V> setValueConstraint(Class<V> valueConstraint);
-  public ClientRegionFactory<K, V> setInitialCapacity(int initialCapacity);
+  ClientRegionFactory<K, V> setInitialCapacity(int initialCapacity);
-  public ClientRegionFactory<K, V> setLoadFactor(float loadFactor);
+  ClientRegionFactory<K, V> setLoadFactor(float loadFactor);
-  public ClientRegionFactory<K, V> setConcurrencyLevel(int concurrencyLevel);
+  ClientRegionFactory<K, V> setConcurrencyLevel(int concurrencyLevel);
-  public void setConcurrencyChecksEnabled(boolean concurrencyChecksEnabled);
+  void setConcurrencyChecksEnabled(boolean concurrencyChecksEnabled);
-  public ClientRegionFactory<K, V> setDiskStoreName(String name);
+  ClientRegionFactory<K, V> setDiskStoreName(String name);
-  public ClientRegionFactory<K, V> setDiskSynchronous(boolean isSynchronous);
+  ClientRegionFactory<K, V> setDiskSynchronous(boolean isSynchronous);
-  public ClientRegionFactory<K, V> setStatisticsEnabled(boolean statisticsEnabled);
+  ClientRegionFactory<K, V> setStatisticsEnabled(boolean statisticsEnabled);
-  public ClientRegionFactory<K, V> setCloningEnabled(boolean cloningEnable);
+  ClientRegionFactory<K, V> setCloningEnabled(boolean cloningEnable);
-  public ClientRegionFactory<K, V> setPoolName(String poolName);
+  ClientRegionFactory<K, V> setPoolName(String poolName);
-  public ClientRegionFactory<K, V> setCompressor(Compressor compressor);
+  ClientRegionFactory<K, V> setCompressor(Compressor compressor);
-  public Region<K, V> create(String name) throws RegionExistsException;
+  Region<K, V> create(String name) throws RegionExistsException;
-  public Region<K, V> createSubregion(Region<?, ?> parent, String name)
-      throws RegionExistsException;
+  Region<K, V> createSubregion(Region<?, ?> parent, String name) throws RegionExistsException;

DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83