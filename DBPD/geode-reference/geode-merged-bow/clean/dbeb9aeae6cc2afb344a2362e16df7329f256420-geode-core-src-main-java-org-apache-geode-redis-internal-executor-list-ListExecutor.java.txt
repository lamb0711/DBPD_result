Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
-  protected static enum ListDirection {LEFT, RIGHT};
+
+  protected static enum ListDirection {
+    LEFT, RIGHT
+  };
-  protected Region<Integer, ByteArrayWrapper> getOrCreateRegion(ExecutionHandlerContext context, ByteArrayWrapper key, RedisDataType type) {
-    return (Region<Integer, ByteArrayWrapper>) context.getRegionProvider().getOrCreateRegion(key, type, context);
+  protected Region<Integer, ByteArrayWrapper> getOrCreateRegion(ExecutionHandlerContext context,
+      ByteArrayWrapper key, RedisDataType type) {
+    return (Region<Integer, ByteArrayWrapper>) context.getRegionProvider().getOrCreateRegion(key,
+        type, context);
-  
+
-  protected Region<Integer, ByteArrayWrapper> getRegion(ExecutionHandlerContext context, ByteArrayWrapper key) {
+  protected Region<Integer, ByteArrayWrapper> getRegion(ExecutionHandlerContext context,
+      ByteArrayWrapper key) {
-   * Helper method to be used by the push commands to push elements onto a list.
-   * Because our current setup requires non trivial code to push elements in
-   * to a Region, I wanted all the push code to reside in one place. 
+   * Helper method to be used by the push commands to push elements onto a list. Because our current
+   * setup requires non trivial code to push elements in to a Region, I wanted all the push code to
+   * reside in one place.
-   * @param commandElems Pieces of the command, this is where the elements that need to be
-   * pushed live
+   * @param commandElems Pieces of the command, this is where the elements that need to be pushed
+   *        live
-  protected void pushElements(ByteArrayWrapper key, List<byte[]> commandElems, int startIndex, int endIndex,
-      Region keyRegion, ListDirection pushType, ExecutionHandlerContext context) {
+  protected void pushElements(ByteArrayWrapper key, List<byte[]> commandElems, int startIndex,
+      int endIndex, Region keyRegion, ListDirection pushType, ExecutionHandlerContext context) {
-      index += pushType == ListDirection.LEFT ? -1 : 1; // Subtract index if left push, add if right push
+      index += pushType == ListDirection.LEFT ? -1 : 1; // Subtract index if left push, add if right
+                                                        // push
-       * First, use the start index to attempt to insert the
-       * value into the Region
+       * First, use the start index to attempt to insert the value into the Region
-          index += pushType == ListDirection.LEFT ? -1 : 1; // Subtract index if left push, add if right push
+          index += pushType == ListDirection.LEFT ? -1 : 1; // Subtract index if left push, add if
+                                                            // right push
-       * Next, update the index in the meta data region. Keep trying
-       * to replace the existing index unless the index is further out
-       * than previously inserted, that's ok. Example below:
+       * Next, update the index in the meta data region. Keep trying to replace the existing index
+       * unless the index is further out than previously inserted, that's ok. Example below:
-       * ********************** LPUSH/LPUSH ***************************
-       *   Push occurring at the same time, further index update first
-       *   |    This push
-       *   |      |
-       *   |      |
-       *   V      V
-       * [-4]   [-3]    [-2]    [-1]    [0]     [1]     [2]
+       * ********************** LPUSH/LPUSH *************************** Push occurring at the same
+       * time, further index update first | This push | | | | V V [-4] [-3] [-2] [-1] [0] [1] [2]
-       * In this case, -4 would already exist in the meta data region, therefore
-       * we do not try to put -3 in the meta data region because a further
-       * index is already there.
+       * In this case, -4 would already exist in the meta data region, therefore we do not try to
+       * put -3 in the meta data region because a further index is already there.
-       * ********************** LPUSH/LPOP *****************************
-       *   This push
-       *   |    Simultaneous LPOP, meta data head index already updated to -2
-       *   |     |
-       *   |     |
-       *   V     V
-       * [-4]   [X]    [-2]    [-1]    [0]     [1]     [2]
+       * ********************** LPUSH/LPOP ***************************** This push | Simultaneous
+       * LPOP, meta data head index already updated to -2 | | | | V V [-4] [X] [-2] [-1] [0] [1] [2]
-       * In this case, -2 would already exist in the meta data region, but
-       * we need to make sure the element at -4 is visible to all other threads
-       * so we will attempt to change the index to -4 as long as it is greater
-       * than -4
+       * In this case, -2 would already exist in the meta data region, but we need to make sure the
+       * element at -4 is visible to all other threads so we will attempt to change the index to -4
+       * as long as it is greater than -4
-        if ((pushType == ListDirection.RIGHT && existingIndex < index) || (pushType == ListDirection.LEFT && existingIndex > index))
+        if ((pushType == ListDirection.RIGHT && existingIndex < index)
+            || (pushType == ListDirection.LEFT && existingIndex > index))

UPD66 UPD66 UPD66 UPD66 UPD66