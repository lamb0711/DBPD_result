Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-public class PrimaryKeyIndexCreationHelper extends IndexCreationHelper  {
+public class PrimaryKeyIndexCreationHelper extends IndexCreationHelper {
-  
+
-  public PrimaryKeyIndexCreationHelper(String fromClause,
-      String indexedExpression, String projectionAttributes, Cache cache,
-      ExecutionContext  externalContext, IndexManager imgr) throws IndexInvalidException {
+  public PrimaryKeyIndexCreationHelper(String fromClause, String indexedExpression,
+      String projectionAttributes, Cache cache, ExecutionContext externalContext, IndexManager imgr)
+      throws IndexInvalidException {
-    if( externalContext == null) {
+    if (externalContext == null) {
-    }else {
+    } else {
-    prepareFromClause( imgr);
+    prepareFromClause(imgr);
-  private void prepareFromClause(IndexManager imgr)
-      throws IndexInvalidException {
+  private void prepareFromClause(IndexManager imgr) throws IndexInvalidException {
-    if (list.size() > 1) { throw new IndexInvalidException(LocalizedStrings.PrimaryKeyIndexCreationHelper_THE_FROMCLAUSE_FOR_A_PRIMARY_KEY_INDEX_SHOULD_ONLY_HAVE_ONE_ITERATOR_AND_THE_COLLECTION_MUST_BE_A_REGION_PATH_ONLY.toLocalizedString()); }
+    if (list.size() > 1) {
+      throw new IndexInvalidException(
+          LocalizedStrings.PrimaryKeyIndexCreationHelper_THE_FROMCLAUSE_FOR_A_PRIMARY_KEY_INDEX_SHOULD_ONLY_HAVE_ONE_ITERATOR_AND_THE_COLLECTION_MUST_BE_A_REGION_PATH_ONLY
+              .toLocalizedString());
+    }
-      if (iterDef.getCollectionExpr().getType() != OQLLexerTokenTypes.RegionPath) { throw new IndexInvalidException(LocalizedStrings.PrimaryKeyIndexCreationHelper_THE_FROMCLAUSE_FOR_A_PRIMARY_KEY_INDEX_SHOULD_BE_A_REGION_PATH_ONLY.toLocalizedString()); }
+      if (iterDef.getCollectionExpr().getType() != OQLLexerTokenTypes.RegionPath) {
+        throw new IndexInvalidException(
+            LocalizedStrings.PrimaryKeyIndexCreationHelper_THE_FROMCLAUSE_FOR_A_PRIMARY_KEY_INDEX_SHOULD_BE_A_REGION_PATH_ONLY
+                .toLocalizedString());
+      }
-      //    Asif: Bind the Index_Internal_ID to the RuntimeIterator      
+      // Asif: Bind the Index_Internal_ID to the RuntimeIterator
-    }
-    catch (IndexInvalidException e) {
-      throw e; //propagate
-    }
-    catch (Exception e) {
+    } catch (IndexInvalidException e) {
+      throw e; // propagate
+    } catch (Exception e) {
-  private void prepareIndexExpression(String indexedExpression)
-      throws IndexInvalidException {
-    List indexedExprs = this.compiler
-        .compileProjectionAttributes(indexedExpression);
-    if (indexedExprs == null || indexedExprs.size() != 1) { throw new IndexInvalidException(LocalizedStrings.PrimaryKeyIndexCreationHelper_INVALID_INDEXED_EXPRESSOION_0.toLocalizedString(indexedExpression)); }
+  private void prepareIndexExpression(String indexedExpression) throws IndexInvalidException {
+    List indexedExprs = this.compiler.compileProjectionAttributes(indexedExpression);
+    if (indexedExprs == null || indexedExprs.size() != 1) {
+      throw new IndexInvalidException(
+          LocalizedStrings.PrimaryKeyIndexCreationHelper_INVALID_INDEXED_EXPRESSOION_0
+              .toLocalizedString(indexedExpression));
+    }
-        throw new IndexInvalidException(LocalizedStrings.PrimaryKeyIndexCreationHelper_INVALID_INDEXED_EXPRESSOION_0.toLocalizedString(indexedExpression));
+      throw new IndexInvalidException(
+          LocalizedStrings.PrimaryKeyIndexCreationHelper_INVALID_INDEXED_EXPRESSOION_0
+              .toLocalizedString(indexedExpression));
-    }
-    catch (Exception e) {
-      //e.printStackTrace();
-      throw new IndexInvalidException(LocalizedStrings.PrimaryKeyIndexCreationHelper_INVALID_INDEXED_EXPRESSOION_0_N_1.toLocalizedString(new Object[] {indexedExpression, e.getMessage()}));
+    } catch (Exception e) {
+      // e.printStackTrace();
+      throw new IndexInvalidException(
+          LocalizedStrings.PrimaryKeyIndexCreationHelper_INVALID_INDEXED_EXPRESSOION_0_N_1
+              .toLocalizedString(new Object[] {indexedExpression, e.getMessage()}));
-    if (projectionAttributes != null && !projectionAttributes.equals("*")) { throw new IndexInvalidException(LocalizedStrings.PrimaryKeyIndexCreationHelper_INVALID_PROJECTION_ATTRIBUTES_0.toLocalizedString(projectionAttributes)); }
+    if (projectionAttributes != null && !projectionAttributes.equals("*")) {
+      throw new IndexInvalidException(
+          LocalizedStrings.PrimaryKeyIndexCreationHelper_INVALID_PROJECTION_ATTRIBUTES_0
+              .toLocalizedString(projectionAttributes));
+    }
-  
+

