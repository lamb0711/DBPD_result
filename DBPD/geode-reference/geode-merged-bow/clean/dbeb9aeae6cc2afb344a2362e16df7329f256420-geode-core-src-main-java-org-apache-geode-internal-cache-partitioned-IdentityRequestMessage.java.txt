Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ * 
-public final class IdentityRequestMessage extends DistributionMessage implements MessageWithReply
-{
+public final class IdentityRequestMessage extends DistributionMessage implements MessageWithReply {
-  
+
-  
+
-  
+
-  
+
+   * 
-  /** 
+  /**
-  @Override  
-  protected void process(DistributionManager dm)
-  {
+  @Override
+  protected void process(DistributionManager dm) {
-      
-      IdentityReplyMessage.send(getSender(), getProcessorId(), dm);        
-    }
-    catch (VirtualMachineError err) {
+
+      IdentityReplyMessage.send(getSender(), getProcessorId(), dm);
+    } catch (VirtualMachineError err) {
-      // If this ever returns, rethrow the error.  We're poisoned
+      // If this ever returns, rethrow the error. We're poisoned
-    }
-    catch (Throwable t) {
+    } catch (Throwable t) {
-      // catch VirtualMachineError (see above).  However, there is
+      // catch VirtualMachineError (see above). However, there is
-  @Override  
-  public int getProcessorId()
-  {
+  @Override
+  public int getProcessorId() {
-  
-  
-  @Override  
-  public int getProcessorType()
-  {
+
+
+  @Override
+  public int getProcessorType() {
-   * Sends a <code>IdentityRequest</code> to each <code>PartitionedRegion</code> {@link org.apache.geode.internal.cache.Node}.  The
-   * <code>IdentityResponse</code> is used to fetch the highest current identity value. 
+   * Sends a <code>IdentityRequest</code> to each <code>PartitionedRegion</code>
+   * {@link org.apache.geode.internal.cache.Node}. The <code>IdentityResponse</code> is used to
+   * fetch the highest current identity value.
+   * 
-  public static IdentityResponse send(Set recipients, InternalDistributedSystem is) 
-  {
+  public static IdentityResponse send(Set recipients, InternalDistributedSystem is) {
-    
+
-  
-  
+
+
-  @Override  
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  @Override
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  @Override  
-  public void toData(DataOutput out) throws IOException
-  {
+  @Override
+  public void toData(DataOutput out) throws IOException {
-  @Override  
-  public String toString()
-  {
-    return new StringBuffer()
-      .append(getClass().getName())
-      .append("(sender=")
-      .append(getSender())
-      .append("; processorId=")
-      .append(this.processorId)
-      .append(")")
-      .toString();
+  @Override
+  public String toString() {
+    return new StringBuffer().append(getClass().getName()).append("(sender=").append(getSender())
+        .append("; processorId=").append(this.processorId).append(")").toString();
-   * The message that contains the <code>Integer</code> identity response to the {@link IdentityRequestMessage}
-   *  
+   * The message that contains the <code>Integer</code> identity response to the
+   * {@link IdentityRequestMessage}
+   * 
-  
+
-    
+
-     * Empty constructor to conform to DataSerializable interface 
+     * Empty constructor to conform to DataSerializable interface
-    public IdentityReplyMessage() {
-    }
-  
-    private IdentityReplyMessage(int processorId)
-    {
+    public IdentityReplyMessage() {}
+
+    private IdentityReplyMessage(int processorId) {
-    
-    public static void send(InternalDistributedMember recipient, int processorId, DM dm) 
-    {
+
+    public static void send(InternalDistributedMember recipient, int processorId, DM dm) {
-    @Override  
+    @Override
-        logger.trace(LogMarker.DM, "{} process invoking reply processor with processorId:{}", getClass().getName(), this.processorId);
+        logger.trace(LogMarker.DM, "{} process invoking reply processor with processorId:{}",
+            getClass().getName(), this.processorId);
-      
+
-      
+
-      
+
-      dm.getStats().incReplyMessageTime(DistributionStats.getStatTime()-startTime);
+      dm.getStats().incReplyMessageTime(DistributionStats.getStatTime() - startTime);
-    
-    @Override  
+
+    @Override
-  public int getDSFID() {
-    return PR_IDENTITY_REPLY_MESSAGE;
-  }
+    public int getDSFID() {
+      return PR_IDENTITY_REPLY_MESSAGE;
+    }
-  @Override  
-    public void fromData(DataInput in)
-      throws IOException, ClassNotFoundException {
+    @Override
+    public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    
-  @Override  
-    public String toString()
-    {
-      return new StringBuffer()
-        .append(getClass().getName())
-        .append("(sender=")
-        .append(getSender())
-        .append("; processorId=")
-        .append(this.processorId)
-        .append("; PRId=").append(getId())
-        .append(")")
-        .toString();
+
+    @Override
+    public String toString() {
+      return new StringBuffer().append(getClass().getName()).append("(sender=").append(getSender())
+          .append("; processorId=").append(this.processorId).append("; PRId=").append(getId())
+          .append(")").toString();
-     * Fetch the current Identity number  
-     * @return the identity Integer from the sender or null if the sender did not have the Integer initialized 
+     * Fetch the current Identity number
+     * 
+     * @return the identity Integer from the sender or null if the sender did not have the Integer
+     *         initialized
-   * The response to a {@link IdentityRequestMessage} use {@link #waitForId()} to 
-   * capture the identity
+   * The response to a {@link IdentityRequestMessage} use {@link #waitForId()} to capture the
+   * identity
+   * 
-  public static class IdentityResponse extends ReplyProcessor21  {
+  public static class IdentityResponse extends ReplyProcessor21 {
-    
+
-      int localIdent = IdentityRequestMessage.getLatestId(); 
+      int localIdent = IdentityRequestMessage.getLatestId();
-    @Override  
-    public void process(DistributionMessage msg)
-    {
+    @Override
+    public void process(DistributionMessage msg) {
-          synchronized(this) {
-            if (remoteId !=null) {
+          synchronized (this) {
+            if (remoteId != null) {
-            logger.trace(LogMarker.DM, "{} return value is {}", getClass().getName(), this.returnValue);
+            logger.trace(LogMarker.DM, "{} return value is {}", getClass().getName(),
+                this.returnValue);
-     * Fetch the next <code>PartitionedRegion</code> identity, used to uniquely identify (globally) each instance of a 
-     * <code>PartitionedRegion</code>  
-     * @return the next highest Integer for the <code>PartitionedRegion</code> or null if this is the first identity
+     * Fetch the next <code>PartitionedRegion</code> identity, used to uniquely identify (globally)
+     * each instance of a <code>PartitionedRegion</code>
+     * 
+     * @return the next highest Integer for the <code>PartitionedRegion</code> or null if this is
+     *         the first identity
+      } catch (ReplyException e) {
+        logger.debug("{} waitBucketSizes ignoring exception {}", getClass().getName(),
+            e.getMessage(), e);
-      catch (ReplyException e) {
-        logger.debug("{} waitBucketSizes ignoring exception {}", getClass().getName(), e.getMessage(), e);
-      }
-      synchronized(this) {
+      synchronized (this) {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 INS66