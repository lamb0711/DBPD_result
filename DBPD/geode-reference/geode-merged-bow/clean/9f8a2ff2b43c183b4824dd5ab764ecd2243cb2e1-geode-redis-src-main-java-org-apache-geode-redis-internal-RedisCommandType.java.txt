GEODE-7800: Add Redis PSUBSCRIBE and PUNSUBSCRIBE commands (#4705)

* GEODE-7800: Add Redis PSUBSCRIBE and PUNSUBSCRIBE commands

Similar to `SUBSCRIBE` and `UNSUBSCRIBE`, `PSUBSCRIBE` allows a client
to subscribe to a pattern. For example: `PSUBSCRIBE sal*s`

The subscription pattern is in the form of a glob supporting `*`, `?`
and ranges. https://redis.io/commands/psubscribe

Pattern subscriptions must be unsubscribed verbatim. i.e., the above
subscription would not be unsubscribed using the pattern `s*`, but must
be unsubscribed using the complete subscribed pattern, namely `sal*s`.

When clients subscribe to overlapping patterns (or channels) they will
receive a message for every matched subscription. Matches for a single
client are not conflated.

    Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
    Co-authored-by: John Hutchison <jhutchison@pivotal.io>
    Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

* Fixes class names in sanctioned-geode-redis-serializables.txt

* Fixes flaky test

* Adds license to PublishResult

* Clean code using spA and make test reliable

stop propagating exceptions that get thrown when disconnecting Jedis

* Cleans up subscribers and publishers after each test or after the whole class as needed

* re-add ignoreExceptions to waitfor test helper method

Co-authored-by: Jens Deppe <jdeppe@pivotal.io>
Co-authored-by: Venkateswara Prasath Durairaj <xtreme-prasath@users.noreply.github.com>

+import org.apache.geode.redis.internal.executor.pubsub.PsubscribeExecutor;
+import org.apache.geode.redis.internal.executor.pubsub.PunsubscribeExecutor;
+
+  /**
+   * PUBLISH channel message
+   */
+
+  /**
+   * UNSUBSCRIBE channel...
+   */
+  /**
+   * PSUBSCRIBE channel-pattern...
+   * <p>
+   * subscribe to channel
+   */
+  PSUBSCRIBE {
+    private Executor executor;
+
+    @Override
+    public Executor getExecutor() {
+      if (executor == null) {
+        executor = new PsubscribeExecutor();
+      }
+      return executor;
+    }
+
+    private final RedisDataType dataType = RedisDataType.REDIS_PUBSUB;
+
+    @Override
+    public RedisDataType getDataType() {
+      return this.dataType;
+    }
+  },
+
+  /**
+   * PUNSUBSCRIBE channel...
+   */
+  PUNSUBSCRIBE {
+    private Executor executor;
+
+    @Override
+    public Executor getExecutor() {
+      if (executor == null) {
+        executor = new PunsubscribeExecutor();
+      }
+      return executor;
+    }
+
+    private final RedisDataType dataType = RedisDataType.REDIS_PUBSUB;
+
+    @Override
+    public RedisDataType getDataType() {
+      return this.dataType;
+    }
+  },
+

INS26 INS26 INS40 INS40 INS72 INS72 INS29 INS29 INS29 INS42 INS1 INS29 INS42 INS1 INS65 INS65 INS65 INS23 INS31 INS23 INS31 INS65 INS23 INS31 INS23 INS31 INS66 INS66 INS66 INS66 INS66 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS66 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS83 INS83 INS43 INS59 INS78 INS83 INS43 INS42 INS8 INS42 INS42 INS42 INS42 INS25 INS41 INS42 INS42 INS40 INS42 INS42 INS41 INS42 INS42 INS42 INS42 INS25 INS41 INS42 INS42 INS40 INS42 INS42 INS41 INS27 INS8 INS42 INS22 INS27 INS8 INS42 INS22 INS42 INS33 INS21 INS52 INS42 INS42 INS33 INS21 INS52 INS42 INS7 INS7 INS42 INS14 INS42 INS14 INS43 INS43 INS42 INS42