Revert "GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)" (#4780)

This reverts commit 2f6bf013368df5a4b5efe68162a4953f9a88bbf2.
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Set;
-import org.apache.geode.cache.TimeoutException;
-import org.apache.geode.redis.internal.AutoCloseableLock;
-import org.apache.geode.redis.internal.CoderException;
-import org.apache.geode.redis.internal.RedisConstants;
-    int popCount = 1;
-    if (commandElems.size() < 2 || commandElems.size() > 3) {
+    if (commandElems.size() < 2) {
-    if (commandElems.size() == 3) {
-      try {
-        popCount = Integer.parseInt(new String(commandElems.get(2)));
-      } catch (NumberFormatException nex) {
-        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ArityDef.SPOP));
-        return;
-      }
-    }
-
-
-    List<ByteArrayWrapper> popped = new ArrayList<>();
-    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
-      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> region = getRegion(context);
-
-      Set<ByteArrayWrapper> set = region.get(key);
-
-      if (set == null || set.isEmpty()) {
-        command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-        return;
-      }
-
-      Random rand = new Random();
-
-      Set<Integer> randomIndexes = new HashSet<>();
-      while (randomIndexes.size() < popCount) {
-        randomIndexes.add(rand.nextInt(set.size()));
-      }
-
-      int counter = 0;
-      for (ByteArrayWrapper entry : set) {
-        if (randomIndexes.contains(counter)) {
-          popped.add(entry);
-        }
-        counter++;
-      }
-
-      set.removeAll(popped);
-
-      // save the updated set
-      region.put(key, set);
-    } catch (InterruptedException e) {
-      Thread.currentThread().interrupt();
-      command.setResponse(
-          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
-      return;
-    } catch (TimeoutException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          "Timeout acquiring lock. Please try again."));
+    @SuppressWarnings("unchecked")
+    Region<ByteArrayWrapper, Boolean> keyRegion =
+        (Region<ByteArrayWrapper, Boolean>) context.getRegionProvider().getRegion(key);
+    if (keyRegion == null || keyRegion.isEmpty()) {
+      command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
-    try {
-      if (popCount == 1) {
-        command
-            .setResponse(Coder.getBulkStringResponse(context.getByteBufAllocator(), popped.get(0)));
-      } else {
-        command.setResponse(Coder.getArrayResponse(context.getByteBufAllocator(), popped));
-      }
-    } catch (CoderException e) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
-          RedisConstants.SERVER_ERROR_MESSAGE));
+    Random rand = new Random();
+
+    ByteArrayWrapper[] entries = keyRegion.keySet().toArray(new ByteArrayWrapper[keyRegion.size()]);
+
+    ByteArrayWrapper pop = entries[rand.nextInt(entries.length)];
+
+    keyRegion.remove(pop);
+    if (keyRegion.isEmpty()) {
+      context.getRegionProvider().removeKey(key);
+
+    respondBulkStrings(command, context, pop);

INS60 MOV25 MOV60 INS60 INS60 MOV21 INS25 MOV21 MOV27 INS79 INS74 INS59 INS5 INS59 MOV43 INS59 INS32 MOV8 INS42 INS45 INS43 MOV43 INS43 INS42 INS11 MOV43 INS85 INS42 INS32 INS42 INS2 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS74 INS32 UPD42 UPD42 INS32 INS42 INS3 INS42 INS32 INS32 MOV43 MOV43 UPD43 MOV43 INS32 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS5 INS32 MOV42 MOV42 INS40 MOV32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS85 UPD42 MOV42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL34 DEL32 DEL14 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL43 DEL74 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL32 DEL42 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL61 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL37 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL32 DEL32 DEL21 DEL41 DEL8 DEL12 DEL54 DEL42 DEL34 DEL27 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL40 DEL32 DEL32 DEL21 DEL8 DEL12 DEL54