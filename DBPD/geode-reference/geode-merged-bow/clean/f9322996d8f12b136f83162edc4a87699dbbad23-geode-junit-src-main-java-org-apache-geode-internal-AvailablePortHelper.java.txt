GEODE-5674: Stop using random values for test ports (#2958)

It seems our test framework will fairly frequently have test failing due to
multiple users trying to bind the same port number.  This happens when the
different users happen to randomly generate the same port.  To keep this from
happening, this change will simply hand out the available ports consecutively
as the test runs.  For dunit tests, each child vm will be given a portion of
the overall range for their use.
-import static org.apache.geode.internal.AvailablePort.SOCKET;
-import static org.apache.geode.internal.AvailablePort.isPortKeepable;
-import java.net.InetAddress;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Set;
+import java.util.Random;
+import java.util.concurrent.atomic.AtomicInteger;
+  private final AtomicInteger currentMembershipPort;
+  private final AtomicInteger currentAvailablePort;
+
+  // Singleton object is only used to track the current ports
+  private static AvailablePortHelper singleton = new AvailablePortHelper();
+
+  AvailablePortHelper() {
+    Random rand;
+    boolean fast = Boolean.getBoolean("AvailablePort.fastRandom");
+    if (fast)
+      rand = new Random();
+    else
+      rand = new java.security.SecureRandom();
+    currentMembershipPort = new AtomicInteger(
+        rand.nextInt(DEFAULT_MEMBERSHIP_PORT_RANGE[1] - DEFAULT_MEMBERSHIP_PORT_RANGE[0])
+            + DEFAULT_MEMBERSHIP_PORT_RANGE[0]);
+    currentAvailablePort =
+        new AtomicInteger(rand.nextInt(AVAILABLE_PORTS_UPPER_BOUND - AVAILABLE_PORTS_LOWER_BOUND)
+            + AVAILABLE_PORTS_LOWER_BOUND);
+  }
-      result.add(AvailablePort.getRandomAvailablePortKeeper(AvailablePort.SOCKET,
-          getAddress(AvailablePort.SOCKET), useMembershipPortRange));
+      result.add(getUniquePortKeeper(useMembershipPortRange, AvailablePort.SOCKET));
-    List<Keeper> list = getRandomAvailableTCPPortRangeKeepers(count, useMembershipPortRange);
+    List<Keeper> list =
+        getUniquePortRangeKeepers(useMembershipPortRange, AvailablePort.SOCKET,
+            count);
-    List<Keeper> result = new ArrayList<>();
-
-    InetAddress addr = getAddress(AvailablePort.SOCKET);
-
-    int lowerBound =
-        useMembershipPortRange ? DEFAULT_MEMBERSHIP_PORT_RANGE[0] : AVAILABLE_PORTS_LOWER_BOUND;
-
-    int upperBound =
-        useMembershipPortRange ? DEFAULT_MEMBERSHIP_PORT_RANGE[1] : AVAILABLE_PORTS_UPPER_BOUND;
-
-    for (int i = lowerBound; i <= upperBound; i++) {
-      for (int j = 0; j < count && ((i + j) <= upperBound); j++) {
-        int port = i + j;
-        Keeper keeper = isPortKeepable(port, SOCKET, addr);
-        if (keeper == null) {
-          releaseKeepers(result);
-          result.clear();
-          break;
-        }
-        result.add(keeper);
-        if (result.size() == count) {
-          return result;
-        }
-      }
-    }
-
-    return result;
+    return getUniquePortRangeKeepers(useMembershipPortRange, AvailablePort.SOCKET,
+        count);
-    Set set = new HashSet();
-    while (set.size() < count) {
-      int port = AvailablePort.getRandomAvailablePortWithMod(AvailablePort.SOCKET, site);
-      set.add(new Integer(port));
-    }
-    int[] ports = new int[set.size()];
+    int[] ports = new int[count];
-    for (Iterator iter = set.iterator(); iter.hasNext();) {
-      ports[i] = ((Integer) iter.next()).intValue();
-      i++;
+    while (i < count) {
+      int port = getUniquePort(false, AvailablePort.SOCKET);
+      // This logic is from AvailablePort.getRandomAvailablePortWithMod which this method used to
+      // call. It seems like the check should be (port % FOO == site) for some FOO, but given how
+      // widely this is used, it's not at all clear that no one's depending on the current behavior.
+      while (port % site != 0) {
+        port = getUniquePort(false, AvailablePort.SOCKET);
+      }
+      ports[i] = port;
+      ++i;
-    int site = 1;
-    String hostName = System.getProperty("hostName");
-    if (hostName != null && hostName.startsWith("host")) {
-      if (hostName.length() > 4) {
-        site = Integer.parseInt(hostName.substring(4));
-      }
-    }
-    int port = AvailablePort.getRandomAvailablePortWithMod(AvailablePort.SOCKET, site);
-    return port;
+    return getRandomAvailableTCPPortsForDUnitSite(1)[0];
-    Set set = new HashSet();
-    while (set.size() < count) {
-      int port = AvailablePort.getRandomAvailablePort(AvailablePort.MULTICAST);
-      set.add(new Integer(port));
-    }
-    int[] ports = new int[set.size()];
+    int[] ports = new int[count];
-    for (Iterator iter = set.iterator(); iter.hasNext();) {
-      ports[i] = ((Integer) iter.next()).intValue();
-      i++;
+    while (i < count) {
+      ports[i] = getUniquePort(false, AvailablePort.MULTICAST);
+      ++i;
+  public static void initializeUniquePortRange(int rangeNumber) {
+    if (rangeNumber < 0) {
+      throw new RuntimeException("Range number cannot be negative.");
+    }
+    singleton.currentMembershipPort.set(DEFAULT_MEMBERSHIP_PORT_RANGE[0]);
+    singleton.currentAvailablePort.set(AVAILABLE_PORTS_LOWER_BOUND);
+    if (rangeNumber != 0) {
+      // This code will generate starting points such that range 0 starts at the lowest possible
+      // value, range 1 starts halfway through the total available ports, 2 starts 1/4 of the way
+      // through, then further ranges are 3/4, 1/8, 3/8, 5/8, 7/8, 1/16, etc.
+
+      // This spaces the ranges out as much as possible for low numbers of ranges, while also making
+      // it possible to grow the number of ranges without bound (within some reasonable fraction of
+      // the number of available ports)
+      int membershipRange = DEFAULT_MEMBERSHIP_PORT_RANGE[1] - DEFAULT_MEMBERSHIP_PORT_RANGE[0];
+      int availableRange = AVAILABLE_PORTS_UPPER_BOUND - AVAILABLE_PORTS_LOWER_BOUND;
+      int numChunks = Integer.highestOneBit(rangeNumber) << 1;
+      int chunkNumber = 2 * (rangeNumber - Integer.highestOneBit(rangeNumber)) + 1;
+
+      singleton.currentMembershipPort.addAndGet(chunkNumber * membershipRange / numChunks);
+      singleton.currentAvailablePort.addAndGet(chunkNumber * availableRange / numChunks);
+    }
+  }
+
+  /**
+   * Get keeper objects for the next unused, consecutive 'rangeSize' ports on this machine.
+   *
+   * @param useMembershipPortRange - if true, select ports from the
+   *        DistributionConfig.DEFAULT_MEMBERSHIP_PORT_RANGE
+   * @param protocol - either AvailablePort.SOCKET (TCP) or AvailablePort.MULTICAST (UDP)
+   * @param rangeSize - number of contiguous ports needed
+   * @return Keeper objects associated with a range of ports satisfying the request
+   */
+  private static List<Keeper> getUniquePortRangeKeepers(boolean useMembershipPortRange,
+      int protocol, int rangeSize) {
+    AtomicInteger targetRange =
+        useMembershipPortRange ? singleton.currentMembershipPort : singleton.currentAvailablePort;
+    int targetBound =
+        useMembershipPortRange ? DEFAULT_MEMBERSHIP_PORT_RANGE[1] : AVAILABLE_PORTS_UPPER_BOUND;
+
+    while (true) {
+      int uniquePort = targetRange.getAndAdd(rangeSize);
+      if (uniquePort + rangeSize > targetBound) {
+        targetRange.set(useMembershipPortRange ? DEFAULT_MEMBERSHIP_PORT_RANGE[0]
+            : AVAILABLE_PORTS_LOWER_BOUND);
+        continue;
+      }
+      List<Keeper> keepers = new ArrayList<>();
+      int validPortsFound = 0;
+
+      while (validPortsFound < rangeSize) {
+        Keeper testKeeper =
+            AvailablePort.isPortKeepable(uniquePort++, protocol,
+                getAddress(protocol));
+        if (testKeeper == null) {
+          break;
+        }
+
+        keepers.add(testKeeper);
+        ++validPortsFound;
+      }
+
+      if (validPortsFound == rangeSize) {
+        return keepers;
+      }
+
+      releaseKeepers(keepers);
+    }
+  }
+
+  private static Keeper getUniquePortKeeper(boolean useMembershipPortRange, int protocol) {
+    return getUniquePortRangeKeepers(useMembershipPortRange, protocol, 1).get(0);
+  }
+
+  /**
+   * Get the next available port on this machine.
+   */
+  private static int getUniquePort(boolean useMembershipPortRange, int protocol) {
+    AtomicInteger targetRange =
+        useMembershipPortRange ? singleton.currentMembershipPort : singleton.currentAvailablePort;
+    int targetBound =
+        useMembershipPortRange ? DEFAULT_MEMBERSHIP_PORT_RANGE[1] : AVAILABLE_PORTS_UPPER_BOUND;
+
+    while (true) {
+      int uniquePort = targetRange.getAndIncrement();
+      if (uniquePort > targetBound) {
+        targetRange.set(useMembershipPortRange ? DEFAULT_MEMBERSHIP_PORT_RANGE[0]
+            : AVAILABLE_PORTS_LOWER_BOUND);
+        continue;
+      }
+
+      if (AvailablePort.isPortAvailable(uniquePort++, protocol, getAddress(protocol))) {
+        return uniquePort;
+      }
+    }
+  }

MOV26 UPD40 UPD40 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS59 INS42 INS8 INS83 INS83 MOV74 INS42 MOV44 MOV44 INS8 MOV29 INS83 INS83 INS39 INS42 INS8 MOV29 INS83 INS83 MOV5 INS42 MOV44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS29 UPD83 MOV83 MOV83 INS74 INS42 INS44 INS44 INS44 INS8 UPD83 MOV83 MOV83 INS43 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS14 MOV60 MOV60 INS25 INS21 INS21 INS41 INS61 INS41 MOV60 MOV60 INS61 MOV41 INS39 INS42 INS25 INS21 INS21 INS25 INS65 INS65 INS65 INS65 INS65 INS43 INS43 INS39 INS42 INS39 INS42 INS39 INS42 MOV60 MOV60 INS61 UPD42 MOV42 INS39 INS42 INS39 INS42 INS41 INS65 INS39 INS42 INS39 INS42 INS60 INS60 INS61 INS43 UPD43 UPD39 INS42 INS21 INS21 INS7 INS7 INS32 MOV5 MOV27 INS8 INS2 MOV5 INS27 INS8 INS27 INS8 INS32 INS32 INS27 INS8 INS66 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 UPD43 INS9 INS8 INS32 INS66 INS43 INS59 INS39 INS59 INS9 INS8 INS42 UPD42 UPD42 UPD42 INS32 INS7 INS7 INS42 INS14 INS42 INS14 INS42 INS42 INS40 INS42 UPD42 INS3 INS42 MOV60 INS61 MOV21 MOV21 INS32 INS34 MOV42 UPD42 MOV42 INS21 INS21 INS42 INS34 INS53 INS40 INS42 INS2 INS40 INS42 INS42 INS42 INS34 MOV60 INS60 MOV60 INS60 MOV21 MOV21 UPD42 UPD42 INS16 UPD42 INS60 MOV25 MOV60 INS60 INS61 INS25 INS21 INS32 INS42 INS34 INS42 INS42 INS16 INS42 INS16 MOV60 INS25 INS25 INS42 INS42 INS45 INS42 INS14 INS42 INS14 INS43 INS27 INS43 INS27 UPD42 INS42 INS40 MOV5 INS42 INS27 INS8 INS38 INS42 INS34 MOV5 INS42 INS7 INS38 INS14 INS42 INS34 INS39 INS59 INS39 INS39 INS59 INS42 INS40 INS40 INS39 INS59 MOV39 INS59 INS27 INS8 INS27 INS8 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS34 INS42 INS40 INS40 INS42 INS2 INS42 INS39 INS27 INS8 INS32 INS8 INS43 INS43 INS42 INS32 INS2 INS42 INS32 INS42 INS27 INS34 INS21 MOV2 INS42 INS42 MOV2 INS32 INS42 INS43 INS45 UPD42 UPD27 INS42 INS27 UPD42 INS27 INS42 INS27 INS40 UPD42 INS27 INS40 UPD42 INS27 INS42 INS32 INS27 INS42 INS18 UPD42 INS42 INS34 INS42 INS42 INS60 INS25 INS21 INS21 INS42 INS42 MOV41 INS42 INS42 INS42 INS34 UPD42 INS32 INS42 INS42 INS21 INS18 INS42 INS42 INS37 INS42 INS32 INS41 INS42 INS40 INS42 INS42 INS27 INS42 INS34 INS42 INS42 INS27 UPD42 UPD42 MOV42 MOV40 UPD42 INS9 INS42 INS42 INS7 INS42 INS9 INS40 INS42 INS2 INS2 INS42 INS42 INS32 INS34 INS27 INS34 INS27 INS42 INS27 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS32 MOV43 MOV59 INS27 INS8 INS32 INS38 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS42 INS2 INS2 INS42 INS42 INS42 INS32 INS42 INS34 INS42 INS34 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS34 INS36 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 MOV16 UPD42 INS42 INS33 INS10 INS42 INS42 INS42 INS42 INS42 MOV42 INS16 INS42 INS34 INS42 INS34 UPD42 MOV42 INS9 INS40 INS27 UPD42 INS37 INS42 INS32 INS42 INS2 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS34 UPD42 MOV42 INS42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL40 DEL32 DEL42 DEL40 DEL32 DEL42 DEL42 DEL83 DEL83 DEL42 DEL39 DEL42 DEL42 DEL59 DEL58 DEL27 DEL42 DEL37 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL42 DEL27 DEL36 DEL42 DEL27 DEL36 DEL27 DEL42 DEL37 DEL42 DEL33 DEL27 DEL32 DEL21 DEL10 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL27 DEL42 DEL41 DEL8 DEL25 DEL8 DEL24 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL43 DEL14 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL61 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL36 DEL42 DEL32 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL32 DEL8 DEL24 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL33 DEL27 DEL45 DEL32 DEL27 DEL8 DEL25 DEL60 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL32 DEL42 DEL27 DEL39 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL21 DEL8 DEL61 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL42 DEL43 DEL32 DEL11 DEL36 DEL42 DEL32 DEL7 DEL21 DEL42 DEL37 DEL21 DEL8 DEL24 DEL8 DEL31 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL34 DEL42 DEL42 DEL42 DEL34 DEL32 DEL32 DEL7 DEL40 DEL42 DEL32 DEL3