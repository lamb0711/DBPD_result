Merge branch 'release/1.5.0'

-import org.apache.geode.distributed.internal.DM;
+import org.apache.geode.distributed.internal.DistributionManager;
-public abstract class AbstractRegionEntry implements RegionEntry, HashEntry<Object, Object> {
+public abstract class AbstractRegionEntry implements HashRegionEntry<Object, Object> {
-      @Retained(ABSTRACT_REGION_ENTRY_FILL_IN_VALUE) Entry entry, ByteArrayDataInput in, DM mgr,
-      final Version version) {
+      @Retained(ABSTRACT_REGION_ENTRY_FILL_IN_VALUE) Entry entry, ByteArrayDataInput in,
+      DistributionManager mgr, final Version version) {
-      result = OffHeapHelper.copyAndReleaseIfNeeded(result);
+      result = OffHeapHelper.copyAndReleaseIfNeeded(result, context.getCache());
-            serializedValue =
-                EntryEventImpl.serialize(CachedDeserializableFactory.create(serializedValue));
+            serializedValue = EntryEventImpl
+                .serialize(CachedDeserializableFactory.create(serializedValue, context.getCache()));
-    Object result = OffHeapHelper.copyAndReleaseIfNeeded(v);
+    Object result = OffHeapHelper.copyAndReleaseIfNeeded(v, context.getCache());
-      if (region.isConcurrencyChecksEnabled() && !removeRecoveredEntry
+      if (region.getConcurrencyChecksEnabled() && !removeRecoveredEntry
-      return checkEquals(expectedOldValue, actualValue, isCompressedOffHeap);
+      return checkEquals(expectedOldValue, actualValue, isCompressedOffHeap, region.getCache());
-      boolean isCompressedOffHeap) {
+      boolean isCompressedOffHeap, InternalCache cache) {
-      return checkPdxEquals((PdxInstance) v1, v2);
+      return checkPdxEquals((PdxInstance) v1, v2, cache);
-      return checkPdxEquals((PdxInstance) v2, v1);
+      return checkPdxEquals((PdxInstance) v2, v1, cache);
-      return checkOffHeapEquals((StoredObject) v1, v2);
+      return checkOffHeapEquals((StoredObject) v1, v2, cache);
-      return checkOffHeapEquals((StoredObject) v2, v1);
+      return checkOffHeapEquals((StoredObject) v2, v1, cache);
-      return checkCDEquals((CachedDeserializable) v1, v2, isCompressedOffHeap);
+      return checkCDEquals((CachedDeserializable) v1, v2, isCompressedOffHeap, cache);
-      return checkCDEquals((CachedDeserializable) v2, v1, isCompressedOffHeap);
+      return checkCDEquals((CachedDeserializable) v2, v1, isCompressedOffHeap, cache);
-  private static boolean checkOffHeapEquals(@Unretained StoredObject ohVal,
-      @Unretained Object obj) {
+  private static boolean checkOffHeapEquals(@Unretained StoredObject ohVal, @Unretained Object obj,
+      InternalCache cache) {
-      PdxInstance pi = InternalDataSerializer.readPdxInstance(ohVal.getSerializedValue(),
-          GemFireCacheImpl.getForPdx("Could not check value equality"));
-      return checkPdxEquals(pi, obj);
+      PdxInstance pi = InternalDataSerializer.readPdxInstance(ohVal.getSerializedValue(), cache);
+      return checkPdxEquals(pi, obj, cache);
-      boolean isCompressedOffHeap) {
+      boolean isCompressedOffHeap, InternalCache cache) {
-      PdxInstance pi = InternalDataSerializer.readPdxInstance(cdValBytes,
-          GemFireCacheImpl.getForPdx("Could not check value equality"));
+      PdxInstance pi = InternalDataSerializer.readPdxInstance(cdValBytes, cache);
-        return checkPdxEquals(pi, obj);
+        return checkPdxEquals(pi, obj, cache);
-  private static boolean checkPdxEquals(PdxInstance pdx, Object obj) {
+  private static boolean checkPdxEquals(PdxInstance pdx, Object obj, InternalCache cache) {
-          PdxInstance pi = InternalDataSerializer.readPdxInstance(cdValBytes,
-              GemFireCacheImpl.getForPdx("Could not check value equality"));
+          PdxInstance pi = InternalDataSerializer.readPdxInstance(cdValBytes, cache);
-        InternalCache internalCache = GemFireCacheImpl.getForPdx("Could not access Pdx registry");
-        if (internalCache != null) {
-          PdxSerializer pdxSerializer;
-          if (obj instanceof PdxSerializable) {
-            pdxSerializer = null;
-          } else {
-            pdxSerializer = internalCache.getPdxSerializer();
-          }
-          if (pdxSerializer != null || obj instanceof PdxSerializable) {
-            // try to convert obj to a PdxInstance
-            HeapDataOutputStream hdos = new HeapDataOutputStream(Version.CURRENT);
-            try {
-              if (InternalDataSerializer.autoSerialized(obj, hdos)
-                  || InternalDataSerializer.writePdx(hdos, internalCache, obj, pdxSerializer)) {
-                PdxInstance pi =
-                    InternalDataSerializer.readPdxInstance(hdos.toByteArray(), internalCache);
-                if (pi != null) {
-                  obj = pi;
-                }
+        PdxSerializer pdxSerializer;
+        if (obj instanceof PdxSerializable) {
+          pdxSerializer = null;
+        } else {
+          pdxSerializer = cache.getPdxSerializer();
+        }
+        if (pdxSerializer != null || obj instanceof PdxSerializable) {
+          // try to convert obj to a PdxInstance
+          HeapDataOutputStream hdos = new HeapDataOutputStream(Version.CURRENT);
+          try {
+            if (InternalDataSerializer.autoSerialized(obj, hdos)
+                || InternalDataSerializer.writePdx(hdos, cache, obj, pdxSerializer)) {
+              PdxInstance pi = InternalDataSerializer.readPdxInstance(hdos.toByteArray(), cache);
+              if (pi != null) {
+                obj = pi;
-            } catch (IOException | PdxSerializationException ignore) {
-              // we are not able to convert it so just fall through
+          } catch (IOException | PdxSerializationException ignore) {
+            // we are not able to convert it so just fall through
-            heapValue = CachedDeserializableFactory.create(valAsBytes);
+            heapValue = CachedDeserializableFactory.create(valAsBytes, r.getCache());
-      nv = CachedDeserializableFactory.create(data);
+      nv = CachedDeserializableFactory.create(data, r.getCache());
-          nv = CachedDeserializableFactory.create(data);
+          nv = CachedDeserializableFactory.create(data, r.getCache());
-        appendToEvictionList(evictionList);
-        if (region != null && region.isEntryExpiryPossible()) {
-          region.addExpiryTaskIfAbsent(this);
+        if (!isDestroyedOrRemoved()) {
+          appendToEvictionList(evictionList);
+          if (region != null && region.isEntryExpiryPossible()) {
+            region.addExpiryTaskIfAbsent(this);
+          }
-      InternalRegion r = event.getLocalRegion();
+      InternalRegion r = event.getRegion();

MOV26 UPD40 UPD74 UPD43 INS44 INS44 INS44 INS44 MOV8 UPD42 UPD43 INS43 INS42 INS43 INS42 INS43 INS42 MOV43 INS42 MOV41 UPD42 INS42 INS42 INS42 MOV38 MOV25 INS32 MOV27 INS8 INS42 INS42 INS32 INS42 INS42 MOV21 INS25 INS32 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS32 INS38 MOV8 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS32 INS42 INS42 UPD42 INS32 INS32 INS42 INS42 INS42 INS42 UPD42 DEL42 DEL43 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL25 DEL8