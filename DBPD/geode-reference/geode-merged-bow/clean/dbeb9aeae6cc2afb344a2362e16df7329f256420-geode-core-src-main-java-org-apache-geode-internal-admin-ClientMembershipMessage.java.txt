Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A PooledDistributionMessage for notifying admin members about changes in 
- * Client Membership received through BridgeMembership 
+ * A PooledDistributionMessage for notifying admin members about changes in Client Membership
+ * received through BridgeMembership
-  public static final int JOINED  = 0;
-  public static final int LEFT    = 1;
+  public static final int JOINED = 0;
+  public static final int LEFT = 1;
-  
+
-  private int    eventType;
+  private int eventType;
-  public ClientMembershipMessage() {
-  }
+  public ClientMembershipMessage() {}
-   * @param clientId
-   *          Id of the client
-   * @param clientHost
-   *          host the client was running on (could be null)
-   * @param eventType
-   *          whether client joined, left or crashed. Should be one of
-   *          ClientMembershipMessage.JOINED, ClientMembershipMessage.LEFT,
-   *          ClientMembershipMessage.CRASHED
+   * @param clientId Id of the client
+   * @param clientHost host the client was running on (could be null)
+   * @param eventType whether client joined, left or crashed. Should be one of
+   *        ClientMembershipMessage.JOINED, ClientMembershipMessage.LEFT,
+   *        ClientMembershipMessage.CRASHED
-  public ClientMembershipMessage(String clientId, String clientHost,
-                                 int eventType) {
-    this.clientId   = clientId;
+  public ClientMembershipMessage(String clientId, String clientHost, int eventType) {
+    this.clientId = clientId;
-    this.eventType  = eventType;
+    this.eventType = eventType;
-  /** 
+  /**
-    AdminDistributedSystemImpl adminDs = 
-                      AdminDistributedSystemImpl.getConnectedInstance();
-    
-    /* 
-     * Disconnect can be called on AdminDistributedSystem from Agent and it is 
-     * not synchronous with processing of this message. Null check added to 
-     * avoid null if disconnect has been called on AdminDistributedSystem
+    AdminDistributedSystemImpl adminDs = AdminDistributedSystemImpl.getConnectedInstance();
+
+    /*
+     * Disconnect can be called on AdminDistributedSystem from Agent and it is not synchronous with
+     * processing of this message. Null check added to avoid null if disconnect has been called on
+     * AdminDistributedSystem
-  
-      adminDs.processClientMembership(senderId, clientId, 
-                                      clientHost, eventType);
+
+      adminDs.processClientMembership(senderId, clientId, clientHost, eventType);
-   *  
+   * 
-  
+
-  
+
-    
-    this.clientId   = DataSerializer.readString(in);
+
+    this.clientId = DataSerializer.readString(in);
-    this.eventType  = in.readInt();
+    this.eventType = in.readInt();
-  
+
-  
+
-    
+
-    case LEFT:
-      clientMembership = "LEFT";
-      break;
+      case LEFT:
+        clientMembership = "LEFT";
+        break;
-    case CRASHED:
-      clientMembership = "CRASHED and left";
-      break;
+      case CRASHED:
+        clientMembership = "CRASHED and left";
+        break;
-    default:
-      break;
+      default:
+        break;
-    
-    return "Client with Id: "+this.clientId + 
-           " running on host: "+this.clientHost + 
-           " "+clientMembership +
-           " the server: "+this.getSender();
+
+    return "Client with Id: " + this.clientId + " running on host: " + this.clientHost + " "
+        + clientMembership + " the server: " + this.getSender();

UPD66 UPD66 UPD66 UPD66 UPD66