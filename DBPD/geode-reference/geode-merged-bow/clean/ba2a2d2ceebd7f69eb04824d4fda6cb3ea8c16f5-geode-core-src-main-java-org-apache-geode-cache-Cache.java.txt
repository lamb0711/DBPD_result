GEODE-2632: cleanup GemFireCacheImpl

* change SecurityService from static constant to final member field
* fix typos and javadocs
* narrow scope of constants, variables, methods
* remove deadcode and useless comments/javadocs
* fix misc IntelliJ warnings
* add @Override annotations
* improve some variable names
* fix (some) generics and types
* add TODOs for a couple problem areas that need further fixing

-
-
- * contents must comply with the <code>"doc-files/cache8_0.dtd"</code> file and the top level
- * element must be a <code>cache</code> element.
+ * contents must comply with the {@code "doc-files/cache8_0.dtd"} file and the top level element
+ * must be a {@code cache} element.
- *
- *
-   * @param keepalive whether the server should keep the durable client's queues alive for the
+   * @param keepAlive whether the server should keep the durable client's queues alive for the
-  public void close(boolean keepalive);
+  void close(boolean keepAlive);
-  public <K, V> Region<K, V> createVMRegion(String name, RegionAttributes<K, V> aRegionAttributes)
+  <K, V> Region<K, V> createVMRegion(String name, RegionAttributes<K, V> aRegionAttributes)
-  public <K, V> Region<K, V> createRegion(String name, RegionAttributes<K, V> aRegionAttributes)
+  <K, V> Region<K, V> createRegion(String name, RegionAttributes<K, V> aRegionAttributes)
-  public <K, V> RegionFactory<K, V> createRegionFactory();
+  <K, V> RegionFactory<K, V> createRegionFactory();
-  public <K, V> RegionFactory<K, V> createRegionFactory(RegionShortcut atts);
+  <K, V> RegionFactory<K, V> createRegionFactory(RegionShortcut shortcut);
-  public <K, V> RegionFactory<K, V> createRegionFactory(String regionAttributesId);
+  <K, V> RegionFactory<K, V> createRegionFactory(String regionAttributesId);
-  public <K, V> RegionFactory<K, V> createRegionFactory(RegionAttributes<K, V> regionAttributes);
+  <K, V> RegionFactory<K, V> createRegionFactory(RegionAttributes<K, V> regionAttributes);
-   * {@link #getLogger()} instead. This method does not throw <code>CacheClosedException</code> if
-   * the cache is closed.
+   * {@link #getLogger()} instead. This method does not throw {@code CacheClosedException} if the
+   * cache is closed.
-  public LogWriterI18n getLoggerI18n();
+  LogWriterI18n getLoggerI18n();
-   * {@link #getSecurityLogger()} instead. This method does not throw
-   * <code>CacheClosedException</code> if the cache is closed.
+   * {@link #getSecurityLogger()} instead. This method does not throw {@code CacheClosedException}
+   * if the cache is closed.
-  public LogWriterI18n getSecurityLoggerI18n();
+  LogWriterI18n getSecurityLoggerI18n();
-   * method does not throw <code>CacheClosedException</code> if the cache is closed.
+   * method does not throw {@code CacheClosedException} if the cache is closed.
-  public int getLockTimeout();
+  int getLockTimeout();
-   * @throws IllegalArgumentException if <code>seconds</code> is less than zero
+   * @throws IllegalArgumentException if {@code seconds} is less than zero
-  public void setLockTimeout(int seconds);
+  void setLockTimeout(int seconds);
-  public int getMessageSyncInterval();
+  int getMessageSyncInterval();
-   * @param seconds - the time interval in seconds
-   * @throws IllegalArgumentException if <code>seconds</code> is less than zero
+   * @param seconds the time interval in seconds
+   * @throws IllegalArgumentException if {@code seconds} is less than zero
-  public void setMessageSyncInterval(int seconds);
+  void setMessageSyncInterval(int seconds);
-   * does not throw <code>CacheClosedException</code> if the cache is closed.
+   * does not throw {@code CacheClosedException} if the cache is closed.
-  public int getLockLease();
+  int getLockLease();
-   * @throws IllegalArgumentException if <code>seconds</code> is less than zero.
+   * @throws IllegalArgumentException if {@code seconds} is less than zero.
-  public void setLockLease(int seconds);
+  void setLockLease(int seconds);
-   * exception. This method does not throw <code>CacheClosedException</code> if the cache is closed.
+   * exception. This method does not throw {@code CacheClosedException} if the cache is closed.
-  public int getSearchTimeout();
+  int getSearchTimeout();
-   * @throws IllegalArgumentException if <code>seconds</code> is less than zero
+   * @throws IllegalArgumentException if {@code seconds} is less than zero
-  public void setSearchTimeout(int seconds);
+  void setSearchTimeout(int seconds);
-  public CacheServer addCacheServer();
+  CacheServer addCacheServer();
-   * Returns a collection of all of the <code>CacheServer</code>s that can serve the contents of
-   * this <code>Cache</code> to clients.
+   * Returns a collection of all of the {@code CacheServer}s that can serve the contents of this
+   * {@code Cache} to clients.
-  public List<CacheServer> getCacheServers();
+  List<CacheServer> getCacheServers();
-   * @param resolver
+   * @param resolver gateway event conflict resolution resolver
-  public void setGatewayConflictResolver(GatewayConflictResolver resolver);
+  void setGatewayConflictResolver(GatewayConflictResolver resolver);
-  public GatewayConflictResolver getGatewayConflictResolver();
+  GatewayConflictResolver getGatewayConflictResolver();
-   * Sets whether or not this <code>Cache</code> resides in a long-running "cache server" VM. A
-   * cache server may be an application VM or may be a stand-along VM launched using
+   * Sets whether or not this {@code Cache} resides in a long-running "cache server" VM. A cache
+   * server may be an application VM or may be a stand-along VM launched using
-   * the <code>cacheserver</code> command line utility.
+   * the {@code cacheserver} command line utility.
-  public void setIsServer(boolean isServer);
+  void setIsServer(boolean isServer);
-  public boolean isServer();
+  boolean isServer();
-  public void readyForEvents();
+  void readyForEvents();
-  public GatewaySenderFactory createGatewaySenderFactory();
+  @Override
+  GatewaySenderFactory createGatewaySenderFactory();
-  public AsyncEventQueueFactory createAsyncEventQueueFactory();
+  AsyncEventQueueFactory createAsyncEventQueueFactory();
-  public GatewayReceiverFactory createGatewayReceiverFactory();
+  GatewayReceiverFactory createGatewayReceiverFactory();
-  public Set<GatewaySender> getGatewaySenders();
+  Set<GatewaySender> getGatewaySenders();
-  public GatewaySender getGatewaySender(String id);
+  GatewaySender getGatewaySender(String id);
-  public Set<GatewayReceiver> getGatewayReceivers();
+  Set<GatewayReceiver> getGatewayReceivers();
-  public Set<AsyncEventQueue> getAsyncEventQueues();
+  Set<AsyncEventQueue> getAsyncEventQueues();
-  public AsyncEventQueue getAsyncEventQueue(String id);
+  AsyncEventQueue getAsyncEventQueue(String id);
-  public Set<DistributedMember> getMembers();
+  Set<DistributedMember> getMembers();
-  public Set<DistributedMember> getAdminMembers();
+  Set<DistributedMember> getAdminMembers();
-   * @param r a Region in the cache
+   * @param region a Region in the cache
-  public Set<DistributedMember> getMembers(Region r);
+  Set<DistributedMember> getMembers(Region region);
-  public CacheSnapshotService getSnapshotService();
+  CacheSnapshotService getSnapshotService();
-  public boolean isReconnecting();
+  boolean isReconnecting();
-   * @param units
+   * @param units time unit
-  public boolean waitUntilReconnected(long time, TimeUnit units) throws InterruptedException;
+  boolean waitUntilReconnected(long time, TimeUnit units) throws InterruptedException;
-  public void stopReconnecting();
+  void stopReconnecting();
-  public Cache getReconnectedCache();
+  Cache getReconnectedCache();
-

INS78 UPD66 INS65 INS66 INS66 INS65 UPD66 UPD42 UPD42 INS42 UPD42 INS66 INS66 UPD42 UPD66 INS65 INS66 UPD66 UPD66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS66 INS65 UPD66 UPD66 INS65 INS66 INS65 UPD66 INS66 INS66 INS65 UPD66 UPD66 INS66 INS65 UPD66 UPD42 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83