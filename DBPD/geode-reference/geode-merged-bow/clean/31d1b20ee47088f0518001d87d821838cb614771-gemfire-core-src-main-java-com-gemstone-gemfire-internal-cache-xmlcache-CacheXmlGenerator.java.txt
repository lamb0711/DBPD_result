Initial import of geode-1.0.0.0-SNAPSHOT-2.
All the new sub-project directories (like jvsd) were not imported.
A diff was done to confirm that this commit is exactly the same as
the open directory the snapshot was made from.

-import com.gemstone.gemfire.cache.control.ResourceManager;
+import com.gemstone.gemfire.internal.cache.PartitionAttributesImpl;
+import com.gemstone.gemfire.internal.cache.control.MemoryThresholds;
-        if (generateDefaults() || chp != ResourceManager.DEFAULT_CRITICAL_HEAP_PERCENTAGE) {
+        if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE) {
-        if (generateDefaults() || ehp != ResourceManager.DEFAULT_EVICTION_HEAP_PERCENTAGE) {
+        if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE) {
+      
+      if (this.version.compareTo(CacheXmlVersion.VERSION_9_0) >= 0) {
+        if (this.creation.getResourceManager().hasCriticalOffHeap()) {
+          float chp = this.creation.getResourceManager().getCriticalOffHeapPercentage();
+          if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE) {
+            atts.addAttribute("", "", CRITICAL_OFF_HEAP_PERCENTAGE, "", String.valueOf(chp));
+            generateIt = true;
+          }
+        }
+        if (this.creation.getResourceManager().hasEvictionOffHeap()) {
+          float ehp = this.creation.getResourceManager().getEvictionOffHeapPercentage();
+          if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE) {
+            atts.addAttribute("", "", EVICTION_OFF_HEAP_PERCENTAGE, "", String.valueOf(ehp));
+            generateIt = true;
+          }
+        }
+      }
-        if (generateDefaults() || chp != ResourceManager.DEFAULT_CRITICAL_HEAP_PERCENTAGE)
+        if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE)
+
-        if (generateDefaults() || ehp != ResourceManager.DEFAULT_EVICTION_HEAP_PERCENTAGE)
+        if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE)
+      
+      if (this.version.compareTo(CacheXmlVersion.VERSION_9_0) >= 0) {
+        {
+          int chp = (int)this.cache.getResourceManager().getCriticalOffHeapPercentage();
+          if (generateDefaults() || chp != MemoryThresholds.DEFAULT_CRITICAL_PERCENTAGE)
+  
+          atts.addAttribute("", "", CRITICAL_OFF_HEAP_PERCENTAGE, "",
+              String.valueOf(chp));
+        }
+        {
+          int ehp = (int)this.cache.getResourceManager().getEvictionOffHeapPercentage();
+          if (generateDefaults() || ehp != MemoryThresholds.DEFAULT_EVICTION_PERCENTAGE)
+          atts.addAttribute("", "", EVICTION_OFF_HEAP_PERCENTAGE, "",
+              String.valueOf(ehp));
+        }
+      }
+        } else if (dp == DataPolicy.HDFS_PARTITION) {
+          dpString = HDFS_PARTITION_DP;
+        } else if (dp == DataPolicy.HDFS_PERSISTENT_PARTITION) {
+          dpString = HDFS_PERSISTENT_PARTITION_DP;
+    if (this.version.compareTo(CacheXmlVersion.VERSION_9_0) >= 0) {
+      if ((!(attrs instanceof RegionAttributesCreation) ||
+          ((RegionAttributesCreation) attrs).hasOffHeap())) {
+        if (generateDefaults() || attrs.getOffHeap()) {
+          atts.addAttribute("", "", OFF_HEAP, "", String.valueOf(attrs.getOffHeap()));
+        }
+      }
+    }
+
-      if (generateDefaults() || pa.getLocalMaxMemory() != PartitionAttributesFactory.LOCAL_MAX_MEMORY_DEFAULT)
+      if (generateDefaults() || pa.getLocalMaxMemory() != ((PartitionAttributesImpl) pa).getLocalMaxMemoryDefault())

MOV26 INS26 INS40 UPD40 INS25 INS27 INS8 INS25 INS32 INS34 INS25 INS27 INS8 INS25 INS22 INS42 INS40 INS36 INS8 INS32 INS34 INS25 INS25 INS27 INS8 INS52 INS42 INS27 INS25 INS22 INS42 INS40 INS32 INS8 INS32 INS8 INS32 INS34 INS8 INS8 INS38 INS32 INS27 INS8 INS32 INS52 INS42 INS32 INS42 INS60 INS25 INS32 INS42 INS60 INS25 INS22 INS42 INS40 INS60 INS25 INS60 INS25 INS36 INS36 INS42 INS32 INS32 INS21 INS36 INS42 UPD40 UPD40 INS22 INS42 INS39 INS59 INS27 INS8 INS22 INS42 INS39 INS59 INS27 INS8 UPD40 UPD40 INS52 INS42 INS39 INS59 INS27 INS21 INS39 INS59 INS27 INS21 INS62 INS11 INS42 INS42 INS42 INS32 INS11 INS52 INS42 INS42 INS32 INS32 INS27 INS21 INS21 INS52 INS42 INS42 INS32 INS32 INS27 INS21 INS21 INS42 INS11 INS32 INS27 INS32 INS42 INS11 INS32 INS27 INS32 INS42 INS43 INS43 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS43 INS42 INS32 INS42 INS42 INS42 INS40 INS32 INS7 INS32 INS42 INS42 INS42 INS40 INS32 INS7 INS39 INS32 INS42 INS42 INS40 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS39 INS32 INS42 INS42 INS40 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS22 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS42 INS9 INS22 INS42 INS42 INS42 INS45 INS45 INS42 INS45 INS32 INS42 INS9 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS25 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS27 INS8 INS25 INS52 INS42 INS52 INS42 INS42 INS40 INS21 INS27 INS8 MOV25 INS7 INS42 INS40 INS21 INS42 INS42 INS7 INS42 INS42 DEL40