GEODE-6322: refactor createRegionCommand to use RegionConfig only (#3156)

* get rid of usages of xxxArgs and RegionConfigFactory
* the resulting cluster configuration xml for region does not have excessive default values

-import org.apache.geode.cache.configuration.DeclarableType;
-import org.apache.geode.cache.configuration.RegionAttributesType;
-import org.apache.geode.management.internal.configuration.domain.DeclarableTypeInstantiator;
-
-  public static PartitionAttributesImpl fromConfig(
-      RegionAttributesType.PartitionAttributes configAttributes, Cache cache) {
-    PartitionAttributesImpl partitionAttributes = new PartitionAttributesImpl();
-    if (configAttributes == null) {
-      return null;
-    }
-
-    if (configAttributes.getRedundantCopies() != null) {
-      partitionAttributes
-          .setRedundantCopies(Integer.valueOf(configAttributes.getRedundantCopies()));
-    }
-
-    if (configAttributes.getTotalMaxMemory() != null) {
-      partitionAttributes.setTotalMaxMemory(Integer.valueOf(configAttributes.getTotalMaxMemory()));
-    }
-
-    if (configAttributes.getTotalNumBuckets() != null) {
-      partitionAttributes
-          .setTotalNumBuckets(Integer.valueOf(configAttributes.getTotalNumBuckets()));
-    }
-
-    if (configAttributes.getLocalMaxMemory() != null) {
-      partitionAttributes.setLocalMaxMemory(Integer.valueOf(configAttributes.getLocalMaxMemory()));
-    }
-
-    if (configAttributes.getColocatedWith() != null) {
-      partitionAttributes.setColocatedWith(configAttributes.getColocatedWith());
-    }
-
-    if (configAttributes.getPartitionResolver() != null) {
-      partitionAttributes.setPartitionResolver(
-          DeclarableTypeInstantiator.newInstance(configAttributes.getPartitionResolver(), cache));
-    }
-
-    if (configAttributes.getRecoveryDelay() != null) {
-      partitionAttributes.setRecoveryDelay(Long.valueOf(configAttributes.getRecoveryDelay()));
-    }
-
-    if (configAttributes.getStartupRecoveryDelay() != null) {
-      partitionAttributes
-          .setStartupRecoveryDelay(Long.valueOf(configAttributes.getStartupRecoveryDelay()));
-    }
-
-    if (configAttributes.getPartitionListeners() != null) {
-      List<DeclarableType> configListeners = configAttributes.getPartitionListeners();
-      for (int i = 0; i < configListeners.size(); i++) {
-        partitionAttributes.addPartitionListener(
-            DeclarableTypeInstantiator.newInstance(configListeners.get(i), cache));
-      }
-    }
-
-    return partitionAttributes;
-  }

DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL42 DEL43 DEL42 DEL40 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31