GEODE-4858: refactor CreateIndexCommand and jdbc commands (#1853)

* use ClusterConfigurationService
* introduce SingleGfshCommand to ease update of cluster configuration
* get rid of default methods in CluterConfigurationService
+import org.apache.geode.cache.configuration.RegionConfig;
-import org.apache.geode.internal.cache.xmlcache.CacheXml;
-import org.apache.geode.management.internal.cli.domain.IndexInfo;
-import org.apache.geode.management.internal.configuration.domain.XmlEntity;
-    final IndexInfo indexInfo = (IndexInfo) context.getArguments();
+    final RegionConfig.Index indexInfo = (RegionConfig.Index) context.getArguments();
-      String indexName = indexInfo.getIndexName();
-      String indexedExpression = indexInfo.getIndexedExpression();
-      String fromClause = indexInfo.getRegionPath();
-      // Check to see if the region path contains an alias e.g "/region1 r1"
-      // Then the first string will be the regionPath
-      String[] regionPathTokens = fromClause.trim().split(" ");
-      String regionPath = regionPathTokens[0];
-
-      switch (indexInfo.getIndexType()) {
-        case FUNCTIONAL:
-          queryService.createIndex(indexName, indexedExpression, fromClause);
-          break;
-        case PRIMARY_KEY:
-          queryService.createKeyIndex(indexName, indexedExpression, fromClause);
-          break;
-        case HASH:
-          queryService.createHashIndex(indexName, indexedExpression, fromClause);
-          break;
-        default:
-          queryService.createIndex(indexName, indexedExpression, fromClause);
+      String indexName = indexInfo.getName();
+      String indexedExpression = indexInfo.getExpression();
+      String fromClause = indexInfo.getFromClause();
+      if (indexInfo.isKeyIndex()) {
+        queryService.createKeyIndex(indexName, indexedExpression, fromClause);
+      } else if ("hash".equals(indexInfo.getType())) {
+        queryService.createHashIndex(indexName, indexedExpression, fromClause);
+      } else {
+        queryService.createIndex(indexName, indexedExpression, fromClause);
-      regionPath = getValidRegionName(cache, regionPath);
-      setResultInSender(context, indexInfo, memberId, cache, regionPath);
+      context.getResultSender()
+          .lastResult(new CliFunctionResult(memberId, null, "Index successfully created"));
+
-          CliStrings.format(CliStrings.CREATE_INDEX__INDEX__EXISTS, indexInfo.getIndexName());
+          CliStrings.format(CliStrings.CREATE_INDEX__INDEX__EXISTS, indexInfo.getName());
-          CliStrings.format(CliStrings.CREATE_INDEX__NAME__CONFLICT, indexInfo.getIndexName());
+          CliStrings.format(CliStrings.CREATE_INDEX__NAME__CONFLICT, indexInfo.getName());
-          indexInfo.getRegionPath());
+          indexInfo.getFromClause());
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, e, e.getMessage()));
+      context.getResultSender().lastResult(new CliFunctionResult(memberId, e, exceptionMessage));
-  private void setResultInSender(FunctionContext context, IndexInfo indexInfo, String memberId,
-      Cache cache, String regionPath) {
-    if (regionPath == null) {
-      String message = CliStrings.format(CliStrings.CREATE_INDEX__INVALID__REGIONPATH,
-          indexInfo.getRegionPath());
-      context.getResultSender().lastResult(new CliFunctionResult(memberId, false, message));
-    } else {
-      XmlEntity xmlEntity =
-          new XmlEntity(CacheXml.REGION, "name", cache.getRegion(regionPath).getName());
-      context.getResultSender()
-          .lastResult(new CliFunctionResult(memberId, xmlEntity, "Index successfully created"));
-    }
-  }
-
-  private String getValidRegionName(Cache cache, String regionPath) {
-    while (regionPath != null && cache.getRegion(regionPath) == null) {
-      int dotPosition;
-      if (regionPath.contains(".") && ((dotPosition = regionPath.lastIndexOf('.')) != -1)) {
-        regionPath = regionPath.substring(0, dotPosition);
-      } else {
-        regionPath = null;
-      }
-    }
-    return regionPath;
-  }
-

MOV26 UPD40 MOV12 UPD43 INS40 INS25 MOV44 INS44 UPD43 INS32 INS8 INS25 INS43 INS42 UPD43 INS40 UPD42 MOV42 UPD42 MOV42 MOV21 INS32 INS8 INS8 MOV32 UPD42 INS14 MOV43 INS42 UPD42 UPD42 UPD42 UPD42 UPD45 MOV45 INS42 INS32 MOV21 MOV21 MOV42 MOV43 INS42 INS33 INS45 MOV42 UPD42 MOV42 UPD40 UPD40 UPD40 INS42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL34 DEL2 DEL59 DEL60 DEL32 DEL42 DEL49 DEL10 DEL42 DEL49 DEL10 DEL42 DEL49 DEL10 DEL49 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL50 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL9 DEL42 DEL14 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL42 DEL43 DEL40 DEL45 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL33 DEL27 DEL27 DEL39 DEL42 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL13 DEL32 DEL7 DEL36 DEL34 DEL38 DEL27 DEL36 DEL27 DEL42 DEL42 DEL42 DEL34 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL61 DEL42 DEL41 DEL8 DEL31