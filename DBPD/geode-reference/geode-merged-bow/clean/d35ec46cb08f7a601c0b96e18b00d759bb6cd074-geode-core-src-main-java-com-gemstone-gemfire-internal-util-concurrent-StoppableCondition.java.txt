Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/InternalDistributedSystem.java

+import static com.gemstone.gemfire.internal.util.concurrent.StoppableCountDownLatch.RETRY_TIME;
+
- * however, it does not implement the interface, in an attempt to encourage
- * GemFire API writers to refer to this "stoppable" version instead.
- * <p>
- * It is implemented as a strict "cover" for a genuine {@link java.util.concurrent.locks.Condition}.
- * 
+ * however it only implements the acquire(long) method.  Its purpose is to perform a
+ * cancellation check
-public class StoppableCondition implements /* Condition, */ java.io.Serializable {
-    private static final long serialVersionUID = -7091681525970431937L;
+public class StoppableCondition implements java.io.Serializable {
+  private static final long serialVersionUID = -7091681525970431937L;
-    /** The underlying condition **/
-    private final Condition condition;
-    
-    /** The cancellation object */
-    private final CancelCriterion stopper;
+  /** The underlying condition **/
+  private final Condition condition;
-  /**
-   * This is how often waiters will wake up to check for cancellation
-   */
-  private static final long RETRY_TIME = 15 * 1000; // milliseconds
+  /** The cancellation object */
+  private final CancelCriterion stopper;
+
+  public static final long TIME_TO_WAIT = 15000;
-    public void awaitUninterruptibly() {
-      for (;;) {
-        boolean interrupted = Thread.interrupted();
-        try {
-          await();
-          break;
-        }
-        catch (InterruptedException e) {
-          interrupted = true;
-        }
-        finally {
-          if (interrupted) Thread.currentThread().interrupt();
-        }
-      }
-    }
-
-    public void await() throws InterruptedException {
-      if (Thread.interrupted()) throw new InterruptedException();
-      for (;;) {
-        stopper.checkCancelInProgress(null);
-        if (await(RETRY_TIME))
-          break;
-      }
-    }
-
-    public boolean awaitUntil(Date deadline) throws InterruptedException {
-      stopper.checkCancelInProgress(null);
-      return condition.awaitUntil(deadline);
-    }
-

INS26 INS40 UPD83 UPD66 UPD66 UPD42 INS34 DEL66 DEL66 DEL40 DEL65 DEL66 DEL66 DEL65 DEL29 DEL34 DEL34 DEL27 DEL83 DEL39 DEL42 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL10 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL9 DEL7 DEL21 DEL8 DEL12 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL25 DEL8 DEL54 DEL8 DEL24 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL43 DEL14 DEL53 DEL25 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL32 DEL10 DEL25 DEL8 DEL24 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL33 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31