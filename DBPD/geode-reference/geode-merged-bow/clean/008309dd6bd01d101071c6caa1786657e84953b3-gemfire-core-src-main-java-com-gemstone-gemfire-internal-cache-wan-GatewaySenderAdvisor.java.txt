Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-      this.orderPolicy = DataSerializer.readObject(in);
+      if (InternalDataSerializer.getVersionForDataStream(in).compareTo(
+          Version.CURRENT) < 0) {
+        com.gemstone.gemfire.cache.util.Gateway.OrderPolicy oldOrderPolicy = DataSerializer
+            .readObject(in);
+        if (oldOrderPolicy != null) {
+          if (oldOrderPolicy.name().equals(OrderPolicy.KEY.name())) {
+            this.orderPolicy = OrderPolicy.KEY;
+          }
+          else if (oldOrderPolicy.name().equals(OrderPolicy.THREAD.name())) {
+            this.orderPolicy = OrderPolicy.THREAD;
+          }
+          else {
+            this.orderPolicy = OrderPolicy.PARTITION;
+          }}
+        else {
+          this.orderPolicy = null;
+        }
+      }
+      else {
+        this.orderPolicy = DataSerializer.readObject(in);
+      }
-      DataSerializer.writeObject(orderPolicy, out);
+      if (InternalDataSerializer.getVersionForDataStream(out).compareTo(
+          Version.CURRENT) < 0 && this.orderPolicy != null) {
+        String orderPolicyName = this.orderPolicy.name();
+        if (orderPolicyName.equals(com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.KEY.name())) {
+          DataSerializer.writeObject(
+              com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.KEY, out);
+        }
+        else if(orderPolicyName.equals(com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.THREAD.name())) {
+          DataSerializer.writeObject(
+              com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.THREAD, out);
+        }else{
+          DataSerializer.writeObject(
+              com.gemstone.gemfire.cache.util.Gateway.OrderPolicy.PARTITION, out);
+        }
+      }
+      else {
+        DataSerializer.writeObject(orderPolicy, out);
+      }

INS25 INS25 INS27 INS8 INS8 INS27 INS8 INS8 INS32 INS34 INS60 INS25 MOV21 INS27 INS27 INS60 INS25 MOV21 INS32 INS42 INS40 INS43 INS59 INS27 INS8 INS8 INS32 INS34 INS22 INS33 INS43 INS59 INS32 INS8 INS25 INS42 INS42 INS42 INS40 INS42 INS32 INS42 INS33 INS25 INS21 INS32 INS42 INS40 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS21 INS32 INS8 INS8 INS42 INS42 INS42 INS32 INS8 INS25 INS7 INS42 INS42 INS42 INS22 INS42 INS40 INS42 INS32 INS42 INS42 INS32 INS21 INS21 INS32 INS42 INS32 INS21 INS32 INS8 INS8 INS22 INS33 INS52 INS42 INS42 INS42 INS40 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS40 INS42 INS7 INS32 INS42 INS32 INS21 INS21 INS52 INS42 INS42 INS42 INS40 INS42 INS42 INS42 INS40 INS42 INS22 INS40 INS42 INS42 INS40 INS42 INS7 INS7 INS52 INS42 INS22 INS40 INS22 INS40 INS52 INS42 INS52 INS42