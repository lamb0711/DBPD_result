Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * Implementation of the public PersistentID. It holds the region,
- * host, directory, and timestamp.
+ * Implementation of the public PersistentID. It holds the region, host, directory, and timestamp.
- * This class also is also used to describe members that the user
- * has revoked. Any fields that are null will be considered a wildcard
- * matching any members.
+ * This class also is also used to describe members that the user has revoked. Any fields that are
+ * null will be considered a wildcard matching any members.
-  
+
-  
-  public PersistentMemberPattern(InetAddress host,
-      String directory) {
+
+  public PersistentMemberPattern(InetAddress host, String directory) {
-  
-  public PersistentMemberPattern(InetAddress host,
-      String directory, long revokedTime) {
+
+  public PersistentMemberPattern(InetAddress host, String directory, long revokedTime) {
-  
+
-  
-  public PersistentMemberPattern(InetAddress host,
-      String directory, UUID diskStoreID, long revokedTime) {
+
+  public PersistentMemberPattern(InetAddress host, String directory, UUID diskStoreID,
+      long revokedTime) {
-  //Used for deserialization only
-  public PersistentMemberPattern() {
-  }
+  // Used for deserialization only
+  public PersistentMemberPattern() {}
-    if(id == null) {
+    if (id == null) {
-        || id.diskStoreId.getMostSignificantBits() == diskStoreID
-            .getMostSignificantBits()
-        && id.diskStoreId.getLeastSignificantBits() == diskStoreID
-            .getLeastSignificantBits();
-    
-    //Safety measure. Id's which are generated after this pattern was revoked
-    //should not be revoked. For example, if someone loses the disk for server A
-    //They may revoke the pattern host==A. But A will start and generate a new ID
-    //if they then close the region everywhere and then reopen it, we don't want
-    //the new pattern to be revoked.
-    if(diskStoreID == null) {
+        || id.diskStoreId.getMostSignificantBits() == diskStoreID.getMostSignificantBits()
+            && id.diskStoreId.getLeastSignificantBits() == diskStoreID.getLeastSignificantBits();
+
+    // Safety measure. Id's which are generated after this pattern was revoked
+    // should not be revoked. For example, if someone loses the disk for server A
+    // They may revoke the pattern host==A. But A will start and generate a new ID
+    // if they then close the region everywhere and then reopen it, we don't want
+    // the new pattern to be revoked.
+    if (diskStoreID == null) {
-  
+
-    if(host != null) {
+    if (host != null) {
-    
+
-    result = prime * result
-        + ((diskStoreID == null) ? 0 : diskStoreID.hashCode());
+    result = prime * result + ((diskStoreID == null) ? 0 : diskStoreID.hashCode());
-  
+
-    if(hasHost) {
+    if (hasHost) {
-    if(hasDirectory) {
+    if (hasDirectory) {
-    if(host != null) {
+    if (host != null) {
-    if(directory != null) {
+    if (directory != null) {
-      
+
-    if(result != 0) {
+    if (result != 0) {
-    if(result != 0) {
+    if (result != 0) {
-    if(result != 0) {
+    if (result != 0) {
-    
+
-    
+
-  
+
-    if(a == null) {
-      if(b == null) {
+    if (a == null) {
+      if (b == null) {
-    if(b == null) {
+    if (b == null) {
-    
+

UPD66 UPD66 UPD66 DEL66 DEL66