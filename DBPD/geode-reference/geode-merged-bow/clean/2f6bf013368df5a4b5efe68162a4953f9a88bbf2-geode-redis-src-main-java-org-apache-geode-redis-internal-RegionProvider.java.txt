GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)

* GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions

This PR builds on the work originally submitted by Greg Green in
https://github.com/apache/geode/pull/404. Also acknowledgements to Galen
O'Sullivan for addressing locking issues in that PR.

This commit changes the storage model of Redis hashes and sets from one
region per each Redis key to a single hash region and single set region.
The Redis key is now also the region key and the data is stored in a Map
and Set respectively in the region. Currently, the backing values do not
implement Delta changes, however this will be a future optimization.

This also fixes the inability of Redis keys to contain other characters
commonly used, such as colons (':').

- Add `RedisLockService` which manages a lock per key within a single
  JVM. Locks are held in a WeakHasMap to allow for automatic cleanup
  (prior PR work, using a pure ConcurrentHashMap, ended up leaking
  memory since there is no straight-forward way to clean up unused
  keys/locks).
- Add new tests including concurrency tests for hashes and sets

Co-authored-by: Greg Green <ggreen@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Prasath Durairaj <prasathd@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

+import java.util.Set;
-   * all Regions created. The mapping is a {@link String} key which is the name of the
-   * {@link Region} created to hold the data to the RedisDataType it contains.
+   * all Regions created. The mapping is a {@link String} key which is the name of the {@link
+   * Region} created to hold the data to the RedisDataType it contains.
+  private final Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> hashRegion;
+  private final Region<ByteArrayWrapper, Set<ByteArrayWrapper>> setRegion;
+
-      ScheduledExecutorService expirationExecutor, RegionShortcut defaultShortcut) {
-    if (stringsRegion == null || hLLRegion == null || redisMetaRegion == null)
+      ScheduledExecutorService expirationExecutor, RegionShortcut defaultShortcut,
+      Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> hashRegion,
+      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> setRegion) {
+
+    this(stringsRegion, hLLRegion, redisMetaRegion, expirationsMap, expirationExecutor,
+        defaultShortcut, hashRegion, setRegion, GemFireCacheImpl.getInstance());
+  }
+
+  public RegionProvider(Region<ByteArrayWrapper, ByteArrayWrapper> stringsRegion,
+      Region<ByteArrayWrapper, HyperLogLogPlus> hLLRegion,
+      KeyRegistrar redisMetaRegion,
+      ConcurrentMap<ByteArrayWrapper, ScheduledFuture<?>> expirationsMap,
+      ScheduledExecutorService expirationExecutor, RegionShortcut defaultShortcut,
+      Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> hashRegion,
+      Region<ByteArrayWrapper, Set<ByteArrayWrapper>> setRegion, Cache cache) {
+    if (stringsRegion == null || hLLRegion == null || redisMetaRegion == null) {
+    }
+    this.hashRegion = hashRegion;
+    this.setRegion = setRegion;
-    this.cache = GemFireCacheImpl.getInstance();
+    this.cache = cache;
+    if (key == null) {
+      return null;
+    }
+
+
-      locked = lock.tryLock();
+      if (lock != null) {
+        locked = lock.tryLock();
+      }
-    if (type == null || type == RedisDataType.REDIS_PROTECTED)
+    if (type == RedisDataType.REDIS_PROTECTED) {
+    }
+        } else if (type == RedisDataType.REDIS_LIST) {
+          return this.destroyRegion(key, type);
+        } else if (type == RedisDataType.REDIS_SET) {
+          // remove the set
+          this.setRegion.remove(key);
+          return true;
+        } else if (type == RedisDataType.REDIS_HASH) {
+          // Check hash
+          this.hashRegion.remove(key);
+          return true;
-          return destroyRegion(key, type);
+          return false;
-        if (cancelExpiration)
+        if (cancelExpiration) {
-        else
+        } else {
-        if (lock != null)
+        }
+        if (lock != null) {
+        }
-    if (type == null || type == RedisDataType.REDIS_STRING || type == RedisDataType.REDIS_HLL)
+    if (type == null || type == RedisDataType.REDIS_STRING || type == RedisDataType.REDIS_HLL) {
+    }
-    if (r != null)
+    if (r != null) {
+    }
-          if (r == null)
+          if (r == null) {
+          }
+
+    String regionName = key.toString();
-                                                                                // without context
+          // without context
-              r = createRegionGlobally(stringKey);
+
+              r = createRegionGlobally(regionName);
+
-            if (hasTransaction)
+            if (hasTransaction) {
+            }
+  @SuppressWarnings("rawtypes")
-    if (r != null)
+    if (r != null) {
+    }
+  /**
+   * @return the hashRegion
+   */
+  public Region<ByteArrayWrapper, Map<ByteArrayWrapper, ByteArrayWrapper>> getHashRegion() {
+    return hashRegion;
+  }
+
+  /**
+   * @return the setRegion
+   */
+  public Region<ByteArrayWrapper, Set<ByteArrayWrapper>> getSetRegion() {
+    return setRegion;
+  }
+
-    if (type == null)
+    if (type == null) {
+    }
-    if (!canceled)
+    if (!canceled) {
+    }
-    if (type == null)
+    if (type == null) {
+    }
-    if (future == null)
+    if (future == null) {
+    }

INS26 INS40 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS74 INS59 INS83 INS83 INS74 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS44 INS44 INS79 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS8 INS43 INS43 INS74 INS42 INS43 INS43 INS74 INS42 INS74 INS42 INS74 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS74 INS42 INS17 INS74 INS42 INS74 INS42 INS43 INS42 INS21 INS21 INS25 INS60 INS42 INS45 INS65 INS43 INS43 INS74 INS41 INS65 INS43 INS43 INS74 INS41 INS25 MOV25 UPD66 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS74 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV32 INS43 INS43 INS74 INS43 INS43 INS74 INS42 INS8 INS7 INS7 INS27 INS8 MOV27 INS8 INS8 INS8 INS43 INS59 INS8 INS66 INS42 INS42 INS43 INS43 INS43 INS42 INS66 INS42 INS42 INS43 INS43 INS42 MOV27 INS8 INS8 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS43 INS43 MOV53 INS22 INS42 INS22 INS42 INS42 INS42 INS33 INS41 INS25 MOV41 INS41 INS41 INS42 INS42 INS32 MOV41 INS42 INS42 INS42 INS42 INS42 MOV41 MOV41 MOV41 MOV41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS33 INS27 INS8 INS42 INS42 INS42 INS33 MOV21 INS25 INS8 INS8 INS8 MOV27 MOV8 MOV25 MOV21 MOV21 MOV21 INS27 INS25 INS8 INS42 INS40 INS27 INS8 INS25 INS41 INS42 INS40 INS21 INS41 INS27 INS8 INS8 INS8 INS52 INS32 INS9 INS42 INS40 INS21 INS41 INS41 MOV21 INS22 INS42 INS42 INS32 INS9 INS9 INS52 INS42 INS22 INS42 INS42 INS52 INS42 UPD42 DEL42 DEL33 DEL27 DEL27 DEL41 DEL41 DEL41 DEL25