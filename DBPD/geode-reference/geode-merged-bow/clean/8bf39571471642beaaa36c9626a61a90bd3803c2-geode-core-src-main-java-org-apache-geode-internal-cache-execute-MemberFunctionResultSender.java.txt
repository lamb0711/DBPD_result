Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+
-  
+
-   * Have to combine next two construcotr in one and make a new class which will 
-   * send Results back.
+   * Have to combine next two construcotr in one and make a new class which will send Results back.
+   * 
-  public MemberFunctionResultSender(DM dm, 
-      MemberFunctionStreamingMessage msg, Function function) {
+  public MemberFunctionResultSender(DM dm, MemberFunctionStreamingMessage msg, Function function) {
-   * Have to combine next two construcotr in one and make a new class which will
-   * send Results back.
+   * Have to combine next two construcotr in one and make a new class which will send Results back.
-  public MemberFunctionResultSender(DM dm, ResultCollector rc,
-      Function function, boolean onlyLocal, boolean onlyRemote,
-      ServerToClientFunctionResultSender sender) {
+  public MemberFunctionResultSender(DM dm, ResultCollector rc, Function function, boolean onlyLocal,
+      boolean onlyRemote, ServerToClientFunctionResultSender sender) {
-      }
-      else {
+      } else {
-    }
-    else { // P2P
+    } else { // P2P
-        }
-        catch (QueryException e) {
+        } catch (QueryException e) {
+          throw new FunctionException(e);
+        } catch (ForceReattemptException e) {
+          throw new FunctionException(e);
+        } catch (InterruptedException e) {
-        catch (ForceReattemptException e) {
-          throw new FunctionException(e);
-        }
-        catch (InterruptedException e) {
-          throw new FunctionException(e);
-        }
-      }
-      else {
+      } else {
-        this.rc.addResult(this.dm.getDistributionManagerId(), oneResult);
-        this.rc.endResults();
-        this.localLastResultRecieved = true;
-      }
-        else {
-        //call a synchronized method as local node is also waiting to send lastResult 
-          lastResult(oneResult, rc, false, true, this.dm
-            .getDistributionManagerId());
+          this.rc.addResult(this.dm.getDistributionManagerId(), oneResult);
+          this.rc.endResults();
+          this.localLastResultRecieved = true;
+        } else {
+          // call a synchronized method as local node is also waiting to send lastResult
+          lastResult(oneResult, rc, false, true, this.dm.getDistributionManagerId());
-    FunctionStats.getFunctionStats(function.getId(), this.dm.getSystem()).incResultsReturned();    
+    FunctionStats.getFunctionStats(function.getId(), this.dm.getSystem()).incResultsReturned();
-  private synchronized void lastResult(Object oneResult,
-      ResultCollector collector, boolean lastRemoteResult,
-      boolean lastLocalResult, DistributedMember memberID) {
+  private synchronized void lastResult(Object oneResult, ResultCollector collector,
+      boolean lastRemoteResult, boolean lastLocalResult, DistributedMember memberID) {
-    if(lastRemoteResult){
+    if (lastRemoteResult) {
-    }    
-    if(lastLocalResult) {
+    }
+    if (lastLocalResult) {
-      
+
-      }
-      else {
+      } else {
-    }
-    else { // P2P
+    } else { // P2P
-      }
-      else {
+      } else {
-  public void lastResult(Object oneResult, boolean completelyDone,
-      ResultCollector reply, DistributedMember memberID) {
+  public void lastResult(Object oneResult, boolean completelyDone, ResultCollector reply,
+      DistributedMember memberID) {
-        }
-        else {
+        } else {
-      }
-      else {
+      } else {
-    }
-    else { // P2P
+    } else { // P2P
-        }
-        else {
-        //call a synchronized method as local node is also waiting to send lastResult 
+        } else {
+          // call a synchronized method as local node is also waiting to send lastResult
-      }
-      else {
+      } else {
-      
+
-      if(logger.isDebugEnabled()){
-        logger.debug("MemberFunctionResultSender sending result from local node to client {}", oneResult);
+      if (logger.isDebugEnabled()) {
+        logger.debug("MemberFunctionResultSender sending result from local node to client {}",
+            oneResult);
-    }
-    else { // P2P
+    } else { // P2P
-        }
-        catch (QueryException e) {
+        } catch (QueryException e) {
+          throw new FunctionException(e);
+        } catch (ForceReattemptException e) {
+          throw new FunctionException(e);
+        } catch (InterruptedException e) {
-        catch (ForceReattemptException e) {
-          throw new FunctionException(e);
-        }
-        catch (InterruptedException e) {
-          throw new FunctionException(e);
-        }
-      }
-      else {
+      } else {
-    //incrementing result sent stats.
+      // incrementing result sent stats.
-  
-  
+
+
-    InternalFunctionException iFunxtionException = new InternalFunctionException(
-        exception);
+    InternalFunctionException iFunxtionException = new InternalFunctionException(exception);
-  
+
-    ((LocalResultCollector)this.rc).setException(exception);
-    //this.lastResult(exception);
-    logger.info(LocalizedMessage.create(
-        LocalizedStrings.MemberResultSender_UNEXPECTED_EXCEPTION_DURING_FUNCTION_EXECUTION_ON_LOCAL_NODE), exception);
+    ((LocalResultCollector) this.rc).setException(exception);
+    // this.lastResult(exception);
+    logger.info(
+        LocalizedMessage.create(
+            LocalizedStrings.MemberResultSender_UNEXPECTED_EXCEPTION_DURING_FUNCTION_EXECUTION_ON_LOCAL_NODE),
+        exception);
-  
+
-  public boolean isLocallyExecuted()
-  {
+  public boolean isLocallyExecuted() {

UPD66 UPD66 DEL66 DEL66