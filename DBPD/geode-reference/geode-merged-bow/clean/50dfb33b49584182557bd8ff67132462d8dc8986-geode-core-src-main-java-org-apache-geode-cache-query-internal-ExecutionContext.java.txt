GEODE-6588: Cleanup generics and other static analyzer issues. (#3391)


-import java.util.Iterator;
-  private final Stack scopes = new Stack();
+  private final Stack<QScope> scopes = new Stack<>();
-  private Map dependencyGraph = new HashMap();
+  private Map<CompiledValue, Set<RuntimeIterator>> dependencyGraph = new HashMap<>();
-  private final Map itrDefToIndpndtRuntimeItrMap = new HashMap();
+  private final Map<CompiledIteratorDef, Set<RuntimeIterator>> itrDefToIndpndtRuntimeItrMap =
+      new HashMap<>();
-  private final Map indpndtItrToRgnMap = new HashMap();
+  private final Map<RuntimeIterator, String> indpndtItrToRgnMap = new HashMap<>();
-    return this.cache.getCachePerfStats();
+    return cache.getCachePerfStats();
-    Set ds = getDependencySet(cv, false);
+    Set<RuntimeIterator> ds = getDependencySet(cv, false);
-  public Set addDependencies(CompiledValue cv, Set set /* <RuntimeIterator> */) {
+  public Set addDependencies(CompiledValue cv, Set<RuntimeIterator> set) {
-    Set ds = getDependencySet(cv, false);
+    Set<RuntimeIterator> ds = getDependencySet(cv, false);
-    Set setRItr = getDependencySet(cv, true);
+    Set<RuntimeIterator> setRItr = getDependencySet(cv, true);
-      // int currScopeID = this.scopes.size();
-      for (Iterator itr = setRItr.iterator(); itr.hasNext();) {
-        RuntimeIterator ritr = (RuntimeIterator) itr.next();
+      for (RuntimeIterator ritr : setRItr) {
-  Set getDependencySet(CompiledValue cv, boolean readOnly) {
-    Set set = (Set) this.dependencyGraph.get(cv);
+  Set<RuntimeIterator> getDependencySet(CompiledValue cv, boolean readOnly) {
+    Set<RuntimeIterator> set = dependencyGraph.get(cv);
-      set = new HashSet(1);
-      this.dependencyGraph.put(cv, set);
+      set = new HashSet<>(1);
+      dependencyGraph.put(cv, set);
-  public void setDependencyGraph(Map dependencyGraph) {
+  public void setDependencyGraph(Map<CompiledValue, Set<RuntimeIterator>> dependencyGraph) {
-    if (index > this.bindArguments.length)
+    if (index > bindArguments.length)
-    return this.bindArguments[index - 1];
+    return bindArguments[index - 1];
-    QScope currentScope = this.currentScope();
+    QScope currentScope = currentScope();
-    CompiledValue value = null;
+    CompiledValue value;
-      QScope scope = (QScope) scopes.get(i);
+      QScope scope = scopes.get(i);
-    return ++this.scopeNum;
+    return ++scopeNum;
-  public QScope currentScope() {
-    return (QScope) scopes.peek();
+  QScope currentScope() {
+    return scopes.peek();
-    Iterator iter = currentScope().getIterators().iterator();
-    List list = new ArrayList();
+    List<RuntimeIterator> list = new ArrayList<>();
-    while (iter.hasNext()) {
-      RuntimeIterator iteratorInCurrentScope = (RuntimeIterator) iter.next();
-      Set itrSet =
-          (Set) itrDefToIndpndtRuntimeItrMap.get(iteratorInCurrentScope.getCmpIteratorDefn());
+    for (RuntimeIterator iteratorInCurrentScope : currentScope().getIterators()) {
+      Set<RuntimeIterator> itrSet =
+          itrDefToIndpndtRuntimeItrMap.get(iteratorInCurrentScope.getCmpIteratorDefn());
-          && ((RuntimeIterator) itrSet.iterator().next()) == rIter) {
+          && itrSet.iterator().next() == rIter) {
-    return this.cache;
+    return cache;
-    List hits = new ArrayList(2);
+    List<RuntimeIterator> hits = new ArrayList<>(2);
-      QScope scope = (QScope) scopes.get(i);
-      Iterator iter = scope.getIterators().iterator();
-      while (iter.hasNext()) {
-        RuntimeIterator itr = (RuntimeIterator) iter.next();
+      QScope scope = scopes.get(i);
+      for (RuntimeIterator itr : scope.getIterators()) {
-      return (RuntimeIterator) hits.get(0);
+      return hits.get(0);
-      if (mustBeMethod)
+      if (mustBeMethod) {
+      }
-    Assert.assertTrue(hits.isEmpty());
-  public RuntimeIterator findRuntimeIterator(CompiledValue expr) {
+  RuntimeIterator findRuntimeIterator(CompiledValue expr) {
-        CompiledValue rec = ((CompiledPath) path).getReceiver();
+        CompiledValue rec = path.getReceiver();
-  void computeUltimateDependencies(CompiledValue cv, Set set) {
-    Set dependencySet = this.getDependencySet(cv, true /* readOnly */);
-    if (dependencySet != Collections.emptySet()) {
-      Iterator iter = dependencySet.iterator();
-      RuntimeIterator rIter;
-      while (iter.hasNext()) {
-        rIter = (RuntimeIterator) iter.next();
-        Set indRuntimeIterators =
-            (Set) this.itrDefToIndpndtRuntimeItrMap.get(rIter.getCmpIteratorDefn());
-        if (indRuntimeIterators != null) {
-          set.addAll(indRuntimeIterators);
-        }
+  void computeUltimateDependencies(CompiledValue cv, Set<RuntimeIterator> set) {
+    Set<RuntimeIterator> dependencySet = getDependencySet(cv, true);
+    for (RuntimeIterator rIter : dependencySet) {
+      Set<RuntimeIterator> indRuntimeIterators =
+          itrDefToIndpndtRuntimeItrMap.get(rIter.getCmpIteratorDefn());
+      if (indRuntimeIterators != null) {
+        set.addAll(indRuntimeIterators);
-      throws AmbiguousNameException, TypeMismatchException, NameResolutionException {
-    Set set = new HashSet();
-    this.computeUltimateDependencies(itrDef, set);
+      throws TypeMismatchException, NameResolutionException {
+    Set<RuntimeIterator> set = new HashSet<>();
+    computeUltimateDependencies(itrDef, set);
-        this.indpndtItrToRgnMap.put(itr, rgnPath);
+        indpndtItrToRgnMap.put(itr, rgnPath);
-          this.indpndtItrToRgnMap.put(itr, rgnPath = ((Region) rgn).getFullPath());
+          indpndtItrToRgnMap.put(itr, rgnPath = ((Region) rgn).getFullPath());
-    this.itrDefToIndpndtRuntimeItrMap.put(itrDef, set);
+    itrDefToIndpndtRuntimeItrMap.put(itrDef, set);
-        itr = (RuntimeIterator) set.iterator().next();
-        if (itr.getScopeID() == this.currentScope().getScopeID()) {
-          rgnPath = (String) this.indpndtItrToRgnMap.get(itr);
+        itr = set.iterator().next();
+        if (itr.getScopeID() == currentScope().getScopeID()) {
+          rgnPath = indpndtItrToRgnMap.get(itr);
-        mgr = IndexUtils.getIndexManager(this.cache, this.cache.getRegion(rgnPath), false);
+        mgr = IndexUtils.getIndexManager(cache, cache.getRegion(rgnPath), false);
-        if ((null == mgr) && (null != this.bukRgn)) {
+        if ((null == mgr) && (null != bukRgn)) {
-          mgr = IndexUtils.getIndexManager(this.cache,
-              this.cache.getRegion(this.bukRgn.getFullPath()), false);
+          mgr = IndexUtils.getIndexManager(cache, cache.getRegion(bukRgn.getFullPath()), false);
-    String tempIndexID = null;
+    String tempIndexID;
-  public List getAllIndependentIteratorsOfCurrentScope() {
-    List independentIterators = new ArrayList(this.indpndtItrToRgnMap.size());
-    Iterator itr = this.indpndtItrToRgnMap.keySet().iterator();
-    int currentScopeId = this.currentScope().getScopeID();
-    while (itr.hasNext()) {
-      RuntimeIterator rIter = (RuntimeIterator) itr.next();
+  List getAllIndependentIteratorsOfCurrentScope() {
+    List<RuntimeIterator> independentIterators = new ArrayList<>(indpndtItrToRgnMap.size());
+    int currentScopeId = currentScope().getScopeID();
+    for (RuntimeIterator rIter : indpndtItrToRgnMap.keySet()) {
-    return (String) this.indpndtItrToRgnMap.get(riter);
+    return indpndtItrToRgnMap.get(riter);
-      throws AmbiguousNameException, TypeMismatchException, NameResolutionException {
+      throws TypeMismatchException, NameResolutionException {
-    Set set = new HashSet();
-    this.computeUltimateDependencies(itrDef, set);
+    Set<RuntimeIterator> set = new HashSet<>();
+    computeUltimateDependencies(itrDef, set);
-    this.itrDefToIndpndtRuntimeItrMap.put(itrDef, set);
+    itrDefToIndpndtRuntimeItrMap.put(itrDef, set);
-    return this.scopeNum;
+    return scopeNum;
-    this.scopes.clear();
+    scopes.clear();
-    return this.bukRgn;
+    return bukRgn;
-    return this.pr;
+    return pr;
-  public boolean isBindArgsSet() {
-    return this.bindArguments != null;
+  boolean isBindArgsSet() {
+    return bindArguments != null;
-  public void setCurrentProjectionField(Object field) {
+  void setCurrentProjectionField(Object field) {
-  public Object getCurrentProjectionField() {
-    return this.currentProjectionField;
+  Object getCurrentProjectionField() {
+    return currentProjectionField;
-  public boolean getIsPRQueryNode() {
-    return this.isPRQueryNode;
+  boolean getIsPRQueryNode() {
+    return isPRQueryNode;
-   * @throws if {@link #getQueryCanceledException} doesn't return {@code null} then throw that
-   *         {@link CacheRuntimeException}, otherwise throw {@link QueryExecutionCanceledException}
+   * @throws CacheRuntimeException if {@link #getQueryCanceledException} doesn't return {@code null}
+   * @throws QueryExecutionCanceledException otherwise

INS74 INS74 MOV59 INS74 MOV59 INS74 MOV59 INS74 MOV43 MOV43 MOV43 MOV43 INS43 INS74 UPD42 MOV43 INS43 INS74 UPD42 MOV43 MOV43 MOV43 UPD42 INS60 INS74 MOV60 MOV43 INS43 INS74 INS70 INS74 INS70 INS70 INS65 INS74 INS42 MOV43 INS43 INS74 INS42 MOV43 INS43 INS74 INS74 INS74 MOV59 MOV43 INS43 INS74 INS74 UPD42 MOV42 INS74 MOV43 INS43 INS74 MOV32 INS74 INS44 MOV32 MOV8 INS42 INS74 MOV43 MOV43 INS74 INS44 INS42 MOV8 INS74 MOV43 INS74 INS44 INS32 MOV8 INS32 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS66 MOV43 INS42 MOV43 INS42 MOV43 MOV43 INS42 MOV43 INS43 UPD42 MOV42 MOV43 INS43 MOV43 INS43 INS70 MOV43 INS43 INS32 INS42 MOV43 MOV43 INS40 INS42 INS42 MOV43 MOV43 MOV43 INS42 MOV43 MOV43 MOV43 MOV43 INS43 INS42 MOV43 MOV43 INS42 MOV43 MOV43 INS43 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV42 MOV42 MOV43 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS44 INS42 MOV8 INS42 INS42 MOV42 MOV42 MOV43 INS74 INS74 INS74 INS70 MOV32 INS8 UPD42 MOV42 INS74 INS74 INS74 INS42 INS74 MOV43 INS42 INS42 MOV32 MOV43 MOV43 MOV43 MOV32 MOV43 INS44 MOV32 MOV8 MOV53 MOV43 MOV43 MOV32 MOV43 MOV43 INS42 MOV43 INS74 MOV32 MOV32 INS43 INS42 INS42 MOV43 UPD42 MOV42 INS42 MOV32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 MOV42 MOV42 INS42 INS42 INS42 DEL40 DEL26 DEL52 DEL42 DEL22 DEL60 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL32 DEL24 DEL52 DEL42 DEL22 DEL32 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL33 DEL42 DEL43 DEL11 DEL52 DEL42 DEL22 DEL83 DEL11 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL11 DEL11 DEL36 DEL42 DEL42 DEL32 DEL61 DEL52 DEL42 DEL22 DEL42 DEL43 DEL11 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL11 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL83 DEL42 DEL43 DEL42 DEL11 DEL36 DEL52 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL52 DEL42 DEL22 DEL11 DEL42 DEL42 DEL42 DEL32 DEL27 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL61 DEL8 DEL25 DEL42 DEL43 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL11 DEL52 DEL52 DEL42 DEL22 DEL32 DEL11 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL83 DEL52 DEL42 DEL22 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL52 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL32 DEL61 DEL42 DEL43 DEL52 DEL42 DEL22 DEL32 DEL11 DEL42 DEL43 DEL52 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL83 DEL83 DEL52 DEL42 DEL22 DEL83 DEL52 DEL42 DEL22 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65