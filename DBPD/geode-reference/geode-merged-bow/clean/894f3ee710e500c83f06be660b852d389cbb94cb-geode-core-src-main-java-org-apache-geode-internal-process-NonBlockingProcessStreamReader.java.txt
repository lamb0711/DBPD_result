GEODE-3413: overhaul launcher and process classes and tests

This is primarily an overall of all ServerLauncher and LocatorLauncher
tests and org.apache.geode.internal.process tests. The main classes in
org.apachage.geode.internal.process package are also cleaned up.

In addition, several bugs involving these classes and tests are fixed.

Here is the complete list of tickets that are resolved in this overhaul:

* GEODE-1229: LocatorLauncherRemoteJUnitTest.testStartOverwritesStalePidFile
* GEODE-2791: LocatorLauncherAssemblyIntegrationTest.testLocatorStopsWhenJmxPortIsNonZero fails intermittently with AssertionError
* GEODE-1308: CI failure: LocatorLauncherTest.testSetBindAddressToNonLocalHost
* GEODE-1309: CI failure: ServerLauncherTest.testSetServerBindAddressToNonLocalHost
* GEODE-3193: locator pid file is removed even if there was a problem while shutting down
* GEODE-3413: Overhaul launcher tests and process tests
* GEODE-3414: Cleanup org.apache.geode.internal.process package

Note I moved all useful tests from LocatorLauncherAssemblyIntegrationTest
into the other launcher tests in geode-core.

-public class NonBlockingProcessStreamReader extends ProcessStreamReader {
+class NonBlockingProcessStreamReader extends ProcessStreamReader {
-  protected NonBlockingProcessStreamReader(final Builder builder) {
+  private final StopWatch continueReading;
+
+  private StringBuilder stringBuilder;
+  private int character;
+  private boolean ready;
+
+  NonBlockingProcessStreamReader(final Builder builder) {
-    continueReadingMillis = builder.continueReadingMillis;
+
+    this.continueReadingMillis = builder.continueReadingMillis;
+    this.continueReading = new StopWatch();
+    this.stringBuilder = new StringBuilder();
+    this.character = 0;
+    this.ready = false;
-    final boolean isDebugEnabled = logger.isDebugEnabled();
-    if (isDebugEnabled) {
-      logger.debug("Running {}", this);
-    }
-    StopWatch continueReading = new StopWatch();
-    BufferedReader reader = null;
-    try {
-      reader = new BufferedReader(new InputStreamReader(inputStream));
-      StringBuilder sb = new StringBuilder();
-      boolean ready = false;
-      int ch = 0;
-      while (ch != -1) {
-        while ((ready = reader.ready()) && (ch = reader.read()) != -1) {
-          sb.append((char) ch);
-          if ((char) ch == '\n') {
-            this.inputListener.notifyInputLine(sb.toString());
-            sb = new StringBuilder();
-          }
-        }
-        if (!ready) {
-          if (!ProcessUtils.isProcessAlive(process)) {
-            if (!continueReading.isRunning()) {
-              continueReading.start();
-            } else if (continueReading.elapsedTimeMillis() > continueReadingMillis) {
-              return;
-            }
-          }
-          Thread.sleep(10);
+    try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
+      while (character != -1) {
+        readWhileReady(reader);
+        if (shouldTerminate()) {
+          break;
-      if (isDebugEnabled) {
+      if (logger.isDebugEnabled()) {
-      if (isDebugEnabled) {
+      if (logger.isDebugEnabled()) {
-    } finally {
-      try {
-        reader.close();
-      } catch (IOException e) {
-        if (isDebugEnabled) {
-          logger.debug("Failure closing buffered input stream reader: {}", e.getMessage(), e);
-        }
+    }
+  }
+
+  private boolean shouldTerminate() throws InterruptedException {
+    if (!ProcessUtils.isProcessAlive(process)) {
+      if (!continueReading.isRunning()) {
+        continueReading.start();
+      } else if (continueReading.elapsedTimeMillis() > continueReadingMillis) {
+        return true;
-      if (isDebugEnabled) {
-        logger.debug("Terminating {}", this);
+    }
+    Thread.sleep(10);
+    return false;
+  }
+
+  /**
+   * This is a hot reader while there are characters ready to read. As soon as there are no more
+   * characters to read, it returns and the loop invokes shouldTerminate which has a 10 millisecond
+   * sleep until there are more characters ready to read.
+   */
+  private void readWhileReady(BufferedReader reader) throws IOException {
+    while ((ready = reader.ready()) && (character = reader.read()) != -1) {
+      stringBuilder.append((char) character);
+      if ((char) character == '\n') {
+        this.inputListener.notifyInputLine(stringBuilder.toString());
+        stringBuilder = new StringBuilder();

INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 INS83 INS83 MOV43 INS59 INS83 MOV43 INS59 INS83 INS39 INS59 INS83 INS39 INS59 INS42 MOV44 INS8 MOV78 INS83 INS39 INS42 INS8 INS83 INS39 INS42 INS43 MOV8 INS29 INS83 INS39 INS42 INS44 INS43 MOV8 INS42 INS42 INS42 UPD42 MOV42 MOV46 INS21 INS21 INS21 MOV21 INS21 INS54 UPD42 MOV42 INS41 INS65 INS43 INS42 INS42 INS7 INS7 INS7 INS7 INS58 INS8 MOV12 MOV12 INS9 INS66 INS66 INS66 INS42 INS22 INS40 INS22 MOV14 INS22 MOV14 INS22 INS34 INS22 INS9 MOV43 INS59 INS61 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 UPD42 MOV42 MOV14 MOV27 INS8 UPD42 MOV21 INS25 MOV32 INS32 UPD42 INS32 INS8 INS42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 INS42 INS10 INS9 UPD42 UPD42 DEL83 DEL42 DEL42 DEL42 DEL42 DEL38 DEL25 DEL83 DEL42 DEL42 DEL40 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL83 DEL39 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL42 DEL59 DEL60 DEL42 DEL33 DEL59 DEL60 DEL42 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL34 DEL59 DEL60 DEL61 DEL8 DEL8 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL45 DEL52 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31