Revert "GEODE-7808: standardize on use of HostAndPort to form client-side connections (#4743)" (#4761)

This reverts commit 0af626462642c6352840cd6e81a5265c74045c7f.
That commit seems to have caused a severe performance drop in several
Benchmark tests:

org.apache.geode.benchmark.tests.PartitionedGetBenchmark
              average ops/second  Baseline:    981794.46  Test:     41239.82  Difference:  -95.8%
org.apache.geode.benchmark.tests.ReplicatedGetBenchmark
              average ops/second  Baseline:    972769.18  Test:     41299.96  Difference:  -95.8%
org.apache.geode.benchmark.tests.PartitionedNonIndexedQueryBenchmark
              average ops/second  Baseline:        90.05  Test:        70.52  Difference:  -21.7%
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
-  private static final Map<HostAndPort, Short> serverVersions =
+  private static final Map<InetSocketAddress, Short> serverVersions =
-  public void stop(HostAndPort addr) throws java.net.ConnectException {
+  public void stop(InetAddress addr, int port) throws java.net.ConnectException {
-      requestToServer(addr, request, DEFAULT_REQUEST_TIMEOUT);
+      requestToServer(addr, port, request, DEFAULT_REQUEST_TIMEOUT);
-          "TcpClient.stop(): exception connecting to locator " + addr + ex);
+          "TcpClient.stop(): exception connecting to locator " + addr + ":" + port + ": " + ex);
-  public String[] getInfo(HostAndPort addr) {
+  public String[] getInfo(InetAddress addr, int port) {
-          (InfoResponse) requestToServer(addr, request, DEFAULT_REQUEST_TIMEOUT);
+          (InfoResponse) requestToServer(addr, port, request, DEFAULT_REQUEST_TIMEOUT);
-          "TcpClient.getInfo(): exception connecting to locator " + addr + ": " + ex);
+          "TcpClient.getInfo(): exception connecting to locator " + addr + ":" + port + ": " + ex);
+   * @param port The locator's tcp/ip port
-  public Object requestToServer(HostAndPort addr, Object request, int timeout)
+  public Object requestToServer(InetAddress addr, int port, Object request, int timeout)
-    return requestToServer(addr, request, timeout, true);
+    return requestToServer(addr, port, request, timeout, true);
+   * @param port The locator's tcp/ip port
+   * @param request The request message
+   * @param timeout Timeout for sending the message and receiving a reply
+   * @param replyExpected Whether to wait for a reply
+   * @return the reply
+   */
+  public Object requestToServer(InetAddress addr, int port, Object request, int timeout,
+      boolean replyExpected) throws IOException, ClassNotFoundException {
+    InetSocketAddress ipAddr;
+    if (addr == null) {
+      ipAddr = new InetSocketAddress(port);
+    } else {
+      ipAddr = new InetSocketAddress(addr, port); // fix for bug 30810
+    }
+    return requestToServer(ipAddr, request, timeout, replyExpected);
+  }
+
+  /**
+   * Send a request to a Locator
+   *
+   * @param ipAddr The locator's inet socket address
-  public Object requestToServer(HostAndPort addr, Object request, int timeout,
+  public Object requestToServer(InetSocketAddress ipAddr, Object request, int timeout,
-    short serverVersion = getServerVersion(addr, timeout);
+    short serverVersion = getServerVersion(ipAddr, timeout);
-    logger.debug("TcpClient sending {} to {}", request, addr);
+    logger.debug("TcpClient sending {} to {}", request, ipAddr);
-        socketCreator.forCluster().connect(addr, (int) newTimeout, null);
+        socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), (int) newTimeout, null, false);
-          EOFException eof = new EOFException("Locator at " + addr
+          EOFException eof = new EOFException("Locator at " + ipAddr
-          if (!sock.isClosed() && !socketCreator.forCluster().useSSL()) {
+          if (!sock.isClosed() && !socketCreator.useSSL()) {
-  private Short getServerVersion(HostAndPort addr, int timeout)
+  private Short getServerVersion(InetSocketAddress ipAddr, int timeout)
-      serverVersion = serverVersions.get(addr);
+      serverVersion = serverVersions.get(ipAddr);
-      sock = socketCreator.forCluster().connect(addr, timeout, null);
+      sock = socketCreator.connect(ipAddr.getAddress(), ipAddr.getPort(), timeout, null, false);
-          serverVersions.put(addr, serverVersion);
+          serverVersions.put(ipAddr, serverVersion);
-      serverVersions.put(addr, Version.GFE_57.ordinal());
+      serverVersions.put(ipAddr, Version.GFE_57.ordinal());

INS26 INS26 INS40 INS40 INS31 UPD74 INS44 INS44 INS44 INS29 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS43 INS8 UPD43 UPD43 INS39 INS42 UPD43 INS39 INS42 INS65 UPD43 INS39 INS42 INS65 MOV65 INS65 INS65 INS65 INS65 INS65 INS42 INS43 INS42 INS39 INS42 INS43 INS42 INS39 INS42 INS39 INS42 INS42 INS42 INS60 INS25 INS41 INS65 UPD43 UPD42 UPD43 UPD42 UPD42 UPD42 UPD42 INS42 INS66 UPD42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS66 UPD42 UPD42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 UPD42 MOV43 INS7 INS7 UPD42 MOV42 INS42 INS32 INS32 INS9 INS42 INS42 INS14 INS42 INS14 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 MOV43 INS43 INS42 INS43 INS42 INS42 UPD42 MOV42 INS42 INS32 INS32 INS9 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 UPD42 MOV43 MOV42 UPD42 DEL32 DEL42 DEL32 DEL32