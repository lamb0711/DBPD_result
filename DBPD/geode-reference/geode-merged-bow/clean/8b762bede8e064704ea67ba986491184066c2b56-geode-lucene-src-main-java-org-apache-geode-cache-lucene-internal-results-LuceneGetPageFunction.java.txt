GEODE-2538: Don't deserialize values on the server when getting results

If values on the server are in serialized form, leave them that way and
only deserialize the values on the clients.

This is implemented by having the LuceneGetPageFunction extract the
serialized value and return the results in a new PageResults class,
which handles the deserialization and upwrapping of the value if
necessary.

-import org.apache.geode.cache.EntryDestroyedException;
-import org.apache.geode.cache.Region.Entry;
-import org.apache.geode.cache.execute.FunctionException;
-import org.apache.geode.cache.execute.ResultSender;
-import org.apache.geode.cache.lucene.LuceneQueryException;
-import org.apache.geode.cache.lucene.LuceneQueryProvider;
-import org.apache.geode.cache.lucene.LuceneService;
-import org.apache.geode.cache.lucene.LuceneServiceProvider;
-import org.apache.geode.cache.lucene.internal.LuceneIndexImpl;
-import org.apache.geode.cache.lucene.internal.LuceneIndexStats;
-import org.apache.geode.cache.lucene.internal.distributed.CollectorManager;
-import org.apache.geode.cache.lucene.internal.distributed.LuceneFunctionContext;
-import org.apache.geode.cache.lucene.internal.distributed.TopEntriesCollector;
-import org.apache.geode.cache.lucene.internal.distributed.TopEntriesCollectorManager;
-import org.apache.geode.cache.lucene.internal.repository.IndexRepository;
-import org.apache.geode.cache.lucene.internal.repository.IndexResultCollector;
-import org.apache.geode.cache.lucene.internal.repository.RepositoryManager;
-import org.apache.geode.internal.cache.BucketNotFoundException;
-import org.apache.geode.internal.cache.execute.InternalFunctionInvocationTargetException;
+import org.apache.geode.internal.cache.EntrySnapshot;
+import org.apache.geode.internal.cache.Token;
-import org.apache.lucene.search.Query;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
+import java.util.List;
-    Map<Object, Object> results = new HashMap<>(keys.size());
+    List<PageEntry> results = new PageResults(keys.size());
-      final Entry entry = region.getEntry(key);
-      try {
-        Object value = entry == null ? null : entry.getValue();
-        if (value != null) {
-          results.put(key, value);
-        }
-      } catch (EntryDestroyedException e) {
-        // skip
+      PageEntry entry = getEntry(region, key);
+      if (entry != null) {
+        results.add(entry);
+  protected PageEntry getEntry(final Region region, final Object key) {
+    final EntrySnapshot entry = (EntrySnapshot) region.getEntry(key);
+    if (entry == null) {
+      return null;
+    }
+
+    final Object value = entry.getRegionEntry().getValue(null);
+    if (value == null || Token.isInvalidOrRemoved(value)) {
+      return null;
+    }
+
+    return new PageEntry(key, value);
+  }
+

MOV26 UPD40 UPD40 UPD40 INS31 INS83 INS43 INS42 INS44 INS44 INS8 INS42 INS83 INS43 INS42 INS83 MOV43 INS42 MOV60 INS25 INS60 INS25 INS41 UPD74 INS8 INS42 UPD43 MOV27 INS8 INS83 MOV43 INS59 INS27 INS8 INS14 UPD43 UPD43 MOV60 MOV25 UPD42 INS11 INS41 INS42 INS32 INS27 INS32 INS41 INS43 INS42 INS42 UPD42 UPD42 INS43 INS43 INS43 MOV32 INS33 INS32 INS42 INS33 INS42 INS33 INS42 INS42 INS42 INS33 INS42 UPD42 MOV42 INS42 UPD42 INS32 UPD42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL74 DEL33 DEL32 DEL16 DEL42 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8