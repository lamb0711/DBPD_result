GEODE-37 changed import to org.apache.geode

-package com.gemstone.gemfire.cache;
+package org.apache.geode.cache;
-import com.gemstone.gemfire.cache.client.ClientRegionFactory;
-import com.gemstone.gemfire.cache.client.Pool;
-import com.gemstone.gemfire.cache.client.SubscriptionNotEnabledException;
-import com.gemstone.gemfire.cache.query.FunctionDomainException;
-import com.gemstone.gemfire.cache.query.NameResolutionException;
-import com.gemstone.gemfire.cache.query.QueryInvalidException;
-import com.gemstone.gemfire.cache.query.QueryInvocationTargetException;
-import com.gemstone.gemfire.cache.query.QueryService;
-import com.gemstone.gemfire.cache.query.SelectResults;
-import com.gemstone.gemfire.cache.query.TypeMismatchException;
-import com.gemstone.gemfire.cache.snapshot.RegionSnapshotService;
+import org.apache.geode.cache.client.ClientRegionFactory;
+import org.apache.geode.cache.client.Pool;
+import org.apache.geode.cache.client.SubscriptionNotEnabledException;
+import org.apache.geode.cache.query.FunctionDomainException;
+import org.apache.geode.cache.query.NameResolutionException;
+import org.apache.geode.cache.query.QueryInvalidException;
+import org.apache.geode.cache.query.QueryInvocationTargetException;
+import org.apache.geode.cache.query.QueryService;
+import org.apache.geode.cache.query.SelectResults;
+import org.apache.geode.cache.query.TypeMismatchException;
+import org.apache.geode.cache.snapshot.RegionSnapshotService;
- * are provided by the inner interface, {@link com.gemstone.gemfire.cache.Region.Entry}.
+ * are provided by the inner interface, {@link org.apache.geode.cache.Region.Entry}.
- * Each {@link com.gemstone.gemfire.cache.Cache} defines a single top region called the root region.
+ * Each {@link org.apache.geode.cache.Cache} defines a single top region called the root region.
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for <code>Scope.GLOBAL</code>
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for <code>Scope.GLOBAL</code>
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for <code>Scope.GLOBAL</code>
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for <code>Scope.GLOBAL</code>
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
-   * @throws com.gemstone.gemfire.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL
+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock for Scope.GLOBAL

UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40