[GEODE-585]: Simplify hash index code
Refactored hash index and hash index set
Using modified versions of the fastutil methods for adding and finding index positions for objects
Added hash index set unit tests
Removes PrimeFinder, ObjectProcedure, and HashIndexStrategy

-    entriesSet = new HashIndexSet(entryToValuesMap, entryToOldKeysMap, internalIndexStats);
+    entriesSet = new HashIndexSet();
-            entriesSet.remove(oldKey, entry, true);
+            removeFromEntriesSet(oldKey, entry, true);
-      this.entriesSet.add(newKey, entry);
+      
+      // Before adding the entry with new value, remove it from reverse map and
+      // using the oldValue remove entry from the forward map.
+      // Reverse-map is used based on the system property
+      Object oldKey = getOldKey(entry);
+      
+      int indexSlot = this.entriesSet.add(newKey, entry);
+      
+      if (indexSlot >= 0) {
+        // Update the reverse map
+        if (IndexManager.isObjectModificationInplace()) {
+          this.entryToValuesMap.put(entry, newKey);
+        }
+        if (newKey != null && oldKey != null) {
+          removeFromEntriesSet(oldKey, entry, false, indexSlot);
+        }
+        // Update Stats after real addition
+        internalIndexStats.incNumValues(1);
+
+      }
+  
+  private Object getOldKey(RegionEntry entry) throws TypeMismatchException {
+    Object oldKey = null;
+    if (IndexManager.isObjectModificationInplace() && this.entryToValuesMap.containsKey(entry)) {
+      oldKey = this.entryToValuesMap.get(entry);
+    } else if (!IndexManager.isObjectModificationInplace() && this.entryToOldKeysMap != null) {
+      Map oldKeyMap = this.entryToOldKeysMap.get();
+      if (oldKeyMap != null) {
+        oldKey = TypeUtils.indexKeyFor(oldKeyMap.get(entry));
+      }
+    }
+    return oldKey;
+  }
-    boolean found = false;
-      found = this.entriesSet.remove(newKey, entry, updateReverseMap);       
+      removeFromEntriesSet(newKey, entry, updateReverseMap);
+  
+  private void removeFromEntriesSet(Object newKey, RegionEntry entry, boolean updateReverseMap) {
+    removeFromEntriesSet(newKey, entry, updateReverseMap, -1);
+  }
+  
+  private void removeFromEntriesSet(Object newKey, RegionEntry entry, boolean updateReverseMap, int ignoreThisSlot) {
+    if (this.entriesSet.remove(newKey, entry, ignoreThisSlot)) {
+      if (updateReverseMap && IndexManager.isObjectModificationInplace()) {
+        entryToValuesMap.remove(entry);
+      }
+      internalIndexStats.incNumValues(-1);
+    }
+  }
-    this.entriesSet.setHashIndexStrategy(new HashStrategy(
-        (IMQEvaluator) evaluator));
+    this.entriesSet.setEvaluator((HashIndex.IMQEvaluator)evaluator);
-        
+          key = ((HashIndex.IMQEvaluator)evaluator).evaluateKey(obj);
-	int numKeys = (int) this.internalIndexStats.getNumberOfKeys();
-	if (numKeys > 0) {
-		this.internalIndexStats.incNumKeys(-numKeys);
-	}
-	int numValues = (int) this.internalIndexStats.getNumberOfValues();
-	if (numValues > 0) {
-		this.internalIndexStats.incNumValues(-numValues);
-	}
-	int updates = (int) this.internalIndexStats.getNumUpdates();
-	if (updates > 0) {
-		this.internalIndexStats.incNumUpdates(updates);
-	}
-	this.initializeIndex(true);
+    if (IndexManager.isObjectModificationInplace()) {
+      entryToValuesMap.clear();
+    }
+    int numKeys = (int) this.internalIndexStats.getNumberOfKeys();
+    if (numKeys > 0) {
+      this.internalIndexStats.incNumKeys(-numKeys);
+    }
+    int numValues = (int) this.internalIndexStats.getNumberOfValues();
+    if (numValues > 0) {
+      this.internalIndexStats.incNumValues(-numValues);
+    }
+    int updates = (int) this.internalIndexStats.getNumUpdates();
+    if (updates > 0) {
+      this.internalIndexStats.incNumUpdates(updates);
+    }
+    this.initializeIndex(true);
-    Object evaluateKey(Object object) {
+    public Object evaluateKey(Object object) {
+      
+      if (key == null) {
+        key = IndexManager.NULL;
+      }
-        Object key0 = ((Object[])arg0)[1];
-        Object key1 = ((Object[])arg1)[1];
+        Object key0 = ((Object[])arg0)[0];
+        Object key1 = ((Object[])arg1)[0];
-
-  private class HashStrategy implements HashIndexStrategy {
-
-    private AttributeDescriptor attDesc;
-
-    private IMQEvaluator evaluator;
-    
-    public HashStrategy(IMQEvaluator evaluator) {
-      this.evaluator = evaluator;
-    }
-
-    public final int computeHashCode(Object o) {
-      return computeHashCode(o, false);
-    }
-
-    public final int computeHashCode(Object o, boolean reevaluateKey) {
-      if (reevaluateKey) {
-        return computeKey(o).hashCode();
-      }
-      return o.hashCode();
-    }
-
-    public final Object computeKey(Object o) {
-      Object key = evaluator.evaluateKey(o);
-      if (key == null) {
-        key = IndexManager.NULL;
-      }
-      return key;
-    }
-
-    public final boolean equalsOnAdd(Object o1, Object o2) {
-      if (o1 == null) {
-        return o2 == null;
-      }
-      try {
-        return TypeUtils.compare(o1, o2, OQLLexerTokenTypes.TOK_EQ).equals(Boolean.TRUE);
-      }
-      catch (TypeMismatchException e) {
-        return o1.equals(o2);
-      }
-    }
-
-    /*
-     * expects object o to be a region entry
-     */
-    public boolean equalsOnGet(Object indexKey, Object o) {
-      Object fieldValue = evaluator.evaluateKey(o);
-     
-      if (fieldValue == null && indexKey == IndexManager.NULL) {
-        return true;
-      } else {
-        try {
-          if (fieldValue instanceof PdxString) {
-           if (indexKey instanceof String) {
-             fieldValue = ((PdxString) fieldValue).toString(); 
-           }
-         }
-         else if (indexKey instanceof PdxString) {
-           if (fieldValue instanceof String) {
-             fieldValue = new PdxString((String)fieldValue);
-           }
-         }
-         return TypeUtils.compare(fieldValue, indexKey, OQLLexerTokenTypes.TOK_EQ).equals(Boolean.TRUE);
-        }
-        catch (TypeMismatchException e) {
-          return fieldValue.equals(indexKey);
-        }
-      }
-    }
-  }
-
+  
-  public String printAll() {
-    return this.entriesSet.printAll();
-  }
+//  public String printAll() {
+//    return this.entriesSet.printAll();
+//  }

INS31 MOV31 MOV31 INS83 MOV43 INS42 INS44 MOV43 INS8 UPD83 UPD39 UPD42 MOV44 INS8 UPD83 UPD39 UPD42 MOV44 INS44 INS8 INS43 INS42 INS60 INS25 MOV41 UPD42 UPD43 UPD42 INS39 INS42 INS21 UPD42 UPD43 UPD42 INS39 INS42 INS39 INS42 INS25 INS25 INS83 UPD42 MOV42 INS43 INS59 INS27 INS8 INS25 UPD42 UPD42 INS32 UPD42 INS32 INS8 INS32 INS8 INS25 INS60 INS60 INS25 UPD42 MOV42 UPD42 MOV42 INS33 INS32 INS32 INS21 INS27 INS8 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS38 MOV22 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV25 INS21 UPD42 INS11 INS42 INS42 INS21 INS27 INS8 MOV43 INS59 INS39 INS59 INS27 INS8 INS42 INS42 INS22 INS42 INS42 INS7 INS38 INS27 MOV60 MOV25 INS32 INS34 INS27 MOV8 INS32 UPD43 MOV43 MOV42 INS32 INS42 INS33 INS21 INS42 INS32 INS42 MOV32 INS42 INS34 INS25 INS25 INS21 MOV52 UPD42 MOV42 INS42 INS32 INS32 INS22 INS33 UPD43 UPD27 UPD42 MOV42 MOV42 MOV42 MOV42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS38 INS40 INS42 INS42 INS7 INS42 INS42 INS32 INS8 INS27 INS8 INS32 INS22 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS52 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS34 INS42 MOV40 UPD34 UPD34 INS42 INS42 MOV21 INS27 INS27 INS21 INS42 INS42 INS34 INS52 INS42 INS22 UPD42 INS42 INS42 UPD42 MOV42 INS21 INS32 INS42 INS33 INS42 INS33 INS32 INS52 INS42 UPD42 INS32 INS7 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS9 INS42 INS42 INS42 INS32 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS36 INS42 INS42 UPD42 INS11 INS43 INS42 INS40 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL32 DEL7 DEL83 DEL42 DEL43 DEL42 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL41 DEL8 DEL25 DEL40 DEL32 DEL42 DEL40 DEL32 DEL41 DEL8 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL32 DEL7 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL25 DEL8 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL11 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL40 DEL27 DEL27 DEL9 DEL41 DEL8 DEL42 DEL42 DEL42 DEL40 DEL32 DEL40 DEL32 DEL41 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL42 DEL42 DEL43 DEL11 DEL14 DEL83 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL43 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL9 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL44 DEL8 DEL31 DEL55 DEL83 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL41 DEL8 DEL31