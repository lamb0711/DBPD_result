Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  public static final String STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY = DistributionConfig.GEMFIRE_PREFIX + "offheap.stayConnectedOnOutOfOffHeapMemory";
-  
+  public static final String STAY_CONNECTED_ON_OUTOFOFFHEAPMEMORY_PROPERTY =
+      DistributionConfig.GEMFIRE_PREFIX + "offheap.stayConnectedOnOutOfOffHeapMemory";
+
-  
+
-  
+
-  
+
-    
-    final String usedMemoryDesc = "The amount of off-heap memory, in bytes, that is being used to store data.";
-    final String defragmentationDesc = "The total number of times off-heap memory has been defragmented.";
-    final String defragmentationsInProgressDesc = "Current number of defragment operations currently in progress.";
+
+    final String usedMemoryDesc =
+        "The amount of off-heap memory, in bytes, that is being used to store data.";
+    final String defragmentationDesc =
+        "The total number of times off-heap memory has been defragmented.";
+    final String defragmentationsInProgressDesc =
+        "Current number of defragment operations currently in progress.";
-    final String fragmentationDesc = "The percentage of off-heap free memory that is fragmented.  Updated every time a defragmentation is performed.";
-    final String fragmentsDesc = "The number of fragments of free off-heap memory. Updated every time a defragmentation is done.";
-    final String freeMemoryDesc = "The amount of off-heap memory, in bytes, that is not being used.";
-    final String largestFragmentDesc = "The largest fragment of memory found by the last defragmentation of off heap memory. Updated every time a defragmentation is done.";
+    final String fragmentationDesc =
+        "The percentage of off-heap free memory that is fragmented.  Updated every time a defragmentation is performed.";
+    final String fragmentsDesc =
+        "The number of fragments of free off-heap memory. Updated every time a defragmentation is done.";
+    final String freeMemoryDesc =
+        "The amount of off-heap memory, in bytes, that is not being used.";
+    final String largestFragmentDesc =
+        "The largest fragment of memory found by the last defragmentation of off heap memory. Updated every time a defragmentation is done.";
-    final String readsDesc = "The total number of reads of off-heap memory. Only reads of a full object increment this statistic. If only a part of the object is read this statistic is not incremented.";
-    final String maxMemoryDesc = "The maximum amount of off-heap memory, in bytes. This is the amount of memory allocated at startup and does not change.";
+    final String readsDesc =
+        "The total number of reads of off-heap memory. Only reads of a full object increment this statistic. If only a part of the object is read this statistic is not incremented.";
+    final String maxMemoryDesc =
+        "The maximum amount of off-heap memory, in bytes. This is the amount of memory allocated at startup and does not change.";
-    
-    statsType = f.createType(
-        statsTypeName,
-        statsTypeDescription,
-        new StatisticDescriptor[] {
-            f.createLongGauge(usedMemory, usedMemoryDesc, "bytes"),
+
+    statsType = f.createType(statsTypeName, statsTypeDescription,
+        new StatisticDescriptor[] {f.createLongGauge(usedMemory, usedMemoryDesc, "bytes"),
-            f.createIntGauge(defragmentationsInProgress, defragmentationsInProgressDesc, "operations"),
+            f.createIntGauge(defragmentationsInProgress, defragmentationsInProgressDesc,
+                "operations"),
-            f.createLongGauge(maxMemory, maxMemoryDesc, "bytes"),
-        }
-    );
-    
+            f.createLongGauge(maxMemory, maxMemoryDesc, "bytes"),});
+
-    final long parsed = parseLongWithUnits(value, 0L, 1024*1024);
+    final long parsed = parseLongWithUnits(value, 0L, 1024 * 1024);
-  
+
-    final String offHeapSlabConfig = System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "OFF_HEAP_SLAB_SIZE");
+    final String offHeapSlabConfig =
+        System.getProperty(DistributionConfig.GEMFIRE_PREFIX + "OFF_HEAP_SLAB_SIZE");
-      result = parseLongWithUnits(offHeapSlabConfig, MAX_SLAB_SIZE, 1024*1024);
+      result = parseLongWithUnits(offHeapSlabConfig, MAX_SLAB_SIZE, 1024 * 1024);
-  
+
-   * Validates that the running VM is compatible with off heap storage.  Throws a
+   * Validates that the running VM is compatible with off heap storage. Throws a
-    try {    
-      // Do we have the Unsafe class?  Throw ClassNotFoundException if not.
+    try {
+      // Do we have the Unsafe class? Throw ClassNotFoundException if not.
-      
-      // Okay, we have the class.  Do we have the copyMemory method (not all JVMs support it)?  Throw NoSuchMethodException if not.
+
+      // Okay, we have the class. Do we have the copyMemory method (not all JVMs support it)? Throw
+      // NoSuchMethodException if not.
-      Method copyMemory = klass.getMethod("copyMemory", Object.class,long.class,Object.class,long.class,long.class);
+      Method copyMemory = klass.getMethod("copyMemory", Object.class, long.class, Object.class,
+          long.class, long.class);
-      throw new CacheException(LocalizedStrings.MEMSCALE_JVM_INCOMPATIBLE_WITH_OFF_HEAP.toLocalizedString("product"),e) {};
+      throw new CacheException(
+          LocalizedStrings.MEMSCALE_JVM_INCOMPATIBLE_WITH_OFF_HEAP.toLocalizedString("product"),
+          e) {};
-      throw new CacheException(LocalizedStrings.MEMSCALE_JVM_INCOMPATIBLE_WITH_OFF_HEAP.toLocalizedString("product"),e) {};
+      throw new CacheException(
+          LocalizedStrings.MEMSCALE_JVM_INCOMPATIBLE_WITH_OFF_HEAP.toLocalizedString("product"),
+          e) {};
-  
+
+   * 
-  public static MemoryAllocator createOffHeapStorage(StatisticsFactory sf, long offHeapMemorySize, DistributedSystem system) {
+  public static MemoryAllocator createOffHeapStorage(StatisticsFactory sf, long offHeapMemorySize,
+      DistributedSystem system) {
-      // Checking the FORCE_LOCATOR_DM_TYPE is a quick hack to keep our locator from allocating off heap memory.
+      // Checking the FORCE_LOCATOR_DM_TYPE is a quick hack to keep our locator from allocating off
+      // heap memory.
-      throw new IllegalArgumentException("The amount of off heap memory must be at least " + MIN_SLAB_SIZE + " but it was set to " + offHeapMemorySize);
+      throw new IllegalArgumentException("The amount of off heap memory must be at least "
+          + MIN_SLAB_SIZE + " but it was set to " + offHeapMemorySize);
-    OutOfOffHeapMemoryListener ooohml = new DisconnectingOutOfOffHeapMemoryListener((InternalDistributedSystem) system);
+    OutOfOffHeapMemoryListener ooohml =
+        new DisconnectingOutOfOffHeapMemoryListener((InternalDistributedSystem) system);
-  
-  static MemoryAllocator basicCreateOffHeapStorage(StatisticsFactory sf, long offHeapMemorySize, OutOfOffHeapMemoryListener ooohml) {
+
+  static MemoryAllocator basicCreateOffHeapStorage(StatisticsFactory sf, long offHeapMemorySize,
+      OutOfOffHeapMemoryListener ooohml) {
-   // determine off-heap and slab sizes
+    // determine off-heap and slab sizes
-  
+
-      throw new IllegalArgumentException("The number of slabs of off heap memory exceeded the limit of " + Integer.MAX_VALUE + ". Decrease the amount of off heap memory or increase the maximum slab size using gemfire.OFF_HEAP_SLAB_SIZE.");
+      throw new IllegalArgumentException(
+          "The number of slabs of off heap memory exceeded the limit of " + Integer.MAX_VALUE
+              + ". Decrease the amount of off heap memory or increase the maximum slab size using gemfire.OFF_HEAP_SLAB_SIZE.");
-    return (int)result;
+    return (int) result;
-      unitMultiplier = 1024*1024*1024;
-      v = v.substring(0, v.length()-1);
+      unitMultiplier = 1024 * 1024 * 1024;
+      v = v.substring(0, v.length() - 1);
-      unitMultiplier = 1024*1024;
-      v = v.substring(0, v.length()-1);
+      unitMultiplier = 1024 * 1024;
+      v = v.substring(0, v.length() - 1);
-  
+
-  
+
-  
+
+
+
+
-  
+
+
+
+
-  
+
-  
+
-  
+
-      stats.incLong(defragmentationTimeId, DistributionStats.getStatTime()-start);
+      stats.incLong(defragmentationTimeId, DistributionStats.getStatTime() - start);
-  }  
-  
+  }
+
-  
+
-    
+
-  
+

UPD66