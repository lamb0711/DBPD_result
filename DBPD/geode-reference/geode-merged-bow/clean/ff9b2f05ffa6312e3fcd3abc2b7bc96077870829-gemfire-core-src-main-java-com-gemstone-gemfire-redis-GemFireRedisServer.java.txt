GEODE-223: Handle region create/destroy remote event in Redis adpater

Ignore events where region creation initiated remotely attempts to create a local region reference when the region has already been destroyed. Also, the destruction of a region may be caught the query engine, so I have accounted for that by handling com.gemstone.gemfire.cache.query.RegionNotFoundException. Finally, a the Jedis client timeout has been increased for RedisDistDunitTest to account for concurrent region creation/destruction and an expected exception has been added to not fail over the log scanning. Sometimes when a region is destroyed the PooledMessage Processor will log a regiondestroyed exception, which is ok, but makes the test fail.

closes #16

+import com.gemstone.gemfire.cache.RegionDestroyedException;
-          this.regionCache.createRemoteRegionLocally(Coder.stringToByteArrayWrapper(regionName), type);
+          this.regionCache.createRemoteRegionReferenceLocally(Coder.stringToByteArrayWrapper(regionName), type);
-      if (value != RedisDataType.REDIS_STRING && value != RedisDataType.REDIS_HLL && value != RedisDataType.REDIS_PROTECTED)
-        this.regionCache.createRemoteRegionLocally(Coder.stringToByteArrayWrapper(key), value);
+      if (value != RedisDataType.REDIS_STRING && value != RedisDataType.REDIS_HLL && value != RedisDataType.REDIS_PROTECTED) {
+        try {
+          this.regionCache.createRemoteRegionReferenceLocally(Coder.stringToByteArrayWrapper(key), value);
+        } catch (RegionDestroyedException ignore) { // Region already destroyed, ignore
+        }
+      }

INS26 INS40 INS8 INS54 INS8 INS12 MOV21 INS44 INS8 INS43 INS42 UPD42 UPD42 INS42