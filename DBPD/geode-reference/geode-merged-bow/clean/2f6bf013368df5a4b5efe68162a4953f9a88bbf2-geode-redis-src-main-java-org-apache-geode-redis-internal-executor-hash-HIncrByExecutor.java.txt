GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)

* GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions

This PR builds on the work originally submitted by Greg Green in
https://github.com/apache/geode/pull/404. Also acknowledgements to Galen
O'Sullivan for addressing locking issues in that PR.

This commit changes the storage model of Redis hashes and sets from one
region per each Redis key to a single hash region and single set region.
The Redis key is now also the region key and the data is stored in a Map
and Set respectively in the region. Currently, the backing values do not
implement Delta changes, however this will be a future optimization.

This also fixes the inability of Redis keys to contain other characters
commonly used, such as colons (':').

- Add `RedisLockService` which manages a lock per key within a single
  JVM. Locks are held in a WeakHasMap to allow for automatic cleanup
  (prior PR work, using a pure ConcurrentHashMap, ended up leaking
  memory since there is no straight-forward way to clean up unused
  keys/locks).
- Add new tests including concurrency tests for hashes and sets

Co-authored-by: Greg Green <ggreen@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Prasath Durairaj <prasathd@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

+import java.util.Map;
-import org.apache.geode.cache.Region;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
-import org.apache.geode.redis.internal.RedisDataType;
+/**
+ * <pre>
+ *
+ * Implementation of the HINCRBY command to increment the number stored at field
+ * in the hash stored at key by increment value.
+ *
+ * Examples:
+ *
+ * redis> HSET myhash field 5
+ * (integer) 1
+ * redis> HINCRBY myhash field 1
+ * (integer) 6
+ * redis> HINCRBY myhash field -1
+ * (integer) 5
+ * redis> HINCRBY myhash field -10
+ * (integer) -5
+ *
+ *
+ * </pre>
+ */
-  private final String ERROR_FIELD_NOT_USABLE = "The value at this field is not an integer";
+  private static final String ERROR_FIELD_NOT_USABLE = "The value at this field is not an integer";
-  private final String ERROR_INCREMENT_NOT_USABLE = "The increment on this key must be numeric";
+  private static final String ERROR_INCREMENT_NOT_USABLE =
+      "The increment on this key must be numeric";
-  private final String ERROR_OVERFLOW = "This incrementation cannot be performed due to overflow";
+  private static final String ERROR_OVERFLOW =
+      "This incrementation cannot be performed due to overflow";
-  private final int FIELD_INDEX = 2;
+  private static final int FIELD_INDEX = 2;
-  private final int INCREMENT_INDEX = 3;
+  private static final int INCREMENT_INDEX = 3;
-    Region<ByteArrayWrapper, ByteArrayWrapper> keyRegion =
-        getOrCreateRegion(context, key, RedisDataType.REDIS_HASH);
-
-    byte[] byteField = commandElems.get(FIELD_INDEX);
-    ByteArrayWrapper field = new ByteArrayWrapper(byteField);
-
-    /*
-     * Put incrememnt as value if field doesn't exist
-     */
-
-    ByteArrayWrapper oldValue = keyRegion.get(field);
-
-    if (oldValue == null) {
-      keyRegion.put(field, new ByteArrayWrapper(incrArray));
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), increment));
-      return;
-    }
-
-    /*
-     * If the field did exist then increment the field
-     */
-
-    try {
-      value = Long.parseLong(oldValue.toString());
-    } catch (NumberFormatException e) {
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Map<ByteArrayWrapper, ByteArrayWrapper> map = getMap(context, key);
+
+      byte[] byteField = commandElems.get(FIELD_INDEX);
+      ByteArrayWrapper field = new ByteArrayWrapper(byteField);
+
+      /*
+       * Put increment as value if field doesn't exist
+       */
+
+      ByteArrayWrapper oldValue = map.get(field);
+
+      if (oldValue == null) {
+        map.put(field, new ByteArrayWrapper(incrArray));
+
+        saveMap(map, context, key);
+
+        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), increment));
+
+        return;
+      }
+
+      /*
+       * If the field did exist then increment the field
+       */
+      try {
+        value = Long.parseLong(oldValue.toString());
+      } catch (NumberFormatException e) {
+        command.setResponse(
+            Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_FIELD_NOT_USABLE));
+        return;
+      }
+
+      /*
+       * Check for overflow
+       */
+      if ((value >= 0 && increment > (Long.MAX_VALUE - value))
+          || (value <= 0 && increment < (Long.MIN_VALUE - value))) {
+        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
+        return;
+      }
+
+      value += increment;
+
+      map.put(field, new ByteArrayWrapper(Coder.longToBytes(value)));
+
+      saveMap(map, context, key);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
-          Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_FIELD_NOT_USABLE));
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      return;
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
-
-    /*
-     * Check for overflow
-     */
-    if ((value >= 0 && increment > (Long.MAX_VALUE - value))
-        || (value <= 0 && increment < (Long.MIN_VALUE - value))) {
-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_OVERFLOW));
-      return;
-    }
-
-    value += increment;
-    // String newValue = String.valueOf(value);
-
-    keyRegion.put(field, new ByteArrayWrapper(Coder.longToBytes(value)));
-

MOV26 INS26 INS40 UPD40 UPD40 INS29 INS65 INS83 INS83 INS83 INS83 INS83 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS54 INS58 INS8 INS12 INS12 INS43 INS59 MOV60 MOV60 MOV60 MOV60 MOV25 MOV54 MOV25 MOV21 MOV21 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS32 UPD74 INS32 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 INS41 INS42 INS42 INS42 UPD43 UPD42 INS21 UPD42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 UPD42 UPD42 UPD42 INS32 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 DEL40