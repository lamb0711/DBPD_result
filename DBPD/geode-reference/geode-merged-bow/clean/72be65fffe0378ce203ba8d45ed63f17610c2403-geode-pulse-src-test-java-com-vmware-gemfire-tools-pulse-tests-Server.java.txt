Merge branch 'feature/GEODE-17-2' into develop

-import com.vmware.gemfire.tools.pulse.internal.data.PulseConstants;
-
+import java.lang.management.ManagementFactory;
-import java.util.Set;
-
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Properties;
-import javax.management.MBeanServerFactory;
+import com.gemstone.gemfire.distributed.internal.DistributionConfig;
+import com.gemstone.gemfire.management.internal.security.AccessControlMBean;
+import com.gemstone.gemfire.management.internal.security.JSONAuthorization;
+import com.gemstone.gemfire.management.internal.security.MBeanServerWrapper;
+import com.gemstone.gemfire.management.internal.security.ResourceConstants;
+import com.gemstone.gemfire.internal.security.shiro.CustomAuthRealm;
+import com.gemstone.gemfire.internal.security.shiro.JMXShiroAuthenticator;
+import com.vmware.gemfire.tools.pulse.internal.data.PulseConstants;
+
+import org.apache.shiro.SecurityUtils;
+import org.apache.shiro.mgt.DefaultSecurityManager;
+import org.apache.shiro.mgt.SecurityManager;
+import org.apache.shiro.realm.Realm;
+
-  private final MBeanServer mbs;
-  private final JMXConnectorServer cs;
+  private MBeanServer mbs;
+  private JMXConnectorServer cs;
-  public Server(int port, String properties) throws IOException {
+  public Server(int port, String properties, String jsonAuthFile) throws Exception {
+    this.propFile = properties;
+    mbs = ManagementFactory.getPlatformMBeanServer();
+    url = new JMXServiceURL(formJMXServiceURLString(DEFAULT_HOST, port));
+
+    // Load the beans first, otherwise we get access denied
+    loadMBeans();
+
+    if (jsonAuthFile != null) {
+      System.setProperty("spring.profiles.active", "pulse.authentication.gemfire");
+      Properties props = new Properties();
+      props.put(DistributionConfig.SECURITY_CLIENT_AUTHENTICATOR_NAME, JSONAuthorization.class.getName() + ".create");
+      //props.put(DistributionConfig.SECURITY_CLIENT_ACCESSOR_NAME, JSONAuthorization.class.getName() + ".create");
+      JSONAuthorization.setUpWithJsonFile(jsonAuthFile);
+      Map<String, Object> env = new HashMap<String, Object>();
+
+      // set up Shiro Security Manager
+      Realm realm = new CustomAuthRealm(props);
+      SecurityManager securityManager = new DefaultSecurityManager(realm);
+      SecurityUtils.setSecurityManager(securityManager);
+
+      // register the AccessControll bean
+      AccessControlMBean acc = new AccessControlMBean();
+      ObjectName accessControlMBeanON = new ObjectName(ResourceConstants.OBJECT_NAME_ACCESSCONTROL);
+      MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();
+      platformMBeanServer.registerMBean(acc, accessControlMBeanON);
+
+      // wire in the authenticator and authorizaton
+      JMXShiroAuthenticator interceptor = new JMXShiroAuthenticator();
+      env.put(JMXConnectorServer.AUTHENTICATOR, interceptor);
+      cs = JMXConnectorServerFactory.newJMXConnectorServer(url, env, mbs);
+      cs.setMBeanServerForwarder(new MBeanServerWrapper());
+
+      //set up the AccessControlMXBean
+
+    } else {
+      System.setProperty("spring.profiles.active", "pulse.authentication.default");
+      cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbs);
+    }
+
-    this.propFile = properties;
-    mbs = MBeanServerFactory.createMBeanServer();
-    url = new JMXServiceURL(formJMXServiceURLString(DEFAULT_HOST, "" + port));
-    cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbs);
-
-
-    loadMBeans();
-  private String formJMXServiceURLString(String host, String port)
-      throws UnknownHostException {
-    /*
-     * String jmxSerURL = "service:jmx:rmi://" + serverName + "/jndi/rmi://" +
-     * serverName + ":" + port + "/jmxrmi";
-     */
+  private String formJMXServiceURLString(String host, int port) throws UnknownHostException {
-      jmxSerURL = "service:jmx:rmi://" + host + "/jndi/rmi://" + host + ":"
-          + port + "/jmxrmi";
+      jmxSerURL = "service:jmx:rmi://" + host + "/jndi/rmi://" + host + ":" + port + "/jmxrmi";
-      jmxSerURL = "service:jmx:rmi://[" + host + "]/jndi/rmi://[" + host + "]:"
-          + port + "/jmxrmi";
+      jmxSerURL = "service:jmx:rmi://[" + host + "]/jndi/rmi://[" + host + "]:" + port + "/jmxrmi";
-    unregisterAll();
-
-  private void addMemberMBean(String m) throws InstanceAlreadyExistsException,
-      MBeanRegistrationException, NotCompliantMBeanException,
-      MalformedObjectNameException, NullPointerException {
+  private void addMemberMBean(
+      String m) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, MalformedObjectNameException, NullPointerException {
-  private void addGemFireXDMemberMBean(String xdm)
-      throws InstanceAlreadyExistsException, MBeanRegistrationException,
-      NotCompliantMBeanException, MalformedObjectNameException,
-      NullPointerException {
+  private void addGemFireXDMemberMBean(
+      String xdm) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, MalformedObjectNameException, NullPointerException {
-    mbs.registerMBean(xdmo, new ObjectName(GemFireXDMember.OBJECT_NAME
-        + ",member=" + xdm));
+    mbs.registerMBean(xdmo, new ObjectName(GemFireXDMember.OBJECT_NAME + ",member=" + xdm));
-  private void addRegionMBean(String reg)
-      throws InstanceAlreadyExistsException, MBeanRegistrationException,
-      NotCompliantMBeanException, MalformedObjectNameException,
-      NullPointerException {
+  private void addRegionMBean(
+      String reg) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, MalformedObjectNameException, NullPointerException {
-              PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObject.getFullPath() + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER + member));
+          PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_REGION + regionObject.getFullPath() + PulseConstants.OBJECT_NAME_REGION_ON_MEMBER_MEMBER + member));
-  private void addServerMBean(String server)
-      throws InstanceAlreadyExistsException, MBeanRegistrationException,
-      NotCompliantMBeanException, MalformedObjectNameException,
-      NullPointerException {
+  private void addServerMBean(
+      String server) throws InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException, MalformedObjectNameException, NullPointerException {
-  private void unregisterAll() {
-    Set<ObjectName> thisSet = mbs.queryNames(null, null);
-    for (ObjectName objectName : thisSet) {
-//      System.out.println("Removing ..." + objectName.getCanonicalName());
-
-      /*try {
-        mbs.unregisterMBean(objectName);
-      } catch (MBeanRegistrationException e) {
-        e.printStackTrace();
-      } catch (InstanceNotFoundException e) {
-        e.printStackTrace();
-      }*/
-    }
-  }
-
-  public static void main(String[] args) throws MalformedObjectNameException,
-      NullPointerException {
-    int port = DEFAULT_PORT;
-    String props = null;
-    if (args.length >= 2) {
-      try {
-        port = Integer.parseInt(args[0]);
-        props = args[1];
-
-      } catch (NumberFormatException nfe) {
-        port = DEFAULT_PORT;
-        props = null;
-        nfe.printStackTrace();
-      }
-    }
-
-    createServer(port, props);
-  }
-
-  public static Server createServer(int port, String properties)
+  public static Server createServer(int port, String properties, String jsonAuthFile)
-      s = new Server(port, properties);
+      s = new Server(port, properties, jsonAuthFile);

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV23 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 MOV83 MOV42 MOV44 MOV44 MOV44 UPD43 MOV43 INS8 INS44 INS44 UPD42 UPD42 MOV21 MOV21 MOV21 MOV21 INS25 MOV54 MOV21 INS39 INS42 MOV43 INS42 INS27 INS8 INS8 INS42 INS33 INS21 INS60 INS21 INS21 MOV60 INS60 INS60 INS21 MOV60 MOV60 INS60 MOV21 INS60 MOV21 MOV21 MOV21 MOV21 MOV21 UPD42 UPD42 INS32 INS43 INS59 INS32 INS32 UPD74 INS43 INS59 INS43 INS59 INS32 INS43 MOV43 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS42 INS42 INS45 INS45 INS42 INS42 INS14 INS42 INS42 INS40 INS27 INS42 INS42 INS42 INS43 UPD43 INS43 UPD42 INS14 INS42 INS42 INS14 UPD42 MOV42 INS42 INS14 INS42 INS42 INS42 INS42 UPD42 INS14 UPD42 INS14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS14 INS42 INS42 INS40 INS42 UPD42 INS32 UPD42 UPD42 INS14 UPD42 UPD42 INS45 INS45 INS43 INS32 INS45 INS42 UPD42 INS42 INS74 INS43 INS42 INS43 INS42 INS43 MOV43 INS40 UPD42 MOV42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS57 INS42 INS43 MOV43 INS43 INS42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 DEL83 DEL83 DEL45 DEL42 DEL27 DEL42 DEL42 DEL33 DEL33 DEL32 DEL39 DEL42 DEL33 DEL42 DEL42 DEL34 DEL2 DEL7 DEL42 DEL42 DEL7 DEL33 DEL42 DEL8 DEL31 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL44 DEL42 DEL8 DEL70 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL85 DEL5 DEL42 DEL44 DEL43 DEL43 DEL40 DEL34 DEL27 DEL42 DEL42 DEL42 DEL34 DEL2 DEL32 DEL7 DEL21 DEL8 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL31