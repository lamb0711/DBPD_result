Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * This region is being implemented to suppress distribution of puts and to
- * allow localDestroys on mirrored regions.
+ * This region is being implemented to suppress distribution of puts and to allow localDestroys on
+ * mirrored regions.
- *  
+ * 
-public final class HARegion extends DistributedRegion
-{
+public final class HARegion extends DistributedRegion {
-  
+
-  
-  // Prevent this region from participating in a TX, bug 38709 
+
+  // Prevent this region from participating in a TX, bug 38709
-  
+
-    buf.append("[path='")
-       .append(getFullPath());
+    buf.append("[path='").append(getFullPath());
-  //  protected Object conditionalCopy(Object o) {
-//    return o;
-//  }
+  // protected Object conditionalCopy(Object o) {
+  // return o;
+  // }
-//  private Map giiProviderStates;
+  // private Map giiProviderStates;
-  private HARegion(String regionName, RegionAttributes attrs,
-      LocalRegion parentRegion, GemFireCacheImpl cache) {
-    super(regionName, attrs, parentRegion, cache, new InternalRegionArguments()
-        .setDestroyLockFlag(true).setRecreateFlag(false)
-        .setSnapshotInputStream(null).setImageTarget(null));
+  private HARegion(String regionName, RegionAttributes attrs, LocalRegion parentRegion,
+      GemFireCacheImpl cache) {
+    super(regionName, attrs, parentRegion, cache,
+        new InternalRegionArguments().setDestroyLockFlag(true).setRecreateFlag(false)
+            .setSnapshotInputStream(null).setImageTarget(null));
-  
+
+   * 
-  protected void distributeUpdate(EntryEventImpl event, long lastModifiedTime, boolean ifNew, boolean ifOld, Object expectedOldValue, boolean requireOldValue) {
-  }
+  protected void distributeUpdate(EntryEventImpl event, long lastModifiedTime, boolean ifNew,
+      boolean ifOld, Object expectedOldValue, boolean requireOldValue) {}
-   * void implementation over-riding the method to allow localDestroy on
-   * mirrored regions
+   * void implementation over-riding the method to allow localDestroy on mirrored regions
-  protected void checkIfReplicatedAndLocalDestroy(EntryEventImpl event) {
-  }
+  protected void checkIfReplicatedAndLocalDestroy(EntryEventImpl event) {}
-  void checkEntryTimeoutAction(String mode, ExpirationAction ea) {
-  }
+  void checkEntryTimeoutAction(String mode, ExpirationAction ea) {}
-   * Overriding this method so as to allow expiry action of local invalidate
-   * even if the scope is distributed mirrored.
+   * Overriding this method so as to allow expiry action of local invalidate even if the scope is
+   * distributed mirrored.
-   * <p>author Asif
+   * <p>
+   * author Asif
-  public ExpirationAttributes setEntryTimeToLive(ExpirationAttributes timeToLive)
-  {
-    //checkReadiness();
+  public ExpirationAttributes setEntryTimeToLive(ExpirationAttributes timeToLive) {
+    // checkReadiness();
-      throw new IllegalArgumentException(LocalizedStrings.HARegion_TIMETOLIVE_MUST_NOT_BE_NULL.toLocalizedString());
+      throw new IllegalArgumentException(
+          LocalizedStrings.HARegion_TIMETOLIVE_MUST_NOT_BE_NULL.toLocalizedString());
-    if ((timeToLive.getAction() == ExpirationAction.LOCAL_DESTROY && this.dataPolicy
-        .withReplication())) {
-      throw new IllegalArgumentException(LocalizedStrings.HARegion_TIMETOLIVE_ACTION_IS_INCOMPATIBLE_WITH_THIS_REGIONS_MIRROR_TYPE.toLocalizedString());
+    if ((timeToLive.getAction() == ExpirationAction.LOCAL_DESTROY
+        && this.dataPolicy.withReplication())) {
+      throw new IllegalArgumentException(
+          LocalizedStrings.HARegion_TIMETOLIVE_ACTION_IS_INCOMPATIBLE_WITH_THIS_REGIONS_MIRROR_TYPE
+              .toLocalizedString());
-      throw new IllegalStateException(LocalizedStrings.HARegion_CANNOT_SET_TIME_TO_LIVE_WHEN_STATISTICS_ARE_DISABLED.toLocalizedString());
+      throw new IllegalStateException(
+          LocalizedStrings.HARegion_CANNOT_SET_TIME_TO_LIVE_WHEN_STATISTICS_ARE_DISABLED
+              .toLocalizedString());
-   * Before invalidating , check if the entry being invalidated has a key as
-   * Long . If yes check if the key is still present in availableIDs . If yes
-   * remove & allow invalidation to proceed. But if the key (Long)is absent do
-   * not allow invalidation to proceed.
+   * Before invalidating , check if the entry being invalidated has a key as Long . If yes check if
+   * the key is still present in availableIDs . If yes remove & allow invalidation to proceed. But
+   * if the key (Long)is absent do not allow invalidation to proceed.
-   * <p>author Asif
+   * <p>
+   * author Asif
-  protected void basicInvalidate(final EntryEventImpl event,
-      boolean invokeCallbacks, final boolean forceNewEntry)
-      throws EntryNotFoundException
-  {
+  protected void basicInvalidate(final EntryEventImpl event, boolean invokeCallbacks,
+      final boolean forceNewEntry) throws EntryNotFoundException {
-        conflatable = (Conflatable)this.get(key);
-        removedFromAvID = !this.owningQueue.isPrimary()
-            && this.owningQueue.destroyFromAvailableIDs((Long)key);
-      }
-      catch (InterruptedException ie) {
+        conflatable = (Conflatable) this.get(key);
+        removedFromAvID =
+            !this.owningQueue.isPrimary() && this.owningQueue.destroyFromAvailableIDs((Long) key);
+      } catch (InterruptedException ie) {
-      
+
-      if(conflatable instanceof HAEventWrapper) {
-        this.owningQueue
-            .decAndRemoveFromHAContainer((HAEventWrapper)conflatable);
+      if (conflatable instanceof HAEventWrapper) {
+        this.owningQueue.decAndRemoveFromHAContainer((HAEventWrapper) conflatable);
-      //update the stats
+      // update the stats
-    this.entries.invalidate(event, invokeCallbacks, forceNewEntry,false);
+    this.entries.invalidate(event, invokeCallbacks, forceNewEntry, false);
-   * This method is over-ridden since we do not want GII of ThreadIdentifier
-   * objects to happen
+   * This method is over-ridden since we do not want GII of ThreadIdentifier objects to happen
-  protected boolean checkEntryNotValid(RegionEntry mapEntry)
-  {
+  protected boolean checkEntryNotValid(RegionEntry mapEntry) {
-    @Released EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE, key,
-        value, aCallbackArgument, false, getMyId());
+    @Released
+    EntryEventImpl event = EntryEventImpl.create(this, Operation.UPDATE, key, value,
+        aCallbackArgument, false, getMyId());
-    Object oldValue = null;
+      Object oldValue = null;
-    if (basicPut(event, false, // ifNew
-        false, // ifOld
-        null, // expectedOldValue
-        false // requireOldValue
-    )) {
-      oldValue = event.getOldValue();
-    }
-    return handleNotAvailable(oldValue);
+      if (basicPut(event, false, // ifNew
+          false, // ifOld
+          null, // expectedOldValue
+          false // requireOldValue
+      )) {
+        oldValue = event.getOldValue();
+      }
+      return handleNotAvailable(oldValue);
-   * @param regionName
-   *          name of the region to be created
-   * @param cache
-   *          the cache that owns this region
-   * @param ra
-   *          attributes of the region
+   * @param regionName name of the region to be created
+   * @param cache the cache that owns this region
+   * @param ra attributes of the region
-   * @throws RegionExistsException
-   *           if a region of the same name exists in the same Cache
+   * @throws RegionExistsException if a region of the same name exists in the same Cache
-  public static HARegion getInstance(String regionName, GemFireCacheImpl cache,
-      HARegionQueue hrq, RegionAttributes ra) throws TimeoutException,
-      RegionExistsException, IOException, ClassNotFoundException
-  {
+  public static HARegion getInstance(String regionName, GemFireCacheImpl cache, HARegionQueue hrq,
+      RegionAttributes ra)
+      throws TimeoutException, RegionExistsException, IOException, ClassNotFoundException {
-    Region region = cache.createVMRegion(regionName, ra, new InternalRegionArguments().setInternalMetaRegion(haRegion)
-                                                                                      .setDestroyLockFlag(true)
-                                                                                      .setSnapshotInputStream(null)
-                                                                                      .setInternalRegion(true)
-                                                                                      .setImageTarget(null));
+    Region region = cache.createVMRegion(regionName, ra,
+        new InternalRegionArguments().setInternalMetaRegion(haRegion).setDestroyLockFlag(true)
+            .setSnapshotInputStream(null).setInternalRegion(true).setImageTarget(null));
-    return (HARegion)region;
+    return (HARegion) region;
-    } 
+    }
-  
-  public HARegionQueue getOwner()
-  {
+
+  public HARegionQueue getOwner() {
-    // it is fully initialized.  The previous implementation of this rule did
+    // it is fully initialized. The previous implementation of this rule did
-    return this.owningQueue.isQueueInitialized()? this.owningQueue : null;
+    return this.owningQueue.isQueueInitialized() ? this.owningQueue : null;
-  
+
-   * This method is used to set the HARegionQueue owning the HARegion. It is set
-   * after the HARegionQueue is properly constructed
+   * This method is used to set the HARegionQueue owning the HARegion. It is set after the
+   * HARegionQueue is properly constructed
-   * @param hrq
-   *          The owning HARegionQueue instance
+   * @param hrq The owning HARegionQueue instance
-  public void setOwner(HARegionQueue hrq)
-  {
+  public void setOwner(HARegionQueue hrq) {
-  final protected boolean shouldNotifyBridgeClients()
-  {
+  final protected boolean shouldNotifyBridgeClients() {
-  
+
-//  public boolean hasSeenClientEvent(InternalCacheEvent event) {
-//    return false;
-//  }
+  // public boolean hasSeenClientEvent(InternalCacheEvent event) {
+  // return false;
+  // }
-  protected void notifyGatewayHub(EnumListenerEvent operation,
-      EntryEventImpl event)
-  {
-  }
+  protected void notifyGatewayHub(EnumListenerEvent operation, EntryEventImpl event) {}
-   * This method is overriden so as to make isOriginRemote true always so that
-   * the operation is never propagated to other nodes
+   * This method is overriden so as to make isOriginRemote true always so that the operation is
+   * never propagated to other nodes
-      throws CacheWriterException, TimeoutException
-  {
-    //Do not generate EventID
-    RegionEventImpl event = new RegionEventImpl(this, Operation.REGION_DESTROY,
-        aCallbackArgument, true /* isOriginRemote */, getMyId());
+      throws CacheWriterException, TimeoutException {
+    // Do not generate EventID
+    RegionEventImpl event = new RegionEventImpl(this, Operation.REGION_DESTROY, aCallbackArgument,
+        true /* isOriginRemote */, getMyId());
-  final public boolean generateEventID()
-  {
+  final public boolean generateEventID() {
-  
+
-  protected void initialize(InputStream snapshotInputStream,
-      InternalDistributedMember imageTarget,
-      InternalRegionArguments internalRegionArgs) 
-    throws TimeoutException, IOException, ClassNotFoundException
-  {
+  protected void initialize(InputStream snapshotInputStream, InternalDistributedMember imageTarget,
+      InternalRegionArguments internalRegionArgs)
+      throws TimeoutException, IOException, ClassNotFoundException {
-//    try {
-      super.initialize(snapshotInputStream, imageTarget, internalRegionArgs);
-//    } finally {
-//      this.giiProviderStates = null;
-//    }
+    // try {
+    super.initialize(snapshotInputStream, imageTarget, internalRegionArgs);
+    // } finally {
+    // this.giiProviderStates = null;
+    // }
-  
+
-   * @see LocalRegion#findObjectInSystem(KeyInfo, boolean, TXStateInterface, boolean, Object, boolean, boolean, ClientProxyMembershipID, EntryEventImpl, boolean)
-   *      
+   * @see LocalRegion#findObjectInSystem(KeyInfo, boolean, TXStateInterface, boolean, Object,
+   *      boolean, boolean, ClientProxyMembershipID, EntryEventImpl, boolean)
+   * 
-  protected Object findObjectInSystem(KeyInfo keyInfo,
-                                      boolean isCreate,
-                                      TXStateInterface txState,
-                                      boolean generateCallbacks,
-                                      Object localValue,
-                                      boolean disableCopyOnRead,
-                                      boolean preferCD,
-                                      ClientProxyMembershipID requestingClient,
-                                      EntryEventImpl clientEvent,
-                                      boolean returnTombstones)
-    throws CacheLoaderException, TimeoutException  {
+  protected Object findObjectInSystem(KeyInfo keyInfo, boolean isCreate, TXStateInterface txState,
+      boolean generateCallbacks, Object localValue, boolean disableCopyOnRead, boolean preferCD,
+      ClientProxyMembershipID requestingClient, EntryEventImpl clientEvent,
+      boolean returnTombstones) throws CacheLoaderException, TimeoutException {
-      final LoaderHelper loaderHelper = loaderHelperFactory.createLoaderHelper(
-          key, aCallbackArgument, false /* netSearchAllowed */,
-          true /* netloadallowed */, null/* searcher */);
+      final LoaderHelper loaderHelper =
+          loaderHelperFactory.createLoaderHelper(key, aCallbackArgument,
+              false /* netSearchAllowed */, true /* netloadallowed */, null/* searcher */);
-      }
-      finally {
+      } finally {
-          }
-          else {
+          } else {
-          @Released EntryEventImpl event = EntryEventImpl.create(
-              this, op, key, value,
-              aCallbackArgument, false, getMyId(), generateCallbacks);
+          @Released
+          EntryEventImpl event = EntryEventImpl.create(this, op, key, value, aCallbackArgument,
+              false, getMyId(), generateCallbacks);
-          re = basicPutEntry(event, 0L);
+            re = basicPutEntry(event, 0L);
-        }
-        catch (CacheWriterException cwe) {
+        } catch (CacheWriterException cwe) {
-  
+
-        logger.debug("found that owningQueue was null during GII of {} which could lead to event loss (see #41681)", this);
+        logger.debug(
+            "found that owningQueue was null during GII of {} which could lead to event loss (see #41681)",
+            this);
-  
+
-  protected CacheDistributionAdvisor createDistributionAdvisor(InternalRegionArguments internalRegionArgs) {
-    return HARegionAdvisor.createHARegionAdvisor(this);  // Warning: potential early escape of object before full construction
+  protected CacheDistributionAdvisor createDistributionAdvisor(
+      InternalRegionArguments internalRegionArgs) {
+    return HARegionAdvisor.createHARegionAdvisor(this); // Warning: potential early escape of object
+                                                        // before full construction
-  
+
-    HARegionAdvisor.HAProfile h = (HARegionAdvisor.HAProfile)p;
+    HARegionAdvisor.HAProfile h = (HARegionAdvisor.HAProfile) p;
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-   * Record cache event state for a potential initial image provider.  This is
-   * used to install event state when the sender is selected as initial image
-   * provider.
+   * Record cache event state for a potential initial image provider. This is used to install event
+   * state when the sender is selected as initial image provider.
+   * 
+   * 
-  
-  
+
+
-  
+
-   * whether the primary queue for the client has registered interest, or
-   * there is no primary present
+   * whether the primary queue for the client has registered interest, or there is no primary
+   * present
-    return ((HARegionAdvisor)this.distAdvisor).noPrimaryOrHasRegisteredInterest();
+    return ((HARegionAdvisor) this.distAdvisor).noPrimaryOrHasRegisteredInterest();
-  
-  
+
+
-    
+
-    
-    /* (non-Javadoc)
-     * @see org.apache.geode.internal.cache.CacheDistributionAdvisor#adviseInitialImage(org.apache.geode.internal.cache.CacheDistributionAdvisor.InitialImageAdvice)
+
+    /*
+     * (non-Javadoc)
+     * 
+     * @see
+     * org.apache.geode.internal.cache.CacheDistributionAdvisor#adviseInitialImage(org.apache.geode.
+     * internal.cache.CacheDistributionAdvisor.InitialImageAdvice)
-    public InitialImageAdvice adviseInitialImage(
-        InitialImageAdvice previousAdvice) {
+    public InitialImageAdvice adviseInitialImage(InitialImageAdvice previousAdvice) {
-      
+
-    protected Profile instantiateProfile(
-        InternalDistributedMember memberId, int version) {
+    protected Profile instantiateProfile(InternalDistributedMember memberId, int version) {
-      for (int i=0; i<locProfiles.length; i++) {
-        HAProfile p = (HAProfile)locProfiles[i];
+      for (int i = 0; i < locProfiles.length; i++) {
+        HAProfile p = (HAProfile) locProfiles[i];
-    
+
-      
+
-      
+
-      /* (non-Javadoc)
-       * @see org.apache.geode.internal.cache.CacheDistributionAdvisor.CacheProfile#fromData(java.io.DataInput)
+      /*
+       * (non-Javadoc)
+       * 
+       * @see
+       * org.apache.geode.internal.cache.CacheDistributionAdvisor.CacheProfile#fromData(java.io.
+       * DataInput)
-      public void fromData(DataInput in) throws IOException,
-          ClassNotFoundException {
+      public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-      
-      /* (non-Javadoc)
-       * @see org.apache.geode.internal.cache.CacheDistributionAdvisor.CacheProfile#toData(java.io.DataOutput)
+
+      /*
+       * (non-Javadoc)
+       * 
+       * @see org.apache.geode.internal.cache.CacheDistributionAdvisor.CacheProfile#toData(java.io.
+       * DataOutput)
-        if (hasRegisteredInterest) { flags |= HAS_REGISTERED_INTEREST_BIT; }
-        if (isPrimary)             { flags |= IS_PRIMARY_BIT; }
+        if (hasRegisteredInterest) {
+          flags |= HAS_REGISTERED_INTEREST_BIT;
+        }
+        if (isPrimary) {
+          flags |= IS_PRIMARY_BIT;
+        }

UPD66 UPD66 UPD66 UPD66 UPD66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66