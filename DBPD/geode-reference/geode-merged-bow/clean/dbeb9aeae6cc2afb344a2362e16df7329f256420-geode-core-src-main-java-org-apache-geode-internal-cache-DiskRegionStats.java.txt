Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  ////////////////////  Statistic "Id" Fields  ////////////////////
+  //////////////////// Statistic "Id" Fields ////////////////////
-  
-  
+
+
-    String statDescription =
-      "Statistics about a Region's use of the disk";
+    String statDescription = "Statistics about a Region's use of the disk";
-      "The total number of region entries that have been written to disk. A write is done every time an entry is created on disk or every time its value is modified on disk.";
-    final String writeTimeDesc =
-      "The total amount of time spent writing to disk";
-    final String bytesWrittenDesc =
-      "The total number of bytes that have been written to disk";
-    final String readsDesc =
-      "The total number of region entries that have been read from disk";
-    final String readTimeDesc =
-      "The total amount of time spent reading from disk";
-    final String bytesReadDesc =
-      "The total number of bytes that have been read from disk";
+        "The total number of region entries that have been written to disk. A write is done every time an entry is created on disk or every time its value is modified on disk.";
+    final String writeTimeDesc = "The total amount of time spent writing to disk";
+    final String bytesWrittenDesc = "The total number of bytes that have been written to disk";
+    final String readsDesc = "The total number of region entries that have been read from disk";
+    final String readTimeDesc = "The total amount of time spent reading from disk";
+    final String bytesReadDesc = "The total number of bytes that have been read from disk";
-      "The total number of region entries that have been removed from disk";
-    final String removeTimeDesc =
-      "The total amount of time spent removing from disk";
+        "The total number of region entries that have been removed from disk";
+    final String removeTimeDesc = "The total amount of time spent removing from disk";
-      "The current number of entries whose value is on disk and is not in memory. This is true of overflowed entries. It is also true of recovered entries that have not yet been faulted in.";
+        "The current number of entries whose value is on disk and is not in memory. This is true of overflowed entries. It is also true of recovered entries that have not yet been faulted in.";
-      "The current number of entries whose value resides in the VM. The value may also have been written to disk.";
+        "The current number of entries whose value resides in the VM. The value may also have been written to disk.";
-      "The number of times that this region has been initialized solely from the local disk files (0 or 1)";
+        "The number of times that this region has been initialized solely from the local disk files (0 or 1)";
-      "The number of times that this region has been initialized by doing GII from a peer (0 or 1)";
+        "The number of times that this region has been initialized by doing GII from a peer (0 or 1)";
-    type = f.createType(statName, statDescription,
-       new StatisticDescriptor[] {
-         f.createLongCounter("writes", writesDesc, "ops"),
-         f.createLongCounter("writeTime", writeTimeDesc, "nanoseconds"),
-         f.createLongCounter("writtenBytes", bytesWrittenDesc, "bytes"),
-         f.createLongCounter("reads", readsDesc, "ops"),
-         f.createLongCounter("readTime", readTimeDesc, "nanoseconds"),
-         f.createLongCounter("readBytes", bytesReadDesc, "bytes"),
-         f.createLongCounter("removes", removesDesc, "ops"),
-         f.createLongCounter("removeTime", removeTimeDesc, "nanoseconds"),
-         f.createLongGauge("entriesOnlyOnDisk", numOverflowOnDiskDesc, "entries"),
-         f.createLongGauge("bytesOnlyOnDisk", numOverflowBytesOnDiskDesc, "bytes"),
-         f.createLongGauge("entriesInVM", numEntriesInVMDesc, "entries"),
-         f.createIntGauge("writesInProgress", "current number of oplog writes that are in progress", "writes"),
-         f.createIntGauge("localInitializations", localInitializationsDesc, "initializations"),
-         f.createIntGauge("remoteInitializations", remoteInitializationsDesc, "initializations"),
-       });
+    type = f.createType(statName, statDescription, new StatisticDescriptor[] {
+        f.createLongCounter("writes", writesDesc, "ops"),
+        f.createLongCounter("writeTime", writeTimeDesc, "nanoseconds"),
+        f.createLongCounter("writtenBytes", bytesWrittenDesc, "bytes"),
+        f.createLongCounter("reads", readsDesc, "ops"),
+        f.createLongCounter("readTime", readTimeDesc, "nanoseconds"),
+        f.createLongCounter("readBytes", bytesReadDesc, "bytes"),
+        f.createLongCounter("removes", removesDesc, "ops"),
+        f.createLongCounter("removeTime", removeTimeDesc, "nanoseconds"),
+        f.createLongGauge("entriesOnlyOnDisk", numOverflowOnDiskDesc, "entries"),
+        f.createLongGauge("bytesOnlyOnDisk", numOverflowBytesOnDiskDesc, "bytes"),
+        f.createLongGauge("entriesInVM", numEntriesInVMDesc, "entries"),
+        f.createIntGauge("writesInProgress", "current number of oplog writes that are in progress",
+            "writes"),
+        f.createIntGauge("localInitializations", localInitializationsDesc, "initializations"),
+        f.createIntGauge("remoteInitializations", remoteInitializationsDesc, "initializations"),});
-  //////////////////////  Instance Fields  //////////////////////
+  ////////////////////// Instance Fields //////////////////////
-  
-  ///////////////////////  Constructors  ///////////////////////
+
+  /////////////////////// Constructors ///////////////////////
-   * Creates a new <code>DiskRegionStatistics</code> for the given
-   * region. 
+   * Creates a new <code>DiskRegionStatistics</code> for the given region.
-  /////////////////////  Instance Methods  /////////////////////
+  ///////////////////// Instance Methods /////////////////////
-   * Returns the total number of region entries that have been written
-   * to disk.
+   * Returns the total number of region entries that have been written to disk.
-   * Returns the total number of region entries that have been read
-   * from disk.
+   * Returns the total number of region entries that have been read from disk.
-   * Returns the total number of region entries that have been removed
-   * from disk.
+   * Returns the total number of region entries that have been removed from disk.
-   * Returns the current number of entries whose value has been
-   * overflowed to disk.  This value will decrease when a value is
-   * faulted in. 
+   * Returns the current number of entries whose value has been overflowed to disk. This value will
+   * decrease when a value is faulted in.
-  
+
-   * Returns the current number of entries whose value has been
-   * overflowed to disk.  This value will decrease when a value is
-   * faulted in. 
+   * Returns the current number of entries whose value has been overflowed to disk. This value will
+   * decrease when a value is faulted in.
-   * Returns the current number of entries whose value resides in the
-   * VM.  This value will decrease when the entry is overflowed to
-   * disk. 
+   * Returns the current number of entries whose value resides in the VM. This value will decrease
+   * when the entry is overflowed to disk.
-   * Increments the current number of entries whose value has been
-   * overflowed to disk by a given amount.
+   * Increments the current number of entries whose value has been overflowed to disk by a given
+   * amount.
-   * Increments the current number of entries whose value has been
-   * overflowed to disk by a given amount.
+   * Increments the current number of entries whose value has been overflowed to disk by a given
+   * amount.
-  
+
-   * Increments the current number of entries whose value has been
-   * overflowed to disk by a given amount.
+   * Increments the current number of entries whose value has been overflowed to disk by a given
+   * amount.
+
-   * @param start
-   *        The time at which the write operation started
+   * @param start The time at which the write operation started
-   * @param start
-   *        The time at which the read operation started
-   * @param bytesRead
-   *        The number of bytes that were read
+   * @param start The time at which the read operation started
+   * @param bytesRead The number of bytes that were read
-   * @param start
-   *        The time at which the read operation started
+   * @param start The time at which the read operation started
-    if(local) {
+    if (local) {
-  
+
-  
+
-  
-  public Statistics getStats(){
+
+  public Statistics getStats() {

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66