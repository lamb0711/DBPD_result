Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
-    boolean useMcast = false; // never use multicast for region meta-level ops (can cause hangs)
+    boolean useMcast = false; // multicast is disabled for this message for now
-    public boolean sendViaJGroups() {
+    public boolean sendViaUDP() {
-      if (!otherAsynEventQueueIds
+      if (!isLocalOrRemoteAccessor(rgn, profile) && !otherAsynEventQueueIds
+        
+      final boolean otherIsOffHeap = rgn.getAttributes().getOffHeap();
+      
+      boolean thisIsRemoteAccessor = false;
+      if (!rgn.getAttributes().getDataPolicy().withStorage() || (pa != null && pa.getLocalMaxMemory() == 0)) {
+        thisIsRemoteAccessor = true;
+      }
+          
+      if (!isRemoteAccessor(profile) && !thisIsRemoteAccessor && profile.isOffHeap != otherIsOffHeap) {
+        result = LocalizedStrings.CreateRegionProcessor_CANNOT_CREATE_REGION_0_WITH_OFF_HEAP_EQUALS_1_BECAUSE_ANOTHER_CACHE_2_HAS_SAME_THE_REGION_WITH_OFF_HEAP_EQUALS_3
+            .toLocalizedString(new Object[] { this.regionPath, profile.isOffHeap, myId, otherIsOffHeap });
+      }
-    public boolean sendViaJGroups() {
+    public boolean sendViaUDP() {

UPD42 UPD42 INS60 INS60 INS25 INS25 INS27 INS83 INS39 INS59 INS39 INS59 INS27 INS8 INS27 INS8 INS38 MOV38 INS42 INS32 INS42 INS9 INS38 INS36 INS21 INS38 INS38 INS27 INS21 INS32 INS32 INS42 INS32 INS27 INS7 INS32 INS42 INS40 INS42 INS7 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS27 INS27 INS42 INS9 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS33 INS32 INS34 INS40 INS42 INS3 INS42 INS42 INS42 INS42 INS5 INS4 INS43 INS85 INS22 INS40 INS42 INS42 INS42 INS52 INS42