GEODE-6861: Generify ClusterManagementService (#3708)

* GEODE-6861: Generify ClusterManagementService
+import org.apache.geode.management.api.RespondsWith;
-  private Map<Class, ConfigurationManager<? extends CacheElement>> managers;
+  private Map<Class, ConfigurationManager> managers;
+  private CacheElementValidator commonValidator;
-    this(persistenceService, new HashMap(), new HashMap(), null);
+    this(persistenceService, new HashMap<>(), new HashMap<>(), null, null);
-    validators.put(CacheElement.class, new CacheElementValidator());
+    commonValidator = new CacheElementValidator();
-      Map managers, Map validators, MemberValidator memberValidator) {
+      Map<Class, ConfigurationManager> managers, Map<Class, ConfigurationValidator> validators,
+      MemberValidator memberValidator, CacheElementValidator commonValidator) {
+    this.commonValidator = commonValidator;
-  public ClusterManagementResult create(CacheElement config) {
+  public <T extends CacheElement & RespondsWith<R>, R extends CacheElement> ClusterManagementResult<T> create(
+      T config) {
-      return new ClusterManagementResult(false,
+      return new ClusterManagementResult<>(false,
-    validators.get(CacheElement.class).validate(CacheElementOperation.CREATE, config);
-
+    commonValidator.validate(CacheElementOperation.CREATE, config);
-    ClusterManagementResult result = new ClusterManagementResult();
+    ClusterManagementResult<T> result = new ClusterManagementResult<>();
-  public ClusterManagementResult delete(CacheElement config) {
+  public <T extends CacheElement & RespondsWith<R>, R extends CacheElement> ClusterManagementResult<T> delete(
+      T config) {
-      return new ClusterManagementResult(false,
+      return new ClusterManagementResult<>(false,
-    validators.get(CacheElement.class).validate(CacheElementOperation.DELETE, config);
+    commonValidator.validate(CacheElementOperation.DELETE, config);
-    ClusterManagementResult result = new ClusterManagementResult();
+    ClusterManagementResult<T> result = new ClusterManagementResult<>();
-  public ClusterManagementResult update(CacheElement config) {
+  public <T extends CacheElement & RespondsWith<R>, R extends CacheElement> ClusterManagementResult<T> update(
+      T config) {
-  public <T extends CacheElement> ClusterManagementResult list(T filter) {
-    ConfigurationManager<T> manager = (ConfigurationManager<T>) managers.get(filter.getClass());
+  public <T extends CacheElement & RespondsWith<R>, R extends CacheElement> ClusterManagementResult<R> list(
+      T filter) {
+    ConfigurationManager<T, R> manager = managers.get(filter.getClass());
-    ClusterManagementResult result = new ClusterManagementResult();
+    ClusterManagementResult<R> result = new ClusterManagementResult<>();
-      List<? extends T> listResults = manager.list(filter, null);
+      List<R> listResults = manager.list(filter, null);
-      return new ClusterManagementResult(false,
+      return new ClusterManagementResult<>(false,
-    List<T> resultList = new ArrayList<>();
+    List<R> resultList = new ArrayList<>();
-      List<? extends T> listInGroup = manager.list(filter, currentPersistedConfig);
-      for (T element : listInGroup) {
+      List<R> listInGroup = manager.list(filter, currentPersistedConfig);
+      for (R element : listInGroup) {
-      List<MultiGroupCacheElement> multiGroupList = new ArrayList<>();
-      for (T element : resultList) {
+      List<R> multiGroupList = new ArrayList<>();
+      for (R element : resultList) {
-          MultiGroupCacheElement exist = multiGroupList.get(index);
+          MultiGroupCacheElement exist = (MultiGroupCacheElement) multiGroupList.get(index);
-          multiGroupList.add((MultiGroupCacheElement) element);
+          multiGroupList.add(element);
-            .filter(e -> e.getGroups().contains(filter.getConfigGroup()))
+            .filter(e -> ((MultiGroupCacheElement) e).getGroups().contains(filter.getConfigGroup()))
-      for (MultiGroupCacheElement element : multiGroupList) {
-        if (element.getGroups().size() == 1 && "cluster".equals(element.getGroup())) {
+      for (R elem : multiGroupList) {
+        MultiGroupCacheElement element = (MultiGroupCacheElement) elem;
+        if (element.getGroups().size() == 1 && CacheElement.CLUSTER.equals(element.getGroup())) {
-      resultList =
-          (List<T>) multiGroupList.stream().map(CacheElement.class::cast)
-              .collect(Collectors.toList());
+      resultList = multiGroupList;
-      for (T element : resultList) {
-        if ("cluster".equals(element.getGroup())) {
+      for (R element : resultList) {
+        if (CacheElement.CLUSTER.equals(element.getGroup())) {
-  public ClusterManagementResult get(CacheElement config) {
-    ClusterManagementResult list = list(config);
-    List<CacheElement> result = list.getResult(CacheElement.class);
+  public <T extends CacheElement & RespondsWith<R>, R extends CacheElement> ClusterManagementResult<R> get(
+      T config) {
+    ClusterManagementResult<R> list = list(config);
+    List<R> result = list.getResult();
-
-  private ConfigurationManager getConfigurationManager(CacheElement config) {
+  @SuppressWarnings("unchecked")
+  private <T extends CacheElement & RespondsWith<R>, R extends CacheElement> ConfigurationManager<T, R> getConfigurationManager(
+      T config) {

INS26 INS40 INS23 UPD74 INS83 INS43 INS59 INS44 INS73 INS73 INS74 INS73 INS73 INS74 INS73 INS73 UPD74 MOV74 INS73 INS74 INS73 INS73 INS74 MOV44 INS79 INS73 INS73 INS74 INS42 MOV44 MOV43 INS42 INS42 MOV14 INS74 INS74 INS43 INS42 INS21 INS42 MOV43 INS74 INS42 MOV43 MOV43 INS43 INS43 INS42 MOV43 INS74 INS42 MOV43 MOV43 INS43 MOV43 INS42 MOV43 INS74 INS42 MOV43 MOV43 MOV43 MOV43 INS74 INS42 MOV43 MOV43 INS43 INS42 MOV43 INS74 INS42 MOV43 MOV43 INS43 UPD42 INS42 INS45 INS42 MOV43 INS74 INS42 MOV43 MOV43 MOV43 INS43 UPD42 INS33 INS7 MOV43 INS43 MOV43 MOV43 INS43 INS43 INS42 INS7 INS43 INS43 INS42 INS42 INS74 INS43 INS43 INS42 INS74 INS43 INS43 INS43 INS43 INS42 UPD74 INS74 INS74 INS43 INS43 INS42 INS74 UPD74 INS43 INS43 INS42 INS74 INS74 INS42 MOV14 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 UPD42 MOV42 MOV43 INS43 UPD42 MOV42 INS42 UPD42 MOV42 MOV43 INS43 UPD42 MOV42 INS42 INS42 INS42 MOV43 INS43 MOV32 MOV43 INS43 INS43 INS43 INS42 INS42 MOV43 INS43 INS43 UPD42 MOV42 INS42 MOV43 MOV43 INS52 INS42 INS42 INS74 INS42 INS74 INS42 INS42 INS74 UPD74 INS42 INS42 UPD74 MOV74 UPD74 INS44 INS44 INS42 INS42 INS74 MOV43 INS74 MOV43 MOV43 INS43 INS74 UPD43 UPD43 MOV43 INS43 INS43 INS42 UPD43 UPD42 INS60 INS42 INS43 INS42 MOV43 INS42 MOV43 INS42 INS42 MOV43 UPD42 UPD42 MOV42 INS42 INS42 UPD42 MOV43 INS59 INS42 MOV32 INS42 INS11 INS32 INS40 INS43 INS32 INS43 INS42 INS40 INS42 MOV32 INS42 INS11 INS42 INS42 INS42 INS42 MOV43 MOV32 MOV32 INS36 UPD42 MOV11 UPD42 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL57 DEL32 DEL42 DEL57 DEL32 DEL42 DEL57 DEL32 DEL11 DEL76 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL74 DEL42 DEL42 DEL32 DEL42 DEL57 DEL42 DEL90 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL45 DEL45 DEL42 DEL32 DEL42 DEL44 DEL57 DEL42 DEL42 DEL44