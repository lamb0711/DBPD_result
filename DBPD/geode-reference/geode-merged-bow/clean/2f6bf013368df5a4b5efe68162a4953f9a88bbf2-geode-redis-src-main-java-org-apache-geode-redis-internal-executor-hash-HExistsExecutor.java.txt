GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)

* GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions

This PR builds on the work originally submitted by Greg Green in
https://github.com/apache/geode/pull/404. Also acknowledgements to Galen
O'Sullivan for addressing locking issues in that PR.

This commit changes the storage model of Redis hashes and sets from one
region per each Redis key to a single hash region and single set region.
The Redis key is now also the region key and the data is stored in a Map
and Set respectively in the region. Currently, the backing values do not
implement Delta changes, however this will be a future optimization.

This also fixes the inability of Redis keys to contain other characters
commonly used, such as colons (':').

- Add `RedisLockService` which manages a lock per key within a single
  JVM. Locks are held in a WeakHasMap to allow for automatic cleanup
  (prior PR work, using a pure ConcurrentHashMap, ended up leaking
  memory since there is no straight-forward way to clean up unused
  keys/locks).
- Add new tests including concurrency tests for hashes and sets

Co-authored-by: Greg Green <ggreen@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Prasath Durairaj <prasathd@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

+import java.util.Map;
-import org.apache.geode.cache.Region;
+import org.apache.geode.cache.TimeoutException;
+import org.apache.geode.redis.internal.AutoCloseableLock;
-import org.apache.geode.redis.internal.RedisDataType;
+/**
+ * <pre>
+ *
+ * Implements the Redis HEXISTS command to determine if a hash field exists for a given key.
+ *
+ * Examples:
+ *
+ * redis> HSET myhash field1 "foo"
+ * (integer) 1
+ * redis> HEXISTS myhash field1
+ * (integer) 1
+ * redis> HEXISTS myhash field2
+ * (integer) 0
+ *
+ * </pre>
+ */
-  private final int NOT_EXISTS = 0;
+  private static final int NOT_EXISTS = 0;
-  private final int EXISTS = 1;
+  private static final int EXISTS = 1;
+    boolean hasField;
+    byte[] byteField = commandElems.get(FIELD_INDEX);
+    ByteArrayWrapper field = new ByteArrayWrapper(byteField);
+    try (AutoCloseableLock regionLock = withRegionLock(context, key)) {
+      Map<ByteArrayWrapper, ByteArrayWrapper> map = getMap(context, key);
-    checkDataType(key, RedisDataType.REDIS_HASH, context);
-    Region<ByteArrayWrapper, ByteArrayWrapper> keyRegion = getRegion(context, key);
-
-    if (keyRegion == null) {
-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_EXISTS));
+      if (map == null || map.isEmpty()) {
+        command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_EXISTS));
+        return;
+      }
+      hasField = map.containsKey(field);
+    } catch (InterruptedException e) {
+      Thread.currentThread().interrupt();
+      command.setResponse(
+          Coder.getErrorResponse(context.getByteBufAllocator(), "Thread interrupted."));
+      return;
+    } catch (TimeoutException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          "Timeout acquiring lock. Please try again."));
-    byte[] byteField = commandElems.get(FIELD_INDEX);
-    ByteArrayWrapper field = new ByteArrayWrapper(byteField);
-
-    boolean hasField = keyRegion.containsKey(field);
-
-    if (hasField)
+    if (hasField) {
-    else
+    } else {
+    }

MOV26 INS26 INS40 UPD40 UPD40 INS29 INS65 INS83 INS83 MOV60 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS60 INS54 INS39 INS59 INS58 INS8 INS12 INS12 INS8 INS8 INS42 INS43 INS59 MOV60 MOV25 INS21 INS44 INS8 INS44 INS8 MOV21 MOV21 INS42 INS42 INS32 UPD74 INS27 INS7 INS43 INS42 INS21 INS21 INS41 INS43 INS42 INS21 INS41 INS42 UPD42 MOV42 MOV42 UPD43 UPD42 INS27 INS32 INS42 INS32 INS42 INS32 INS32 INS42 INS32 UPD42 UPD42 UPD42 MOV42 MOV33 INS42 INS42 UPD42 MOV42 MOV42 MOV42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS45 INS42 INS42 INS32 INS45 INS42 INS42 INS42 INS42 DEL40 DEL42 DEL32 DEL21 DEL27 DEL39 DEL42 DEL32 DEL59 DEL60