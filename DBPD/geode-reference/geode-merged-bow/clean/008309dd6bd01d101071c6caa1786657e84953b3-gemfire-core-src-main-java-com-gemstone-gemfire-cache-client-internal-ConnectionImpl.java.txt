Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.net.SocketException;
-  private final DistributedSystem ds;
+  private final InternalDistributedSystem ds;
-  public ConnectionImpl(DistributedSystem ds, CancelCriterion cancelCriterion) {
+  public ConnectionImpl(InternalDistributedSystem ds, CancelCriterion cancelCriterion) {
-      int handShakeTimeout, int readTimeout, byte communicationMode, GatewaySender sender)
+      int handShakeTimeout, int readTimeout, byte communicationMode, GatewaySender sender, SocketCreator sc)
-    SocketCreator sc = SocketCreator.getDefaultInstance();
-    DistributionConfig config = InternalDistributedSystem.getConnectedInstance().getConfig();
-    if (communicationMode == Acceptor.GATEWAY_TO_GATEWAY) {
-      sc = SocketCreator.createNonDefaultInstance(config.getGatewaySSLEnabled(),
-          config.getGatewaySSLRequireAuthentication(), config.getGatewaySSLProtocols(),
-          config.getGatewaySSLCiphers(), config.getGatewaySSLProperties());
-      if (sender!= null && !sender.getGatewayTransportFilters().isEmpty()) {
-        sc.initializeTransportFilterClientSocketFactory(sender);
-      }
-    } else {
-      //If configured use SSL properties for cache-server
-      sc = SocketCreator.createNonDefaultInstance(config.getServerSSLEnabled(),
-          config.getServerSSLRequireAuthentication(),
-          config.getServerSSLProtocols(),
-          config.getServerSSLCiphers(),
-          config.getServerSSLProperties());
-    }
-    if (!sc
-        .isHostReachable(InetAddress.getByName(location.getHostName()))) {
-      throw new NoRouteToHostException("Server is not reachable: " + location.getHostName());
-    }
-    commBuffer = ServerConnection.allocateCommBuffer(socketBufferSize);
+    commBuffer = ServerConnection.allocateCommBuffer(socketBufferSize, theSocket);
-          .allocateCommBuffer(socketBufferSize);
+          .allocateCommBuffer(socketBufferSize, theSocket);
-      SocketCreator sc = SocketCreator.getDefaultInstance();
-      if (!sc.isHostReachable(this.theSocket.getInetAddress())) {
-        return;
-      }
-
+    releaseCommBuffers();
+  }
+  
+  private void releaseCommBuffers() {
+    ByteBuffer bb = this.commBuffer;
+    if (bb != null) {
+      this.commBuffer = null;
+      ServerConnection.releaseCommBuffer(bb);
+    }
+    bb = this.commBufferForAsyncRead;
+    if (bb != null) {
+      this.commBufferForAsyncRead = null;
+      ServerConnection.releaseCommBuffer(bb);
+    }
-  public ByteBuffer getCommBuffer() {
+  public ByteBuffer getCommBuffer() throws SocketException {
+    if (isDestroyed()) {
+      // see bug 52193. Since the code used to see this
+      // as an attempt to use a close socket just throw
+      // a SocketException.
+      throw new SocketException("socket was closed");
+    }
-  public ByteBuffer getCommBufferForAsyncRead() {
+  public ByteBuffer getCommBufferForAsyncRead() throws SocketException {
+    if (isDestroyed()) {
+      // see bug 52193. Since the code used to see this
+      // as an attempt to use a close socket just throw
+      // a SocketException.
+      throw new SocketException("socket was closed");
+    }

INS26 INS40 INS31 UPD43 INS44 INS83 INS39 INS42 INS8 INS43 INS8 INS43 INS8 UPD42 UPD43 MOV43 INS42 INS21 INS60 INS25 INS21 INS25 INS42 INS25 MOV41 INS42 INS25 MOV41 UPD42 MOV27 INS32 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS32 INS8 INS32 INS8 INS42 INS42 INS42 INS22 INS42 INS33 INS21 INS21 INS42 INS22 INS42 INS33 INS21 INS21 INS42 INS53 INS42 INS53 INS42 INS52 INS42 INS7 INS32 INS52 INS42 INS7 INS32 INS14 INS14 INS22 INS33 INS42 INS42 INS42 INS22 INS33 INS42 INS42 INS42 INS43 INS45 INS43 INS45 INS42 INS52 INS42 INS52 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL32 DEL38 DEL42 DEL43 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL52 DEL42 DEL22 DEL42 DEL32 DEL32 DEL38 DEL41 DEL8 DEL25 DEL8 DEL8