GEODE-7885: Improve RedisLockService - fix synchronization and memory leak (#4819)

* GEODE-7885: Improve RedisLockService - fix synchronization and memory leak

- RedisLockService was not able to automatically free keys/locks after
  unlocking since keys were also beging referenced in regions.
- Fix synchronization while iterating over keySet to avoid
  ConcurrentModifiactionExceptions.

-  private Map<ByteArrayWrapper, Lock> map = Collections.synchronizedMap(new WeakHashMap<>());
+  private final Map<KeyHashIdentifier, Lock> weakReferencesTolocks =
+      Collections.synchronizedMap(new WeakHashMap<>());
-    return map.size();
+    return weakReferencesTolocks.size();
+    KeyHashIdentifier lockKey = new KeyHashIdentifier(key.toBytes());
+    KeyHashIdentifier referencedKey = lockKey;
+
-    Lock oldLock = map.putIfAbsent(key, lock);
-    if (oldLock != null) {
-      lock = oldLock;
-      // we need to get a reference to the actual key object so that the backing WeakHashMap does
-      // not clean it up.
-      for (ByteArrayWrapper keyInSet : map.keySet()) {
-        if (keyInSet.equals(key)) {
-          key = keyInSet;
-          break;
+    do {
+      Lock oldLock = weakReferencesTolocks.putIfAbsent(lockKey, lock);
+
+      if (oldLock != null) {
+        lock = oldLock;
+
+        // we need to get a reference to the actual key object
+        // so that the backing WeakHashMap does not clean it up
+        // when garbage collection happens.
+        referencedKey = getReferenceToLockKey(lockKey);
+      }
+    } while (referencedKey == null);
+
+    if (!lock.tryLock(timeoutMS, TimeUnit.MILLISECONDS)) {
+      throw new TimeoutException("Couldn't get lock for " + lockKey.toString());
+    }
+
+    return new AutoCloseableLock(referencedKey, lock);
+  }
+
+  private KeyHashIdentifier getReferenceToLockKey(KeyHashIdentifier lockKey) {
+    synchronized (weakReferencesTolocks) {
+      for (KeyHashIdentifier keyInSet : weakReferencesTolocks.keySet()) {
+        if (keyInSet.equals(lockKey)) {
+          return keyInSet;
-    if (!lock.tryLock(timeoutMS, TimeUnit.MILLISECONDS)) {
-      throw new TimeoutException("Couldn't get lock for " + key.toString());
-    }
-
-    return new AutoCloseableLock(key, lock);
-  }
-
-  int getMapSize() {
-    return map.size();
+    return null;

INS83 UPD74 MOV60 INS83 INS43 UPD42 INS44 INS8 UPD43 UPD42 INS60 INS19 INS42 INS43 INS42 INS51 INS41 UPD42 INS43 INS43 INS59 INS8 INS27 INS42 INS42 INS8 INS33 UPD42 INS42 UPD42 INS14 UPD42 MOV42 INS42 INS42 INS60 INS25 INS42 INS33 UPD42 INS70 INS43 INS32 MOV43 INS59 MOV27 MOV8 INS44 INS32 INS8 INS42 MOV42 UPD42 MOV42 INS42 INS32 MOV21 INS43 INS42 INS42 INS42 INS25 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS8 UPD42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 INS41 INS42 INS42 INS42 DEL42 DEL42 DEL32 DEL42 DEL10 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL32 DEL25 DEL8 DEL70 DEL8 DEL25 DEL39 DEL32 DEL41 DEL8