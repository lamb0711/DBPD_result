Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  private static final GetMemberInformationFunction getMemberInformation = new GetMemberInformationFunction();
-  @CliCommand(value = { CliStrings.LIST_MEMBER }, help = CliStrings.LIST_MEMBER__HELP)
+  private static final GetMemberInformationFunction getMemberInformation =
+      new GetMemberInformationFunction();
+
+  @CliCommand(value = {CliStrings.LIST_MEMBER}, help = CliStrings.LIST_MEMBER__HELP)
-  public Result listMember(
-		  @CliOption(key = { CliStrings.LIST_MEMBER__GROUP },
-		             unspecifiedDefaultValue = "",
-		             optionContext = ConverterHint.MEMBERGROUP,
-		             help = CliStrings.LIST_MEMBER__GROUP__HELP)
-                  String group) {
+  public Result listMember(@CliOption(key = {CliStrings.LIST_MEMBER__GROUP},
+      unspecifiedDefaultValue = "", optionContext = ConverterHint.MEMBERGROUP,
+      help = CliStrings.LIST_MEMBER__GROUP__HELP) String group) {
-    //TODO: Add the code for identifying the system services
+    // TODO: Add the code for identifying the system services
-      //default get all the members in the DS
+      // default get all the members in the DS
-      result = ResultBuilder.createGemFireErrorResult("Could not fetch the list of members. "+e.getMessage());
+      result = ResultBuilder
+          .createGemFireErrorResult("Could not fetch the list of members. " + e.getMessage());
-  @CliCommand(value = { CliStrings.DESCRIBE_MEMBER }, help = CliStrings.DESCRIBE_MEMBER__HELP)
+  @CliCommand(value = {CliStrings.DESCRIBE_MEMBER}, help = CliStrings.DESCRIBE_MEMBER__HELP)
-  public Result describeMember(
-  	@CliOption(key = CliStrings.DESCRIBE_MEMBER__IDENTIFIER,
-  	             optionContext = ConverterHint.ALL_MEMBER_IDNAME,
-		  					 help = CliStrings.DESCRIBE_MEMBER__HELP,
-		  					 mandatory=true)
-                  String memberNameOrId) {
-  	Result result = null;
+  public Result describeMember(@CliOption(key = CliStrings.DESCRIBE_MEMBER__IDENTIFIER,
+      optionContext = ConverterHint.ALL_MEMBER_IDNAME, help = CliStrings.DESCRIBE_MEMBER__HELP,
+      mandatory = true) String memberNameOrId) {
+    Result result = null;
-  	try {
-      DistributedMember memberToBeDescribed = CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
+    try {
+      DistributedMember memberToBeDescribed =
+          CliUtil.getDistributedMemberByNameOrId(memberNameOrId);
-        //Abhishek - This information should be available through the MBeans too. We might not need the function.
-        //Sourabh - Yes, but then the command is subject to Mbean availability, which would be affected once MBean filters are used.
+        // Abhishek - This information should be available through the MBeans too. We might not need
+        // the function.
+        // Sourabh - Yes, but then the command is subject to Mbean availability, which would be
+        // affected once MBean filters are used.
-        ResultCollector <?, ?> rc = CliUtil.executeFunction(getMemberInformation, null, memberToBeDescribed);
+        ResultCollector<?, ?> rc =
+            CliUtil.executeFunction(getMemberInformation, null, memberToBeDescribed);
-        if (obj != null && (obj instanceof MemberInformation) ) {
+        if (obj != null && (obj instanceof MemberInformation)) {
-        	MemberInformation memberInformation = (MemberInformation) obj;
-        	memberInformation.setName(memberToBeDescribed.getName());
-        	memberInformation.setId(memberToBeDescribed.getId());
-        	memberInformation.setHost(memberToBeDescribed.getHost());
-        	memberInformation.setProcessId(""+memberToBeDescribed.getProcessId());
+          MemberInformation memberInformation = (MemberInformation) obj;
+          memberInformation.setName(memberToBeDescribed.getName());
+          memberInformation.setId(memberToBeDescribed.getId());
+          memberInformation.setHost(memberToBeDescribed.getHost());
+          memberInformation.setProcessId("" + memberToBeDescribed.getProcessId());
-        	SectionResultData section = crd.addSection();
-        	section.addData("Name", memberInformation.getName());
-        	section.addData("Id", memberInformation.getId());
-        	section.addData("Host", memberInformation.getHost());
-        	section.addData("Regions", CliUtil.convertStringSetToString(memberInformation.getHostedRegions(), '\n'));
-        	section.addData("PID", memberInformation.getProcessId());
-        	section.addData("Groups", memberInformation.getGroups());
-        	section.addData("Used Heap", memberInformation.getHeapUsage() + "M");
-        	section.addData("Max Heap", memberInformation.getMaxHeapSize() + "M");
-        	{
-        	  String offHeapMemorySize = memberInformation.getOffHeapMemorySize();
-        	  if (offHeapMemorySize != null && !offHeapMemorySize.isEmpty()) {
-        	    section.addData("Off Heap Size", offHeapMemorySize);
-        	  }
-        	}
-        	section.addData("Working Dir", memberInformation.getWorkingDirPath());
-        	section.addData("Log file", memberInformation.getLogFilePath());
+          SectionResultData section = crd.addSection();
+          section.addData("Name", memberInformation.getName());
+          section.addData("Id", memberInformation.getId());
+          section.addData("Host", memberInformation.getHost());
+          section.addData("Regions",
+              CliUtil.convertStringSetToString(memberInformation.getHostedRegions(), '\n'));
+          section.addData("PID", memberInformation.getProcessId());
+          section.addData("Groups", memberInformation.getGroups());
+          section.addData("Used Heap", memberInformation.getHeapUsage() + "M");
+          section.addData("Max Heap", memberInformation.getMaxHeapSize() + "M");
+          {
+            String offHeapMemorySize = memberInformation.getOffHeapMemorySize();
+            if (offHeapMemorySize != null && !offHeapMemorySize.isEmpty()) {
+              section.addData("Off Heap Size", offHeapMemorySize);
+            }
+          }
+          section.addData("Working Dir", memberInformation.getWorkingDirPath());
+          section.addData("Log file", memberInformation.getLogFilePath());
-        	section.addData("Locators", memberInformation.getLocators());
+          section.addData("Locators", memberInformation.getLocators());
-        	if (memberInformation.isServer()) {
-        	  SectionResultData clientServiceSection = crd.addSection();
-        	  List<CacheServerInfo> csList = memberInformation.getCacheServeInfo();
+          if (memberInformation.isServer()) {
+            SectionResultData clientServiceSection = crd.addSection();
+            List<CacheServerInfo> csList = memberInformation.getCacheServeInfo();
-        	  if (csList != null) {
-        	    Iterator<CacheServerInfo> iters = csList.iterator();
+            if (csList != null) {
+              Iterator<CacheServerInfo> iters = csList.iterator();
-                clientServiceSection.addData("Server Bind",cacheServerInfo.getBindAddress());
-                clientServiceSection.addData("Server Port" , cacheServerInfo.getPort());
-                clientServiceSection.addData("Running" , cacheServerInfo.isRunning());
+                clientServiceSection.addData("Server Bind", cacheServerInfo.getBindAddress());
+                clientServiceSection.addData("Server Port", cacheServerInfo.getPort());
+                clientServiceSection.addData("Running", cacheServerInfo.isRunning());
-              clientServiceSection.addData("Client Connections", memberInformation.getClientCount());
-        	  }
-        	}
-        	result = ResultBuilder.buildResult(crd);
+              clientServiceSection.addData("Client Connections",
+                  memberInformation.getClientCount());
+            }
+          }
+          result = ResultBuilder.buildResult(crd);
-          result = ResultBuilder.createInfoResult(CliStrings.format(CliStrings.DESCRIBE_MEMBER__MSG__INFO_FOR__0__COULD_NOT_BE_RETRIEVED, new Object[] {memberNameOrId}));
+          result = ResultBuilder.createInfoResult(CliStrings.format(
+              CliStrings.DESCRIBE_MEMBER__MSG__INFO_FOR__0__COULD_NOT_BE_RETRIEVED,
+              new Object[] {memberNameOrId}));
-        result = ResultBuilder.createInfoResult(CliStrings.format(CliStrings.DESCRIBE_MEMBER__MSG__NOT_FOUND, new Object[] {memberNameOrId}));
+        result = ResultBuilder.createInfoResult(CliStrings
+            .format(CliStrings.DESCRIBE_MEMBER__MSG__NOT_FOUND, new Object[] {memberNameOrId}));

