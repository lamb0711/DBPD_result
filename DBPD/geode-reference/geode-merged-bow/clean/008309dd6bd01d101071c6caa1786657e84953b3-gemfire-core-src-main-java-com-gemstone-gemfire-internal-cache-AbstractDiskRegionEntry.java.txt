Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2010-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * one or more patents listed at http://www.pivotal.io/patents.
- *=========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+
+import com.gemstone.gemfire.internal.cache.wan.GatewaySenderEventImpl;
+import com.gemstone.gemfire.internal.cache.wan.serial.SerialGatewaySenderQueue;
+import com.gemstone.gemfire.internal.offheap.annotations.Released;
+import com.gemstone.gemfire.internal.offheap.annotations.Retained;
-    //_setValue(compress(context,value));  // compress is now called in AbstractRegionMap.prepareValueForCache
+    if (value != null && context != null && (this instanceof OffHeapRegionEntry) 
+        && context instanceof LocalRegion && ((LocalRegion)context).isThisRegionBeingClosedOrDestroyed()) {
+      ((OffHeapRegionEntry)this).release();
+      ((LocalRegion)context).checkReadiness();
+    }
+
+  @Override
+  public void handleValueOverflow(RegionEntryContext context) {
+    if (context instanceof BucketRegionQueue || context instanceof SerialGatewaySenderQueue.SerialGatewaySenderQueueMetaRegion) {
+      GatewaySenderEventImpl.release(this._getValue()); // OFFHEAP _getValue ok
+    }
+  }
+  @Override
+  public void afterValueOverflow(RegionEntryContext context) {
+    //NO OP
+    //Overridden in sqlf RegionEntry
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS8 INS78 INS83 INS39 INS42 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS8 MOV21 INS25 INS42 INS43 INS42 INS25 INS42 INS43 INS42 INS27 INS8 INS42 INS27 INS8 INS42 INS27 INS32 INS21 INS21 INS62 INS62 INS21 INS27 INS62 INS36 INS42 INS32 INS32 INS42 INS43 INS42 INS43 INS32 INS27 INS36 INS42 INS43 INS11 INS36 INS42 INS36 INS42 INS42 INS40 INS42 INS42 INS32 INS27 INS27 INS62 INS42 INS43 INS42 INS11 INS11 INS52 INS42 INS42 INS33 INS42 INS33 INS52 INS43 INS42 INS43 INS52 INS43 INS42 INS42 INS42 INS42 DEL8