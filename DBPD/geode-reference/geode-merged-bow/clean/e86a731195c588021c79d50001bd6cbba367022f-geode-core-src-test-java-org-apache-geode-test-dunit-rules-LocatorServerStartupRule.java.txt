Merge branch 'release/1.3.0'

-import org.apache.geode.internal.AvailablePortHelper;
-import org.apache.geode.test.dunit.VM;
-import org.apache.geode.test.dunit.standalone.DUnitLauncher;
-import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;
-import org.junit.rules.ExternalResource;
-import org.junit.rules.TemporaryFolder;
-
-import java.util.Arrays;
-import java.util.Objects;
+import java.util.stream.IntStream;
+
+import org.junit.rules.ExternalResource;
+import org.junit.rules.TemporaryFolder;
+
+import org.apache.geode.internal.AvailablePortHelper;
+import org.apache.geode.test.dunit.VM;
+import org.apache.geode.test.dunit.standalone.DUnitLauncher;
+import org.apache.geode.test.junit.rules.Locator;
+import org.apache.geode.test.junit.rules.LocatorStarterRule;
+import org.apache.geode.test.junit.rules.Member;
+import org.apache.geode.test.junit.rules.MemberStarterRule;
+import org.apache.geode.test.junit.rules.Server;
+import org.apache.geode.test.junit.rules.ServerStarterRule;
+import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;
-
-  private TemporaryFolder temporaryFolder = new SerializableTemporaryFolder();
+  private TemporaryFolder tempWorkingDir;
+  private boolean logFile = false;
+
+  /**
+   * This will use a temporary folder to hold all the vm directories instead of using dunit folder.
+   * It will set each VM's working dir to its respective sub-directories.
+   *
+   * use this if you want to examine each member's file system without worrying about it's being
+   * contaminated with DUnitLauncher's log files that exists in each dunit/vm folder such as
+   * locator0View.dat and locator0views.log and other random log files. This will cause the VMs to
+   * be bounced after test is done, because it dynamically changes the user.dir system property.
+   */
+  public LocatorServerStartupRule withTempWorkingDir() {
+    tempWorkingDir = new SerializableTemporaryFolder();
+    return this;
+  }
+
+  public boolean useTempWorkingDir() {
+    return tempWorkingDir != null;
+  }
+
+  /**
+   * this will allow all the logs go into log files instead of going into the console output
+   */
+  public LocatorServerStartupRule withLogFile() {
+    this.logFile = true;
+    return this;
+  }
+
-    temporaryFolder.create();
-    members = new MemberVM[4];
+    if (useTempWorkingDir()) {
+      tempWorkingDir.create();
+    }
+    members = new MemberVM[DUnitLauncher.NUM_VMS];
-    DUnitLauncher.closeAndCheckForSuspects();
-    restoreSystemProperties.after();
-    temporaryFolder.delete();
-    Arrays.stream(members).filter(Objects::nonNull).forEach(MemberVM::stopMember);
+    try {
+      DUnitLauncher.closeAndCheckForSuspects();
+    } finally {
+      MemberStarterRule.disconnectDSIfAny();
+      IntStream.range(0, DUnitLauncher.NUM_VMS).forEach(this::stopVM);
+
+      if (useTempWorkingDir()) {
+        tempWorkingDir.delete();
+      }
+      restoreSystemProperties.after();
+    }
-  public MemberVM<Locator> startLocatorVM(int index, Properties properties) throws Exception {
-    String name = "locator-" + index;
-    properties.setProperty(NAME, name);
-    File workingDir = createWorkingDirForMember(name);
-    VM locatorVM = getHost(0).getVM(index);
+  public MemberVM<Locator> startLocatorVM(int index, Properties specifiedProperties)
+      throws Exception {
+    Properties properties = new Properties();
+    properties.putAll(specifiedProperties);
+
+    String defaultName = "locator-" + index;
+    properties.putIfAbsent(NAME, defaultName);
+    String name = properties.getProperty(NAME);
+
+    VM locatorVM = getVM(index);
-      locatorStarter = new LocatorStarterRule(workingDir);
+      locatorStarter = new LocatorStarterRule();
+      if (useTempWorkingDir()) {
+        File workingDirFile = createWorkingDirForMember(name);
+        locatorStarter.withWorkingDir(workingDirFile);
+      }
+      if (logFile) {
+        locatorStarter.withLogFile();
+      }
-    members[index] = new MemberVM(locator, locatorVM);
+    members[index] = new MemberVM(locator, locatorVM, useTempWorkingDir());
-
-  public MemberVM startServerAsJmxManager(int index) throws IOException {
+  /**
+   * Starts a cache server with given properties
+   */
+  public MemberVM startServerVM(int index, Properties specifiedProperties, int locatorPort)
+      throws IOException {
+    properties.putAll(specifiedProperties);
+
+    String defaultName = "server-" + index;
+    properties.putIfAbsent(NAME, defaultName);
+    String name = properties.getProperty(NAME);
+
+    VM serverVM = getVM(index);
+    Server server = serverVM.invoke(() -> {
+      serverStarter = new ServerStarterRule();
+      if (useTempWorkingDir()) {
+        File workingDirFile = createWorkingDirForMember(name);
+        serverStarter.withWorkingDir(workingDirFile);
+      }
+      if (logFile) {
+        serverStarter.withLogFile();
+      }
+      serverStarter.withProperties(properties).withConnectionToLocator(locatorPort).withAutoStart();
+      serverStarter.before();
+      return serverStarter;
+    });
+    members[index] = new MemberVM(server, serverVM, useTempWorkingDir());
+    return members[index];
+  }
+
+  public MemberVM startServerAsJmxManager(int index) throws IOException {
+    return startServerAsJmxManager(index, new Properties());
+  }
+
+  public MemberVM startServerAsJmxManager(int index, Properties properties) throws IOException {
+    return startServerAsEmbededLocator(index, new Properties());
+  }
+
+  public MemberVM startServerAsEmbededLocator(int index, Properties properties) throws IOException {
-    File workingDir = createWorkingDirForMember(name);
-    VM serverVM = getHost(0).getVM(index);
+
+    VM serverVM = getVM(index);
-      serverStarter = new ServerStarterRule(workingDir);
-      serverStarter.withEmbeddedLocator().withName(name).withJMXManager().withAutoStart();
+      serverStarter = new ServerStarterRule();
+      if (useTempWorkingDir()) {
+        File workingDirFile = createWorkingDirForMember(name);
+        serverStarter.withWorkingDir(workingDirFile);
+      }
+      if (logFile) {
+        serverStarter.withLogFile();
+      }
+      serverStarter.withEmbeddedLocator().withProperties(properties).withName(name).withJMXManager()
+          .withAutoStart();
-    members[index] = new MemberVM(server, serverVM);
+    members[index] = new MemberVM(server, serverVM, useTempWorkingDir());
-  public void stopMember(int index) {
+  public void stopVM(int index) {
-    member.stopMember();
+    // user has started a server/locator in this VM
+    if (member != null) {
+      member.stopMember();
+    }
+    // user may have used this VM as a client VM
+    else {
+      getVM(index).invoke(() -> MemberStarterRule.disconnectDSIfAny());
+    }
-   * Starts a cache server with given properties
-   */
-  public MemberVM startServerVM(int index, Properties properties, int locatorPort)
-      throws IOException {
-    String name = "server-" + index;
-    properties.setProperty(NAME, name);
-
-    File workingDir = createWorkingDirForMember(name);
-    VM serverVM = getHost(0).getVM(index);
-    Server server = serverVM.invoke(() -> {
-      serverStarter = new ServerStarterRule(workingDir);
-      serverStarter.withProperties(properties).withConnectionToLocator(locatorPort).withAutoStart();
-      serverStarter.before();
-      return serverStarter;
-    });
-    members[index] = new MemberVM(server, serverVM);
-    return members[index];
-  }
-
-
-  /**
-  public TemporaryFolder getTempFolder() {
-    return temporaryFolder;
+  public TemporaryFolder getTempWorkingDir() {
+    return tempWorkingDir;
+  }
+
+  public File getWorkingDirRoot() {
+    if (useTempWorkingDir())
+      return tempWorkingDir.getRoot();
+
+    // return the dunit folder
+    return new File(DUnitLauncher.DUNIT_DIR);
-    File workingDir = new File(temporaryFolder.getRoot(), dirName).getAbsoluteFile();
+    File workingDir = new File(tempWorkingDir.getRoot(), dirName).getAbsoluteFile();
-      temporaryFolder.newFolder(dirName);
+      tempWorkingDir.newFolder(dirName);

MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 MOV31 UPD40 UPD40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS39 INS59 INS29 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS8 INS44 INS83 INS43 INS42 INS44 INS43 INS8 INS44 INS83 INS43 INS42 INS44 INS43 INS8 MOV44 UPD42 UPD42 INS83 INS43 INS42 INS8 UPD42 INS42 INS9 INS65 INS42 INS21 INS41 INS41 INS65 INS42 INS21 INS41 INS25 INS54 INS43 INS42 MOV60 INS21 INS60 INS21 UPD42 INS60 INS21 INS60 INS42 INS39 INS42 INS42 INS41 INS43 INS42 INS42 INS39 INS42 INS42 INS41 MOV21 INS25 INS42 INS25 INS41 INS66 INS66 INS66 INS66 INS66 INS66 INS7 INS52 INS27 INS66 INS7 INS52 INS32 INS8 INS8 INS8 INS42 INS32 INS43 INS59 INS7 INS43 INS59 INS32 INS43 INS59 INS32 INS42 INS32 INS27 INS8 INS8 UPD42 INS32 INS41 INS14 MOV43 INS42 MOV14 INS42 INS33 INS22 INS9 INS42 MOV21 MOV21 MOV21 INS21 INS25 MOV21 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS32 MOV2 INS14 INS42 INS42 INS14 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS33 MOV21 INS21 INS42 INS32 MOV43 INS40 INS52 INS42 INS40 INS32 INS32 INS8 INS42 INS42 INS42 MOV43 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS32 INS43 INS43 UPD42 UPD42 INS32 INS32 INS42 INS42 UPD42 UPD42 UPD42 MOV32 UPD42 MOV42 MOV90 UPD42 MOV42 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS86 UPD42 UPD42 UPD42 INS34 INS40 INS52 UPD42 INS32 INS25 INS25 INS25 INS25 INS25 INS25 INS42 INS42 INS32 UPD42 INS42 INS42 INS32 INS8 INS42 INS8 INS32 INS8 INS42 INS8 INS32 INS8 INS42 INS8 INS32 INS42 INS42 INS42 INS60 INS21 INS21 INS42 MOV60 INS21 INS21 INS42 MOV60 INS21 INS21 MOV32 INS42 MOV43 INS59 INS32 INS32 INS32 INS32 INS43 INS32 INS32 UPD42 INS42 MOV32 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 UPD42 UPD42 DEL34 DEL42 DEL42 DEL32 DEL42 DEL42 DEL90 DEL32 DEL21 DEL8 DEL42 DEL34 DEL32 DEL42 DEL42 DEL34 DEL32 DEL42 DEL42 DEL59 DEL60 DEL42 DEL34 DEL32 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21