GEODE-3964: More logging for suspect processing. (#1088)

GEODE-3964: More logging for suspect processing.

Add an extra level of logging if a view doesn't come back during severe
alert processing.
+import java.util.Arrays;
-  protected boolean keeperCleanedUp;
+  private boolean keeperCleanedUp;
-  protected long statStart;
+  long statStart;
-  protected long initTime;
+  private long initTime;
-  protected boolean severeAlertEnabled;
+  private boolean severeAlertEnabled;
-  protected volatile boolean severeAlertTimerReset;
+  private volatile boolean severeAlertTimerReset;
-  public static final ThreadLocal SevereAlertShorten = new ThreadLocal() {
-    @Override
-    protected Object initialValue() {
-      return Boolean.FALSE;
-    }
-  };
+  private static final ThreadLocal<Boolean> severeAlertShorten =
+      ThreadLocal.withInitial(() -> Boolean.FALSE);
-  private static ThreadLocal ForceSevereAlertProcessing = new ThreadLocal() {
-    @Override
-    protected Object initialValue() {
-      return Boolean.FALSE;
-    }
-  };
+  private static ThreadLocal<Boolean> forceSevereAlertProcessing =
+      ThreadLocal.withInitial(() -> Boolean.FALSE);
-  protected void postWait() {
+  private void postWait() {
-  // start waiting for replies without explicitly waiting for all of them using
-  // waitForReplies* methods; useful for streaming of results in function execution
-  public void startWait() {
-    if (!this.waiting && stillWaiting()) {
-      preWait();
-    }
-  }
-
-  // end waiting for replies without explicitly invoking waitForReplies*
-  // methods; useful for streaming of results in function execution
-  public void endWait(boolean doCleanup) {
-    try {
-      postWait();
-    } finally {
-      if (doCleanup) {
-        cleanup();
-      }
-    }
-  }
-  protected boolean basicWait(long msecs, StoppableCountDownLatch latch)
+  private boolean basicWait(long msecs, StoppableCountDownLatch latch)
-      long severeAlertTimeout = getAckSevereAlertThresholdMS();
+      final long severeAlertTimeout = getAckSevereAlertThresholdMS();
+      // only start SUSPECT processing if severe alerts are enabled
+      final boolean doSuspectProcessing =
+          isSevereAlertProcessingEnabled() && (severeAlertTimeout > 0);
-          // only start SUSPECT processing if severe alerts are enabled
-          timeout(isSevereAlertProcessingEnabled() && (severeAlertTimeout > 0), false);
+          timeout(doSuspectProcessing, false);
-          if (isSevereAlertProcessingEnabled() && severeAlertTimeout > 0) {
-            boolean timedout;
+          if (doSuspectProcessing) {
+            boolean wasNotUnlatched;
-              timedout = !latch.await(severeAlertTimeout);
-            } while (timedout && this.severeAlertTimerReset);
-            if (timedout) {
+              wasNotUnlatched = !latch.await(severeAlertTimeout);
+            } while (wasNotUnlatched && this.severeAlertTimerReset);
+            if (wasNotUnlatched) {
-              // for consistency, we must now wait for a membership view
-              // that ejects the removed members
-              latch.await();
+
+              long suspectProcessingErrorAlertTimeout = severeAlertTimeout * 3;
+              if (!latch.await(suspectProcessingErrorAlertTimeout)) {
+                long now = System.currentTimeMillis();
+                long totalTimeElapsed = now - this.initTime;
+
+                String waitingOnMembers;
+                synchronized (members) {
+                  waitingOnMembers = Arrays.toString(members);
+                }
+                logger.fatal("An additional " + suspectProcessingErrorAlertTimeout
+                    + " milliseconds have elapsed while waiting for replies. Total of "
+                    + totalTimeElapsed + " milliseconds elapsed (init time:" + this.initTime
+                    + ", now: " + now + ") Waiting for members: " + waitingOnMembers);
+
+                // for consistency, we must now wait indefinitely for a membership view
+                // that ejects the removed members
+                latch.await();
+              }
-      } else {
-        if (msecs > timeout) {
-          if (!latch.await(timeout)) {
-            timeout(isSevereAlertProcessingEnabled() && (severeAlertTimeout > 0), false);
-            // after timeout alert, wait remaining time
-            if (!latch.await(msecs - timeout)) {
-              logger.info(LocalizedMessage.create(
-                  LocalizedStrings.ReplyProcessor21_WAIT_FOR_REPLIES_TIMING_OUT_AFTER_0_SEC,
-                  Long.valueOf(msecs / 1000)));
-              return false;
-            }
-            // Give an info message since timeout gave a warning.
+      } else if (msecs > timeout) {
+        if (!latch.await(timeout)) {
+          timeout(doSuspectProcessing, false);
+          // after timeout alert, wait remaining time
+          if (!latch.await(msecs - timeout)) {
-                LocalizedStrings.ReplyProcessor21_WAIT_FOR_REPLIES_COMPLETED_1, shortName()));
-          }
-        } else {
-          if (!latch.await(msecs)) {
+                LocalizedStrings.ReplyProcessor21_WAIT_FOR_REPLIES_TIMING_OUT_AFTER_0_SEC,
+                Long.valueOf(msecs / 1000)));
+          // Give an info message since timeout gave a warning.
+          logger.info(LocalizedMessage
+              .create(LocalizedStrings.ReplyProcessor21_WAIT_FOR_REPLIES_COMPLETED_1, shortName()));
+        }
+      } else {
+        if (!latch.await(msecs)) {
+          return false;
-    SevereAlertShorten.set(Boolean.valueOf(flag));
+    severeAlertShorten.set(flag);
-    return ((Boolean) SevereAlertShorten.get()).booleanValue();
+    return severeAlertShorten.get();
-    ForceSevereAlertProcessing.set(Boolean.TRUE);
+    forceSevereAlertProcessing.set(Boolean.TRUE);
-    ForceSevereAlertProcessing.set(Boolean.FALSE);
+    forceSevereAlertProcessing.set(Boolean.FALSE);
-    return ((Boolean) ForceSevereAlertProcessing.get()).booleanValue();
+    return forceSevereAlertProcessing.get();
-    if (disconnectTimeout > 0 && ((Boolean) SevereAlertShorten.get()).booleanValue()) {
+    if (disconnectTimeout > 0 && severeAlertShorten.get()) {
-  private static final ThreadLocal messageId = new ThreadLocal();
+  private static final ThreadLocal<Integer> messageId = new ThreadLocal<>();
-  private static final Integer VOID_RPID = Integer.valueOf(0);
+  private static final Integer VOID_RPID = 0;
-    messageId.set(Integer.valueOf(id));
+    messageId.set(id);
-      result = ((Integer) v).intValue();
+      result = (Integer) v;

INS26 INS40 UPD83 UPD83 UPD83 UPD83 UPD83 INS74 INS74 UPD83 UPD83 INS74 MOV43 MOV43 UPD42 INS32 MOV43 MOV43 UPD42 INS32 MOV43 INS43 INS34 INS42 INS42 INS86 INS42 INS42 INS86 INS32 INS32 INS42 INS74 INS40 INS40 INS60 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 MOV42 MOV42 INS32 MOV43 MOV42 INS83 INS83 INS39 INS59 MOV25 UPD42 MOV42 MOV42 INS42 MOV27 MOV11 INS42 INS42 INS42 INS8 UPD42 MOV42 UPD42 UPD42 MOV21 MOV21 INS60 INS25 INS39 INS59 INS38 INS8 UPD42 INS42 INS27 INS32 INS60 INS60 INS60 INS51 INS21 MOV21 INS42 INS34 INS42 INS42 INS42 INS39 INS59 INS39 INS59 INS43 INS59 INS42 INS8 INS32 INS42 INS32 INS42 INS27 INS42 INS42 INS21 INS42 INS42 INS27 INS42 INS42 INS42 INS22 INS7 INS45 INS42 INS45 INS42 INS45 INS22 INS45 INS42 INS45 INS42 INS52 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL43 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL1 DEL14 DEL42 DEL43 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL40 DEL41 DEL8 DEL31 DEL1 DEL14 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL38 DEL42 DEL32 DEL27 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL54 DEL8 DEL31 DEL42 DEL32 DEL42 DEL34 DEL27 DEL27 DEL42 DEL8 DEL32 DEL42 DEL34 DEL27 DEL36 DEL27 DEL8 DEL42 DEL42 DEL32 DEL32 DEL11 DEL36 DEL42 DEL32 DEL32 DEL11 DEL36 DEL42 DEL32 DEL42 DEL43 DEL32 DEL11 DEL36 DEL42 DEL32 DEL42 DEL42 DEL34 DEL32 DEL42 DEL42 DEL32 DEL36 DEL42 DEL32