Merge branch 'develop' into feature/GEODE-420

# Conflicts:
#	geode-assembly/src/test/java/com/gemstone/gemfire/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/DistributionConfig.java
#	geode-core/src/main/java/com/gemstone/gemfire/distributed/internal/membership/gms/GMSUtil.java
#	geode-core/src/main/java/com/gemstone/gemfire/internal/cache/tier/sockets/AcceptorImpl.java
#	geode-core/src/main/java/com/gemstone/gemfire/management/internal/ManagementAgent.java
#	geode-core/src/main/java/org/apache/geode/redis/GeodeRedisServer.java
#	geode-core/src/test/java/com/gemstone/gemfire/distributed/LocatorDUnitTest.java

+import java.io.File;
+import java.io.FileInputStream;
+import java.io.Serializable;
-import java.security.Principal;
-import javax.management.remote.JMXPrincipal;
-
-import org.apache.geode.security.GeodePermission;
+import org.apache.geode.security.ResourcePermission;
- * This class provides a sample implementation for authentication and authorization via the {@link SecurityManager}
+ * This class provides a sample implementation of {@link SecurityManager} for
+ * authentication and authorization initialized from data provided as JSON.
- * In order to use it, a Geode member must be started with the following properties:
- * <p/>
- * <code>
- *   security-manager = com.gemstone.gemfire.security.examples.SampleSecurityManager
- * </code>
- * <p/>
- * The class is initialized with a JSON file called {@code security.json}. This file must exist on the classpath,
+ * <p>A Geode member must be configured with the following:
+ *
+ * <p>{@code security-manager = com.gemstone.gemfire.security.examples.SampleSecurityManager}
+ *
+ * <p>The class can be initialized with from either a JSON string or a JSON
+ * file
+ *
+ * <p>TODO: example of configuring from in-memory JSON string specified in securityProperties
+ *
+ * <p>TODO: example of configuring from a JSON file specified in securityProperties<br/>
+ * ...called {@code security.json}. This file must exist on the classpath,
- * <p/>
- * The format of the file is as follows:
- * <pre>
+ *
+ * <p>The format of the JSON for configuration is as follows:
+ * <pre><code>
- *   ]
+ *   ],
- *       "password": "secret".
+ *       "password": "secret",
- * </pre>
+ * </code></pre>
-  public SampleSecurityManager() {
-    try {
-      setUpWithJsonFile("security.json");
-    }
-    catch (IOException e) {
-      e.printStackTrace();
-    }
-  }
+  public static final String SECURITY_JSON = "security-json";
-  public static class Role {
-    List<GeodePermission> permissions = new ArrayList<>();
-    String name;
-    String serverGroup;
-  }
+  protected static final String DEFAULT_JSON_FILE_NAME = "security.json";
-  public static class User {
-    String name;
-    Set<Role> roles = new HashSet<>();
-    String pwd;
-  }
-
-  private static Map<String, User> acl = null;
-
-
-  public static void setUpWithJsonFile(String jsonFileName) throws IOException {
-    InputStream input = ClassLoader.getSystemResourceAsStream(jsonFileName);
-    if (input == null)
-      return;
-
-    StringWriter writer = new StringWriter();
-    IOUtils.copy(input, writer, "UTF-8");
-    String json = writer.toString();
-    readSecurityDescriptor(json);
-  }
-
-  protected static void readSecurityDescriptor(String json) throws IOException {
-    ObjectMapper mapper = new ObjectMapper();
-    JsonNode jsonNode = mapper.readTree(json);
-    acl = new HashMap<>();
-    Map<String, Role> roleMap = readRoles(jsonNode);
-    readUsers(acl, jsonNode, roleMap);
-  }
-
-  private static void readUsers(Map<String, User> acl, JsonNode node, Map<String, Role> roleMap) {
-    for (JsonNode u : node.get("users")) {
-      User user = new User();
-      user.name = u.get("name").asText();
-
-      if (u.has("password")) {
-        user.pwd = u.get("password").asText();
-      } else {
-        user.pwd = user.name;
-      }
-
-      for (JsonNode r : u.get("roles")) {
-        user.roles.add(roleMap.get(r.asText()));
-      }
-
-      acl.put(user.name, user);
-    }
-  }
-
-  private static Map<String, Role> readRoles(JsonNode jsonNode) {
-    if (jsonNode.get("roles") == null) {
-      return Collections.EMPTY_MAP;
-    }
-
-    Map<String, Role> roleMap = new HashMap<>();
-    for (JsonNode r : jsonNode.get("roles")) {
-      Role role = new Role();
-      role.name = r.get("name").asText();
-      String regionNames = null;
-      String keys = null;
-
-      JsonNode regions = r.get("regions");
-      if (regions != null) {
-        if (regions.isArray()) {
-          regionNames = StreamSupport.stream(regions.spliterator(), false)
-              .map(JsonNode::asText)
-              .collect(Collectors.joining(","));
-        } else {
-          regionNames = regions.asText();
-        }
-      }
-
-      for (JsonNode op : r.get("operationsAllowed")) {
-        String[] parts = op.asText().split(":");
-        String resourcePart = (parts.length > 0) ? parts[0] : null;
-        String operationPart = (parts.length > 1) ? parts[1] : null;
-        if(parts.length>2){
-          regionNames = parts[2];
-        }
-        if(parts.length>3){
-          keys = parts[3];
-        }
-        String regionPart = (regionNames != null) ? regionNames : "*";
-        String keyPart = (keys !=null) ? keys : "*";
-
-        role.permissions.add(new GeodePermission(resourcePart, operationPart, regionPart, keyPart));
-      }
-
-      roleMap.put(role.name, role);
-
-      if (r.has("serverGroup")) {
-        role.serverGroup = r.get("serverGroup").asText();
-      }
-    }
-
-    return roleMap;
-  }
-  public static Map<String, User> getAcl() {
-    return acl;
-  }
+  private Map<String, User> userNameToUser;
-  public boolean authorize(Principal principal, GeodePermission context) {
+  public boolean authorize(final Serializable principal, final ResourcePermission context) {
-    User user = acl.get(principal.getName());
+    User user = this.userNameToUser.get(principal.toString());
-    for (Role role : acl.get(user.name).roles) {
+    for (Role role : this.userNameToUser.get(user.name).roles) {
-  public void init(Properties props) throws NotAuthorizedException {
+  public void init(final Properties securityProperties) throws NotAuthorizedException {
+    String jsonPropertyValue = securityProperties.getProperty(SECURITY_JSON);
+    if (jsonPropertyValue == null) {
+      throw new AuthenticationFailedException("SampleSecurityManager: property [" + SECURITY_JSON + "] must be set.");
+    }
+
+    // 1st try to load value as a json resource
+    boolean initialized = initializeFromJsonResource(jsonPropertyValue);
+
+    // 2nd try to load value as a json file
+    if (!initialized) {
+      initialized = initializeFromJsonFile(new File(jsonPropertyValue));
+    }
+
+    // 3rd try to use value as a json string
+    if (!initialized) {
+      initialized = initializeFromJson(jsonPropertyValue);
+    }
+
+    if (!initialized) {
+      throw new AuthenticationFailedException("SampleSecurityManager: unable to read json from \"" + jsonPropertyValue + "\" as specified by [" + SECURITY_JSON + "].");
+    }
-  public Principal authenticate(Properties props) throws AuthenticationFailedException {
-    String user = props.getProperty(ResourceConstants.USER_NAME);
-    String pwd = props.getProperty(ResourceConstants.PASSWORD);
+  public Serializable authenticate(final Properties credentials) throws AuthenticationFailedException {
+    String user = credentials.getProperty(ResourceConstants.USER_NAME);
+    String password = credentials.getProperty(ResourceConstants.PASSWORD);
-    User userObj = acl.get(user);
+    User userObj = this.userNameToUser.get(user);
-      throw new AuthenticationFailedException("Wrong username/password");
+      throw new AuthenticationFailedException("SampleSecurityManager: wrong username/password");
-    if (user != null && !userObj.pwd.equals(pwd) && !"".equals(user)) {
-      throw new AuthenticationFailedException("Wrong username/password");
+    if (user != null && !userObj.password.equals(password) && !"".equals(user)) {
+      throw new AuthenticationFailedException("SampleSecurityManager: wrong username/password");
-    return new JMXPrincipal(user);
+    return user;
+
+  boolean initializeFromJson(final String json) {//throws IOException {
+    try {
+      ObjectMapper mapper = new ObjectMapper();
+      JsonNode jsonNode = mapper.readTree(json);
+      this.userNameToUser = new HashMap<>();
+      Map<String, Role> roleMap = readRoles(jsonNode);
+      readUsers(this.userNameToUser, jsonNode, roleMap);
+      return true;
+    } catch (IOException ex) {
+      return false;
+    }
+  }
+
+  boolean initializeFromJsonFile(final File jsonFile) {//throws IOException {
+    try {
+      InputStream input = new FileInputStream(jsonFile);
+      if (input != null) {
+        initializeFromJson(readJsonFromInputStream(input));
+        return true;
+      }
+    } catch (IOException ex) {
+    }
+    return false;
+  }
+
+  boolean initializeFromJsonResource(final String jsonResource) {//throws IOException {
+    try {
+      InputStream input = ClassLoader.getSystemResourceAsStream(jsonResource);
+      if (input != null) {
+        initializeFromJson(readJsonFromInputStream(input));
+        return true;
+      }
+    } catch (IOException ex) {
+    }
+    return false;
+  }
+
+  User getUser(final String user) {
+    return this.userNameToUser.get(user);
+  }
+
+  private String readJsonFromInputStream(final InputStream input) throws IOException {
+    StringWriter writer = new StringWriter();
+    IOUtils.copy(input, writer, "UTF-8");
+    return writer.toString();
+  }
+
+  private void readUsers(final Map<String, User> rolesToUsers, final JsonNode node, final Map<String, Role> roleMap) {
+    for (JsonNode usersNode : node.get("users")) {
+      User user = new User();
+      user.name = usersNode.get("name").asText();
+
+      if (usersNode.has("password")) {
+        user.password = usersNode.get("password").asText();
+      } else {
+        user.password = user.name;
+      }
+
+      for (JsonNode rolesNode : usersNode.get("roles")) {
+        user.roles.add(roleMap.get(rolesNode.asText()));
+      }
+
+      rolesToUsers.put(user.name, user);
+    }
+  }
+
+  private Map<String, Role> readRoles(final JsonNode jsonNode) {
+    if (jsonNode.get("roles") == null) {
+      return Collections.EMPTY_MAP;
+    }
+    Map<String, Role> roleMap = new HashMap<>();
+    for (JsonNode rolesNode : jsonNode.get("roles")) {
+      Role role = new Role();
+      role.name = rolesNode.get("name").asText();
+      String regionNames = null;
+      String keys = null;
+
+      JsonNode regionsNode = rolesNode.get("regions");
+      if (regionsNode != null) {
+        if (regionsNode.isArray()) {
+          regionNames = StreamSupport.stream(regionsNode.spliterator(), false)
+                                     .map(JsonNode::asText)
+                                     .collect(Collectors.joining(","));
+        } else {
+          regionNames = regionsNode.asText();
+        }
+      }
+
+      for (JsonNode operationsAllowedNode : rolesNode.get("operationsAllowed")) {
+        String[] parts = operationsAllowedNode.asText().split(":");
+        String resourcePart = (parts.length > 0) ? parts[0] : null;
+        String operationPart = (parts.length > 1) ? parts[1] : null;
+
+        if (parts.length>2){
+          regionNames = parts[2];
+        }
+        if (parts.length>3){
+          keys = parts[3];
+        }
+
+        String regionPart = (regionNames != null) ? regionNames : "*";
+        String keyPart = (keys !=null) ? keys : "*";
+
+        role.permissions.add(new ResourcePermission(resourcePart, operationPart, regionPart, keyPart));
+      }
+
+      roleMap.put(role.name, role);
+
+      if (rolesNode.has("serverGroup")) {
+        role.serverGroup = rolesNode.get("serverGroup").asText();
+      }
+    }
+
+    return roleMap;
+  }
+
+  static class Role {
+    List<ResourcePermission> permissions = new ArrayList<>();
+    String name;
+    String serverGroup;
+  }
+
+  static class User {
+    String name;
+    Set<Role> roles = new HashSet<>();
+    String password;
+  }
+

MOV26 MOV26 INS26 MOV55 MOV55 MOV31 MOV31 MOV31 UPD40 INS40 UPD40 UPD40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 MOV78 INS83 MOV39 INS42 MOV44 MOV43 INS8 UPD43 MOV44 UPD39 UPD42 INS8 INS39 INS42 INS44 INS8 INS39 INS42 INS44 INS8 MOV43 INS42 INS44 INS8 UPD83 MOV43 UPD42 INS83 INS39 INS42 INS44 MOV44 MOV44 MOV8 MOV44 UPD66 INS66 UPD66 UPD66 UPD66 INS65 UPD66 INS66 INS66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS45 INS42 INS42 INS45 UPD42 INS83 UPD43 INS83 UPD43 INS83 UPD42 INS60 INS25 INS60 INS25 INS25 INS25 UPD42 INS83 UPD42 INS83 INS43 INS54 INS83 INS43 INS42 INS54 INS41 INS83 INS43 INS42 INS54 INS41 INS83 MOV43 INS42 INS41 INS83 INS43 INS42 INS41 INS83 MOV74 INS42 INS83 UPD42 INS83 INS83 UPD42 UPD74 MOV43 UPD66 MOV66 UPD42 UPD42 INS43 MOV43 INS59 INS27 INS8 INS39 INS59 INS38 INS8 INS38 INS8 INS38 INS8 MOV43 MOV43 MOV8 MOV8 INS42 INS42 MOV8 MOV12 INS42 INS8 INS12 INS9 MOV42 INS8 INS12 INS9 INS32 INS42 MOV32 MOV44 UPD43 UPD42 INS42 INS42 INS32 INS42 INS33 INS53 INS42 INS32 INS42 INS21 INS42 INS21 INS42 INS53 UPD42 INS41 INS60 INS25 INS44 INS8 INS60 INS25 INS44 INS8 INS22 INS42 INS42 UPD42 UPD42 UPD42 INS22 INS22 INS42 INS42 INS42 INS14 INS42 INS42 INS7 INS7 INS14 UPD42 UPD42 INS22 INS9 UPD42 INS41 MOV43 INS59 INS27 INS8 MOV43 INS42 INS43 INS59 INS27 INS8 INS43 INS42 INS52 INS42 INS44 MOV43 MOV44 INS52 INS42 UPD42 INS52 INS42 INS43 INS27 INS42 INS32 INS42 INS32 INS43 INS27 INS52 INS42 UPD45 UPD45 INS22 INS22 INS9 INS42 INS14 INS42 INS33 INS21 INS41 UPD42 MOV42 INS42 INS32 INS42 INS33 INS21 INS41 INS42 UPD42 MOV43 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 INS45 INS42 INS45 INS42 INS14 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 UPD40 UPD42 INS52 INS42 INS52 INS42 INS43 INS42 INS32 INS9 INS42 INS42 INS42 INS32 INS9 UPD42 INS43 INS42 INS42 INS42 INS32 INS42 INS32 UPD42 UPD40 UPD40 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD43 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL66 DEL83 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL54 DEL8 DEL31 DEL83 DEL33 DEL83 DEL83 DEL42 DEL43 DEL43 DEL43 DEL74 DEL42 DEL44 DEL31 DEL83 DEL83 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL42 DEL83 DEL39 DEL42 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL14 DEL83 DEL83 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL41 DEL25 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL83 DEL42 DEL44 DEL83 DEL83