GEODE-5652: use unlimited ThreadPoolExecutor in ExecutorServiceRule

-import static org.assertj.core.api.Assertions.assertThat;
-
- * <p>
- * By default, the {@code ExecutorService} is single-threaded. You can specify the thread count by
- * using {@link Builder#threadCount(int)} or {@link #ExecutorServiceRule(int)}.
- *
- * <p>
- * Example with default configuration (single-threaded and does not assert that tasks are done):
- *
- * public AsynchronousRule asynchronousRule = new AsynchronousRule();
+ * public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();
- *   Future<Void> result = asynchronousRule.runAsync(() -> {
+ *   Future<Void> result = executorServiceRule.runAsync(() -> {
- * public ExecutorServiceRule asynchronousRule = ExecutorServiceRule.builder().threadCount(10).awaitTermination(10, MILLISECONDS).build();
+ * public ExecutorServiceRule executorServiceRule = ExecutorServiceRule.builder().awaitTermination(10, SECONDS).build();
- *     asynchronousRule.runAsync(() -> {
- *       try {
- *         hangLatch.await();
- *       } catch (InterruptedException e) {
- *         // do nothing
- *       }
+ *     executorServiceRule.runAsync(() -> {
+ *       hangLatch.await();
-  protected final int threadCount;
-    threadCount = builder.threadCount;
-   * Constructs a new single-threaded {@code ExecutorServiceRule} which invokes
-   * {@code ExecutorService.shutdownNow()} during {@code tearDown}.
+   * Constructs a {@code ExecutorServiceRule} which invokes {@code ExecutorService.shutdownNow()}
+   * during {@code tearDown}.
-    threadCount = 1;
-    enableAwaitTermination = false;
-    awaitTerminationTimeout = 0;
-    awaitTerminationTimeUnit = TimeUnit.NANOSECONDS;
-    awaitTerminationBeforeShutdown = false;
-    useShutdown = false;
-    useShutdownNow = true;
-  }
-
-  /**
-   * Constructs a new multi-threaded {@code ExecutorServiceRule} which invokes
-   * {@code ExecutorService.shutdownNow()} during {@code tearDown}.
-   */
-  public ExecutorServiceRule(int threadCount) {
-    this.threadCount = threadCount;
-    if (threadCount > 1) {
-      executor = Executors.newFixedThreadPool(threadCount);
-    } else {
-      executor = Executors.newSingleThreadExecutor();
-    }
+    executor = Executors.newCachedThreadPool();
-    protected int threadCount = 1;
-    protected boolean enableAwaitTermination = false;
-    protected long awaitTerminationTimeout = 0;
+    protected boolean enableAwaitTermination;
+    protected long awaitTerminationTimeout;
-    protected boolean useShutdown = false;
+    protected boolean useShutdown;
-     * Configures the number of threads. Default is one thread.
-     *
-     * @param threadCount the number of threads in the pool
-     */
-    public Builder threadCount(int threadCount) {
-      this.threadCount = threadCount;
-      return this;
-    }
-
-    /**
-      assertThat(threadCount).isGreaterThan(0);

MOV65 MOV65 MOV65 MOV65 MOV65 MOV65 INS8 UPD66 UPD66 UPD66 UPD66 MOV21 UPD66 UPD66 UPD66 UPD42 DEL40 DEL26 DEL66 DEL66 DEL66 DEL65 DEL66 DEL66 DEL42 DEL42 DEL39 DEL69 DEL68 DEL65 DEL66 DEL42 DEL39 DEL69 DEL68 DEL65 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL66 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL40 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL40 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL42 DEL9 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL34 DEL27 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL9 DEL34 DEL9 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL52 DEL41 DEL8 DEL31 DEL42 DEL42 DEL32 DEL42 DEL34 DEL32 DEL21