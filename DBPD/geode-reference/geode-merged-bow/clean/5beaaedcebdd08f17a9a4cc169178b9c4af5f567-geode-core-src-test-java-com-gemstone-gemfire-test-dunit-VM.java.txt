Merge remote-tracking branch 'origin/develop' into feature/GEODE-917

+   * @deprecated Use {@link #invoke(SerializableCallableIF)} instead        
+   * @deprecated Use {@link #invoke(SerializableCallableIF)} instead       
+   * @deprecated Use {@link #invoke(SerializableCallableIF)} instead        
-   *        java.io.Serializable}). 
+   *        java.io.Serializable}).
+   * @deprecated Use {@link #invoke(SerializableCallableIF)} instead 
-   *        java.io.Serializable}). 
+   *        java.io.Serializable}).
+   * @deprecated Use {@link #invoke(SerializableCallableIF)} instead
+   * @deprecated Use {@link #invoke(SerializableCallableIF)} instead        
-
+  
+   * @deprecated Use {@link #invoke(SerializableCallableIF)} instead        
-  /**
-   * Invokes the <code>main</code> method of a given class
-   *
-   * @param targetClass
-   *        The class on which to invoke the <code>main</code> method
-   * @param args
-   *        The "command line" arguments to pass to the
-   *        <code>main</code> method
-   */
-  public void invokeMain(Class targetClass, String[] args) {
-    Object[] stupid = new Object[] { args };
-    invoke(targetClass, "main", stupid);
-  }
-
-  /**
-   * Asynchronously invokes the <code>main</code> method of a given
-   * class
-   *
-   * @param c
-   *        The class on which to invoke the <code>main</code> method
-   * @param args
-   *        The "command line" arguments to pass to the
-   *        <code>main</code> method
-   */
-  public AsyncInvocation invokeMainAsync(Class c, String[] args) {
-    Object[] stupid = new Object[] { args };
-    return invokeAsync(c, "main", stupid);
-  }
-
-  /**
-   * Invokes a static method with a <code>boolean</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>boolean</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public boolean invokeBoolean(Class c, String methodName) {
-    return invokeBoolean(c, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes a static method with a <code>boolean</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>boolean</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public boolean invokeBoolean(Class c, String methodName, Object[] args) {
-    Object result = invoke(c, methodName, args);
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a boolean";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Boolean) {
-      return ((Boolean) result).booleanValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a boolean";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>boolean</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>boolean</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public boolean invokeBoolean(Object o, String methodName) {
-    return invokeBoolean(o, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>boolean</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>boolean</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public boolean invokeBoolean(Object o, String methodName, Object[] args) {
-    Object result = invoke(o, methodName, args);
-    Class c = o.getClass();
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a boolean";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Boolean) {
-      return ((Boolean) result).booleanValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a boolean";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes a static method with a <code>char</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>char</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public char invokeChar(Class c, String methodName) {
-    return invokeChar(c, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes a static method with a <code>char</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>char</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public char invokeChar(Class c, String methodName, Object[] args) {
-    Object result = invoke(c, methodName, args);
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a char";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Character) {
-      return ((Character) result).charValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a char";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>char</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>char</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public char invokeChar(Object o, String methodName) {
-    return invokeChar(o, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>char</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>char</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public char invokeChar(Object o, String methodName, Object[] args) {
-    Object result = invoke(o, methodName, args);
-    Class c = o.getClass();
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a char";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Character) {
-      return ((Character) result).charValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a char";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes a static method with a <code>byte</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>byte</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public byte invokeByte(Class c, String methodName) {
-    return invokeByte(c, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes a static method with a <code>byte</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>byte</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public byte invokeByte(Class c, String methodName, Object[] args) {
-    Object result = invoke(c, methodName, args);
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a byte";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Byte) {
-      return ((Byte) result).byteValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a byte";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>byte</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>byte</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public byte invokeByte(Object o, String methodName) {
-    return invokeByte(o, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>byte</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>byte</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public byte invokeByte(Object o, String methodName, Object[] args) {
-    Object result = invoke(o, methodName, args);
-    Class c = o.getClass();
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a byte";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Byte) {
-      return ((Byte) result).byteValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a byte";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes a static method with a <code>short</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>short</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public short invokeShort(Class c, String methodName) {
-    return invokeShort(c, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes a static method with a <code>short</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>short</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public short invokeShort(Class c, String methodName, Object[] args) {
-    Object result = invoke(c, methodName, args);
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a short";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Short) {
-      return ((Short) result).shortValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a short";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>short</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>short</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public short invokeShort(Object o, String methodName) {
-    return invokeShort(o, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>short</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>short</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public short invokeShort(Object o, String methodName, Object[] args) {
-    Object result = invoke(o, methodName, args);
-    Class c = o.getClass();
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a short";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Short) {
-      return ((Short) result).shortValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a short";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes a static method with a <code>int</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>int</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public int invokeInt(Class c, String methodName) {
-    return invokeInt(c, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes a static method with a <code>int</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>int</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public int invokeInt(Class c, String methodName, Object[] args) {
-    Object result = invoke(c, methodName, args);
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a int";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Integer) {
-      return ((Integer) result).intValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a int";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>int</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>int</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public int invokeInt(Object o, String methodName) {
-    return invokeInt(o, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>int</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>int</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public int invokeInt(Object o, String methodName, Object[] args) {
-    Object result = invoke(o, methodName, args);
-    Class c = o.getClass();
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a int";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Integer) {
-      return ((Integer) result).intValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a int";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes a static method with a <code>long</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>long</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public long invokeLong(Class c, String methodName) {
-    return invokeLong(c, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes a static method with a <code>long</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>long</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public long invokeLong(Class c, String methodName, Object[] args) {
-    Object result = invoke(c, methodName, args);
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a long";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Long) {
-      return ((Long) result).longValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a long";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>long</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>long</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public long invokeLong(Object o, String methodName) {
-    return invokeLong(o, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>long</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>long</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public long invokeLong(Object o, String methodName, Object[] args) {
-    Object result = invoke(o, methodName, args);
-    Class c = o.getClass();
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a long";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Long) {
-      return ((Long) result).longValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a long";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes a static method with a <code>float</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>float</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public float invokeFloat(Class c, String methodName) {
-    return invokeFloat(c, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes a static method with a <code>float</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>float</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public float invokeFloat(Class c, String methodName, Object[] args) {
-    Object result = invoke(c, methodName, args);
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a float";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Float) {
-      return ((Float) result).floatValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a float";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>float</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>float</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public float invokeFloat(Object o, String methodName) {
-    return invokeFloat(o, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>float</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>float</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public float invokeFloat(Object o, String methodName, Object[] args) {
-    Object result = invoke(o, methodName, args);
-    Class c = o.getClass();
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a float";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Float) {
-      return ((Float) result).floatValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a float";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes a static method with a <code>double</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>double</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public double invokeDouble(Class c, String methodName) {
-    return invokeDouble(c, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes a static method with a <code>double</code> return type
-   * in this VM.
-   *
-   * @param c
-   *        The class on which to invoke the method
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>double</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public double invokeDouble(Class c, String methodName, Object[] args) {
-    Object result = invoke(c, methodName, args);
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a double";
-      throw new IllegalArgumentException(s);
-
-    } else if (result instanceof Double) {
-      return ((Double) result).doubleValue();
-
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a double";
-      throw new IllegalArgumentException(s);
-    }
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>double</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>double</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public double invokeDouble(Object o, String methodName) {
-    return invokeDouble(o, methodName, new Object[0]);
-  }
-
-  /**
-   * Invokes an instance method on an object that is serialized into
-   * this VM.  The return type of the method is <code>double</code>.
-   *
-   * @param o
-   *        The receiver of the method invocation
-   * @param methodName
-   *        The name of the method to invoke
-   * @param args
-   *        Arguments passed to the method call (must be {@link
-   *        java.io.Serializable}). 
-   *
-   * @throws IllegalArgumentException
-   *         The method does not return a <code>double</code>
-   * @throws RMIException
-   *         An exception occurred on while invoking the method in
-   *         this VM
-   */
-  public double invokeDouble(Object o, String methodName, Object[] args) {
-    Object result = invoke(o, methodName, args);
-    Class c = o.getClass();
-    if (result == null) {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned null, expected a double";
-      throw new IllegalArgumentException(s);
-    } else if (result instanceof Double) {
-      return ((Double) result).doubleValue();
-    } else {
-      String s = "Method \"" + methodName + "\" in class \"" +
-        c.getName() + "\" returned a \"" + result.getClass().getName()
-        + "\" expected a double";
-      throw new IllegalArgumentException(s);
-    }
-  }

