Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-  
+
-  private static final int REPLY_BUFFER_CAPACITY = Integer.getInteger("replyBufferCapacity", 146988);
-  
+  private static final int REPLY_BUFFER_CAPACITY =
+      Integer.getInteger("replyBufferCapacity", 146988);
+
-  protected ByteBuffer processBinaryCommand(ByteBuffer buffer, RequestReader request, Cache cache, ByteBuffer response) {
+  protected ByteBuffer processBinaryCommand(ByteBuffer buffer, RequestReader request, Cache cache,
+      ByteBuffer response) {
-    
+
-      getLogger().fine("get:key:"+key+" val:"+val);
+      getLogger().fine("get:key:" + key + " val:" + val);
-      int responseLength = HEADER_LENGTH + realValue.length + EXTRAS_LENGTH + (sendKeysInResponse() ? key.getKey().length : 0);
+      int responseLength = HEADER_LENGTH + realValue.length + EXTRAS_LENGTH
+          + (sendKeysInResponse() ? key.getKey().length : 0);
-      response.putInt(TOTAL_BODY_LENGTH_INDEX, EXTRAS_LENGTH + realValue.length + (sendKeysInResponse() ? key.getKey().length : 0));
+      response.putInt(TOTAL_BODY_LENGTH_INDEX,
+          EXTRAS_LENGTH + realValue.length + (sendKeysInResponse() ? key.getKey().length : 0));
-      
+
-    
+
-    for (int i=1; i<firstLineElements.length; i++) {
+    for (int i = 1; i < firstLineElements.length; i++) {
-    
+
-    
+
-        getLogger().fine("get compose reply:"+e);
+        getLogger().fine("get compose reply:" + e);
-        
+
-  
+
-  
+

