GEODE-1994: Overhaul of internal.lang.StringUtils to extend and heavily use commons.lang.StringUtils

*   geode.internal.lang.StringUtils has been deprecated.  In the interim, it has been heavily refactored and extends commons.lang.StringUtils.
*
*   Renamed:
*   --  EMPTY_STRING -> EMPTY (inherited)
*   --  toUpperCase  -> upperCase (inherited)
*   --  toLowerCase  -> lowerCase (inherited)
*   --  padEnding    -> rightPad (inherited)
*
*   Removed:
*   --  EMPTY_STRING_ARRAY; usage replaced with commons.lang.ArrayUtils.EMPTY_STRING_ARRAY
*   --  SPACES
*   --  UTF_8; rare usage replaced with raw string
*   --  concat; usage replaced with commons.lang.join, refactoring as necessary.
*   --  getLettersOnly
*   --  getSpaces
*   --  truncate
*   --  valueOf; usage refactored to use defaultString
*
*   Refactored
*   --  defaultIfBlank: previously relied on varargs and could return null.  Usage refactored to allow inheritance from commons.
*   --  defaultString(s, EMPTY) refactored to use standard signature defaultString(s) for consistency throughout codebase.
*   --  isBlank: usage refactored to resolve discrepancies with commons.lang.isBlank, which is now inherited.
*   --  isEmpty: usage refactored to resolve discrepancies with commons.lang.isEmpty, which is now inherited.
*
*   Code Cleanup:
*   --  Many uses of !isBlank -> isNotBlank
*   --  Changes suggested by Inspections on most touched files.
*   --     Explicit <T> -> <> when type is inferable
*   --     while loops operating on iterators converted to for each loops
*   --     for loops operating on array indices converted to for each loops
*   --  Various string typos corrected.
*   --  isEmpty(s.trim()) -> isBlank(s)
*   --  s.trim().isEmpty() -> isEmpty(s)
*   --  Removed some instances of 'dead' code
*   --  Optimized imports in every touched file
*
*   Qualitative Changes:
*   --  The following functions now throw an error when called with a null string input:
*   --  *  LocatorLauncher.Builder.setMemberName
*   --  *  ServerLauncher.Builder.setMemberName
*   --  *  ServerLauncher.Builder.setHostnameForClients
*   --  (Unit tests added to capture these changes)
*
*   Notes:
*   --  StringUtils.wraps may be inherited from Apache Commons when the dependency is updated.
*   --  AbstractLauncher.getMember has the documented behavior of returning null when both MemberName and ID are blank.  Is this the best behavior for this method?

* this closes #521

+import org.apache.commons.lang.ArrayUtils;
-      @CliOption(key = CliStrings.START_LOCATOR__MEMBER_NAME, mandatory = false,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+      @CliOption(key = CliStrings.START_LOCATOR__MEMBER_NAME,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      if (!StringUtils.isBlank(gemfirePropertiesPathname)
+      if (StringUtils.isNotBlank(gemfirePropertiesPathname)
-            CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
-                StringUtils.EMPTY_STRING, gemfirePropertiesPathname));
+            CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE, StringUtils.EMPTY,
+                gemfirePropertiesPathname));
-      if (!StringUtils.isBlank(gemfireSecurityPropertiesPathname)
+      if (StringUtils.isNotBlank(gemfireSecurityPropertiesPathname)
-      gemfireProperties.setProperty(GROUPS, StringUtils.valueOf(group, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(LOCATORS,
-          StringUtils.valueOf(locators, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(LOG_LEVEL,
-          StringUtils.valueOf(logLevel, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(MCAST_ADDRESS,
-          StringUtils.valueOf(mcastBindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(MCAST_PORT,
-          StringUtils.valueOf(mcastPort, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(GROUPS, StringUtils.defaultString(group));
+      gemfireProperties.setProperty(LOCATORS, StringUtils.defaultString(locators));
+      gemfireProperties.setProperty(LOG_LEVEL, StringUtils.defaultString(logLevel));
+      gemfireProperties.setProperty(MCAST_ADDRESS, StringUtils.defaultString(mcastBindAddress));
+      gemfireProperties.setProperty(MCAST_PORT, StringUtils.defaultString(mcastPort));
-          StringUtils.valueOf(enableSharedConfiguration, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(enableSharedConfiguration));
-          StringUtils.valueOf(loadSharedConfigurationFromDirectory, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(loadSharedConfigurationFromDirectory));
-          StringUtils.valueOf(clusterConfigDir, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(HTTP_SERVICE_PORT,
-          StringUtils.valueOf(httpServicePort, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(clusterConfigDir));
+      gemfireProperties.setProperty(HTTP_SERVICE_PORT, StringUtils.defaultString(httpServicePort));
-          StringUtils.valueOf(httpServiceBindAddress, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(httpServiceBindAddress));
-      LocatorLauncher locatorLauncher =
-          new LocatorLauncher.Builder().setBindAddress(bindAddress).setForce(force)
-              .setHostnameForClients(hostnameForClients).setMemberName(memberName).setPort(port)
-              .setRedirectOutput(redirectOutput).setWorkingDirectory(workingDirectory).build();
+      LocatorLauncher.Builder locatorLauncherBuilder =
+          new LocatorLauncher.Builder().setBindAddress(bindAddress).setForce(force).setPort(port)
+              .setRedirectOutput(redirectOutput).setWorkingDirectory(workingDirectory);
+      if (hostnameForClients != null) {
+        locatorLauncherBuilder.setHostnameForClients(hostnameForClients);
+      }
+      if (memberName != null) {
+        locatorLauncherBuilder.setMemberName(memberName);
+      }
+      LocatorLauncher locatorLauncher = locatorLauncherBuilder.build();
-      // getGfsh().logInfo(StringUtils.concat(locatorCommandLine, " "), null);
-
-    if (!StringUtils.isBlank(launcher.getMemberName())) {
+    if (StringUtils.isNotBlank(launcher.getMemberName())) {
-    if (!StringUtils.isBlank(launcher.getHostnameForClients())) {
+    if (StringUtils.isNotBlank(launcher.getHostnameForClients())) {
-    if (!StringUtils.isBlank(responseFailureMessage)) {
+    if (StringUtils.isNotBlank(responseFailureMessage)) {
-      message.append(jmxManagerAuthEnabled ? " and " : StringUtils.EMPTY_STRING)
+      message.append(jmxManagerAuthEnabled ? " and " : StringUtils.EMPTY)
-        (configurationProperties != null ? configurationProperties : new HashMap<String, String>());
+        (configurationProperties != null ? configurationProperties : new HashMap<>());
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      if (!StringUtils.isBlank(member)) {
+      if (StringUtils.isNotBlank(member)) {
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createUserErrorResult(e.getMessage());
-    } catch (IllegalStateException e) {
+    } catch (IllegalArgumentException | IllegalStateException e) {
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      if (!StringUtils.isBlank(member)) {
+      if (StringUtils.isNotBlank(member)) {
-        return ResultBuilder.createInfoResult(StringUtils.EMPTY_STRING);
+        return ResultBuilder.createInfoResult(StringUtils.EMPTY);
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createUserErrorResult(e.getMessage());
-    } catch (IllegalStateException e) {
+    } catch (IllegalArgumentException | IllegalStateException e) {
-      if (!StringUtils.isBlank(currentLocators)) {
+      if (StringUtils.isNotBlank(currentLocators)) {
-    if (!StringUtils.isBlank(gemfirePropertiesPathname)) {
+    if (StringUtils.isNotBlank(gemfirePropertiesPathname)) {
-    if (!StringUtils.isBlank(gemfireSecurityPropertiesPathname)) {
+    if (StringUtils.isNotBlank(gemfireSecurityPropertiesPathname)) {
-      if (!StringUtils.isBlank(propertyValue)) {
+      if (StringUtils.isNotBlank(propertyValue)) {
-    if (!StringUtils.isBlank(initialHeap)) {
+    if (StringUtils.isNotBlank(initialHeap)) {
-    if (!StringUtils.isBlank(maxHeap)) {
+    if (StringUtils.isNotBlank(maxHeap)) {
-      } catch (IOException ignore) {
-      } catch (NumberFormatException ignore) {
+      } catch (IOException | NumberFormatException ignore) {
-    if (!StringUtils.isBlank(userClasspath)) {
+    if (StringUtils.isNotBlank(userClasspath)) {
-    String classpath = getGemFireJarPath();
+    StringBuilder classpath = new StringBuilder(getGemFireJarPath());
-    userClasspaths = (userClasspaths != null ? userClasspaths : StringUtils.EMPTY_STRING_ARRAY);
+    userClasspaths = (userClasspaths != null ? userClasspaths : ArrayUtils.EMPTY_STRING_ARRAY);
-      if (!StringUtils.isBlank(userClasspath)) {
-        classpath += (classpath.isEmpty() ? StringUtils.EMPTY_STRING : File.pathSeparator);
-        classpath += userClasspath;
+      if (StringUtils.isNotBlank(userClasspath)) {
+        classpath.append((classpath.length() == 0) ? StringUtils.EMPTY : File.pathSeparator);
+        classpath.append(userClasspath);
-      classpath += File.pathSeparator;
-      classpath += getSystemClasspath();
+      classpath.append(File.pathSeparator);
+      classpath.append(getSystemClasspath());
-        (jarFilePathnames != null ? jarFilePathnames : StringUtils.EMPTY_STRING_ARRAY);
+        (jarFilePathnames != null ? jarFilePathnames : ArrayUtils.EMPTY_STRING_ARRAY);
-      if (!StringUtils.isBlank(jarFilePathname)) {
-        classpath += (classpath.isEmpty() ? StringUtils.EMPTY_STRING : File.pathSeparator);
-        classpath += jarFilePathname;
+      if (StringUtils.isNotBlank(jarFilePathname)) {
+        classpath.append((classpath.length() == 0) ? StringUtils.EMPTY : File.pathSeparator);
+        classpath.append(jarFilePathname);
-    return classpath;
+    return classpath.toString();
-        StringUtils.valueOf(port, String.valueOf(DistributionLocator.DEFAULT_LOCATOR_PORT));
+        StringUtils.defaultString(port, String.valueOf(DistributionLocator.DEFAULT_LOCATOR_PORT));
-      objectNamePattern += (StringUtils.isBlank(serviceName) ? StringUtils.EMPTY_STRING
+      objectNamePattern += (StringUtils.isBlank(serviceName) ? StringUtils.EMPTY
-    String serverPort = StringUtils.valueOf(port, String.valueOf(CacheServer.DEFAULT_PORT));
+    String serverPort = StringUtils.defaultString(port, String.valueOf(CacheServer.DEFAULT_PORT));
-      @CliOption(key = CliStrings.START_SERVER__NAME, mandatory = false,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
+      @CliOption(key = CliStrings.START_SERVER__NAME,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      @CliOption(key = CliStrings.START_SERVER__LOCK_MEMORY,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          specifiedDefaultValue = "true",
+      @CliOption(key = CliStrings.START_SERVER__LOCK_MEMORY, specifiedDefaultValue = "true",
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      if (!StringUtils.isBlank(userName)) {
+      if (StringUtils.isNotBlank(userName)) {
-      if (!StringUtils.isBlank(cacheXmlPathname) && !IOUtils.isExistingPathname(cacheXmlPathname)) {
+      if (StringUtils.isNotBlank(cacheXmlPathname)
+          && !IOUtils.isExistingPathname(cacheXmlPathname)) {
-      if (!StringUtils.isBlank(gemfirePropertiesPathname)
+      if (StringUtils.isNotBlank(gemfirePropertiesPathname)
-            CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE,
-                StringUtils.EMPTY_STRING, gemfirePropertiesPathname));
+            CliStrings.format(CliStrings.GEODE_0_PROPERTIES_1_NOT_FOUND_MESSAGE, StringUtils.EMPTY,
+                gemfirePropertiesPathname));
-      if (!StringUtils.isBlank(gemfireSecurityPropertiesPathname)
+      if (StringUtils.isNotBlank(gemfireSecurityPropertiesPathname)
-      gemfireProperties.setProperty(BIND_ADDRESS,
-          StringUtils.valueOf(bindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(CACHE_XML_FILE,
-          StringUtils.valueOf(cacheXmlPathname, StringUtils.EMPTY_STRING));
+      gemfireProperties.setProperty(BIND_ADDRESS, StringUtils.defaultString(bindAddress));
+      gemfireProperties.setProperty(CACHE_XML_FILE, StringUtils.defaultString(cacheXmlPathname));
-          StringUtils.valueOf(enableTimeStatistics, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(GROUPS, StringUtils.valueOf(group, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(LOCATORS,
-          StringUtils.valueOf(locators, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(LOCATOR_WAIT_TIME,
-          StringUtils.valueOf(locatorWaitTime, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(LOG_LEVEL,
-          StringUtils.valueOf(logLevel, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(MCAST_ADDRESS,
-          StringUtils.valueOf(mcastBindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(MCAST_PORT,
-          StringUtils.valueOf(mcastPort, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(MEMCACHED_PORT,
-          StringUtils.valueOf(memcachedPort, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(enableTimeStatistics));
+      gemfireProperties.setProperty(GROUPS, StringUtils.defaultString(group));
+      gemfireProperties.setProperty(LOCATORS, StringUtils.defaultString(locators));
+      gemfireProperties.setProperty(LOCATOR_WAIT_TIME, StringUtils.defaultString(locatorWaitTime));
+      gemfireProperties.setProperty(LOG_LEVEL, StringUtils.defaultString(logLevel));
+      gemfireProperties.setProperty(MCAST_ADDRESS, StringUtils.defaultString(mcastBindAddress));
+      gemfireProperties.setProperty(MCAST_PORT, StringUtils.defaultString(mcastPort));
+      gemfireProperties.setProperty(MEMCACHED_PORT, StringUtils.defaultString(memcachedPort));
-          StringUtils.valueOf(memcachedProtocol, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(memcachedProtocol));
-          StringUtils.valueOf(memcachedBindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(REDIS_PORT,
-          StringUtils.valueOf(redisPort, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(memcachedBindAddress));
+      gemfireProperties.setProperty(REDIS_PORT, StringUtils.defaultString(redisPort));
-          StringUtils.valueOf(redisBindAddress, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(REDIS_PASSWORD,
-          StringUtils.valueOf(redisPassword, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(redisBindAddress));
+      gemfireProperties.setProperty(REDIS_PASSWORD, StringUtils.defaultString(redisPassword));
-          StringUtils.valueOf(statisticsArchivePathname, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(statisticsArchivePathname));
-          StringUtils.valueOf(requestSharedConfiguration, Boolean.TRUE.toString()));
-      gemfireProperties.setProperty(LOCK_MEMORY,
-          StringUtils.valueOf(lockMemory, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(requestSharedConfiguration, Boolean.TRUE.toString()));
+      gemfireProperties.setProperty(LOCK_MEMORY, StringUtils.defaultString(lockMemory));
-          StringUtils.valueOf(offHeapMemorySize, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(START_DEV_REST_API,
-          StringUtils.valueOf(startRestApi, StringUtils.EMPTY_STRING));
-      gemfireProperties.setProperty(HTTP_SERVICE_PORT,
-          StringUtils.valueOf(httpServicePort, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(offHeapMemorySize));
+      gemfireProperties.setProperty(START_DEV_REST_API, StringUtils.defaultString(startRestApi));
+      gemfireProperties.setProperty(HTTP_SERVICE_PORT, StringUtils.defaultString(httpServicePort));
-          StringUtils.valueOf(httpServiceBindAddress, StringUtils.EMPTY_STRING));
+          StringUtils.defaultString(httpServiceBindAddress));
-      if (!StringUtils.isBlank(userName)) {
+      if (StringUtils.isNotBlank(userName)) {
-      ServerLauncher serverLauncher = new ServerLauncher.Builder().setAssignBuckets(assignBuckets)
-          .setDisableDefaultServer(disableDefaultServer).setForce(force).setMemberName(memberName)
-          .setRebalance(rebalance).setRedirectOutput(redirectOutput)
+      ServerLauncher.Builder serverLauncherBuilder = new ServerLauncher.Builder()
+          .setAssignBuckets(assignBuckets).setDisableDefaultServer(disableDefaultServer)
+          .setForce(force).setRebalance(rebalance).setRedirectOutput(redirectOutput)
-          .setMessageTimeToLive(messageTimeToLive).setSocketBufferSize(socketBufferSize)
-          .setHostNameForClients(hostNameForClients).build();
+          .setMessageTimeToLive(messageTimeToLive).setSocketBufferSize(socketBufferSize);
+      if (hostNameForClients != null) {
+        serverLauncherBuilder.setHostNameForClients(hostNameForClients);
+      }
+      if (memberName != null) {
+        serverLauncherBuilder.setMemberName(memberName);
+      }
+      ServerLauncher serverLauncher = serverLauncherBuilder.build();
-        getGfsh().logInfo(StringUtils.concat(serverCommandLine, " "), null);
+        getGfsh().logInfo(StringUtils.join(serverCommandLine, StringUtils.SPACE), null);
-    if (!StringUtils.isBlank(launcher.getMemberName())) {
+    if (StringUtils.isNotBlank(launcher.getMemberName())) {
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      if (!StringUtils.isBlank(member)) {
+      if (StringUtils.isNotBlank(member)) {
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createUserErrorResult(e.getMessage());
-    } catch (IllegalStateException e) {
+    } catch (IllegalArgumentException | IllegalStateException e) {
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      if (!StringUtils.isBlank(member)) {
+      if (StringUtils.isNotBlank(member)) {
-        return ResultBuilder.createInfoResult(StringUtils.EMPTY_STRING);
+        return ResultBuilder.createInfoResult(StringUtils.EMPTY);
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createUserErrorResult(e.getMessage());
-    } catch (IllegalStateException e) {
+    } catch (IllegalArgumentException | IllegalStateException e) {
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-          unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-        if (!StringUtils.isBlank(jconsoleProcessOutput)) {
+        if (StringUtils.isNotBlank(jconsoleProcessOutput)) {
-    } catch (GemFireException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (IllegalStateException e) {
+    } catch (GemFireException | IllegalStateException | IllegalArgumentException e) {
-      if (!StringUtils.isBlank(pluginpath)) {
+      if (StringUtils.isNotBlank(pluginpath)) {
-      if (!StringUtils.isBlank(jmxServiceUrl)) {
+      if (StringUtils.isNotBlank(jmxServiceUrl)) {
-    return SystemUtils.isWindows() ? ".exe" : StringUtils.EMPTY_STRING;
+    return SystemUtils.isWindows() ? ".exe" : StringUtils.EMPTY;
-    if (!StringUtils.isBlank(member)) {
+    if (StringUtils.isNotBlank(member)) {
-
-        return StringUtils.concat("service:jmx:rmi://", connectionEndpoint.getHost(), ":",
-            connectionEndpoint.getPort(), "/jndi/rmi://", connectionEndpoint.getHost(), ":",
-            connectionEndpoint.getPort(), "/jmxrmi");
+        String hostAndPort = connectionEndpoint.getHost() + ":" + connectionEndpoint.getPort();
+        return String.format("service:jmx:rmi://%s/jndi/rmi://%s/jmxrmi", hostAndPort, hostAndPort);
-      unspecifiedDefaultValue = CliMetaData.ANNOTATION_NULL_VALUE,
-      if (!StringUtils.isBlank(jvisualvmProcessOutput)) {
+      if (StringUtils.isNotBlank(jvisualvmProcessOutput)) {
-    } catch (GemFireException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (IllegalStateException e) {
+    } catch (GemFireException | IllegalStateException | IllegalArgumentException e) {
-      if (!StringUtils.isBlank(url)) {
+      if (StringUtils.isNotBlank(url)) {
-          if (!StringUtils.isBlank(pulseURL)) {
+          if (StringUtils.isNotBlank(pulseURL)) {
-            return (!StringUtils.isBlank(pulseMessage)
+            return (StringUtils.isNotBlank(pulseMessage)
-    } catch (GemFireException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-      assertState(!StringUtils.isBlank(geodeHome), CliStrings.GEODE_HOME_NOT_FOUND_ERROR_MESSAGE);
+      assertState(StringUtils.isNotBlank(geodeHome), CliStrings.GEODE_HOME_NOT_FOUND_ERROR_MESSAGE);
-      if (!StringUtils.isBlank(vsdProcessOutput)) {
+      if (StringUtils.isNotBlank(vsdProcessOutput)) {
-    } catch (GemFireException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (FileNotFoundException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createShellClientErrorResult(e.getMessage());
-    } catch (IllegalStateException e) {
+    } catch (GemFireException | IllegalStateException | IllegalArgumentException
+        | FileNotFoundException e) {
-      assertState(!StringUtils.isBlank(geodeHome), CliStrings.GEODE_HOME_NOT_FOUND_ERROR_MESSAGE);
+      assertState(StringUtils.isNotBlank(geodeHome), CliStrings.GEODE_HOME_NOT_FOUND_ERROR_MESSAGE);
-        if (!StringUtils.isBlank(dataBrowserProcessOutput)) {
+        if (StringUtils.isNotBlank(dataBrowserProcessOutput)) {
-    } catch (IllegalArgumentException e) {
-      return ResultBuilder.createUserErrorResult(e.getMessage());
-    } catch (IllegalStateException e) {
+    } catch (IllegalArgumentException | IllegalStateException e) {

INS26 INS40 MOV32 MOV32 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS32 MOV32 MOV12 INS32 INS25 INS25 INS60 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 INS14 INS42 INS42 INS25 INS25 INS60 UPD42 UPD40 MOV42 UPD42 MOV42 MOV42 INS43 INS27 INS8 INS27 INS8 MOV43 INS59 INS32 INS84 INS32 INS84 INS32 INS32 INS43 MOV32 INS32 INS32 INS32 INS32 UPD42 UPD42 INS32 INS32 INS43 INS27 INS8 INS27 INS8 MOV43 INS59 INS32 INS84 MOV41 INS32 INS84 INS84 INS32 INS32 INS32 INS84 INS32 INS32 INS84 INS84 INS32 INS32 INS40 UPD42 MOV32 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS32 MOV42 UPD42 MOV42 MOV42 MOV43 INS43 MOV42 UPD42 MOV42 MOV42 MOV43 INS43 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS42 UPD40 MOV42 UPD42 MOV42 MOV42 INS42 INS42 INS40 INS42 INS42 MOV32 UPD40 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS32 INS32 INS32 MOV42 UPD42 MOV42 MOV42 INS40 UPD42 MOV32 INS42 INS33 INS21 INS42 INS33 INS21 INS42 INS32 MOV42 UPD42 MOV42 MOV42 MOV43 INS43 MOV42 UPD42 MOV42 MOV42 MOV43 INS43 MOV43 MOV43 MOV43 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS60 MOV42 UPD42 MOV42 MOV42 MOV43 MOV43 MOV43 MOV42 UPD42 MOV42 MOV42 INS32 MOV42 UPD42 MOV42 MOV42 MOV43 MOV43 MOV43 MOV43 INS32 MOV43 INS43 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS32 INS42 INS42 UPD74 INS42 INS42 INS84 INS32 INS32 INS32 INS32 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS32 INS42 INS42 MOV42 MOV42 MOV32 INS42 INS32 MOV43 INS59 INS42 MOV42 UPD42 MOV42 MOV42 MOV42 UPD42 MOV42 MOV42 INS32 UPD42 MOV42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 UPD40 UPD40 MOV43 MOV43 INS42 INS42 INS16 INS42 INS42 INS42 INS42 INS42 INS16 INS42 INS42 INS42 UPD40 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD40 MOV42 UPD42 MOV42 MOV42 INS42 INS27 UPD42 UPD42 UPD45 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV42 UPD40 UPD42 UPD42 INS36 UPD40 MOV40 MOV40 INS36 UPD40 MOV40 MOV40 UPD40 UPD42 UPD42 UPD42 INS40 MOV32 INS45 MOV32 INS32 INS27 INS27 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 INS32 INS34 INS32 INS34 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL9 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL32 DEL38 DEL32 DEL38 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL38 DEL32 DEL38 DEL42 DEL43 DEL42 DEL43 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL32 DEL38 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL32 DEL38 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL32 DEL38 DEL32 DEL38 DEL32 DEL38 DEL32 DEL38 DEL32 DEL38 DEL32 DEL38 DEL42 DEL44 DEL8 DEL12 DEL32 DEL38 DEL32 DEL38 DEL42 DEL32 DEL16 DEL36 DEL7 DEL42 DEL42 DEL7 DEL42 DEL40 DEL7 DEL42 DEL7 DEL32 DEL38 DEL42 DEL32 DEL16 DEL36 DEL7 DEL42 DEL42 DEL7 DEL42 DEL42 DEL9 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL32 DEL38 DEL32 DEL38 DEL32 DEL38 DEL32 DEL38 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL40 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL45 DEL38 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL32 DEL38 DEL43 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL32 DEL38 DEL42 DEL44 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL42 DEL40 DEL80 DEL32 DEL38 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL32 DEL38 DEL32 DEL38 DEL32 DEL38 DEL45 DEL45 DEL42 DEL32 DEL45 DEL42 DEL32 DEL45 DEL42 DEL40 DEL80 DEL32 DEL38 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL32 DEL38 DEL32 DEL38 DEL32 DEL38 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL32 DEL38 DEL32 DEL38 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12 DEL32 DEL38 DEL32 DEL38 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL12