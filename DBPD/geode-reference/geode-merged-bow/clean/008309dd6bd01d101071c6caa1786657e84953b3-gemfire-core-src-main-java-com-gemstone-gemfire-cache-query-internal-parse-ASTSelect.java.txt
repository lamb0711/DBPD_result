Merge branch 'release/1.0.0-incubating.M1'

-/*=========================================================================
- * Copyright (c) 2005-2014 Pivotal Software, Inc. All Rights Reserved.
- * This product is protected by U.S. and international copyright
- * and intellectual property laws. Pivotal products are covered by
- * more patents listed at http://www.pivotal.io/patents.
- *========================================================================
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+import java.util.HashMap;
+import java.util.Map;
+
+
+import com.gemstone.gemfire.cache.query.internal.CompiledValue;
-  	AST child = getFirstChild();
-        int clauseType = child.getType();
-  	if(clauseType == OQLLexerTokenTypes.LITERAL_hint) {
-          ((GemFireAST)child).compile(compiler);  
-          child = child.getNextSibling();
-        }else {
-          //hint is null
-          compiler.pushNull();
-        }
-  	
-    // check for DISTINCT or ALL token
-    // if DISTINCT, push "DISTINCT" onto stack, otherwise push null
-    // if found, then advance to next sibling, otherwise this child
-    // must be projection
-    if (child.getType() == OQLLexerTokenTypes.LITERAL_distinct) {
-      compiler.push("DISTINCT"); // anything non-null works here for distinct
+    AST child = getFirstChild();
+    Map<Integer, Object> queryComponents = new HashMap<Integer, Object>();
+    // The query components are :
+    // 1) Distinct | All
+    // 2) Hint
+    // 3) count
+    // 4) Projection Attrib
+    // 5) From Clause
+    // 6) where clause
+    // 7) group by clause
+    // 8) order by clause
+    // 9) limit
+    while (child != null) {
+      int clauseType = child.getType();
+      ((GemFireAST) child).compile(compiler);
+      Object compiledObject = compiler.pop();
+      queryComponents.put(clauseType, compiledObject);
-    else if (child.getType() == OQLLexerTokenTypes.LITERAL_all) {
-      compiler.pushNull();
-      child = child.getNextSibling();
-    } 
-    else {
-      compiler.pushNull(); // let child be next in line
-    }
-    
-    //Count(*) expression
-    if (child.getType() == OQLLexerTokenTypes.LITERAL_count) {
-      ((ASTCount)child).compile(compiler);
-      compiler.pushNull(); //For No projectionAttributes
-    } else {
-      compiler.pushNull();
-      // projectionAttributes
-      if (child.getType() == OQLLexerTokenTypes.TOK_STAR) {
-        compiler.pushNull();
-      }
-      else {
-        // child is ASTCombination; compile it
-        ((ASTCombination)child).compile(compiler);
-      }
-    }
-    // fromClause
-    child = child.getNextSibling(); 
-    ((GemFireAST)child).compile(compiler);
-   
-      
-	/*If WHERE clause ,order by clause as well as Limit clause is missing, then push 3 null as a placeholder */ 
-    if (child.getNextSibling() == null) {
-      compiler.pushNull();
-      compiler.pushNull();
-      //Asif: This placeholder is for limit 
-      compiler.pushNull();
-    }
-    else { 
-       child = child.getNextSibling();      
-       clauseType = child.getType();
-       if( clauseType != OQLLexerTokenTypes.LITERAL_order && clauseType != OQLLexerTokenTypes.LIMIT ) {
-         //  where is present , order by & limit may present |  may !present
-         ((GemFireAST)child).compile(compiler);
-         child = child.getNextSibling();
-         if(child != null) {
-           clauseType = child.getType();
-         }
-         
-       }else {
-         //Where clause is null
-         compiler.pushNull();         
-       }
-       if(clauseType == OQLLexerTokenTypes.LITERAL_order) {
-         ((GemFireAST)child).compile(compiler);
-         child = child.getNextSibling();
-         if(child != null) {
-           clauseType = child.getType();
-         } 
-       }else {
-         //Order by clause is null
-         compiler.pushNull();
-       }
-       
-       if(clauseType == OQLLexerTokenTypes.LIMIT) {
-         ((GemFireAST)child).compile(compiler);  
-         child = child.getNextSibling();
-         if(child != null) {
-           clauseType = child.getType();
-         } 
-       }else {
-         //Limit clause is null
-         compiler.pushNull();
-       }
-    }    
-    compiler.select();
+    compiler.select(queryComponents);

INS26 INS26 INS26 INS40 INS40 INS40 INS60 INS61 INS74 INS59 MOV27 INS8 INS43 INS43 INS43 INS42 INS14 MOV60 MOV21 INS60 MOV21 MOV21 INS42 INS42 INS42 UPD42 MOV42 INS74 INS43 INS59 INS43 INS43 INS43 UPD42 MOV42 INS42 INS32 INS42 INS42 UPD42 UPD42 UPD42 MOV42 INS42 UPD42 MOV42 MOV42 UPD42 MOV42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL25 DEL42 DEL42 DEL32 DEL40 DEL27 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL40 DEL27 DEL42 DEL42 DEL32 DEL21 DEL8 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL40 DEL27 DEL42 DEL40 DEL27 DEL27 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL40 DEL27 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25