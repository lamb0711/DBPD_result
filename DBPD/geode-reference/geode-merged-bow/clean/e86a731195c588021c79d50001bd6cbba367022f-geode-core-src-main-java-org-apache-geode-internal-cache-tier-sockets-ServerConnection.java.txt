Merge branch 'release/1.3.0'

-import org.apache.geode.cache.Cache;
+import org.apache.geode.internal.cache.tier.CommunicationMode;
-import org.apache.geode.internal.security.IntegratedSecurityService;
-public class ServerConnection implements Runnable {
+public abstract class ServerConnection implements Runnable {
-  private static final Logger logger = LogService.getLogger();
+  protected static final Logger logger = LogService.getLogger();
-  private SecurityService securityService = IntegratedSecurityService.getSecurityService();
+  private final SecurityService securityService;
-  private Socket theSocket;
+  protected Socket theSocket;
-  private final CachedRegionHelper crHelper;
-  private String name = null;
+  protected final CachedRegionHelper crHelper;
+  protected String name = null;
-  final private AcceptorImpl acceptor;
+  final AcceptorImpl acceptor;
-  private ClientHandShake handshake;
+  protected ClientHandShake handshake;
-  private final byte communicationMode;
+  protected final CommunicationMode communicationMode;
-  private Principal principal;
+  protected Principal principal;
-  public ServerConnection(Socket s, Cache c, CachedRegionHelper helper, CacheServerStats stats,
-      int hsTimeout, int socketBufferSize, String communicationModeStr, byte communicationMode,
-      Acceptor acceptor) {
-    StringBuffer buffer = new StringBuffer(100);
+  public ServerConnection(Socket socket, InternalCache internalCache, CachedRegionHelper helper,
+      CacheServerStats stats, int hsTimeout, int socketBufferSize, String communicationModeStr,
+      byte communicationMode, Acceptor acceptor, SecurityService securityService) {
+
+    StringBuilder buffer = new StringBuilder(100);
-        .append(s.getInetAddress().getHostAddress()).append("; ").append(communicationModeStr)
-        .append(" port=").append(s.getPort()).append("]");
+        .append(socket.getInetAddress().getHostAddress()).append("; ").append(communicationModeStr)
+        .append(" port=").append(socket.getPort()).append("]");
-    this.logWriter = (InternalLogWriter) c.getLoggerI18n();
-    this.securityLogWriter = (InternalLogWriter) c.getSecurityLoggerI18n();
+    this.logWriter = (InternalLogWriter) internalCache.getLoggerI18n();
+    this.securityLogWriter = (InternalLogWriter) internalCache.getSecurityLoggerI18n();
-    this.communicationMode = communicationMode;
+    this.communicationMode = CommunicationMode.fromModeNumber(communicationMode);
+    this.securityService = securityService;
+
-      // requestMsg.setUseDataStream(useDataStream);
-      // replyMsg.setUseDataStream(useDataStream);
-      // responseMsg.setUseDataStream(useDataStream);
-      // errorMsg.setUseDataStream(useDataStream);
-      initStreams(s, socketBufferSize, stats);
+      initStreams(socket, socketBufferSize, stats);
-            getName(), s.getInetAddress().getCanonicalHostName(),
-            s.getInetAddress().getHostAddress(), s.getPort());
+            getName(), communicationModeStr, socket.getInetAddress().getCanonicalHostName(),
+            socket.getInetAddress().getHostAddress(), socket.getPort());
-        boolean readHandShake = ServerHandShakeProcessor.readHandShake(this);
+        boolean readHandShake = ServerHandShakeProcessor.readHandShake(this, getSecurityService());
+  private SecurityService getSecurityService() {
+    return this.securityService;
+  }
+
-  private boolean acceptHandShake(byte epType, int qSize) {
-    try {
-      this.handshake.accept(theSocket.getOutputStream(), theSocket.getInputStream(), epType, qSize,
-          this.communicationMode, this.principal);
-    } catch (IOException ioe) {
-      if (!crHelper.isShutdown() && !isTerminated()) {
-        logger.warn(LocalizedMessage.create(
-            LocalizedStrings.ServerConnection_0_HANDSHAKE_ACCEPT_FAILED_ON_SOCKET_1_2,
-            new Object[] {this.name, this.theSocket, ioe}));
-      }
-      cleanup();
-      return false;
-    }
+  protected boolean acceptHandShake(byte epType, int qSize) {
+    return doHandShake(epType, qSize) && handshakeAccepted();
+  }
+
+  protected abstract boolean doHandShake(byte epType, int qSize);
+
+
+  protected boolean handshakeAccepted() {
-    if (this.communicationMode == Acceptor.CLIENT_TO_SERVER_FOR_QUEUE) {
+    if (this.communicationMode == CommunicationMode.ClientToServerForQueue) {
+  /**
+   * @return whether this is a connection to a client, regardless of protocol.
+   */
+  public boolean isClientServerConnection() {
+    return communicationMode.isClientToServerOrSubscriptionFeed();
+  }
+
-  // public void setUserAuthAttributes(ClientProxyMembershipID proxyId, AuthorizeRequest
-  // authzRequest, AuthorizeRequestPP postAuthzRequest) {
-  // UserAuthAttributes uaa = new UserAuthAttributes(authzRequest, postAuthzRequest);
-  // }
-
-  /**
-   * Set to false once handshake has been done
-   */
-  private boolean doHandshake = true;
-
-  private boolean processMessages = true;
+  protected boolean processMessages = true;
-  private void doHandshake() {
+  protected void doHandshake() {
-      if (getCommunicationMode() != Acceptor.GATEWAY_TO_GATEWAY)
+      if (!getCommunicationMode().isWAN())
-  private void doNormalMsg() {
+  protected void doNormalMsg() {
-            && this.communicationMode != Acceptor.GATEWAY_TO_GATEWAY) {
+            && !this.communicationMode.isWAN()) {
-        command.execute(msg, this);
+        command.execute(msg, this, this.securityService);
-        if (this.communicationMode == Acceptor.CLIENT_TO_SERVER_FOR_QUEUE) {
+        if (this.communicationMode == CommunicationMode.ClientToServerForQueue) {
-  private void doOneMessage() {
-    if (this.doHandshake) {
-      doHandshake();
-      this.doHandshake = false;
-    } else {
-      this.resetTransientData();
-      doNormalMsg();
-    }
-  }
+  protected abstract void doOneMessage();
-          (InternalLogWriter) system.getSecurityLogWriter(), this.proxyId.getDistributedMember());
+          (InternalLogWriter) system.getSecurityLogWriter(), this.proxyId.getDistributedMember(),
+          this.securityService);
-   * 
+   *
-        && (this.communicationMode != Acceptor.GATEWAY_TO_GATEWAY)
-        && (!this.requestMsg.getAndResetIsMetaRegion())
+        && !this.communicationMode.isWAN() && !this.requestMsg.getAndResetIsMetaRegion()
-          Message.setTLCommBuffer(getAcceptor().takeCommBuffer());
+          getAcceptor().setTLCommBuffer();
-        getAcceptor().releaseCommBuffer(Message.setTLCommBuffer(null));
+        getAcceptor().releaseTLCommBuffer();
-  protected byte getCommunicationMode() {
+  protected CommunicationMode getCommunicationMode() {
-  int getClientReadTimeout() {
+  protected int getClientReadTimeout() {
-    if (this.communicationMode == Acceptor.CLIENT_TO_SERVER || isGatewayConnection()
-        || this.communicationMode == Acceptor.MONITOR_TO_SERVER
-    /* || this.communicationMode == Acceptor.CLIENT_TO_SERVER_FOR_QUEUE */) {
+    if (this.communicationMode.isWAN()
+        || this.communicationMode.isCountedAsClientServerConnection()) {
-   * 
+   *
-    if (this.handshake.getVersion().isPre65() || isGatewayConnection()) {
+    if (this.handshake.getVersion().isPre65() || communicationMode.isWAN()) {
-  private boolean isGatewayConnection() {
-    return getCommunicationMode() == Acceptor.GATEWAY_TO_GATEWAY;
-  }
-

MOV26 MOV31 MOV31 UPD40 INS83 INS31 INS31 INS31 UPD83 INS83 INS43 INS59 UPD83 UPD83 UPD83 UPD83 UPD83 INS43 UPD83 INS44 INS83 MOV43 INS42 INS8 UPD83 UPD39 UPD42 MOV44 MOV44 INS83 INS83 INS39 INS42 INS44 INS44 UPD83 UPD42 INS29 UPD83 UPD42 UPD83 UPD83 UPD83 INS83 INS83 INS39 INS42 INS43 INS83 INS42 INS42 INS42 UPD42 UPD43 UPD42 INS43 INS42 INS21 INS41 INS41 INS39 INS42 INS39 INS42 INS65 INS42 UPD42 INS42 UPD43 INS7 INS22 INS27 INS66 INS32 UPD42 INS32 INS22 INS42 INS52 INS42 INS32 INS32 UPD40 UPD42 MOV42 INS42 INS32 MOV32 UPD43 INS42 INS42 INS42 INS52 INS42 INS42 UPD42 MOV42 INS42 UPD42 MOV42 INS38 MOV38 MOV22 INS42 MOV22 UPD42 INS42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 INS38 MOV32 INS42 INS22 INS32 INS42 INS38 INS22 UPD40 INS52 INS42 MOV22 INS42 UPD42 UPD42 INS32 INS32 INS52 INS42 MOV32 UPD42 UPD42 INS42 MOV22 INS42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL59 DEL83 DEL39 DEL42 DEL52 DEL42 DEL22 DEL32 DEL21 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL52 DEL32 DEL21 DEL42 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL38 DEL42 DEL32 DEL38 DEL27 DEL42 DEL42 DEL42 DEL42 DEL40 DEL42 DEL43 DEL85 DEL5 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL4 DEL3 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL32 DEL21 DEL9 DEL41 DEL8 DEL12 DEL54 DEL32 DEL40 DEL27 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL40 DEL27 DEL40 DEL27 DEL40 DEL27 DEL36 DEL36 DEL42 DEL42 DEL32 DEL42 DEL42 DEL33 DEL32 DEL39 DEL40 DEL27 DEL27 DEL40 DEL27