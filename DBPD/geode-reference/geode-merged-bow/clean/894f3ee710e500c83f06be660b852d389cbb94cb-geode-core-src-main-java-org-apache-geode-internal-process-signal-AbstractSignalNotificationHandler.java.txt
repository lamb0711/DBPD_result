GEODE-3413: overhaul launcher and process classes and tests

This is primarily an overall of all ServerLauncher and LocatorLauncher
tests and org.apache.geode.internal.process tests. The main classes in
org.apachage.geode.internal.process package are also cleaned up.

In addition, several bugs involving these classes and tests are fixed.

Here is the complete list of tickets that are resolved in this overhaul:

* GEODE-1229: LocatorLauncherRemoteJUnitTest.testStartOverwritesStalePidFile
* GEODE-2791: LocatorLauncherAssemblyIntegrationTest.testLocatorStopsWhenJmxPortIsNonZero fails intermittently with AssertionError
* GEODE-1308: CI failure: LocatorLauncherTest.testSetBindAddressToNonLocalHost
* GEODE-1309: CI failure: ServerLauncherTest.testSetServerBindAddressToNonLocalHost
* GEODE-3193: locator pid file is removed even if there was a problem while shutting down
* GEODE-3413: Overhaul launcher tests and process tests
* GEODE-3414: Cleanup org.apache.geode.internal.process package

Note I moved all useful tests from LocatorLauncherAssemblyIntegrationTest
into the other launcher tests in geode-core.

-
+import static org.apache.commons.lang.StringUtils.EMPTY;
+
- * </p>
- * 
- * @see org.apache.geode.internal.process.signal.Signal
- * @see org.apache.geode.internal.process.signal.SignalEvent
- * @see org.apache.geode.internal.process.signal.SignalListener
+ *
-@SuppressWarnings("unused")
-  // NOTE use the enumerated type instead...
+  /**
+   * @deprecated use the enumerated type instead...
+   */
-    final String[] SIGNAL_NAMES_ARRAY =
-        new String[] {"", "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT", "EMT", "FPE", "KILL", "BUS",
-            "SEGV", "SYS", "PIPE", "ALRM", "TERM", "URG", "STOP", "TSTP", "CONT", "CHLD", "TTIN",
-            "TTOU", "IO", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH", "INFO", "USR1", "USR2"};
+    String[] SIGNAL_NAMES_ARRAY = new String[] {EMPTY, "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT",
+        "EMT", "FPE", "KILL", "BUS", "SEGV", "SYS", "PIPE", "ALRM", "TERM", "URG", "STOP", "TSTP",
+        "CONT", "CHLD", "TTIN", "TTOU", "IO", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH", "INFO",
+        "USR1", "USR2"};
-  protected static final SignalListener LOGGING_SIGNAL_LISTENER = new SignalListener() {
-    public void handle(final SignalEvent event) {
-      System.out.printf("Logging SignalListener Received Signal '%1$s' (%2$d)%n",
+  private static final SignalListener LOGGING_SIGNAL_LISTENER =
+      event -> System.out.printf("Logging SignalListener Received Signal '%1$s' (%2$d)%n",
-    }
-  };
-  protected static final SignalListener NO_OP_SIGNAL_LISTENER = new SignalListener() {
-    public void handle(final SignalEvent event) {
-      // no op
-    }
-  };
-
-  // Map used to register SignalListeners with SignalHandlers...
+  /**
+   * Map used to register SignalListeners with SignalHandlers...
+   */
-  protected static void assertValidArgument(final boolean valid, final String message,
+  static void assertValidArgument(final boolean valid, final String message,
-  public AbstractSignalNotificationHandler() {
-    for (final Signal signal : Signal.values()) {
-      signalListeners.put(signal, Collections.synchronizedSet(new HashSet<SignalListener>()));
+  protected AbstractSignalNotificationHandler() {
+    for (Signal signal : Signal.values()) {
+      signalListeners.put(signal, Collections.synchronizedSet(new HashSet<>()));
-    // registerListener(LOGGING_SIGNAL_LISTENER);
+    // debug();
-  public boolean hasListeners(final Signal signal) {
+  boolean hasListeners(final Signal signal) {
-  public boolean isListening(final SignalListener listener) {
+  boolean isListening(final SignalListener listener) {
-    for (final Signal signal : Signal.values()) {
+    for (Signal signal : Signal.values()) {
-  public boolean isListening(final SignalListener listener, final Signal signal) {
+  boolean isListening(final SignalListener listener, final Signal signal) {
-    final Set<SignalListener> listeners = signalListeners.get(event.getSignal());
+    Set<SignalListener> listeners = signalListeners.get(event.getSignal());
-        localListeners = new HashSet<SignalListener>(listeners);
+        localListeners = new HashSet<>(listeners);
-    for (final SignalListener listener : localListeners) {
+    for (SignalListener listener : localListeners) {
-    for (final Signal signal : Signal.values()) {
+    for (Signal signal : Signal.values()) {
-  public boolean registerListener(final SignalListener listener, final Signal signal) {
+  boolean registerListener(final SignalListener listener, final Signal signal) {
-    for (final Signal signal : Signal.values()) {
+    for (Signal signal : Signal.values()) {
-  public boolean unregisterListener(final SignalListener listener, final Signal signal) {
+  boolean unregisterListener(final SignalListener listener, final Signal signal) {
-  public boolean unregisterListeners(final Signal signal) {
+  boolean unregisterListeners(final Signal signal) {
-    final Set<SignalListener> listeners = signalListeners.get(signal);
+    Set<SignalListener> listeners = signalListeners.get(signal);
+  /**
+   * Do not delete.
+   */
+  private void debug() {
+    registerListener(LOGGING_SIGNAL_LISTENER);
+  }

INS26 INS40 INS31 INS29 UPD83 MOV43 INS29 UPD83 INS29 UPD83 MOV83 MOV39 UPD42 MOV42 INS8 INS65 INS86 INS65 INS65 INS21 INS66 INS59 MOV32 INS66 INS66 INS32 INS42 MOV43 INS42 INS42 INS42 UPD74 UPD74 DEL66 DEL40 DEL65 DEL40 DEL65 DEL40 DEL65 DEL42 DEL45 DEL79 DEL83 DEL45 DEL42 DEL43 DEL83 DEL39 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL21 DEL8 DEL31 DEL1 DEL14 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL83 DEL42 DEL43 DEL42 DEL44 DEL8 DEL31 DEL1 DEL14 DEL59 DEL23 DEL83 DEL83 DEL42 DEL43 DEL83 DEL83 DEL83 DEL83 DEL83 DEL42 DEL43 DEL83 DEL42 DEL43 DEL83 DEL83 DEL83 DEL83 DEL83 DEL83