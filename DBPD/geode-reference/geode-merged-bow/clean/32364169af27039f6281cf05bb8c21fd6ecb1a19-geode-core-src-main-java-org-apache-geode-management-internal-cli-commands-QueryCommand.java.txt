GEODE-3256: Refactoring DataCommands

+import java.util.List;
+import java.util.Map;
+import org.apache.geode.cache.execute.FunctionService;
+import org.apache.geode.cache.execute.ResultCollector;
-    Object array[] = DataCommands.replaceGfshEnvVar(query, CommandExecutionContext.getShellEnv());
+    Object array[] = replaceGfshEnvVar(query, CommandExecutionContext.getShellEnv());
-            DataCommands.getQueryRegionsAssociatedMembers(regionsInQuery, cache, false);
+            DataCommandsUtils.getQueryRegionsAssociatedMembers(regionsInQuery, cache, false);
-          dataResult = DataCommands.callFunctionForRegion(request, function, members);
+          dataResult = callFunctionForRegion(request, function, members);
+
+  public static DataCommandResult callFunctionForRegion(DataCommandRequest request,
+      DataCommandFunction putfn, Set<DistributedMember> members) {
+
+    if (members.size() == 1) {
+      DistributedMember member = members.iterator().next();
+      ResultCollector collector =
+          FunctionService.onMember(member).setArguments(request).execute(putfn);
+      List list = (List) collector.getResult();
+      Object object = list.get(0);
+      if (object instanceof Throwable) {
+        Throwable error = (Throwable) object;
+        DataCommandResult result = new DataCommandResult();
+        result.setErorr(error);
+        result.setErrorString(error.getMessage());
+        return result;
+      }
+      DataCommandResult result = (DataCommandResult) list.get(0);
+      result.aggregate(null);
+      return result;
+    } else {
+      ResultCollector collector =
+          FunctionService.onMembers(members).setArguments(request).execute(putfn);
+      List list = (List) collector.getResult();
+      DataCommandResult result = null;
+      for (Object object : list) {
+        if (object instanceof Throwable) {
+          Throwable error = (Throwable) object;
+          result = new DataCommandResult();
+          result.setErorr(error);
+          result.setErrorString(error.getMessage());
+          return result;
+        }
+
+        if (result == null) {
+          result = (DataCommandResult) object;
+          result.aggregate(null);
+        } else {
+          result.aggregate((DataCommandResult) object);
+        }
+      }
+      return result;
+    }
+  }
+
+  private static Object[] replaceGfshEnvVar(String query, Map<String, String> gfshEnvVarMap) {
+    boolean done = false;
+    int startIndex = 0;
+    int replacedVars = 0;
+    while (!done) {
+      int index1 = query.indexOf("${", startIndex);
+      if (index1 == -1) {
+        break;
+      }
+      int index2 = query.indexOf("}", index1);
+      if (index2 == -1) {
+        break;
+      }
+      String var = query.substring(index1 + 2, index2);
+      String value = gfshEnvVarMap.get(var);
+      if (value != null) {
+        query = query.replaceAll("\\$\\{" + var + "\\}", value);
+        replacedVars++;
+      }
+      startIndex = index2 + 1;
+      if (startIndex >= query.length()) {
+        done = true;
+      }
+    }
+    return new Object[] {replacedVars, query};
+  }

INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS5 INS42 INS44 INS44 INS8 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS25 INS43 INS85 INS43 INS42 INS74 INS42 INS60 INS60 INS60 INS61 INS41 INS42 INS42 INS43 INS43 INS27 INS8 INS8 INS42 INS42 INS43 INS43 INS43 INS39 INS59 INS39 INS59 INS39 INS59 INS38 INS8 INS3 INS42 INS42 INS32 INS34 INS60 INS60 INS60 INS60 INS25 INS60 INS21 INS41 INS60 INS60 INS60 INS70 INS41 INS42 INS42 INS42 INS42 INS9 INS42 INS34 INS42 INS34 INS42 INS60 INS25 INS60 INS25 INS60 INS60 INS25 INS21 INS25 INS5 INS4 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS62 INS8 INS43 INS59 INS32 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS44 INS42 INS8 INS42 INS39 INS59 INS27 INS8 INS39 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS27 INS8 INS7 INS27 INS8 INS43 INS85 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS43 INS60 INS60 INS21 INS21 INS41 INS42 INS42 INS11 INS42 INS42 INS33 INS42 INS42 INS32 INS42 INS42 INS11 INS42 INS42 INS33 INS43 INS42 INS25 INS25 INS42 INS32 INS42 INS38 INS10 INS42 INS32 INS42 INS38 INS10 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS27 INS42 INS32 INS21 INS42 INS32 INS42 INS32 INS42 INS42 INS43 INS32 INS42 INS42 INS34 INS42 INS43 INS59 INS43 INS59 INS32 INS32 INS42 INS43 INS32 INS32 INS42 INS42 INS43 INS32 INS42 INS62 INS8 INS27 INS8 INS8 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS45 INS42 INS34 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS7 INS37 INS42 INS34 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS34 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS60 INS21 INS21 INS21 INS41 INS42 INS33 INS21 INS21 INS21 INS42 INS34 INS42 INS32 INS42 INS42 INS9 UPD42 INS42 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS7 INS32 INS32 INS42 INS7 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS11 INS42 INS42 INS33 INS42 INS42 INS11 INS45 INS42 INS45 INS43 INS42 INS43 INS42 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS42 INS42 DEL42 DEL42