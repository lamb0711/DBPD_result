Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- *  
+ * 
-public class RegionEventImpl 
-  implements RegionEvent, InternalCacheEvent, Cloneable, DataSerializableFixedID
-{
+public class RegionEventImpl
+    implements RegionEvent, InternalCacheEvent, Cloneable, DataSerializableFixedID {
-  
+
-  
+
-  public RegionEventImpl(Region region, Operation op, Object callbackArgument,
-      boolean originRemote, DistributedMember distributedMember) {
+  public RegionEventImpl(Region region, Operation op, Object callbackArgument, boolean originRemote,
+      DistributedMember distributedMember) {
-  public RegionEventImpl(Region region, Operation op, Object callbackArgument,
-      boolean originRemote, DistributedMember distributedMember,
-      boolean generateEventID) {
-    this.region = (LocalRegion)region;
+  public RegionEventImpl(Region region, Operation op, Object callbackArgument, boolean originRemote,
+      DistributedMember distributedMember, boolean generateEventID) {
+    this.region = (LocalRegion) region;
-    DistributedSystem sys = ((LocalRegion)region).getCache().getDistributedSystem();
+    DistributedSystem sys = ((LocalRegion) region).getCache().getDistributedSystem();
-   * @param eventID
-   *          EventID used to create the RegionEvent
+   * @param eventID EventID used to create the RegionEvent
-  public RegionEventImpl(Region region, Operation op, Object callbackArgument,
-      boolean originRemote, DistributedMember distributedMember, EventID eventID) {
-    this.region = (LocalRegion)region;
+  public RegionEventImpl(Region region, Operation op, Object callbackArgument, boolean originRemote,
+      DistributedMember distributedMember, EventID eventID) {
+    this.region = (LocalRegion) region;
-    //TODO:ASIF: Remove this Assert from production env.
+    // TODO:ASIF: Remove this Assert from production env.
-  public Region getRegion()
-  {
+  public Region getRegion() {
-  public Operation getOperation()
-  {
+  public Operation getOperation() {
-  public void setOperation(Operation newOp)
-  {
+  public void setOperation(Operation newOp) {
-  
-  public void setVersionTag(VersionTag<?>tag) {
+
+  public void setVersionTag(VersionTag<?> tag) {
-  
+
-  public Object getCallbackArgument()
-  {
+  public Object getCallbackArgument() {
-      WrappedCallbackArgument wca = (WrappedCallbackArgument)result;
+      WrappedCallbackArgument wca = (WrappedCallbackArgument) result;
+
-   * Returns the value of the RegionEventImpl field.
-   * This is for internal use only. Customers should always call
-   * {@link #getCallbackArgument}
+   * Returns the value of the RegionEventImpl field. This is for internal use only. Customers should
+   * always call {@link #getCallbackArgument}
+   * 
-  public boolean isOriginRemote()
-  {
+  public boolean isOriginRemote() {
-  public DistributedMember getDistributedMember()
-  {
+  public DistributedMember getDistributedMember() {
-  public boolean isGenerateCallbacks()
-  {
+  public boolean isGenerateCallbacks() {
-  public boolean isExpiration()
-  {
+  public boolean isExpiration() {
-  public boolean isDistributed()
-  {
+  public boolean isDistributed() {
-  public Object clone()
-  {
+  public Object clone() {
-    }
-    catch (CloneNotSupportedException e) {
+    } catch (CloneNotSupportedException e) {
-  public void toData(DataOutput out) throws IOException
-  {
+  public void toData(DataOutput out) throws IOException {
-    InternalDataSerializer.invokeToData(((InternalDistributedMember)this.distributedMember), out);
+    InternalDataSerializer.invokeToData(((InternalDistributedMember) this.distributedMember), out);
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException
-  {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-  public boolean isReinitializing()
-  {
-    return this.op == Operation.REGION_LOAD_SNAPSHOT
-        || this.op == Operation.REGION_REINITIALIZE;
+  public boolean isReinitializing() {
+    return this.op == Operation.REGION_LOAD_SNAPSHOT || this.op == Operation.REGION_REINITIALIZE;
-  public EventID getEventId()
-  {
+  public EventID getEventId() {
-  
+
-  public void setCallbackArgument(Object callbackArgument)
-  {
+  public void setCallbackArgument(Object callbackArgument) {
+   * 
-    return this.eventType; 
+    return this.eventType;
+   * 
-    this.eventType = eventType; 
+    this.eventType = eventType;
-  
+
-  
+
-  
+
+
-    return cname.substring(getClass().getPackage().getName().length()+1);
+    return cname.substring(getClass().getPackage().getName().length() + 1);
-    return new StringBuffer()
-      .append(getShortClassName())
-      .append("[")
-      .append("region=")
-      .append(getRegion())
-      .append(";op=")
-      .append(getOperation())
-      .append(";isReinitializing=")
-      .append(isReinitializing())
-      .append(";callbackArg=")
-      .append(getCallbackArgument())
-      .append(";originRemote=")
-      .append(isOriginRemote())
-      .append(";originMember=")
-      .append(getDistributedMember())
-      .append(";tag=")
-      .append(this.versionTag)
-      .append("]")
-      .toString();
+    return new StringBuffer().append(getShortClassName()).append("[").append("region=")
+        .append(getRegion()).append(";op=").append(getOperation()).append(";isReinitializing=")
+        .append(isReinitializing()).append(";callbackArg=").append(getCallbackArgument())
+        .append(";originRemote=").append(isOriginRemote()).append(";originMember=")
+        .append(getDistributedMember()).append(";tag=").append(this.versionTag).append("]")
+        .toString();

UPD66 UPD66 UPD66