Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
-  
+
-    
+
-  
+
+
+
-  
+
-  /* (non-Javadoc)
+  /*
+   * (non-Javadoc)
+   * 
-  public void fromData(DataInput in) throws IOException,
-      ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
-    for(int i = 0; i < offlineSize; i++) {
+    for (int i = 0; i < offlineSize; i++) {
-      offlineMembers.add(id); 
+      offlineMembers.add(id);
-    
+
-    onlineMembers = new HashMap<InternalDistributedMember,PersistentMemberID>(onlineSize);
-    for(int i = 0; i < onlineSize; i++) {
+    onlineMembers = new HashMap<InternalDistributedMember, PersistentMemberID>(onlineSize);
+    for (int i = 0; i < onlineSize; i++) {
-      onlineMembers.put(member, id); 
+      onlineMembers.put(member, id);
-    
+
-    for(int i = 0; i < revokedSized; i++) {
+    for (int i = 0; i < revokedSized; i++) {
-    
-    
+
+
+
-    for(PersistentMemberID member: offlineMembers) {
+    for (PersistentMemberID member : offlineMembers) {
-    for(Map.Entry<InternalDistributedMember, PersistentMemberID> entry : onlineMembers.entrySet()) {
+    for (Map.Entry<InternalDistributedMember, PersistentMemberID> entry : onlineMembers
+        .entrySet()) {
-    
+
-    for(PersistentMemberPattern revoked : revokedMembers) {
+    for (PersistentMemberPattern revoked : revokedMembers) {
-    return "PersistentMembershipView[offline=" + offlineMembers + ",online=" + onlineMembers + ", revoked=" + revokedMembers + "]";
+    return "PersistentMembershipView[offline=" + offlineMembers + ",online=" + onlineMembers
+        + ", revoked=" + revokedMembers + "]";

