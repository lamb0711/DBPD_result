GEODE-2619: Lucene APIs unwrap function exception and throw the cause.

	* This is done so that users do not encounter Function Exceptions while executing Lucene APIs.

	This closes #434

-import java.util.Collections;
+import org.apache.geode.cache.execute.FunctionException;
-    List<EntryScore<K>> scores = hits.subList(fromIndex, toIndex);
-    Set<K> keys = new HashSet<K>(scores.size());
-    for (EntryScore<K> score : scores) {
-      keys.add(score.getKey());
-    }
+    ArrayList<LuceneResultStruct<K, V>> results = null;
+    try {
+      List<EntryScore<K>> scores = hits.subList(fromIndex, toIndex);
+      Set<K> keys = new HashSet<K>(scores.size());
+      for (EntryScore<K> score : scores) {
+        keys.add(score.getKey());
+      }
-    Map<K, V> values = getValues(keys);
+      Map<K, V> values = getValues(keys);
-    ArrayList<LuceneResultStruct<K, V>> results =
-        new ArrayList<LuceneResultStruct<K, V>>(values.size());
-    for (EntryScore<K> score : scores) {
-      V value = values.get(score.getKey());
-      if (value != null)
-        results.add(new LuceneResultStructImpl(score.getKey(), value, score.getScore()));
+
+      results = new ArrayList<LuceneResultStruct<K, V>>(values.size());
+      for (EntryScore<K> score : scores) {
+        V value = values.get(score.getKey());
+        if (value != null)
+          results.add(new LuceneResultStructImpl(score.getKey(), value, score.getScore()));
+      }
+    } catch (FunctionException functionException) {
+      if (functionException.getCause() instanceof RuntimeException) {
+        throw (RuntimeException) functionException.getCause();
+      }
+      throw functionException;

MOV26 UPD40 INS8 MOV60 INS54 MOV41 MOV8 INS12 INS33 INS21 INS44 INS8 INS7 INS43 INS42 INS25 INS53 INS42 MOV14 INS42 INS62 INS8 INS42 INS32 INS43 INS53 INS42 INS42 INS42 INS11 INS43 INS32 INS42 INS42 INS42