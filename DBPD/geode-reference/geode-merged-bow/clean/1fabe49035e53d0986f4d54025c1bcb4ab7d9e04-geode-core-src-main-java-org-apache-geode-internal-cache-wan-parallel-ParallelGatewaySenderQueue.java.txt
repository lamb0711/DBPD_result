GEODE-2123: Replace static members in ParallelgatewaySenderQueues with instance variables

-  private static final Map regionToDispatchedKeysMap = new ConcurrentHashMap();
+  private final Map regionToDispatchedKeysMap = new ConcurrentHashMap();
-  protected static StoppableReentrantLock buckToDispatchLock;
+  protected final StoppableReentrantLock buckToDispatchLock;
-  private static StoppableCondition regionToDispatchedKeysMapEmpty;
+  private final StoppableCondition regionToDispatchedKeysMapEmpty;
-  private static BatchRemovalThread removalThread = null;
+  private BatchRemovalThread removalThread = null;
-  private static volatile ExecutorService conflationExecutor;
+  private ExecutorService conflationExecutor;
-    if (buckToDispatchLock == null) {
-      buckToDispatchLock = new StoppableReentrantLock(sender.getCancelCriterion());
-    }
-    if (regionToDispatchedKeysMapEmpty == null) {
-      regionToDispatchedKeysMapEmpty = buckToDispatchLock.newCondition();
-    }
+    buckToDispatchLock = new StoppableReentrantLock(sender.getCancelCriterion());
+    regionToDispatchedKeysMapEmpty = buckToDispatchLock.newCondition();
-  private static void initializeConflationThreadPool() {
-    if (conflationExecutor == null) {
-      final LoggingThreadGroup loggingThreadGroup =
-          LoggingThreadGroup.createThreadGroup("WAN Queue Conflation Logger Group", logger);
+  private void initializeConflationThreadPool() {
+    final LoggingThreadGroup loggingThreadGroup =
+        LoggingThreadGroup.createThreadGroup("WAN Queue Conflation Logger Group", logger);
-      final ThreadFactory threadFactory = new ThreadFactory() {
-        public Thread newThread(final Runnable task) {
-          final Thread thread = new Thread(loggingThreadGroup, task, "WAN Queue Conflation Thread");
-          thread.setDaemon(true);
-          return thread;
-        }
-      };
+    final ThreadFactory threadFactory = new ThreadFactory() {
+      public Thread newThread(final Runnable task) {
+        final Thread thread = new Thread(loggingThreadGroup, task, "WAN Queue Conflation Thread");
+        thread.setDaemon(true);
+        return thread;
+      }
+    };
-      conflationExecutor =
-          Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), threadFactory);
-    }
+    conflationExecutor =
+        Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors(), threadFactory);
-  private static void cleanupConflationThreadPool(AbstractGatewaySender sender) {
+  private void cleanupConflationThreadPool(AbstractGatewaySender sender) {
+    if (conflationExecutor == null) {
+      return;
+    }
-    cleanUpStatics(this.sender);
-  }
-
-  /**
-   * @param sender can be null.
-   */
-  public static void cleanUpStatics(AbstractGatewaySender sender) {
-    buckToDispatchLock = null;
-    regionToDispatchedKeysMapEmpty = null;
-    synchronized (ParallelGatewaySenderQueue.class) {
-      if (removalThread != null) {
-        removalThread.shutdown();
-        removalThread = null;
-      }
-    }
-    if (conflationExecutor != null) {
-      cleanupConflationThreadPool(sender);
-      conflationExecutor = null;
-    }
+    removalThread.shutdown();
+    cleanupConflationThreadPool(this.sender);
-  private static class BatchRemovalThread extends Thread {
+  private class BatchRemovalThread extends Thread {
-            cache.getDistributionManager().removeMembersWithSameOrNewerVersion(recipients,
-                Version.GFE_80);
-            if (!recipients.isEmpty()) {
-              for (Map.Entry<String, Map<Integer, List>> mapEntry : temp.entrySet()) {
-                Set<InternalDistributedMember> tempOldVersionMembers = recipients;
-                PartitionedRegion prQ = (PartitionedRegion) cache.getRegion(mapEntry.getKey());
-                Set<InternalDistributedMember> memberForPRQ =
-                    prQ.getRegionAdvisor().adviseDataStore();
-                memberForPRQ.retainAll(tempOldVersionMembers);
-                ParallelQueueBatchRemovalResponse response =
-                    ParallelQueueBatchRemovalMessage.send(memberForPRQ, prQ, mapEntry.getValue());
-                try {
-                  response.waitForResponse();
-                } catch (ForceReattemptException e) {
-                  // put temp back again in the map
-                  for (Integer bId : mapEntry.getValue().keySet()) {
-                    this.parallelQueue.addRemovedEvents(prQ, bId, mapEntry.getValue().get(bId));
-                  }
-                  if (logger.isDebugEnabled()) {
-                    logger.debug(
-                        "ParallelQueueBatchRemovalMessage got ForceReattemptException. Will continue.");
-                  }
-                }
-              }
-            }
-            recipients = getAllRecipients(cache, temp);
-            cache.getDistributionManager().retainMembersWithSameOrNewerVersion(recipients,
-                Version.GFE_80);

UPD83 UPD83 MOV8 MOV21 MOV21 INS25 MOV21 MOV21 MOV27 INS8 INS41 UPD42 DEL83 DEL83 DEL83 DEL83 DEL42 DEL33 DEL27 DEL8 DEL25 DEL42 DEL33 DEL27 DEL8 DEL25 DEL83 DEL25 DEL8 DEL83 DEL42 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL7 DEL21 DEL42 DEL33 DEL7 DEL21 DEL42 DEL43 DEL57 DEL42 DEL33 DEL27 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL51 DEL42 DEL33 DEL27 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL32 DEL38 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL32 DEL52 DEL42 DEL22 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL12 DEL54 DEL8 DEL70 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL42 DEL40 DEL32 DEL21