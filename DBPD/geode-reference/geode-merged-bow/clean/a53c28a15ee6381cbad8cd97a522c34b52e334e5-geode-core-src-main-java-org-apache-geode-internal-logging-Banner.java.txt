GEODE-6122: Make log4j core optional (#2944)

* Add Logging ProviderAgent support for ServiceLoader
* Test for availability of Log4j Core before defaulting to Log4jAgent
* Change optional ProviderAgent methods to have default impls
* Extract LogLevelUpdateOccurs enum to top level class
* Extract LogLevelUpdateScope enum to top level class
* Move Banner to internal.logging package
* Break Banner's hard dependency on Log4J Core
* Improve javadocs
* Add field type to TestingOnly annotation
* Replace use of InternalLogWriter constants with LogWriterLevel enum

-package org.apache.geode.internal;
+package org.apache.geode.internal.logging;
-import static org.apache.geode.internal.Banner.BannerHeader.CLASS_PATH;
-import static org.apache.geode.internal.Banner.BannerHeader.COMMAND_LINE_PARAMETERS;
-import static org.apache.geode.internal.Banner.BannerHeader.COMMUNICATIONS_VERSION;
-import static org.apache.geode.internal.Banner.BannerHeader.CURRENT_DIR;
-import static org.apache.geode.internal.Banner.BannerHeader.HOME_DIR;
-import static org.apache.geode.internal.Banner.BannerHeader.LIBRARY_PATH;
-import static org.apache.geode.internal.Banner.BannerHeader.LICENSE_START;
-import static org.apache.geode.internal.Banner.BannerHeader.LOG4J2_CONFIGURATION;
-import static org.apache.geode.internal.Banner.BannerHeader.PROCESS_ID;
-import static org.apache.geode.internal.Banner.BannerHeader.SYSTEM_PROPERTIES;
-import static org.apache.geode.internal.Banner.BannerHeader.USER;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.CLASS_PATH;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.COMMAND_LINE_PARAMETERS;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.COMMUNICATIONS_VERSION;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.CURRENT_DIR;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.HOME_DIR;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.LIBRARY_PATH;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.LICENSE_START;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.LOG4J2_CONFIGURATION;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.PROCESS_ID;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.SYSTEM_PROPERTIES;
+import static org.apache.geode.internal.logging.Banner.BannerHeader.USER;
-import org.apache.geode.internal.logging.ConfigurationInfo;
+import org.apache.geode.internal.GemFireVersion;
+import org.apache.geode.internal.OSProcess;
+import org.apache.geode.internal.Version;
+import org.apache.geode.internal.VersionDescription;
+ *
+ * <p>
+ * Banner should only be accessed from the Logging package or from Logging tests.
-  private Banner() {
-    // everything is static so don't allow instance creation
+  private final String configurationInfo;
+
+  /**
+   * @deprecated Please use {@link Banner(String)} instead. Banner should only be accessed from the
+   *             Logging package or from Logging tests.
+   */
+  @Deprecated
+  public Banner() {
+    this(ConfigurationInfo.getConfigurationInfo());
-  private static void prettyPrintPath(String path, PrintWriter out) {
+  public Banner(final String configurationInfo) {
+    this.configurationInfo = configurationInfo;
+  }
+
+  public String getString() {
+    return getString(null);
+  }
+
+  /**
+   * Return a string containing the banner information.
+   *
+   * @param args possibly null list of command line arguments
+   */
+  public String getString(String[] args) {
+    StringWriter sw = new StringWriter();
+    PrintWriter pw = new PrintWriter(sw);
+    print(pw, args);
+    pw.close();
+    return sw.toString();
+  }
+
+  private void prettyPrintPath(String path, PrintWriter out) {
-  static void print(PrintWriter out, String args[]) {
+  private void print(PrintWriter out, String args[]) {
-      out.println("    " + ConfigurationInfo.getConfigurationInfo());
+      out.println("    " + configurationInfo);
-  private static int attemptToReadProcessId() {
+  private int attemptToReadProcessId() {
-  private static void printASFLicense(PrintWriter out) {
+  private void printASFLicense(PrintWriter out) {
-   * Return a string containing the banner information.
-   *
-   * @param args possibly null list of command line arguments
-   */
-  public static String getString(String[] args) {
-    StringWriter sw = new StringWriter();
-    PrintWriter pw = new PrintWriter(sw);
-    print(pw, args);
-    pw.close();
-    return sw.toString();
-  }
-
-  /**

INS26 INS26 INS26 MOV31 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 UPD40 INS40 INS40 UPD40 INS40 INS23 INS31 INS31 INS83 INS83 INS43 INS59 INS29 INS78 UPD83 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS8 UPD83 INS66 INS66 INS42 INS42 INS65 INS42 INS17 INS83 INS43 INS42 INS21 INS42 INS41 INS66 INS65 INS66 INS66 MOV32 INS42 INS7 INS32 INS66 INS22 INS42 INS42 INS33 INS52 INS42 INS42 DEL83 DEL83 DEL83 DEL83