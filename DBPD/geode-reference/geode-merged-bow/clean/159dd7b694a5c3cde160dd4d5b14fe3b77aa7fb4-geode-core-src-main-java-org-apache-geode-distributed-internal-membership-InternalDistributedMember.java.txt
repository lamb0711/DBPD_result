GEODE-6883 Move the membership code into a separate gradle sub-project

This commit is focused on removing references to
InternalDistributedMember and DistributionMessage from "gms"
packages.

    GMS classes only refer to GMSMember
    GMS classes use GMSMembershipView.  NetView is now an interface
    GMS classes do not refer to DistributionMessage.  JGroupsMessenger
      expects GMSMessage instances.  Geode messages to be sent over UDP
      are wrapped in a GMSMessageAdapter.
    "gms" messages extend AbstractGMSMessage which implements GMSMessage
    GMSMembershipManager has an inner class that implements the GMS Manager
      interface and is now in the "adapter" package
    GMSMembershipManager translates GMSMembershipView into a MembershipView
      for the rest of Geode to use (this is the old NetView class)
    GMS instantiation allows us to inject the Manager into the new Services
      instance.
    Other adapter classes have been added to translate between Geode
      and GMS.

    GMSUtil has new methods for marshalling/unmarshalling
    InternalDistributedMember instances for backward-compatibility.
    GMSMember now has the same on-wire form as
    InternalDistributedMember.  This allows the GMS classes to
    deserialize a message from a pre-1.10 member whose code writes
    InternalDistributedMembers when serializing something like a
    JoinRequest.

-import org.apache.geode.distributed.internal.DistributionConfig;
-  /** whether to show NetMember components in toString() */
-  private static final boolean SHOW_NETMEMBER =
-      Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "show_netmembers");
-
-  protected NetMember netMbr; // the underlying member object, e.g. from JGroups
+  protected NetMember netMbr; // the underlying member object
+  public int getVmPid() {
+    return netMbr.getProcessId();
+  }
+
-  /**
-   * Representing the host name of this member.
-   */
-  private String hostName = null;
-
-        this.hostName = SocketCreator.getHostName(SocketCreator.getLocalHost());
+        netMbr.setHostName(SocketCreator.getHostName(SocketCreator.getLocalHost()));
-        this.hostName = SocketCreator.getLocalHost().getHostAddress();
+        netMbr.setHostName(SocketCreator.getLocalHost().getHostAddress());
-    this.netMbr = MemberFactory.newNetMember(i, p, splitBrainEnabled, canBeCoordinator,
-        Version.CURRENT_ORDINAL, attr);
+    String hostName = SocketCreator.resolve_dns ? SocketCreator.getHostName(i) : i.getHostAddress();
-    this.hostName = SocketCreator.resolve_dns ? SocketCreator.getHostName(i) : i.getHostAddress();
+    this.netMbr = MemberFactory.newNetMember(i, hostName, p, splitBrainEnabled, canBeCoordinator,
+        Version.CURRENT_ORDINAL,
+        attr);
-   * <p>
-   * This is not the preferred way of creating an instance since the NetMember may not have all
-   * required information (e.g., a JGroups address without direct-port and other information).
-    this.hostName = SocketCreator.resolve_dns ? SocketCreator.getHostName(m.getInetAddress())
-        : m.getInetAddress().getHostAddress();
+    if (netMbr.getHostName() == null) {
+      String hostName = SocketCreator.resolve_dns ? SocketCreator.getHostName(m.getInetAddress())
+          : m.getInetAddress().getHostAddress();
+      netMbr.setHostName(hostName);
+    }
-    this.isPartial = true;
+    this.isPartial = false;
-    this(i, p, Version.CURRENT);
+    this(MemberFactory.newNetMember(i, p));
-    this.hostName = location.getHostName();
-    netMbr = MemberFactory.newNetMember(addr, location.getPort());
-    netMbr.setVmKind(ClusterDistributionManager.NORMAL_DM_TYPE);
+    netMbr =
+        MemberFactory.newNetMember(addr, location.getHostName(), location.getPort(), false, true,
+            Version.CURRENT_ORDINAL, MemberAttributes.DEFAULT);
-    netMbr.setVersion(versionObj);
-  }
-
-  /**
-   * Create a InternalDistributedMember referring to the current host (as defined by the given
-   * string).
-   * <p>
-   *
-   * <b> THIS METHOD IS FOR TESTING ONLY. DO NOT USE IT TO CREATE IDs FOR USE IN THE PRODUCT. IT
-   * DOES NOT PROPERLY INITIALIZE ATTRIBUTES NEEDED FOR P2P FUNCTIONALITY. </b>
-   *
-   *
-   * @param i the hostname, must be for the current host
-   * @param p the membership listening port
-   * @param version the version of this member
-   * @throws UnknownHostException if the given hostname cannot be resolved
-   */
-  public InternalDistributedMember(String i, int p, Version version) {
-    this(i, p, version, MemberFactory.newNetMember(i, p));
-  }
-
-  /**
-   * Create a InternalDistributedMember referring to the current host (as defined by the given
-   * string).
-   * <p>
-   *
-   * <b> THIS METHOD IS FOR TESTING ONLY. DO NOT USE IT TO CREATE IDs FOR USE IN THE PRODUCT. IT
-   * DOES NOT PROPERLY INITIALIZE ATTRIBUTES NEEDED FOR P2P FUNCTIONALITY. </b>
-   **/
-  public InternalDistributedMember(String i, int p, Version version, NetMember netMember) {
-    netMbr = netMember;
-    defaultToCurrentHost();
-    netMember.setVmKind(ClusterDistributionManager.NORMAL_DM_TYPE);
-    this.versionObj = version;
-    netMember.setVersion(version);
-    netMbr = MemberFactory.newNetMember(addr, p, false, true, Version.CURRENT_ORDINAL, mattr);
+    netMbr = MemberFactory.newNetMember(addr, host, p, false, true, Version.CURRENT_ORDINAL, mattr);
-    this.hostName = host;
-  public void setVmKind(int p) {
-    netMbr.setVmKind(p);
-    cachedToString = null;
-  }
-
-   * [GemStone] Returns the process id of the VM that hosts the distribution manager with this
-   * address.
-   *
-   * @since GemFire 4.0
-   */
-  public int getVmPid() {
-    return netMbr.getProcessId();
-  }
-
-  /**
-   * [GemStone] Sets the process id of the VM that hosts the distribution manager with this address.
-   *
-   * @since GemFire 4.0
-   */
-  public void setVmPid(int p) {
-    netMbr.setProcessId(p);
-    cachedToString = null;
-  }
-
-  /**
-   *
-   * @see org.apache.geode.distributed.DistributedSystem#getName
-    if ((o == null) || !(o instanceof InternalDistributedMember))
+    if (!(o instanceof InternalDistributedMember))
-    if ((obj == null) || !(obj instanceof InternalDistributedMember)) {
+    if (!(obj instanceof InternalDistributedMember)) {
-      if (SHOW_NETMEMBER) {
-        sb.append("[[").append(this.netMbr).append("]]");
-      }
-
-      // host = shortName(add.getHostName());
-      host = SocketCreator.resolve_dns ? shortName(this.hostName) : this.hostName;
+      String hostName = netMbr.getHostName();
+      host = SocketCreator.resolve_dns ? shortName(hostName) : hostName;
-        sb.append(Integer.toString(vmPid));
+        sb.append(vmPid);
-    DataSerializer.writeString(this.hostName, out);
+    DataSerializer.writeString(netMbr.getHostName(), out);
-    this.hostName = DataSerializer.readString(in);
+    String hostName = DataSerializer.readString(in);
-    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, version,
+    netMbr = MemberFactory.newNetMember(inetAddr, hostName, port, sbEnabled, elCoord, version,
-    DataSerializer.writeString(this.hostName, out);
+    DataSerializer.writeString(netMbr.getHostName(), out);
-    DataSerializer.writeString(this.hostName, out);
+    DataSerializer.writeString(netMbr.getHostName(), out);
-    this.hostName = DataSerializer.readString(in);
+    String hostName = DataSerializer.readString(in);
-    this.hostName = SocketCreator.resolve_dns
+    hostName = SocketCreator.resolve_dns
-    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, version, attr);
+    netMbr =
+        MemberFactory.newNetMember(inetAddr, hostName, port, sbEnabled, elCoord, version, attr);
-    this.hostName = DataSerializer.readString(in);
+    String hostName = DataSerializer.readString(in);
-    this.hostName = SocketCreator.resolve_dns
+    hostName = SocketCreator.resolve_dns
-    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord, version, attr);
+    netMbr =
+        MemberFactory.newNetMember(inetAddr, hostName, port, sbEnabled, elCoord, version, attr);
-    this.hostName =
+    String hostName =
-    netMbr = MemberFactory.newNetMember(inetAddr, port, sbEnabled, elCoord,
+    netMbr = MemberFactory.newNetMember(inetAddr, hostName, port, sbEnabled, elCoord,
-   * [GemStone] Set the direct channel port
-   */
-  public void setDirectChannelPort(int p) {
-    netMbr.setDirectPort(p);
-  }
-
-  /**
-    if (SHOW_NETMEMBER) {
-      sb.append("[[").append(netMbr.getUniqueId()).append("]]");
-    }
-
-  void setIsPartial(boolean value) {
+  public void setIsPartial(boolean value) {
-  public static class InternalDistributedMemberWrapper {
-    InternalDistributedMember mbr;
-
-    public InternalDistributedMemberWrapper(InternalDistributedMember m) {
-      this.mbr = m;
-    }
-
-    public InternalDistributedMember getMbr() {
-      return mbr;
-    }
-
-    @Override
-    public int hashCode() {
-      return mbr.hashCode();
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-      InternalDistributedMember other = ((InternalDistributedMemberWrapper) obj).mbr;
-      return mbr.compareTo(other, false, false) == 0;
-    }
-
-    @Override
-    public String toString() {
-      return "InternalDistributedMemberWrapper [mbr=" + mbr + "]";
-    }
-  }

MOV31 MOV31 UPD42 UPD42 INS83 INS60 INS25 INS60 INS60 INS60 INS60 MOV43 INS59 INS27 INS8 MOV32 MOV38 MOV38 INS43 INS59 INS43 INS59 INS43 INS59 MOV43 INS59 INS42 MOV16 INS32 INS33 INS60 MOV21 UPD9 INS60 INS32 INS42 INS42 MOV32 INS32 INS32 INS42 INS42 MOV32 INS42 INS42 INS42 MOV32 INS42 INS42 MOV16 INS42 INS42 INS42 INS43 INS59 INS32 MOV32 INS9 INS9 INS40 INS40 INS42 INS43 INS59 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV16 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS42 MOV42 INS42 INS42 MOV32 INS42 INS42 MOV32 INS42 DEL40 DEL26 DEL66 DEL65 DEL29 DEL83 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL40 DEL45 DEL27 DEL32 DEL59 DEL23 DEL66 DEL66 DEL65 DEL66 DEL65 DEL29 DEL66 DEL65 DEL29 DEL83 DEL42 DEL33 DEL59 DEL23 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL7 DEL52 DEL42 DEL22 DEL7 DEL21 DEL66 DEL66 DEL66 DEL52 DEL42 DEL22 DEL7 DEL42 DEL42 DEL40 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL17 DEL8 DEL31 DEL66 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL7 DEL21 DEL42 DEL32 DEL21 DEL42 DEL42 DEL40 DEL32 DEL21 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL31 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL7 DEL21 DEL8 DEL31 DEL40 DEL42 DEL67 DEL65 DEL42 DEL33 DEL27 DEL36 DEL27 DEL42 DEL33 DEL27 DEL36 DEL27 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL52 DEL42 DEL22 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL7 DEL21 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL45 DEL32 DEL21 DEL8 DEL25 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL22 DEL59 DEL60 DEL42 DEL42 DEL42 DEL9 DEL9 DEL32 DEL34 DEL27 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL45 DEL42 DEL45 DEL27 DEL41 DEL8 DEL31 DEL55