GEODE-7863: Reduce ServerCQImpl Contention (#4798)

We don't need to lock the entire internal cache for Partitioned
regions so the implementation is now split by region type, this will
us to improve/change them independently in the future.

- Removed redundant checks.
- Keep current behavior for Replicate Regions.
- Use ConcurrentMap instead of locking the entire internal cache on
every operation for Partition Regions.
- Keep the lock on ServerCQImpl instance only while executing the
query and leave stats operations outside of the synchronized block.
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
+import org.apache.geode.annotations.VisibleForTesting;
-import org.apache.geode.cache.query.QueryException;
-import org.apache.geode.internal.cache.Token;
+  private static final ServerCQResultsCache NO_OP_CACHE = new ServerCQResultsCacheNoOpImpl();
-   * This holds the keys that are part of the CQ query results. Using this CQ engine can determine
-   * whether to execute query on old value from EntryEvent, which is an expensive operation.
-   *
-   * NOTE: In case of RR this map is populated and used as intended. In case of PR this map will not
-   * be populated. If executeCQ happens after update operations this map will remain empty.
+   * NOTE: In case of Replicated Regions this cache is populated and used as intended. In case of
+   * Partition Regions this cache will not be populated. If executeCQ happens after update
+   * operations this cache will remain empty.
-  private volatile HashMap<Object, Object> cqResultKeys;
-
-  /**
-   * This maintains the keys that are destroyed while the Results Cache is getting constructed. This
-   * avoids any keys that are destroyed (after query execution) but is still part of the CQs result.
-   */
-  private HashSet<Object> destroysWhileCqResultsInProgress;
-
-  /**
-   * To indicate if the CQ results key cache is initialized.
-   */
-  public volatile boolean cqResultKeysInitialized = false;
+  private volatile ServerCQResultsCache serverCQResultsCache = NO_OP_CACHE;
+
-          String.format("Region : %s specified with cq not found. CqName: %s",
-              new Object[] {regionName, this.cqName}));
+          String.format("Region : %s specified with cq not found. CqName: %s", regionName,
+              this.cqName));
-      this.cqResultKeys = new HashMap<>();
-        this.setCqResultsCacheInitialized();
+        serverCQResultsCache = new ServerCQResultsCachePartitionRegionImpl();
+        setCqResultsCacheInitialized();
-        this.destroysWhileCqResultsInProgress = new HashSet<>();
+        serverCQResultsCache = new ServerCQResultsCacheReplicateRegionImpl();
-        throw new CqException(String.format("Unable to create cq %s Error : %s",
-            new Object[] {cqName, cqe.getMessage()}));
+        throw new CqException(
+            String.format("Unable to create cq %s Error : %s", cqName, cqe.getMessage()));
+
+  @VisibleForTesting
-    if (this.cqResultKeys != null) {
-      synchronized (this.cqResultKeys) {
-        return Collections.synchronizedSet(new HashSet<>(this.cqResultKeys.keySet()));
-      }
-    } else {
-      return null;
-    }
+    return serverCQResultsCache.getKeys();
-  Query constructServerSideQuery() throws QueryException {
+  Query constructServerSideQuery() {
+
-    // Handle events that may have been deleted,
-    // but added by result caching.
-    if (this.cqResultKeys == null) {
-      logger.warn(
-          "The CQ Result key cache is Null. This should not happen as the call to isPartOfCqResult() is based on the condition cqResultsCacheInitialized.");
-      return false;
-    }
-
-    synchronized (this.cqResultKeys) {
-      if (this.destroysWhileCqResultsInProgress != null) {
-        // this.logger.fine("Removing keys from Destroy Cache For CQ :" +
-        // this.cqName + " Keys :" + this.destroysWhileCqResultsInProgress);
-        for (Object k : this.destroysWhileCqResultsInProgress) {
-          this.cqResultKeys.remove(k);
-        }
-        this.destroysWhileCqResultsInProgress = null;
-      }
-      return this.cqResultKeys.containsKey(key);
-    }
+    return serverCQResultsCache.contains(key);
-    if (!CqServiceProvider.MAINTAIN_KEYS) {
-      return;
-    }
-
-    if (this.cqResultKeys != null) {
-      synchronized (this.cqResultKeys) {
-        this.cqResultKeys.put(key, TOKEN);
-        if (!this.cqResultKeysInitialized) {
-          // This key could be coming after add, destroy.
-          // Remove this from destroy queue.
-          if (this.destroysWhileCqResultsInProgress != null) {
-            this.destroysWhileCqResultsInProgress.remove(key);
-          }
-        }
-      }
-    }
+    serverCQResultsCache.add(key);
-    if (!CqServiceProvider.MAINTAIN_KEYS) {
-      return;
-    }
-    if (this.cqResultKeys != null) {
-      synchronized (this.cqResultKeys) {
-        if (isTokenMode && this.cqResultKeys.get(key) != Token.DESTROYED) {
-          return;
-        }
-        this.cqResultKeys.remove(key);
-        if (!this.cqResultKeysInitialized) {
-          if (this.destroysWhileCqResultsInProgress != null) {
-            this.destroysWhileCqResultsInProgress.add(key);
-          }
-        }
-      }
-    }
+    serverCQResultsCache.remove(key, isTokenMode);
-    if (!CqServiceProvider.MAINTAIN_KEYS) {
-      return;
-    }
-
-    if (this.cqResultKeys != null) {
-      synchronized (this.cqResultKeys) {
-        this.cqResultKeys.clear();
-        this.cqResultKeysInitialized = false;
-      }
-    }
+    serverCQResultsCache.invalidate();
-    if (!CqServiceProvider.MAINTAIN_KEYS) {
-      return;
-    }
-
-    if (this.cqResultKeys != null) {
-      synchronized (this.cqResultKeys) {
-        this.cqResultKeys.put(key, Token.DESTROYED);
-        if (!this.cqResultKeysInitialized) {
-          // this.logger.fine("Adding key to Destroy Cache For CQ :" +
-          // this.cqName + " key :" + key);
-          if (this.destroysWhileCqResultsInProgress != null) {
-            this.destroysWhileCqResultsInProgress.add(key);
-          }
-        }
-      }
-    }
+    serverCQResultsCache.markAsDestroyed(key);
-    if (CqServiceProvider.MAINTAIN_KEYS) {
-      this.cqResultKeysInitialized = true;
-    }
+    serverCQResultsCache.setInitialized();
+  }
+
+  @Override
+  public boolean isCqResultsCacheInitialized() {
+    return serverCQResultsCache.isInitialized();
-    if (this.cqResultKeys == null) {
-      return 0;
-    }
-    synchronized (this.cqResultKeys) {
-      return this.cqResultKeys.size();
-    }
+    return serverCQResultsCache.size();
-    return !this.cqResultKeysInitialized || !this.isPartOfCqResult(key);
+    return serverCQResultsCache.isOldValueRequiredForQueryProcessing(key);
-      boolean isClosed = false;
-      if (this.cqResultKeys != null) {
-        synchronized (this.cqResultKeys) {
-          this.cqResultKeys.clear();
-        }
-      }
+      serverCQResultsCache.clear();
-  protected void cleanup() throws CqException {
+  protected void cleanup() {
-  public void stop() throws CqClosedException, CqException {
-    boolean isStopped = false;
+  public void stop() throws CqClosedException {
-  public void fromData(DataInput in) throws IOException, ClassNotFoundException {
+  public void fromData(DataInput in) throws IOException {
-  public <E> CqResults<E> executeWithInitialResults()
-      throws CqClosedException, RegionNotFoundException, CqException {
+  public <E> CqResults<E> executeWithInitialResults() throws CqClosedException {
-  public void execute() throws CqClosedException, RegionNotFoundException, CqException {
+  public void execute() throws CqClosedException {
-

MOV26 UPD40 INS31 INS31 INS31 UPD83 INS83 INS43 INS59 INS83 INS43 MOV29 INS78 MOV83 MOV74 MOV42 INS8 INS8 INS78 MOV44 INS8 INS8 MOV78 INS8 MOV29 MOV39 MOV42 MOV44 INS8 MOV78 INS83 INS39 INS42 INS8 MOV78 UPD39 UPD42 INS8 INS8 MOV78 MOV44 MOV78 UPD42 MOV42 INS42 INS14 UPD42 MOV42 UPD42 INS42 INS42 MOV41 MOV41 INS42 MOV21 MOV21 MOV21 MOV21 MOV21 INS41 MOV41 INS43 UPD66 UPD66 INS66 INS32 INS32 UPD42 MOV42 INS25 UPD42 INS42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 UPD42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 MOV42 MOV42 MOV21 MOV22 INS8 MOV8 MOV21 MOV21 INS42 INS42 MOV22 INS42 INS42 INS43 INS43 UPD42 MOV42 UPD42 MOV42 INS42 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL66 DEL66 DEL66 DEL65 DEL29 DEL43 DEL42 DEL43 DEL43 DEL74 DEL42 DEL59 DEL43 DEL42 DEL43 DEL74 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL9 DEL59 DEL23 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL52 DEL42 DEL22 DEL43 DEL74 DEL52 DEL52 DEL42 DEL22 DEL43 DEL74 DEL8 DEL25 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL42 DEL43 DEL74 DEL52 DEL42 DEL22 DEL42 DEL32 DEL14 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL8 DEL51 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL43 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL42 DEL45 DEL32 DEL21 DEL9 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL43 DEL42 DEL44 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL70 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL8 DEL25 DEL8 DEL51 DEL8 DEL52 DEL42 DEL22 DEL42 DEL40 DEL38 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL38 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL51 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL40 DEL38 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL40 DEL27 DEL27 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL38 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL51 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL40 DEL38 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL51 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL40 DEL52 DEL42 DEL22 DEL42 DEL40 DEL38 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL38 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL8 DEL25 DEL8 DEL51 DEL8 DEL25 DEL8 DEL31 DEL40 DEL52 DEL42 DEL22 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL34 DEL41 DEL8 DEL25 DEL52 DEL42 DEL22 DEL8 DEL51 DEL8 DEL52 DEL42 DEL22 DEL38 DEL52 DEL32 DEL38 DEL27 DEL39 DEL42 DEL9 DEL59 DEL60 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL8 DEL51 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43