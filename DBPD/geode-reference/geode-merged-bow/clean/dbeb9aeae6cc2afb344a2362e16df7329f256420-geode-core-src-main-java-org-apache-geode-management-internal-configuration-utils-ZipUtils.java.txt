Merge branch 'release/1.1.0'

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
- * Utilities class to zip/unzip folder
+ * Utilities class to zip/unzip directory
-  public static void zip(String sourceFolderPath , String targetFilePath) throws Exception {
-    File sourceFolder = new File(sourceFolderPath);
-    File targetFile = new File(targetFilePath);
-    
-    if (!sourceFolder.exists()) {
-      throw new Exception("Source folder does not exist");
-    }
-    
-    FileOutputStream fos = new FileOutputStream(targetFile);
-    ZipOutputStream zos = new ZipOutputStream(fos);
-    URI baseURI = sourceFolder.toURI();
-
-    Stack<File> fileStack = new Stack<File>();
-    fileStack.push(sourceFolder);
-
-    while (!fileStack.isEmpty()) {
-      File directory = fileStack.pop();
-
-      for (File child : directory.listFiles()) {
-        String name = baseURI.relativize(child.toURI()).getPath();
-
-        if (child.isDirectory()) {
-          fileStack.push(child);
-          zos.putNextEntry(new ZipEntry(name));
-        } else {
-          if (!name.endsWith("zip")) {
-            ZipEntry zipEntry = new ZipEntry(name);
-            zos.putNextEntry(zipEntry);
-            InputStream in = new FileInputStream(child);
-            IOUtils.copy(in, zos);
-            IOUtils.closeQuietly(in);
-          }
+  public static void zipDirectory(Path sourceDirectory, Path targetFile) throws IOException {
+    Path p = Files.createFile(targetFile);
+    try (ZipOutputStream zs = new ZipOutputStream(Files.newOutputStream(p))) {
+      Files.walk(sourceDirectory).filter(path -> !Files.isDirectory(path)).forEach(path -> {
+        ZipEntry zipEntry = new ZipEntry(sourceDirectory.relativize(path).toString());
+        try {
+          zs.putNextEntry(zipEntry);
+          zs.write(Files.readAllBytes(path));
+          zs.closeEntry();
+        } catch (Exception e) {
+          throw new RuntimeException("Unable to write zip file", e);
-      }
+      });
-    IOUtils.closeQuietly(zos);
+  public static void zipDirectory(String sourceDirectoryPath, String targetFilePath)
+      throws IOException {
+    Path sourceDirectory = Paths.get(sourceDirectoryPath);
+    Path targetFile = Paths.get(targetFilePath);
-  public static void unzip (String zipFilePath, String outputFolderPath) throws IOException {
+    zipDirectory(sourceDirectory, targetFile);
+  }
+
+  public static void unzip(String zipFilePath, String outputDirectoryPath) throws IOException {
-        String fileName = outputFolderPath + File.separator + zipEntry.getName();
+        String fileName = outputDirectoryPath + File.separator + zipEntry.getName();

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS31 MOV83 MOV83 MOV39 UPD42 MOV42 MOV44 INS44 INS43 INS8 INS83 INS83 INS39 INS42 INS44 MOV44 INS43 INS8 UPD66 UPD43 UPD42 INS43 INS42 UPD42 MOV42 MOV60 INS54 MOV43 INS42 INS42 MOV60 INS60 MOV21 UPD42 UPD42 UPD42 MOV42 UPD43 INS58 INS8 UPD43 INS43 INS59 UPD42 INS42 INS32 MOV43 INS59 INS21 UPD42 UPD42 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS42 INS42 INS42 UPD42 MOV42 MOV14 INS32 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV43 INS32 INS32 INS42 INS86 INS42 INS42 INS42 INS32 UPD42 MOV42 INS86 INS59 INS8 INS42 INS42 UPD42 MOV42 INS59 INS38 INS42 MOV60 INS54 UPD42 MOV42 MOV32 MOV43 INS8 INS12 UPD42 UPD42 UPD42 INS42 UPD42 INS14 MOV21 MOV21 INS21 INS44 INS8 MOV43 INS32 INS32 MOV43 INS42 INS53 MOV32 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 UPD42 MOV42 UPD42 MOV42 INS14 UPD42 UPD42 MOV42 INS42 INS42 INS42 UPD43 MOV43 INS45 UPD42 MOV42 UPD42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL42 DEL43 DEL42 DEL42 DEL32 DEL32 DEL42 DEL14 DEL42 DEL43 DEL42 DEL14 DEL43 DEL42 DEL43 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL59 DEL60 DEL42 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL38 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL8 DEL45 DEL32 DEL38 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL8 DEL61 DEL8 DEL31