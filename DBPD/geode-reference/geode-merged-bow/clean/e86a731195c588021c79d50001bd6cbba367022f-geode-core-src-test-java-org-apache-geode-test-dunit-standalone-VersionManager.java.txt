Merge branch 'release/1.3.0'

+import java.util.Optional;
+import java.util.function.BiConsumer;
+    final String installLocations = "geodeOldVersionInstalls.txt";
+    instance.findInstalls(installLocations);
+    // System.out
+    // .println("VersionManager has loaded the following classpaths:\n" + instance.classPaths);
-  protected static VersionManager getInstance(String classpathsFileName) {
+  protected static VersionManager getInstance(String classpathsFileName, String installFileName) {
+  private Map<String, String> installs = new HashMap();
+
+
+  public String getInstall(String version) {
+    return installs.get(version);
+  }
+
+    readVersionsFile(fileName, (version, path) -> {
+      Optional<String> parsedVersion = parseVersion(version);
+      if (parsedVersion.isPresent()) {
+        classPaths.put(parsedVersion.get(), path);
+        testVersions.add(parsedVersion.get());
+      }
+    });
+  }
+
+  private void findInstalls(String fileName) {
+    readVersionsFile(fileName, (version, install) -> {
+      Optional<String> parsedVersion = parseVersion(version);
+      if (parsedVersion.isPresent()) {
+        installs.put(parsedVersion.get(), install);
+      }
+    });
+  }
+
+  private Optional<String> parseVersion(String version) {
+    String parsedVersion = null;
+    if (version.startsWith("test") && version.length() >= "test".length()) {
+      if (version.equals("test")) {
+        parsedVersion = CURRENT_VERSION;
+      } else {
+        parsedVersion = version.substring("test".length());
+      }
+    }
+    return Optional.ofNullable(parsedVersion);
+  }
+
+  private void readVersionsFile(String fileName, BiConsumer<String, String> consumer) {
+    Properties props = readPropertiesFile(fileName);
+    props.forEach((k, v) -> {
+      consumer.accept(k.toString(), v.toString());
+    });
+  }
+
+  public Properties readPropertiesFile(String fileName) {
+    // this file is created by the gradle task createClasspathsPropertiesFile
-      return;
+      return props;
-      return;
+      return props;
-
-    for (Map.Entry<Object, Object> entry : props.entrySet()) {
-      String version = (String) entry.getKey();
-      if (version.startsWith("test") && version.length() >= "test".length()) {
-        if (version.equals("test")) {
-          version = CURRENT_VERSION;
-        } else {
-          version = version.substring("test".length());
-        }
-        classPaths.put(version, (String) entry.getValue());
-        testVersions.add(version);
-      }
-    }
+    return props;

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS44 INS83 INS74 INS59 INS83 INS43 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS74 INS42 INS44 MOV8 INS83 INS39 INS42 INS44 INS44 INS8 UPD83 INS43 INS42 INS60 INS21 INS43 INS42 INS43 INS43 INS43 INS42 INS14 INS42 MOV43 INS42 INS41 INS43 INS42 INS21 INS43 INS42 INS21 INS43 INS43 MOV43 INS42 INS60 INS41 INS43 INS42 INS74 INS42 INS60 INS21 INS42 INS41 INS83 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS43 INS32 INS42 INS32 INS42 INS32 INS42 INS42 MOV43 INS59 INS32 INS42 INS43 INS43 INS43 INS43 INS59 INS32 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS86 INS42 INS42 INS86 UPD42 MOV42 INS33 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS86 INS59 INS59 INS8 INS59 INS59 INS8 INS42 INS42 INS59 INS59 INS8 INS42 INS42 INS42 INS60 INS25 INS42 INS42 INS60 INS25 INS42 INS42 INS21 INS42 INS74 INS59 INS32 INS8 INS74 INS59 INS32 INS8 INS32 INS43 INS43 INS42 INS32 INS42 INS42 INS21 INS21 INS43 INS43 INS42 INS32 INS42 INS42 INS21 UPD42 UPD42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL11 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL39 DEL42 DEL40 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL70