GEODE-6534: Encapsulate LocalRegion entryUserAttributes

Make entryUserAttributes final and thread safe.

Lots of threads were checking for null and constructing it as either
ConcurrentHashMap or HashTable. Now it is a final ConcurrentHashMap.

Reduced visibility to private and added accessor.

-  Map entryUserAttributes;
+  private final Map<Object, Object> entryUserAttributes = new ConcurrentHashMap<>();
-      if (this.entryUserAttributes != null) {
-        this.entryUserAttributes.remove(key);
-      }
+      entryUserAttributes.remove(key);
-    if (this.entryUserAttributes != null) {
-      this.entryUserAttributes.remove(key);
-    }
+    entryUserAttributes.remove(key);
-      if (this.entryUserAttributes != null) {
-        this.entryUserAttributes.remove(key);
-      }
+      entryUserAttributes.remove(key);
+  @Override
+  public Map<Object, Object> getEntryUserAttributes() {
+    return entryUserAttributes;
+  }
+
-    if (this.entryUserAttributes != null) {
-      this.entryUserAttributes.remove(event.getKey());
-    }
+    entryUserAttributes.remove(event.getKey());
-    if (this.entryUserAttributes != null) {
-      this.entryUserAttributes.remove(key);
-    }
+    entryUserAttributes.remove(key);
-      Map userAttr = this.region.entryUserAttributes;
-      if (userAttr == null) {
-        return null;
-      }
-      return userAttr.get(getKey());
+      return region.getEntryUserAttributes().get(getKey());
-      LocalRegion lr = this.region;
-      if (lr.entryUserAttributes == null) {
-        lr.entryUserAttributes = new ConcurrentHashMap();
-      }
-      return lr.entryUserAttributes.put(getKey(), userAttribute);
+      return region.getEntryUserAttributes().put(getKey(), userAttribute);
-    Map userAttr = this.entryUserAttributes;
-    if (userAttr == null) {
-      return null;
-    }
-    return userAttr.get(entryKey);
+    return entryUserAttributes.get(entryKey);
-      Map userAttributes = LocalRegion.this.entryUserAttributes;
-      if (userAttributes == null) {
-        return null;
-      }
-      return userAttributes.get(basicGetEntry().getKey());
+      return entryUserAttributes.get(basicGetEntry().getKey());
-      if (LocalRegion.this.entryUserAttributes == null) {
-        LocalRegion.this.entryUserAttributes = new ConcurrentHashMap();
-      }
-      return LocalRegion.this.entryUserAttributes.put(basicGetEntry().getKey(), userAttribute);
+      return entryUserAttributes.put(basicGetEntry().getKey(), userAttribute);
-    if (this.entryUserAttributes != null) {
-      this.entryUserAttributes.clear();
-    }
+    entryUserAttributes.clear();

INS31 INS31 INS83 INS83 INS74 INS8 INS78 MOV83 INS74 INS42 INS8 MOV78 INS83 MOV43 INS42 MOV44 INS8 MOV43 INS43 INS43 MOV14 MOV21 INS42 MOV43 INS43 INS43 INS41 MOV21 MOV21 MOV78 MOV43 MOV78 MOV43 MOV41 INS8 INS8 MOV21 INS42 INS42 INS74 MOV8 MOV8 INS42 UPD42 MOV42 INS42 INS41 INS41 MOV21 MOV41 MOV41 MOV43 INS42 INS42 INS42 INS32 INS32 UPD42 INS42 INS32 MOV42 MOV32 INS32 MOV42 MOV32 MOV42 INS42 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25 DEL42 DEL52 DEL42 DEL22 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL40 DEL33 DEL27 DEL40 DEL7 DEL21 DEL8 DEL25 DEL40 DEL32 DEL41 DEL42 DEL43 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL8 DEL31 DEL42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL43 DEL42 DEL42 DEL52 DEL42 DEL22 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL8 DEL42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL42 DEL52 DEL42 DEL22 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL52 DEL42 DEL22 DEL52 DEL42 DEL22 DEL33 DEL27 DEL8 DEL25