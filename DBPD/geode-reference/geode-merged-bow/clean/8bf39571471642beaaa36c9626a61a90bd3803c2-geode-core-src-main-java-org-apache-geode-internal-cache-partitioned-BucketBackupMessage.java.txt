Added Spotless plugin to enforce formatting standards.
Added Google Java Style guide formatter templates, removed existing formatter templates.

Ran './gradlew clean build' for verification

This closes #268

- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
- * A message sent requesting that an evaluation of buckets be made to determine
- * if one or more needs to be backed-up in order to satisfy the redundantCopies
- * setting
+ * A message sent requesting that an evaluation of buckets be made to determine if one or more needs
+ * to be backed-up in order to satisfy the redundantCopies setting
-public final class BucketBackupMessage extends PartitionMessage
-  {
+public final class BucketBackupMessage extends PartitionMessage {
-  
+
+
-   * Sends a BucketBackupMessage requesting that another VM backup an existing
-   * bucket
+   * Sends a BucketBackupMessage requesting that another VM backup an existing bucket
-   * @param recipients
-   *          the member that the contains keys/value message is sent to
-   * @param r
-   *          the PartitionedRegion that contains the bucket
+   * @param recipients the member that the contains keys/value message is sent to
+   * @param r the PartitionedRegion that contains the bucket
-  public static void send(Set recipients, PartitionedRegion r, int bucketId)
-  {
-    Assert.assertTrue(recipients != null,
-        "BucketBackupMessage NULL sender list");
+  public static void send(Set recipients, PartitionedRegion r, int bucketId) {
+    Assert.assertTrue(recipients != null, "BucketBackupMessage NULL sender list");
-  
+
-   * This message may be sent to nodes before the PartitionedRegion is
-   * completely initialized due to the RegionAdvisor(s) knowing about the
-   * existance of a partitioned region at a very early part of the
-   * initialization
+   * This message may be sent to nodes before the PartitionedRegion is completely initialized due to
+   * the RegionAdvisor(s) knowing about the existance of a partitioned region at a very early part
+   * of the initialization
-  protected boolean operateOnPartitionedRegion(DistributionManager dm, 
-      PartitionedRegion pr, long startTime) throws CacheException {
+  protected boolean operateOnPartitionedRegion(DistributionManager dm, PartitionedRegion pr,
+      long startTime) throws CacheException {
-    // This can occur as bucket grab Op is done outside the 
+    // This can occur as bucket grab Op is done outside the
-    if(pr == null || !pr.isInitialized()) {
-    	return false;
+    if (pr == null || !pr.isInitialized()) {
+      return false;
-    
+
-    }
-    else {
+    } else {
-    pr.getPrStats().endPartitionMessagesProcessing(startTime); 
+    pr.getPrStats().endPartitionMessagesProcessing(startTime);
-  
+
-  public int getProcessorType()
-  {
+  public int getProcessorType() {
+
-  
+

UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 DEL66 DEL66 DEL66