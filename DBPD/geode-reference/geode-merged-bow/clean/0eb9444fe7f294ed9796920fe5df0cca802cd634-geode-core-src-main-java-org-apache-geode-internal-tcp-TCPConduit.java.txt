GEODE-6035 Increase backlog for peer-to-peer connection formation

I've made a sweep through the code to make TCP/IP backlog defaults
consistent.  All of them now default to 1280 but all are limited
by the operating system limit.  On Linux this is usually 128 and
is configured with the somaxconn setting.

The figure 1280 was recommended by Pivotal field engineers.

This also adds the following LinuxSystemStats:

    tcpExtSynCookiesRecv    The number of TCP/IP SYN cookies received due to a full server socket backlog.
                            If this is non-zero consider disabling SYN cookies because they form sub-optimal connections.
                            units: cookies received
    tcpExtSynCookiesSent    The number of TCP/IP SYN cookies sent due to a full server socket backlog.
                            If this is non-zero consider disabling SYN cookies because they form sub-optimal connections.
                            units: cookies sent
    tcpExtListenDrops       The number of TCP/IP connection requests that have been dropped due to a full backlog.
                            If this is large increase the OS SOMAXCONN setting and increase socket backlog settings.
                            units: requests
    tcpExtListenOverflows   The number of TCP/IP connection requests that could not be queued due to a small backlog.
                            These are either dropped (tcpExtListenDrops) or handled via cookies (tcpSynCookiesSent).
                            In either case you should consider increasing SOMAXCONN and increasing backlog settings.
                            units: requests
    soMaxConn               Maximum TCP/IP server socket connection request backlog
                            units: connection requests

-   * backlog is the "accept" backlog configuration parameter all conduits server socket
+   * BACKLOG is the "accept" backlog configuration parameter for the conduits server socket.
+   * In most operating systems this is limited to 128 by default and you must change
+   * the OS setting somaxconn to go beyond that limit. Note that setting this too high
+   * can have ramifications when disconnecting from the distributed system if a thread
+   * is trying to connect to another member that is not accepting connections quickly
+   * enough. Setting it too low can also have adverse effects because backlog overflows
+   * aren't handled well by most tcp/ip implementations, causing connect timeouts instead
+   * of expected ServerRefusedConnection exceptions.
+   * <p>
+   * Normally the backlog isn't that important because if it's full of connection requests
+   * a SYN "cookie" mechanism is used to bypass the backlog queue. If this is turned off
+   * though connection requests are dropped when the queue is full.
-    // fix for bug 37730
-    BACKLOG = Integer.getInteger("p2p.backlog", HANDSHAKE_POOL_SIZE + 1).intValue();
+    // note: bug 37730 concerned this defaulting to 50
+    BACKLOG = Integer.getInteger("p2p.backlog", 1280).intValue();
-    int p = this.port;
-    int b = BACKLOG;
+    int serverPort = this.port;
+    int connectionRequestBacklog = BACKLOG;
-        if (p <= 0) {
+        if (serverPort <= 0) {
-          socket = socketCreator.createServerSocketUsingPortRange(bindAddress, b, isBindAddress,
+          socket = socketCreator.createServerSocketUsingPortRange(bindAddress,
+              connectionRequestBacklog, isBindAddress,
-              new InetSocketAddress(isBindAddress ? bindAddress : null, p);
-          socket.bind(inetSocketAddress, b);
+              new InetSocketAddress(isBindAddress ? bindAddress : null, serverPort);
+          socket.bind(inetSocketAddress, connectionRequestBacklog);
-          if (p <= 0) {
-            socket = socketCreator.createServerSocketUsingPortRange(bindAddress, b, isBindAddress,
+          if (serverPort <= 0) {
+            socket = socketCreator.createServerSocketUsingPortRange(bindAddress,
+                connectionRequestBacklog, isBindAddress,
-            socket = socketCreator.createServerSocket(p, b, isBindAddress ? bindAddress : null,
+            socket = socketCreator.createServerSocket(serverPort, connectionRequestBacklog,
+                isBindAddress ? bindAddress : null,
-              new Object[] {Integer.valueOf(p), bindAddress}),
+              new Object[] {Integer.valueOf(serverPort), bindAddress}),
-          othersock.setSoTimeout(0);
-          socketCreator.handshakeIfSocketIsSSL(othersock, idleConnectionTimeout);
+      othersock.setSoTimeout(0);
+      socketCreator.handshakeIfSocketIsSSL(othersock, idleConnectionTimeout);

UPD66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS66 UPD42 UPD42 MOV21 MOV21 INS34 UPD42 MOV43 UPD42 UPD42 UPD42 MOV43 UPD42 UPD42 UPD42 UPD42 UPD42 DEL42 DEL34 DEL27