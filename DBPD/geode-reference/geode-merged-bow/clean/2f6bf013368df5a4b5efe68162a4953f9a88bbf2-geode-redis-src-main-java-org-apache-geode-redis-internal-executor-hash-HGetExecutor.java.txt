GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions (#4745)

* GEODE-7828: Convert backing store for Redis Hashes and Sets to single regions

This PR builds on the work originally submitted by Greg Green in
https://github.com/apache/geode/pull/404. Also acknowledgements to Galen
O'Sullivan for addressing locking issues in that PR.

This commit changes the storage model of Redis hashes and sets from one
region per each Redis key to a single hash region and single set region.
The Redis key is now also the region key and the data is stored in a Map
and Set respectively in the region. Currently, the backing values do not
implement Delta changes, however this will be a future optimization.

This also fixes the inability of Redis keys to contain other characters
commonly used, such as colons (':').

- Add `RedisLockService` which manages a lock per key within a single
  JVM. Locks are held in a WeakHasMap to allow for automatic cleanup
  (prior PR work, using a pure ConcurrentHashMap, ended up leaking
  memory since there is no straight-forward way to clean up unused
  keys/locks).
- Add new tests including concurrency tests for hashes and sets

Co-authored-by: Greg Green <ggreen@pivotal.io>
Co-authored-by: Ray Ingles <ringles@pivotal.io>
Co-authored-by: Sarah Abbey <sabbey@pivotal.io>
Co-authored-by: John Hutchison <jhutchison@pivotal.io>
Co-authored-by: Murtuza Boxwala <mboxwala@pivotal.io>
Co-authored-by: Prasath Durairaj <prasathd@pivotal.io>
Co-authored-by: Jens Deppe <jdeppe@pivotal.io>

+import java.util.Map;
-import org.apache.geode.cache.Region;
+import org.apache.geode.redis.internal.CoderException;
+import org.apache.geode.redis.internal.RedisConstants;
-import org.apache.geode.redis.internal.RedisDataType;
+/**
+ * <pre>
+ *
+ * Implements the Redis HGET command to returns the value associated with field in the hash stored
+ * at key.
+ *
+ * Examples:
+ *
+ * redis> HSET myhash field1 "foo" (integer) 1 redis> HGET myhash field1 "foo" redis> HGET myhash
+ * field2
+ *
+ * <pre>
+ */
+    byte[] byteField = commandElems.get(FIELD_INDEX);
+    ByteArrayWrapper field = new ByteArrayWrapper(byteField);
+
-    checkDataType(key, RedisDataType.REDIS_HASH, context);
-    Region<ByteArrayWrapper, ByteArrayWrapper> keyRegion = getRegion(context, key);
+    Map<ByteArrayWrapper, ByteArrayWrapper> entry = getMap(context, key);
-    if (keyRegion == null) {
+    if (entry == null) {
-    byte[] byteField = commandElems.get(FIELD_INDEX);
-    ByteArrayWrapper field = new ByteArrayWrapper(byteField);
-    respondBulkStrings(command, context, keyRegion.get(field));
+    ByteArrayWrapper valueWrapper = entry.get(field);
+    try {
+      if (valueWrapper != null) {
+        command.setResponse(
+            Coder.getBulkStringResponse(context.getByteBufAllocator(), valueWrapper.toBytes()));
+      } else {
+        command.setResponse(Coder.getNilResponse(context.getByteBufAllocator()));
+      }
+    } catch (CoderException e) {
+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(),
+          RedisConstants.SERVER_ERROR_MESSAGE));
+    }
-

MOV26 MOV26 INS26 INS40 UPD40 UPD40 INS29 INS65 MOV60 MOV60 INS66 INS66 INS66 INS66 INS66 INS66 INS66 INS60 INS54 UPD74 INS43 INS59 INS8 INS12 UPD43 UPD42 UPD42 INS42 INS42 INS32 INS25 INS44 INS8 UPD42 UPD42 INS42 INS42 INS42 INS27 INS8 INS8 INS43 INS42 INS21 INS42 INS33 MOV21 MOV21 INS42 INS32 INS42 INS42 INS32 UPD42 UPD42 INS32 UPD42 INS42 INS42 INS32 INS40 INS42 INS42 INS32 INS32 UPD42 UPD42 INS32 INS42 INS42 MOV42 INS42 INS42 INS42 UPD42 MOV42 INS42 DEL40 DEL42