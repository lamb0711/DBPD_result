Revert "GEODE-8333: Fix PUBSUB hang (#5349)" (#5415)

This reverts commit 067194e8f82414b6103c4335beb6567947edcfbc.

The fix for GEODE-8333 had a bug in which responses to the client could be out of order.
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.LinkedBlockingQueue;
+import io.netty.channel.ChannelFutureListener;
+import io.netty.channel.EventLoopGroup;
+  private final EventLoopGroup subscriberGroup;
-  private final ExecutorService backgroundExecutor;
-  private final LinkedBlockingQueue<Command> commandQueue = new LinkedBlockingQueue<>();
+      EventLoopGroup subscriberGroup,
-      ExecutorService backgroundExecutor,
+    this.subscriberGroup = subscriberGroup;
-    this.backgroundExecutor = backgroundExecutor;
+  public ChannelFuture writeToChannel(ByteBuf message) {
+    return channel.writeAndFlush(message, channel.newPromise());
+  }
+
-    command.setChannelHandlerContext(ctx);
-    synchronized (commandQueue) {
-      if (!commandQueue.isEmpty()) {
-        commandQueue.offer(command);
-        return;
+    try {
+      if (logger.isDebugEnabled()) {
+        logger.debug("Executing Redis command: {}", command);
-      if (command.getCommandType().isAsync()) {
-        commandQueue.offer(command);
-        startAsyncCommandExecution(command);
-        return;
-      }
-      executeCommand(command);
+
+      executeCommand(ctx, command);
+    } catch (Exception e) {
+      logger.warn("Execution of Redis command {} failed: {}", command, e);
+      throw e;
+
-  private void startAsyncCommandExecution(Command command) {
-    if (logger.isDebugEnabled()) {
-      logger.debug("Starting execution of async Redis command: {}", command);
-    }
-    final long start = redisStats.startCommand(command.getCommandType());
-    command.setAsyncStartTime(start);
-    command.execute(this);
-  }
-
-  public void endAsyncCommandExecution(Command command, RedisResponse response) {
-    synchronized (commandQueue) {
-      Command head = takeFromCommandQueue();
-      if (head != command) {
-        throw new IllegalStateException(
-            "expected " + command + " but found " + head + " in the queue");
-      }
-      try {
-        writeToChannel(response);
-      } finally {
-        redisStats.endCommand(command.getCommandType(), command.getAsyncStartTime());
-      }
-      drainCommandQueue();
-    }
-  }
-
-  public void endAsyncCommandExecution(Command command, Throwable exception) {
-    synchronized (commandQueue) {
-      Command head = takeFromCommandQueue();
-      if (head != command) {
-        throw new IllegalStateException(
-            "expected " + command + " but found " + head + " in the queue");
-      }
-      try {
-        exceptionCaught(command.getChannelHandlerContext(), exception);
-      } finally {
-        redisStats.endCommand(command.getCommandType(), command.getAsyncStartTime());
-      }
-      drainCommandQueue();
-    }
-  }
-
-  private Command takeFromCommandQueue() {
-    try {
-      return commandQueue.take();
-    } catch (InterruptedException e) {
-      Thread.interrupted();
-      throw new IllegalStateException("unexpected interrupt");
-    }
-  }
-
-  /**
-   * execute all commands in the queue until an async one is found.
-   * If an async one is found start it.
-   */
-  private void drainCommandQueue() {
-    Command command;
-    while ((command = commandQueue.peek()) != null) {
-      if (command.getCommandType().isAsync()) {
-        startAsyncCommandExecution(command);
-        return;
-      } else {
-        takeFromCommandQueue();
-        try {
-          executeCommand(command);
-        } catch (Throwable ex) {
-          exceptionCaught(command.getChannelHandlerContext(), ex);
-        }
-      }
-    }
-  }
-
-  private void executeCommand(Command command) {
+  private void executeCommand(ChannelHandlerContext ctx, Command command) {
+
+    if (!isAuthenticated()) {
+      response = handleUnAuthenticatedCommand(command);
+      writeToChannel(response);
+      return;
+    }
+
+    if (command.isUnsupported() && !allowUnsupportedCommands()) {
+      writeToChannel(
+          RedisResponse.error(command.getCommandType() + RedisConstants.ERROR_UNSUPPORTED_COMMAND));
+      return;
+    }
+
+    if (command.isUnimplemented()) {
+      logger.info("Failed " + command.getCommandType() + " because it is not implemented.");
+      writeToChannel(RedisResponse.error(command.getCommandType() + " is not implemented."));
+      return;
+    }
+
+    final long start = redisStats.startCommand(command.getCommandType());
-      if (logger.isDebugEnabled()) {
-        logger.debug("Executing Redis command: {}", command);
-      }
+      response = command.execute(this);
+      logResponse(response);
+      writeToChannel(response);
+    } finally {
+      redisStats.endCommand(command.getCommandType(), start);
+    }
-      if (!isAuthenticated()) {
-        response = handleUnAuthenticatedCommand(command);
-        writeToChannel(response);
-        return;
-      }
-
-      if (command.isUnsupported() && !allowUnsupportedCommands()) {
-        writeToChannel(
-            RedisResponse
-                .error(command.getCommandType() + RedisConstants.ERROR_UNSUPPORTED_COMMAND));
-        return;
-      }
-
-      if (command.isUnimplemented()) {
-        logger.info("Failed " + command.getCommandType() + " because it is not implemented.");
-        writeToChannel(RedisResponse.error(command.getCommandType() + " is not implemented."));
-        return;
-      }
-
-      final long start = redisStats.startCommand(command.getCommandType());
-      try {
-        response = command.execute(this);
-        if (response == null) {
-          return;
-        }
-        logResponse(response);
-        writeToChannel(response);
-      } finally {
-        redisStats.endCommand(command.getCommandType(), start);
-      }
-
-      if (command.isOfType(RedisCommandType.QUIT)) {
-        channelInactive(command.getChannelHandlerContext());
-      }
-    } catch (Exception e) {
-      logger.warn("Execution of Redis command {} failed: {}", command, e);
-      throw e;
+    if (command.isOfType(RedisCommandType.QUIT)) {
+      channelInactive(ctx);
+  public EventLoopGroup getSubscriberGroup() {
+    return subscriberGroup;
+  }
+
+  public void changeChannelEventLoopGroup(EventLoopGroup newGroup) {
+    if (newGroup.equals(channel.eventLoop())) {
+      // already registered with newGroup
+      return;
+    }
+    channel.deregister().addListener((ChannelFutureListener) future -> {
+      newGroup.register(channel).sync();
+    });
+  }
+
-  public ExecutorService getBackgroundExecutor() {
-    return backgroundExecutor;
-  }
+

MOV26 MOV26 MOV23 MOV31 MOV31 MOV31 MOV31 UPD40 UPD40 MOV44 UPD43 MOV21 INS43 INS42 INS8 MOV29 MOV78 INS42 MOV44 MOV44 MOV43 INS8 INS44 MOV8 UPD83 UPD43 UPD42 INS8 UPD83 UPD42 INS44 INS8 UPD42 UPD42 UPD43 UPD42 UPD42 MOV42 UPD43 UPD42 INS41 MOV60 MOV54 INS43 INS42 MOV60 UPD42 MOV41 INS43 INS42 INS25 INS21 UPD42 UPD42 INS32 MOV12 INS42 INS42 UPD42 MOV42 INS32 MOV8 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 MOV25 INS42 UPD42 MOV42 MOV32 INS32 UPD42 MOV42 INS11 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS43 INS86 UPD42 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 INS59 INS8 INS42 MOV21 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL23 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL32 DEL32 DEL21 DEL8 DEL54 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL42 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL41 DEL8 DEL25 DEL42 DEL42 DEL32 DEL21 DEL8 DEL51 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL52 DEL32 DEL21 DEL8 DEL31 DEL42 DEL33 DEL27 DEL25 DEL42 DEL32 DEL54 DEL8 DEL42 DEL42 DEL32 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL66 DEL66 DEL65 DEL29 DEL32 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL42 DEL32 DEL32 DEL21 DEL41 DEL8 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL8 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL8 DEL25 DEL8 DEL61 DEL8 DEL83 DEL42 DEL43 DEL42 DEL42 DEL41 DEL8 DEL31