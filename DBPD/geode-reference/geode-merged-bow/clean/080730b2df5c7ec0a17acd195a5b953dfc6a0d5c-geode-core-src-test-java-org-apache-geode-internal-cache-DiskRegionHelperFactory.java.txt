GEODE-3801: Use hardlinks for backup oplog files (#963)

* Oplog files that are backed up are read-only. For this reason,
  they can be transfered to the backup location through hard links,
  instead of copying the file. This change improves speed of backups.
  If the creation of a hard link fails, we revert to the existing copy
  behavior.
* During backups, the copying of the oplog's krf file was being done while
  that file could still be in the process of writing. This change ensures
  that if a krf is to be written, that it is finished and included in the
  backup
* cleanup existing oplog tests

-  public static Region getRegion(Cache cache, DiskRegionProperties diskProps, Scope regionScope) {
-    Region region = null;
+  private static Region<Object, Object> getRegion(Cache cache, DiskRegionProperties diskProps,
+      Scope regionScope) {
-    // Properties props = new Properties();
+    Region<Object, Object> region = null;
-  public static Region getSyncPersistOnlyRegion(Cache cache,
+  public static Region<Object, Object> getSyncPersistOnlyRegion(Cache cache,
-  public static Region getAsyncPersistOnlyRegion(Cache cache,
+  public static Region<Object, Object> getAsyncPersistOnlyRegion(Cache cache,
-  public static Region getSyncOverFlowOnlyRegion(Cache cache,
+  public static Region<Object, Object> getSyncOverFlowOnlyRegion(Cache cache,
-  public static Region getAsyncOverFlowOnlyRegion(Cache cache,
+  public static Region<Object, Object> getAsyncOverFlowOnlyRegion(Cache cache,
-  public static Region getSyncOverFlowAndPersistRegion(Cache cache,
+  public static Region<Object, Object> getSyncOverFlowAndPersistRegion(Cache cache,
-  public static Region getAsyncOverFlowAndPersistRegion(Cache cache,
+  public static Region<Object, Object> getAsyncOverFlowAndPersistRegion(Cache cache,
-  public static Region getSyncHeapLruAndPersistRegion(Cache cache,
+  public static Region<Object, Object> getSyncHeapLruAndPersistRegion(Cache cache,
-
-  public static Region getAsyncHeapLruAndPersistRegion(Cache cache,
-      DiskRegionProperties diskRegionProperties) {
-    if (diskRegionProperties == null) {
-      diskRegionProperties = new DiskRegionProperties();
-    }
-    diskRegionProperties.setPersistBackup(true);
-    diskRegionProperties.setSynchronous(false);
-    diskRegionProperties.setHeapEviction(true);
-    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
-  }
-
-  public static Region getSyncPersistOnlyRegionInfiniteOplog(Cache cache,
-      DiskRegionProperties diskRegionProperties, String regionName) {
-    if (diskRegionProperties == null) {
-      diskRegionProperties = new DiskRegionProperties();
-    }
-    diskRegionProperties.setMaxOplogSize(0);
-    diskRegionProperties.setRolling(false);
-    diskRegionProperties.setPersistBackup(true);
-    diskRegionProperties.setSynchronous(true);
-    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
-
-  }
-
-  public static Region getAsyncPersistOnlyRegionInfiniteOplog(Cache cache,
-      DiskRegionProperties diskRegionProperties) {
-    if (diskRegionProperties == null) {
-      diskRegionProperties = new DiskRegionProperties();
-    }
-    diskRegionProperties.setMaxOplogSize(0);
-    diskRegionProperties.setRolling(false);
-    diskRegionProperties.setPersistBackup(true);
-    diskRegionProperties.setSynchronous(false);
-    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
-  }
-
-  public static Region getSyncOverFlowOnlyRegionInfiniteOplog(Cache cache,
-      DiskRegionProperties diskRegionProperties) {
-    if (diskRegionProperties == null) {
-      diskRegionProperties = new DiskRegionProperties();
-    }
-    diskRegionProperties.setMaxOplogSize(0);
-    diskRegionProperties.setRolling(false);
-    diskRegionProperties.setPersistBackup(false);
-    diskRegionProperties.setSynchronous(true);
-    diskRegionProperties.setOverflow(true);
-    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
-  }
-
-  public static Region getAsyncOverFlowOnlyRegionInfiniteOplog(Cache cache,
-      DiskRegionProperties diskRegionProperties) {
-    if (diskRegionProperties == null) {
-      diskRegionProperties = new DiskRegionProperties();
-    }
-    diskRegionProperties.setMaxOplogSize(0);
-    diskRegionProperties.setRolling(false);
-    diskRegionProperties.setPersistBackup(false);
-    diskRegionProperties.setSynchronous(false);
-    diskRegionProperties.setOverflow(true);
-    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
-  }
-
-  public static Region getSyncOverFlowAndPersistRegionInfiniteOplog(Cache cache,
-      DiskRegionProperties diskRegionProperties) {
-    if (diskRegionProperties == null) {
-      diskRegionProperties = new DiskRegionProperties();
-    }
-    diskRegionProperties.setMaxOplogSize(0);
-    diskRegionProperties.setRolling(false);
-    diskRegionProperties.setPersistBackup(true);
-    diskRegionProperties.setSynchronous(true);
-    diskRegionProperties.setOverflow(true);
-    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
-  }
-
-  public static Region getAsyncOverFlowAndPersistRegionInfiniteOplog(Cache cache,
-      DiskRegionProperties diskRegionProperties) {
-    if (diskRegionProperties == null) {
-      diskRegionProperties = new DiskRegionProperties();
-    }
-    diskRegionProperties.setMaxOplogSize(0);
-    diskRegionProperties.setRolling(false);
-    diskRegionProperties.setPersistBackup(true);
-    diskRegionProperties.setSynchronous(false);
-    diskRegionProperties.setOverflow(true);
-    return getRegion(cache, diskRegionProperties, Scope.LOCAL);
-  }
-

UPD83 INS74 MOV60 INS74 INS74 INS74 INS74 INS74 INS74 INS74 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 MOV43 INS43 INS43 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 MOV42 INS42 INS42 MOV42 INS42 INS42 INS42 INS42 MOV43 INS43 INS43 INS42 INS42 DEL43 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL9 DEL32 DEL21 DEL42 DEL42 DEL42 DEL40 DEL32 DEL41 DEL8 DEL31