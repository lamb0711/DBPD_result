Merge branch 'release/1.3.0'

-   * log writer, or null if there is no distributed system available
-   */
-  // private LogWriterI18n logger = InternalDistributedSystem.getLoggerI18n();
-
-  /**
-    this.localGemFireMBean = new ConcurrentHashMap<ObjectName, Object>();
+    this.localGemFireMBean = new ConcurrentHashMap<>();
-   * @return modifed ObjectName
+   * @return modified ObjectName
-    } catch (InstanceAlreadyExistsException e) {
-      throw new ManagementException(e);
-    } catch (MBeanRegistrationException e) {
-      throw new ManagementException(e);
-    } catch (NotCompliantMBeanException e) {
-      throw new ManagementException(e);
-    } catch (MalformedObjectNameException e) {
-      throw new ManagementException(e);
-    } catch (NullPointerException e) {
+    } catch (InstanceAlreadyExistsException | NullPointerException | MalformedObjectNameException
+        | NotCompliantMBeanException | MBeanRegistrationException e) {
-      for (int i = 0; i < intfTyps.length; i++) {
-        Class intfTyp = (Class) intfTyps[i];
+      for (Type intfTyp1 : intfTyps) {
+        Class intfTyp = (Class) intfTyp1;
-      Class supreClassTyp = (Class) cls.getGenericSuperclass();
-      if (supreClassTyp != null && supreClassTyp.equals(NotificationBroadcasterSupport.class)) {
+      Class superClassType = (Class) cls.getGenericSuperclass();
+      if (superClassType != null && superClassType.equals(NotificationBroadcasterSupport.class)) {
-    } catch (InstanceNotFoundException e) {
-      throw new ManagementException(e);
-    } catch (ClassNotFoundException e) {
+    } catch (InstanceNotFoundException | ClassNotFoundException e) {
-    } catch (InstanceAlreadyExistsException e) {
-      throw new ManagementException(e);
-    } catch (MBeanRegistrationException e) {
-      throw new ManagementException(e);
-    } catch (NotCompliantMBeanException e) {
-      throw new ManagementException(e);
-    } catch (NullPointerException e) {
+    } catch (InstanceAlreadyExistsException | NullPointerException | NotCompliantMBeanException
+        | MBeanRegistrationException e) {
-    } catch (NullPointerException e) {
-      throw new ManagementException(e);
-    } catch (InstanceNotFoundException e) {
-      throw new ManagementException(e);
-    } catch (MBeanRegistrationException e) {
+    } catch (NullPointerException | MBeanRegistrationException | InstanceNotFoundException e) {
-    } catch (MalformedObjectNameException e) {
-      throw new ManagementException(e);
-    } catch (NullPointerException e) {
+    } catch (MalformedObjectNameException | NullPointerException e) {
-    if (value.contains(":")) {
-      return true;
-    }
-    if (value.contains("@")) {
-      return true;
-    }
-    if (value.contains("-")) {
-      return true;
-    }
-    if (value.contains("#")) {
-      return true;
-    }
-    if (value.contains("+")) {
-      return true;
-    }
-    if (value.contains("?")) {
-      return true;
-    }
-    return false;
+    return value.contains(":") || value.contains("@") || value.contains("-") || value.contains("#")
+        || value.contains("+") || value.contains("?");
-    if (len < 2 || value.charAt(0) != '"' || value.charAt(len - 1) != '"') {
-      return false;
-    } else {
-      return true;
-    }
+    return len >= 2 && value.charAt(0) == '"' && value.charAt(len - 1) == '"';
-    ObjectName objName = getAsycnEventQueueMBeanName(distMember, queueId);
+    ObjectName objName = getAsyncEventQueueMBeanName(distMember, queueId);
-    } catch (MalformedObjectNameException e) {
-      throw new ManagementException(e);
-    } catch (NullPointerException e) {
+    } catch (MalformedObjectNameException | NullPointerException e) {
-    return getObjectName((MessageFormat.format(OBJECTNAME__MEMBER_MXBEAN,
-        new Object[] {getMemberNameOrId(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__MEMBER_MXBEAN, getMemberNameOrId(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__MEMBER_MXBEAN,
-        new Object[] {makeCompliantName(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__MEMBER_MXBEAN, makeCompliantName(member))));
-        new Object[] {makeCompliantRegionPath(regionPath), getMemberNameOrId(member)})));
+        makeCompliantRegionPath(regionPath), getMemberNameOrId(member))));
-        new Object[] {makeCompliantRegionPath(regionPath), makeCompliantName(member)})));
+        makeCompliantRegionPath(regionPath), makeCompliantName(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__REGION_MXBEAN,
-        new Object[] {makeCompliantRegionPath(regionPath),
-            memberMBeanName.getKeyProperty(ManagementConstants.OBJECTNAME_MEMBER_APPENDER)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__REGION_MXBEAN, makeCompliantRegionPath(regionPath),
+            memberMBeanName.getKeyProperty(ManagementConstants.OBJECTNAME_MEMBER_APPENDER))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__DISKSTORE_MXBEAN,
-        new Object[] {diskName, getMemberNameOrId(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__DISKSTORE_MXBEAN, diskName, getMemberNameOrId(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__DISKSTORE_MXBEAN,
-        new Object[] {diskName, makeCompliantName(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__DISKSTORE_MXBEAN, diskName, makeCompliantName(member))));
-        new Object[] {String.valueOf(serverPort), getMemberNameOrId(member)})));
+        String.valueOf(serverPort), getMemberNameOrId(member))));
-        new Object[] {String.valueOf(serverPort), makeCompliantName(member)})));
+        String.valueOf(serverPort), makeCompliantName(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__LOCKSERVICE_MXBEAN,
-        new Object[] {lockServiceName, getMemberNameOrId(member)})));
+    return getObjectName((MessageFormat.format(OBJECTNAME__LOCKSERVICE_MXBEAN, lockServiceName,
+        getMemberNameOrId(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__LOCKSERVICE_MXBEAN,
-        new Object[] {lockServiceName, makeCompliantName(member)})));
+    return getObjectName((MessageFormat.format(OBJECTNAME__LOCKSERVICE_MXBEAN, lockServiceName,
+        makeCompliantName(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYRECEIVER_MXBEAN,
-        new Object[] {getMemberNameOrId(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__GATEWAYRECEIVER_MXBEAN, getMemberNameOrId(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYRECEIVER_MXBEAN,
-        new Object[] {makeCompliantName(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__GATEWAYRECEIVER_MXBEAN, makeCompliantName(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYSENDER_MXBEAN,
-        new Object[] {id, getMemberNameOrId(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__GATEWAYSENDER_MXBEAN, id, getMemberNameOrId(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__GATEWAYSENDER_MXBEAN,
-        new Object[] {id, makeCompliantName(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__GATEWAYSENDER_MXBEAN, id, makeCompliantName(member))));
-  public static ObjectName getAsycnEventQueueMBeanName(DistributedMember member, String queueId) {
-    return getObjectName((MessageFormat.format(OBJECTNAME__ASYNCEVENTQUEUE_MXBEAN,
-        new Object[] {queueId, getMemberNameOrId(member)})));
+  public static ObjectName getAsyncEventQueueMBeanName(DistributedMember member, String queueId) {
+    return getObjectName((MessageFormat.format(OBJECTNAME__ASYNCEVENTQUEUE_MXBEAN, queueId,
+        getMemberNameOrId(member))));
-  public static ObjectName getAsycnEventQueueMBeanName(String member, String queueId) {
-    return getObjectName((MessageFormat.format(OBJECTNAME__ASYNCEVENTQUEUE_MXBEAN,
-        new Object[] {queueId, makeCompliantName(member)})));
+  public static ObjectName getAsyncEventQueueMBeanName(String member, String queueId) {
+    return getObjectName((MessageFormat.format(OBJECTNAME__ASYNCEVENTQUEUE_MXBEAN, queueId,
+        makeCompliantName(member))));
-        new Object[] {makeCompliantRegionPath(regionPath)})));
+        makeCompliantRegionPath(regionPath))));
-    return getObjectName(
-        (MessageFormat.format(OBJECTNAME__DISTRIBUTEDREGION_MXBEAN, new Object[] {regionPath})));
+    return getObjectName((MessageFormat.format(OBJECTNAME__DISTRIBUTEDREGION_MXBEAN, regionPath)));
-    return getObjectName((MessageFormat.format(OBJECTNAME__DISTRIBUTEDLOCKSERVICE_MXBEAN,
-        new Object[] {lockService})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__DISTRIBUTEDLOCKSERVICE_MXBEAN, lockService)));
-    return getObjectName((MessageFormat.format(OBJECTNAME__MANAGER_MXBEAN, new Object[] {member})));
+    return getObjectName((MessageFormat.format(OBJECTNAME__MANAGER_MXBEAN, member)));
-    return getObjectName((MessageFormat.format(OBJECTNAME__LOCATOR_MXBEAN,
-        new Object[] {getMemberNameOrId(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__LOCATOR_MXBEAN, getMemberNameOrId(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__LOCATOR_MXBEAN,
-        new Object[] {makeCompliantName(member)})));
+    return getObjectName(
+        (MessageFormat.format(OBJECTNAME__LOCATOR_MXBEAN, makeCompliantName(member))));
-    return getObjectName((MessageFormat.format(OBJECTNAME__CACHESERVICE_MXBEAN,
-        new Object[] {cacheServiceId, getMemberNameOrId(member)})));
+    return getObjectName((MessageFormat.format(OBJECTNAME__CACHESERVICE_MXBEAN, cacheServiceId,
+        getMemberNameOrId(member))));
-    sb.append("<v" + iMember.getVmViewId() + ">"); // View ID will be 0 for
-    // Loner, but in that case no
-    // federation as well
+    // View ID will be 0 for Loner, but in that case no federation as well
+    sb.append("<v").append(iMember.getVmViewId()).append(">");
-    return makeCompliantName(sb.toString().toLowerCase());// Lower case to
-    // handle IPv6
+    // Lower case to handle IPv6
+    return makeCompliantName(sb.toString().toLowerCase());
+
-    } catch (MalformedObjectNameException e) {
-      return false;
-    } catch (NullPointerException e) {
-      return false;
-    } catch (AttributeNotFoundException e) {
-      return false;
-    } catch (InstanceNotFoundException e) {
-      return false;
-    } catch (MBeanException e) {
-      return false;
-    } catch (ReflectionException e) {
+    } catch (MalformedObjectNameException | ReflectionException | MBeanException
+        | InstanceNotFoundException | AttributeNotFoundException | NullPointerException e) {
-
-  public static int VALUE_NOT_AVAILABLE = -1;
-

MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 MOV44 MOV43 MOV44 MOV44 MOV43 MOV44 MOV44 MOV43 MOV44 MOV44 MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 MOV44 MOV43 MOV44 MOV44 MOV43 MOV44 MOV43 MOV44 MOV43 MOV44 MOV44 MOV43 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV43 UPD42 MOV44 MOV44 MOV43 MOV43 MOV44 MOV43 MOV44 MOV41 MOV41 UPD66 MOV12 MOV12 INS27 UPD27 MOV27 INS70 INS44 MOV8 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 UPD27 UPD27 INS32 INS42 INS45 MOV8 UPD74 INS84 INS44 INS42 MOV8 INS84 INS84 INS42 INS84 INS84 UPD27 UPD27 UPD42 INS84 INS32 INS42 MOV32 INS84 MOV43 MOV43 MOV43 MOV43 MOV43 INS43 INS42 UPD42 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 MOV32 INS42 MOV32 INS42 MOV32 MOV32 MOV32 MOV32 MOV32 INS42 MOV32 INS42 MOV32 MOV32 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 INS42 MOV32 MOV32 INS42 INS42 INS42 MOV32 MOV32 INS42 MOV32 MOV42 MOV42 INS45 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 INS42 MOV43 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 INS42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL42 DEL2 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL24 DEL42 DEL44 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL43 DEL42 DEL14 DEL53 DEL8 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL9 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL25 DEL9 DEL41 DEL9 DEL8 DEL9 DEL41 DEL8 DEL25 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL4 DEL3 DEL42 DEL43 DEL85 DEL5 DEL42 DEL4 DEL3 DEL45 DEL45 DEL27 DEL9 DEL41 DEL8 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL42 DEL44 DEL12 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL42 DEL44 DEL9 DEL41 DEL8 DEL12 DEL83 DEL83 DEL39 DEL42 DEL34 DEL38 DEL59 DEL23