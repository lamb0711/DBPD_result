OPENNLP-986 - Stupid Backoff as default LM discounting

- * using Laplace smoothing probability estimation to get the probabilities of the ngrams.
- * See also {@link NGramUtils#calculateLaplaceSmoothingProbability(
- *opennlp.tools.util.StringList, Iterable, int, Double)}.
+ * using Stupid Backoff to get the probabilities of the ngrams.
-  private static final double DEFAULT_K = 1d;
-  private final double k;
-    this(DEFAULT_N, DEFAULT_K);
+    this(DEFAULT_N);
-    this(n, DEFAULT_K);
-  }
-
-  public NGramLanguageModel(double k) {
-    this(DEFAULT_N, k);
-  }
-
-  public NGramLanguageModel(int n, double k) {
-    this.k = k;
-    this(in, DEFAULT_N, DEFAULT_K);
+    this(in, DEFAULT_N);
-  public NGramLanguageModel(InputStream in, double k) throws IOException {
-    this(in, DEFAULT_N, k);
-  }
-
-  public NGramLanguageModel(InputStream in, int n) throws IOException {
-    this(in, n, DEFAULT_K);
-  }
-
-  public NGramLanguageModel(InputStream in, int n, double k)
+  public NGramLanguageModel(InputStream in, int n)
-    this.k = k;
-        StringList nMinusOneToken = NGramUtils
-            .getNMinusOneTokenFirst(ngram);
-        if (size() > 1000000) {
-          // use stupid backoff
-          probability += Math.log(
-              getStupidBackoffProbability(ngram, nMinusOneToken));
-        } else {
-          // use laplace smoothing
-          probability += Math.log(
-              getLaplaceSmoothingProbability(ngram, nMinusOneToken));
+        double score = stupidBackoff(ngram);
+        probability += Math.log(score);
+        if (Double.isNaN(probability)) {
+          probability = 0d;
-      if (Double.isNaN(probability)) {
-        probability = 0d;
-      } else if (probability != 0) {
-        probability = Math.exp(probability);
-      }
-
+      probability = Math.exp(probability);
-  private double getLaplaceSmoothingProbability(StringList ngram,
-                                                StringList nMinusOneToken) {
-    return (getCount(ngram) + k) / (getCount(nMinusOneToken) + k * size());
-  }
-
-  private double getStupidBackoffProbability(StringList ngram,
-                                             StringList nMinusOneToken) {
+  private double stupidBackoff(StringList ngram) {
+    StringList nMinusOneToken = NGramUtils.getNMinusOneTokenFirst(ngram);
-      return count / size();
+      return (double) count / (double) size();
-      return ((double) count) / ((double) getCount(
-          nMinusOneToken)); // maximum likelihood probability
+      double countM1 = getCount(nMinusOneToken);
+      if (countM1 == 0d) {
+        countM1 = size(); // to avoid Infinite if n-1grams do not exist
+      }
+      return (double) count / countM1;
-      StringList nextNgram = NGramUtils.getNMinusOneTokenLast(ngram);
-      return 0.4d * getStupidBackoffProbability(nextNgram,
-          NGramUtils.getNMinusOneTokenFirst(nextNgram));
+      return 0.4 * stupidBackoff(NGramUtils.getNMinusOneTokenLast(ngram));
+

MOV8 UPD42 UPD66 MOV60 MOV21 INS60 INS25 INS60 MOV21 MOV25 INS11 INS11 INS39 INS59 INS27 INS8 INS39 INS59 INS39 INS42 INS39 MOV32 INS42 MOV32 INS42 INS34 INS21 MOV11 INS42 UPD34 INS42 INS32 INS7 UPD42 MOV32 UPD42 MOV42 MOV42 UPD42 MOV42 INS42 MOV32 DEL66 DEL42 DEL42 DEL40 DEL43 DEL69 DEL42 DEL43 DEL69 DEL39 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL83 DEL83 DEL83 DEL39 DEL42 DEL34 DEL59 DEL23 DEL83 DEL83 DEL39 DEL42 DEL59 DEL23 DEL42 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL17 DEL8 DEL83 DEL42 DEL39 DEL42 DEL44 DEL42 DEL42 DEL17 DEL8 DEL31 DEL83 DEL42 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL31 DEL42 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL17 DEL8 DEL31 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL17 DEL8 DEL31 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL34 DEL27 DEL8 DEL25 DEL42 DEL32 DEL34 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL8 DEL8 DEL25 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL27 DEL36 DEL42 DEL42 DEL32 DEL42 DEL27 DEL27 DEL36 DEL27 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL36 DEL39 DEL11 DEL36 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32