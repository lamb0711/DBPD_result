OPENNLP-307 Added support for an additional training data file.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1177681 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import opennlp.tools.namefind.NameSample;
+import opennlp.tools.namefind.NameSampleDataStream;
+import opennlp.tools.tokenize.TokenSampleStream;
+import opennlp.tools.util.ObjectStream;
+import opennlp.tools.util.PlainTextByLineStream;
+  private String additionalTrainingDataFile;
+  
+  private String additionalTrainingDataEncoding;
+  
+    
+    additionalTrainingDataFile = CasConsumerUtil.getOptionalStringParameter(
+        getUimaContext(), UimaUtil.ADDITIONAL_TRAINING_DATA_FILE);
+    
+    // If the additional training data is specified, the encoding must be provided!
+    if (additionalTrainingDataFile != null) {
+      additionalTrainingDataEncoding = CasConsumerUtil.getRequiredStringParameter(
+          getUimaContext(), UimaUtil.ADDITIONAL_TRAINING_DATA_ENCODING);
+    }
+    if (mLogger.isLoggable(Level.INFO)) {
+      mLogger.log(Level.INFO, "Collected " + tokenSamples.size() + 
+          " token samples.");
+    }
+    
-    TokenizerModel tokenModel = TokenizerME.train(language,
-        ObjectStreamUtils.createObjectStream(tokenSamples), isSkipAlphaNumerics);
-
+    ObjectStream<TokenSample> samples = ObjectStreamUtils.createObjectStream(tokenSamples);
+    
+    InputStream additionalTrainingDataIn = null;
+    TokenizerModel tokenModel;
+    
+    try {
+      if (additionalTrainingDataFile != null) {
+        
+        if (mLogger.isLoggable(Level.INFO)) {
+          mLogger.log(Level.INFO, "Using addional training data file: " + additionalTrainingDataFile); 
+        }
+        
+        additionalTrainingDataIn = new FileInputStream(additionalTrainingDataFile);
+        
+        ObjectStream<TokenSample> additionalSamples = new TokenSampleStream(
+            new PlainTextByLineStream(new InputStreamReader(additionalTrainingDataIn, additionalTrainingDataEncoding)));
+        
+        samples = ObjectStreamUtils.createObjectStream(samples, additionalSamples);
+      }
+      
+      tokenModel = TokenizerME.train(language, samples, isSkipAlphaNumerics);
+    }
+    finally {
+      if (additionalTrainingDataIn != null)
+        additionalTrainingDataIn.close();
+    }
+    

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS83 INS43 INS59 INS83 INS43 INS59 INS8 INS42 INS42 INS42 INS42 INS21 INS25 INS25 MOV21 INS60 INS60 INS60 INS54 MOV21 MOV60 MOV21 INS7 INS27 INS8 INS32 INS8 INS74 MOV59 INS43 INS59 MOV43 INS59 INS8 INS8 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS40 INS21 INS43 INS43 INS42 MOV32 INS42 INS42 INS33 INS42 INS25 INS21 INS25 INS42 INS42 INS32 INS40 INS7 INS32 INS42 INS42 INS27 INS8 INS7 INS27 INS21 INS42 INS42 INS32 INS42 INS42 INS40 INS27 INS42 INS33 INS25 INS21 MOV60 INS21 INS42 INS32 INS42 INS33 INS32 INS42 INS42 INS32 INS40 INS45 INS32 INS45 INS32 INS8 INS7 INS74 INS59 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS21 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS32 INS32 INS43 INS42 INS42 INS42 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS27 INS42 INS42 INS43 INS14 INS45 INS42 INS42 INS43 INS42 INS42 INS42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL8