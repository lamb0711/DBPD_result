OPENNLP-1193: Add support for multi fragment annotation


+import java.util.Collections;
-        Span span = ((SpanAnnotation) ann).getSpan();
-        for (int i = span.getStart(); i < span.getEnd(); i++) {
-          coveredIndexes.put(i, span);
+        for (Span span : ((SpanAnnotation) ann).getSpans()) {
+          for (int i = span.getStart(); i < span.getEnd(); i++) {
+            coveredIndexes.put(i, span);
+          }
+    // Map spans to tokens, and merge fragments based on token
+
+    //
+
+
+    // Detect sentence and correct sentence spans assuming no split can be inside a name annotation
-          Span entitySpan = entity.getSpan();
+          List<Span> mappedFragments = new ArrayList<>();
-          if (sentence.contains(entitySpan)) {
-            entityIdSet.remove(ann.getId());
+          for (Span entitySpan : entity.getSpans()) {
+            if (sentence.contains(entitySpan)) {
+              entityIdSet.remove(ann.getId());
-            entitySpan = entitySpan.trim(sample.getText());
+              entitySpan = entitySpan.trim(sample.getText());
-            Integer nameBeginIndex = tokenIndexMap.get(-entitySpan.getStart());
-            Integer nameEndIndex = tokenIndexMap.get(entitySpan.getEnd());
+              Integer nameBeginIndex = tokenIndexMap.get(-entitySpan.getStart());
+              Integer nameEndIndex = tokenIndexMap.get(entitySpan.getEnd());
-            if (nameBeginIndex != null && nameEndIndex != null) {
-              names.add(new Span(nameBeginIndex, nameEndIndex, entity.getType()));
+              if (nameBeginIndex != null && nameEndIndex != null) {
+                mappedFragments.add(new Span(nameBeginIndex, nameEndIndex, entity.getType()));
+              } else {
+                System.err.println("Dropped entity " + entity.getId() + " ("
+                    + entitySpan.getCoveredText(sample.getText()) + ") " + " in document "
+                    + sample.getId() + ", it is not matching tokenization!");
+              }
-            else {
-              System.err.println("Dropped entity " + entity.getId() + " ("
-                  + entitySpan.getCoveredText(sample.getText()) + ") " + " in document "
-                  + sample.getId() + ", it is not matching tokenization!");
+          }
+
+          Collections.sort(mappedFragments);
+
+          for (int i = 1; i < mappedFragments.size(); i++) {
+            if (mappedFragments.get(i - 1).getEnd() ==
+                mappedFragments.get(i).getStart()) {
+              mappedFragments.set(i, new Span(mappedFragments.get(i - 1).getStart(),
+                  mappedFragments.get(i).getEnd(), mappedFragments.get(i).getType()));
+              mappedFragments.set(i - 1, null);
+            }
+          }
+
+          for (Span span : mappedFragments) {
+            if (span != null ) {
+              names.add(span);

INS26 INS40 INS70 INS44 MOV32 INS8 INS8 MOV43 INS42 UPD42 MOV24 MOV60 INS60 INS70 INS21 INS24 INS70 INS74 INS59 INS44 INS32 MOV8 INS32 INS58 INS27 INS37 INS8 INS44 INS42 INS8 INS43 INS43 INS42 INS14 MOV43 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS42 INS32 INS42 INS25 INS43 INS42 INS25 INS42 INS42 INS74 INS42 INS34 INS42 INS42 INS27 INS8 INS42 INS27 INS8 INS43 INS32 INS32 INS21 INS21 INS42 INS33 INS21 INS42 INS32 INS42 INS32 INS42 INS32 INS32 INS32 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS27 INS33 INS42 INS42 INS42 INS42 INS34 INS43 INS32 INS32 INS32 INS42 INS34 UPD42 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60