OPENNLP-901:Replace references to deprecated NameFinderME.train(), this closes apache/opennlp#21

-import java.util.Collections;
-
-import opennlp.tools.util.featuregen.AdaptiveFeatureGenerator;
-import opennlp.tools.util.featuregen.AggregatedFeatureGenerator;
-    public byte[] create(InputStream in) throws IOException,
-        InvalidFormatException {
-
+    public byte[] create(InputStream in) throws IOException {
-  /**
-   * @deprecated use getNameFinderSequenceModel instead. This method will be removed soon.
-   */
-  @Deprecated
-  public MaxentModel getNameFinderModel() {
-
-    if (artifactMap.get(MAXENT_MODEL_ENTRY_NAME) instanceof MaxentModel) {
-      return (MaxentModel) artifactMap.get(MAXENT_MODEL_ENTRY_NAME);
-    }
-    else {
-      return null;
-    }
-  }
-
-  // TODO: This should be moved to the NameFinderFactory ... !!!
-  // Lets deprecate it!
-
-  /**
-   * Creates the {@link AdaptiveFeatureGenerator}. Usually this
-   * is a set of generators contained in the {@link AggregatedFeatureGenerator}.
-   *
-   * Note:
-   * The generators are created on every call to this method.
-   *
-   * @return the feature generator or null if there is no descriptor in the model
-   * @deprecated use TokenNameFinderFactory.createFeatureGenerators instead!
-   */
-  @Deprecated
-  public AdaptiveFeatureGenerator createFeatureGenerators() {
-    return getFactory().createFeatureGenerators();
-  }
-
-  public TokenNameFinderModel updateFeatureGenerator(byte descriptor[]) {
-
-    TokenNameFinderModel model;
-
-    if (getNameFinderModel() != null) {
-      model = new TokenNameFinderModel(getLanguage(), getNameFinderModel(), 1,
-          descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap(),
-          getFactory().createSequenceCodec(), getFactory());
-    }
-    else {
-      model = new TokenNameFinderModel(getLanguage(), getNameFinderSequenceModel(),
-          descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap(),
-          getFactory().createSequenceCodec(), getFactory());
-    }
-
-    model.artifactMap.clear();
-    model.artifactMap.putAll(artifactMap);
-    model.artifactMap.put(GENERATOR_DESCRIPTOR_ENTRY_NAME, descriptor);
-
-    return model;
-  }
-
-  boolean isModelValid(MaxentModel model) {
+  private boolean isModelValid(MaxentModel model) {

INS83 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL66 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL39 DEL42 DEL85 DEL44 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL32 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL34 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL14 DEL7 DEL21 DEL8 DEL25 DEL40 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31