OPENNLP-579
GeoEntityLinkerImpl: Implemented better scoring using Dice coefficient of bigram, as well as highly improved scoring based on country context. Created an NgramGenerator class and a FuzzyStringMatching class, assuming they would be useful for other linker impls. Implemented Regex based discovery of countrycontext, which enabled proximity based analysis of doctext
Multiple other small efficiencies in the GeoEntityLinker

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1533959 13f79535-47bb-0310-9956-ffa450edef68

-/**
- *
- * @author Owner
- */
+
-import java.util.HashSet;
-import java.util.List;
+import java.util.Map;
- *
+ *Links names to the NGA gazateer
-  public ArrayList<BaseLink> find(String locationText, Span span, List<CountryContextHit> countryHits, EntityLinkerProperties properties) {
+  public ArrayList<BaseLink> find(String locationText, Span span, Map<String, Set<Integer>> countryHits, EntityLinkerProperties properties) {
-      Set<String> countrycodes = getCountryCodes(countryHits);
+      
-      returnlocs.addAll(this.searchGaz(locationText, threshhold, countrycodes, properties));
+      returnlocs.addAll(this.searchGaz(locationText, threshhold, countryHits.keySet(), properties));
-   // EntityLinkerProperties property = new EntityLinkerProperties(new File("c:\\temp\\opennlpmodels\\entitylinker.properties"));
+    // EntityLinkerProperties property = new EntityLinkerProperties(new File("c:\\temp\\opennlpmodels\\entitylinker.properties"));
-    cs = con.prepareCall("CALL `search_geonames`(?, ?)");
+    cs = con.prepareCall("CALL `search_geonames`(?, ?, ?)");
-    ArrayList<MySQLGeoNamesGazEntry> retLocs = new ArrayList<MySQLGeoNamesGazEntry>();
+    if (filterCountryContext) {
+      cs.setString(3,CountryContext.getCountryCodeCSV(countryCodes));
+    } else {
+      //database stored procedure handles empty string
+      cs.setString(3, "");
+    }
+
+    ArrayList<MySQLGeoNamesGazEntry> toponyms = new ArrayList<MySQLGeoNamesGazEntry>();
-        return retLocs;
+        return toponyms;
-        if (filterCountryContext) {
-          if (countryCodes.contains(s.getCC1().toLowerCase())) {
-          //  System.out.println(searchString +" GeoNames qualified on: " + s.getCC1());
-            s.setRank(s.getRank() + 1.0);
-          } else {
-         //    System.out.println(s.getFULL_NAME_ND_RO() + ", with CC1 of "+ s.getCC1()+ ", is not within countries discovered in the document. The Country list used to discover countries can be modified in mysql procedure getCountryList()");
-            continue;
-          }
-        }
-
-        retLocs.add(s);
+            //set the base link data
+        s.setItemName(s.getFULL_NAME_ND_RO().toLowerCase().trim());
+        s.setItemID(s.getUFI());
+        s.setItemType(s.getDSG());
+        s.setItemParentID(s.getCC1().toLowerCase());
+   
+        toponyms.add(s);
-    return retLocs;
+    return toponyms;
-  private Set<String> getCountryCodes(List<CountryContextHit> hits) {
-    Set<String> ccs = new HashSet<String>();
-    for (CountryContextHit hit : hits) {
-      ccs.add(hit.getCountryCode().toLowerCase());
-    }
-    return ccs;
-  }
+

UPD40 INS65 INS66 UPD74 MOV74 INS25 INS43 INS74 INS42 INS8 INS8 UPD42 INS42 MOV43 INS43 INS21 INS21 UPD42 INS42 UPD45 INS32 INS32 INS42 INS42 INS34 INS32 INS42 INS42 INS34 INS45 INS21 MOV21 INS21 INS21 INS32 INS42 INS42 INS42 UPD42 INS32 INS32 MOV32 UPD42 MOV42 INS42 INS42 INS42 INS32 UPD42 INS32 INS42 INS42 INS32 UPD42 UPD42 UPD42 INS32 INS42 MOV42 UPD42 MOV42 INS42 INS42 INS32 INS42 INS42 INS42 DEL40 DEL26 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL32 DEL34 DEL27 DEL42 DEL8 DEL18 DEL8 DEL25 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8 DEL31