OPENNLP-169 Updated to use combo iterator

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1101463 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import opennlp.uima.util.AnnotationComboIterator;
+import opennlp.uima.util.AnnotationIteratorPair;
-  protected abstract Span[] find(CAS cas, AnnotationFS sentence, List<AnnotationFS> tokenAnnotations, 
-      String[] tokens);
+  protected abstract Span[] find(CAS cas, String[] tokens);
-    FSIndex<AnnotationFS> sentenceIndex = cas.getAnnotationIndex(mSentenceType);
-
-    for (Iterator<AnnotationFS> sentenceIterator = sentenceIndex.iterator(); 
-        sentenceIterator.hasNext();) {
-      AnnotationFS sentenceAnnotation = (AnnotationFS) sentenceIterator.next();
+    if (isRemoveExistingAnnotations) {
+      final AnnotationComboIterator sentenceNameCombo = new AnnotationComboIterator(cas,
+          mSentenceType, mNameType);
-      if (isRemoveExistingAnnotations)
-        UimaUtil.removeAnnotations(cas, sentenceAnnotation, mNameType);
-      
-      ContainingConstraint containingConstraint =
-          new ContainingConstraint(sentenceAnnotation);
-
-      Iterator<AnnotationFS> tokenIterator = cas.createFilteredIterator(
-          cas.getAnnotationIndex(mTokenType).iterator(), containingConstraint);
-      
-      List<AnnotationFS> tokenAnnotationList = new ArrayList<AnnotationFS>();
-      
-      List<String> tokenList = new ArrayList<String>();
-
-      while (tokenIterator.hasNext()) {
-        
-        AnnotationFS tokenAnnotation = (AnnotationFS) tokenIterator
-            .next();
-
-        tokenAnnotationList.add(tokenAnnotation);
-        
-        tokenList.add(tokenAnnotation.getCoveredText());
+      List<AnnotationFS> removeAnnotations = new LinkedList<AnnotationFS>();
+      for (AnnotationIteratorPair annotationIteratorPair : sentenceNameCombo) {
+        for (AnnotationFS nameAnnotation : annotationIteratorPair.getSubIterator()) {
+          removeAnnotations.add(nameAnnotation);
+        }
-       
-      Span[] names  = find(cas, sentenceAnnotation, tokenAnnotationList, 
-          (String[]) tokenList.toArray(new String[tokenList.size()]));
-      // TODO: log names, maybe with NameSample class
+      for (AnnotationFS annotation : removeAnnotations) {
+        cas.removeFsFromIndexes(annotation);
+      }
+    }
+    
+    final AnnotationComboIterator sentenceTokenCombo = new AnnotationComboIterator(cas,
+        mSentenceType, mTokenType);
+	
+    for (AnnotationIteratorPair annotationIteratorPair : sentenceTokenCombo) {
+      final List<AnnotationFS> sentenceTokenAnnotationList = new LinkedList<AnnotationFS>();
+
+      final List<String> sentenceTokenList = new LinkedList<String>();
+
+      for (AnnotationFS tokenAnnotation : annotationIteratorPair.getSubIterator()) {
+
+        sentenceTokenAnnotationList.add(tokenAnnotation);
+
+        sentenceTokenList.add(tokenAnnotation.getCoveredText());
+      }
+      
+      Span[] names  = find(cas, 
+          (String[]) sentenceTokenList.toArray(new String[sentenceTokenList.size()]));
+    
-        int startIndex = ((AnnotationFS) tokenAnnotationList.get(
+        int startIndex = ((AnnotationFS) sentenceTokenAnnotationList.get(
-        int endIndex = ((AnnotationFS) tokenAnnotationList.get(
+        int endIndex = ((AnnotationFS) sentenceTokenAnnotationList.get(
-    
+        

INS26 INS26 INS26 INS40 INS40 INS40 INS25 INS60 INS70 INS42 INS8 INS83 INS43 INS59 INS44 INS42 MOV8 MOV60 INS60 INS70 INS70 INS42 INS42 INS14 INS43 INS42 INS70 INS83 INS43 MOV74 INS59 INS44 INS42 INS8 INS44 INS42 INS8 INS43 INS42 INS42 INS42 INS42 INS83 INS83 INS44 INS32 INS8 UPD42 MOV42 UPD42 INS14 INS42 INS14 INS43 INS42 INS70 MOV43 INS42 INS21 INS42 UPD42 UPD42 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 MOV21 MOV21 INS43 INS42 INS42 INS42 UPD74 MOV74 INS42 INS44 INS32 INS8 INS32 UPD74 UPD74 INS42 UPD43 MOV43 INS42 UPD42 MOV42 UPD42 MOV42 INS21 INS42 INS42 INS42 UPD43 UPD43 UPD42 UPD42 MOV5 UPD42 INS32 UPD42 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 INS42 MOV5 UPD42 UPD42 UPD42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL25 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL8 DEL61 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL32 DEL24