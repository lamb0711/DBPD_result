OPENNLP-428: now the eos chars are configurable from command line and persisted to the model. Thanks to Katrin Tomanek for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1242761 13f79535-47bb-0310-9956-ffa450edef68

-    cgen = factory.createSentenceContextGenerator(model.getLanguage(), getAbbreviations(model.getAbbreviations()));
-    scanner = factory.createEndOfSentenceScanner(model.getLanguage());
+    // if the model has custom EOS characters set, use this to get the context 
+    // generator and the EOS scanner; otherwise use language-specific defaults
+    char[] customEOSCharacters = model.getEosCharacters();
+    if (customEOSCharacters == null) {
+      cgen = factory.createSentenceContextGenerator(model.getLanguage(), getAbbreviations(model.getAbbreviations()));
+      scanner = factory.createEndOfSentenceScanner(model.getLanguage());
+    } else {
+      cgen = factory.createSentenceContextGenerator(getAbbreviations(model.getAbbreviations()),customEOSCharacters);
+      scanner = factory.createEndOfSentenceScanner(customEOSCharacters);
+    }
+  public static SentenceModel train(String languageCode, ObjectStream<SentenceSample> samples,
+	      boolean useTokenEnd, Dictionary abbreviations, TrainingParameters mlParams) throws IOException {
+	  return train(languageCode, samples, useTokenEnd, abbreviations, null, mlParams);
+  }
-      boolean useTokenEnd, Dictionary abbreviations, TrainingParameters mlParams) throws IOException {
+      boolean useTokenEnd, Dictionary abbreviations, char[] eosCharacters, TrainingParameters mlParams) throws IOException {
-    EventStream eventStream = new SDEventStream(samples,
-        factory.createSentenceContextGenerator(languageCode, getAbbreviations(abbreviations)),
-        factory.createEndOfSentenceScanner(languageCode));
+    
+    // if the model has custom EOS characters set, use this to get the context 
+    // generator and the EOS scanner; otherwise use language-specific defaults
+    EventStream eventStream = null;
+    if (eosCharacters!=null) {
+      eventStream = new SDEventStream(samples,
+          factory.createSentenceContextGenerator(getAbbreviations(abbreviations),eosCharacters),
+    	  factory.createEndOfSentenceScanner(eosCharacters));  
+    } else {
+      eventStream = new SDEventStream(samples,
+          factory.createSentenceContextGenerator(languageCode, getAbbreviations(abbreviations)),
+          factory.createEndOfSentenceScanner(languageCode));
+    }
-        useTokenEnd, abbreviations, manifestInfoEntries);
+        useTokenEnd, abbreviations, eosCharacters, manifestInfoEntries);

INS31 INS8 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS44 MOV21 INS60 INS25 MOV21 INS42 INS43 INS42 INS74 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS41 INS5 INS42 INS25 INS5 INS59 INS27 MOV8 INS8 INS42 INS43 INS43 INS42 INS42 INS32 INS39 INS85 INS27 INS8 INS8 INS39 INS85 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS33 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS7 INS7 INS7 INS7 INS42 INS32 INS42 INS32 INS42 INS14 INS42 MOV14 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS32 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42