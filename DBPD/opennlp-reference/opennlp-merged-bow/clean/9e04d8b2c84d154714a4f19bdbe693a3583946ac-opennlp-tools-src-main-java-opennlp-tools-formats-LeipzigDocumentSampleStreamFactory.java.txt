OPENNLP-819 Now reads multiple files from a directory and extracts the language from the file name

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1703610 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.FilenameFilter;
+import opennlp.tools.cmdline.ArgumentParser.ParameterDescription;
+import opennlp.tools.cmdline.params.EncodingParameter;
+import opennlp.tools.util.ObjectStreamUtils;
-public class LeipzigDocumentSampleStreamFactory extends LanguageSampleStreamFactory<DocumentSample> {
+public class LeipzigDocumentSampleStreamFactory
+    extends AbstractSampleStreamFactory<DocumentSample> {
-  interface Parameters extends BasicFormatParams, LanguageParams {
+  interface Parameters extends EncodingParameter {
+    @ParameterDescription(valueName = "sentencesDir",
+        description = "dir with Leipig sentences to be used")
+    File getSentencesDir();
-    language = params.getLang();
+    File sentencesFileDir = params.getSentencesDir();
+    
+    File sentencesFiles[] = sentencesFileDir.listFiles(new FilenameFilter() {
+      @Override
+      public boolean accept(File dir, String name) {
+        return name.contains("sentences") && name.endsWith(".txt");
+      }
+    });
+    
+    @SuppressWarnings("unchecked")
+    ObjectStream<DocumentSample> sampleStreams[] = 
+        new ObjectStream[sentencesFiles.length];
-    try {
-      return new LeipzigDoccatSampleStream(params.getLang(), 20,
-          CmdLineUtil.openInFile(params.getData()));
-    } catch (IOException e) {
-      throw new TerminateToolException(-1, "IO error while opening sample data: " + e.getMessage(), e);
+    for (int i = 0; i < sentencesFiles.length; i++) {
+      try {
+        sampleStreams[i] = new LeipzigDoccatSampleStream(sentencesFiles[i].getName().substring(0, 3), 20,
+            CmdLineUtil.openInFile(sentencesFiles[i]));
+      } catch (IOException e) {
+        throw new TerminateToolException(-1, "IO error while opening sample data: " + e.getMessage(), e);
+      }
+    
+    return ObjectStreamUtils.createObjectStream(sampleStreams);

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 UPD74 UPD43 UPD43 INS31 INS8 UPD42 UPD42 INS77 INS43 INS42 MOV60 INS60 INS60 INS60 INS24 INS41 INS42 INS80 INS80 UPD42 MOV42 INS43 INS59 INS43 INS59 INS79 INS74 INS59 INS58 INS27 INS37 MOV8 INS32 INS42 INS45 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS85 INS32 INS42 INS45 INS43 INS43 INS42 INS85 INS3 INS39 INS59 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS5 INS40 INS42 INS34 INS43 INS1 INS43 INS85 INS21 INS42 INS31 INS42 INS7 INS78 INS83 INS39 INS42 INS44 INS44 INS8 INS2 INS14 INS42 INS43 INS42 INS43 INS42 INS41 INS42 INS42 MOV43 INS32 MOV34 MOV32 INS42 INS42 INS27 INS32 INS42 INS34 INS34 INS2 INS32 INS32 INS2 UPD42 MOV42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL41