OPENNLP-422: Improved the AD corpus handling

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1240390 13f79535-47bb-0310-9956-ffa450edef68

+    
+    public static final String META_LABEL_FINAL = "final";
-    //private Pattern rootPattern = Pattern.compile("^[^:=]+:[^(\\s]+(\\(.*?\\))?$");
-	private Pattern rootPattern = Pattern.compile("^A\\d+$");
-        .compile("^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$");
+        .compile("([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*(?:(\\((<.+>)\\))*)\\s*$");
-        .compile("^([=-]*)([^:=]+:[^\\(\\s]+)\\(([\"'].+[\"'])?\\s*([^\\)]+)?\\)\\s+(.+)");
+        .compile("^([=-]*)([^:=]+):([^\\(\\s]+)\\([\"'](.+)[\"']\\s*((?:<.+>)*)\\s*([^\\)]+)?\\)\\s+(.+)");
-	        meta = line.substring(0, start) + " p=" + para + titleTag + boxTag + metaFromSource;
+	        if(start > 0) {
+	          meta = line.substring(0, start) + " p=" + para + titleTag + boxTag + metaFromSource;
+	        } else {
+	          // rare case were there is no space between id and the sentence.
+              // will use previous meta for now
+	        }
-        while (!rootPattern.matcher(line).matches()) {
-          line = reader.readLine();
-          if (line == null) {
-            return null;
-          }
-        }
-        // now we have to take care of the lastLevel. Every time it raises, we
-        // will add the
-        // leaf to the node at the top. If it decreases, we remove the top.
+        
+        /* now we have to take care of the lastLevel. Every time it raises, we will add the
+        leaf to the node at the top. If it decreases, we remove the top. */
-        String morphologicalTag = nodeMatcher.group(3);
-        node.setMorphologicalTag(morphologicalTag);
-        String lemma = leafMatcher.group(3);
-        String morphologicalTag = leafMatcher.group(4);
-        String lexeme = leafMatcher.group(5);
+        String funcTag = leafMatcher.group(3);
+        String lemma = leafMatcher.group(4);
+        String secondaryTag = leafMatcher.group(5);
+        String morphologicalTag = leafMatcher.group(6);
+        String lexeme = leafMatcher.group(7);
+        leaf.setFunctionalTag(funcTag);
+        leaf.setSecondaryTag(secondaryTag);
-        if (lemma != null) {
-          if (lemma.length() > 2) {
-            lemma = lemma.substring(1, lemma.length() - 1);
-          }
-          leaf.setLemma(lemma);
-        }
+        leaf.setLemma(lemma);
+        	if(lexeme.matches("\\w.*?[\\.<>].*")) {
+        	  return null;
+        	}
+        	
+      private String secondaryTag;
+      private String functionalTag;
+      public void setFunctionalTag(String funcTag) {
+        this.functionalTag = funcTag;
+      }
+      
+      public String getFunctionalTag(){
+        return this.functionalTag;
+      }
+
+      public void setSecondaryTag(String secondaryTag) {
+        this.secondaryTag = secondaryTag;
+      }
+      
+      public String getSecondaryTag() {
+        return this.secondaryTag;
+      }
+
+      
+      private String emptyOrString(String value, String prefix, String suffix) {
+        if(value == null) return "";
+        return prefix + value + suffix;
+      }
-          sb.append(this.getSyntacticTag()).append("(").append(this.getMorphologicalTag()).append(") ");
+          sb.append(this.getSyntacticTag()).append(":")
+              .append(getFunctionalTag()).append("(")
+              .append(emptyOrString(getLemma(), "'", "' "))
+              .append(emptyOrString(getSecondaryTag(), "", " "))
+              .append(this.getMorphologicalTag()).append(") ");
+  private static final Pattern extEnd = Pattern.compile("</ext>");
-    		  if (sentEnd.matcher(line).matches()) {
+    		  if (sentEnd.matcher(line).matches() || extEnd.matcher(line).matches()) {
+	          } else if(line.startsWith("A1")) {
+	            // skip

INS23 INS23 INS83 INS83 INS83 MOV43 INS59 INS83 INS83 INS83 INS43 INS59 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS42 INS32 INS42 INS42 INS45 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS43 INS42 INS44 INS44 INS44 INS8 INS42 INS42 INS45 UPD45 UPD45 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS42 INS41 INS43 INS42 INS21 INS42 INS41 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS25 INS41 INS60 INS60 INS21 INS21 MOV21 INS42 INS7 INS22 INS42 INS7 INS22 INS42 INS42 INS42 INS27 INS41 INS27 MOV43 INS59 INS43 INS59 INS32 INS32 INS22 INS42 INS52 INS42 INS22 INS42 INS52 INS42 INS42 INS33 INS45 INS42 INS42 INS42 INS25 UPD42 UPD42 UPD42 INS42 INS32 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS42 MOV25 INS52 INS42 INS52 INS42 INS32 INS27 INS8 INS8 UPD42 MOV42 UPD42 MOV42 INS34 UPD42 MOV42 UPD42 MOV42 UPD34 MOV34 INS32 INS32 INS42 INS45 INS42 INS34 MOV21 INS42 INS42 INS45 INS32 INS42 MOV32 INS27 INS25 INS32 INS42 INS32 MOV32 INS32 INS32 INS8 MOV8 MOV32 INS42 INS32 INS42 INS32 INS45 INS45 INS32 INS42 INS42 INS42 INS45 UPD45 INS42 INS32 INS45 INS45 INS42 INS42 INS42 INS42 INS32 INS42 UPD45 INS42 DEL83 DEL42 DEL42 DEL42 DEL45 DEL32 DEL59 DEL23 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL61 DEL42 DEL42 DEL42 DEL34 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL33 DEL27 DEL32 DEL34 DEL27 DEL42 DEL32 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27