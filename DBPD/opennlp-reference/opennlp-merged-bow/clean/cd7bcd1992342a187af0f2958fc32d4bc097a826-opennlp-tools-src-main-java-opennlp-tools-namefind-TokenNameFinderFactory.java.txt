OPENNLP-822 Fixed a bug which prevented custom configuration from being included in the model.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1712553 13f79535-47bb-0310-9956-ffa450edef68

-    featureGeneratorBytes = loadDefaultFeatureGeneratorBytes();
-    
-    if (this.featureGeneratorBytes == null) {
-      this.featureGeneratorBytes = loadDefaultFeatureGeneratorBytes();
-    }
-  // TODO: During training time the resources need to be loaded from the resources map!
-    byte descriptorBytes[] = null;
-      descriptorBytes = (byte[]) artifactProvider.getArtifact(
+      featureGeneratorBytes = (byte[]) artifactProvider.getArtifact(
-    else {
-      descriptorBytes = featureGeneratorBytes;
+    
+    if (featureGeneratorBytes == null) {
+      featureGeneratorBytes = loadDefaultFeatureGeneratorBytes();
-    if (descriptorBytes != null) {
-      InputStream descriptorIn = new ByteArrayInputStream(descriptorBytes);
+    InputStream descriptorIn = new ByteArrayInputStream(featureGeneratorBytes);
-      AdaptiveFeatureGenerator generator = null;
-      try {
-        generator = GeneratorFactory.create(descriptorIn, new FeatureGeneratorResourceProvider() {
+    AdaptiveFeatureGenerator generator = null;
+    try {
+      generator = GeneratorFactory.create(descriptorIn, new FeatureGeneratorResourceProvider() {
-          public Object getResource(String key) {
-            if (artifactProvider != null) {
-              return artifactProvider.getArtifact(key);
-            }
-            else {
-              return resources.get(key);
-            }
+        public Object getResource(String key) {
+          if (artifactProvider != null) {
+            return artifactProvider.getArtifact(key);
-        });
-      } catch (InvalidFormatException e) {
-        // It is assumed that the creation of the feature generation does not
-        // fail after it succeeded once during model loading.
+          else {
+            return resources.get(key);
+          }
+        }
+      });
+    } catch (InvalidFormatException e) {
+      // It is assumed that the creation of the feature generation does not
+      // fail after it succeeded once during model loading.
-        // But it might still be possible that such an exception is thrown,
-        // in this case the caller should not be forced to handle the exception
-        // and a Runtime Exception is thrown instead.
+      // But it might still be possible that such an exception is thrown,
+      // in this case the caller should not be forced to handle the exception
+      // and a Runtime Exception is thrown instead.
-        // If the re-creation of the feature generation fails it is assumed
-        // that this can only be caused by a programming mistake and therefore
-        // throwing a Runtime Exception is reasonable
+      // If the re-creation of the feature generation fails it is assumed
+      // that this can only be caused by a programming mistake and therefore
+      // throwing a Runtime Exception is reasonable
-        throw new FeatureGeneratorCreationError(e);
-      } catch (IOException e) {
-        throw new IllegalStateException("Reading from mem cannot result in an I/O error", e);
-      }
-
-      return generator;
+      throw new FeatureGeneratorCreationError(e);
+    } catch (IOException e) {
+      throw new IllegalStateException("Reading from mem cannot result in an I/O error", e);
-    else {
-      return null;
-    }
+
+    return generator;

MOV8 MOV25 INS25 INS27 INS8 INS42 INS33 MOV21 UPD42 UPD42 DEL52 DEL42 DEL22 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL7 DEL21 DEL8 DEL39 DEL42 DEL85 DEL33 DEL59 DEL60 DEL42 DEL33 DEL27 DEL33 DEL41 DEL8 DEL25 DEL8