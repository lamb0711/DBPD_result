OPENNLP-500: Each ToolFactory now uses the ExtensionLoader to instantiate subclasses, and implements a protected init method that takes the required arguments. To make it easier to instantiate the tool factory from api we kept the constructor that takes the same arguments, internally it calls the init method.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1361308 13f79535-47bb-0310-9956-ffa450edef68

-import java.lang.reflect.Constructor;
+import opennlp.tools.util.ext.ExtensionLoader;
+    this.init(ngramDictionary, posDictionary);
+  }
+  
+  protected void init(Dictionary ngramDictionary, TagDictionary posDictionary) {
-    POSTaggerFactory theFactory = null;
-    Class<? extends BaseToolFactory> factoryClass = loadSubclass(subclassName);
-    if (factoryClass != null) {
-      try {
-        Constructor<?> constructor = null;
-        constructor = factoryClass.getConstructor(Dictionary.class,
-            TagDictionary.class);
-        theFactory = (POSTaggerFactory) constructor.newInstance(
-            ngramDictionary, posDictionary);
-      } catch (NoSuchMethodException e) {
-        String msg = "Could not instantiate the "
-            + subclassName
-            + ". The mandatory constructor (Dictionary, TagDictionary) is missing.";
-        System.err.println(msg);
-        throw new IllegalArgumentException(msg);
-      } catch (Exception e) {
-        String msg = "Could not instantiate the "
-            + subclassName
-            + ". The constructor (Dictionary, TagDictionary) throw an exception.";
-        System.err.println(msg);
-        e.printStackTrace();
-        throw new InvalidFormatException(msg);
-      }
+    try {
+      POSTaggerFactory theFactory = ExtensionLoader.instantiateExtension(
+          POSTaggerFactory.class, subclassName);
+      theFactory.init(ngramDictionary, posDictionary);
+      return theFactory;
+    } catch (Exception e) {
+      String msg = "Could not instantiate the " + subclassName
+          + ". The initialization throw an exception.";
+      System.err.println(msg);
+      e.printStackTrace();
+      throw new InvalidFormatException(msg, e);
-    return theFactory;
+

MOV26 UPD40 INS31 MOV29 INS83 INS42 INS44 INS44 INS8 UPD83 INS39 UPD42 INS43 INS42 INS43 INS42 INS21 MOV54 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS60 MOV41 MOV43 INS59 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 MOV42 MOV42 MOV43 UPD42 MOV42 UPD42 MOV42 MOV57 INS42 INS42 MOV43 UPD45 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL57 DEL32 DEL7 DEL21 DEL42 DEL32 DEL11 DEL7 DEL42 DEL43 DEL42 DEL44 DEL42 DEL45 DEL42 DEL45 DEL27 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25