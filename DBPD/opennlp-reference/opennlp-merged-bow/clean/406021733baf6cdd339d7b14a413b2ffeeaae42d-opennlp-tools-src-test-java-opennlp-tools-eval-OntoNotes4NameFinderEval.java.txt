OPENNLP-1040: Add OntoNotes4 training data verification

-import java.nio.charset.Charset;
+import java.math.BigInteger;
+import java.nio.charset.StandardCharsets;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import org.junit.BeforeClass;
-  private static void crossEval(TrainingParameters params, String type, double expectedScore)
-      throws IOException {
-
+  private static ObjectStream<NameSample> createNameSampleStream() throws IOException {
-    ObjectStream<NameSample> samples = new OntoNotesNameSampleStream(new FileToStringSampleStream(
-        documentStream, Charset.forName("UTF-8")));
+    return new OntoNotesNameSampleStream(new FileToStringSampleStream(
+        documentStream, StandardCharsets.UTF_8));
+  }
-    TokenNameFinderCrossValidator cv = new TokenNameFinderCrossValidator("en", null,
-        params, new TokenNameFinderFactory());
+  private static void crossEval(TrainingParameters params, String type, double expectedScore)
+      throws IOException {
+    try (ObjectStream<NameSample> samples = createNameSampleStream()) {
-    if (type != null) {
-      samples = new NameSampleTypeFilter(new String[] {type}, samples);
+      TokenNameFinderCrossValidator cv = new TokenNameFinderCrossValidator("en", null,
+          params, new TokenNameFinderFactory());
+
+      ObjectStream<NameSample> filteredSamples;
+      if (type != null) {
+        filteredSamples = new NameSampleTypeFilter(new String[] {type}, samples);
+      }
+      else {
+        filteredSamples = samples;
+      }
+
+      cv.evaluate(filteredSamples, 10);
+
+      Assert.assertEquals(expectedScore, cv.getFMeasure().getFMeasure(), 0.001d);
+    }
+  }
+
+  @BeforeClass
+  public static void verifyTrainingData() throws IOException {
+    MessageDigest digest;
+    try {
+      digest = MessageDigest.getInstance("MD5");
+    } catch (NoSuchAlgorithmException e) {
+      throw new IllegalStateException(e);
-    cv.evaluate(samples, 10);
+    try (ObjectStream<NameSample> samples = createNameSampleStream()) {
+      NameSample sample;
+      while ((sample = samples.read()) != null) {
+        digest.update(sample.toString().getBytes(StandardCharsets.UTF_8));
+      }
-    Assert.assertEquals(expectedScore, cv.getFMeasure().getFMeasure(), 0.001d);
+      Assert.assertEquals(new BigInteger("168206908604555450993491898907821588182"),
+          new BigInteger(1, digest.digest()));
+    }

INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS31 INS31 MOV74 UPD42 INS43 INS83 INS83 INS39 INS42 MOV44 MOV44 MOV44 MOV43 INS8 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS42 INS41 INS54 INS42 INS42 INS60 INS54 INS54 MOV14 INS58 INS8 INS43 INS59 INS8 INS12 INS58 INS8 INS74 INS59 MOV60 INS60 MOV25 INS21 MOV21 INS42 INS42 INS21 INS44 INS8 INS74 INS59 INS60 INS61 INS21 INS40 INS43 INS43 INS42 INS32 INS74 INS59 INS8 INS32 INS7 INS43 INS42 INS53 INS43 INS43 INS42 INS32 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS43 INS43 INS42 INS21 INS42 INS42 INS42 INS34 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS36 INS33 INS21 INS42 INS42 INS14 INS14 INS42 INS42 INS7 INS42 INS42 INS45 INS43 INS42 INS7 INS32 INS43 INS45 INS43 INS34 INS32 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 DEL39 DEL42 DEL42 DEL45 DEL32 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL34 DEL32 DEL21