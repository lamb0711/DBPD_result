OPENNLP-579
GeoEntityLinkerImpl: Implemented better scoring using Dice coefficient of bigram, as well as highly improved scoring based on country context. Created an NgramGenerator class and a FuzzyStringMatching class, assuming they would be useful for other linker impls. Implemented Regex based discovery of countrycontext, which enabled proximity based analysis of doctext
Multiple other small efficiencies in the GeoEntityLinker

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1533959 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+import java.util.Set;
- * Links location entities to gazatteers.
+ * Links location entities to gazatteers. Currently supports gazateers in a
+ * MySql database (NGA and USGS)
+  GeoEntityScorer scorer = new GeoEntityScorer();
-  private List<CountryContextHit> hits;
-  private EntityLinkerProperties props;
+  private Map<String, Set<Integer>> countryMentions;
+  private EntityLinkerProperties linkerProperties;
+  /**
+   * Flag for deciding whether to search gaz only for toponyms within countries
+   * that are mentioned in the document
+   */
+  private Boolean filterCountryContext=true;
-      if (props == null) {
-        props = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
+      if (linkerProperties == null) {
+        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      if (hits == null) {
-        System.out.println("getting country context");
-        hits = countryContext.find(text, props);
-      }
-
+     
+        countryMentions = countryContext.regexfind(text, linkerProperties);
+      
+      //prioritize query
+      filterCountryContext = Boolean.valueOf(linkerProperties.getProperty("geoentitylinker.filter_by_country_context", "true"));
-        System.out.println("processing match " + i + " of " + matches.length);
-        ArrayList<BaseLink> geoNamesEntries = geoNamesGaz.find(matches[i], names[i], hits, props);
-        ArrayList<BaseLink> usgsEntries = usgsGaz.find(matches[i], names[i], hits, props);
-        LinkedSpan<BaseLink> geoSpans = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
-        geoSpans.getLinkedEntries().addAll(usgsEntries);
-        geoSpans.setSearchTerm(matches[i]);
-        spans.add(geoSpans);
+
+//nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
+        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
+        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
+          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
+        if (countryMentions.keySet().contains("us")) {
+          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
+
+        if (!usgsEntries.isEmpty()) {
+          geoSpan.getLinkedEntries().addAll(usgsEntries);
+          geoSpan.setSearchTerm(matches[i]);
+        }
+
+        if (!geoSpan.getLinkedEntries().isEmpty()) {
+          geoSpan.setSearchTerm(matches[i]);
+          spans.add(geoSpan);
+        }
+
-      return spans;
+      //score the spans
+
+      scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 1000);
+
+      //  return spans;
-
-
-      if (props == null) {
-        props = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
+      if (linkerProperties == null) {
+        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      List<CountryContextHit> hits = countryContext.find(text, props);
+     
+        //  System.out.println("getting country context");
+        //hits = countryContext.find(text, linkerProperties);
+        countryMentions = countryContext.regexfind(text, linkerProperties);
+      
-        ArrayList<BaseLink> geoNamesEntries = geoNamesGaz.find(matches[i], names[i], hits, props);
-        ArrayList<BaseLink> usgsEntries = usgsGaz.find(matches[i], names[i], hits, props);
-        LinkedSpan<BaseLink> geoSpans = new LinkedSpan<BaseLink>(geoNamesEntries, names[i], 0);
-        geoSpans.getLinkedEntries().addAll(usgsEntries);
-        geoSpans.setSearchTerm(matches[i]);
-        spans.add(geoSpans);
+        //nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
+        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
+        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
+          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
+        if (countryMentions.keySet().contains("us")) {
+          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
+
+        if (!usgsEntries.isEmpty()) {
+          geoSpan.getLinkedEntries().addAll(usgsEntries);
+          geoSpan.setSearchTerm(matches[i]);
+        }
+
+        if (!geoSpan.getLinkedEntries().isEmpty()) {
+          geoSpan.setSearchTerm(matches[i]);
+          spans.add(geoSpan);
+        }
-      return spans;
+
+    scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 1000);
-      if (props == null) {
-        props = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
+      if (linkerProperties == null) {
+        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      List<CountryContextHit> hits = countryContext.find(text, props);
+
+      countryMentions = countryContext.regexfind(text, linkerProperties);
-        ArrayList<BaseLink> geoNamesEntries = geoNamesGaz.find(matches[i], names[i], hits, props);
-        ArrayList<BaseLink> usgsEntries = usgsGaz.find(matches[i], names[i], hits, props);
-        LinkedSpan<BaseLink> geoSpans = new LinkedSpan<BaseLink>(geoNamesEntries, names[i], 0);
-        geoSpans.getLinkedEntries().addAll(usgsEntries);
-        geoSpans.setSearchTerm(matches[i]);
-        geoSpans.setSentenceid(sentenceIndex);
-        spans.add(geoSpans);
-      }
+//nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
+        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
+        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
+          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
+        if (countryMentions.keySet().contains("us")) {
+          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
+        if (!usgsEntries.isEmpty()) {
+          geoSpan.getLinkedEntries().addAll(usgsEntries);
+          geoSpan.setSearchTerm(matches[i]);
+        }
+
+        if (!geoSpan.getLinkedEntries().isEmpty()) {
+          geoSpan.setSearchTerm(matches[i]);
+          geoSpan.setSentenceid(sentenceIndex);
+          spans.add(geoSpan);
+        }
+      }
+      scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 2000);
-    this.props = properties;
+    this.linkerProperties = properties;

INS26 INS26 INS40 INS40 INS23 INS23 INS43 INS59 INS74 INS29 INS83 INS43 INS59 UPD66 INS66 INS42 INS42 INS14 INS43 INS43 INS74 UPD42 UPD42 INS65 INS42 INS42 INS9 INS21 INS43 INS42 INS42 UPD43 MOV43 UPD43 MOV43 INS66 INS66 INS32 INS42 UPD42 UPD42 INS21 MOV21 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS21 INS21 INS7 INS32 INS7 INS42 INS42 INS7 INS32 UPD42 UPD42 INS42 INS32 UPD42 INS60 INS25 INS60 INS25 INS25 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 UPD42 INS42 INS32 INS60 INS25 INS60 INS25 INS25 INS25 UPD42 INS42 INS32 INS60 INS25 INS60 INS25 INS25 INS25 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 UPD42 MOV42 INS42 INS42 INS42 UPD42 UPD42 INS32 MOV74 INS59 INS27 INS8 INS74 INS59 INS32 INS8 INS38 INS8 INS38 INS8 INS42 INS42 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV74 INS59 INS27 INS8 MOV74 INS59 INS32 INS8 INS38 INS8 INS38 INS8 MOV42 UPD42 MOV42 MOV42 UPD42 MOV42 MOV74 INS59 INS27 INS8 INS74 INS59 INS32 INS8 MOV74 INS59 INS38 INS8 INS38 INS8 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS45 INS45 INS42 INS14 INS38 INS27 INS21 INS43 INS43 MOV42 INS14 INS32 INS42 INS45 INS21 UPD42 INS32 MOV21 MOV21 INS32 INS21 MOV21 UPD42 MOV42 INS14 INS38 INS27 INS21 INS43 INS43 INS42 INS14 INS32 UPD42 MOV42 INS45 INS21 UPD42 INS32 MOV21 MOV21 INS32 INS21 MOV21 UPD42 MOV42 INS14 INS38 INS27 INS21 INS43 INS43 INS42 INS14 INS32 INS42 INS45 INS21 INS42 INS14 INS32 MOV21 MOV21 INS32 INS21 MOV21 MOV21 MOV74 INS36 INS32 INS34 INS7 INS42 INS42 INS74 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS32 MOV74 INS36 INS32 INS34 INS7 INS42 INS42 INS74 UPD42 MOV42 INS42 INS7 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS74 INS36 INS32 INS34 INS7 INS42 INS42 INS74 INS42 INS42 INS7 INS74 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS32 INS27 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 UPD42 INS2 INS42 INS42 INS42 INS42 MOV2 UPD42 INS27 INS32 INS42 INS42 INS32 INS43 INS43 INS42 INS32 INS2 INS42 INS2 INS42 UPD42 INS2 INS42 INS42 INS42 INS42 MOV2 UPD42 INS43 INS43 INS27 INS32 INS42 INS42 INS32 MOV43 MOV43 INS42 INS32 MOV43 MOV43 INS2 INS42 INS2 INS42 UPD42 INS42 INS42 INS42 INS42 INS2 UPD42 UPD42 INS32 INS27 INS42 INS42 MOV42 MOV42 MOV2 MOV2 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV42 MOV42 MOV2 MOV2 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS32 INS27 INS42 INS42 MOV42 MOV42 MOV2 MOV2 INS42 INS42 INS42 INS42 MOV42 MOV42 MOV2 MOV2 INS42 UPD42 MOV42 MOV42 MOV42 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 INS32 INS27 INS42 INS42 MOV42 MOV42 MOV2 MOV2 INS42 INS42 MOV42 MOV42 MOV2 MOV2 UPD42 MOV42 UPD42 MOV42 INS42 INS42 MOV42 MOV42 UPD42 INS42 INS42 INS32 INS42 INS45 INS32 INS34 INS32 INS42 INS45 INS32 INS34 INS32 INS42 INS45 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL74 DEL42 DEL33 DEL27 DEL40 DEL45 DEL32 DEL21 DEL8 DEL25 DEL40 DEL42 DEL45 DEL42 DEL45 DEL40 DEL27 DEL32 DEL21 DEL42 DEL32 DEL59 DEL60 DEL32 DEL59 DEL60 DEL42 DEL41 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL59 DEL60 DEL2 DEL34 DEL42 DEL41 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL34 DEL14 DEL59