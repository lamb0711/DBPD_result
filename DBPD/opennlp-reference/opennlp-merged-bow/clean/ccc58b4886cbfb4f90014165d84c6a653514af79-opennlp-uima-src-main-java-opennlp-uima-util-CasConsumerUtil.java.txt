OPENNLP-947: Organize imports according to new order, this closes apache/opennlp#74

-import opennlp.tools.dictionary.Dictionary;
-
-import org.apache.uima.analysis_engine.annotator.AnnotatorConfigurationException;
+import opennlp.tools.dictionary.Dictionary;
+
+ *
-  private CasConsumerUtil(){
+  private CasConsumerUtil() {
-      String name) throws ResourceInitializationException {
+                                                        String name) throws ResourceInitializationException {
-          new Object[] { "There is an internal error in the UIMA SDK: " +
+          new Object[] {"There is an internal error in the UIMA SDK: " +
-              e });
+              e});
-   *
-      String name) throws ResourceInitializationException {
+                                                String name) throws ResourceInitializationException {
-          new Object[] { "Unable to load resource!" });
+          new Object[] {"Unable to load resource!"});
-   *
-          new Object[] { "Unable to retrieve " + name + " type!" });
+          new Object[] {"Unable to retrieve " + name + " type!"});
-   *
-   *
-      String parameter) throws ResourceInitializationException {
+                                                  String parameter) throws ResourceInitializationException {
-   *
-      String parameter) throws ResourceInitializationException {
+                                                    String parameter) throws ResourceInitializationException {
-   *
-      String parameter) throws ResourceInitializationException {
+                                                String parameter) throws ResourceInitializationException {
-   *
-      String parameter) throws ResourceInitializationException {
+                                                    String parameter) throws ResourceInitializationException {
-          new Object[] { "The " + parameterName + " is a required parameter!" });
+          new Object[] {"The " + parameterName + " is a required parameter!"});
-      String parameter) throws ResourceInitializationException {
+                                                  String parameter) throws ResourceInitializationException {
-    }
-    else if (value instanceof String) {
+    } else if (value instanceof String) {
-    }
-    else {
+    } else {
-          new Object[] {"The parameter: "  + parameter + " does not have the expected type String"});
+          new Object[] {"The parameter: " + parameter + " does not have the expected type String"});
-      String parameter) throws ResourceInitializationException {
+                                                         String parameter)
+      throws ResourceInitializationException {
-          new Object[] { "The parameter: " + parameter
-              + " does not have the expected type String array" });
+          new Object[] {"The parameter: " + parameter
+              + " does not have the expected type String array"});
-      String parameter) throws ResourceInitializationException {
+                                                    String parameter) throws ResourceInitializationException {
-    }
-    else if (value instanceof Integer) {
+    } else if (value instanceof Integer) {
-    }
-    else {
+    } else {
-          new Object[] {"The parameter: "  + parameter + " does not have the expected type Integer"});
+          new Object[] {"The parameter: " + parameter + " does not have the expected type Integer"});
-   *
-      int defaultValue) throws ResourceInitializationException {
+                                                    int defaultValue) throws ResourceInitializationException {
-    if (value == null)
+    if (value == null) {
+    }
-      String parameter) throws ResourceInitializationException {
+                                                String parameter) throws ResourceInitializationException {
-    }
-    else if (value instanceof Float) {
+    } else if (value instanceof Float) {
-    }
-    else {
+    } else {
-          new Object[] {"The parameter: "  + parameter + " does not have the expected type Float"});
+          new Object[] {"The parameter: " + parameter + " does not have the expected type Float"});
-      String parameter) throws ResourceInitializationException {
+                                                    String parameter) throws ResourceInitializationException {
-    }
-    else if (value instanceof Boolean) {
+    } else if (value instanceof Boolean) {
-    }
-    else {
+    } else {
-          new Object[] {"The parameter: "  + parameter + " does not have the expected type Boolean"});
+          new Object[] {"The parameter: " + parameter + " does not have the expected type Boolean"});
-      String parameter) {
+                                             String parameter) {
-    Object value =  context.getConfigParameterValue(parameter);
+    Object value = context.getConfigParameterValue(parameter);
-   *
-          new Object[] { "The Feature " + feature.getName() +
+          new Object[] {"The Feature " + feature.getName() +
-    } else
+    } else {
+    }

MOV26 INS8 INS8 MOV21 MOV41 DEL40 DEL26