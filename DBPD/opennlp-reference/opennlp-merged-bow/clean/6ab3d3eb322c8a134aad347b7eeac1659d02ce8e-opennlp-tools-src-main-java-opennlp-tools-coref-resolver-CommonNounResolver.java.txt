OPENNLP-357 Fixed inconsistent line ending style

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1198869 13f79535-47bb-0310-9956-ffa450edef68

-package opennlp.tools.coref.resolver;
-
+package opennlp.tools.coref.resolver;
+
-
-/**
- * Resolves coreference between common nouns.
- */
-public class CommonNounResolver extends MaxentResolver {
-
-  public CommonNounResolver(String projectName, ResolverMode m) throws IOException {
-    super(projectName,"cmodel", m, 80, true);
-    showExclusions = false;
-    preferFirstReferent = true;
-  }
-
-  public CommonNounResolver(String projectName, ResolverMode m, NonReferentialResolver nrr) throws IOException {
-    super(projectName,"cmodel", m, 80, true,nrr);
-    showExclusions = false;
-    preferFirstReferent = true;
-  }
-
+
+/**
+ * Resolves coreference between common nouns.
+ */
+public class CommonNounResolver extends MaxentResolver {
+
+  public CommonNounResolver(String projectName, ResolverMode m) throws IOException {
+    super(projectName,"cmodel", m, 80, true);
+    showExclusions = false;
+    preferFirstReferent = true;
+  }
+
+  public CommonNounResolver(String projectName, ResolverMode m, NonReferentialResolver nrr) throws IOException {
+    super(projectName,"cmodel", m, 80, true,nrr);
+    showExclusions = false;
+    preferFirstReferent = true;
+  }
+
-  protected List<String> getFeatures(MentionContext mention, DiscourseEntity entity) {
-    List<String> features = new ArrayList<String>();
-    features.addAll(super.getFeatures(mention, entity));
-    if (entity != null) {
-      features.addAll(ResolverUtils.getContextFeatures(mention));
-      features.addAll(ResolverUtils.getStringMatchFeatures(mention,entity));
-    }
-    return features;
-  }
-
-  public boolean canResolve(MentionContext mention) {
-    String firstTok = mention.getFirstTokenText().toLowerCase();
-    String firstTokTag = mention.getFirstToken().getSyntacticType();
-    boolean rv = mention.getHeadTokenTag().equals("NN") && !ResolverUtils.definiteArticle(firstTok, firstTokTag);
-    return rv;
-  }
-
+  protected List<String> getFeatures(MentionContext mention, DiscourseEntity entity) {
+    List<String> features = new ArrayList<String>();
+    features.addAll(super.getFeatures(mention, entity));
+    if (entity != null) {
+      features.addAll(ResolverUtils.getContextFeatures(mention));
+      features.addAll(ResolverUtils.getStringMatchFeatures(mention,entity));
+    }
+    return features;
+  }
+
+  public boolean canResolve(MentionContext mention) {
+    String firstTok = mention.getFirstTokenText().toLowerCase();
+    String firstTokTag = mention.getFirstToken().getSyntacticType();
+    boolean rv = mention.getHeadTokenTag().equals("NN") && !ResolverUtils.definiteArticle(firstTok, firstTokTag);
+    return rv;
+  }
+
-  protected boolean excluded(MentionContext ec, DiscourseEntity de) {
-    if (super.excluded(ec, de)) {
-      return true;
-    }
-    else {
-      MentionContext cec = de.getLastExtent();
-      return !canResolve(cec) || super.excluded(ec, de);
-    }
-  }
-}
+  protected boolean excluded(MentionContext ec, DiscourseEntity de) {
+    if (super.excluded(ec, de)) {
+      return true;
+    }
+    else {
+      MentionContext cec = de.getLastExtent();
+      return !canResolve(cec) || super.excluded(ec, de);
+    }
+  }
+}

