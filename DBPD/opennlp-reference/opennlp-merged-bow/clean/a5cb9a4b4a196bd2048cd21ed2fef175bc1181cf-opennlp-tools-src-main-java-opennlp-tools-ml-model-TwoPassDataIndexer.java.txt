OPENNLP-1166: TwoPassDataIndexer fails if features contain \n

-import java.io.BufferedWriter;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.FileInputStream;
-import java.io.OutputStreamWriter;
-import java.io.Writer;
-import java.nio.charset.StandardCharsets;
+import java.math.BigInteger;
-    try (Writer osw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmp),
-        StandardCharsets.UTF_8))) {
-      numEvents = computeEventCounts(eventStream, osw, predicateIndex, cutoff);
+    BigInteger writeHash;
+    HashSumEventStream writeEventStream = new HashSumEventStream(eventStream);  // do not close.
+    try (DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(tmp)))) {
+      numEvents = computeEventCounts(writeEventStream, dos, predicateIndex, cutoff);
+    writeHash = writeEventStream.calculateHashSum();
+
-    try (FileEventStream fes = new FileEventStream(tmp)) {
-      eventsToCompare = index(fes, predicateIndex);
+    BigInteger readHash = null;
+    try (HashSumEventStream readStream = new HashSumEventStream(new EventStream(tmp))) {
+      eventsToCompare = index(readStream, predicateIndex);
+      readHash = readStream.calculateHashSum();
-
+
+    if (readHash.compareTo(writeHash) != 0)
+      throw new IOException("Event hash for writing and reading events did not match.");
+
+   * Protocol:
+   *  1 - (utf string) - Event outcome
+   *  2 - (int) - Event context array length
+   *  3+ - (utf string) - Event context string
+   *  4 - (int) - Event values array length
+   *  5+ - (float) - Event value
+   *
-  private int computeEventCounts(ObjectStream<Event> eventStream, Writer eventStore,
+  private int computeEventCounts(ObjectStream<Event> eventStream, DataOutputStream eventStore,
-      eventStore.write(FileEventStream.toLine(ev));
+
+      eventStore.writeUTF(ev.getOutcome());
+
+      eventStore.writeInt(ev.getContext().length);
+      for (String ctxString : ec)
+        eventStore.writeUTF(ctxString);
+
+      if (ev.getValues() == null) {
+        eventStore.writeInt(0);
+      }
+      else {
+        eventStore.writeInt(ev.getValues().length);
+        for (float value : ev.getValues())
+          eventStore.writeFloat(value);
+      }
+
+  private static class EventStream implements ObjectStream<Event> {
+
+    private final DataInputStream inputStream;
+
+    public EventStream(File file) throws IOException {
+      inputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(file)));
+    }
+
+    @Override
+    public Event read() throws IOException {
+      if (inputStream.available() != 0) {
+        String outcome = inputStream.readUTF();
+        int contextLenght = inputStream.readInt();
+        String[] context = new String[contextLenght];
+        for (int i = 0; i < contextLenght; i++)
+          context[i] = inputStream.readUTF();
+        int valuesLength = inputStream.readInt();
+        float[] values = null;
+        if (valuesLength > 0) {
+          values = new float[valuesLength];
+          for (int i = 0; i < valuesLength; i++)
+            values[i] = inputStream.readFloat();
+        }
+        return new Event(outcome, context, values);
+      }
+      else {
+        return null;
+      }
+    }
+
+    @Override
+    public void reset() throws IOException, UnsupportedOperationException {
+      throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public void close() throws IOException {
+      inputStream.close();
+    }
+  }

MOV26 MOV26 INS26 INS26 UPD40 INS40 INS40 UPD40 UPD40 UPD40 INS55 INS83 INS83 INS42 INS74 INS23 INS31 INS31 INS31 INS31 INS60 INS60 INS21 INS60 INS25 UPD43 INS43 INS43 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS43 INS59 INS43 INS59 INS7 INS43 INS59 INS27 INS53 INS66 INS66 INS66 INS66 INS66 INS66 UPD42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS21 INS42 INS42 INS42 INS25 INS42 INS42 INS42 INS53 INS42 INS42 INS21 INS42 INS42 INS42 INS42 INS14 UPD43 INS42 INS32 INS42 INS42 INS33 UPD43 INS21 INS32 INS34 INS14 INS21 INS21 INS70 INS25 INS42 INS7 INS27 INS8 INS8 INS14 INS32 INS43 INS42 UPD42 UPD42 INS42 INS42 UPD42 UPD42 INS14 INS7 INS42 INS42 INS42 INS43 INS45 INS32 INS32 INS44 INS42 INS21 INS27 INS8 INS8 INS42 INS14 INS32 INS34 INS60 INS60 INS60 INS24 INS60 INS60 INS25 INS41 INS41 INS43 INS42 INS42 INS42 UPD43 INS43 INS14 INS42 INS32 INS42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS22 INS43 INS42 INS32 INS32 INS33 INS21 INS21 INS70 INS43 INS14 INS42 INS42 INS43 INS59 INS39 INS59 INS5 INS59 INS58 INS27 INS37 INS21 INS39 INS59 INS5 INS59 INS27 INS8 INS14 INS33 INS42 UPD42 UPD43 UPD42 UPD42 INS42 UPD43 MOV43 MOV42 UPD42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS44 INS32 INS21 INS42 INS43 INS14 INS42 INS42 INS32 INS42 INS32 INS43 INS85 INS42 INS3 INS39 INS59 INS42 INS42 INS42 INS7 INS42 INS32 INS39 INS85 INS42 INS33 INS42 INS34 INS21 INS24 INS43 INS42 INS42 INS42 UPD42 UPD42 MOV42 INS42 INS42 INS42 INS34 INS42 INS42 INS22 INS39 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS5 INS42 INS42 INS34 INS2 INS32 INS42 INS42 INS7 INS58 INS27 INS37 INS21 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS3 INS39 INS59 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS5 INS42 INS42 INS34 INS2 INS32 INS39 INS85 INS42 INS42 INS42 INS42 DEL40 DEL14 DEL32 DEL32 DEL21