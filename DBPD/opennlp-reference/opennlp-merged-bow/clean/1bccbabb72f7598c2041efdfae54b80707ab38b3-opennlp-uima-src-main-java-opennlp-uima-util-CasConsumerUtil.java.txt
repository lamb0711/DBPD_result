Correct indentation and white spaces

This closes #30

See issue OPENNLP-914

-	      String name) throws ResourceInitializationException {
-      try {
-	      return context.getResourceAsStream(name);
-	    } catch (ResourceAccessException e) {
-	      throw new ResourceInitializationException(
-	          ResourceInitializationException.STANDARD_MESSAGE_CATALOG,
-	          new Object[] { "There is an internal error in the UIMA SDK: " +
-	          e.getMessage(),
-	          e });
-	    }
+      String name) throws ResourceInitializationException {
+    try {
+      return context.getResourceAsStream(name);
+    } catch (ResourceAccessException e) {
+      throw new ResourceInitializationException(
+          ResourceInitializationException.STANDARD_MESSAGE_CATALOG,
+          new Object[] { "There is an internal error in the UIMA SDK: " +
+              e.getMessage(),
+              e });
+    }
+
-      throws ResourceInitializationException{
+      throws ResourceInitializationException {
-          new Object[] { "The " + parameterName + " is a " +
-          "required parameter!" });
+          new Object[] { "The " + parameterName + " is a required parameter!" });
-          new Object[] {"The parameter: "  + parameter + " does not have" +
-          " the expected type String"});
+          new Object[] {"The parameter: "  + parameter + " does not have the expected type String"});
-	    String parameter) throws ResourceInitializationException {
+      String parameter) throws ResourceInitializationException {
-	Object value = getOptionalParameter(context, parameter);
+    Object value = getOptionalParameter(context, parameter);
-	if (value instanceof String[]) {
-	    return (String[]) value;
-	} else if (value == null) {
-	    return new String[0];
-	} else {
-	    throw new ResourceInitializationException(
-		    ResourceInitializationException.STANDARD_MESSAGE_CATALOG,
-		    new Object[] { "The parameter: " + parameter
-			    + " does not have the expected type String array" });
-	}
+    if (value instanceof String[]) {
+      return (String[]) value;
+    } else if (value == null) {
+      return new String[0];
+    } else {
+      throw new ResourceInitializationException(
+          ResourceInitializationException.STANDARD_MESSAGE_CATALOG,
+          new Object[] { "The parameter: " + parameter
+              + " does not have the expected type String array" });
+  }
-    * Retrieves an optional boolean parameter from the given context.
-    *
-    * @param context
-    * @param parameter
-    * @return the boolean parameter or null if not set
-    * @throws ResourceInitializationException
-    */
+   * Retrieves an optional boolean parameter from the given context.
+   *
+   * @param context
+   * @param parameter
+   * @return the boolean parameter or null if not set
+   * @throws ResourceInitializationException
+   */
-          new Object[] {"The parameter: "  + parameter + " does not have " +
-          "the expected type Integer"});
+          new Object[] {"The parameter: "  + parameter + " does not have the expected type Integer"});
-          new Object[] {"The parameter: "  + parameter + " does not have" +
-          " the expected type Float"});
+          new Object[] {"The parameter: "  + parameter + " does not have the expected type Float"});
-          new Object[] {"The parameter: "  + parameter + " does not have" +
-          " the expected type Boolean"});
+          new Object[] {"The parameter: "  + parameter + " does not have the expected type Boolean"});
-  throws ResourceInitializationException {
+      throws ResourceInitializationException {
-  	throws ResourceInitializationException {
-	String dictionaryName = CasConsumerUtil.getOptionalStringParameter(
-		context, parameter);
+      throws ResourceInitializationException {
+    String dictionaryName = CasConsumerUtil.getOptionalStringParameter(
+        context, parameter);
-	Dictionary dictionary = null;
+    Dictionary dictionary = null;
-	if (dictionaryName != null) {
+    if (dictionaryName != null) {
-	    Logger logger = context.getLogger();
+      Logger logger = context.getLogger();
-	    try {
+      try {
-		InputStream dictIn = CasConsumerUtil.getOptionalResourceAsStream(context,
-			dictionaryName);
+        InputStream dictIn = CasConsumerUtil.getOptionalResourceAsStream(context,
+            dictionaryName);
-		if (dictIn == null) {
-			String message = "The dictionary file " + dictionaryName +
-			" does not exist!";
+        if (dictIn == null) {
+          String message = "The dictionary file " + dictionaryName +
+              " does not exist!";
-			if (logger.isLoggable(Level.WARNING)) {
-			    logger.log(Level.WARNING, message);
-			}
+          if (logger.isLoggable(Level.WARNING)) {
+            logger.log(Level.WARNING, message);
+          }
-			return null;
-		}
+          return null;
+        }
-		dictionary = new Dictionary(dictIn);
+        dictionary = new Dictionary(dictIn);
-	    } catch (IOException e) {
-			// if this fails just print error message and continue
-			String message = "IOException during dictionary reading, "
-				+ "running without dictionary: " + e.getMessage();
+      } catch (IOException e) {
+        // if this fails just print error message and continue
+        String message = "IOException during dictionary reading, "
+            + "running without dictionary: " + e.getMessage();
-			if (logger.isLoggable(Level.WARNING)) {
-			    logger.log(Level.WARNING, message);
-			}
-	    }
+        if (logger.isLoggable(Level.WARNING)) {
+          logger.log(Level.WARNING, message);
+        }
+      }
-	    return dictionary;
-	} else
-	    return null;
+      return dictionary;
+    } else
+      return null;

UPD45 UPD45 UPD45 UPD45 UPD45 DEL45 DEL45 DEL45 DEL45 DEL45