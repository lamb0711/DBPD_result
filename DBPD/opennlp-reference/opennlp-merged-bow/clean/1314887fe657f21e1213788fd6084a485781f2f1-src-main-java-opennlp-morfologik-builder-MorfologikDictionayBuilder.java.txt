OPENNLP-622 Refactored to remove usage of main methods of Morfologik.

-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.OutputStream;
-import java.util.ArrayList;
-import java.util.List;
-import morfologik.tools.FSACompile;
-import morfologik.tools.Launcher;
+import morfologik.tools.DictCompile;
-   * Build a Morfologik binary dictionary
-   *
-   * @param dictInFile
-   *          the 3 column TSV dictionary file
-   * @param dictOutFile
-   *          where to store the binary Morfologik dictionary
-   * @param encoding
-   *          the encoding to be used while reading and writing
-   * @param separator
-   *          a field separator, the default is '+'. If your tags contains '+'
-   *          change to something else
-   * @param encoderType
-   *          the Morfologik enconder type
-   * @param isUseInfixes
-   *          if to compact using infixes
+   * Helper to compile a morphological dictionary automaton.
+   * 
+   * @param input
+   *          The input file (base,inflected,tag). An associated metadata
+   *          (*.info) file must exist.
+   * @param overwrite
+   *          Overwrite the output file if it exists.
+   * @param validate
+   *          Validate input to make sure it makes sense.
+   * @param acceptBom
+   *          Accept leading BOM bytes (UTF-8).
+   * @param acceptCr
+   *          Accept CR bytes in input sequences (\r).
+   * @param ignoreEmpty
+   *          Ignore empty lines in the input.
+   * @return the dictionary path
+   * 
-  public void build(File dictInFile, File dictOutFile, Charset encoding,
-      String separator, EncoderType encoderType)
+  public Path build(Path input, boolean overwrite, boolean validate,
+      boolean acceptBom, boolean acceptCr, boolean ignoreEmpty)
-    Path propertiesPath = DictionaryMetadata
-        .getExpectedMetadataLocation(dictOutFile.toPath()); 
+
+    DictCompile compiler = new DictCompile(input, overwrite, validate,
+        acceptBom, acceptCr, ignoreEmpty);
+    compiler.call();
+
-    this.build(dictInFile, dictOutFile, propertiesPath.toFile(), encoding, separator,
-        encoderType);
+    Path metadataPath = DictionaryMetadata
+        .getExpectedMetadataLocation(input);
+    
+    return metadataPath.resolveSibling(
+        metadataPath.getFileName().toString().replaceAll(
+            "\\." + DictionaryMetadata.METADATA_FILE_EXTENSION + "$", ".dict"));
-   * Build a Morfologik binary dictionary
-   *
-   * @param dictInFile
-   *          the 3 column TSV dictionary file
-   * @param dictOutFile
-   *          where to store the binary Morfologik dictionary
-   * @param propertiesOutFile
-   *          where to store the properties of the Morfologik dictionary
-   * @param encoding
-   *          the encoding to be used while reading and writing
-   * @param separator
-   *          a field separator, the default is '+'. If your tags contains '+'
-   *          change to something else
-   * @param isUsePrefixes
-   *          if to compact using prefixes
-   * @param isUseInfixes
-   *          if to compact using infixes
+   * Helper to compile a morphological dictionary automaton using default
+   * parameters.
+   * 
+   * @param input
+   *          The input file (base,inflected,tag). An associated metadata
+   *          (*.info) file must exist.
+   *          
+   *  @return the dictionary path
+   * 
-  public void build(File dictInFile, File dictOutFile, File propertiesOutFile,
-      Charset encoding, String separator, EncoderType encoderType) throws Exception {
+  public Path build(Path input) throws Exception {
-    // we need to execute tab2morph followed by fsa_build
+    return build(input, true, true, false, false, false);
-    File morph = tab2morph(dictInFile, separator, encoderType);
-
-    fsaBuild(morph, dictOutFile);
-
-    morph.delete();
-
-    // now we create the properties files using the passed parameters
-    createProperties(encoding, separator, encoderType,
-        propertiesOutFile);
-  void createProperties(Charset encoding, String separator,
-		  EncoderType encoderType, File propertiesFile)
-      throws FileNotFoundException, IOException {
+  Properties createProperties(Charset encoding, String separator,
+      EncoderType encoderType) throws FileNotFoundException, IOException {
-    OutputStream os = new FileOutputStream(propertiesFile);
-    properties.store(os, "Morfologik POS Dictionary properties");
-    os.close();
+    return properties;
-
-  private void fsaBuild(File morph, File dictOutFile) throws Exception {
-    String[] params = { "-f", "cfsa2", "-i", morph.getAbsolutePath(), "-o",
-        dictOutFile.getAbsolutePath() };
-    FSACompile.main(params);
-    // FSABuildTool.main(params);
-  }
-
-  private File tab2morph(File dictInFile, String separator,
-      EncoderType encoderType) throws Exception {
-
-    // create tab2morph parameters
-    List<String> tag2morphParams = new ArrayList<String>();
-    tag2morphParams.add("tab2morph");
-
-    tag2morphParams.add("--annotation");
-    tag2morphParams.add(separator);
-    
-    tag2morphParams.add("--e");
-    tag2morphParams.add(encoderType.name());
-
-    tag2morphParams.add("-i");
-    tag2morphParams.add(dictInFile.getAbsolutePath());
-
-    // we need a temporary file to store the intermediate output
-    File tmp = File.createTempFile("tab2morph", ".txt");
-    tmp.deleteOnExit();
-
-    tag2morphParams.add("-o");
-    tag2morphParams.add(tmp.getAbsolutePath());
-
-    Launcher.main(tag2morphParams.toArray(new String[tag2morphParams.size()]));
-
-    return tmp;
-  }
-

UPD40 INS31 INS31 MOV29 MOV83 INS43 INS42 MOV44 MOV44 MOV44 MOV44 INS44 INS44 MOV43 INS8 INS29 UPD83 MOV83 UPD43 MOV43 UPD42 MOV42 MOV44 MOV43 MOV8 INS43 INS42 INS65 MOV65 UPD42 MOV42 UPD43 UPD42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS39 INS42 INS60 INS21 MOV60 INS41 INS65 INS65 INS65 MOV65 UPD42 UPD43 UPD42 INS41 UPD42 MOV42 INS41 UPD66 UPD42 INS66 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD66 UPD42 UPD66 INS66 UPD42 INS43 INS59 INS32 MOV43 INS32 INS66 INS66 INS42 INS66 INS66 INS66 UPD42 INS32 INS42 UPD42 MOV42 INS42 INS14 INS42 INS42 UPD42 UPD42 MOV42 UPD42 MOV42 INS32 UPD42 MOV42 UPD42 MOV42 INS9 INS9 INS9 INS9 INS9 INS43 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 UPD42 UPD42 INS32 INS42 INS27 INS45 UPD42 MOV42 INS32 INS42 INS45 INS40 INS45 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL66 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL45 DEL45 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL32 DEL21 DEL42 DEL41 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL52 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL29 DEL83 DEL39 DEL42 DEL43 DEL42 DEL44 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL32 DEL21 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL45 DEL45 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL4 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL31