Remove deprecated training API

The removed methods and class have never been released in the
opennlp.tools.ml package without being deprecated. Therefore
it should have a minimal impact on our users to remeove them
now. The reason they have been there in the first place is
that we still had internal usage of them.

See issue OPENNLP-875

-  @Deprecated
-  private static String getPluggableTrainerType(String className) {
-    try {
-      Class<?> trainerClass = Class.forName(className);
-      if(trainerClass != null) {
-
-        if (EventTrainer.class.isAssignableFrom(trainerClass)) {
-          return EventTrainer.EVENT_VALUE;
-        }
-        else if (EventModelSequenceTrainer.class.isAssignableFrom(trainerClass)) {
-          return EventModelSequenceTrainer.SEQUENCE_VALUE;
-        }
-        else if (SequenceTrainer.class.isAssignableFrom(trainerClass)) {
-          return SequenceTrainer.SEQUENCE_VALUE;
-        }
-      }
-    } catch (ClassNotFoundException e) {
-    }
-
-    return null;
-  }
-
-  /**
-   * @deprecated use getTrainerType instead!
-   */
-  @Deprecated
-  public static boolean isSupportEvent(Map<String, String> trainParams) {
-
-    String trainerType = trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM);
-
-    if (trainerType == null) {
-      String alogrithmValue = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
-      if (alogrithmValue != null) {
-        trainerType = getPluggableTrainerType(trainParams.get(AbstractTrainer.ALGORITHM_PARAM));
-      }
-    }
-
-    if (trainerType != null) {
-      return EventTrainer.EVENT_VALUE.equals(trainerType);
-    }
-
-    return true;
-  }
-
-  /**
-   * @deprecated use getTrainerType instead!
-   */
-  @Deprecated
-  public static boolean isSupportSequence(Map<String, String> trainParams) {
-    return isSupportEventModelSequenceTraining(trainParams);
-  }
-
-  /**
-   * @deprecated use getTrainerType instead!
-   */
-  @Deprecated
-  public static boolean isSupportEventModelSequenceTraining(Map<String, String> trainParams) {
-
-    String trainerType = trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM);
-
-    if (trainerType == null) {
-      String alogrithmValue = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
-      if (alogrithmValue != null) {
-        trainerType = getPluggableTrainerType(trainParams.get(AbstractTrainer.ALGORITHM_PARAM));
-      }
-    }
-
-    return EventModelSequenceTrainer.SEQUENCE_VALUE.equals(trainerType);
-  }
-
-  /**
-   * @deprecated use getTrainerType instead!
-   */
-  @Deprecated
-  public static boolean isSupportSequenceTraining(Map<String, String> trainParams) {
-    String trainerType = trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM);
-
-    if (trainerType == null) {
-      String alogrithmValue = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
-      if (alogrithmValue != null) {
-        trainerType = getPluggableTrainerType(trainParams.get(AbstractTrainer.ALGORITHM_PARAM));
-      }
-    }
-
-    return SequenceTrainer.SEQUENCE_VALUE.equals(trainerType);
-  }
-
-  // TODO: How to do the testing ?!
-  // is support event sequence ?
-  // is support sequence ?
-
-  /**
-   * @deprecated use getTrainerType instead!
-   */
-  @Deprecated
-  public static boolean isSequenceTraining(Map<String, String> trainParams) {
-    return SimplePerceptronSequenceTrainer.PERCEPTRON_SEQUENCE_VALUE
-        .equals(trainParams.get(AbstractTrainer.ALGORITHM_PARAM));
-  }
-
-  @Deprecated
-  public static EventModelSequenceTrainer getSequenceTrainer(
-      Map<String, String> trainParams, Map<String, String> reportMap) {
-    return getEventModelSequenceTrainer(trainParams, reportMap);
-  }
-

DEL42 DEL78 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL42 DEL43 DEL57 DEL42 DEL42 DEL32 DEL40 DEL41 DEL8 DEL25 DEL25 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL44 DEL8 DEL12 DEL54 DEL33 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL42 DEL33 DEL27 DEL40 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL40 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL40 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL25 DEL40 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL40 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31