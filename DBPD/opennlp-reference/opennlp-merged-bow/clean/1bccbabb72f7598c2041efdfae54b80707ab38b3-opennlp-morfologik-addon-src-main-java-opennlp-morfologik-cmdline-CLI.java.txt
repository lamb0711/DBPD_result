Correct indentation and white spaces

This closes #30

See issue OPENNLP-914

-	public static final String CMD = "opennlp-morfologik-addon";
+  public static final String CMD = "opennlp-morfologik-addon";
-	private static Map<String, CmdLineTool> toolLookupMap;
+  private static Map<String, CmdLineTool> toolLookupMap;
-	static {
-		toolLookupMap = new LinkedHashMap<>();
+  static {
+    toolLookupMap = new LinkedHashMap<>();
-		List<CmdLineTool> tools = new LinkedList<>();
+    List<CmdLineTool> tools = new LinkedList<>();
-		tools.add(new MorfologikDictionaryBuilderTool());
-		tools.add(new XMLDictionaryToTableTool());
+    tools.add(new MorfologikDictionaryBuilderTool());
+    tools.add(new XMLDictionaryToTableTool());
-		for (CmdLineTool tool : tools) {
-			toolLookupMap.put(tool.getName(), tool);
-		}
+    for (CmdLineTool tool : tools) {
+      toolLookupMap.put(tool.getName(), tool);
+    }
-		toolLookupMap = Collections.unmodifiableMap(toolLookupMap);
-	}
+    toolLookupMap = Collections.unmodifiableMap(toolLookupMap);
+  }
-	/**
-	 * @return a set which contains all tool names
-	 */
-	public static Set<String> getToolNames() {
-		return toolLookupMap.keySet();
-	}
+  /**
+   * @return a set which contains all tool names
+   */
+  public static Set<String> getToolNames() {
+    return toolLookupMap.keySet();
+  }
-	private static void usage() {
-		System.out.print("OpenNLP Morfologik Addon "
-				+ Version.currentVersion().toString() + ". ");
-		System.out.println("Usage: " + CMD + " TOOL");
-		System.out.println("where TOOL is one of:");
+  private static void usage() {
+    System.out.print("OpenNLP Morfologik Addon "
+        + Version.currentVersion().toString() + ". ");
+    System.out.println("Usage: " + CMD + " TOOL");
+    System.out.println("where TOOL is one of:");
-		// distance of tool name from line start
-		int numberOfSpaces = -1;
-		for (String toolName : toolLookupMap.keySet()) {
-			if (toolName.length() > numberOfSpaces) {
-				numberOfSpaces = toolName.length();
-			}
-		}
-		numberOfSpaces = numberOfSpaces + 4;
+    // distance of tool name from line start
+    int numberOfSpaces = -1;
+    for (String toolName : toolLookupMap.keySet()) {
+      if (toolName.length() > numberOfSpaces) {
+        numberOfSpaces = toolName.length();
+      }
+    }
+    numberOfSpaces = numberOfSpaces + 4;
-		for (CmdLineTool tool : toolLookupMap.values()) {
+    for (CmdLineTool tool : toolLookupMap.values()) {
-			System.out.print("  " + tool.getName());
+      System.out.print("  " + tool.getName());
-			for (int i = 0; i < Math.abs(tool.getName().length()
-					- numberOfSpaces); i++) {
-				System.out.print(" ");
-			}
+      for (int i = 0; i < Math.abs(tool.getName().length()
+          - numberOfSpaces); i++) {
+        System.out.print(" ");
+      }
-			System.out.println(tool.getShortDescription());
-		}
+      System.out.println(tool.getShortDescription());
+    }
-		System.out
-				.println("All tools print help when invoked with help parameter");
-		System.out
-				.println("Example: opennlp-morfologik-addon POSDictionaryBuilder help");
-	}
+    System.out
+        .println("All tools print help when invoked with help parameter");
+    System.out
+        .println("Example: opennlp-morfologik-addon POSDictionaryBuilder help");
+  }
-	  @SuppressWarnings("rawtypes")
-    public static void main(String[] args) {
+  @SuppressWarnings("rawtypes")
+  public static void main(String[] args) {
-	    if (args.length == 0) {
-	      usage();
-	      System.exit(0);
-	    }
+    if (args.length == 0) {
+      usage();
+      System.exit(0);
+    }
-	    String toolArguments[] = new String[args.length -1];
-	    System.arraycopy(args, 1, toolArguments, 0, toolArguments.length);
+    String toolArguments[] = new String[args.length - 1];
+    System.arraycopy(args, 1, toolArguments, 0, toolArguments.length);
-	    String toolName = args[0];
+    String toolName = args[0];
-	    //check for format
-	    String formatName = StreamFactoryRegistry.DEFAULT_FORMAT;
-	    int idx = toolName.indexOf(".");
-	    if (-1 < idx) {
-	      formatName = toolName.substring(idx + 1);
-	      toolName = toolName.substring(0, idx);
-	    }
-	    CmdLineTool tool = toolLookupMap.get(toolName);
+    //check for format
+    String formatName = StreamFactoryRegistry.DEFAULT_FORMAT;
+    int idx = toolName.indexOf(".");
+    if (-1 < idx) {
+      formatName = toolName.substring(idx + 1);
+      toolName = toolName.substring(0, idx);
+    }
+    CmdLineTool tool = toolLookupMap.get(toolName);
-	    try {
-	      if (null == tool) {
-	        throw new TerminateToolException(1, "Tool " + toolName + " is not found.");
-	      }
+    try {
+      if (null == tool) {
+        throw new TerminateToolException(1, "Tool " + toolName + " is not found.");
+      }
-	      if ((0 == toolArguments.length && tool.hasParams()) ||
-	          0 < toolArguments.length && "help".equals(toolArguments[0])) {
-	          if (tool instanceof TypedCmdLineTool) {
-	            System.out.println(((TypedCmdLineTool) tool).getHelp(formatName));
-	          } else if (tool instanceof BasicCmdLineTool) {
-	            System.out.println(tool.getHelp());
-	          }
+      if ((0 == toolArguments.length && tool.hasParams()) ||
+          0 < toolArguments.length && "help".equals(toolArguments[0])) {
+        if (tool instanceof TypedCmdLineTool) {
+          System.out.println(((TypedCmdLineTool) tool).getHelp(formatName));
+        } else if (tool instanceof BasicCmdLineTool) {
+          System.out.println(tool.getHelp());
+        }
-	          System.exit(0);
-	      }
+        System.exit(0);
+      }
-	      if (tool instanceof TypedCmdLineTool) {
-	        ((TypedCmdLineTool) tool).run(formatName, toolArguments);
-	      } else if (tool instanceof BasicCmdLineTool) {
-	        if (-1 == idx) {
-	          ((BasicCmdLineTool) tool).run(toolArguments);
-	        } else {
-	          throw new TerminateToolException(1, "Tool " + toolName + " does not support formats.");
-	        }
-	      } else {
-	        throw new TerminateToolException(1, "Tool " + toolName + " is not supported.");
-	      }
-	    }
-	    catch (TerminateToolException e) {
+      if (tool instanceof TypedCmdLineTool) {
+        ((TypedCmdLineTool) tool).run(formatName, toolArguments);
+      } else if (tool instanceof BasicCmdLineTool) {
+        if (-1 == idx) {
+          ((BasicCmdLineTool) tool).run(toolArguments);
+        } else {
+          throw new TerminateToolException(1, "Tool " + toolName + " does not support formats.");
+        }
+      } else {
+        throw new TerminateToolException(1, "Tool " + toolName + " is not supported.");
+      }
+    }
+    catch (TerminateToolException e) {
-	      if (e.getMessage() != null) {
-	        System.err.println(e.getMessage());
-	      }
+      if (e.getMessage() != null) {
+        System.err.println(e.getMessage());
+      }
-	      if (e.getCause() != null) {
-	        System.err.println(e.getCause().getMessage());
-	        e.getCause().printStackTrace(System.err);
-	      }
+      if (e.getCause() != null) {
+        System.err.println(e.getCause().getMessage());
+        e.getCause().printStackTrace(System.err);
+      }
-	      System.exit(e.getCode());
-	    }
-	  }
-
-
+      System.exit(e.getCode());
+    }
+  }

