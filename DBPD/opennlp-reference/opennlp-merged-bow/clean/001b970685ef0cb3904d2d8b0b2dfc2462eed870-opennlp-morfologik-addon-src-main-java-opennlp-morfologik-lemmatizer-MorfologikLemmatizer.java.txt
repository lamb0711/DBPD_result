Updates Morfologik add-on with 1.7.0 interfaces

The Morfologik add-on was not compatible with the latest OpenNLP code. This also simplifies the implementation of the wrapper. Previous code was a little language specific.

See issue OPENNLP-902

-import java.util.Arrays;
-import java.util.HashMap;
+import java.util.Collections;
-import java.util.Map;
-import opennlp.tools.lemmatizer.DictionaryLemmatizer;
+import opennlp.tools.lemmatizer.Lemmatizer;
-public class MorfologikLemmatizer implements DictionaryLemmatizer {
+public class MorfologikLemmatizer implements Lemmatizer {
-  public final Set<String> constantTags = new HashSet<>(Arrays.asList("NNP", "NP00000"));
-  private Map<List<String>, String> getLemmaTagsDict(String word) {
-    List<WordData> wdList = dictLookup.lookup(word);
-    Map<List<String>, String> dictMap = new HashMap<>();
-    for (WordData wd : wdList) {
-      List<String> wordLemmaTags = new ArrayList<>();
-      wordLemmaTags.add(word);
-      wordLemmaTags.add(wd.getTag().toString());
-      dictMap.put(wordLemmaTags, wd.getStem().toString());
+  private List<String> lemmatize(String word, String postag) {
+    List<WordData> dictMap = dictLookup.lookup(word.toLowerCase());
+    Set<String> lemmas = new HashSet<>();
+    for (WordData wordData : dictMap) {
+      if(Objects.equals(postag, asString(wordData.getTag()))) {
+        lemmas.add(asString(wordData.getStem()));
+      }
-    return dictMap;
+    return Collections.unmodifiableList(new ArrayList<>(lemmas));
-  private List<String> getDictKeys(String word, String postag) {
-    List<String> keys = new ArrayList<>();
-    if (constantTags.contains(postag)) {
-      keys.addAll(Arrays.asList(word, postag));
-    } else {
-      keys.addAll(Arrays.asList(word.toLowerCase(), postag));
-    }
-    return keys;
+  private String asString(CharSequence tag) {
+    if(tag == null)
+      return null;
+    return tag.toString();
-  private Map<List<String>, String> getDictMap(String word, String postag) {
-    Map<List<String>, String> dictMap;
-
-    if (constantTags.contains(postag)) {
-      dictMap = this.getLemmaTagsDict(word);
-    } else {
-      dictMap = this.getLemmaTagsDict(word.toLowerCase());
+  @Override
+  public String[] lemmatize(String[] toks, String[] tags) {
+    String[] lemmas = new String[toks.length];
+    for (int i = 0; i < toks.length; i++) {
+       List<String> l = lemmatize(toks[i],tags[i]);
+      if(l.size() > 0) {
+        lemmas[i] = l.get(0);
+      } else {
+        lemmas[i] = null;
+      }
-    return dictMap;
+    return lemmas;
+  
-  public String lemmatize(String word, String postag) {
-    String lemma;
-    List<String> keys = this.getDictKeys(word, postag);
-    Map<List<String>, String> dictMap = this.getDictMap(word, postag);
-    // lookup lemma as value of the map
-    String keyValue = dictMap.get(keys);
-    if (keyValue != null) {
-      lemma = keyValue;
-    } else if (constantTags.contains(postag)) {
-      lemma = word;
-    } else if (Objects.equals(word.toUpperCase(), word)) {
-      lemma = word;
-    } else {
-      lemma = word.toLowerCase();
+  /**
+   * Generates a lemma tags for the word and postag returning the result in list of possible lemmas.
+   *
+   * @param toks an array of the tokens
+   * @param tags an array of the pos tags
+   *
+   * @return an list of possible lemmas for each token in the sequence.
+   */
+  public List<List<String>> lemmatize(List<String> toks, List<String> tags) {
+    List<List<String>> lemmas = new ArrayList<>();
+    for (int i = 0; i < toks.size(); i++) {
+      lemmas.add(lemmatize(toks.get(i),tags.get(i)));
-    return lemma;
+    return lemmas;

UPD40 UPD40 UPD43 UPD42 MOV74 UPD42 MOV44 MOV43 INS42 INS78 UPD83 INS5 INS42 INS44 INS44 INS8 INS29 UPD74 MOV74 UPD43 UPD42 INS25 INS41 INS42 MOV43 INS85 INS5 INS42 INS5 INS42 INS60 INS24 MOV41 INS65 INS65 INS65 INS65 UPD43 MOV74 INS42 MOV74 UPD42 MOV60 INS24 MOV74 MOV59 UPD42 INS32 UPD42 INS27 INS41 INS32 MOV43 INS85 MOV43 INS85 INS5 INS59 INS58 INS27 INS37 INS8 UPD42 INS66 INS42 INS66 INS42 INS66 INS66 UPD42 INS74 INS58 INS27 INS37 INS8 UPD42 INS42 MOV32 UPD42 UPD42 INS25 INS42 INS42 INS14 INS42 INS33 INS33 UPD42 MOV42 UPD42 MOV42 MOV43 INS85 INS42 INS3 INS39 INS59 INS42 INS40 INS42 MOV60 MOV25 INS43 MOV74 UPD42 INS39 INS59 INS42 INS32 INS42 INS21 UPD42 UPD42 INS32 INS8 INS74 INS42 INS5 INS40 INS42 INS34 MOV74 INS27 INS42 UPD42 MOV42 INS34 UPD42 MOV42 UPD42 MOV42 INS32 INS42 UPD42 MOV42 UPD42 MOV42 INS32 MOV21 INS43 MOV43 INS85 UPD42 INS32 INS32 INS34 INS42 UPD42 MOV42 INS32 UPD42 MOV42 MOV32 INS42 INS42 INS2 INS2 UPD42 MOV42 UPD42 MOV42 INS42 INS32 INS32 UPD42 UPD42 UPD42 INS32 INS42 INS42 INS42 INS42 INS2 INS2 INS33 UPD42 MOV42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV32 INS42 INS42 UPD42 UPD42 INS34 INS42 INS42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL83 DEL83 DEL23 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL45 DEL45 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL42 DEL32 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL42 DEL41 DEL42 DEL32 DEL42 DEL52 DEL42 DEL52 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL8 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL59 DEL60 DEL42 DEL52 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL52 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL7 DEL21 DEL8 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL7 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL25 DEL25