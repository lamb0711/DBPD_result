OPENNLP-679
Added two methods that return Map and SortedMap. Test includes the sortedMap call to get the last key.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1590852 13f79535-47bb-0310-9956-ffa450edef68

-
-
+import java.util.HashSet;
+import java.util.NavigableMap;
+import java.util.Set;
+import java.util.SortedMap;
+import java.util.TreeMap;
-   *             {@link DoccatFactory} to customize the {@link FeatureGenerator}s
+   * {@link DoccatFactory} to customize the {@link FeatureGenerator}s
-   * Initializes the current instance with a doccat model. Default feature generation is used.
+   * Initializes the current instance with a doccat model. Default feature
+   * generation is used.
-        .getFactory().getFeatureGenerators());
+            .getFactory().getFeatureGenerators());
-   * Categorizes the given text. The text is tokenized with the SimpleTokenizer before it
-   * is passed to the feature generation.
+   * Categorizes the given text. The text is tokenized with the SimpleTokenizer
+   * before it is passed to the feature generation.
+/**
+ * Returns a map in which the key is the category name and the value is the score
+ * @param text the input text to classify
+ * @return 
+ */
+  public Map<String, Double> scoreMap(String text) {
+    Map<String, Double> probDist = new HashMap<String, Double>();
+
+    double[] categorize = categorize(text);
+    int catSize = getNumberOfCategories();
+    for (int i = 0; i < catSize; i++) {
+      String category = getCategory(i);
+      probDist.put(category, categorize[getIndex(category)]);
+    }
+    return probDist;
+
+  }
+/**
+ * Returns a map with the score as a key in ascendng order. The value is a Set of categories with the score. 
+ * Many categories can have the same score, hence the Set as value
+ * @param text the input text to classify
+ * @return 
+ */
+  public SortedMap<Double, Set<String>> sortedScoreMap(String text) {
+    SortedMap<Double, Set<String>> descendingMap = new TreeMap<Double, Set<String>>();
+    double[] categorize = categorize(text);
+    int catSize = getNumberOfCategories();
+    for (int i = 0; i < catSize; i++) {
+      String category = getCategory(i);
+      double score = categorize[getIndex(category)];
+      if (descendingMap.containsKey(score)) {
+        descendingMap.get(score).add(category);
+      } else {
+        Set<String> newset = new HashSet<>();
+        newset.add(category);
+        descendingMap.put(score, newset);
+      }
+    }
+    return descendingMap;
+  }
-   /**
+  /**
-   *             {@link #train(String, ObjectStream, TrainingParameters, DoccatFactory)}
-   *             instead.
+   * {@link #train(String, ObjectStream, TrainingParameters, DoccatFactory)}
+   * instead.
-   public static DoccatModel train(String languageCode, ObjectStream<DocumentSample> samples,
-       TrainingParameters mlParams, FeatureGenerator... featureGenerators)
-   throws IOException {
+  public static DoccatModel train(String languageCode, ObjectStream<DocumentSample> samples,
+          TrainingParameters mlParams, FeatureGenerator... featureGenerators)
+          throws IOException {
-     if (featureGenerators.length == 0) {
-       featureGenerators = new FeatureGenerator[]{defaultFeatureGenerator};
-     }
+    if (featureGenerators.length == 0) {
+      featureGenerators = new FeatureGenerator[]{defaultFeatureGenerator};
+    }
-     Map<String, String> manifestInfoEntries = new HashMap<String, String>();
+    Map<String, String> manifestInfoEntries = new HashMap<String, String>();
-     MaxentModel model = TrainUtil.train(
-         new DocumentCategorizerEventStream(samples, featureGenerators),
-         mlParams.getSettings(), manifestInfoEntries);
+    MaxentModel model = TrainUtil.train(
+            new DocumentCategorizerEventStream(samples, featureGenerators),
+            mlParams.getSettings(), manifestInfoEntries);
-     return new DoccatModel(languageCode, model, manifestInfoEntries);
-   }
+    return new DoccatModel(languageCode, model, manifestInfoEntries);
+  }
-   public static DoccatModel train(String languageCode, ObjectStream<DocumentSample> samples,
-       TrainingParameters mlParams, DoccatFactory factory)
-   throws IOException {
+  public static DoccatModel train(String languageCode, ObjectStream<DocumentSample> samples,
+          TrainingParameters mlParams, DoccatFactory factory)
+          throws IOException {
-     Map<String, String> manifestInfoEntries = new HashMap<String, String>();
+    Map<String, String> manifestInfoEntries = new HashMap<String, String>();
-     MaxentModel model = TrainUtil.train(
-         new DocumentCategorizerEventStream(samples, factory.getFeatureGenerators()),
-         mlParams.getSettings(), manifestInfoEntries);
+    MaxentModel model = TrainUtil.train(
+            new DocumentCategorizerEventStream(samples, factory.getFeatureGenerators()),
+            mlParams.getSettings(), manifestInfoEntries);
-     return new DoccatModel(languageCode, model, manifestInfoEntries, factory);
-   }
+    return new DoccatModel(languageCode, model, manifestInfoEntries, factory);
+  }
-   *             {@link #train(String, ObjectStream, TrainingParameters, DoccatFactory)}
-   *             instead.
+   * {@link #train(String, ObjectStream, TrainingParameters, DoccatFactory)}
+   * instead.

INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS65 INS65 INS65 INS43 INS43 INS43 INS43 INS42 INS60 INS60 INS60 INS24 INS41 INS65 INS65 INS65 INS43 INS43 INS74 INS43 INS42 INS60 INS60 INS60 INS24 INS41 UPD66 INS66 UPD66 UPD66 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS74 INS59 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS42 INS74 INS59 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS43 INS43 INS42 INS14 INS39 INS85 INS42 INS32 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS39 INS85 INS42 INS32 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS39 INS59 INS32 INS8 INS8 INS43 INS43 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS42 INS21 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS32 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS42