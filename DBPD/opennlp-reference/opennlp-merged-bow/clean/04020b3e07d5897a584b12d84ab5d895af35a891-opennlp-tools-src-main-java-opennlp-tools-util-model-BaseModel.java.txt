OPENNLP-429: Refactored the POSModel, moving everything related to the factory to BaseModel, so it will be reused by other model implementations. Eliminated the necessity of calling methods from sub-class constructor. Moved the methods to instantiate factories to POSTaggerFactory and BaseToolFactory.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243780 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.postag.POSTaggerFactory;
+import opennlp.tools.util.BaseToolFactory;
+  protected static final String FACTORY_NAME = "factory";
+  protected BaseToolFactory toolFactory;
+  
-   * Initializes the current instance. The sub-class constructor should call the methods:
-   * <li> {@link #loadArtifactSerializers()} to populate the serializers map, and
-   * <li> {@link #checkArtifactMap()} to check the artifact map is OK. <p>
-   * Not calling these methods will cause an {@link IllegalStateException}
-   *
-   * @param componentName the component name
-   * @param languageCode the language code
-   * @param manifestInfoEntries additional information in the manifest
+   * Initializes the current instance. The sub-class constructor should call the
+   * method {@link #checkArtifactMap()} to check the artifact map is OK.
+   * 
+   * @param componentName
+   *          the component name
+   * @param languageCode
+   *          the language code
+   * @param manifestInfoEntries
+   *          additional information in the manifest
+    this(componentName, languageCode, manifestInfoEntries, null);
+  }
+  
+  /**
+   * Initializes the current instance. The sub-class constructor should call the
+   * method {@link #checkArtifactMap()} to check the artifact map is OK.
+   * <p>
+   * Sub-classes will have access to custom artifacts and serializers provided
+   * by the factory.
+   * 
+   * @param componentName
+   *          the component name
+   * @param languageCode
+   *          the language code
+   * @param manifestInfoEntries
+   *          additional information in the manifest
+   * @param factory
+   *          the factory
+   */
+  protected BaseModel(String componentName, String languageCode,
+      Map<String, String> manifestInfoEntries, BaseToolFactory factory) {
+    
+    if (factory!=null) {
+      setManifestProperty(FACTORY_NAME, factory.getClass().getCanonicalName());
+      artifactMap.putAll(factory.createArtifactMap());
+    }
+    
+    initializeFactory();
+    loadArtifactSerializers();
+    initializeFactory();
+    
+    loadArtifactSerializers();
+    finishLoadingArtifacts(null);
+    checkArtifactMap();
+  }
+  
+  /**
+   * 
+   */
+  protected void initializeFactory() {
+    String factoryName = getManifestProperty(FACTORY_NAME);
+    if (factoryName == null) {
+      // load the default factory
+      this.toolFactory = new POSTaggerFactory(this);
+    } else {
+      try {
+        this.toolFactory = POSTaggerFactory.create(factoryName, this);
+      } catch (InvalidFormatException e) {
+        throw new IllegalArgumentException(e.getMessage());
+      }
+    }
+    
+    // validate the factory
+    String factoryName = getManifestProperty(FACTORY_NAME);
+    if (factoryName != null) {
+      try {
+        Class.forName(factoryName);
+      } catch (ClassNotFoundException e) {
+        throw new InvalidFormatException(
+            "Could not find the POS factory class: " + factoryName);
+      }
+      
+      toolFactory.validateArtifactMap();
+    }
+  
+  public BaseToolFactory getFactory() {
+    return null;
+  }

INS26 INS26 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS43 INS59 INS29 INS83 INS42 INS44 INS44 INS44 INS8 INS44 INS29 INS83 INS39 INS42 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS45 INS42 INS42 INS65 INS65 INS65 INS65 INS43 INS42 INS43 INS42 INS74 INS42 INS17 INS65 INS43 INS42 INS25 INS21 INS21 INS21 INS21 INS21 INS21 INS60 INS25 INS60 INS25 INS42 INS41 INS66 INS66 MOV65 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS33 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 UPD66 INS42 INS66 INS42 INS27 INS8 INS32 INS32 INS32 INS32 INS32 INS32 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS33 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS54 INS42 INS42 INS32 INS42 INS33 INS54 INS21 UPD42 INS32 INS32 INS42 INS42 INS7 INS8 INS12 INS42 INS42 INS8 INS12 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS22 INS14 INS21 INS44 INS8 INS21 INS44 INS8 INS42 INS42 INS32 INS42 INS42 INS42 INS52 INS42 INS43 INS52 INS7 INS43 INS42 INS53 INS32 INS43 INS42 INS53 INS42 INS42 INS42 INS22 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS14 INS52 INS42 INS42 INS42 INS42 INS52 INS43 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS45 INS42 DEL42 DEL65