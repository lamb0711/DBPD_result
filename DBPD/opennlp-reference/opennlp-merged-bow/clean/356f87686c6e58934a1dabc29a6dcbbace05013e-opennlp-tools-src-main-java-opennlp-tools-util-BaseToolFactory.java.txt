OPENNLP-500: Now the BaseToolFactory uses the ExtensionLoader to instantiate a ToolFactory. ToolFactories now need an empty constructor, and the constructor that takes an ArtifactProvider was replaced by a init method in the BaseToolFactory.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1361242 13f79535-47bb-0310-9956-ffa450edef68

-import java.lang.reflect.Constructor;
+import opennlp.tools.util.ext.ExtensionLoader;
-  protected final ArtifactProvider artifactProvider;
+  protected ArtifactProvider artifactProvider;
-    this.artifactProvider = null;
-  /**
-   * All sub-classes should have a constructor whith this signature
-   */
-  public BaseToolFactory(ArtifactProvider artifactProvider) {
+ /**
+  * Initializes the ToolFactory with an artifact provider.
+  */
+  public void init(ArtifactProvider artifactProvider) {
-    Class<? extends BaseToolFactory> factoryClass = loadSubclass(subclassName);
-    if (factoryClass != null) {
-      try {
-        Constructor<?> constructor = null;
-        constructor = factoryClass.getConstructor(ArtifactProvider.class);
-        theFactory = (BaseToolFactory) constructor
-            .newInstance(artifactProvider);
-      } catch (NoSuchMethodException e) {
-        String msg = "Could not instantiate the "
-            + subclassName
-            + ". The mandatry constructor (ArtifactProvider) is missing.";
-        System.err.println(msg);
-        throw new IllegalArgumentException(msg);
-      } catch (Exception e) {
-        String msg = "Could not instantiate the "
-            + subclassName
-            + ". The constructor (ArtifactProvider) throw an exception.";
-        System.err.println(msg);
-        e.printStackTrace();
-        throw new InvalidFormatException(msg);
+    
+    try {
+      // load the ToolFactory using the default constructor
+      theFactory = ExtensionLoader.instantiateExtension(
+          BaseToolFactory.class, subclassName);
+
+      if (theFactory != null) {
+        theFactory.init(artifactProvider);
+    } catch (Exception e) {
+      String msg = "Could not instantiate the " + subclassName
+          + ". The initialization throw an exception.";
+      System.err.println(msg);
+      e.printStackTrace();
+      throw new InvalidFormatException(msg, e);
-        Constructor<?> constructor = null;
-        constructor = factoryClass.getConstructor(ArtifactProvider.class);
-        theFactory = (BaseToolFactory) constructor
-            .newInstance(artifactProvider);
-      } catch (NoSuchMethodException e) {
-        String msg = "Could not instantiate the "
-            + factoryClass.getCanonicalName()
-            + ". The mandatry constructor (ArtifactProvider) is missing.";
-        System.err.println(msg);
-        throw new IllegalArgumentException(msg);
+        theFactory = factoryClass.newInstance();
+        theFactory.init(artifactProvider);
-            + ". The constructor (ArtifactProvider) throw an exception.";
+            + ". The initialization throw an exception.";
-        throw new InvalidFormatException(msg);
+        throw new InvalidFormatException(msg, e);

MOV26 UPD40 INS39 UPD42 INS8 MOV60 MOV54 MOV41 UPD66 INS25 MOV44 INS27 INS8 MOV21 MOV53 MOV12 UPD42 INS42 INS33 INS21 UPD42 UPD42 INS57 INS42 INS32 INS42 INS32 MOV43 UPD42 MOV42 UPD42 MOV42 MOV42 UPD45 UPD42 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 INS42 MOV32 UPD45 DEL83 DEL52 DEL42 DEL22 DEL33 DEL7 DEL21 DEL42 DEL43 DEL76 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL57 DEL42 DEL42 DEL43 DEL32 DEL11 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL8 DEL25 DEL8 DEL42 DEL43 DEL76 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL43 DEL57 DEL42 DEL42 DEL43 DEL32 DEL11 DEL7 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL45 DEL45 DEL27 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12