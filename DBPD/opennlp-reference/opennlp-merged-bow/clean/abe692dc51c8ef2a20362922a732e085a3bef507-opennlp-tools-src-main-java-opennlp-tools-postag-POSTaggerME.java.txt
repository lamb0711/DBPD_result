OPENNLP-641 Added initial sequence classification support

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1570160 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.ml.SequenceTrainer;
+import opennlp.tools.ml.model.SequenceClassificationModel;
+import opennlp.tools.namefind.NameSampleSequenceStream;
-  /**
-   * The search object used for search multiple sequences of tags.
-   */
-  protected BeamSearch<String> beam;
+  private SequenceClassificationModel<String> model;
-  /**
-   * Constructor that overrides the {@link SequenceValidator} from the model.
-   * 
-   * @deprecated use {@link #POSTaggerME(POSModel, int, int)} instead. The model
-   *             knows which {@link SequenceValidator} to use.
-   */
-  public POSTaggerME(POSModel model, int beamSize, int cacheSize, SequenceValidator<String> sequenceValidator) {
-    POSTaggerFactory factory = model.getFactory();
-    posModel = model.getPosModel();
-    model.getTagDictionary();
-    contextGen = factory.getPOSContextGenerator(beamSize);
-    tagDictionary = factory.getTagDictionary();
-    size = beamSize;
-    beam = new BeamSearch<String>(size, contextGen, posModel,
-        sequenceValidator, cacheSize);
-  }
+  private SequenceValidator<String> sequenceValidator;
-    beam = new BeamSearch<String>(size, contextGen, posModel,
-        factory.getSequenceValidator(), cacheSize);
+    
+    sequenceValidator = factory.getSequenceValidator();
+    
+    if (model.getPosModel() != null) {
+      this.model = new opennlp.tools.ml.BeamSearch<String>(beamSize,
+          model.getPosModel(), cacheSize);
+    }
+    else {
+      this.model = model.getPosSequenceModel();
+    }
-    bestSequence = beam.bestSequence(sentence.toArray(new String[sentence.size()]), null);
+    bestSequence = model.bestSequence(sentence.toArray(new String[sentence.size()]), null, contextGen, sequenceValidator);
-    bestSequence = beam.bestSequence(sentence, additionaContext);
+    bestSequence = model.bestSequence(sentence, additionaContext, contextGen, sequenceValidator);
-    Sequence[] bestSequences = beam.bestSequences(numTaggings, sentence,null);
+    Sequence[] bestSequences = model.bestSequences(numTaggings, sentence, null,
+        contextGen, sequenceValidator);
-    return beam.bestSequences(size, sentence.toArray(new String[sentence.size()]), null);
+    return model.bestSequences(size, sentence.toArray(new String[sentence.size()]), null,
+        contextGen, sequenceValidator);
-    return beam.bestSequences(size, sentence, additionaContext);
+    return model.bestSequences(size, sentence, additionaContext, contextGen, sequenceValidator);
-    MaxentModel posModel;
-    
+    MaxentModel posModel = null;
+    SequenceClassificationModel<String> seqPosModel = null;
+    else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
+      SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
+          trainParams.getSettings(), manifestInfoEntries);
+      
+      // TODO: This will probably cause issue, since the feature generator uses the outcomes array
+      
+      POSSampleSequenceStream ss = new POSSampleSequenceStream(samples, contextGenerator);
+      seqPosModel = trainer.train(ss);
+    }

INS26 INS26 INS26 INS40 INS40 INS40 INS23 UPD83 UPD74 INS83 MOV74 INS59 UPD43 UPD42 UPD42 MOV42 INS21 INS25 INS60 UPD42 INS7 INS27 INS8 INS8 UPD74 MOV74 INS59 INS42 MOV32 INS32 INS33 MOV21 INS21 UPD42 INS42 INS42 UPD42 INS42 INS42 INS33 UPD43 INS42 INS33 INS25 INS42 INS42 INS7 UPD42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS42 INS42 UPD42 INS32 INS8 MOV8 INS22 INS22 INS32 INS40 INS42 INS42 INS60 INS60 INS21 INS52 INS42 UPD74 MOV74 UPD42 INS32 INS52 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS7 UPD43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS40 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL66 DEL65 DEL29 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL42 DEL42 DEL43 DEL69 DEL39 DEL69 DEL39 DEL69 DEL68 DEL65 DEL66 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42