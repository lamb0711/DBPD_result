OPENNLP-1133:GISTrainer can use the GaussianSmoother

-  public static final String LOG_LIKELIHOOD_THRESHOLD_PARAM = "llthreshold";
+  @Deprecated
+  public static final String OLD_LL_THRESHOLD_PARAM = "llthreshold";
+  
+  public static final String LOG_LIKELIHOOD_THRESHOLD_PARAM = "LLThreshold";
+  private static final String SMOOTHING_PARAM = "Smoothing";
+  private static final boolean SMOOTHING_DEFAULT = false;
+  private static final String SMOOTHING_OBSERVATION_PARAM = "SmoothingObservation";
-  private static final String SMOOTHING_PARAM = "smoothing";
-  private static final boolean SMOOTHING_DEFAULT = false;
-
+  private static final String GAUSSIAN_SMOOTHING_PARAM = "GaussianSmoothing";
+  private static final boolean GAUSSIAN_SMOOTHING_DEFAULT = false;
+  private static final String GAUSSIAN_SMOOTHING_SIGMA_PARAM = "GaussianSmoothingSigma";
+  private static final double GAUSSIAN_SMOOTHING_SIGMA_DEFAULT = 2.0;
+  
+  public void init(TrainingParameters trainingParameters, Map<String, String> reportMap) {
+    super.init(trainingParameters, reportMap);
+
+    // Just in case someone is using "llthreshold" instead of LLThreshold...
+    // this warning can be removed in a future version of OpenNLP.
+    if (trainingParameters.getDoubleParameter(OLD_LL_THRESHOLD_PARAM, -1.) > 0. ) {
+      display("WARNING: the training parameter: " + OLD_LL_THRESHOLD_PARAM + 
+          " has been deprecated.  Please use " +
+          LOG_LIKELIHOOD_THRESHOLD_DEFAULT + " instead");
+      // if they didn't supply a value for both llthreshold AND LLThreshold  copy it over..
+      if (trainingParameters.getDoubleParameter(LOG_LIKELIHOOD_THRESHOLD_PARAM, -1.) < 0. ) {
+        trainingParameters.put(LOG_LIKELIHOOD_THRESHOLD_PARAM,
+            trainingParameters.getDoubleParameter(OLD_LL_THRESHOLD_PARAM, LOG_LIKELIHOOD_THRESHOLD_DEFAULT));
+      }
+    }
+
+    llThreshold = trainingParameters.getDoubleParameter(LOG_LIKELIHOOD_THRESHOLD_PARAM, 
+        LOG_LIKELIHOOD_THRESHOLD_DEFAULT);
+
+    useSimpleSmoothing = trainingParameters.getBooleanParameter(SMOOTHING_PARAM, SMOOTHING_DEFAULT);
+    if (useSimpleSmoothing) {
+      _smoothingObservation = 
+          trainingParameters.getDoubleParameter(SMOOTHING_OBSERVATION_PARAM, SMOOTHING_OBSERVATION);
+    }
+    
+    useGaussianSmoothing = 
+        trainingParameters.getBooleanParameter(GAUSSIAN_SMOOTHING_PARAM, GAUSSIAN_SMOOTHING_DEFAULT);
+    if (useGaussianSmoothing) {
+      sigma = trainingParameters.getDoubleParameter(
+          GAUSSIAN_SMOOTHING_SIGMA_PARAM, GAUSSIAN_SMOOTHING_SIGMA_DEFAULT);
+    }
+    
+    if (useSimpleSmoothing && useGaussianSmoothing) 
+      throw new RuntimeException("Cannot set both Gaussian smoothing and Simple smoothing");
+  }
+  
+  @Override
-    AbstractModel model;
-
-    boolean smoothing = trainingParameters.getBooleanParameter(SMOOTHING_PARAM, SMOOTHING_DEFAULT);
-    llThreshold = trainingParameters.getDoubleParameter(LOG_LIKELIHOOD_THRESHOLD_PARAM, 
-        LOG_LIKELIHOOD_THRESHOLD_DEFAULT);
-    
-    this.setSmoothing(smoothing);
-    model = trainModel(iterations, indexer, threads);
+    AbstractModel model = trainModel(iterations, indexer, threads);

MOV23 INS23 INS23 INS23 INS23 INS23 INS23 INS31 INS78 INS83 INS83 INS83 INS43 INS59 MOV29 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 MOV43 INS59 INS43 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS78 INS83 INS39 INS42 INS44 INS44 INS8 MOV60 INS42 INS42 INS42 INS45 UPD45 INS42 INS42 INS45 INS42 INS45 INS42 UPD42 UPD45 INS42 INS9 INS42 INS42 INS45 INS42 INS34 INS42 INS43 INS42 INS74 INS42 INS21 INS25 MOV21 INS21 INS25 INS21 INS25 INS25 INS42 INS43 INS43 INS43 INS48 INS27 INS8 INS7 INS42 INS8 INS7 INS42 INS8 INS27 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS21 INS25 INS42 MOV32 INS21 INS42 INS32 INS21 INS42 INS42 INS14 MOV32 INS42 INS42 INS42 INS38 INS32 INS27 INS8 INS7 INS42 INS42 INS42 INS42 INS7 INS43 INS45 INS34 INS42 INS27 INS32 INS34 INS21 INS42 INS32 INS42 INS32 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS38 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 DEL39 DEL42 DEL59 DEL60 DEL52 DEL42 DEL42 DEL32 DEL21 DEL42 DEL7 DEL21