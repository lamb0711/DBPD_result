OPENNLP-947: Organize imports according to new order, this closes apache/opennlp#74

-import opennlp.tools.dictionary.Dictionary;
-
-import org.apache.uima.analysis_engine.annotator.AnnotatorConfigurationException;
-import org.apache.uima.analysis_engine.annotator.AnnotatorInitializationException;
+import opennlp.tools.dictionary.Dictionary;
+
-  private AnnotatorUtil(){
+  private AnnotatorUtil() {
-   *
-   *
-          new Object[] {feature.getName(),
-              expectedType
+          new Object[] {feature.getName(), expectedType
-          ExceptionMessages.FEATURE_NOT_FOUND, new Object[] { type.getName(),
-              featureName});
+          ExceptionMessages.FEATURE_NOT_FOUND, new Object[] {type.getName(), featureName});
-   * @param type the type
+   * @param type        the type
-   * @param rangeType the expected range type
+   * @param rangeType   the expected range type
-   *
-      String rangeType) throws AnalysisEngineProcessException {
+                                           String rangeType)
+      throws AnalysisEngineProcessException {
-      String featureNameParameter) throws AnalysisEngineProcessException {
+                                                    String featureNameParameter)
+      throws AnalysisEngineProcessException {
-      Type type, String featureNameParameter, String rangeTypeName)
+                                                    Type type, String featureNameParameter,
+                                                    String rangeTypeName)
-      TypeSystem typeSystem, String parameter)
+                                              TypeSystem typeSystem, String parameter)
-   *
-      String parameter)
+                                                  String parameter)
-   *
-      String parameter)
+                                                    String parameter)
-   *
-      String parameter)
+                                                String parameter)
-   *
-      String parameter)
+                                                    String parameter)
-      Type nameType, String featureNameParameter, String rangeTypeName)
+                                                    Type nameType, String featureNameParameter,
+                                                    String rangeTypeName)
-      TypeSystem typeSystem, String parameter)
+                                              TypeSystem typeSystem, String parameter)
-    if (typeName != null)
+    if (typeName != null) {
-    else
+    } else {
+    }
-   *
-      String parameter)
+                                                  String parameter)
-    }
-    else if (value == null) {
+    } else if (value == null) {
-    }
-    else {
+    } else {
-      String parameter) throws ResourceInitializationException {
+                                                         String parameter)
+      throws ResourceInitializationException {
-          ExceptionMessages.WRONG_PARAMETER_TYPE, new Object[] { parameter,
-              "String array" });
-    }
-  }
-
-  /**
-    * Retrieves an optional parameter from the given context.
-    *
-    * @param context
-    * @param parameter
-    * @return the parameter or null if not set
-    *
-    * @throws ResourceInitializationException
-    */
-  public static Integer getOptionalIntegerParameter(UimaContext context,
-      String parameter)
-      throws ResourceInitializationException {
-    Object value = getOptionalParameter(context, parameter);
-
-    if (value instanceof Integer) {
-      return (Integer) value;
-    }
-    else if (value == null) {
-      return null;
-    }
-    else {
-      throw new ResourceInitializationException(
-              ExceptionMessages.MESSAGE_CATALOG,
-              ExceptionMessages.WRONG_PARAMETER_TYPE,
-              new Object[] {parameter, "Integer"});
+          ExceptionMessages.WRONG_PARAMETER_TYPE, new Object[] {parameter,
+          "String array"});
+   * @throws ResourceInitializationException
+   */
+  public static Integer getOptionalIntegerParameter(UimaContext context,
+                                                    String parameter)
+      throws ResourceInitializationException {
+
+    Object value = getOptionalParameter(context, parameter);
+
+    if (value instanceof Integer) {
+      return (Integer) value;
+    } else if (value == null) {
+      return null;
+    } else {
+      throw new ResourceInitializationException(
+          ExceptionMessages.MESSAGE_CATALOG,
+          ExceptionMessages.WRONG_PARAMETER_TYPE,
+          new Object[] {parameter, "Integer"});
+    }
+  }
+
+  /**
+   * Retrieves an optional parameter from the given context.
+   * @param context
+   * @param parameter
+   * @return the parameter or null if not set
-      String parameter)
+                                                String parameter)
-    }
-    else if (value == null) {
+    } else if (value == null) {
-    }
-    else {
+    } else {
-              ExceptionMessages.MESSAGE_CATALOG,
-              ExceptionMessages.WRONG_PARAMETER_TYPE,
-              new Object[] {parameter, "Float"});
+          ExceptionMessages.MESSAGE_CATALOG,
+          ExceptionMessages.WRONG_PARAMETER_TYPE,
+          new Object[] {parameter, "Float"});
-   *
-      String parameter)
+                                                    String parameter)
-    }
-    else if (value == null) {
+    } else if (value == null) {
-    }
-    else {
+    } else {
-              ExceptionMessages.MESSAGE_CATALOG,
-              ExceptionMessages.WRONG_PARAMETER_TYPE,
-              new Object[] {parameter, "Boolean"});
+          ExceptionMessages.MESSAGE_CATALOG,
+          ExceptionMessages.WRONG_PARAMETER_TYPE,
+          new Object[] {parameter, "Boolean"});
-      String parameter)
+                                             String parameter)
-   *
-          ExceptionMessages.IO_ERROR_MODEL_READING, new Object[] { name
-              + " could not be found!" });
+          ExceptionMessages.IO_ERROR_MODEL_READING, new Object[] {name
+          + " could not be found!"});
-      String name) throws ResourceInitializationException {
+                                                        String name)
+      throws ResourceInitializationException {
+
-      String dictionaryParameter) throws ResourceInitializationException {
+                                                    String dictionaryParameter)
+      throws ResourceInitializationException {
-    } else
+    } else {
+    }

MOV26 UPD66 UPD66 INS8 INS8 INS8 MOV41 MOV41 MOV41 DEL40 DEL26 DEL40 DEL26