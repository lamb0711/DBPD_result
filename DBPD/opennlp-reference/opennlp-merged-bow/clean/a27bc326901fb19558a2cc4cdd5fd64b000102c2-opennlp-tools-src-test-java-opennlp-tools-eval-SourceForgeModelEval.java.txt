OPENNLP-1155: Remove deprecated leipzig doccat format support

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Objects;
-import opennlp.tools.doccat.DocumentSample;
-import opennlp.tools.formats.LeipzigDoccatSampleStream;
+import opennlp.tools.tokenize.SimpleTokenizer;
+import opennlp.tools.util.FilterObjectStream;
+import opennlp.tools.util.InputStreamFactory;
+import opennlp.tools.util.PlainTextByLineStream;
+  private static class LeipzigTestSample {
+    private final List<String> text;
+
+    private LeipzigTestSample(String[] text) {
+      Objects.requireNonNull(text, "text must not be null");
+      this.text = Collections.unmodifiableList(new ArrayList<>(Arrays.asList(text)));
+    }
+
+    public String[] getText() {
+      return text.toArray(new String[text.size()]);
+    }
+
+    @Override
+    public String toString() {
+
+      StringBuilder sampleString = new StringBuilder("eng");
+
+      sampleString.append('\t');
+
+      for (String s : text) {
+        sampleString.append(s).append(' ');
+      }
+
+      if (sampleString.length() > 0) {
+        // remove last space
+        sampleString.setLength(sampleString.length() - 1);
+      }
+
+      return sampleString.toString();
+    }
+  }
+
+  private static class LeipzigTestSampleStream extends FilterObjectStream<String, LeipzigTestSample> {
+
+    private final int sentencePerDocument;
+    private final Tokenizer tokenizer;
+
+    private LeipzigTestSampleStream(int sentencePerDocument, Tokenizer tokenizer, InputStreamFactory in)
+            throws IOException {
+      super(new PlainTextByLineStream(in, StandardCharsets.UTF_8));
+      this.sentencePerDocument = sentencePerDocument;
+      this.tokenizer = tokenizer;
+    }
+
+    @Override
+    public LeipzigTestSample read() throws IOException {
+      int count = 0;
+      List<String> tokensList = new ArrayList<>();
+
+      String line;
+      while (count < sentencePerDocument && (line = samples.read()) != null) {
+
+        String[] tokens = tokenizer.tokenize(line);
+
+        if (tokens.length == 0) {
+          throw new IOException("Empty lines are not allowed!");
+        }
+
+        // Always skip first token, that is the sentence number!
+        tokensList.addAll(Arrays.asList(tokens).subList(1, tokens.length));
+
+        count++;
+      }
+
+      if (tokensList.size() > 0) {
+        return new LeipzigTestSample(tokensList.toArray(new String[tokensList.size()]));
+      }
+
+      return null;
+    }
+  }
+
-    verifyTrainingData(new LeipzigDoccatSampleStream("eng", 25,
+    verifyTrainingData(new LeipzigTestSampleStream(25, SimpleTokenizer.INSTANCE,
-                    "leipzig/eng_news_2010_300K-sentences.txt"))), 
+                    "leipzig/eng_news_2010_300K-sentences.txt"))),
-        new File(getOpennlpDataDir(), "models-sf/en-sent.bin"));
+            new File(getOpennlpDataDir(), "models-sf/en-sent.bin"));
-    try (ObjectStream<DocumentSample> lineBatches = new LeipzigDoccatSampleStream("eng", 25,
-        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
-            "leipzig/eng_news_2010_300K-sentences.txt")))) {
+    try (ObjectStream<LeipzigTestSample> lineBatches = new LeipzigTestSampleStream(25,
+            SimpleTokenizer.INSTANCE,
+            new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+                    "leipzig/eng_news_2010_300K-sentences.txt")))) {
-      DocumentSample lineBatch;
+      LeipzigTestSample lineBatch;
-        new BigInteger(1, digest.digest()));
+            new BigInteger(1, digest.digest()));
-        new File(getOpennlpDataDir(), "models-sf/en-token.bin"));
+            new File(getOpennlpDataDir(), "models-sf/en-token.bin"));
-    try (ObjectStream<DocumentSample> lines = new LeipzigDoccatSampleStream("eng", 1,
-        WhitespaceTokenizer.INSTANCE,
-        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
-            "leipzig/eng_news_2010_300K-sentences.txt")))) {
+    try (ObjectStream<LeipzigTestSample> lines = new LeipzigTestSampleStream(1,
+            WhitespaceTokenizer.INSTANCE,
+            new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+                    "leipzig/eng_news_2010_300K-sentences.txt")))) {
-      DocumentSample line;
+      LeipzigTestSample line;
-        new BigInteger(1, digest.digest()));
+            new BigInteger(1, digest.digest()));
-  private ObjectStream<DocumentSample> createLineWiseStream() throws IOException {
-    return new LeipzigDoccatSampleStream("eng", 1,
+  private ObjectStream<LeipzigTestSample> createLineWiseStream() throws IOException {
+    return new LeipzigTestSampleStream(1,
+        SimpleTokenizer.INSTANCE,
-    try (ObjectStream<DocumentSample> lines = createLineWiseStream()) {
+    try (ObjectStream<LeipzigTestSample> lines = createLineWiseStream()) {
-      DocumentSample line;
+      LeipzigTestSample line;
-    try (ObjectStream<DocumentSample> lines = createLineWiseStream()) {
+    try (ObjectStream<LeipzigTestSample> lines = createLineWiseStream()) {
-      DocumentSample line;
+      LeipzigTestSample line;
-    try (ObjectStream<DocumentSample> lines = createLineWiseStream()) {
+    try (ObjectStream<LeipzigTestSample> lines = createLineWiseStream()) {
-      DocumentSample line;
+      LeipzigTestSample line;
-    try (ObjectStream<DocumentSample> lines = createLineWiseStream()) {
+    try (ObjectStream<LeipzigTestSample> lines = createLineWiseStream()) {
-      DocumentSample line;
+      LeipzigTestSample line;

MOV26 MOV26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 MOV31 INS40 INS40 INS40 INS40 INS40 UPD40 INS40 INS40 UPD40 INS55 INS55 INS31 INS83 INS83 INS42 INS23 INS31 INS31 INS31 INS83 INS83 INS42 INS74 INS23 INS23 INS31 INS31 MOV78 UPD83 INS83 INS39 INS42 MOV43 INS83 UPD74 MOV74 INS42 MOV43 INS8 INS83 INS83 INS74 INS59 INS83 INS42 INS44 INS8 MOV83 INS5 INS42 INS8 INS78 INS83 INS43 INS42 INS8 INS43 INS43 INS43 INS83 INS83 INS39 INS59 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS43 INS8 INS78 INS83 INS43 INS42 INS43 INS8 INS21 UPD43 INS41 INS43 INS43 INS42 INS5 INS42 INS21 INS21 INS43 INS85 INS41 INS42 INS42 INS60 INS21 INS70 INS25 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS42 INS43 INS42 INS43 INS42 INS42 INS46 INS21 INS21 INS42 INS42 INS42 INS60 INS60 MOV60 INS61 INS25 INS41 INS32 UPD42 MOV14 INS42 INS42 INS43 INS85 INS32 INS7 INS42 INS32 INS43 INS59 INS32 INS44 INS42 INS8 INS27 INS8 INS32 INS42 INS42 INS14 INS7 INS7 INS39 INS59 INS74 INS59 UPD43 INS27 INS8 INS27 INS8 INS33 INS42 MOV14 MOV14 INS74 INS74 INS60 UPD43 UPD40 UPD74 INS59 UPD74 UPD74 MOV74 UPD74 MOV74 MOV59 INS42 INS42 INS42 INS42 INS45 INS22 INS32 INS42 INS42 INS3 INS42 INS42 INS14 INS42 INS42 INS13 INS43 INS42 INS21 INS32 INS34 INS21 INS42 INS42 INS43 INS42 INS40 INS22 INS42 INS22 INS42 INS42 INS34 INS43 INS43 INS42 INS14 UPD42 INS27 INS27 INS60 INS25 MOV21 INS21 INS32 INS34 INS41 UPD43 UPD34 INS40 INS43 INS43 UPD43 MOV43 INS43 MOV14 INS43 INS59 UPD42 UPD43 INS42 INS32 UPD43 UPD43 MOV42 MOV32 UPD43 UPD43 UPD43 UPD43 UPD43 INS52 INS42 INS42 INS42 INS14 INS5 INS32 INS43 INS45 INS42 INS32 INS42 INS42 INS32 INS42 INS52 INS42 INS52 INS42 INS42 INS42 INS74 INS42 INS42 INS36 INS33 INS5 INS59 INS27 INS8 INS32 INS37 INS42 INS42 INS14 UPD42 INS42 INS42 UPD43 INS40 UPD42 INS42 UPD43 UPD34 INS40 INS42 INS42 UPD42 INS42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS74 INS32 INS43 INS85 INS42 INS42 INS42 INS32 INS42 INS13 INS42 INS42 INS27 INS43 INS7 INS43 INS85 INS42 INS32 INS40 INS34 INS53 INS42 INS42 INS32 INS42 INS43 INS32 UPD42 UPD42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS14 INS32 INS42 INS34 INS40 INS42 INS42 INS42 INS3 INS42 INS42 INS42 INS42 INS42 INS43 INS45 UPD42 MOV42 INS42 INS42 INS5 INS32 INS42 INS43 INS85 INS42 INS42 INS42 DEL32 DEL42 DEL43 DEL74 DEL42 DEL45 DEL41 DEL83 DEL39 DEL42 DEL8 DEL31 DEL45 DEL45 DEL45 DEL42 DEL43 DEL74