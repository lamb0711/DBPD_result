OPENNLP-1040: Add OntoNotes4 training data verification

-import java.nio.charset.Charset;
+import java.math.BigInteger;
+import java.nio.charset.StandardCharsets;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import org.junit.BeforeClass;
+import opennlp.tools.postag.POSSample;
-  private static void crossEval(TrainingParameters params, double expectedScore)
-      throws IOException {
-
+  private static ObjectStream<POSSample> createPOSSampleStream() throws IOException {
-    ParseToPOSSampleStream samples = new ParseToPOSSampleStream(new OntoNotesParseSampleStream(
+    return new ParseToPOSSampleStream(new OntoNotesParseSampleStream(
-            new FileToStringSampleStream(documentStream, Charset.forName("UTF-8")))));
-
-    POSTaggerCrossValidator cv = new POSTaggerCrossValidator("en", params, new POSTaggerFactory());
-    cv.evaluate(samples, 10);
-
-    Assert.assertEquals(expectedScore, cv.getWordAccuracy(), 0.0001d);
+            new FileToStringSampleStream(documentStream, StandardCharsets.UTF_8))));
+  private static void crossEval(TrainingParameters params, double expectedScore)
+      throws IOException {
+    try (ObjectStream<POSSample> samples = createPOSSampleStream()) {
+      POSTaggerCrossValidator cv = new POSTaggerCrossValidator("en", params, new POSTaggerFactory());
+      cv.evaluate(samples, 10);
+
+      Assert.assertEquals(expectedScore, cv.getWordAccuracy(), 0.0001d);
+    }
+  }
+
+  @BeforeClass
+  public static void verifyTrainingData() throws IOException {
+    MessageDigest digest;
+    try {
+      digest = MessageDigest.getInstance("MD5");
+    } catch (NoSuchAlgorithmException e) {
+      throw new IllegalStateException(e);
+    }
+
+    try (ObjectStream<POSSample> samples = createPOSSampleStream()) {
+      POSSample sample;
+      while ((sample = samples.read()) != null) {
+        digest.update(sample.toString().getBytes(StandardCharsets.UTF_8));
+      }
+
+      Assert.assertEquals(new BigInteger("300430765214895870888056958221353356972"),
+          new BigInteger(1, digest.digest()));
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS40 UPD40 INS40 INS40 INS40 INS40 INS31 INS31 INS74 UPD42 INS83 INS83 INS39 INS42 MOV44 MOV44 INS43 INS8 INS78 INS83 INS83 INS39 INS42 INS43 INS8 INS43 INS43 INS41 INS42 INS54 INS42 INS42 INS60 INS54 INS54 INS42 INS42 MOV14 INS58 INS8 INS43 INS59 INS8 INS12 INS58 INS8 INS74 INS59 MOV60 MOV21 MOV21 INS42 INS42 INS21 INS44 INS8 INS74 INS59 INS60 INS61 INS21 INS43 INS43 INS42 INS32 INS7 INS43 INS42 INS53 INS43 INS43 INS42 INS32 INS43 INS59 INS27 INS8 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS36 INS33 INS21 INS42 INS42 INS14 INS14 INS40 INS42 INS42 INS45 INS43 INS42 INS7 INS32 INS43 INS45 INS43 INS34 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS42 DEL39 DEL42 DEL42 DEL45 DEL32 DEL42 DEL43 DEL42 DEL59 DEL60