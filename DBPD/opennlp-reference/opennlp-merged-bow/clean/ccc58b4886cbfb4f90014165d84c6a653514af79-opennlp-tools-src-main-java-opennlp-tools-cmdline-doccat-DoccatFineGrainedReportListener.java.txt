OPENNLP-947: Organize imports according to new order, this closes apache/opennlp#74

+
-        tokenConfusionMatrix.put(tok,
-            new HashMap<String, ConfusionMatrixLine>());
+        tokenConfusionMatrix.put(tok, new HashMap<>());
-      SortedSet<String> toks = new TreeSet<>(new Comparator<String>() {
-        public int compare(String o1, String o2) {
-          if (o1.equals(o2)) {
-            return 0;
-          }
-          int e1 = 0, e2 = 0;
-          if (tokOcurrencies.containsKey(o1))
-            e1 = tokOcurrencies.get(o1).value();
-          if (tokOcurrencies.containsKey(o2))
-            e2 = tokOcurrencies.get(o2).value();
-          if (e1 == e2) {
-            return o1.compareTo(o2);
-          }
-          return e2 - e1;
+      SortedSet<String> toks = new TreeSet<>((o1, o2) -> {
+        if (o1.equals(o2)) {
+          return 0;
+        int e1 = 0, e2 = 0;
+        if (tokOcurrencies.containsKey(o1))
+          e1 = tokOcurrencies.get(o1).value();
+        if (tokOcurrencies.containsKey(o2))
+          e2 = tokOcurrencies.get(o2).value();
+        if (e1 == e2) {
+          return o1.compareTo(o2);
+        }
+        return e2 - e1;
-      SortedSet<String> toks = new TreeSet<>(new Comparator<String>() {
-        public int compare(String o1, String o2) {
-          if (o1.equals(o2)) {
-            return 0;
-          }
-          int e1 = 0, e2 = 0;
-          if (tokErrors.containsKey(o1))
-            e1 = tokErrors.get(o1).value();
-          if (tokErrors.containsKey(o2))
-            e2 = tokErrors.get(o2).value();
-          if (e1 == e2) {
-            return o1.compareTo(o2);
-          }
-          return e2 - e1;
+      SortedSet<String> toks = new TreeSet<>((o1, o2) -> {
+        if (o1.equals(o2)) {
+          return 0;
+        int e1 = 0, e2 = 0;
+        if (tokErrors.containsKey(o1))
+          e1 = tokErrors.get(o1).value();
+        if (tokErrors.containsKey(o2))
+          e2 = tokErrors.get(o2).value();
+        if (e1 == e2) {
+          return o1.compareTo(o2);
+        }
+        return e2 - e1;
-      SortedSet<String> tags = new TreeSet<>(new Comparator<String>() {
-        public int compare(String o1, String o2) {
-          if (o1.equals(o2)) {
-            return 0;
-          }
-          int e1 = 0, e2 = 0;
-          if (tagErrors.containsKey(o1))
-            e1 = tagErrors.get(o1).value();
-          if (tagErrors.containsKey(o2))
-            e2 = tagErrors.get(o2).value();
-          if (e1 == e2) {
-            return o1.compareTo(o2);
-          }
-          return e2 - e1;
+      SortedSet<String> tags = new TreeSet<>((o1, o2) -> {
+        if (o1.equals(o2)) {
+          return 0;
+        int e1 = 0, e2 = 0;
+        if (tagErrors.containsKey(o1))
+          e1 = tagErrors.get(o1).value();
+        if (tagErrors.containsKey(o2))
+          e2 = tagErrors.get(o2).value();
+        if (e1 == e2) {
+          return o1.compareTo(o2);
+        }
+        return e2 - e1;

MOV31 MOV31 MOV31 MOV74 UPD42 INS8 MOV74 UPD42 INS8 MOV74 UPD42 INS8 INS60 MOV21 MOV41 INS60 MOV21 MOV41 INS60 MOV21 MOV41 MOV74 INS59 MOV74 INS59 MOV74 INS59 INS42 INS14 INS42 INS14 INS42 INS14 MOV74 INS86 MOV74 INS86 MOV74 INS86 INS59 INS59 MOV8 INS59 INS59 MOV8 INS59 INS59 MOV8 UPD74 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL42 DEL43 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL1 DEL14 DEL14 DEL59 DEL60 DEL8 DEL31 DEL83 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL1 DEL14 DEL14 DEL59 DEL60 DEL8 DEL31 DEL39 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL83 DEL42 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL1 DEL14 DEL14 DEL59 DEL60 DEL8 DEL31