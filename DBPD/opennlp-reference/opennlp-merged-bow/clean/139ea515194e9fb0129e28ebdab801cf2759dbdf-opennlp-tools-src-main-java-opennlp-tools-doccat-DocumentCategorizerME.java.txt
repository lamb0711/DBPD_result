OPENNLP-950: Deprecate DocumentCategorizer.categorzie(String) variants, this closes apache/opennlp#79

+  @Deprecated
-   *
+   * @deprecated will be removed after 1.7.1 release. Don't use it.
+  @Deprecated
+   * @deprecated will be removed after 1.7.1 release. Don't use it.
+  @Deprecated
+   * @deprecated will be removed after 1.7.1 release. Don't use it.
+  @Deprecated
-
-   * Returns a map with the score as a key in ascendng order. The value is a Set of categories with the score.
+   * Returns a map in which the key is the category name and the value is the score
+   *
+   * @param text the input text to classify
+   * @return the score map
+   */
+  @Override
+  public Map<String, Double> scoreMap(String[] text) {
+    Map<String, Double> probDist = new HashMap<>();
+
+    double[] categorize = categorize(text);
+    int catSize = getNumberOfCategories();
+    for (int i = 0; i < catSize; i++) {
+      String category = getCategory(i);
+      probDist.put(category, categorize[getIndex(category)]);
+    }
+    return probDist;
+  }
+
+  /**
+   * Returns a map with the score as a key in ascending order.
+   * The value is a Set of categories with the score.
+   * Many categories can have the same score, hence the Set as value
+   *
+   * @param text the input text to classify
+   * @return the sorted score map
+   * @deprecated will be removed after 1.7.1 release. Don't use it.
+   */
+  @Deprecated
+  @Override
+  public SortedMap<Double, Set<String>> sortedScoreMap(String text) {
+    SortedMap<Double, Set<String>> descendingMap = new TreeMap<>();
+    double[] categorize = categorize(text);
+    int catSize = getNumberOfCategories();
+    for (int i = 0; i < catSize; i++) {
+      String category = getCategory(i);
+      double score = categorize[getIndex(category)];
+      if (descendingMap.containsKey(score)) {
+        descendingMap.get(score).add(category);
+      } else {
+        Set<String> newset = new HashSet<>();
+        newset.add(category);
+        descendingMap.put(score, newset);
+      }
+    }
+    return descendingMap;
+  }
+
+  /**
+   * Returns a map with the score as a key in ascending order.
+   * The value is a Set of categories with the score.
-  public SortedMap<Double, Set<String>> sortedScoreMap(String text) {
+  @Override
+  public SortedMap<Double, Set<String>> sortedScoreMap(String[] text) {

INS31 INS31 INS78 INS78 INS78 INS29 INS78 INS83 INS74 INS42 MOV44 INS8 INS78 INS44 INS29 INS78 INS78 INS83 INS74 INS42 MOV44 INS8 INS78 INS44 INS42 INS65 INS42 INS65 INS42 INS65 MOV65 INS65 INS65 INS42 INS43 INS43 INS43 INS60 INS60 INS60 INS24 INS41 INS42 INS5 INS42 INS65 INS65 MOV65 INS65 INS42 INS42 INS43 INS43 INS74 INS60 INS60 INS60 INS24 INS41 INS65 INS65 INS42 INS5 INS42 INS66 INS66 INS66 INS66 INS66 INS42 INS42 INS42 INS74 INS59 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 INS43 INS85 INS66 INS66 INS66 INS42 INS66 INS66 INS42 INS42 INS43 INS43 INS74 INS59 INS5 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS42 UPD66 INS66 INS42 INS66 INS66 INS43 INS85 INS43 INS43 INS43 INS42 INS14 INS39 INS85 INS42 INS32 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS21 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS39 INS85 INS42 INS32 INS42 INS32 INS39 INS59 INS42 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS32 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS34 INS43 INS59 INS39 INS59 INS32 INS8 INS8 INS43 INS42 INS42 INS32 INS42 INS42 INS42 INS2 INS42 INS42 INS43 INS42 INS42 INS32 INS42 INS2 INS42 INS42 INS42 INS21 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS32 INS74 INS59 INS32 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS42