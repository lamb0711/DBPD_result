OPENNLP-226 Refactored the evaluator listeners:

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1159270 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import java.util.List;
+  private List<EvaluationSampleListener<T>> listeners = new LinkedList<EvaluationSampleListener<T>>();
+  
-   * Evaluates the given reference object.
-   *
+   * Evaluates the given reference sample object.
+   * 
-   * @param sample the sample to be evaluated
+   * @param reference the reference sample.
+   * 
+   * @return the predicted sample
-  public abstract void evaluateSample(T sample);
+  public T processSample(T reference) {
+    // should be overridden by subclass... in the future we will make it abstract.
+    return null;
+  }
+   * Evaluates the given reference object. The default implementation calls
+   * {@link Evaluator#processSample(T)}
+   * 
+   * <p>
+   * <b>note:</b> this method will be changed to private in the future.
+   * Implementations should override {@link Evaluator#processSample(T)} instead.
+   * If this method is override, the implementation has to update the score
+   * after every invocation.
+   * </p>
+   * 
+   * @param sample
+   *          the sample to be evaluated
+   */
+  public void evaluateSample(T sample) {
+    T predicted = processSample(sample);
+    if(sample.equals(predicted)) {
+      notifyCorrectlyClassified(sample, predicted);
+    } else {
+      notifyMissclassified(sample, predicted);
+    }
+  }
+  
+  /**
+   * 
+  
+  public synchronized void addListener(EvaluationSampleListener<T> listener) {
+    this.listeners.add(listener);
+  }
+  
+  public synchronized void removeListener(EvaluationSampleListener<T> listener) {
+    this.listeners.remove(listener);
+  }
+  
+  protected void notifyCorrectlyClassified(T reference, T prediction) {
+    for (EvaluationSampleListener<T> listener : listeners) {
+      listener.correctlyClassified(reference, prediction);
+    }
+  }
+  
+  protected void notifyMissclassified(T reference, T prediction) {
+    for (EvaluationSampleListener<T> listener : listeners) {
+      listener.missclassified(reference, prediction);
+    }   
+  }

INS26 INS26 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS29 INS83 INS43 INS42 INS44 INS8 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS74 INS42 INS14 INS65 INS65 INS65 INS42 INS43 INS42 INS41 INS60 INS25 INS74 INS42 INS21 INS74 INS42 INS21 INS43 INS42 INS43 INS42 INS70 INS43 INS42 INS43 INS42 INS70 INS42 INS43 INS43 INS74 INS66 INS66 INS42 INS66 INS66 INS42 INS33 UPD66 INS65 INS66 INS66 INS66 INS65 INS66 UPD66 INS66 INS66 UPD66 INS43 INS59 INS32 INS8 INS8 INS43 INS43 INS32 INS43 INS43 INS32 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS44 INS42 INS8 INS42 INS42 INS43 INS74 INS68 INS68 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS21 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS74 INS42 INS21 INS74 INS42 INS21 INS42 INS43 INS43 INS42 INS42 INS69 INS42 INS42 INS69 INS42 INS42 INS32 INS32 INS52 INS42 INS52 INS42 INS43 INS43 INS32 INS43 INS43 INS32 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83