OPENNLP-402 Removed top-level interfaces and move the default implementations up to their places. That makes it easier to understand the source code since less super-types are involved.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1424177 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+
- * Interface for tools which support processing of samples of some type
+ * Base class for tools which support processing of samples of some type T
-public interface TypedCmdLineTool extends CmdLineTool {
+public abstract class TypedCmdLineTool<T>
+    extends CmdLineTool {
+   * variable to access the type of the generic parameter.
+   */
+  protected final Class<T> type;
+
+  /**
+   * Constructor with type parameters.
+   *
+   * @param sampleType class of the template parameter
+   */
+  protected TypedCmdLineTool(Class<T> sampleType) {
+    this.type = sampleType;
+  }
+
+  /**
+   * Returns stream factory for the type of this tool for the </code>format</code>.
+   *
+   * @param format data format name
+   * @return stream factory for the type of this tool for the format
+   */
+  protected ObjectStreamFactory<T> getStreamFactory(String format) {
+    ObjectStreamFactory<T> factory = StreamFactoryRegistry.getFactory(type, format);
+    if (null != factory) {
+      return factory;
+    } else {
+      throw new TerminateToolException(1, "Format " + format + " is not found.\n" + getHelp());
+    }
+  }
+
+  /**
+   * Validates arguments using parameters from <code>argProxyInterface</code> and the parameters of the
+   * <code>format</code>.
+   *
+   * @param args arguments
+   * @param argProxyInterface interface with parameter descriptions
+   * @param format data format name
+   * @param <A> A
+   */
+  @SuppressWarnings({"unchecked"})
+  protected <A> void validateAllArgs(String[] args, Class<A> argProxyInterface, String format) {
+    ObjectStreamFactory<T> factory = getStreamFactory(format);
+    String errMessage = ArgumentParser.validateArgumentsLoudly(args, argProxyInterface,
+        factory.<A>getParameters());
+    if (null != errMessage) {
+      throw new TerminateToolException(1, errMessage + "\n" + getHelp(format));
+    }
+  }
+
+  /**
+   * Validates arguments for a format processed by the <code>factory</code>.
+   * @param factory a stream factory
+   * @param args arguments
+   */
+  protected void validateFactoryArgs(ObjectStreamFactory<T> factory, String[] args) {
+    String errMessage = ArgumentParser.validateArgumentsLoudly(args, factory.getParameters());
+    if (null != errMessage) {
+      throw new TerminateToolException(1, "Format parameters are invalid: " + errMessage + "\n" +
+          "Usage: " + ArgumentParser.createUsage(factory.getParameters()));
+    }
+  }
+
+  @Override
+  protected <A> String getBasicHelp(Class<A>... argProxyInterfaces) {
+    Map<String, ObjectStreamFactory<T>> factories = StreamFactoryRegistry.getFactories(type);
+
+    String formatsHelp = " ";
+    if (1 < factories.size()) {
+      StringBuilder formats = new StringBuilder();
+      for (String format : factories.keySet()) {
+        if (!StreamFactoryRegistry.DEFAULT_FORMAT.equals(format)) {
+          formats.append(".").append(format).append("|");
+        }
+      }
+      formatsHelp = "[" + formats.substring(0, formats.length() - 1)+ "] ";
+    }
+
+    return "Usage: " + CLI.CMD + " " + getName() + formatsHelp +
+        ArgumentParser.createUsage(argProxyInterfaces);
+  }
+
+  public String getHelp() {
+    return getHelp("");
+  }
+  
+  /**
-  void run(String format, String args[]);
+  public abstract void run(String format, String args[]);
-  String getHelp(String format);
-}
+  public abstract String getHelp(String format);
+}

INS26 INS40 INS83 INS73 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS42 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS44 INS8 INS29 INS79 INS83 INS73 INS39 INS42 INS44 INS44 INS44 INS8 INS29 INS83 INS39 INS42 INS44 INS44 INS8 INS78 INS83 INS73 INS43 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS83 INS83 INS83 UPD66 INS65 INS43 INS43 INS42 INS65 INS65 INS74 INS42 INS21 INS65 INS65 INS65 INS43 INS43 INS43 INS42 INS60 INS25 INS65 INS65 INS65 INS65 INS65 INS42 INS4 INS42 INS5 INS42 INS74 INS42 INS43 INS42 INS60 INS60 INS25 INS65 INS65 INS65 INS74 INS42 INS5 INS42 INS60 INS25 INS42 INS42 INS42 INS74 INS42 INS60 INS60 INS25 INS41 INS42 INS41 INS66 INS42 INS42 INS66 INS42 INS66 INS43 INS43 INS7 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS74 INS59 INS27 INS8 INS8 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS66 INS66 INS45 INS43 INS85 INS43 INS43 INS42 INS74 INS59 INS43 INS59 INS27 INS8 INS66 INS42 INS66 INS42 INS66 INS43 INS43 INS43 INS85 INS43 INS59 INS27 INS8 INS43 INS43 INS74 INS59 INS43 INS59 INS27 INS8 INS27 INS32 INS42 INS42 INS22 INS42 INS43 INS43 INS42 INS32 INS33 INS42 INS41 INS53 INS42 INS42 INS42 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS33 INS42 INS53 INS42 INS42 INS42 INS42 INS42 INS32 INS33 INS42 INS53 INS42 INS42 INS43 INS43 INS74 INS42 INS32 INS42 INS42 INS45 INS34 INS32 INS60 INS70 INS21 INS45 INS40 INS45 INS32 INS42 INS32 INS42 INS45 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS43 INS59 INS44 INS32 INS8 INS7 INS42 INS42 INS42 INS42 INS43 INS34 INS27 INS42 INS43 INS42 INS43 INS34 INS27 INS42 INS42 INS43 INS34 INS27 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42 INS25 INS42 INS27 INS42 INS45 INS42 INS45 INS32 INS42 INS42 INS42 INS45 INS32 INS42 INS45 INS42 INS45 INS45 INS32 INS43 INS42 INS38 INS8 INS45 INS32 INS45 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS34 INS27 INS42 INS42 INS40 INS42 INS42 INS32 INS32 INS34 INS32 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS45