OPENNLP-579
GeoEntityLinkerImpl: Implemented better scoring using Dice coefficient of bigram, as well as highly improved scoring based on country context. Created an NgramGenerator class and a FuzzyStringMatching class, assuming they would be useful for other linker impls. Implemented Regex based discovery of countrycontext, which enabled proximity based analysis of doctext
Multiple other small efficiencies in the GeoEntityLinker

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1533959 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
- *Finds instances of country mentions in a String, typically a document text.
+ * Finds instances of country mentions in a String, typically a document text.
-
+ *
+  private Map<String, Set<String>> nameCodesMap = new HashMap<String, Set<String>>();
+
+  public Map<String, Set<String>> getNameCodesMap() {
+    return nameCodesMap;
+  }
+
+  public void setNameCodesMap(Map<String, Set<String>> nameCodesMap) {
+    this.nameCodesMap = nameCodesMap;
+  }
+  /**
+   * use regexFind
+   */
+  @Deprecated
-          CountryContextHit hit = new CountryContextHit(entry.getCc1(), docText.indexOf(entry.getFull_name_nd_ro()), docText.indexOf(entry.getFull_name_nd_ro()+ entry.getFull_name_nd_ro().length()));
+          CountryContextHit hit = new CountryContextHit(entry.getCc1(), docText.indexOf(entry.getFull_name_nd_ro()), docText.indexOf(entry.getFull_name_nd_ro() + entry.getFull_name_nd_ro().length()));
+
+  }
+/**
+ * Finds mentions of countries based on a list from MySQL stored procedure called getCountryList. This method finds country mentions in documents,
+ * which is an essential element of the scoring that is done for geo linkedspans. Lazily loads the list from the database.
+ * @param docText the full text of the document
+ * @param properties EntityLinkerProperties for getting database connection
+ * @return
+ */
+  public Map<String, Set<Integer>> regexfind(String docText, EntityLinkerProperties properties) {
+    Map<String, Set<Integer>> hits = new HashMap<String, Set<Integer>>();
+    try {
+      if (con == null) {
+        con = getMySqlConnection(properties);
+      }
+      if (countrydata == null) {
+        countrydata = getCountryData(properties);
+      }
+      for (CountryContextEntry entry : countrydata) {
+        Pattern regex = Pattern.compile(entry.getFull_name_nd_ro(), Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
+        Matcher rs = regex.matcher(docText);
+        String code = entry.getCc1().toLowerCase();
+        while (rs.find()) {
+          Integer start = rs.start();
+          String hit = rs.group().toLowerCase();
+          if (hits.containsKey(code)) {
+            hits.get(code).add(start);
+          } else {
+            Set<Integer> newset = new HashSet<Integer>();
+            newset.add(start);
+            hits.put(code, newset);
+          }
+          if (!hit.equals("")) {
+            if (this.nameCodesMap.containsKey(hit)) {
+              nameCodesMap.get(hit).add(code);
+            } else {
+              HashSet<String> newset = new HashSet<String>();
+              newset.add(code);
+              nameCodesMap.put(hit, newset);
+            }
+          }
+        }
+
+      }
+
+    } catch (Exception ex) {
+      Logger.getLogger(CountryContext.class.getName()).log(Level.SEVERE, null, ex);
+    }
+
+    //System.out.println(hits);
+    return hits;
+  }
+/**
+ * returns a unique list of country codes
+ * @param hits the hits discovered
+ * @return
+ */
+  public static Set<String> getCountryCodes(List<CountryContextHit> hits) {
+    Set<String> ccs = new HashSet<String>();
+    for (CountryContextHit hit : hits) {
+      ccs.add(hit.getCountryCode().toLowerCase());
+    }
+    return ccs;
+  }
+
+  public static String getCountryCodeCSV(Set<String> hits) {
+    String csv = "";
+    if (hits.isEmpty()) {
+      return csv;
+    }
+
+    for (String code : hits) {
+      csv += "," + code;
+    }
+    return csv.substring(1);
-
+/**
+ * reads the list from the database by calling a stored procedure getCountryList
+ * @param properties
+ * @return
+ * @throws SQLException
+ */

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS31 INS31 INS31 INS31 INS83 INS74 INS59 INS83 INS74 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS29 INS78 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS29 INS83 INS83 INS74 INS42 INS44 INS8 INS83 INS83 INS43 INS42 INS44 INS8 INS29 INS43 INS43 INS74 INS42 INS14 INS43 INS43 INS74 INS41 INS74 INS42 INS21 INS65 INS42 INS65 INS65 INS65 INS65 INS43 INS43 INS74 INS43 INS42 INS43 INS42 INS60 INS54 INS41 INS65 INS65 INS65 INS43 INS43 INS74 INS42 INS60 INS70 INS41 INS42 INS74 INS42 INS60 INS25 INS70 INS41 INS65 INS65 INS65 INS65 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS43 INS43 INS42 INS43 INS43 INS74 INS7 INS66 INS66 INS66 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS42 INS42 INS74 INS59 INS8 INS12 INS42 INS66 INS42 INS66 INS42 INS42 INS43 INS43 INS74 INS59 INS44 INS42 INS8 INS42 INS43 INS43 INS43 INS59 INS32 INS8 INS44 INS42 INS8 INS32 INS66 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS42 INS42 INS42 INS43 INS43 INS22 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS14 INS25 INS25 INS70 INS44 INS8 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS41 INS43 INS42 INS21 INS42 INS42 INS34 INS42 INS42 INS43 INS43 INS42 INS42 INS52 INS42 INS42 INS42 INS43 INS43 INS74 INS27 INS8 INS27 INS8 INS44 INS42 INS8 INS43 INS42 INS21 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS43 INS43 INS74 INS42 INS33 INS21 INS42 INS33 INS21 INS43 INS42 INS60 INS60 INS60 INS61 INS42 INS32 INS43 INS43 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS43 INS43 INS7 INS7 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS8 INS32 INS42 INS40 INS33 INS42 INS42 INS42 INS32 INS42 INS45 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS25 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS27 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS43 INS59 INS32 INS8 INS8 INS38 INS8 INS57 INS42 INS42 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS21 INS60 INS21 INS21 INS32 INS25 INS43 INS42 INS42 INS32 INS42 INS32 INS74 INS59 INS32 INS32 INS42 INS42 INS45 INS32 INS8 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS21 INS60 INS21 INS21 INS42 INS42 INS42 INS42 INS42 INS74 INS52 INS42 INS32 INS74 INS59 INS32 INS32 INS43 INS43 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS42 INS42