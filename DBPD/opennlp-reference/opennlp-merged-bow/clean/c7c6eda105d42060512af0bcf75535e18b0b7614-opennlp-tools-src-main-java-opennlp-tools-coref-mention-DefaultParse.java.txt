OPENNLP-56 Improved mention inserting.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1324748 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Stack;
-    if (parse.getType().startsWith("NP#")) {
-      String numberString = parse.getType().substring(3);
+    
+    String type = parse.getType();
+    
+    if (type.contains("#")) {
+      String numberString = type.substring(type.indexOf('#') + 1);
+      
+      if (parse.getSpan().getStart() == p.getSpan().getStart() &&
+          parse.getSpan().getEnd() == p.getSpan().getEnd()) {
+
+        System.out.println("Maybe incorrect measurement!");
+        
+        Stack<Parse> parents = new Stack<Parse>();
+        
+        
+        
+        
+        // get parent and update distance
+        // if match return distance
+        // if not match do it again
+        }
+      
-
+  
-  
-  // Tries to find matching noun phrase, if none is there one is created
-  public static void addMention(int id, Span mention, Parse[] tokens) {
-    
-    Parse startToken = tokens[mention.getStart()];
-    Parse endToken = tokens[mention.getEnd() - 1];
-    Parse commonParent = startToken.getCommonParent(endToken);
-    
-    if (commonParent != null) {
-      Span mentionSpan = new Span(startToken.getSpan().getStart(), endToken.getSpan().getEnd());
-      
-      if (mentionSpan.equals(commonParent.getSpan())) {
-        if (commonParent.getType().equals("NP")) {
-          commonParent.setType("NP#" + id);
-        }
-        else {
-          commonParent.insert(new Parse(commonParent.getText(), mentionSpan, "NP#" + id, 1.0, endToken.getHeadIndex()));
-        }
-      }
-      else {
-        Parse[] kids = commonParent.getChildren();
-        boolean crossingKids = false;
-        for (int ki=0,kn=kids.length;ki<kn;ki++) {
-          if (mentionSpan.crosses(kids[ki].getSpan())){
-            crossingKids = true;
-          }
-        }
-        
-        if (!crossingKids) {
-          commonParent.insert(new Parse(commonParent.getText(), mentionSpan, "NP#" + id, 1.0, endToken.getHeadIndex()));
-        }
-        else {
-          if (commonParent.getType().equals("NP")) {
-            Parse[] grandKids = kids[0].getChildren();
-            if (grandKids.length > 1 && mentionSpan.contains(grandKids[grandKids.length-1].getSpan())) {
-              commonParent.insert(new Parse(commonParent.getText(),commonParent.getSpan(),"NP#" + id,1.0,commonParent.getHeadIndex()));
-            }
-            else {
-              // System.out.println("FAILED TO INSERT (1)");
-            }
-
-          }
-          else {
-            // System.out.println("FAILED TO INSERT (1)");
-          }
-        }
-      }
-    }
-    else {
-      throw new IllegalArgumentException("Tokens must always have a common parent!");
-    }
-  }

INS26 INS40 MOV8 INS25 INS32 INS8 MOV8 INS25 UPD42 MOV32 INS42 INS42 INS45 INS60 MOV41 MOV27 MOV8 INS8 INS43 INS59 INS25 MOV41 INS42 INS42 INS32 INS27 MOV8 INS42 INS42 INS27 INS27 INS27 INS21 INS60 INS32 INS34 INS32 INS32 INS32 INS32 INS32 INS74 INS59 INS42 INS42 INS13 INS32 INS42 INS32 INS42 INS32 INS42 INS32 INS42 INS40 INS42 INS45 INS43 MOV43 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 MOV43 INS42 DEL42 DEL34 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL25 DEL8 DEL25 DEL83 DEL83 DEL39 DEL42 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL2 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL45 DEL42 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL34 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL25 DEL8 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL9 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL42 DEL40 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL42 DEL9 DEL7 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL38 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL45 DEL42 DEL27 DEL34 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL42 DEL42 DEL40 DEL34 DEL27 DEL2 DEL42 DEL32 DEL32 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL45 DEL42 DEL27 DEL34 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL8 DEL25 DEL8 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL31