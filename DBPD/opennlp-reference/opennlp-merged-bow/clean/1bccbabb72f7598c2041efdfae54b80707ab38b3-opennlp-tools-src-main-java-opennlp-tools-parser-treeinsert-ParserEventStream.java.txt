Correct indentation and white spaces

This closes #30

See issue OPENNLP-914

-  public ParserEventStream(ObjectStream<Parse> d, HeadRules rules, ParserEventTypeEnum etype, Dictionary dict) {
+  public ParserEventStream(ObjectStream<Parse> d, HeadRules rules,
+      ParserEventTypeEnum etype, Dictionary dict) {
-    while(parent.getType().equals(node.getType())) {
+    while (parent.getType().equals(node.getType())) {
-    for (int ki=0;ki<kids.length;ki++) {
+    for (int ki = 0; ki < kids.length; ki++) {
-    while(!lc) {
+    while (!lc) {
-    for (int ci=0;ci<chunks.length;ci++) {
+    for (int ci = 0; ci < chunks.length; ci++) {
-    for (int ci=0;ci<chunks.length;ci++) {
+    for (int ci = 0; ci < chunks.length; ci++) {
-          if (debug) System.err.println("Build: "+parent.getType()+" for: "+currentChunks[ci]);
+          if (debug) System.err.println("Build: " + parent.getType() + " for: " + currentChunks[ci]);
-            parseEvents.add(new Event(parent.getType(), buildContextGenerator.getContext(currentChunks, ci)));
+            parseEvents.add(new Event(parent.getType(),
+                buildContextGenerator.getContext(currentChunks, ci)));
-          Parse newParent = new Parse(currentChunks[ci].getText(),currentChunks[ci].getSpan(),parent.getType(),1,0);
+          Parse newParent = new Parse(currentChunks[ci].getText(),
+              currentChunks[ci].getSpan(),parent.getType(),1,0);
-              parseEvents.add(new Event(Parser.COMPLETE, checkContextGenerator.getContext(currentChunks[ci],currentChunks, ci,false)));
+              parseEvents.add(new Event(Parser.COMPLETE,
+                  checkContextGenerator.getContext(currentChunks[ci],currentChunks, ci,false)));
-              parseEvents.add(new Event(Parser.INCOMPLETE, checkContextGenerator.getContext(currentChunks[ci],currentChunks,ci,false)));
+              parseEvents.add(new Event(Parser.INCOMPLETE,
+                  checkContextGenerator.getContext(currentChunks[ci],currentChunks,ci,false)));
-      if (ci == 0){
-        Parse top = new Parse(currentChunks[ci].getText(),new Span(0,currentChunks[ci].getText().length()),AbstractBottomUpParser.TOP_NODE,1,0);
+      if (ci == 0) {
+        Parse top = new Parse(currentChunks[ci].getText(),
+            new Span(0,currentChunks[ci].getText().length()),AbstractBottomUpParser.TOP_NODE,1,0);
-          System.err.println("fontiers mis-aligned: "+currentRightFrontier.size()+" != "+rightFrontier.size()+" "+currentRightFrontier+" "+rightFrontier);
+          System.err.println("fontiers mis-aligned: " + currentRightFrontier.size() + " != "
+              + rightFrontier.size() + " " + currentRightFrontier + " " + rightFrontier);
-        for (int cfi=0;cfi<currentRightFrontier.size();cfi++) {
+        for (int cfi = 0; cfi < currentRightFrontier.size(); cfi++) {
-            if (debug) System.err.println("Looking at attachment site ("+cfi+"): "+cfn.getType()+" ci="+i+" cs="+nonPunctChildCount(cfn)+", "+cfn+" :for "+currentChunks[ci].getType()+" "+currentChunks[ci]+" -> "+parents);
+            if (debug)
+              System.err.println("Looking at attachment site (" + cfi + "): "
+                  + cfn.getType() + " ci=" + i + " cs=" + nonPunctChildCount(cfn)
+                  + ", " + cfn + " :for " + currentChunks[ci].getType() + " "
+                  + currentChunks[ci] + " -> " + parents);
+
-                parseEvents.add(new Event(attachType, attachContextGenerator.getContext(currentChunks, ci, currentRightFrontier, attachNodeIndex)));
+                parseEvents.add(new Event(attachType, attachContextGenerator.getContext(currentChunks,
+                    ci, currentRightFrontier, attachNodeIndex)));
-            if (debug) System.err.println("Skipping ("+cfi+"): "+cfn.getType()+","+cfn.getPreviousPunctuationSet()+" "+cfn+" :for "+currentChunks[ci].getType()+" "+currentChunks[ci]+" -> "+parents);
+            if (debug)
+              System.err.println("Skipping (" + cfi + "): " + cfn.getType() + ","
+                  + cfn.getPreviousPunctuationSet() + " " + cfn + " :for "
+                  + currentChunks[ci].getType() + " " + currentChunks[ci] + " -> " + parents);
-            if (debug) System.err.println("breaking on incomplete:"+cfn.getType()+" "+cfn);
+            if (debug) System.err.println("breaking on incomplete:" + cfn.getType() + " " + cfn);
-        for (int cfi=0;cfi<currentRightFrontier.size();cfi++) {
+        for (int cfi = 0; cfi < currentRightFrontier.size(); cfi++) {
-              ){ //&& frontierNode.getParent().getLabel() == null) {
+              ) { //&& frontierNode.getParent().getLabel() == null) {
-              parseEvents.add(new Event(Parser.ATTACH_SISTER, attachContextGenerator.getContext(currentChunks, ci, currentRightFrontier, cfi)));
+              parseEvents.add(new Event(Parser.ATTACH_SISTER,
+                  attachContextGenerator.getContext(currentChunks, ci, currentRightFrontier, cfi)));
-              parseEvents.add(new Event(Parser.NON_ATTACH, attachContextGenerator.getContext(currentChunks, ci, currentRightFrontier, cfi)));
+              parseEvents.add(new Event(Parser.NON_ATTACH,
+                  attachContextGenerator.getContext(currentChunks, ci, currentRightFrontier, cfi)));
-            if (debug) System.err.println("breaking on incomplete:"+cfn.getType()+" "+cfn);
+            if (debug) System.err.println("breaking on incomplete:" + cfn.getType() + " " + cfn);
-            if (debug) System.err.println("daughter attach a="+attachNode.getType()+":"+attachNode+" d="+daughter+" com="+lastChild(chunks[ci], rightFrontier.get(attachNodeIndex)));
+            if (debug)
+              System.err.println("daughter attach a=" + attachNode.getType() + ":"
+                  + attachNode + " d=" + daughter + " com="
+                  + lastChild(chunks[ci], rightFrontier.get(attachNodeIndex)));
+
-                parseEvents.add(new Event(Parser.COMPLETE, checkContextGenerator.getContext(attachNode,currentChunks,ci,true)));
+                parseEvents.add(new Event(Parser.COMPLETE,
+                    checkContextGenerator.getContext(attachNode,currentChunks,ci,true)));
-                parseEvents.add(new Event(Parser.INCOMPLETE, checkContextGenerator.getContext(attachNode,currentChunks,ci,true)));
+                parseEvents.add(new Event(Parser.INCOMPLETE,
+                    checkContextGenerator.getContext(attachNode,currentChunks,ci,true)));
-            if (debug) System.err.println("sister attach a="+attachNode.getType()+":"+attachNode+" s="+sister+" ap="+attachNode.getParent()+" com="+lastChild(chunks[ci], rightFrontier.get(attachNodeIndex)));
+            if (debug)
+              System.err.println("sister attach a=" + attachNode.getType()
+                + ":" + attachNode + " s=" + sister + " ap=" + attachNode.getParent()
+                + " com=" + lastChild(chunks[ci], rightFrontier.get(attachNodeIndex)));
+
-              currentChunks[0]= newParent;
+              currentChunks[0] = newParent;
-                parseEvents.add(new Event(Parser.COMPLETE, checkContextGenerator.getContext(newParent,currentChunks,ci,true)));
+                parseEvents.add(new Event(Parser.COMPLETE,
+                    checkContextGenerator.getContext(newParent,currentChunks,ci,true)));
-                parseEvents.add(new Event(Parser.INCOMPLETE, checkContextGenerator.getContext(newParent,currentChunks,ci,true)));
+                parseEvents.add(new Event(Parser.INCOMPLETE,
+                    checkContextGenerator.getContext(newParent,currentChunks,ci,true)));
-          for (int ni=0;ni<attachNodeIndex;ni++) {
+          for (int ni = 0; ni < attachNodeIndex; ni++) {
-          throw new RuntimeException("No Attachment: "+chunks[ci]);
+          throw new RuntimeException("No Attachment: " + chunks[ci]);
-      System.err.println("Usage ParserEventStream -[tag|chunk|build|attach] [-fun] [-dict dictionary] [-model model] head_rules < parses");
+      System.err.println("Usage ParserEventStream -[tag|chunk|build|attach] [-fun] "
+          + "[-dict dictionary] [-model model] head_rules < parses");
-    
+

INS27 INS45 INS45 DEL45