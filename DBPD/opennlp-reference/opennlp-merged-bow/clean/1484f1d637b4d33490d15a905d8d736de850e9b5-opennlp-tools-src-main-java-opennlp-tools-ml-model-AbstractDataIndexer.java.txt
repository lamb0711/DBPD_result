OPENNLP-1086: Refactor the Data Indexers

The following has been done:
- Use Java 8 streams where it makes sense
- Deduplicate the index method and have one common one
- Avoid having all predicate Strings twice in memory for cutoff filter

+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.Objects;
+import opennlp.tools.util.ObjectStream;
+  protected List<ComparableEvent> index(ObjectStream<Event> events,
+                                        Map<String, Integer> predicateIndex) throws IOException {
+    Map<String, Integer> omap = new HashMap<>();
+
+    List<ComparableEvent> eventsToCompare = new ArrayList<>();
+
+    Event ev;
+    while ((ev = events.read()) != null) {
+
+      omap.putIfAbsent(ev.getOutcome(), omap.size());
+
+      int[] cons = Arrays.stream(ev.getContext())
+          .map(pred -> predicateIndex.get(pred))
+          .filter(Objects::nonNull)
+          .mapToInt(i -> i).toArray();
+
+      // drop events with no active features
+      if (cons.length > 0) {
+        int ocID = omap.get(ev.getOutcome());
+        eventsToCompare.add(new ComparableEvent(ocID, cons, ev.getValues()));
+      } else {
+        display("Dropped event " + ev.getOutcome() + ":"
+            + Arrays.asList(ev.getContext()) + "\n");
+      }
+    }
+    outcomeLabels = toIndexedStringArray(omap);
+    predLabels = toIndexedStringArray(predicateIndex);
+    return eventsToCompare;
+  }
+   * @deprecated will be removed after 1.8.1 release
+  @Deprecated
-      Integer i = counter.get(s);
-      if (i == null) {
-        counter.put(s, 1);
-      }
-      else {
-        counter.put(s, i + 1);
-      }
+      counter.merge(s, 1, (value, one) -> value + one);
+
+   * Updates the set of predicated and counter with the specified event contexts.
+   * @param ec The contexts/features which occur in a event.
+   * @param counter The predicate counters.
+   */
+  protected static void update(String[] ec, Map<String,Integer> counter) {
+    for (String s : ec) {
+      counter.merge(s, 1, (value, one) -> value + one);
+    }
+  }
+
+  /**
-   * @since maxent 1.2.6
-  protected static String[] toIndexedStringArray(Map<String,Integer> labelToIndexMap) {
-    final String[] array = new String[labelToIndexMap.size()];
-    for (String label : labelToIndexMap.keySet()) {
-      array[labelToIndexMap.get(label)] = label;
-    }
-    return array;
+  protected static String[] toIndexedStringArray(Map<String, Integer> labelToIndexMap) {
+    return labelToIndexMap.entrySet().stream().sorted(Comparator.comparingInt(Map.Entry::getValue))
+        .map(Map.Entry::getKey).toArray(String[]::new);

INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 INS83 INS74 INS42 INS44 INS44 INS43 INS8 INS78 INS29 INS83 INS83 INS39 INS42 INS44 INS44 INS8 INS43 INS43 INS74 INS42 INS74 INS42 INS42 INS60 INS60 INS60 INS61 INS21 INS21 INS41 INS65 INS42 INS65 INS65 INS65 INS5 INS42 INS74 INS42 INS70 INS41 INS42 INS42 INS43 INS43 INS43 INS43 INS43 INS74 INS59 INS74 INS59 INS43 INS59 INS27 INS8 INS7 INS7 INS42 INS66 INS66 INS42 INS66 INS42 INS66 INS43 INS85 INS43 INS43 INS43 INS44 INS42 INS8 INS32 INS42 INS42 INS42 INS42 INS42 INS43 MOV43 MOV43 INS42 INS14 INS43 INS43 INS42 INS14 INS42 INS42 INS36 INS33 INS21 INS60 INS25 INS42 INS32 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS43 INS42 INS21 INS32 INS42 INS89 INS42 INS74 INS42 INS42 INS74 INS7 INS32 INS5 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS32 INS32 UPD42 MOV42 INS90 MOV5 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS32 INS39 INS85 INS42 INS32 INS40 INS34 INS60 INS21 INS21 MOV42 UPD42 MOV42 MOV42 MOV34 INS86 INS42 INS42 INS42 INS34 INS86 INS32 UPD42 MOV42 INS32 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS39 INS59 INS32 INS32 INS59 INS59 INS27 INS59 INS59 INS27 INS32 INS42 UPD42 MOV42 INS42 INS90 INS32 INS42 INS86 INS42 INS32 INS42 INS42 INS14 INS42 INS27 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS42 INS42 MOV42 UPD42 MOV42 INS40 INS42 INS32 INS42 INS90 INS59 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS32 INS45 INS32 INS45 INS32 INS45 INS32 INS42 INS86 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL21 DEL8 DEL25 DEL66 DEL65 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL32 DEL3 DEL59 DEL60 DEL42 DEL44 DEL32 DEL42 DEL42 DEL42 DEL32 DEL2 DEL42 DEL7 DEL21 DEL8 DEL70 DEL42 DEL41