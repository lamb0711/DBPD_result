OPENNLP-429: Moved ngram and pos dictionary dealing from POSModel to POSTaggerFactory. Added a new unit test.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243605 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+import opennlp.model.AbstractModel;
+import opennlp.tools.util.InvalidFormatException;
+import opennlp.tools.util.model.ArtifactSerializer;
+import opennlp.tools.util.model.UncloseableInputStream;
- * 
+ * The factory that provides POS Tagger default implementations and resources 
+  
+  private static final String TAG_DICTIONARY_ENTRY_NAME = "tags.tagdict";
+  private static final String NGRAM_DICTIONARY_ENTRY_NAME = "ngram.dictionary";
-   * will be used to retrieve artifacts.
+   * will be used to retrieve artifacts. This constructor will try to get the ngram
+   * and POS tags dictionaries from the artifact provider.
+    this.ngramDictionary = artifactProvider.getArtifact(NGRAM_DICTIONARY_ENTRY_NAME);
+    this.posDictionary = artifactProvider.getArtifact(TAG_DICTIONARY_ENTRY_NAME);
+  
+  @Override
+  @SuppressWarnings("rawtypes")
+  public Map<String, ArtifactSerializer> createArtifactSerializersMap() {
+    Map<String, ArtifactSerializer> serializers = super.createArtifactSerializersMap();
+    POSDictionarySerializer.register(serializers);
+    // the ngram Dictionary uses a base serializer, we don't need to add it here.
+    return serializers;
+  }
+  
+  @Override
+  public Map<String, Object> createArtifactMap() {
+    Map<String, Object> artifactMap = super.createArtifactMap();
+    
+    if (posDictionary != null)
+      artifactMap.put(TAG_DICTIONARY_ENTRY_NAME, posDictionary);
+
+    if (ngramDictionary != null)
+      artifactMap.put(NGRAM_DICTIONARY_ENTRY_NAME, ngramDictionary);
+    
+    return artifactMap;
+  }
+  
+  public Dictionary getDictionary() {
+    return this.ngramDictionary;
+  }
-    return new DefaultPOSContextGenerator(0, ngramDictionary);
+    return new DefaultPOSContextGenerator(0, getDictionary());
+  
+  static class POSDictionarySerializer implements ArtifactSerializer<POSDictionary> {
+
+    public POSDictionary create(InputStream in) throws IOException,
+        InvalidFormatException {
+      return POSDictionary.create(new UncloseableInputStream(in));
+    }
+
+    public void serialize(POSDictionary artifact, OutputStream out)
+        throws IOException {
+      artifact.serialize(out);
+    }
+
+    @SuppressWarnings("rawtypes")
+    static void register(Map<String, ArtifactSerializer> factories) {
+      factories.put("tagdict", new POSDictionarySerializer());
+    }
+  }
+
+  @Override
+  public void validateArtifactMap() throws InvalidFormatException {
+    
+    // Ensure that the tag dictionary is compatible with the model
+    
+    Object tagdictEntry = this.artifactProvider
+        .getArtifact(TAG_DICTIONARY_ENTRY_NAME);
+
+    if (tagdictEntry != null) {
+      if (tagdictEntry instanceof POSDictionary) {
+        POSDictionary posDict = (POSDictionary) tagdictEntry;
+        
+        Set<String> dictTags = new HashSet<String>();
+        
+        for (String word : posDict) {
+          Collections.addAll(dictTags, posDict.getTags(word)); 
+        }
+        
+        Set<String> modelTags = new HashSet<String>();
+        
+        AbstractModel posModel = this.artifactProvider
+            .getArtifact(POSModel.POS_MODEL_ENTRY_NAME);
+        
+        for  (int i = 0; i < posModel.getNumOutcomes(); i++) {
+          modelTags.add(posModel.getOutcome(i));
+        }
+        
+        if (!modelTags.containsAll(dictTags)) {
+          StringBuilder unknownTag = new StringBuilder();
+          for (String d : dictTags) {
+            if(!modelTags.contains(d)) {
+              unknownTag.append(d).append(" ");
+            }
+          }
+          throw new InvalidFormatException("Tag dictioinary contains tags " +
+                "which are unknown by the model! The unknown tags are: " + unknownTag.toString());
+        }
+      }
+      else {
+        throw new InvalidFormatException("Abbreviations dictionary has wrong type!");
+      }
+    }
+
+    Object ngramDictEntry = this.artifactProvider
+        .getArtifact(NGRAM_DICTIONARY_ENTRY_NAME);
+
+    if (ngramDictEntry != null && !(ngramDictEntry instanceof Dictionary)) {
+      throw new InvalidFormatException("NGram dictionary has wrong type!");
+    }
+    
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS55 INS31 INS65 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS78 INS79 INS83 INS74 INS42 INS8 INS78 INS83 INS74 INS42 INS8 INS83 INS43 INS42 INS8 INS83 INS42 INS74 INS31 INS31 INS31 INS78 INS83 INS39 INS42 INS43 INS8 INS66 INS42 INS42 INS45 INS42 INS42 INS45 INS21 INS21 INS42 INS42 INS45 INS43 INS43 INS43 INS60 INS21 INS41 INS42 INS43 INS43 INS43 INS60 INS25 INS25 INS41 INS42 INS41 INS43 INS43 INS83 INS43 INS42 INS44 INS43 INS43 INS8 INS83 INS39 INS42 INS44 INS44 INS43 INS8 INS79 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS60 INS25 INS60 INS25 UPD66 INS66 INS7 INS7 INS42 INS42 INS42 INS74 INS59 INS32 INS42 INS42 INS42 INS42 INS74 INS59 INS27 INS21 INS27 INS21 INS42 INS22 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS41 INS43 INS42 INS43 INS42 INS42 INS21 INS42 INS45 INS74 INS42 INS21 INS43 INS59 INS27 INS8 INS43 INS59 INS27 INS8 INS22 INS32 INS22 INS32 INS43 INS43 INS43 INS42 INS48 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS48 INS42 INS33 INS32 INS42 INS33 INS32 INS52 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS43 INS43 INS43 INS32 INS42 INS42 INS32 INS42 INS33 INS25 INS42 INS42 INS32 INS27 INS38 INS53 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS14 INS22 INS42 INS42 INS62 INS8 INS8 INS22 INS42 INS42 INS42 INS33 INS36 INS14 INS43 INS42 INS43 INS52 INS42 INS42 INS43 INS60 INS60 INS70 INS60 INS60 INS24 INS25 INS53 INS52 INS42 INS62 INS43 INS45 INS42 INS42 INS42 INS43 INS59 INS74 INS59 INS44 INS42 INS8 INS74 INS59 INS43 INS59 INS58 INS27 INS37 INS8 INS38 INS8 INS14 INS42 INS43 INS42 INS42 INS42 INS11 INS43 INS43 INS42 INS14 INS43 INS42 INS21 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS21 INS32 INS60 INS70 INS53 INS43 INS45 INS42 INS43 INS42 INS42 INS42 INS74 INS42 INS32 INS42 INS42 INS74 INS22 INS42 INS40 INS42 INS34 INS42 INS42 INS32 INS42 INS42 INS42 INS43 INS59 INS44 INS42 INS8 INS14 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS43 INS43 INS52 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS43 INS42 INS25 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS38 INS8 INS42 INS45 INS45 INS32 INS42 INS32 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS42 DEL42