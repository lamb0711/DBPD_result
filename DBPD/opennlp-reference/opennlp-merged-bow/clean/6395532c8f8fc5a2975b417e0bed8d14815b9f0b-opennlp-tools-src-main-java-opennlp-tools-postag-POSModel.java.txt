OPENNLP-429: Moved ngram and pos dictionary dealing from POSModel to POSTaggerFactory. Added a new unit test.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243605 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.OutputStream;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-import opennlp.tools.util.model.UncloseableInputStream;
-  static class POSDictionarySerializer implements ArtifactSerializer<POSDictionary> {
-
-    public POSDictionary create(InputStream in) throws IOException,
-        InvalidFormatException {
-      return POSDictionary.create(new UncloseableInputStream(in));
-    }
-
-    public void serialize(POSDictionary artifact, OutputStream out)
-        throws IOException {
-      artifact.serialize(out);
-    }
-
-    @SuppressWarnings("unchecked")
-    static void register(Map<String, ArtifactSerializer> factories) {
-      factories.put("tagdict", new POSDictionarySerializer());
-    }
-  }
-
-  private static final String POS_MODEL_ENTRY_NAME = "pos.model";
-  private static final String TAG_DICTIONARY_ENTRY_NAME = "tags.tagdict";
-  private static final String NGRAM_DICTIONARY_ENTRY_NAME = "ngram.dictionary";
+  public static final String POS_MODEL_ENTRY_NAME = "pos.model";
-    if (tagDictionary != null)
-      artifactMap.put(TAG_DICTIONARY_ENTRY_NAME, tagDictionary);
-
-    if (ngramDict != null)
-      artifactMap.put(NGRAM_DICTIONARY_ENTRY_NAME, ngramDict);
-    
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings("rawtypes")
-    POSDictionarySerializer.register(serializers);
-
-    // Ensure that the tag dictionary is compatible with the model
-    Object tagdictEntry = artifactMap.get(TAG_DICTIONARY_ENTRY_NAME);
-
-    if (tagdictEntry != null) {
-      if (tagdictEntry instanceof POSDictionary) {
-        POSDictionary posDict = (POSDictionary) tagdictEntry;
-        
-        Set<String> dictTags = new HashSet<String>();
-        
-        for (String word : posDict) {
-          Collections.addAll(dictTags, posDict.getTags(word)); 
-        }
-        
-        Set<String> modelTags = new HashSet<String>();
-        
-        AbstractModel posModel = getPosModel();
-        
-        for  (int i = 0; i < posModel.getNumOutcomes(); i++) {
-          modelTags.add(posModel.getOutcome(i));
-        }
-        
-        if (!modelTags.containsAll(dictTags)) {
-          StringBuilder unknownTag = new StringBuilder();
-          for (String d : dictTags) {
-            if(!modelTags.contains(d)) {
-              unknownTag.append(d).append(" ");
-            }
-          }
-          throw new InvalidFormatException("Tag dictioinary contains tags " +
-          		"which are unknown by the model! The unknown tags are: " + unknownTag.toString());
-        }
-      }
-      else {
-        throw new InvalidFormatException("Abbreviations dictionary has wrong type!");
-      }
-    }
-
-    Object ngramDictEntry = artifactMap.get(NGRAM_DICTIONARY_ENTRY_NAME);
-
-    if (ngramDictEntry != null && !(ngramDictEntry instanceof Dictionary)) {
-      throw new InvalidFormatException("NGram dictionary has wrong type!");
-    }
+    getFactory().validateArtifactMap();
-    return (POSDictionary) artifactMap.get(TAG_DICTIONARY_ENTRY_NAME);
+    return null;
-    return (Dictionary) artifactMap.get(NGRAM_DICTIONARY_ENTRY_NAME);
+    if(getFactory() != null)
+      return getFactory().getDictionary();
+    return null;

MOV31 MOV31 UPD83 MOV78 UPD83 INS42 MOV43 MOV29 UPD83 MOV43 UPD42 UPD45 MOV21 MOV25 MOV60 MOV25 INS41 INS33 INS41 INS33 INS32 INS42 INS32 INS32 UPD42 MOV42 INS42 MOV32 UPD42 MOV42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL42 DEL43 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL31 DEL55 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL43 DEL42 DEL45 DEL59 DEL23 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL25 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL25 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL45 DEL79 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL45 DEL42 DEL43 DEL14 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL39 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL24 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL45 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL45 DEL45 DEL42 DEL42 DEL32 DEL27 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL8 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL83 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL41 DEL8 DEL31