OPENNLP-944: Remove deprecated Indexer code from ML, this closes apache/opennlp#96

-    private static final int DEFAULT_N = 3;
-    private static final double DEFAULT_K = 1d;
+  private static final int DEFAULT_N = 3;
+  private static final double DEFAULT_K = 1d;
-    private final int n;
-    private final double k;
+  private final int n;
+  private final double k;
-    public NGramLanguageModel() {
-        this(DEFAULT_N, DEFAULT_K);
-    }
+  public NGramLanguageModel() {
+    this(DEFAULT_N, DEFAULT_K);
+  }
-    public NGramLanguageModel(int n) {
-        this(n, DEFAULT_K);
-    }
+  public NGramLanguageModel(int n) {
+    this(n, DEFAULT_K);
+  }
-    public NGramLanguageModel(double k) {
-        this(DEFAULT_N, k);
-    }
+  public NGramLanguageModel(double k) {
+    this(DEFAULT_N, k);
+  }
-    public NGramLanguageModel(int n, double k) {
-        this.n = n;
-        this.k = k;
-    }
+  public NGramLanguageModel(int n, double k) {
+    this.n = n;
+    this.k = k;
+  }
-    public NGramLanguageModel(InputStream in) throws IOException {
-        this(in, DEFAULT_N, DEFAULT_K);
-    }
+  public NGramLanguageModel(InputStream in) throws IOException {
+    this(in, DEFAULT_N, DEFAULT_K);
+  }
-    public NGramLanguageModel(InputStream in, double k) throws IOException {
-        this(in, DEFAULT_N, k);
-    }
+  public NGramLanguageModel(InputStream in, double k) throws IOException {
+    this(in, DEFAULT_N, k);
+  }
-    public NGramLanguageModel(InputStream in, int n) throws IOException {
-        this(in, n, DEFAULT_K);
-    }
+  public NGramLanguageModel(InputStream in, int n) throws IOException {
+    this(in, n, DEFAULT_K);
+  }
-    public NGramLanguageModel(InputStream in, int n, double k)
-        throws IOException {
-        super(in);
-        this.n = n;
-        this.k = k;
-    }
+  public NGramLanguageModel(InputStream in, int n, double k)
+      throws IOException {
+    super(in);
+    this.n = n;
+    this.k = k;
+  }
-    @Override public double calculateProbability(StringList sample) {
-        double probability = 0d;
-        if (size() > 0) {
-            for (StringList ngram : NGramUtils.getNGrams(sample, n)) {
-                StringList nMinusOneToken = NGramUtils
-                    .getNMinusOneTokenFirst(ngram);
-                if (size() > 1000000) {
-                    // use stupid backoff
-                    probability += Math.log(
-                        getStupidBackoffProbability(ngram, nMinusOneToken));
-                } else {
-                    // use laplace smoothing
-                    probability += Math.log(
-                        getLaplaceSmoothingProbability(ngram, nMinusOneToken));
-                }
-            }
-            if (Double.isNaN(probability)) {
-                probability = 0d;
-            } else if (probability != 0) {
-                probability = Math.exp(probability);
-            }
-
-        }
-        return probability;
-    }
-
-    @Override public StringList predictNextTokens(StringList tokens) {
-        double maxProb = Double.NEGATIVE_INFINITY;
-        StringList token = null;
-
-        for (StringList ngram : this) {
-            String[] sequence = new String[ngram.size() + tokens.size()];
-            for (int i = 0; i < tokens.size(); i++) {
-                sequence[i] = tokens.getToken(i);
-            }
-            for (int i = 0; i < ngram.size(); i++) {
-                sequence[i + tokens.size()] = ngram.getToken(i);
-            }
-            StringList sample = new StringList(sequence);
-            double v = calculateProbability(sample);
-            if (v > maxProb) {
-                maxProb = v;
-                token = ngram;
-            }
-        }
-
-        return token;
-    }
-
-    private double getLaplaceSmoothingProbability(StringList ngram,
-        StringList nMinusOneToken) {
-        return (getCount(ngram) + k) / (getCount(nMinusOneToken) + k * size());
-    }
-
-    private double getStupidBackoffProbability(StringList ngram,
-        StringList nMinusOneToken) {
-        int count = getCount(ngram);
-        if (nMinusOneToken == null || nMinusOneToken.size() == 0) {
-            return count / size();
-        } else if (count > 0) {
-            return ((double) count) / ((double) getCount(
-                nMinusOneToken)); // maximum likelihood probability
+  @Override
+  public double calculateProbability(StringList sample) {
+    double probability = 0d;
+    if (size() > 0) {
+      for (StringList ngram : NGramUtils.getNGrams(sample, n)) {
+        StringList nMinusOneToken = NGramUtils
+            .getNMinusOneTokenFirst(ngram);
+        if (size() > 1000000) {
+          // use stupid backoff
+          probability += Math.log(
+              getStupidBackoffProbability(ngram, nMinusOneToken));
-            StringList nextNgram = NGramUtils.getNMinusOneTokenLast(ngram);
-            return 0.4d * getStupidBackoffProbability(nextNgram,
-                NGramUtils.getNMinusOneTokenFirst(nextNgram));
+          // use laplace smoothing
+          probability += Math.log(
+              getLaplaceSmoothingProbability(ngram, nMinusOneToken));
+      }
+      if (Double.isNaN(probability)) {
+        probability = 0d;
+      } else if (probability != 0) {
+        probability = Math.exp(probability);
+      }
+
+    return probability;
+  }
+
+  @Override
+  public StringList predictNextTokens(StringList tokens) {
+    double maxProb = Double.NEGATIVE_INFINITY;
+    StringList token = null;
+
+    for (StringList ngram : this) {
+      String[] sequence = new String[ngram.size() + tokens.size()];
+      for (int i = 0; i < tokens.size(); i++) {
+        sequence[i] = tokens.getToken(i);
+      }
+      for (int i = 0; i < ngram.size(); i++) {
+        sequence[i + tokens.size()] = ngram.getToken(i);
+      }
+      StringList sample = new StringList(sequence);
+      double v = calculateProbability(sample);
+      if (v > maxProb) {
+        maxProb = v;
+        token = ngram;
+      }
+    }
+
+    return token;
+  }
+
+  private double getLaplaceSmoothingProbability(StringList ngram,
+                                                StringList nMinusOneToken) {
+    return (getCount(ngram) + k) / (getCount(nMinusOneToken) + k * size());
+  }
+
+  private double getStupidBackoffProbability(StringList ngram,
+                                             StringList nMinusOneToken) {
+    int count = getCount(ngram);
+    if (nMinusOneToken == null || nMinusOneToken.size() == 0) {
+      return count / size();
+    } else if (count > 0) {
+      return ((double) count) / ((double) getCount(
+          nMinusOneToken)); // maximum likelihood probability
+    } else {
+      StringList nextNgram = NGramUtils.getNMinusOneTokenLast(ngram);
+      return 0.4d * getStupidBackoffProbability(nextNgram,
+          NGramUtils.getNMinusOneTokenFirst(nextNgram));
+    }
+  }

