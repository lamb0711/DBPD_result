Remove deprecated API from the POS Tagger

See issue OPENNLP-883

-   * Initializes the current instance with the provided
-   * model and provided beam size.
-   *
-   * @param model
-   * @param beamSize
-   *
-   * @deprecated the beam size should be specified in the params during training
-   */
-  @Deprecated
-  public POSTaggerME(POSModel model, int beamSize, int cacheSize) {
-    POSTaggerFactory factory = model.getFactory();
-
-    modelPackage = model;
-
-    // TODO: Why is this the beam size?! not cache size?
-    contextGen = factory.getPOSContextGenerator(beamSize);
-    tagDictionary = factory.getTagDictionary();
-    size = beamSize;
-
-    sequenceValidator = factory.getSequenceValidator();
-
-    if (model.getPosSequenceModel() != null) {
-      this.model = model.getPosSequenceModel();
-    }
-    else {
-      this.model = new opennlp.tools.ml.BeamSearch<String>(beamSize,
-          model.getPosModel(), cacheSize);
-    }
-  }
-
-  /**
-   * Initializes the current instance with the provided model
-   * and the default beam size of 3.
+   * Initializes the current instance with the provided model.
-   * Returns the number of different tags predicted by this model.
-   *
-   * @return the number of different tags predicted by this model.
-   * @deprecated use getAllPosTags instead!
-   */
-  @Deprecated
-  public int getNumTags() {
-
-    // TODO: Lets discuss on the dev list how to do this properly!
-    // Nobody needs the number of tags, if the tags are not available.
-
-    return model.getOutcomes().length;
-  }
-
-  /**
-  @Deprecated
-  public List<String> tag(List<String> sentence) {
-    bestSequence = model.bestSequence(sentence.toArray(new String[sentence.size()]), null, contextGen, sequenceValidator);
-    return bestSequence.getOutcomes();
-  }
-
-  @Deprecated
-  public Sequence[] topKSequences(List<String> sentence) {
-    return model.bestSequences(size, sentence.toArray(new String[sentence.size()]), null,
-        contextGen, sequenceValidator);
-  }
-
-  @Deprecated
-  public String tag(String sentence) {
-    List<String> toks = new ArrayList<String>();
-    StringTokenizer st = new StringTokenizer(sentence);
-    while (st.hasMoreTokens())
-      toks.add(st.nextToken());
-    List<String> tags = tag(toks);
-    StringBuilder sb = new StringBuilder();
-    for (int i = 0; i < tags.size(); i++)
-      sb.append(toks.get(i) + "/" + tags.get(i) + " ");
-    return sb.toString().trim();
-  }
-
-  /**
-   * @deprecated use
-   *             {@link #train(String, ObjectStream, TrainingParameters, POSTaggerFactory)}
-   *             instead and pass in a {@link POSTaggerFactory}.
-   */
-  public static POSModel train(String languageCode, ObjectStream<POSSample> samples, TrainingParameters trainParams,
-      POSDictionary tagDictionary, Dictionary ngramDictionary) throws IOException {
-
-    return train(languageCode, samples, trainParams, new POSTaggerFactory(
-        ngramDictionary, tagDictionary));
-  }
-
-  /**
-   * @deprecated use
-   *             {@link #train(String, ObjectStream, TrainingParameters, POSTaggerFactory)}
-   *             instead and pass in a {@link POSTaggerFactory} and a
-   *             {@link TrainingParameters}.
-   */
-  @Deprecated
-  public static POSModel train(String languageCode, ObjectStream<POSSample> samples, ModelType modelType, POSDictionary tagDictionary,
-      Dictionary ngramDictionary, int cutoff, int iterations) throws IOException {
-
-    TrainingParameters params = new TrainingParameters();
-
-    params.put(TrainingParameters.ALGORITHM_PARAM, modelType.toString());
-    params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(iterations));
-    params.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(cutoff));
-
-    return train(languageCode, samples, params, tagDictionary, ngramDictionary);
-  }
-

MOV65 UPD66 DEL66 DEL66 DEL65 DEL42 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL7 DEL21 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL33 DEL27 DEL52 DEL42 DEL22 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL52 DEL42 DEL22 DEL40 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL42 DEL14 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL66 DEL42 DEL65 DEL66 DEL65 DEL66 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL42 DEL22 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL33 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL33 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL78 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL61 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL24 DEL42 DEL42 DEL32 DEL42 DEL32 DEL41 DEL8 DEL31 DEL66 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL14 DEL32 DEL41 DEL8 DEL31 DEL66 DEL42 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL42 DEL43 DEL69 DEL68 DEL65 DEL66 DEL42 DEL65 DEL66 DEL42 DEL65 DEL66 DEL65 DEL29 DEL42 DEL78 DEL83 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL39 DEL42 DEL44 DEL39 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31