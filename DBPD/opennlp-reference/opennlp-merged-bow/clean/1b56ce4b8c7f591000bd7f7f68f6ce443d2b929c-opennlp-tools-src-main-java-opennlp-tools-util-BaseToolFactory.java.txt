OPENNLP-500: Each ToolFactory now uses the ExtensionLoader to instantiate subclasses, and implements a protected init method that takes the required arguments. To make it easier to instantiate the tool factory from api we kept the constructor that takes the same arguments, internally it calls the init method.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1361308 13f79535-47bb-0310-9956-ffa450edef68

-  public void init(ArtifactProvider artifactProvider) {
+  protected void init(ArtifactProvider artifactProvider) {
-  
-  @SuppressWarnings("unchecked")
-  protected
-  static Class<? extends BaseToolFactory> loadSubclass(
-      String factoryName) throws InvalidFormatException {
-    Class<? extends BaseToolFactory> factoryClass = null;
-    try {
-      factoryClass = (Class<? extends BaseToolFactory>) Class
-          .forName(factoryName);
-    } catch (ClassNotFoundException e) {
-      throw new NoClassDefFoundError(
-          "Could not find the factory class in the classpath: " + factoryName);
-    } catch (ClassCastException e) {
-      throw new InvalidFormatException(
-          "The factory class does not extend BaseToolFactory: " + factoryName,
-          e);
-    }
-    return factoryClass;
-  }
-  

UPD83 DEL42 DEL45 DEL79 DEL83 DEL83 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL43 DEL76 DEL74 DEL42 DEL42 DEL42 DEL32 DEL11 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL27 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31