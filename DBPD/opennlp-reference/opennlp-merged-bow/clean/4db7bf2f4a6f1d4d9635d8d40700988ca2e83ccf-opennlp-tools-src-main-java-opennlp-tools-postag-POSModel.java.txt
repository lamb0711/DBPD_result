OPENNLP-429: Added mechanism to save the factory class name, and to load it back.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1242648 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.Constructor;
+  private static final String FACTORY_NAME = "pos.factory";
+    this(languageCode, posModel, tagDictionary, ngramDict, manifestInfoEntries, null);
+  }
+
+  public POSModel(String languageCode, AbstractModel posModel,
+      POSDictionary tagDictionary, Dictionary ngramDict) {
+    this (languageCode, posModel, tagDictionary, ngramDict, null, null);
+  }
+  
+  public POSModel(String languageCode, AbstractModel posModel,
+      POSDictionary tagDictionary, Dictionary ngramDict, Map<String, String> manifestInfoEntries, Factory posFactory) {
+
+    // The factory is optional
+    if (posFactory!=null)
+        setManifestProperty(FACTORY_NAME, posFactory.getClass().getCanonicalName());
+    
-      POSDictionary tagDictionary, Dictionary ngramDict) {
-    this (languageCode, posModel, tagDictionary, ngramDict, null);
+      POSDictionary tagDictionary, Dictionary ngramDict, Factory f) {
+    this (languageCode, posModel, tagDictionary, ngramDict, null, f);
-
+    
+    // validate the factory
+    String factoryName = getManifestProperty(FACTORY_NAME);
+    if(factoryName != null) {
+      try {
+        Class.forName(factoryName);
+      } catch (ClassNotFoundException e) {
+        throw new InvalidFormatException("Could not find the POS factory class: " + factoryName);
+      }
+    }
+    
+  
+  public Factory getFactory() {
+    String factoryName = getManifestProperty(FACTORY_NAME);
+    Factory theFactory = null;
+    Class<?> factoryClass = null;
+    if(factoryName != null) {
+      try {
+        factoryClass = Class.forName(factoryName);
+      } catch (ClassNotFoundException e) {
+        // already validated
+        return null;
+      }
+    }
+    
+    Constructor<?> constructor = null;
+    if(factoryClass != null) {
+      try {
+        constructor = factoryClass.getConstructor(Dictionary.class, POSDictionary.class);
+        theFactory = (Factory) constructor.newInstance(getNgramDictionary(), getTagDictionary());
+      } catch (NoSuchMethodException e) {
+        // ignore, will try another constructor
+      } catch (Exception e) {
+        throw new IllegalArgumentException("Could not load POS Factory using Dictionary, POSDictionary constructor: " + factoryName, e);
+      }
+      if(theFactory == null) {
+        try {
+          factoryClass.getConstructor();
+          try {
+            theFactory = (Factory) constructor.newInstance();
+          } catch (Exception e) {
+            throw new IllegalArgumentException("Could not load POS Factory using default constructor: " + factoryName, e);
+          }
+        } catch (NoSuchMethodException e) {
+          // we couldn't load the class... raise an exception
+          throw new IllegalArgumentException("Could not load POS Factory: " + factoryName, e);
+        }
+      }
+    }
+    return theFactory;
+  }

INS26 MOV31 INS40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS44 INS83 INS42 INS44 INS44 INS44 INS44 INS44 INS8 INS83 INS43 INS42 INS8 INS42 INS42 INS45 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS17 INS43 INS42 INS25 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS43 INS42 INS17 INS60 INS25 INS42 INS60 INS60 INS60 INS25 INS60 INS25 INS41 INS42 INS42 INS42 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS33 INS33 INS42 INS27 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS43 INS59 INS74 INS59 INS27 INS8 INS74 INS59 INS27 INS8 INS42 INS42 INS42 INS42 INS42 INS33 INS32 INS42 INS42 INS32 INS42 INS33 INS54 INS42 INS42 INS32 INS42 INS42 INS33 INS43 INS76 INS42 INS33 INS42 INS33 INS54 INS43 INS76 INS42 INS33 INS42 INS33 INS54 INS25 INS42 INS42 INS32 INS42 INS42 INS8 INS12 INS42 INS42 INS42 INS8 INS12 INS42 INS8 INS12 INS12 INS27 INS8 INS32 INS42 INS21 INS44 INS8 INS21 INS44 INS8 INS21 INS21 INS44 INS8 INS44 INS8 INS42 INS33 INS54 INS42 INS42 INS32 INS43 INS42 INS53 INS7 INS43 INS42 INS41 INS7 INS7 INS43 INS42 INS43 INS42 INS53 INS8 INS12 INS42 INS42 INS42 INS42 INS14 INS42 INS32 INS42 INS33 INS42 INS32 INS42 INS11 INS42 INS42 INS14 INS21 INS54 INS44 INS8 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS57 INS57 INS43 INS32 INS43 INS27 INS42 INS32 INS8 INS12 INS43 INS42 INS53 INS42 INS45 INS42 INS43 INS43 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS42 INS42 INS42 INS21 INS44 INS8 INS42 INS14 INS42 INS42 INS42 INS42 INS7 INS43 INS42 INS53 INS43 INS27 INS42 INS42 INS11 INS42 INS14 INS42 INS45 INS42 INS43 INS32 INS43 INS27 INS42 INS42 INS42 INS42 INS42 INS45 INS42