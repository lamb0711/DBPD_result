OPENNLP-241 Unified model validation. Model is now validated independent on which constructor is used to create it.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1154873 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import opennlp.model.BinaryFileDataReader;
-import opennlp.model.GenericModelReader;
-    if (buildModel == null) {
-      throw new IllegalArgumentException("buildModel must not be null!");
-    }
-    if (checkModel == null) {
-      throw new IllegalArgumentException("checkModel must not be null!");
-    }
-    if (parserTagger == null) {
-      throw new IllegalArgumentException("parserTagger must not be null!");
-    }
-    if (chunkerTagger == null) {
-      throw new IllegalArgumentException("chunkerTagger must not be null!");
-    }
-    if (headRules == null) {
-        throw new IllegalArgumentException("headRules must not be null!");
-    }
+    
+    checkArtifactMap();
-  private static AbstractModel readModel(String fileName) throws FileNotFoundException, IOException {
-    return new GenericModelReader(new BinaryFileDataReader(new FileInputStream(fileName))).
-        getModel();
+  @Override
+  protected void validateArtifactMap() throws InvalidFormatException {
+    super.validateArtifactMap();
+    
+    if (!(artifactMap.get(BUILD_MODEL_ENTRY_NAME)  instanceof AbstractModel)) {
+      throw new InvalidFormatException("Missing the build model!");
+    }
+    
+    ParserType modelType = getParserType();
+    
+    if (modelType != null) {
+      if (ParserType.CHUNKING.equals(modelType)) {
+        if (artifactMap.get(ATTACH_MODEL_ENTRY_NAME) != null)
+            throw new InvalidFormatException("attachModel must be null for chunking parser!");
+      }
+      else if (ParserType.TREEINSERT.equals(modelType)) {
+        if (!(artifactMap.get(ATTACH_MODEL_ENTRY_NAME)  instanceof AbstractModel))
+          throw new InvalidFormatException("attachModel must not be null!");
+      }
+      else {
+        throw new InvalidFormatException("Unkown ParserType!");
+      }
+    }
+    else {
+      throw new InvalidFormatException("Missing the parser type property!");
+    }
+    
+    if (!(artifactMap.get(CHECK_MODEL_ENTRY_NAME)  instanceof AbstractModel)) {
+      throw new InvalidFormatException("Missing the check model!");
+    }
+    
+    if (!(artifactMap.get(PARSER_TAGGER_MODEL_ENTRY_NAME)  instanceof POSModel)) {
+      throw new InvalidFormatException("Missing the tagger model!");
+    }
+    
+    if (!(artifactMap.get(CHUNKER_TAGGER_MODEL_ENTRY_NAME)  instanceof ChunkerModel)) {
+      throw new InvalidFormatException("Missing the chunker model!");
+    }
+    
+    if (!(artifactMap.get(HEAD_RULES_MODEL_ENTRY_NAME)  instanceof HeadRules)) {
+      throw new InvalidFormatException("Missing the head rules!");
+    }

INS78 UPD83 INS39 INS42 INS43 INS8 INS21 INS42 INS42 INS21 INS25 INS60 INS25 INS25 INS25 INS25 INS25 INS32 INS48 INS38 INS8 INS43 INS59 INS27 INS8 INS8 INS38 INS8 INS38 INS8 INS38 INS8 INS38 INS8 INS42 INS42 INS36 INS53 INS42 INS42 INS32 INS42 INS33 INS25 INS53 INS36 INS53 INS36 INS53 INS36 INS53 INS36 INS53 INS62 INS14 INS42 INS32 INS8 INS25 INS14 INS62 INS14 INS62 INS14 INS62 INS14 INS62 INS14 INS32 INS43 INS43 INS45 INS40 INS42 INS42 INS25 INS32 INS8 INS8 INS43 INS45 INS32 INS43 INS43 INS45 INS32 INS43 UPD43 MOV43 INS45 INS32 INS43 INS43 INS45 INS32 INS43 INS43 INS45 INS42 INS42 INS42 INS42 UPD42 MOV42 INS27 INS53 INS40 INS42 INS42 INS25 INS53 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS42 INS42 INS32 INS33 INS14 INS38 INS53 INS14 INS42 INS42 INS42 INS43 INS45 INS36 INS14 INS43 INS45 UPD42 MOV42 INS62 INS43 INS45 INS42 INS32 MOV43 UPD42 MOV42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL33 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL83 DEL42 DEL43 DEL42 DEL44 DEL43 DEL43 DEL43 DEL43 DEL42 DEL14 DEL14 DEL14 DEL32 DEL41 DEL8