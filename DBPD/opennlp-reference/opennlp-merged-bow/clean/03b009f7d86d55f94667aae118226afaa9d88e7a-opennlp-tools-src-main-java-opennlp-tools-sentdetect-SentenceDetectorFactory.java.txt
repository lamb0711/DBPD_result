OPENNLP-434: implemented the missing methods of SentenceDetectorFactory

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1292591 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import opennlp.tools.dictionary.Dictionary;
-import opennlp.tools.util.model.ArtifactSerializer;
-  private Set<String> abbreviations;
+  private Dictionary abbreviationDictionary;
+  private Boolean useTokenEnd = null;
+
+  private static final String ABBREVIATIONS_ENTRY_NAME = "abbreviations.dictionary";
+  private static final String EOS_CHARACTERS_PROPERTY = "eosCharacters";
+  private static final String TOKEN_END_PROPERTY = "useTokenEnd";
-   * @param abbreviations
+   * @param abbreviationDictionary
-  public SentenceDetectorFactory(String languageCode,
-      Set<String> abbreviations, char[] eosCharacters) {
+  public SentenceDetectorFactory(String languageCode, boolean useTokenEnd,
+      Dictionary abbreviationDictionary, char[] eosCharacters) {
+    this.useTokenEnd = useTokenEnd;
-    this.abbreviations = abbreviations;
+    this.abbreviationDictionary = abbreviationDictionary;
-    // TODO: implement
-  }
-  @Override
-  @SuppressWarnings("rawtypes")
-  public Map<String, ArtifactSerializer> createArtifactSerializersMap() {
-    Map<String, ArtifactSerializer> serializers = super
-        .createArtifactSerializersMap();
-    // TODO: include serializers
-    return serializers;
+    if (this.artifactProvider.getManifestProperty(TOKEN_END_PROPERTY) == null)
+      throw new InvalidFormatException(TOKEN_END_PROPERTY
+          + " is a mandatory property!");
+
+    Object abbreviationsEntry = this.artifactProvider
+        .getArtifact(ABBREVIATIONS_ENTRY_NAME);
+
+    if (abbreviationsEntry != null
+        && !(abbreviationsEntry instanceof Dictionary)) {
+      throw new InvalidFormatException(
+          "Abbreviations dictionary has wrong type!");
+    }
-    // TODO: include artifacts
+
+    // Abbreviations are optional
+    if (abbreviationDictionary != null)
+      artifactMap.put(ABBREVIATIONS_ENTRY_NAME, abbreviationDictionary);
+
+  @Override
+  public Map<String, String> createManifestEntries() {
+    Map<String, String> manifestEntries = super.createManifestEntries();
+
+    manifestEntries.put(TOKEN_END_PROPERTY, Boolean.toString(useTokenEnd));
+
+    // EOS characters are optional
+    if (eosCharacters != null)
+      manifestEntries.put(EOS_CHARACTERS_PROPERTY,
+          eosCharArrayToString(eosCharacters));
+
+    return manifestEntries;
+  }
+
-      String languageCode, Set<String> abbreviations, char[] eosCharacters) {
+      String languageCode, boolean useTokenEnd,
+      Dictionary abbreviationDictionary, char[] eosCharacters) {
-    // TODO: load it from the model
+    if (this.eosCharacters == null) {
+      if (artifactProvider != null) {
+        String prop = this.artifactProvider
+            .getManifestProperty(EOS_CHARACTERS_PROPERTY);
+        if (prop != null) {
+          this.eosCharacters = eosStringToCharArray(prop);
+        }
+      } else {
+        // get from language dependent factory
+        Factory f = new Factory();
+        this.eosCharacters = f.getEOSCharacters(languageCode);
+      }
+    }
-  public Set<String> getAbbreviations() {
-    // TODO: load it from the model
-    return this.abbreviations;
+  public boolean isUseTokenEnd() {
+    if (this.useTokenEnd == null && artifactProvider != null) {
+      this.useTokenEnd = Boolean.valueOf(artifactProvider
+          .getManifestProperty(TOKEN_END_PROPERTY));
+    }
+    return this.useTokenEnd;
+  }
+
+  public Dictionary getAbbreviationDictionary() {
+    if (this.abbreviationDictionary == null && artifactProvider != null) {
+      this.abbreviationDictionary = artifactProvider
+          .getArtifact(ABBREVIATIONS_ENTRY_NAME);
+    }
+    return this.abbreviationDictionary;
-    // TODO: load it from the model
+    if (this.languageCode == null && artifactProvider != null) {
+      this.languageCode = this.artifactProvider.getLanguage();
+    }
-    if (eosChars != null && eosChars.length > 0) {
-      return f.createSentenceContextGenerator(getAbbreviations(), eosChars);
+    Set<String> abbs = null;
+    Dictionary abbDict = getAbbreviationDictionary();
+    if (abbDict != null) {
+      abbs = abbDict.asStringSet();
-      return f.createSentenceContextGenerator(this.languageCode,
-          getAbbreviations());
+      abbs = Collections.emptySet();
+    if (eosChars != null && eosChars.length > 0) {
+      return f.createSentenceContextGenerator(abbs, eosChars);
+    } else {
+      return f.createSentenceContextGenerator(this.languageCode, abbs);
+    }
+  }
+
+  private String eosCharArrayToString(char[] eosCharacters) {
+    String eosString = "";
+    for (int i = 0; i < eosCharacters.length; i++)
+      eosString += eosCharacters[i];
+    return eosString;
+  }
+
+  private char[] eosStringToCharArray(String eosCharacters) {
+    return eosCharacters.toCharArray();

MOV26 INS26 MOV31 INS40 UPD40 INS23 INS23 INS23 INS23 INS23 INS31 INS31 INS31 INS31 MOV83 INS43 INS59 INS83 INS43 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS43 MOV59 INS83 INS83 INS83 INS43 INS59 INS44 INS44 MOV78 INS8 MOV78 UPD74 MOV74 UPD42 INS44 INS8 MOV83 INS39 INS42 INS8 INS83 INS43 UPD42 MOV42 MOV8 INS8 INS83 INS43 INS42 INS44 INS8 INS83 INS5 INS42 INS44 INS8 INS42 INS42 INS42 INS42 INS33 UPD42 MOV42 INS42 INS45 MOV42 UPD42 INS45 INS42 INS42 INS45 INS39 INS42 INS43 UPD42 MOV42 INS21 INS25 INS60 INS25 INS25 UPD43 INS21 INS25 INS39 INS42 INS43 UPD42 INS25 MOV41 INS25 INS41 UPD42 MOV42 INS25 INS25 MOV41 INS60 INS60 INS25 INS42 INS5 INS42 INS60 INS24 INS41 INS39 INS85 INS43 INS42 INS41 UPD42 UPD42 MOV42 INS7 INS27 INS53 INS43 INS59 INS27 INS8 INS27 INS21 UPD42 UPD74 MOV74 INS32 INS27 INS21 UPD42 INS42 INS27 INS8 INS27 INS8 INS22 INS27 INS8 INS27 INS8 MOV74 INS59 INS43 INS59 INS27 INS8 INS8 INS39 INS85 INS43 INS59 INS58 INS27 INS37 INS21 INS42 INS42 INS32 INS22 INS42 UPD42 INS32 INS33 INS14 INS42 INS42 INS32 INS27 INS38 INS53 INS42 INS33 INS32 UPD43 UPD42 INS42 INS42 INS42 INS32 INS42 INS33 INS32 INS22 INS33 INS25 INS27 INS27 INS21 INS52 INS42 INS27 INS27 INS21 UPD42 INS27 INS27 INS21 INS42 INS33 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS42 INS42 INS45 INS39 INS59 INS42 INS40 INS42 INS7 INS42 INS42 INS52 INS42 UPD42 INS22 INS42 INS42 INS43 INS27 INS22 INS42 INS42 INS42 INS33 INS36 INS14 INS42 INS42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS52 INS42 INS27 INS8 INS8 INS22 INS33 INS42 INS33 INS7 INS22 INS33 INS42 INS33 INS7 INS22 INS33 INS42 INS33 INS7 INS42 INS7 INS7 INS42 INS34 INS42 INS2 INS52 INS42 INS42 INS42 INS45 INS52 INS42 INS62 INS43 INS45 INS42 INS42 INS42 INS33 INS60 INS25 INS60 INS21 INS52 INS42 INS22 INS32 INS52 INS42 INS22 INS32 INS52 INS42 INS22 INS32 INS42 INS32 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS42 INS42 INS43 INS42 INS43 INS59 INS27 INS8 INS43 INS59 INS7 INS52 INS42 INS42 INS42 INS32 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS42 INS14 INS22 INS32 INS42 INS42 INS42 INS52 INS42 INS22 INS42 INS42 INS7 INS43 INS52 INS42 INS42 INS42 INS42 INS52 INS42 INS22 INS32 INS42 INS52 INS42 INS42 INS42 DEL43 DEL43 DEL74 DEL23 DEL42 DEL43 DEL43 DEL74 DEL44 DEL8 DEL42 DEL45 DEL79 DEL8 DEL42 DEL43 DEL43 DEL74 DEL31 DEL8 DEL32 DEL32