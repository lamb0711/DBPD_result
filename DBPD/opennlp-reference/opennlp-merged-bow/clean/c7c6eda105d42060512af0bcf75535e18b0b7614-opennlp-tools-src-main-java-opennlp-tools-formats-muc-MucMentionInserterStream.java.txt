OPENNLP-56 Improved mention inserting.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1324748 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import opennlp.tools.coref.mention.DefaultParse;
+import opennlp.tools.coref.mention.Mention;
+import opennlp.tools.coref.mention.MentionFinder;
+import opennlp.tools.coref.mention.PTBHeadFinder;
+import opennlp.tools.coref.mention.PTBMentionFinder;
+import opennlp.tools.formats.muc.MucCorefContentHandler.CorefMention;
+import opennlp.tools.parser.Parse;
+import opennlp.tools.util.Span;
-// This one is responsible to insert the mentions into the parse.
+/**
+ * The mention insert is responsible to insert the mentions from the training data
+ * into the parse trees.
+ */
+  private static Set<String> entitySet = new HashSet<String>(Arrays.asList(DefaultParse.NAME_TYPES));
+  
+  private final MentionFinder mentionFinder;
+  
+    
+    mentionFinder = PTBMentionFinder.getInstance(PTBHeadFinder.getInstance());
+  private static Span getMinSpan(Parse p, CorefMention mention) {
+    String min = mention.min;
+    
+    if (min != null) {
+      
+      int startOffset = p.toString().indexOf(min);
+      int endOffset = startOffset + min.length();
+      
+      Parse tokens[] = p.getTagNodes();
+      
+      int beginToken = -1;
+      int endToken = -1;
+      
+      for (int i = 0; i < tokens.length; i++) {
+        if (tokens[i].getSpan().getStart() == startOffset) {
+          beginToken = i;
+        }
+        
+        if (tokens[i].getSpan().getEnd() == endOffset) {
+          endToken = i + 1;
+          break;
+        }
+      }
+      
+      if (beginToken != -1 && endToken != -1) {
+        return new Span(beginToken, endToken);
+      }
+    }
+    
+    return null;
+  }
+  
+  public static boolean addMention(int id, Span mention, Parse[] tokens) {
+
+	boolean failed = false;
+    
+    Parse startToken = tokens[mention.getStart()];
+    Parse endToken = tokens[mention.getEnd() - 1];
+    Parse commonParent = startToken.getCommonParent(endToken);
+    
+    if (commonParent != null) {
+//      Span mentionSpan = new Span(startToken.getSpan().getStart(), endToken.getSpan().getEnd());
+      
+      if (entitySet.contains(commonParent.getType())) {
+        commonParent.getParent().setType("NP#" + id);            
+      }
+      else if (commonParent.getType().equals("NML")) {
+        commonParent.setType("NML#" + id);
+      }
+      else if (commonParent.getType().equals("NP")) {
+        commonParent.setType("NP#" + id);
+      }
+      else {
+        System.out.println("Inserting mention failed: " + commonParent.getType() + " Failed id: " + id);
+        failed = true;
+      }
+    }
+    else {
+      throw new IllegalArgumentException("Tokens must always have a common parent!");
+    }
+    
+    return !failed;
+  }
+  
-    
-    // for each parse ...
-    // get mentions ...
-    
-    return null;
+    if (sample != null) {
+
+      List<Parse> mentionParses = new ArrayList<Parse>();
+      
+      List<CorefMention[]> allMentions = sample.getMentions();
+      List<Parse> allParses = sample.getParses();
+      
+      for (int si = 0; si < allMentions.size(); si++) {
+        CorefMention mentions[] = allMentions.get(si);
+        Parse p = allParses.get(si);
+        
+        for (Mention extent : mentionFinder.getMentions(new DefaultParse(p, si))) {
+          if (extent.getParse() == null) {
+            // not sure how to get head index
+            Parse snp = new Parse(p.getText(),extent.getSpan(),"NML",1.0,0);
+            p.insert(snp);
+          }
+        }
+        
+        Parse tokens[] = p.getTagNodes();
+        
+        for (CorefMention mention : mentions) {
+          Span min = getMinSpan(p, mention);
+          
+          if (min == null) {
+            min = mention.span;
+          }
+          
+          addMention(mention.id, min, tokens);
+        }
+        
+        p.show();
+        
+        mentionParses.add(p);
+      }
+      
+      return new CorefSample(mentionParses);
+    }
+    else {
+      return null;
+    }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS29 INS23 INS23 INS31 INS31 INS65 INS83 INS83 INS74 INS59 INS83 INS83 INS43 INS59 INS83 INS83 INS43 INS42 INS44 INS44 INS8 INS83 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS8 INS66 INS66 INS43 INS43 INS42 INS14 INS42 INS42 INS21 INS42 INS43 INS42 INS43 INS42 INS60 INS25 MOV41 INS39 INS42 INS43 INS42 INS5 INS42 INS60 INS60 INS60 INS60 INS25 INS41 MOV60 INS25 INS42 INS42 INS74 INS32 INS7 INS42 INS42 INS43 INS59 INS27 INS8 INS42 INS43 INS85 INS39 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS27 INS8 INS8 INS38 INS27 INS8 INS8 INS43 INS43 INS42 INS42 INS40 INS42 INS32 INS42 INS42 INS40 INS42 INS33 INS60 INS60 INS60 INS60 INS60 INS24 INS25 INS42 INS42 INS9 INS42 INS42 INS2 INS42 INS42 INS2 INS42 INS42 INS32 INS42 INS33 INS25 INS53 INS42 INS42 INS33 INS60 INS60 INS60 INS24 INS41 INS41 INS42 INS42 INS42 INS42 INS32 INS39 INS59 INS39 INS59 INS43 INS59 INS39 INS59 INS39 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS42 INS32 INS42 INS27 INS42 INS42 INS42 INS32 INS8 INS25 INS14 INS74 INS59 INS74 INS59 INS74 INS59 INS58 INS27 INS37 INS8 INS14 INS33 INS42 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS85 INS32 INS42 INS38 INS42 INS38 INS39 INS59 INS42 INS40 INS42 INS25 INS25 INS27 INS27 INS41 INS42 INS42 INS32 INS34 INS42 INS42 INS32 INS21 INS32 INS8 INS25 INS43 INS45 INS43 INS43 INS42 INS14 INS43 INS5 INS42 INS32 INS43 INS43 INS42 INS32 INS39 INS59 INS42 INS32 INS42 INS60 INS60 INS70 INS60 INS70 INS21 INS21 INS43 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS34 INS42 INS34 INS27 INS8 INS27 INS8 INS42 INS38 INS42 INS38 INS14 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS45 INS21 INS32 INS8 INS8 INS42 INS42 INS42 INS74 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS43 INS59 INS43 INS59 INS44 INS32 INS8 INS43 INS59 INS44 INS42 INS8 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS21 INS32 INS42 INS21 INS10 INS34 INS34 INS43 INS42 INS42 INS32 INS42 INS27 INS42 INS42 INS32 INS32 INS42 INS45 INS21 INS21 INS21 INS43 INS43 INS42 INS42 INS42 INS85 INS32 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS14 INS25 INS42 INS42 INS85 INS32 INS43 INS42 INS60 INS25 INS21 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS7 INS32 INS42 INS7 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS27 INS42 INS42 INS32 INS32 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS27 INS8 INS42 INS42 INS42 INS43 INS59 INS27 INS8 INS32 INS2 INS42 INS42 INS42 INS2 INS42 INS42 INS27 INS45 INS42 INS42 INS42 INS27 INS40 INS42 INS27 INS42 INS9 INS42 INS32 INS33 INS60 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS45 INS42 INS45 INS32 INS45 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS7 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS40 INS43 INS32 INS32 INS45 INS34 INS34 INS42 INS42 INS42 INS42 INS42 DEL8