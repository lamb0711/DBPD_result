OPENNLP-1196: move ArrayMath to a more general package and add its tests (#314)


-import java.util.List;
-
-public class ArrayMath {
-
-  public static double innerProduct(double[] vecA, double[] vecB) {
-    if (vecA == null || vecB == null || vecA.length != vecB.length)
-      return Double.NaN;
-
-    double product = 0.0;
-    for (int i = 0; i < vecA.length; i++) {
-      product += vecA[i] * vecB[i];
-    }
-    return product;
-  }
-
-  /**
-   * L1-norm
-   */
-  public static double l1norm(double[] v) {
-    double norm = 0;
-    for (int i = 0; i < v.length; i++)
-      norm += Math.abs(v[i]);
-    return norm;
-  }
-
-  /**
-   * L2-norm
-   */
-  public static double l2norm(double[] v) {
-    return Math.sqrt(innerProduct(v, v));
-  }
-
-  /**
-   * Inverse L2-norm
-   */
-  public static double invL2norm(double[] v) {
-    return 1 / l2norm(v);
-  }
-
-  /**
-   * Computes \log(\sum_{i=1}^n e^{x_i}) using a maximum-element trick
-   * to avoid arithmetic overflow.
-   *
-   * @param x input vector
-   * @return log-sum of exponentials of vector elements
-   */
-  public static double logSumOfExps(double[] x) {
-    double max = max(x);
-    double sum = 0.0;
-    for (int i = 0; i < x.length; i++) {
-      if (x[i] != Double.NEGATIVE_INFINITY)
-        sum += Math.exp(x[i] - max);
-    }
-    return max + Math.log(sum);
-  }
-
-  public static double max(double[] x) {
-    int maxIdx = maxIdx(x);
-    return x[maxIdx];
-  }
+@Deprecated
+public class ArrayMath extends opennlp.tools.ml.ArrayMath {
-    if (x == null || x.length == 0) {
-      throw new IllegalArgumentException("Vector x is null or empty");
-    }
-
-    int maxIdx = 0;
-    for (int i = 1; i < x.length; i++) {
-      if (x[maxIdx] < x[i])
-        maxIdx = i;
-    }
-    return maxIdx;
-  }
-
-  // === Not really related to math ===
-  /**
-   * Convert a list of Double objects into an array of primitive doubles
-   */
-  public static double[] toDoubleArray(List<Double> list) {
-    double[] arr = new double[list.size()];
-    for (int i = 0; i < arr.length; i++) {
-      arr[i] = list.get(i);
-    }
-    return arr;
-  }
-
-  /**
-   *  Convert a list of Integer objects into an array of primitive integers
-   */
-  public static int[] toIntArray(List<Integer> list) {
-    int[] arr = new int[list.size()];
-    for (int i = 0; i < arr.length; i++) {
-      arr[i] = list.get(i);
-    }
-    return arr;
+    return opennlp.tools.ml.ArrayMath.argmax(x);
-

INS78 INS83 INS42 INS43 INS42 INS40 INS41 INS32 INS40 INS42 INS42 DEL40 DEL26 DEL83 DEL42 DEL83 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL40 DEL40 DEL27 DEL27 DEL40 DEL41 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL27 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL7 DEL21 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL34 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL40 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL27 DEL32 DEL7 DEL21 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL83 DEL39 DEL42 DEL39 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL2 DEL41 DEL8 DEL31 DEL42 DEL33 DEL27 DEL40 DEL34 DEL27 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL39 DEL42 DEL34 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL27 DEL42 DEL42 DEL7 DEL21 DEL25 DEL8 DEL24 DEL42 DEL41 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL85 DEL5 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL39 DEL85 DEL5 DEL42 DEL39 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL2 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31