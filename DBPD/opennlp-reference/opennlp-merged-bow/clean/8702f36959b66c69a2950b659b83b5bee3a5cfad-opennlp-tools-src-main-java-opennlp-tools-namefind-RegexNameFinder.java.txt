OPENNLP-643
Added constructor for String, Pattern[] again, for backwards compatibility

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1568030 13f79535-47bb-0310-9956-ffa450edef68

+  private Pattern mPatterns[];
+  private String sType;
+  public RegexNameFinder(Pattern patterns[], String type) {
+    if (patterns == null || patterns.length == 0) {
+      throw new IllegalArgumentException("patterns must not be null or empty!");
+    }
+
+    mPatterns = patterns;
+    sType = type;
+  }
+
+  /**
+   * use constructor {@link #RegexNameFinder(Pattern[], String)}
+   * for single types, and/or constructor 
+   * {@link #RegexNameFinder(Map)}
+   */
+  @Deprecated
+  public RegexNameFinder(Pattern patterns[]) {
+    if (patterns == null || patterns.length == 0) {
+      throw new IllegalArgumentException("patterns must not be null or empty!");
+    }
+
+    mPatterns = patterns;
+    sType = null;
+  }
+
-    if (regexMap != null) {
+    if (mPatterns == null && regexMap != null) {
-    }
+    } else {
+      for (Pattern mPattern : mPatterns) {
+        Matcher matcher = mPattern.matcher(sentenceString);
+        while (matcher.find()) {
+          Integer tokenStartIndex =
+                  sentencePosTokenMap.get(matcher.start());
+          Integer tokenEndIndex =
+                  sentencePosTokenMap.get(matcher.end());
+
+          if (tokenStartIndex != null && tokenEndIndex != null) {
+            Span annotation = new Span(tokenStartIndex, tokenEndIndex, sType);
+            annotations.add(annotation);
+          }
+        }
+      }
+    }
-   * NEW. This method removes the need for tokenization, but returns the
-   * character spans rather than word spans. Span.spansToStrings will not work
-   * properly on this output.
+   * NEW. This method removes the need for tokenization, but returns the Span
+   * with character indices, rather than word.
-    if (regexMap != null) {
+    if (mPatterns == null && regexMap != null) {
+    } else {
+      for (Pattern mPattern : mPatterns) {
+        Matcher matcher = mPattern.matcher(text);
+
+        while (matcher.find()) {
+          Integer tokenStartIndex = matcher.start();
+          Integer tokenEndIndex = matcher.end();
+          Span annotation = new Span(tokenStartIndex, tokenEndIndex, sType);
+          annotations.add(annotation);
+
+        }
+      }
+
- 
-}
+  public Pattern[] getmPatterns() {
+    return mPatterns;
+  }
+
+  public void setmPatterns(Pattern[] mPatterns) {
+    this.mPatterns = mPatterns;
+  }
+
+  public String getsType() {
+    return sType;
+  }
+
+  public void setsType(String sType) {
+    this.sType = sType;
+  }
+}

INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS43 INS59 INS83 INS43 INS59 INS83 INS42 INS44 INS44 INS8 INS29 INS78 INS83 INS42 INS44 INS8 INS83 INS5 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS83 INS43 INS42 INS8 INS83 INS39 INS42 INS44 INS8 INS42 INS42 INS85 INS42 INS42 INS43 INS42 INS85 INS43 INS42 INS25 INS21 INS21 INS65 INS42 INS43 INS42 INS85 INS25 INS21 INS21 INS43 INS85 INS41 INS5 INS42 INS21 INS42 INS41 INS43 INS42 INS21 INS42 INS42 INS27 INS8 INS7 INS7 INS66 INS65 INS66 INS65 INS42 INS27 INS8 INS7 INS7 INS27 INS8 UPD66 UPD66 INS27 INS8 INS42 INS42 INS43 INS85 INS7 INS42 INS42 INS7 INS27 INS27 INS53 INS42 INS42 INS42 INS42 INS68 INS68 INS27 INS27 INS53 INS42 INS42 INS42 INS33 INS27 MOV27 INS70 INS27 MOV27 INS70 INS42 INS22 INS42 INS22 INS42 INS42 INS33 INS40 INS34 INS14 INS42 INS69 INS69 INS42 INS69 INS42 INS33 INS40 INS34 INS14 INS42 INS33 INS42 INS33 INS44 INS42 INS8 UPD42 MOV42 MOV33 INS44 INS42 INS8 INS52 INS42 INS52 INS42 INS43 INS45 INS5 INS43 INS43 INS43 INS45 INS43 INS42 INS60 INS61 INS43 INS42 INS60 INS61 INS42 INS43 INS85 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS8 INS42 INS43 INS59 INS32 INS8 INS42 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS25 INS42 INS42 INS32 INS42 INS42 INS60 INS60 INS60 INS21 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS27 INS8 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS27 INS27 INS60 INS21 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS42 INS33 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL66