OPENNLP-1005: Implement areOutcomesCompatible for BilouCodec

This issue closes #144

+import java.util.HashSet;
+import java.util.Set;
+  /**
+   * B requires CL or L
+   * C requires BL
+   * L requires B
+   * O requires any valid combo/unit
+   * U requires none
+   *
+   * @param outcomes all possible model outcomes
+   *
+   * @return true, if model outcomes are compatible
+   */
+    Set<String> start = new HashSet<>();
+    Set<String> cont = new HashSet<>();
+    Set<String> last = new HashSet<>();
+    Set<String> unit = new HashSet<>();
+
+    for (int i = 0; i < outcomes.length; i++) {
+      String outcome = outcomes[i];
+      if (outcome.endsWith(BilouCodec.START)) {
+        start.add(outcome.substring(0, outcome.length()
+            - BilouCodec.START.length()));
+      } else if (outcome.endsWith(BilouCodec.CONTINUE)) {
+        cont.add(outcome.substring(0, outcome.length()
+            - BilouCodec.CONTINUE.length()));
+      } else if (outcome.endsWith(BilouCodec.LAST)) {
+        last.add(outcome.substring(0, outcome.length()
+            - BilouCodec.LAST.length()));
+      } else if (outcome.endsWith(BilouCodec.UNIT)) {
+        unit.add(outcome.substring(0, outcome.length()
+            - BilouCodec.UNIT.length()));
+      } else if (!outcome.equals(BilouCodec.OTHER)) {
+        return false;
+      }
+    }
+
+    if (start.size() == 0 && unit.size() == 0) {
+      return false;
+    } else {
+      // Start, must have matching Last
+      for (String startPrefix : start) {
+        if (!last.contains(startPrefix)) {
+          return false;
+        }
+      }
+      // Cont, must have matching Start and Last
+      for (String contPrefix : cont) {
+        if (!start.contains(contPrefix) && !last.contains(contPrefix)) {
+          return false;
+        }
+      }
+      // Last, must have matching Start
+      for (String lastPrefix : last) {
+        if (!start.contains(lastPrefix)) {
+          return false;
+        }
+      }
+
+    }
+

INS26 INS26 INS40 INS40 INS29 INS8 INS65 INS65 INS65 INS60 INS60 INS60 INS60 INS24 INS25 MOV41 INS66 INS66 INS66 INS66 INS66 INS42 INS66 INS66 INS74 INS59 INS74 INS59 INS74 INS59 INS74 INS59 INS58 INS27 INS37 INS8 INS27 INS8 INS8 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS60 INS25 INS27 INS27 INS41 INS70 INS70 INS70 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS42 INS74 INS42 INS34 INS43 INS59 INS32 INS8 INS25 INS32 INS34 INS32 INS34 INS9 INS44 INS42 INS8 INS44 INS42 INS8 INS44 INS42 INS8 INS43 INS43 INS43 INS43 INS42 INS42 INS2 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS42 INS42 INS42 INS43 INS42 INS25 INS43 INS42 INS25 INS43 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS42 INS38 INS8 INS42 INS27 INS8 INS42 INS38 INS8 INS42 INS42 INS32 INS32 INS42 INS42 INS40 INS21 INS32 INS8 INS25 INS32 INS41 INS38 INS38 INS41 INS32 INS41 INS42 INS42 INS34 INS27 INS42 INS42 INS32 INS32 INS42 INS42 INS40 INS21 INS38 INS8 INS42 INS42 INS42 INS9 INS32 INS32 INS9 INS42 INS42 INS42 INS9 INS32 INS32 INS42 INS42 INS34 INS27 INS42 INS42 INS32 INS32 INS32 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS34 INS27 INS42 INS42 INS32 INS42 INS42 INS40 INS9 INS42 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS34 INS27 INS42 INS42 INS40 INS42 INS32 INS32 INS42 INS42 INS40 INS42 DEL8