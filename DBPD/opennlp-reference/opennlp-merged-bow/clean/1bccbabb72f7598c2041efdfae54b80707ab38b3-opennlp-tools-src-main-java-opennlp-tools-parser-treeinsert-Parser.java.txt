Correct indentation and white spaces

This closes #30

See issue OPENNLP-914

-    while(!top.isPosTag()) {
+    while (!top.isPosTag()) {
-      top = kids[kids.length-1];
+      top = kids[kids.length - 1];
-        p.setLabel(Parser.BUILT+"."+Parser.COMPLETE);
+        p.setLabel(Parser.BUILT + "." + Parser.COMPLETE);
-        p.setLabel(Parser.BUILT+"."+Parser.INCOMPLETE);
+        p.setLabel(Parser.BUILT + "." + Parser.INCOMPLETE);
-      p.setLabel(Parser.BUILT+"."+Parser.COMPLETE);
+      p.setLabel(Parser.BUILT + "." + Parser.COMPLETE);
-      p.setLabel(Parser.BUILT+"."+Parser.INCOMPLETE);
+      p.setLabel(Parser.BUILT + "." + Parser.INCOMPLETE);
-    for (int pi=0;pi<parses.length;pi++) {
+    for (int pi = 0; pi < parses.length; pi++) {
-      for (int ci=0;ci<chunks.length;ci++) {
+      for (int ci = 0; ci < chunks.length; ci++) {
-    Parse advanceNode=null;
+    Parse advanceNode = null;
-    if (debugOn) System.out.println("adi="+advanceNodeIndex+" "+advanceNode.getType()+"."+advanceNode.getLabel()+" "+advanceNode+" choose build="+(1-doneProb)+" attach="+doneProb);
-    if (1-doneProb > q) {
+    if (debugOn)
+      System.out.println("adi=" + advanceNodeIndex + " " + advanceNode.getType() + "." + advanceNode.getLabel()
+          + " " + advanceNode + " choose build=" + (1 - doneProb) + " attach=" + doneProb);
+
+    if (1 - doneProb > q) {
-            if (debugOn) System.out.println("building "+tag+" "+bprob+" c="+cprobs[completeIndex]);
+            if (debugOn) System.out.println("building " + tag + " " + bprob + " c=" + cprobs[completeIndex]);
-            else if (1-cprobs[completeIndex] > probMass) { //just incomplete advances
+            else if (1 - cprobs[completeIndex] > probMass) { //just incomplete advances
-              newParse1.addProb(Math.log(1-cprobs[completeIndex]));
+              newParse1.addProb(Math.log(1 - cprobs[completeIndex]));
-              newParse2.addProb(Math.log(1-cprobs[completeIndex]));
+              newParse2.addProb(Math.log(1 - cprobs[completeIndex]));
-            if (debugOn) System.out.println("building "+tag+" "+bprob);
+            if (debugOn) System.out.println("building " + tag + " " + bprob);
-          newParse1.setChild(originalAdvanceIndex,Parser.BUILT+"."+Parser.COMPLETE); //replace constituent being labeled to create new derivation
+          newParse1.setChild(originalAdvanceIndex,Parser.BUILT + "." + Parser.COMPLETE); //replace constituent being labeled to create new derivation
-          newParse1.setChild(originalAdvanceIndex,Parser.BUILT+"."+Parser.INCOMPLETE); //replace constituent being labeled to create new derivation
+          newParse1.setChild(originalAdvanceIndex,Parser.BUILT + "." + Parser.INCOMPLETE); //replace constituent being labeled to create new derivation
-        for (int fi=0,fs=rf.size();fi<fs;fi++) {
+        for (int fi = 0,fs = rf.size(); fi < fs; fi++) {
-          attachModel.eval(attachContextGenerator.getContext(children, advanceNodeIndex,rf,fi), aprobs);
+          attachModel.eval(attachContextGenerator.getContext(children, advanceNodeIndex, rf, fi), aprobs);
-            System.out.println("Frontier node("+fi+"): "+fn.getType()+"."+fn.getLabel()+" "+fn+" <- "+advanceNode.getType()+" "+advanceNode+" d="+aprobs[daughterAttachIndex]+" s="+aprobs[sisterAttachIndex]+" ");
+            System.out.println("Frontier node(" + fi + "): " + fn.getType() + "." + fn.getLabel()
+                + " " + fn + " <- " + advanceNode.getType() + " " + advanceNode + " d="
+                + aprobs[daughterAttachIndex] + " s=" + aprobs[sisterAttachIndex] + " ");
-          for (int ai=0;ai<attachments.length;ai++) {
+          for (int ai = 0; ai < attachments.length; ai++) {
-                (!checkComplete && (attachments[ai]!= daughterAttachIndex || !isComplete(fn)))
+                (!checkComplete && (attachments[ai] != daughterAttachIndex || !isComplete(fn)))
-                (checkComplete && ((attachments[ai]== daughterAttachIndex && !isComplete(fn)) || (attachments[ai] == sisterAttachIndex && isComplete(fn)))))) {
+                (checkComplete && ((attachments[ai] == daughterAttachIndex && !isComplete(fn)) || (attachments[ai] == sisterAttachIndex && isComplete(fn)))))) {
-              for (int ri=originalZeroIndex+1;ri<=originalAdvanceIndex;ri++) {
+              for (int ri = originalZeroIndex + 1; ri <= originalAdvanceIndex; ri++) {
-                newParse2.remove(originalZeroIndex+1);
+                newParse2.remove(originalZeroIndex + 1);
-              if (attachments[ai] == daughterAttachIndex) {//attach daughter
+              if (attachments[ai] == daughterAttachIndex) { //attach daughter
-                if (fi+1 < crf.size()) {
-                  psite = crf.get(fi+1);
+                if (fi + 1 < crf.size()) {
+                  psite = crf.get(fi + 1);
-              for (int ni=fi+1;ni<crf.size();ni++) {
+              for (int ni = fi + 1; ni < crf.size(); ni++) {
-                else if (1-cprobs[completeIndex] > probMass) {
+                else if (1 - cprobs[completeIndex] > probMass) {
-                  newParse2.addProb(Math.log(1-cprobs[completeIndex]));
+                  newParse2.addProb(Math.log(1 - cprobs[completeIndex]));
-                  newParse2.addProb(Math.log(1-cprobs[completeIndex]));
-                  if (debugOn) System.out.println("Advancing both complete and incomplete nodes; c="+cprobs[completeIndex]);
+                  newParse2.addProb(Math.log(1 - cprobs[completeIndex]));
+                  if (debugOn) System.out.println("Advancing both complete and incomplete nodes; c=" + cprobs[completeIndex]);
-              if (debugOn) System.out.println("Skipping "+fn.getType()+"."+fn.getLabel()+" "+fn+" daughter="+(attachments[ai] == daughterAttachIndex)+" complete="+isComplete(fn)+" prob="+prob);
+              if (debugOn)
+                System.out.println("Skipping " + fn.getType() + "." + fn.getLabel() + " "
+                    + fn + " daughter=" + (attachments[ai] == daughterAttachIndex)
+                    + " complete=" + isComplete(fn) + " prob=" + prob);
-          if(checkComplete && !isComplete(fn)) {
-            if (debugOn) System.out.println("Stopping at incomplete node("+fi+"): "+fn.getType()+"."+fn.getLabel()+" "+fn);
+          if (checkComplete && !isComplete(fn)) {
+            if (debugOn)
+              System.out.println("Stopping at incomplete node(" + fi + "): "
+                  + fn.getType() + "." + fn.getLabel() + " " + fn);
-  throws IOException {
+      throws IOException {

