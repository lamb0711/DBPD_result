OPENNLP-394 Name Samples are now grouped based on the clear adaptive data flag.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1204572 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
+import opennlp.tools.util.FilterObjectStream;
-import opennlp.tools.util.featuregen.AdaptiveFeatureGenerator;
+  private class DocumentSample {
+    
+    private NameSample samples[];
+    
+    DocumentSample(NameSample samples[]) {
+      this.samples = samples;
+    }
+    
+    private NameSample[] getSamples() {
+      return samples;
+    }
+  }
+  
+  /**
+   * Reads Name Samples to group them as a document based on the clear adaptive data flag.
+   */
+  private class NameToDocumentSampleStream extends FilterObjectStream<NameSample, DocumentSample> {
+
+    private NameSample beginSample;
+    
+    protected NameToDocumentSampleStream(ObjectStream<NameSample> samples) {
+      super(samples);
+    }
+
+    public DocumentSample read() throws IOException {
+      
+      List<NameSample> document = new ArrayList<NameSample>();
+      
+      if (beginSample == null) {
+        // Assume that the clear flag is set
+        beginSample = samples.read();
+      }
+      
+      // Underlying stream is exhausted! 
+      if (beginSample == null) {
+        return null;
+      }
+      
+      document.add(beginSample);
+      
+      NameSample sample;
+      while ((sample = samples.read()) != null) {
+        
+        if (sample.isClearAdaptiveDataSet()) {
+          beginSample = sample;
+          break;
+        }
+        
+        document.add(sample);
+      }
+      
+      // Underlying stream is exhausted,
+      // next call must return null
+      if (sample == null) {
+        beginSample = null;
+      }
+      
+      return new DocumentSample(document.toArray(new NameSample[document.size()]));
+    }
+    
+    @Override
+    public void reset() throws IOException, UnsupportedOperationException {
+      super.reset();
+      
+      beginSample = null;
+    }
+  }
+  
+  /**
+   * Splits DocumentSample into NameSamples. 
+   */
+  private class DocumentToNameSampleStream extends FilterObjectStream<DocumentSample, NameSample>{
+
+    protected DocumentToNameSampleStream(ObjectStream<DocumentSample> samples) {
+      super(samples);
+    }
+
+    private Iterator<NameSample> documentSamples = Collections.<NameSample>emptyList().iterator();
+
+    public NameSample read() throws IOException {
+
+      // Note: Empty document samples should be skipped
+
+      if (documentSamples.hasNext()) {
+        return documentSamples.next();
+      }
+      else {
+        DocumentSample docSample = samples.read();
+
+        if (docSample != null) {
+          documentSamples = Arrays.asList(docSample.getSamples()).iterator();
+
+          return read();
+        }
+        else {
+          return null;
+        }
+      }
+    }
+  }
+
-    CrossValidationPartitioner<NameSample> partitioner = new CrossValidationPartitioner<NameSample>(
-        samples, nFolds);
+
+    // Note: The name samples need to be grouped on a document basis.
+
+    CrossValidationPartitioner<DocumentSample> partitioner = new CrossValidationPartitioner<DocumentSample>(
+        new NameToDocumentSampleStream(samples), nFolds);
-      CrossValidationPartitioner.TrainingSampleStream<NameSample> trainingSampleStream = partitioner
+      CrossValidationPartitioner.TrainingSampleStream<DocumentSample> trainingSampleStream = partitioner
-            trainingSampleStream, params, featureGeneratorBytes, resources);
+            new DocumentToNameSampleStream(trainingSampleStream), params, featureGeneratorBytes, resources);
-      evaluator.evaluate(trainingSampleStream.getTestSampleStream());
+      evaluator.evaluate(new DocumentToNameSampleStream(trainingSampleStream.getTestSampleStream()));

MOV26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 UPD40 INS55 INS55 INS55 INS83 INS42 INS23 INS31 INS31 INS29 INS83 INS42 INS74 INS23 INS31 INS31 INS31 INS29 INS83 INS42 INS74 INS31 INS23 INS31 INS83 INS43 INS59 INS42 INS44 INS8 INS83 INS5 INS42 INS8 INS65 INS43 INS43 INS43 INS83 INS43 INS59 INS83 INS42 INS44 INS8 INS83 INS43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS43 INS8 INS65 INS43 INS43 INS43 INS83 INS42 INS44 INS8 INS83 INS74 INS59 INS83 MOV43 INS42 INS43 INS8 INS42 INS42 INS85 INS43 INS42 INS85 INS21 INS43 INS85 INS41 INS66 INS42 INS42 INS42 INS42 INS42 INS74 INS42 INS46 INS42 INS42 INS60 INS25 INS25 INS21 INS60 INS61 INS25 INS41 INS42 INS42 INS42 INS21 INS21 INS66 INS42 INS42 INS42 INS74 INS42 INS46 INS43 MOV43 INS42 INS32 INS42 INS25 UPD74 MOV74 INS42 INS7 INS42 INS42 INS43 INS43 INS42 INS74 INS59 INS27 INS8 INS27 INS8 INS32 INS43 INS59 INS27 INS8 INS27 INS8 INS14 INS48 INS7 INS43 INS43 INS42 INS42 INS32 INS42 INS32 INS8 INS8 INS43 INS22 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS33 INS21 INS42 INS33 INS41 INS42 INS42 INS42 INS42 INS42 INS36 INS33 INS25 INS21 INS42 INS33 INS21 INS43 INS32 INS42 INS42 INS33 INS42 INS42 INS42 MOV43 INS42 INS42 INS42 INS41 INS60 INS25 INS42 UPD74 MOV74 INS14 UPD74 INS52 INS42 INS42 INS42 INS74 INS7 INS33 INS7 INS32 INS8 INS32 INS7 INS42 INS42 INS42 INS3 INS32 INS43 INS59 INS27 INS8 INS8 INS43 INS43 MOV42 INS43 INS14 INS43 INS43 INS42 INS32 INS42 INS32 INS42 INS42 INS21 INS10 INS42 INS42 INS42 INS42 INS33 INS5 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS41 INS41 INS42 INS42 INS42 INS14 INS43 MOV32 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS43 INS85 INS42 INS42 INS42 INS42 INS7 INS32 INS33 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS32 INS42 INS42 DEL42