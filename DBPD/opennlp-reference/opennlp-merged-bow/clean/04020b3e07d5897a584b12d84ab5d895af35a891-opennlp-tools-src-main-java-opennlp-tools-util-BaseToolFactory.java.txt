OPENNLP-429: Refactored the POSModel, moving everything related to the factory to BaseModel, so it will be reused by other model implementations. Eliminated the necessity of calling methods from sub-class constructor. Moved the methods to instantiate factories to POSTaggerFactory and BaseToolFactory.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243780 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.Constructor;
+  public static BaseToolFactory create(String subclassName,
+      ArtifactProvider artifactProvider) throws InvalidFormatException {
+    BaseToolFactory theFactory = null;
+    Class<? extends BaseToolFactory> factoryClass = loadSubclass(subclassName);
+    if (factoryClass != null) {
+      try {
+        Constructor<?> constructor = null;
+        constructor = factoryClass.getConstructor(ArtifactProvider.class);
+        theFactory = (BaseToolFactory) constructor
+            .newInstance(artifactProvider);
+      } catch (NoSuchMethodException e) {
+        String msg = "Could not instantiate the "
+            + subclassName
+            + ". The mandatry constructor (ArtifactProvider) is missing.";
+        System.err.println(msg);
+        throw new IllegalArgumentException(msg);
+      } catch (Exception e) {
+        String msg = "Could not instantiate the "
+            + subclassName
+            + ". The constructor (ArtifactProvider) throw an exception.";
+        System.err.println(msg);
+        e.printStackTrace();
+        throw new InvalidFormatException(msg);
+      }
+    }
+    return theFactory;
+  }
+
+  @SuppressWarnings("unchecked")
+  protected
+  static Class<? extends BaseToolFactory> loadSubclass(
+      String factoryName) throws InvalidFormatException {
+    Class<? extends BaseToolFactory> factoryClass = null;
+    try {
+      factoryClass = (Class<? extends BaseToolFactory>) Class
+          .forName(factoryName);
+    } catch (ClassNotFoundException e) {
+      throw new NoClassDefFoundError(
+          "Could not find the factory class in the classpath: " + factoryName);
+    } catch (ClassCastException e) {
+      throw new InvalidFormatException(
+          "The factory class does not extend BaseToolFactory: " + factoryName,
+          e);
+    }
+    return factoryClass;
+  }
+  

INS26 INS40 INS31 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS43 INS8 INS79 INS83 INS83 INS74 INS42 INS44 INS43 INS8 INS42 INS43 INS42 INS43 INS42 INS42 INS60 INS60 INS25 INS41 INS42 INS45 INS43 INS76 INS43 INS42 INS42 INS60 INS54 INS41 INS42 INS42 INS43 INS59 INS74 INS59 INS27 INS8 INS42 INS42 INS43 INS42 INS74 INS59 INS8 INS12 INS12 INS42 INS42 INS42 INS33 INS43 INS76 INS42 INS32 INS42 INS33 INS54 INS42 INS43 INS76 INS42 INS33 INS21 INS44 INS8 INS44 INS8 INS42 INS43 INS42 INS42 INS8 INS12 INS12 INS42 INS43 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS42 INS60 INS21 INS21 INS44 INS8 INS44 INS8 INS42 INS42 INS11 INS42 INS14 INS42 INS14 INS74 INS59 INS7 INS7 INS43 INS42 INS60 INS21 INS53 INS43 INS42 INS60 INS21 INS21 INS53 INS74 INS32 INS43 INS27 INS43 INS27 INS42 INS43 INS76 INS42 INS33 INS42 INS32 INS42 INS11 INS42 INS43 INS59 INS32 INS14 INS42 INS43 INS59 INS32 INS32 INS14 INS43 INS76 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS57 INS43 INS32 INS42 INS42 INS27 INS40 INS42 INS42 INS43 INS42 INS42 INS42 INS27 INS40 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS45 INS42 INS42 INS42