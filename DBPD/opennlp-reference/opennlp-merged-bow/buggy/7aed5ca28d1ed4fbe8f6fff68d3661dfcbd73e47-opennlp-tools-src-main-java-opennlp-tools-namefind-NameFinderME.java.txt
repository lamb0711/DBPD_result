OPENNLP-580 Added a factory to construct the name finder

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1576089 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.util.featuregen.FeatureGeneratorFactory;
-    this(model, DEFAULT_BEAM_SIZE);
+    
+    TokenNameFinderFactory factory = model.getFactory();
+    
+    seqCodec = factory.createSequenceCodec();
+    sequenceValidator = seqCodec.createSequenceValidator();
+    this.model = model.getNameFinderSequenceModel();
+    contextGenerator = factory.createContextGenerator();
+    
+    // TODO: We should deprecate this. And come up with a better solution!
+    contextGenerator.addFeatureGenerator(
+          new WindowFeatureGenerator(additionalContextFeatureGenerator, 8, 8));
+   * 
+   * @deprecated Use {@link #NameFinderME(TokenNameFinderModel)} instead and use
+   * the {@link TokenNameFinderFactory} to configure it.
-    seqCodec = model.createSequenceCodec();
+    seqCodec = model.getFactory().createSequenceCodec();
-
-    // TODO: How to combine different sequence validators ?!
-    
-    this.sequenceValidator = seqCodec.createSequenceValidator();
-  private static AdaptiveFeatureGenerator createFeatureGenerator() {
+  static AdaptiveFeatureGenerator createFeatureGenerator() {
+   public static TokenNameFinderModel train(String languageCode, String type, 
+       ObjectStream<NameSample> samples, TrainingParameters trainParams,
+       TokenNameFinderFactory factory) throws IOException {
+     String beamSizeString = trainParams.getSettings().get(BeamSearch.BEAM_SIZE_PARAMETER);
+     
+     int beamSize = NameFinderME.DEFAULT_BEAM_SIZE;
+     if (beamSizeString != null) {
+       beamSize = Integer.parseInt(beamSizeString);
+     }
+     
+     Map<String, String> manifestInfoEntries = new HashMap<String, String>();
+
+     MaxentModel nameFinderModel = null;
+     
+     SequenceClassificationModel<String> seqModel = null;
+     
+     TrainerType trainerType = TrainerFactory.getTrainerType(trainParams.getSettings());
+     
+     if (TrainerType.EVENT_MODEL_TRAINER.equals(trainerType)) {
+       ObjectStream<Event> eventStream = new NameFinderEventStream(samples, type,
+           factory.createContextGenerator(), factory.createSequenceCodec());
+
+       EventTrainer trainer = TrainerFactory.getEventTrainer(trainParams.getSettings(), manifestInfoEntries);
+       nameFinderModel = trainer.train(eventStream);
+     }
+     // TODO: Maybe it is not a good idea, that these two don't use the context generator ?!
+     // These also don't use the sequence codec ?!
+     else if (TrainerType.EVENT_MODEL_SEQUENCE_TRAINER.equals(trainerType)) {
+       NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, factory.createContextGenerator());
+
+       EventModelSequenceTrainer trainer = TrainerFactory.getEventModelSequenceTrainer(
+           trainParams.getSettings(), manifestInfoEntries);
+       nameFinderModel = trainer.train(ss);
+     }
+     else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
+       SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
+           trainParams.getSettings(), manifestInfoEntries);
+       
+       NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, factory.createContextGenerator(), false);
+       seqModel = trainer.train(ss);
+     }
+     else {
+       throw new IllegalStateException("Unexpected trainer type!");
+     }
+     
+     if (seqModel != null) {
+       return new TokenNameFinderModel(languageCode, seqModel, null,
+           factory.getResources(), manifestInfoEntries, factory.getSequenceCodec());
+     }
+     else {
+       return new TokenNameFinderModel(languageCode, nameFinderModel, beamSize, null,
+           factory.getResources(), manifestInfoEntries, factory.getSequenceCodec());
+     }
+   }
+   
+    * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
+   @Deprecated
-       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources,
-       SequenceCodec<String> seqCodec) throws IOException {
+       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources)
+           throws IOException {
+     
+     if (languageCode == null) {
+       throw new IllegalArgumentException("languageCode must not be null!");
+     }
-     if (languageCode == null) {
-       throw new IllegalArgumentException("languageCode must not be null!");
-     }
-           new DefaultNameContextGenerator(featureGenerator), seqCodec);
+           new DefaultNameContextGenerator(featureGenerator), new BioCodec());
-           resources, manifestInfoEntries, seqCodec);
+           resources, manifestInfoEntries, new BioCodec());
-           resources, manifestInfoEntries, seqCodec);
+           resources, manifestInfoEntries, new BioCodec());
-
-   public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples,
-       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources) throws IOException {
-     return train(languageCode, type, samples, trainParams, generator, resources, new BioCodec());
-   }
+   * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
+   @Deprecated
-      byte[] featureGeneratorBytes, final Map<String, Object> resources, SequenceCodec<String> seqCodec)
+      byte[] featureGeneratorBytes, final Map<String, Object> resources,
+      TokenNameFinderFactory factory)
-        createFeatureGenerator(featureGeneratorBytes, resources), resources, seqCodec);
+        createFeatureGenerator(featureGeneratorBytes, resources), resources);
+   /**
+    * 
+    * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
+    */
+   @Deprecated
-    return train(languageCode, type, samples, trainParams, featureGeneratorBytes,
-        resources, new BioCodec());
+    return train(languageCode, type, samples, trainParams, featureGeneratorBytes, resources);
+   /**
+    * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
+    */
+   @Deprecated
-

INS26 MOV31 INS40 INS8 INS78 MOV25 INS78 INS29 INS78 INS29 INS78 INS60 INS21 MOV21 INS21 INS21 INS21 INS65 UPD43 UPD42 INS60 INS60 INS25 INS60 INS60 INS60 INS60 INS25 INS25 INS65 INS42 INS65 INS42 INS43 INS42 INS65 INS42 INS65 INS42 INS43 INS59 INS7 INS7 INS7 INS32 INS66 INS65 INS66 INS66 INS65 INS66 UPD42 INS43 INS59 INS39 INS59 INS27 INS8 INS74 INS59 INS43 INS59 INS74 INS59 INS43 INS59 INS32 INS8 INS25 MOV27 INS8 INS8 INS66 INS65 INS66 INS27 INS66 INS65 INS66 UPD42 MOV42 INS66 INS65 INS66 INS66 INS65 INS66 INS42 INS42 INS32 INS42 INS32 INS42 INS22 INS32 INS42 INS32 INS42 INS42 INS14 INS68 INS42 INS42 INS42 INS32 INS42 INS40 INS42 INS33 INS21 MOV43 MOV43 UPD43 MOV43 INS42 INS14 INS42 INS42 INS33 INS43 INS43 INS42 INS33 INS42 INS42 INS32 INS40 INS42 UPD42 MOV42 INS60 INS60 INS21 INS32 INS8 INS25 INS41 INS41 INS68 INS42 INS33 INS68 INS68 INS68 INS42 INS42 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS34 INS34 INS42 INS69 INS32 INS32 INS42 INS40 INS7 UPD42 INS74 INS42 INS42 INS42 INS42 INS32 INS74 INS59 INS43 INS59 INS7 INS40 INS42 INS42 INS60 INS60 INS21 INS32 INS8 INS8 INS14 INS14 INS42 INS42 INS69 INS69 INS69 INS69 INS69 INS42 INS42 INS69 INS69 INS69 INS69 INS69 INS42 INS42 INS69 INS69 INS69 INS69 INS69 INS42 INS42 INS69 INS69 INS69 INS69 INS69 INS42 INS43 MOV42 INS42 INS42 INS42 INS42 INS32 INS43 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS43 INS59 INS7 INS40 INS42 INS42 INS60 INS60 INS21 INS53 MOV43 INS42 INS42 INS33 INS32 INS42 INS32 MOV43 INS42 INS42 INS42 INS33 INS32 INS42 INS32 MOV43 MOV43 INS43 INS43 INS43 INS43 MOV14 INS43 MOV14 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS43 INS59 INS7 INS14 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 UPD43 MOV43 INS45 INS43 INS42 INS42 INS42 INS42 MOV42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS32 INS9 INS42 INS42 UPD42 MOV42 UPD42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 DEL52 DEL42 DEL22 DEL42 DEL42 DEL17 DEL83 DEL83 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42