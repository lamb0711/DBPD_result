OPENNLP-1119 Select sentences randomly and shuffle order of samples

The samples should be build from randomly picked lines taken
from a sentences file. The samples in the stream should be shuffled.

+import java.nio.file.Files;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Random;
+import java.util.Set;
+import java.util.stream.IntStream;
-    private final String lang;
-    private int sentencesPerSample;
-    private int numberOfSamples;
-    private ObjectStream<String> lineStream;
-    private int sampleCount;
+    private final String lang;
+
+    private Iterator<String> lineIterator;
-      this.lang = sentencesFile.getName().substring(0, 3);
-      this.sentencesPerSample = sentencesPerSample;
-      this.numberOfSamples = numberOfSamples;
-      lineStream = new PlainTextByLineStream(new MarkableFileInputStreamFactory(sentencesFile),
-          StandardCharsets.UTF_8);
+      this.lang = lang;
+
+      // The file name contains the number of lines, but to make this more stable
+      // the file is once scanned for the count even tough this is slower
+      int totalLineCount = (int) Files.lines(sentencesFile.toPath()).count();
+
+      List<Integer> indexes = IntStream.range(0, totalLineCount)
+          .boxed().collect(Collectors.toList());
+
+      Collections.shuffle(indexes, random);
+
+      Set<Integer> selectedLines = new HashSet<>(
+          indexes.subList(0, sentencesPerSample * numberOfSamples));
+
+      List<String> sentences = new ArrayList<>();
+
+      try (ObjectStream<String> lineStream = new PlainTextByLineStream(
+          new MarkableFileInputStreamFactory(sentencesFile), StandardCharsets.UTF_8)) {
+
+        int lineIndex = 0;
+        String line;
+        while ((line = lineStream.read()) != null) {
+
+          int tabIndex = line.indexOf('\t');
+          if (tabIndex != -1) {
+            if (selectedLines.contains(lineIndex)) {
+              sentences.add(line);
+            }
+          }
+
+          lineIndex++;
+        }
+      }
+
+      Collections.shuffle(sentences, random);
+
+      lineIterator = sentences.iterator();
+      StringBuilder sampleString = new StringBuilder();
-      if (sampleCount < numberOfSamples) {
-        StringBuilder sampleString = new StringBuilder();
+      int count = 0;
+      while (count < sentencesPerSample && lineIterator.hasNext()) {
-        int count = 0;
-        String line;
-        while (count < sentencesPerSample && (line = lineStream.read()) != null) {
+        String line = lineIterator.next();
+        int textStart = line.indexOf('\t') + 1;
-          int textStart = line.indexOf('\t') + 1;
+        sampleString.append(line.substring(textStart) + " ");
-          // TODO: It should it be changed to contain an array of sample strings ?!
-          sampleString.append(line.substring(textStart) + " ");
-
-          count++;
-        }
-
-        if (sampleString.length() > 0) {
-          sampleCount++;
-          return new LanguageSample(new Language(lang), sampleString);
-        }
+        count++;
+
+      if (sampleString.length() > 0) {
+        return new LanguageSample(new Language(lang), sampleString);
+      }
+
+  private final Random random;
+
-    // TODO: Use a FileFilter to make this more reliable in case there are files which should be ignored
+    // TODO: Use a FileFilter to make this more reliable in case there are
+    //       files which should be ignored or are shorter than 3 chars for the lang detect substring
+    random = new Random(23);
+
-        System.out.println(sentencesFile);
+
-
-  public static void main(String[] args) throws Exception {
-    new LeipzigLanguageSampleStream(new File("/home/blue/opennlp-data-dir/leipzig-lang"),
-        10, 100000);
-  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS31 INS83 INS83 INS43 INS59 INS74 INS42 MOV44 MOV44 MOV44 MOV44 MOV43 INS8 MOV8 UPD42 MOV42 INS42 INS21 INS43 INS43 UPD42 INS21 INS60 INS60 INS21 INS60 INS60 INS54 MOV21 MOV21 MOV41 INS7 INS42 INS42 INS7 INS39 INS59 INS74 INS59 INS32 INS74 INS59 INS74 INS59 INS58 INS8 INS32 INS42 INS14 MOV22 INS42 INS42 INS11 INS43 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS14 MOV74 INS59 INS60 MOV60 INS61 INS42 INS42 INS42 INS42 UPD42 INS32 INS32 INS60 INS43 INS34 INS39 INS32 INS42 INS42 INS32 INS42 INS32 INS42 INS42 INS74 INS32 INS42 INS42 INS74 MOV42 MOV14 INS39 INS59 MOV27 INS8 INS42 INS42 INS42 INS42 MOV43 INS59 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS43 INS42 INS42 INS34 INS27 INS43 UPD42 MOV42 INS34 INS60 INS25 INS21 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS39 INS59 INS27 INS8 INS37 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS38 INS25 INS42 UPD42 MOV42 UPD42 MOV42 INS13 INS34 INS32 INS8 INS42 INS42 INS42 MOV21 INS32 INS42 INS42 INS42 DEL39 DEL52 DEL42 DEL22 DEL42 DEL7 DEL52 DEL42 DEL22 DEL42 DEL7 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL59 DEL23 DEL83 DEL39 DEL59 DEL23 DEL42 DEL32 DEL42 DEL34 DEL34 DEL32 DEL7 DEL21 DEL8 DEL31 DEL42 DEL37 DEL21 DEL42 DEL42 DEL27 DEL25 DEL8 DEL40 DEL42 DEL42 DEL32 DEL21 DEL83 DEL83 DEL39 DEL42 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL43 DEL42 DEL43 DEL45 DEL14 DEL34 DEL34 DEL14 DEL21 DEL8 DEL31