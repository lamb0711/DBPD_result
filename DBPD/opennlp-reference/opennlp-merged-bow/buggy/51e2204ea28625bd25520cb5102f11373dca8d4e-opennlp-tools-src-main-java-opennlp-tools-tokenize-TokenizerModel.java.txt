OPENNLP-482: Changed TokenizerModel and TokenizerME to support factories. Implemented TokenizerFactory

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1304647 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.util.BaseToolFactory;
-  private static final String ABBREVIATIONS_ENTRY_NAME = "abbreviations.dictionary";
-  private static final String USE_ALPHA_NUMERIC_OPTIMIZATION =
-      "useAlphaNumericOptimization";
+  /**
+   * Initializes the current instance.
+   * 
+   * @param languageCode the language of the natural text
+   * @param tokenizerModel the model
+   * @param manifestInfoEntries the manifest
+   * @param tokenizerFactory the factory
+   */
+  public TokenizerModel(String languageCode, AbstractModel tokenizerModel,
+      Map<String, String> manifestInfoEntries, TokenizerFactory tokenizerFactory) {
+    super(COMPONENT_NAME, languageCode, manifestInfoEntries, tokenizerFactory);
+    artifactMap.put(TOKENIZER_MODEL_ENTRY, tokenizerModel);
+    checkArtifactMap();
+  }
+   * 
+   * @deprecated Use
+   *             {@link TokenizerModel#TokenizerModel(String, AbstractModel, Map, TokenizerFactory)}
+   *             instead and pass in a {@link TokenizerFactory}.
-    super(COMPONENT_NAME, language, manifestInfoEntries);
-
-    artifactMap.put(TOKENIZER_MODEL_ENTRY, tokenizerMaxentModel);
-
-    setManifestProperty(USE_ALPHA_NUMERIC_OPTIMIZATION,
-        Boolean.toString(useAlphaNumericOptimization));
-
-    // Abbreviations are optional
-    if (abbreviations != null)
-      artifactMap.put(ABBREVIATIONS_ENTRY_NAME, abbreviations);
-    checkArtifactMap();
+    this(language, tokenizerMaxentModel, manifestInfoEntries, 
+        new TokenizerFactory(language, abbreviations, useAlphaNumericOptimization, null));
+   * 
+   * @deprecated Use
+   *             {@link TokenizerModel#TokenizerModel(String, AbstractModel, Map, TokenizerFactory)}
+   *             instead and pass in a {@link TokenizerFactory}.
+   * 
+   * @deprecated Use
+   *             {@link TokenizerModel#TokenizerModel(String, AbstractModel, Map, TokenizerFactory)}
+   *             instead and pass in a {@link TokenizerFactory}.
+  }
-    if (getManifestProperty(USE_ALPHA_NUMERIC_OPTIMIZATION) == null) {
-      throw new InvalidFormatException("The " + USE_ALPHA_NUMERIC_OPTIMIZATION + " parameter " +
-          "cannot be found!");
-    }
-    
-    Object abbreviationsEntry = artifactMap.get(ABBREVIATIONS_ENTRY_NAME);
+  public TokenizerFactory getFactory() {
+    return (TokenizerFactory) this.toolFactory;
+  }
-    if (abbreviationsEntry != null && !(abbreviationsEntry instanceof Dictionary)) {
-      throw new InvalidFormatException("Abbreviations dictionary has wrong type!");
-    }
+  @Override
+  protected Class<? extends BaseToolFactory> getDefaultFactory() {
+    return TokenizerFactory.class;
-    return (Dictionary) artifactMap.get(ABBREVIATIONS_ENTRY_NAME);
+    if (getFactory() != null) {
+      return getFactory().getAbbreviationDictionary();
+    }
+    return null;
-    String optimization = getManifestProperty(USE_ALPHA_NUMERIC_OPTIMIZATION);
-
-    return Boolean.parseBoolean(optimization);
+    if (getFactory() != null) {
+      return getFactory().isUseAlphaNumericOptmization();
+    }
+    return false;

INS26 INS40 INS31 INS31 INS31 INS31 INS29 MOV83 MOV42 INS44 INS44 INS44 INS44 INS8 INS29 INS83 INS42 MOV44 MOV44 MOV44 MOV44 MOV44 INS8 INS83 INS43 INS42 INS8 INS78 INS83 INS74 INS42 INS8 MOV65 INS65 INS65 INS65 INS65 MOV43 INS42 INS43 INS42 INS74 INS42 INS43 INS42 MOV46 MOV21 MOV21 INS65 MOV65 MOV65 INS65 INS17 INS65 INS65 INS42 INS41 INS42 INS43 INS76 INS41 INS25 INS41 INS25 INS41 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS43 INS43 INS43 INS42 UPD42 INS42 INS66 INS66 INS65 INS66 INS65 INS66 INS42 INS42 INS42 INS14 INS66 INS65 INS66 INS65 INS66 INS66 INS65 INS66 INS65 INS66 INS11 INS42 INS43 INS57 INS27 INS8 INS33 INS27 INS8 INS9 INS42 INS42 INS42 UPD42 INS68 INS42 INS43 INS42 INS42 INS42 INS33 INS68 INS42 INS68 INS42 INS43 INS22 INS42 INS43 INS32 INS33 INS41 INS32 INS33 MOV41 INS42 INS42 INS69 INS69 INS69 INS69 INS42 INS42 INS42 INS69 INS69 INS69 INS69 INS42 INS42 INS69 INS69 INS69 INS69 INS42 INS52 INS42 INS42 INS42 INS32 UPD42 MOV42 MOV43 INS43 INS43 INS43 INS43 INS43 INS43 INS43 MOV43 INS43 INS43 INS43 INS32 UPD42 MOV42 INS32 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 DEL83 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL83 DEL83 DEL83 DEL42 DEL45 DEL59 DEL23 DEL29 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL33 DEL27 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL25 DEL8 DEL31 DEL42 DEL42 DEL32 DEL33 DEL27 DEL42 DEL43 DEL45 DEL42 DEL45 DEL45 DEL27 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL62 DEL36 DEL38 DEL27 DEL42 DEL43 DEL45 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL32 DEL11 DEL41 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60