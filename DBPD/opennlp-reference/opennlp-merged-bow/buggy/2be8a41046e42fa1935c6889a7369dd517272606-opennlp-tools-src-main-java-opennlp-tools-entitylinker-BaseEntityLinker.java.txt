OPENNLP-611
GeoHashBinScorer has java 1.7 dependant objects.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1536650 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.List;
-  protected Map<String, List<EntityLinker>> linkerMap = new HashMap<String, List<EntityLinker>>();
+ 
+  protected Map<String, EntityLinker> singleLinkerMap = new HashMap<String, EntityLinker>();
-    linkerMap = new HashMap<String, List<EntityLinker>>();
+    singleLinkerMap = new HashMap<>();
-  /**
-   *
-   * @param entitytypes the list of types (to corresponding properties keys) to
-   *                    get linkers for
-   * @param docText     the document text
-   * @param sentences   the sentence spans that correspond to the doc text
-   * @param tokens      the token spans that correspond to one of the sentences
-   * @param nameSpans   the name spans that correspond to the tokens
-   * @param properties  the EntityLinkerProperties file with the proper
-   *                    configuration
-   * @return
-   */
-  protected ArrayList<LinkedSpan<BaseLink>> getAggregatedLinkedSpans(String[] entitytypes, String docText, Span[] sentences, Span[] tokens,
-          Span[] nameSpans, EntityLinkerProperties properties) {
-
-    ArrayList<LinkedSpan<BaseLink>> outLinkedSpans = new ArrayList<LinkedSpan<BaseLink>>();
-    for (String type : entitytypes) {
-      List<EntityLinker> linkers = getInstances(type, properties);
-      for (EntityLinker linker : linkers) {
-        outLinkedSpans.addAll(linker.find(docText, sentences, tokens, nameSpans));
-      }
-    }
-    return outLinkedSpans;
-  }
-
-  /**
-   *
-   * @param docText       the document text
-   * @param sentences     the sentence spans that correspond to the doc text
-   * @param tokens        the token spans that correspond to one of the
-   *                      sentences
-   * @param nameSpans     the name spans that correspond to the tokens
-   * @param sentenceIndex the index to the sentence span that the tokens[]
-   *                      Span[] corresponds to
-   * @param properties    the EntityLinkerProperties file with the proper
-   *                      configuration
-   * @return
-   */
-  public ArrayList<LinkedSpan<BaseLink>> getLinkedSpans(String docText, Span[] sentences, Span[] tokens,
+  public ArrayList<LinkedSpan<BaseLink>> link(String docText, Span[] sentences, Span[] tokens,
-    List<EntityLinker> linkers;
-    boolean multiType = isMultitype(nameSpans);
-    if (multiType) {
-      for (Span s : nameSpans) {
-        linkers = getInstances(s.getType(), properties);
-        for (EntityLinker linker : linkers) {
-          outLinkedSpans.addAll(linker.find(docText, sentences, tokens, nameSpans, sentenceIndex));
-        }
-      }
-    } else {
-      linkers = getInstances(nameSpans[0].getType(), properties);
-      for (Span s : nameSpans) {
-        for (EntityLinker linker : linkers) {
-          outLinkedSpans.addAll(linker.find(docText, sentences, tokens, nameSpans, sentenceIndex));
-        }
-      }
+
+    for (Span s : nameSpans) {
+      EntityLinker linker = getInstance(s.getType(), properties);
+      outLinkedSpans.addAll(linker.find(docText, sentences, tokens, nameSpans, sentenceIndex));
-  /**
-   *
-   * @param docText    the document text
-   * @param sentences  the sentence spans that correspond to the doc text
-   * @param tokens     the token spans that correspond to one of the sentences
-   * @param nameSpans  the name spans that correspond to the tokens
-   *
-   * @param properties the EntityLinkerProperties file with the proper
-   *                   configuration
-   * @return
-   */
-  public ArrayList<LinkedSpan<BaseLink>> getLinkedSpans(String docText, Span[] sentences, Span[] tokens,
-          Span[] nameSpans, EntityLinkerProperties properties) {
-    ArrayList<LinkedSpan<BaseLink>> outLinkedSpans = new ArrayList<LinkedSpan<BaseLink>>();
-    if (nameSpans.length == 0 || nameSpans == null) {
-      return outLinkedSpans;
-    }
-    List<EntityLinker> linkers;
-    boolean multiType = isMultitype(nameSpans);
-    if (multiType) {
-      for (Span s : nameSpans) {
-        linkers = getInstances(s.getType(), properties);
-        for (EntityLinker linker : linkers) {
-          outLinkedSpans.addAll(linker.find(docText, sentences, tokens, nameSpans));
-        }
-      }
-    } else {
-      linkers = getInstances(nameSpans[0].getType(), properties);
-      for (Span s : nameSpans) {
-        for (EntityLinker linker : linkers) {
-          outLinkedSpans.addAll(linker.find(docText, sentences, tokens, nameSpans));
-        }
-      }
-    }
-    return outLinkedSpans;
-  }
+ 
-  /**
-   *
-   * @param docText       the document text
-   * @param sentences     the sentence spans that correspond to the doc text
-   * @param tokens        the token strings that correspond to one of the
-   *                      sentences
-   * @param nameSpans     the name spans that correspond to the tokens
-   * @param sentenceIndex the index to the sentence span that the tokens[]
-   *                      Span[] corresponds to
-   * @param properties    the EntityLinkerProperties file with the proper
-   *                      configuration
-   * @return
-   */
-  public ArrayList<LinkedSpan<BaseLink>> getLinkedSpans(String docText, Span[] sentences, String[] tokens,
-          Span[] nameSpans, EntityLinkerProperties properties) {
-    ArrayList<LinkedSpan<BaseLink>> outLinkedSpans = new ArrayList<LinkedSpan<BaseLink>>();
-    if (nameSpans.length == 0 || nameSpans == null) {
-      return outLinkedSpans;
-    }
-    List<EntityLinker> linkers;
-    boolean multiType = isMultitype(nameSpans);
-    if (multiType) {
-      for (Span s : nameSpans) {
-        linkers = getInstances(s.getType(), properties);
-        for (EntityLinker linker : linkers) {
-          outLinkedSpans.addAll(linker.find(docText, sentences, tokens, nameSpans));
-        }
-      }
+  private EntityLinker getInstance(String type, EntityLinkerProperties properties) {
+    EntityLinker linker = null;
+    if (singleLinkerMap.containsKey(type)) {
+      linker = singleLinkerMap.get(type);
-      linkers = getInstances(nameSpans[0].getType(), properties);
-      for (Span s : nameSpans) {
-        for (EntityLinker linker : linkers) {
-          outLinkedSpans.addAll(linker.find(docText, sentences, tokens, nameSpans));
-        }
-      }
+      linker = EntityLinkerFactory.getLinker(type, properties);
+      singleLinkerMap.put(type, linker);
-    return outLinkedSpans;
-  }
-
-  /**
-   * checks to see if a list of spans contains more than one type
-   *
-   * @param spans
-   * @return
-   */
-  private boolean isMultitype(Span[] spans) {
-    boolean multitype = false;
-    String type = spans[0].getType();
-    for (int i = 1; i < spans.length; i++) {
-      if (!type.equals(spans[i].getType())) {
-        multitype = true;
-        break;
-      }
-    }
-    return multitype;
-  }
-
-  /**
-   * returns instances of entitylinkers, and caches them in a map so they are
-   * lazily instantiated
-   *
-   * @param type       the entitytype
-   * @param properties the entity liker properties
-   * @return
-   */
-  private List<EntityLinker> getInstances(String type, EntityLinkerProperties properties) {
-    List<EntityLinker> linkers = new ArrayList<EntityLinker>();
-    if (linkerMap.containsKey(type)) {
-      linkers = linkerMap.get(type);
-    } else {
-      linkers = EntityLinkerFactory.getLinkers(type, properties);
-      linkerMap.put(type, linkers);
-    }
-    return linkers;
+    return linker;

UPD74 INS42 MOV8 MOV43 UPD42 MOV43 UPD42 MOV60 MOV25 MOV41 UPD74 MOV44 UPD42 MOV43 UPD42 MOV43 UPD42 INS60 UPD42 INS33 UPD42 UPD74 MOV43 INS59 INS42 MOV32 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL40 DEL26 DEL42 DEL43 DEL74 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL65 DEL29 DEL42 DEL42 DEL7 DEL21 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL70 DEL8 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL8 DEL25 DEL42 DEL41 DEL8 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL8 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL42 DEL66 DEL66 DEL65 DEL65 DEL29 DEL83 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL74 DEL14 DEL59 DEL60 DEL40 DEL34 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL41 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL8 DEL42 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL42 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL70 DEL8 DEL70 DEL8 DEL25 DEL42 DEL41 DEL8 DEL31 DEL66 DEL65 DEL42 DEL65 DEL65 DEL29 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL39 DEL42 DEL9 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL34 DEL2 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL32 DEL38 DEL42 DEL9 DEL7 DEL21 DEL10 DEL8 DEL25 DEL8 DEL24 DEL42 DEL41 DEL8 DEL31 DEL66 DEL66 DEL65 DEL42 DEL66 DEL65 DEL42 DEL66 DEL65 DEL65 DEL29 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14