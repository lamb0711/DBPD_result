OPENNLP-481: ADTokenSampleStream now uses a customized DictionaryDetokenizer that handles hyphens 

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1304169 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.regex.Pattern;
+
+import opennlp.tools.cmdline.TerminateToolException;
+import opennlp.tools.tokenize.DetokenizationDictionary;
+import opennlp.tools.tokenize.Detokenizer;
+import opennlp.tools.tokenize.DictionaryDetokenizer;
+
+  protected Detokenizer createDetokenizer(DetokenizerParameter p) {
+    try {
+      return new ADDictionaryDetokenizer(new DetokenizationDictionary(
+          new FileInputStream(new File(p.getDetokenizer()))));
+    } catch (IOException e) {
+      throw new TerminateToolException(-1,
+          "IO error while loading detokenizer dict: " + e.getMessage());
+    }
+  }
+
+  static class ADDictionaryDetokenizer extends DictionaryDetokenizer {
+
+    public ADDictionaryDetokenizer(DetokenizationDictionary dict) {
+      super(dict);
+    }
+
+    @Override
+    public DetokenizationOperation[] detokenize(String[] tokens) {
+      DetokenizationOperation[] operations = super.detokenize(tokens);
+      for (int i = 0; i < tokens.length; i++) {
+        if (operations[i].equals(DetokenizationOperation.NO_OPERATION)
+            && isMergeToRight(tokens[i])) {
+          operations[i] = DetokenizationOperation.MERGE_TO_RIGHT;
+        }
+      }
+      return operations;
+    }
+
+    private static final Pattern hyphenPattern = Pattern
+        .compile(".*?[\\p{L}]-$");
+
+    private boolean isMergeToRight(String token) {
+      if (token != null) {
+        if (hyphenPattern.matcher(token).matches()) {
+          return true;
+        }
+      }
+      return false;
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS55 INS83 INS43 INS42 INS44 INS8 INS83 INS42 INS43 INS31 INS31 INS23 INS31 INS42 INS43 INS42 INS54 INS42 INS83 INS42 INS44 INS8 INS78 INS83 INS5 INS42 INS44 INS8 INS83 INS83 INS83 INS43 INS59 INS83 INS39 INS42 INS44 INS8 INS42 INS8 INS12 INS43 INS42 INS46 INS42 INS43 INS85 INS5 INS42 INS60 INS24 INS41 INS42 INS42 INS32 INS43 INS42 INS25 INS41 INS41 INS44 INS8 INS42 INS42 INS42 INS43 INS85 INS5 INS59 INS58 INS27 INS37 INS8 INS42 INS42 INS42 INS45 INS42 INS27 INS8 INS9 INS14 INS43 INS42 INS53 INS42 INS43 INS85 INS42 INS48 INS39 INS59 INS42 INS40 INS42 INS25 INS42 INS33 INS25 INS43 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS34 INS27 INS8 INS32 INS8 INS42 INS43 INS14 INS43 INS38 INS27 INS32 INS32 INS21 INS32 INS42 INS41 INS42 INS43 INS14 INS42 INS34 INS45 INS32 INS2 INS42 INS40 INS42 INS2 INS7 INS42 INS42 INS42 INS9 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS2 INS40 INS42 INS42 INS42 INS42 INS42