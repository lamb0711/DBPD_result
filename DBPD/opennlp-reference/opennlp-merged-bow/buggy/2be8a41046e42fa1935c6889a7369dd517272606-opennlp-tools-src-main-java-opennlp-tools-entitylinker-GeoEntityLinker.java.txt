OPENNLP-611
GeoHashBinScorer has java 1.7 dependant objects.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1536650 13f79535-47bb-0310-9956-ffa450edef68

-  GeoEntityScorer scorer = new GeoEntityScorer();
+  // CountryProximityScorer scorer = new CountryProximityScorer();
-  private Boolean filterCountryContext=true;
+  private Boolean filterCountryContext = true;
-  public List<LinkedSpan> find(String text, Span[] sentences, String[] tokens, Span[] names) {
+  @Override
+  public List<LinkedSpan> find(String doctext, Span[] sentences, String[][] tokensBySentence, Span[][] namesBySentence) {
-     
-        countryMentions = countryContext.regexfind(text, linkerProperties);
-      
+      countryMentions = countryContext.regexfind(doctext, linkerProperties);
-      String[] matches = Span.spansToStrings(names, tokens);
-      for (int i = 0; i < matches.length; i++) {
+
+      for (int s = 0; s < sentences.length; s++) {
+        Span[] names = namesBySentence[s];
+        String[] tokens = tokensBySentence[s];
+        String[] matches = Span.spansToStrings(names, tokens);
+
+        for (int i = 0; i < matches.length; i++) {
-        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
-        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
-          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
-        if (countryMentions.keySet().contains("us")) {
-          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
+          ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
+          if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1 || countryMentions.keySet().isEmpty()) {
+            geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+          }
+          ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
+          if (countryMentions.keySet().contains("us") || countryMentions.keySet().isEmpty()) {
+            usgsEntries = usgsGaz.find(matches[i], names[i], linkerProperties);
+          }
+          LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
-        if (!usgsEntries.isEmpty()) {
-          geoSpan.getLinkedEntries().addAll(usgsEntries);
-          geoSpan.setSearchTerm(matches[i]);
-        }
+          if (!usgsEntries.isEmpty()) {
+            geoSpan.getLinkedEntries().addAll(usgsEntries);
+            geoSpan.setSearchTerm(matches[i]);
+          }
-        if (!geoSpan.getLinkedEntries().isEmpty()) {
-          geoSpan.setSearchTerm(matches[i]);
-          spans.add(geoSpan);
+          if (!geoSpan.getLinkedEntries().isEmpty()) {
+            geoSpan.setSearchTerm(matches[i]);
+            geoSpan.setSentenceid(s);
+            spans.add(geoSpan);
+          }
-
-      //score the spans
-
-      scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 1000);
-
-      //  return spans;
+    List<LinkedEntityScorer<CountryContext>> scorers = new ArrayList<>();
+    scorers.add(new GeoHashBinScorer());
+    scorers.add(new CountryProximityScorer());
+    scorers.add(new FuzzyStringMatchScorer());
+    for (LinkedEntityScorer scorer : scorers) {
+      scorer.score(spans, doctext, sentences, countryContext);
+    }
-  public List<LinkedSpan> find(String text, Span[] sentences, Span[] tokens, Span[] names) {
-    ArrayList<LinkedSpan> spans = new ArrayList<LinkedSpan>();
-    try {
-      if (linkerProperties == null) {
-        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      }
-     
-        //  System.out.println("getting country context");
-        //hits = countryContext.find(text, linkerProperties);
-        countryMentions = countryContext.regexfind(text, linkerProperties);
-      
-      //get the sentence text....must assume some index
-      Span s = sentences[0];
-      String sentence = text.substring(s.getStart(), s.getEnd());
-
-      String[] stringtokens = Span.spansToStrings(tokens, sentence);
-      //get the names based on the tokens
-      String[] matches = Span.spansToStrings(names, stringtokens);
-      for (int i = 0; i < matches.length; i++) {
-        //nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
-        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
-        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
-          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
-        if (countryMentions.keySet().contains("us")) {
-          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
-
-        if (!usgsEntries.isEmpty()) {
-          geoSpan.getLinkedEntries().addAll(usgsEntries);
-          geoSpan.setSearchTerm(matches[i]);
-        }
-
-        if (!geoSpan.getLinkedEntries().isEmpty()) {
-          geoSpan.setSearchTerm(matches[i]);
-          spans.add(geoSpan);
-        }
-      }
-
-    } catch (IOException ex) {
-      Logger.getLogger(GeoEntityLinker.class.getName()).log(Level.SEVERE, null, ex);
-    }
-    scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 1000);
-    return spans;
-  }
-
-  public List<LinkedSpan> find(String text, Span[] sentences, Span[] tokens, Span[] names, int sentenceIndex) {
-    ArrayList<LinkedSpan> spans = new ArrayList<LinkedSpan>();
-    try {
-
-      if (linkerProperties == null) {
-        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      }
-
-      countryMentions = countryContext.regexfind(text, linkerProperties);
-
-      Span s = sentences[sentenceIndex];
-      String sentence = text.substring(s.getStart(), s.getEnd());
-
-      String[] stringtokens = Span.spansToStrings(tokens, sentence);
-      //get the names based on the tokens
-      String[] matches = Span.spansToStrings(names, stringtokens);
-
-      for (int i = 0; i < matches.length; i++) {
-//nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
-        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
-        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
-          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
-        if (countryMentions.keySet().contains("us")) {
-          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
-
-        if (!usgsEntries.isEmpty()) {
-          geoSpan.getLinkedEntries().addAll(usgsEntries);
-          geoSpan.setSearchTerm(matches[i]);
-        }
-
-        if (!geoSpan.getLinkedEntries().isEmpty()) {
-          geoSpan.setSearchTerm(matches[i]);
-          geoSpan.setSentenceid(sentenceIndex);
-          spans.add(geoSpan);
-        }
-      }
-      scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 2000);
-    } catch (IOException ex) {
-      Logger.getLogger(GeoEntityLinker.class.getName()).log(Level.SEVERE, null, ex);
-    }
-    return spans;
-  }
-
+  @Override
+
+  @Override
+  public List<LinkedSpan> find(String text, Span[] sentences, Span[] tokens, Span[] nameSpans) {
+    throw new UnsupportedOperationException("The GeoEntityLinker requires the entire document for proper scoring. This method is unsupported"); //To change body of generated methods, choose Tools | Templates.
+  }
+
+  @Override
+  public List<LinkedSpan> find(String text, Span[] sentences, Span[] tokens, Span[] nameSpans, int sentenceIndex) {
+    throw new UnsupportedOperationException("The GeoEntityLinker requires the entire document for proper scoring. This method is unsupported"); //To change body of generated methods, choose Tools | Templates.
+  }
+
+  @Override
+  public List<LinkedSpan> find(String text, Span[] sentences, String[] tokens, Span[] nameSpans) {
+    throw new UnsupportedOperationException("The GeoEntityLinker requires the entire document for proper scoring."); //To change body of generated methods, choose Tools | Templates.
+  }

INS31 INS31 INS31 INS78 INS44 INS44 INS78 INS78 MOV83 MOV74 MOV42 MOV44 MOV44 MOV44 MOV44 INS8 INS78 INS83 MOV74 INS42 MOV44 MOV44 MOV44 INS44 MOV44 INS8 INS78 MOV83 INS74 INS42 MOV44 INS44 MOV44 MOV44 INS8 INS42 MOV43 INS42 INS5 INS42 INS5 UPD42 INS60 INS21 INS21 INS21 INS70 INS42 INS42 UPD42 INS53 INS42 INS5 INS42 INS53 INS42 UPD43 MOV43 MOV43 INS5 INS42 UPD42 INS53 MOV43 INS85 INS85 MOV43 INS85 INS85 INS74 INS59 INS32 INS32 INS32 INS44 INS42 INS8 INS14 INS43 MOV85 INS14 UPD42 INS43 MOV85 INS14 INS42 INS24 INS43 INS74 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS14 INS43 INS42 INS21 UPD43 MOV43 UPD45 MOV45 MOV42 INS43 INS45 MOV42 INS43 INS45 INS58 INS27 INS37 INS8 INS42 INS43 INS43 INS74 INS43 INS43 INS43 INS42 INS32 UPD42 UPD42 MOV42 UPD42 MOV42 INS39 INS59 INS42 INS40 INS42 INS60 INS60 MOV60 MOV24 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS34 MOV5 INS59 MOV5 INS59 INS42 INS42 INS2 INS85 INS42 INS2 INS42 INS42 INS42 INS42 INS27 INS27 MOV27 INS32 MOV32 INS32 INS21 MOV21 INS32 INS42 INS32 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV42 MOV42 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL23 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL14 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL42 DEL34 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL36 DEL38 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL32 DEL42 DEL40 DEL33 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL32 DEL21 DEL42 DEL41 DEL8 DEL31 DEL42 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL42 DEL43 DEL42 DEL43 DEL45 DEL14 DEL14 DEL7 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL43 DEL42 DEL42 DEL42 DEL2 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL43 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL36 DEL38 DEL42 DEL42 DEL32 DEL42 DEL32 DEL34 DEL27 DEL27 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL45 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL42 DEL42 DEL32 DEL7 DEL21 DEL8 DEL25 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL2 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL42 DEL32 DEL38 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL32 DEL42 DEL32 DEL38 DEL42 DEL42 DEL42 DEL42 DEL2 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL24 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL34 DEL32 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL43 DEL57 DEL42 DEL32 DEL32 DEL42 DEL40 DEL33 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL31