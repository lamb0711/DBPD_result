OPENNLP-17 Added support for custom feature generator

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1127445 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider;
+import opennlp.tools.util.featuregen.GeneratorFactory;
-
-    if (generator != null) 
+    
+    // If generator is provided always use that one
+    if (generator != null) {
-    else
-      contextGenerator = new DefaultNameContextGenerator(createFeatureGenerator());
+    }
+    else {
+      // If model has a generator use that one, otherwise create default 
+      AdaptiveFeatureGenerator featureGenerator = model.createFeatureGenerators();
+      
+      if (featureGenerator == null)
+        featureGenerator = createFeatureGenerator();
+      
+      contextGenerator = new DefaultNameContextGenerator(featureGenerator);
+    }
+    * 
+    * 
-     return train(languageCode, type, samples, null, resources, iterations, cutoff);
+     return train(languageCode, type, samples, (AdaptiveFeatureGenerator) null, resources, iterations, cutoff);
+  
+   // TODO: How can cmd line tool create the resources map ?!
+   // Needs access to derserializers ...
+   public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples, 
+       byte[] generatorDescriptor, final Map<String, Object> resources, 
+       int iterations, int cutoff) throws IOException {
+     
+     // TODO: Pass in resource manager ...
+     
+     AdaptiveFeatureGenerator featureGenerator;
+     
+     if (generatorDescriptor != null) {
+       featureGenerator = GeneratorFactory.create(new ByteArrayInputStream(generatorDescriptor), new FeatureGeneratorResourceProvider() {
+        
+        public Object getResource(String key) {
+          return resources.get(key);
+        }
+      });
+     }
+     else {
+       featureGenerator = null;
+     }
+     
+     TokenNameFinderModel model = train(languageCode, type, samples, featureGenerator,
+         resources, iterations, cutoff);
+     
+     if (generatorDescriptor != null) {
+       model = model.updateFeatureGenerator(generatorDescriptor);
+     }
+     
+     return model;
+   }
+   

INS26 INS26 INS26 INS40 INS40 INS40 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS43 INS42 INS74 INS42 INS5 INS42 INS83 INS74 INS42 INS39 INS42 INS39 INS42 INS42 INS60 INS25 INS60 INS25 INS41 INS8 INS8 INS42 INS42 INS43 INS43 INS39 INS85 INS43 INS43 INS43 INS43 INS59 INS27 INS8 INS8 INS43 INS59 INS27 INS8 INS42 MOV21 INS60 INS25 MOV21 INS11 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS21 INS42 INS42 INS32 INS42 INS33 INS21 INS43 INS59 INS27 INS21 INS43 INS33 INS7 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS7 INS42 INS42 INS32 INS42 INS33 INS7 INS42 INS42 INS32 INS42 INS33 INS42 INS32 INS42 INS42 INS42 MOV32 INS42 INS42 INS42 INS14 INS14 INS42 INS42 INS42 INS43 INS42 INS43 INS1 INS42 INS42 INS31 INS83 INS43 INS42 INS44 INS8 INS42 INS43 INS42 INS41 INS42 INS32 INS42 INS42 INS42 DEL33