OPENNLP-381 Error messages for command line arguments introduced into command line tools. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1202610 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
-   * 
-   * @param args
-   * @param argProxyInterface
-   * @return
+   *
+   * @param args command line arguments
+   * @param argProxyInterface interface with parameters description
+   * @return true, if arguments are valid
+    return null == validateArgumentsLoudly(args, argProxyInterface);
+  }
+
+  /**
+   * Tests if the arguments are correct or incorrect.
+   * 
+   * @param args command line arguments
+   * @param argProxyInterface interface with parameters description
+   * @return null, if arguments are valid or error message otherwise
+   */
+  public static <T> String validateArgumentsLoudly(String args[], Class<T> argProxyInterface) {
-    if (args.length < 2 || args.length % 2 != 0)
-      return false;
+    if (args.length < 2 || args.length % 2 != 0) {
+      return "Error: Number of parameters must be at least 2 and always be even";
+    }
-    
+
+    List<String> parameters = new ArrayList<String>(Arrays.asList(args));
-      
-      String valueString = CmdLineUtil.getParameter(
-          methodNameToParameter(method.getName()), args);
-      
+      String paramName = methodNameToParameter(method.getName());
+      int paramIndex = CmdLineUtil.getParameterIndex(paramName, args);
+      String valueString = CmdLineUtil.getParameter(paramName, args);
-        
-        // missing mandatory parameter
-        if (optionalParam == null)
-          return false;
+
+        if (optionalParam == null) {
+          if (-1 < paramIndex) {
+            return "Error: Missing mandatory parameter value: " + paramName;
+          } else {
+            return "Error: Missing mandatory parameter: " + paramName;
+          }
+        } else {
+          parameters.remove("-" + paramName);
+        }
+        parameters.remove(paramName);
+        parameters.remove(valueString);
-    if (args.length / 2 != argumentCount)
-      return false;
+    if (args.length / 2 > argumentCount) {
+      return "Error: Unrecognized parameters encountered: " + parameters.toString();
+    }
-    return true;
+    return null;
-   * @param args
-   * @param argProxyInterface
+   * @param args arguments
+   * @param argProxyInterface interface with parameters description
-   * @return
+   * @return parsed parameters

INS26 INS26 INS26 INS40 INS40 INS40 INS31 MOV29 INS83 INS83 INS73 INS39 INS42 INS44 INS44 INS8 INS29 INS43 UPD42 INS42 INS43 INS42 INS85 INS74 INS42 INS41 INS65 INS65 INS65 INS65 INS42 INS60 INS66 INS66 INS66 INS42 INS43 INS43 INS27 INS66 INS42 INS66 INS42 INS66 INS66 INS8 INS74 INS59 UPD27 INS8 INS33 INS66 INS66 INS66 INS42 INS42 INS33 INS32 INS41 INS43 INS43 INS42 INS14 INS60 INS60 INS41 INS42 INS42 INS42 INS45 INS42 INS42 INS74 INS32 INS39 INS59 INS43 INS59 INS27 INS43 INS43 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 INS32 INS25 INS21 INS21 INS45 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 MOV27 INS8 INS8 INS32 INS32 INS42 INS42 MOV25 INS21 INS42 INS42 INS42 INS42 INS42 INS42 INS27 INS8 INS8 INS32 INS38 INS42 INS41 INS41 INS42 INS42 INS27 INS34 INS27 INS27 INS45 INS42 INS45 INS42 INS45 INS42 DEL39 DEL9 DEL41 DEL42 DEL42 DEL42 DEL42 DEL32 DEL9 DEL41 DEL9 DEL41 DEL9