OPENNLP-178 Added cross validation cmd line tool for the name finder

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1130913 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+  static byte[] openFeatureGeneratorBytes(String featureGenDescriptorFile) {
+    byte featureGeneratorBytes[] = null;
+    // load descriptor file into memory
+    if (featureGenDescriptorFile != null) {
+      InputStream bytesIn = CmdLineUtil.openInFile(new File(
+          featureGenDescriptorFile));
+
+      try {
+        featureGeneratorBytes = ModelUtil.read(bytesIn);
+      } catch (IOException e) {
+        CmdLineUtil.printTrainingIoError(e);
+        throw new TerminateToolException(-1);
+      } finally {
+        try {
+          bytesIn.close();
+        } catch (IOException e) {
+          // sorry that this can fail
+        }
+      }
+    }
+    return featureGeneratorBytes;
+  }
+  
+  static Map<String, Object> loadResources(String resourceDirectory) {
+    Map<String, Object> resources = new HashMap<String, Object>();
+
+    if (resourceDirectory != null) {
+
+      Map<String, ArtifactSerializer> artifactSerializers = TokenNameFinderModel
+          .createArtifactSerializers();
+
+      File resourcePath = new File(resourceDirectory);
+
+      File resourceFiles[] = resourcePath.listFiles();
+
+      // TODO: Filter files, also files with start with a dot
+      for (File resourceFile : resourceFiles) {
+
+        // TODO: Move extension extracting code to method and
+        // write unit test for it
+
+        // extract file ending
+        String resourceName = resourceFile.getName();
+
+        int lastDot = resourceName.lastIndexOf('.');
+
+        if (lastDot == -1) {
+          continue;
+        }
+
+        String ending = resourceName.substring(lastDot + 1);
+
+        // lookup serializer from map
+        ArtifactSerializer serializer = artifactSerializers.get(ending);
+
+        // TODO: Do different? For now just ignore ....
+        if (serializer == null)
+          continue;
+
+        InputStream resoruceIn = CmdLineUtil.openInFile(resourceFile);
+
+        try {
+          resources.put(resourceName, serializer.create(resoruceIn));
+        } catch (InvalidFormatException e) {
+          // TODO: Fix exception handling
+          e.printStackTrace();
+        } catch (IOException e) {
+          // TODO: Fix exception handling
+          e.printStackTrace();
+        } finally {
+          try {
+            resoruceIn.close();
+          } catch (IOException e) {
+          }
+        }
+      }
+    }
+
+    return resources;
+  }
+  
-    byte featureGeneratorBytes[] = null;
+    byte featureGeneratorBytes[] = openFeatureGeneratorBytes(parameters.getFeatureGenDescriptorFile());
-    // load descriptor file into memory
-    if (parameters.getFeatureGenDescriptorFile() != null) {
-      InputStream bytesIn = 
-          CmdLineUtil.openInFile(new File(parameters.getFeatureGenDescriptorFile()));
-      
-      try {
-        featureGeneratorBytes = ModelUtil.read(bytesIn);
-      } catch (IOException e) {
-        CmdLineUtil.printTrainingIoError(e);
-        throw new TerminateToolException(-1);
-      }
-      finally {
-        try {
-          bytesIn.close();
-        } catch (IOException e) {
-          // sorry that this can fail
-        }
-      }
-    }
-    String resourceDirectory = parameters.getResourceDirectory();
-    
-    Map<String, Object> resources = new HashMap<String, Object>();
-    
-    if (resourceDirectory != null) {
-      
-      Map<String, ArtifactSerializer> artifactSerializers = 
-          TokenNameFinderModel.createArtifactSerializers();
-      
-      File resourcePath = new File(resourceDirectory);
-      
-      File resourceFiles[] = resourcePath.listFiles();
-      
-      // TODO: Filter files, also files with start with a dot
-      for (File resourceFile : resourceFiles) {
+    Map<String, Object> resources = loadResources(parameters.getResourceDirectory());
-        // TODO: Move extension extracting code to method and
-        //       write unit test for it
-        
-        // extract file ending
-        String resourceName = resourceFile.getName();
-        
-        int lastDot = resourceName.lastIndexOf('.');
-        
-        if (lastDot == -1) {
-          continue;
-        }
-        
-        String ending = resourceName.substring(lastDot + 1);
-        
-        // lookup serializer from map
-        ArtifactSerializer serializer = artifactSerializers.get(ending);
-        
-        // TODO: Do different? For now just ignore ....
-        if (serializer == null)
-          continue;
-        
-        InputStream resoruceIn = CmdLineUtil.openInFile(resourceFile);
-        
-        try {
-          resources.put(resourceName, serializer.create(resoruceIn));
-        }
-        catch (InvalidFormatException e) {
-          // TODO: Fix exception handling
-          e.printStackTrace();
-        }
-        catch (IOException e) {
-          // TODO: Fix exception handling
-          e.printStackTrace();
-        }
-        finally {
-          try {
-            resoruceIn.close();
-          }
-          catch (IOException e) {
-          }
-        }
-      }
-    }
-    

INS26 INS40 INS31 INS31 INS83 INS5 INS42 INS44 INS8 INS83 INS74 INS42 INS44 INS8 INS39 INS85 INS43 INS42 MOV60 MOV25 INS41 INS43 INS43 INS43 MOV43 INS42 MOV60 MOV25 INS41 MOV60 INS42 INS42 INS42 INS42 INS42 INS42 INS39 INS74 INS42 INS60 UPD42 INS85 INS43 INS43 INS43 UPD42 INS32 MOV43 INS59 UPD42 MOV32 INS42 INS42 INS42 INS42 MOV32 INS42 INS32 INS42 INS42 MOV14 INS42 DEL42 DEL42 DEL32 DEL42