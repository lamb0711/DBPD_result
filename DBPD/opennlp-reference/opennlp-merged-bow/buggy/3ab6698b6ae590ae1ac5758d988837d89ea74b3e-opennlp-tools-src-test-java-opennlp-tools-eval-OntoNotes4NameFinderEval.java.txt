OPENNLP-958: Add POS Name Finder feature generator

closes apache/opennlp#170

+import java.io.ByteArrayOutputStream;
+import java.io.InputStream;
+import java.net.URISyntaxException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.nio.file.StandardCopyOption;
+import java.util.Map;
+import opennlp.tools.cmdline.TerminateToolException;
+import opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool;
+
+  @Test
+  public void evalAllTypesWithPOSNameFinder() throws IOException {
+    TrainingParameters params = ModelUtil.createDefaultTrainingParameters();
+    params.put("Threads", "4");
+
+    // load the feature generator
+    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
+    try (InputStream in = this.getClass().getResourceAsStream(
+        "ner-en_pos-features.xml")) {
+      byte[] buf = new byte[1024];
+      int len;
+      while ((len = in.read(buf)) > 0) {
+        bytes.write(buf, 0, len);
+      }
+    }
+    catch (IOException e) {
+      throw new IllegalStateException("Failed reading from ner-default-features.xml file on classpath!");
+    }
+
+    byte[] featureGen = bytes.toByteArray();
+
+    // create a temp resource folder and copy the pos model there
+    Path resourcesPath = Files.createTempDirectory("opennlp_resources");
+    Files.copy(new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-pos-perceptron.bin").toPath(),
+        new File(resourcesPath.toFile(), "en-pos-perceptron.bin").toPath(),
+        StandardCopyOption.REPLACE_EXISTING);
+
+    Map<String, Object> resources;
+
+    try {
+      resources = TokenNameFinderTrainerTool.loadResources(resourcesPath.toFile(),
+          Paths.get(this.getClass().getResource("ner-en_pos-features.xml").toURI()).toFile());
+    }
+    catch (IOException | URISyntaxException e) {
+      throw new TerminateToolException(-1,"IO error while loading resources", e);
+    }
+
+
+    try (ObjectStream<NameSample> samples = createNameSampleStream()) {
+
+      TokenNameFinderCrossValidator cv = new TokenNameFinderCrossValidator("en", null,
+          params, featureGen, resources);
+
+      ObjectStream<NameSample> filteredSamples;
+
+      filteredSamples = samples;
+
+      cv.evaluate(filteredSamples, 5);
+
+      Assert.assertEquals(0.8044097625338349d, cv.getFMeasure().getFMeasure(), 0.001d);
+    }
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS78 INS83 INS39 INS42 INS43 INS8 INS42 INS42 INS60 INS21 INS60 INS54 INS60 INS60 INS21 INS60 INS54 INS54 INS43 INS59 INS32 INS43 INS59 INS58 INS8 INS12 INS5 INS59 INS43 INS59 INS32 INS74 INS59 INS8 INS12 INS58 INS8 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS14 INS43 INS59 INS60 INS60 INS61 INS44 INS8 INS39 INS85 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS32 INS32 INS40 INS43 INS43 INS43 INS42 INS21 INS44 INS8 INS74 INS59 INS60 INS60 INS21 INS21 INS21 INS42 INS42 INS43 INS42 INS42 INS32 INS5 INS59 INS39 INS59 INS27 INS8 INS43 INS42 INS53 INS42 INS42 INS42 INS42 INS45 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS7 INS84 INS42 INS53 INS43 INS43 INS42 INS32 INS43 INS59 INS74 INS59 INS7 INS32 INS32 INS42 INS32 INS42 INS45 INS39 INS85 INS42 INS3 INS42 INS36 INS34 INS21 INS42 INS14 INS43 INS32 INS45 INS43 INS32 INS45 INS42 INS32 INS43 INS43 INS14 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS34 INS32 INS34 INS52 INS42 INS5 INS34 INS7 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS42 INS43 INS38 INS45 INS42 INS43 INS45 INS33 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS32 INS42 INS45 INS52 INS42