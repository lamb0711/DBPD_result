OPENNLP-904 Harmonize lemmatizer API and function to get multiple lemmas

OPENNLP-904 add minor correction after PR comment

-  private final Map<List<String>, String> dictMap;
+  private final Map<List<String>, List<String>> dictMap;
-  public DictionaryLemmatizer(final InputStream dictionary) {
+  public DictionaryLemmatizer(final InputStream dictionary) throws IOException {
-    final BufferedReader breader = new BufferedReader(new InputStreamReader(dictionary));
+    final BufferedReader breader = new BufferedReader(
+        new InputStreamReader(dictionary));
-    try {
-      while ((line = breader.readLine()) != null) {
-        final String[] elems = line.split("\t");
-        this.dictMap.put(Arrays.asList(elems[0], elems[1]), elems[2]);
-      }
-    } catch (final IOException e) {
-      e.printStackTrace();
+    while ((line = breader.readLine()) != null) {
+      final String[] elems = line.split("\t");
+      this.dictMap.put(Arrays.asList(elems[0], elems[1]), Arrays.asList(elems[2]));
+
-  public Map<List<String>, String> getDictMap() {
+  public Map<List<String>, List<String>> getDictMap() {
+
-      lemmas.add(this.apply(tokens[i], postags[i]));
+      lemmas.add(this.lemmatize(tokens[i], postags[i]));
+  public List<List<String>> lemmatize(final List<String> tokens, final List<String> posTags) {
+    List<List<String>> allLemmas = new ArrayList<>();
+    for (int i = 0; i < tokens.size(); i++) {
+      allLemmas.add(this.getAllLemmas(tokens.get(i), posTags.get(i)));
+    }
+    return allLemmas;
+  }
+
-   * @param word the token
-   * @param postag the postag
+   *
+   * @param word
+   *          the token
+   * @param postag
+   *          the postag
-  public String apply(final String word, final String postag) {
+  private String lemmatize(final String word, final String postag) {
-    final String keyValue = this.dictMap.get(keys);
-    if (keyValue != null) {
-      lemma = keyValue;
+    final List<String> keyValues = this.dictMap.get(keys);
+    if (!keyValues.isEmpty()) {
+      lemma = keyValues.get(0);
-}
+  /**
+   * Lookup every lemma for a word,pos tag in a dictionary. Outputs "O" if not
+   * found.
+   *
+   * @param word
+   *          the token
+   * @param postag
+   *          the postag
+   * @return every lemma
+   */
+  private List<String> getAllLemmas(final String word, final String postag) {
+    List<String> lemmasList = new ArrayList<>();
+    final List<String> keys = this.getDictKeys(word, postag);
+    // lookup lemma as value of the map
+    final List<String> keyValues = this.dictMap.get(keys);
+    if (!keyValues.isEmpty()) {
+      lemmasList.addAll(keyValues);
+    } else {
+      lemmasList.add("O");
+    }
+    return lemmasList;
+  }
+}

INS31 INS31 UPD74 MOV43 MOV8 UPD74 INS83 INS74 INS42 INS44 INS44 INS8 UPD83 UPD42 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS74 MOV21 MOV60 MOV60 INS74 INS43 INS74 INS83 INS74 INS42 INS83 INS74 INS42 INS60 INS24 INS41 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS60 INS60 INS25 INS41 INS43 MOV43 INS43 MOV43 INS42 INS43 INS43 INS43 INS43 INS43 INS43 INS74 INS59 INS58 INS27 INS37 INS8 INS42 UPD66 UPD66 INS74 INS38 INS66 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS74 INS59 INS83 INS74 INS59 INS83 INS74 INS59 INS38 INS8 INS8 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS43 INS74 INS42 INS14 INS39 INS59 INS42 INS32 INS42 INS21 INS43 INS43 UPD42 INS32 INS43 INS43 INS42 INS14 INS43 INS43 INS42 INS32 INS43 INS43 INS42 INS32 INS32 INS21 INS21 INS42 INS43 INS43 INS74 INS42 INS34 INS42 INS42 INS32 INS42 MOV42 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS42 INS22 INS42 INS42 INS42 INS42 INS32 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS32 INS32 INS43 INS52 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS42 INS42 MOV2 UPD42 INS42 INS52 INS42 INS32 INS32 INS42 INS42 INS34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL83 DEL42 DEL44 DEL42 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL43 DEL42 DEL33 DEL27 DEL42