OPENNLP-641 The name finder can now use a sequence model to predict the outcome

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1562853 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.ObjectStreamException;
+import opennlp.tools.ml.SequenceTrainer;
-import opennlp.tools.ml.maxent.GIS;
-import opennlp.tools.ml.maxent.GISModel;
+import opennlp.tools.ml.model.SequenceClassificationModel;
-
-
-  protected MaxentModel model;
+  protected SequenceClassificationModel<String> model;
+  
-  private BeamSearch<String> beam;
-
+  
+  private SequenceValidator<String> sequenceValidator;
-    this.model = model.getNameFinderModel();
+    
+    this.sequenceValidator = sequenceValidator;
+    
+    // TODO: The beam size should be stored in the model and passed in during training in the future.
+    // At this point no assumption can be made about the underlying sequence classification!
+    
+    // TODO: getNameFinderModel should be removed! Instead the model should always return
+    // a sequence classification model
+    // To maintain backward compatibility this should be done later, e.g. for 1.7.0
+    
+    if (model.getNameFinderModel() != null) {
+      this.model = new opennlp.tools.ml.BeamSearch<String>(beamSize,
+          model.getNameFinderModel());
+    }
+    else {
+      this.model = model.getNameFinderSequenceModel();
+    }
+    // NOTE: This didn't turn out to work well ... anybody using this actually ?!
-    if (sequenceValidator == null)
-      sequenceValidator = new NameFinderSequenceValidator();
+    if (this.sequenceValidator == null)
+      this.sequenceValidator = new NameFinderSequenceValidator();
-    beam = new BeamSearch<String>(beamSize, contextGenerator, this.model,
-        sequenceValidator, beamSize);
+//    if (this.model != null) {
+//      beam = new BeamSearch<String>(beamSize, contextGenerator, this.model,
+//          sequenceValidator, beamSize);
+//    }
+    
-    bestSequence = beam.bestSequence(tokens, additionalContext);
-
+    
+    bestSequence = model.bestSequence(tokens, additionalContext, contextGenerator, sequenceValidator);
+    
-     MaxentModel nameFinderModel;
-
-     if (!TrainerFactory.isSupportSequence((trainParams.getSettings()))) {
+     MaxentModel nameFinderModel = null;
+     
+     SequenceClassificationModel<String> seqModel = null;
+     
+     if (TrainerFactory.isSupportEvent((trainParams.getSettings()))) {
-     else {
+     else if (TrainerFactory.isSupportEventModelSequenceTraining((trainParams.getSettings()))) {
+     else if (TrainerFactory.isSupportSequenceTraining((trainParams.getSettings()))) {
+       SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
+           trainParams.getSettings(), manifestInfoEntries);
+       NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, featureGenerator, false);
+       seqModel = trainer.train(ss);
+     }
+     else {
+       throw new IllegalStateException("Unexpected trainer type required!");
+     }
+     
+     // depending on which one is not null!
+     if (seqModel != null) {
+       return new TokenNameFinderModel(languageCode, seqModel, null,
+           resources, manifestInfoEntries);
+     }
+     
+      // TODO: This will not work!!! Method is broken.

MOV26 MOV26 MOV23 UPD40 UPD40 INS74 UPD74 INS43 INS43 UPD43 UPD42 INS21 INS25 INS25 INS60 INS25 UPD42 MOV42 INS42 UPD42 INS7 INS27 INS8 INS8 INS27 MOV21 INS74 INS59 MOV32 INS25 INS27 INS8 INS22 UPD42 MOV42 INS32 INS33 MOV21 INS21 INS22 INS33 INS33 INS43 INS43 INS42 INS33 UPD42 INS32 MOV8 INS25 INS42 INS33 INS41 INS52 INS42 INS42 INS42 INS7 INS52 INS42 INS22 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS36 INS32 INS8 INS8 INS14 INS14 MOV22 INS32 INS52 INS42 INS32 INS42 INS42 INS36 INS60 INS60 INS21 INS53 INS43 INS42 INS42 INS33 INS42 INS42 INS74 INS42 MOV32 INS42 INS42 INS42 INS42 INS32 INS43 INS59 INS43 INS59 INS7 INS14 INS42 INS43 MOV43 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS43 INS45 INS40 INS42 INS42 INS32 INS42 INS43 INS42 INS42 INS9 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL43 DEL42 DEL42 DEL33 DEL27 DEL25 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL14 DEL7 DEL21 DEL38