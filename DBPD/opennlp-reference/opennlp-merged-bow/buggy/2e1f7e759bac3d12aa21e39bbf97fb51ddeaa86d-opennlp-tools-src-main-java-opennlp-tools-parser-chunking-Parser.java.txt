OPENNLP-923: Wrap all lines longer than 110 chars

And also add checkstyle enforcement

-   * Creates a new parser using the specified models and head rules using the specified beam size and advance percentage.
+   * Creates a new parser using the specified models and head rules using the specified beam
+   * size and advance percentage.
-  private Parser(MaxentModel buildModel, MaxentModel checkModel, POSTagger tagger, Chunker chunker, HeadRules headRules, int beamSize, double advancePercentage) {
+  private Parser(MaxentModel buildModel, MaxentModel checkModel, POSTagger tagger, Chunker chunker,
+                 HeadRules headRules, int beamSize, double advancePercentage) {
-      newParse1.setChild(originalAdvanceIndex,tag); //replace constituent being labeled to create new derivation
+      //replace constituent being labeled to create new derivation
+      newParse1.setChild(originalAdvanceIndex,tag);
-      //String[] context = checkContextGenerator.getContext(newParse1.getChildren(), lastStartType, lastStartIndex, advanceNodeIndex);
-      checkModel.eval(checkContextGenerator.getContext(collapsePunctuation(newParse1.getChildren(),punctSet), lastStartType, lastStartIndex, advanceNodeIndex), cprobs);
-      //System.out.println("check "+lastStartType+" "+cprobs[completeIndex]+" "+cprobs[incompleteIndex]+" "+tag+" "+java.util.Arrays.asList(context));
+      //String[] context = checkContextGenerator.getContext(newParse1.getChildren(), lastStartType,
+      // lastStartIndex, advanceNodeIndex);
+      checkModel.eval(checkContextGenerator.getContext(
+          collapsePunctuation(newParse1.getChildren(),punctSet), lastStartType, lastStartIndex,
+          advanceNodeIndex), cprobs);
+      //System.out.println("check "+lastStartType+" "+cprobs[completeIndex]+" "+cprobs[incompleteIndex]
+      // +" "+tag+" "+java.util.Arrays.asList(context));
-          if (lastStartIndex == 0 && advanceNodeIndex == numNodes - 1) { //check for top node to include end and begining punctuation
-            //System.err.println("ParserME.advanceParses: reducing entire span: "+new Span(lastStartNode.getSpan().getStart(), advanceNode.getSpan().getEnd())+" "+lastStartType+" "+java.util.Arrays.asList(children));
-            newParse2.insert(new Parse(p.getText(), p.getSpan(), lastStartType, cprobs[1], headRules.getHead(cons, lastStartType)));
+          //check for top node to include end and begining punctuation
+          if (lastStartIndex == 0 && advanceNodeIndex == numNodes - 1) {
+            //System.err.println("ParserME.advanceParses: reducing entire span: "
+            // +new Span(lastStartNode.getSpan().getStart(), advanceNode.getSpan().getEnd())+" "
+            // +lastStartType+" "+java.util.Arrays.asList(children));
+            newParse2.insert(new Parse(p.getText(), p.getSpan(), lastStartType, cprobs[1],
+                headRules.getHead(cons, lastStartType)));
-            newParse2.insert(new Parse(p.getText(), new Span(lastStartNode.getSpan().getStart(), advanceNode.getSpan().getEnd()), lastStartType, cprobs[1], headRules.getHead(cons, lastStartType)));
+            newParse2.insert(new Parse(p.getText(), new Span(lastStartNode.getSpan().getStart(),
+                advanceNode.getSpan().getEnd()), lastStartType, cprobs[1],
+                headRules.getHead(cons, lastStartType)));
-  public static AbstractModel train(ObjectStream<Event> es, int iterations, int cut) throws java.io.IOException {
+  public static AbstractModel train(ObjectStream<Event> es, int iterations, int cut) throws IOException {
-  public static ParserModel train(String languageCode, ObjectStream<Parse> parseSamples, HeadRules rules, TrainingParameters mlParams)
+  public static ParserModel train(String languageCode, ObjectStream<Parse> parseSamples,
+                                  HeadRules rules, TrainingParameters mlParams)
-    EventTrainer buildTrainer = TrainerFactory.getEventTrainer(mlParams.getSettings("build"), buildReportMap);
+    EventTrainer buildTrainer =
+        TrainerFactory.getEventTrainer(mlParams.getSettings("build"), buildReportMap);
-    EventTrainer checkTrainer = TrainerFactory.getEventTrainer( mlParams.getSettings("check"), checkReportMap);
+    EventTrainer checkTrainer =
+        TrainerFactory.getEventTrainer(mlParams.getSettings("check"), checkReportMap);

UPD43 INS42 UPD66 INS66 DEL40