OPENNLP-671 Add L1-regularization into L-BFGS. Thanks to Vinh Khuc  for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1590233 13f79535-47bb-0310-9956-ffa450edef68

-public class NegLogLikelihoodFunction implements DifferentiableFunction {
+public class NegLogLikelihood implements Function {
-  private int domainDimension;
+  private int dimension;
-  // L2-regularization cost
-  private double l2Cost;
-  
-  // For computing log-likelihood
+  // For computing negative log-likelihood
-  public NegLogLikelihoodFunction(DataIndexer indexer) {
-    this(indexer, QNTrainer.L2COST_DEFAULT);
-  }
-  
-  public NegLogLikelihoodFunction(DataIndexer indexer, double l2Cost) {
+  public NegLogLikelihood(DataIndexer indexer) {
+    
-    this.numOutcomes = indexer.getOutcomeLabels().length;
-    this.numFeatures = indexer.getPredLabels().length;
-    this.numContexts = this.contexts.length;
-    this.domainDimension = numOutcomes * numFeatures;
-    this.empiricalCount = new double[domainDimension];
+    this.numOutcomes    = indexer.getOutcomeLabels().length;
+    this.numFeatures    = indexer.getPredLabels().length;
+    this.numContexts    = this.contexts.length;
+    this.dimension      = numOutcomes * numFeatures;
+    this.empiricalCount = new double[dimension];
-    this.l2Cost = l2Cost;
-    
-    this.gradient      = new double[domainDimension];
-    this.expectedCount = new double[domainDimension];
+    this.gradient      = new double[dimension];
+    this.expectedCount = new double[dimension];
-    initEmpCount();
+    computeEmpCount();
-  public int getDomainDimension() {
-    return this.domainDimension;
+  public int getDimension() {
+    return this.dimension;
-    return new double[domainDimension];
+    return new double[dimension];
-    if (x.length != this.domainDimension) {
-      throw new IllegalArgumentException("x is invalid, its dimension is not equal to domain dimension.");
-    }
+    if (x.length != this.dimension)
+      throw new IllegalArgumentException(
+          "x is invalid, its dimension is not equal to domain dimension.");
-    double negLogLikelihood = 0.0;
-
+    computeSums(x); // Compute voteSum and logSumExp
+    
+    double negLogLikelihood = 0.;
-      for (int oi = 0; oi < numOutcomes; oi++) {
-        double vecProduct = 0.0;
-        for (int af = 0; af < this.contexts[ci].length; af++) {
-          int vectorIndex = indexOf(oi, contexts[ci][af]);
-          double predValue = 1.0;
-          if (values != null) predValue = this.values[ci][af];
-          if (predValue == 0.0) continue;
-          vecProduct += predValue * x[vectorIndex];
-        }
-        voteSum[ci][oi] = vecProduct;
-      }
-
-      // \log(\sum_{c'=1}^{C} e^{w_c'^T x_i})
-      logSumExp[ci] = ArrayMath.logSumOfExps(voteSum[ci]);
-      
-
-    if (l2Cost > 0) {
-      for (int i = 0; i < x.length; i++) {
-        negLogLikelihood += l2Cost * x[i] * x[i];
-      }
-    }
-    
-   * Compute gradient. <br>For the same value x, gradientAt(x) must be called after 
-   * valueAt(x) is called. <br>Otherwise, the output will be incorrect.   
+   * Compute gradient
-    if (x.length != this.domainDimension) {
-      throw new IllegalArgumentException("x is invalid, its dimension is not equal to the function.");
-    }
+    if (x.length != this.dimension)
+      throw new IllegalArgumentException(
+          "x is invalid, its dimension is not equal to the function.");
-    /**
-     * Here, we assume that valueAt(x) is called before this function
-     * so that we can reuse voteSum and logSumExp computed in the function valueAt(x) 
-     */
+    computeSums(x); // Compute voteSum and logSumExp
-          double predValue = 1.0;
+          double predValue = 1.;
-          if (predValue == 0.0) continue;
+          if (predValue == 0.) continue;
-    if (l2Cost > 0) {
-      for (int i = 0; i < domainDimension; i++) { 
-        gradient[i] = expectedCount[i] - this.empiricalCount[i] + 2 * l2Cost * x[i];
-      }
-    } 
-    else {
-      for (int i = 0; i < domainDimension; i++) { 
-        gradient[i] = expectedCount[i] - this.empiricalCount[i];
-      }
+    for (int i = 0; i < dimension; i++) { 
+      gradient[i] = expectedCount[i] - this.empiricalCount[i];
-  private void initEmpCount() {
+  /**
+   * Compute temporary values
+   */
+  private void computeSums(double[] x) {
+    for (int ci = 0; ci < numContexts; ci++) {
+      for (int oi = 0; oi < numOutcomes; oi++) {
+        double vecProduct = 0.;
+        for (int af = 0; af < this.contexts[ci].length; af++) {
+          int vectorIndex = indexOf(oi, contexts[ci][af]);
+          double predValue = 1.;
+          if (values != null) predValue = this.values[ci][af];
+          if (predValue == 0.) continue;
+          vecProduct += predValue * x[vectorIndex];
+        }
+        voteSum[ci][oi] = vecProduct;
+      }
+
+      // \log(\sum_{c'=1}^{C} e^{w_c'^T x_i})
+      logSumExp[ci] = ArrayMath.logSumOfExps(voteSum[ci]);
+    }
+  }
+  
+  /**
+   * Compute empirical count
+   */
+  private void computeEmpCount() {
-          empiricalCount[vectorIndex] += 1.0 * numTimesEventsSeen[ci];
+          empiricalCount[vectorIndex] += 1. * numTimesEventsSeen[ci];

MOV31 UPD42 UPD43 INS31 UPD42 UPD42 MOV21 UPD42 INS83 MOV5 INS42 INS8 MOV29 INS39 UPD42 MOV44 INS29 UPD83 INS39 INS42 INS44 INS29 UPD42 UPD42 INS41 MOV25 INS21 INS60 INS24 MOV21 MOV41 MOV21 MOV24 INS65 INS5 INS42 INS65 MOV3 MOV53 INS32 INS39 INS59 INS58 INS27 INS37 INS8 UPD66 MOV53 INS32 INS66 INS39 INS85 INS66 MOV22 INS3 INS22 UPD42 UPD42 UPD42 INS42 INS42 INS42 INS34 INS39 INS59 INS42 INS42 INS42 MOV60 MOV21 INS42 INS42 UPD42 UPD42 MOV5 INS42 INS52 INS42 UPD42 MOV52 MOV42 UPD42 UPD42 INS42 INS34 UPD42 UPD34 UPD34 UPD34 UPD34 UPD34 UPD34 DEL83 DEL39 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL17 DEL8 DEL31 DEL39 DEL42 DEL44 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL8 DEL42 DEL3 DEL41 DEL66 DEL8 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL52 DEL42 DEL22 DEL42 DEL2 DEL27 DEL34 DEL42 DEL42 DEL42 DEL2 DEL27 DEL27 DEL7 DEL42 DEL34 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL8 DEL24 DEL8 DEL8 DEL25 DEL39 DEL42 DEL39 DEL42 DEL34 DEL59 DEL60 DEL42 DEL34 DEL27 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL2 DEL42 DEL42 DEL2 DEL27 DEL7 DEL21 DEL8 DEL24 DEL8 DEL25