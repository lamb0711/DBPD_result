OPENNLP-227 Updated Parser trainer tool

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1148012 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.cmdline.ArgumentParser;
+import opennlp.tools.cmdline.TrainingToolParams;
+  
+  interface TrainerToolParams extends TrainingParams, TrainingToolParams{
+
+  }
-    return "Usage: " + CLI.CMD + " " + getName() + " " + TrainingParameters.getParameterUsage() + 
-        " -head-rules head_rules -data trainingData -model model\n" + TrainingParameters.getDescription();
+    return "Usage: " + CLI.CMD + " " + getName() + " "
+      + ArgumentParser.createUsage(TrainerToolParams.class);
+  static ParserType parseParserType(String typeAsString) {
+    ParserType type = null;
+    if(typeAsString != null && typeAsString.length() > 0) {
+      type = ParserType.parse(typeAsString);
+      if(type == null) {
+        System.err.println("ParserType training parameter is invalid!");
+        throw new TerminateToolException(-1);
+      }
+    }
+    
+    return type;
+  }
+  
-    if (args.length < 10) {
-      System.out.println(getHelp());
+    if (!ArgumentParser.validateArguments(args, TrainerToolParams.class)) {
+      System.err.println(getHelp());
-
-    TrainingParameters parameters = new TrainingParameters(args);
-    if(!parameters.isValid()) {
-      System.out.println(getHelp());
-      throw new TerminateToolException(1);
-    } 
+    TrainerToolParams params = ArgumentParser.parse(args,
+        TrainerToolParams.class); 
-      CmdLineUtil.loadTrainingParameters(CmdLineUtil.getParameter("-params", args), true);
+      CmdLineUtil.loadTrainingParameters(params.getParams(), true);
-    ObjectStream<Parse> sampleStream = openTrainingData(new File(CmdLineUtil.getParameter("-data", args)), parameters.getEncoding());
+    ObjectStream<Parse> sampleStream = openTrainingData(params.getData(), params.getEncoding());
-    File modelOutFile = new File(CmdLineUtil.getParameter("-model", args));
+    File modelOutFile = params.getModel();
-          new InputStreamReader(new FileInputStream(new File(CmdLineUtil.getParameter("-head-rules", args))), 
-          parameters.getEncoding()));
+          new InputStreamReader(new FileInputStream(params.getHeadRules()),
+              params.getEncoding()));
+      
+      ParserType type = parseParserType(params.getParserType());
-        if (ParserType.CHUNKING.equals(parameters.getParserType())) {
+        if (ParserType.CHUNKING.equals(type)) {
-              parameters.getLanguage(), sampleStream, rules, 
-              parameters.getNumberOfIterations(), parameters.getCutoff());
+              params.getLang(), sampleStream, rules, 
+              params.getIterations(), params.getCutoff());
-        else if (ParserType.TREEINSERT.equals(parameters.getParserType())) {
-          model = opennlp.tools.parser.treeinsert.Parser.train(parameters.getLanguage(), sampleStream, rules, parameters.getNumberOfIterations(), 
-              parameters.getCutoff());
+        else if (ParserType.TREEINSERT.equals(type)) {
+          model = opennlp.tools.parser.treeinsert.Parser.train(params.getLang(), sampleStream, rules, params.getIterations(), 
+              params.getCutoff());
-        if (ParserType.CHUNKING.equals(parameters.getParserType())) {
+        if (ParserType.CHUNKING.equals(type)) {
-              parameters.getLanguage(), sampleStream, rules, 
+              params.getLang(), sampleStream, rules, 
-        else if (ParserType.TREEINSERT.equals(parameters.getParserType())) {
-          model = opennlp.tools.parser.treeinsert.Parser.train(parameters.getLanguage(), sampleStream, rules,
+        else if (ParserType.TREEINSERT.equals(type)) {
+          model = opennlp.tools.parser.treeinsert.Parser.train(params.getLang(), sampleStream, rules,

INS26 INS26 INS40 INS40 INS55 INS31 INS42 INS43 INS43 INS83 INS43 INS42 INS44 INS8 MOV60 INS42 INS42 INS42 INS43 INS42 INS60 INS25 INS41 INS42 INS43 INS59 INS27 INS8 INS42 UPD43 MOV43 INS32 INS42 INS42 INS33 INS27 INS27 INS21 INS25 UPD42 UPD42 INS32 INS32 INS60 UPD42 MOV42 UPD42 MOV42 INS57 INS42 INS33 INS32 INS34 INS7 INS27 INS8 UPD42 UPD42 INS42 INS57 INS42 INS42 INS42 INS57 INS32 UPD42 MOV42 UPD42 MOV42 INS43 INS59 INS43 INS42 INS42 INS42 INS32 INS42 INS33 INS21 INS53 INS43 UPD40 INS43 UPD42 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS14 INS42 INS42 INS42 INS32 INS40 INS42 INS45 INS43 INS38 MOV14 INS42 INS42 UPD42 MOV42 MOV8 UPD42 MOV42 MOV8 INS42 INS34 MOV43 UPD42 UPD42 MOV42 UPD42 MOV42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL40 DEL34 DEL27 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL34 DEL14 DEL53 DEL8 DEL25 DEL42 DEL43 DEL42 DEL14 DEL45 DEL42 DEL42 DEL43 DEL45 DEL42 DEL32 DEL14 DEL42 DEL43 DEL42 DEL43 DEL45 DEL42 DEL32 DEL14 DEL42 DEL45 DEL14 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32 DEL42 DEL32