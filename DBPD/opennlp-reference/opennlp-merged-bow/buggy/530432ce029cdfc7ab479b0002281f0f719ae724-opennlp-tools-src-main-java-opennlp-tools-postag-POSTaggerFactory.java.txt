OPENNLP-125: Make POS Tagger feature generation configurable

+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import opennlp.tools.namefind.TokenNameFinderFactory;
+import opennlp.tools.util.Version;
+import opennlp.tools.util.featuregen.AdaptiveFeatureGenerator;
+import opennlp.tools.util.featuregen.AggregatedFeatureGenerator;
+import opennlp.tools.util.featuregen.GeneratorFactory;
+
+  private byte[] featureGeneratorBytes;
+  private Map<String, Object> resources;
+   *
+   * @deprecated this constructor is here for backward compatibility and
+   *             is not functional anymore in the training of 1.8.x series models
-  public POSTaggerFactory(Dictionary ngramDictionary,
-      TagDictionary posDictionary) {
+  @Deprecated
+  public POSTaggerFactory(Dictionary ngramDictionary, TagDictionary posDictionary) {
+
+    // TODO: This could be made functional by creating some default feature generation
+    // which uses the dictionary ...
+  public POSTaggerFactory(byte[] featureGeneratorBytes, final Map<String, Object> resources,
+                          TagDictionary posDictionary) {
+    this.featureGeneratorBytes = featureGeneratorBytes;
+
+    if (this.featureGeneratorBytes == null) {
+      this.featureGeneratorBytes = loadDefaultFeatureGeneratorBytes();
+    }
+
+    this.resources = resources;
+    this.posDictionary = posDictionary;
+  }
+
+  @Deprecated // will be removed when only 8 series models are supported
+  protected void init(byte[] featureGeneratorBytes, final Map<String, Object> resources,
+                      TagDictionary posDictionary) {
+    this.featureGeneratorBytes = featureGeneratorBytes;
+    this.resources = resources;
+    this.posDictionary = posDictionary;
+  }
+  private static byte[] loadDefaultFeatureGeneratorBytes() {
+
+    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
+    try (InputStream in = TokenNameFinderFactory.class.getResourceAsStream(
+        "/opennlp/tools/postag/pos-default-features.xml")) {
+
+      if (in == null) {
+        throw new IllegalStateException("Classpath must contain pos-default-features.xml file!");
+      }
+
+      byte[] buf = new byte[1024];
+      int len;
+      while ((len = in.read(buf)) > 0) {
+        bytes.write(buf, 0, len);
+      }
+    }
+    catch (IOException e) {
+      throw new IllegalStateException("Failed reading from pos-default-features.xml file on classpath!");
+    }
+
+    return bytes.toByteArray();
+  }
+
+  /**
+   * Creates the {@link AdaptiveFeatureGenerator}. Usually this
+   * is a set of generators contained in the {@link AggregatedFeatureGenerator}.
+   *
+   * Note:
+   * The generators are created on every call to this method.
+   *
+   * @return the feature generator or null if there is no descriptor in the model
+   */
+  public AdaptiveFeatureGenerator createFeatureGenerators() {
+
+    if (featureGeneratorBytes == null && artifactProvider != null) {
+      featureGeneratorBytes = artifactProvider.getArtifact(
+          POSModel.GENERATOR_DESCRIPTOR_ENTRY_NAME);
+    }
+
+    if (featureGeneratorBytes == null) {
+      featureGeneratorBytes = loadDefaultFeatureGeneratorBytes();
+    }
+
+    InputStream descriptorIn = new ByteArrayInputStream(featureGeneratorBytes);
+
+    AdaptiveFeatureGenerator generator;
+    try {
+      generator = GeneratorFactory.create(descriptorIn, key -> {
+        if (artifactProvider != null) {
+          return artifactProvider.getArtifact(key);
+        }
+        else {
+          return resources.get(key);
+        }
+      });
+    } catch (InvalidFormatException e) {
+      // It is assumed that the creation of the feature generation does not
+      // fail after it succeeded once during model loading.
+
+      // But it might still be possible that such an exception is thrown,
+      // in this case the caller should not be forced to handle the exception
+      // and a Runtime Exception is thrown instead.
+
+      // If the re-creation of the feature generation fails it is assumed
+      // that this can only be caused by a programming mistake and therefore
+      // throwing a Runtime Exception is reasonable
+
+      throw new IllegalStateException(); // FeatureGeneratorCreationError(e);
+    } catch (IOException e) {
+      throw new IllegalStateException("Reading from mem cannot result in an I/O error", e);
+    }
+
+    return generator;
+  }
+
-    POSDictionarySerializer.register(serializers);
-    // the ngram Dictionary uses a base serializer, we don't need to add it here.
+
+    // NOTE: This is only needed for old models and this if can be removed if support is dropped
+    if (Version.currentVersion().getMinor() < 8) {
+      POSDictionarySerializer.register(serializers);
+    }
+
+  protected Map<String, Object> getResources() {
+
+
+    if (resources != null) {
+      return resources;
+    }
+
+    return Collections.emptyMap();
+  }
+
+  protected byte[] getFeatureGenerator() {
+    return featureGeneratorBytes;
+  }
+
+  /**
+   * @deprecated this will be reduced in visibility and later removed
+   */
+  @Deprecated
+  @Deprecated
-    return new DefaultPOSContextGenerator(0, getDictionary());
+    return getPOSContextGenerator(0);
+    if (Version.currentVersion().getMinor() >= 8) {
+      return new ConfigurablePOSContextGenerator(cacheSize, createFeatureGenerators());
+    }
+
-  static class POSDictionarySerializer implements ArtifactSerializer<POSDictionary> {
+  // TODO: This should not be done anymore for 8 models, they can just
+  // use the SerializableArtifact interface
+  public static class POSDictionarySerializer implements ArtifactSerializer<POSDictionary> {
+  @Deprecated
-      System.err.println(msg);
-      e.printStackTrace();
+  }
+  public static POSTaggerFactory create(String subclassName, byte[] featureGeneratorBytes,
+                                        Map<String, Object> resources, TagDictionary posDictionary)
+      throws InvalidFormatException {
+
+    POSTaggerFactory theFactory;
+
+    if (subclassName == null) {
+      // will create the default factory
+      theFactory = new POSTaggerFactory(null, posDictionary);
+    }
+    else {
+      try {
+        theFactory = ExtensionLoader.instantiateExtension(
+            POSTaggerFactory.class, subclassName);
+      } catch (Exception e) {
+        String msg = "Could not instantiate the " + subclassName
+            + ". The initialization throw an exception.";
+        throw new InvalidFormatException(msg, e);
+      }
+    }
+
+    theFactory.init(featureGeneratorBytes, resources, posDictionary);
+
+    return theFactory;

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS23 INS23 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS83 INS5 INS59 INS83 INS74 INS59 INS78 INS83 INS42 INS44 INS44 INS44 INS8 INS78 INS83 INS39 INS42 INS44 INS44 INS44 INS8 INS83 INS83 INS5 INS42 INS8 INS29 INS83 INS43 INS42 INS8 INS83 INS74 INS42 INS8 INS83 INS5 INS42 INS8 INS29 INS78 INS78 INS83 INS78 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS39 INS85 INS42 INS43 INS43 INS43 INS42 INS65 INS42 INS5 INS42 INS83 INS74 INS42 INS43 INS42 INS21 INS25 INS21 INS21 INS42 INS5 INS42 INS83 INS74 INS42 INS43 INS42 INS21 INS21 INS21 INS39 INS85 INS60 INS54 INS41 INS65 INS65 INS42 INS25 INS25 INS60 INS60 INS54 INS41 INS25 INS43 INS43 INS43 INS25 INS41 INS39 INS85 INS41 INS65 INS42 INS42 INS25 INS42 INS42 INS43 INS42 INS5 INS42 INS74 INS42 INS43 INS42 INS42 INS60 INS25 INS21 INS41 INS42 INS42 INS42 INS66 INS66 INS39 INS85 INS43 INS43 INS43 INS42 INS7 INS27 INS8 INS7 INS7 INS39 INS85 INS43 INS43 INS43 INS42 INS7 INS7 INS7 INS43 INS59 INS58 INS8 INS12 INS32 INS66 INS65 INS66 INS66 INS65 INS66 INS66 INS66 INS66 INS27 INS8 INS27 INS8 INS43 INS59 INS43 INS59 INS8 INS12 INS12 INS42 INS27 INS8 INS42 INS42 INS42 INS27 INS8 INS32 INS42 INS66 INS32 INS27 INS8 INS42 INS39 INS85 INS43 INS43 INS43 INS42 INS43 INS59 INS27 INS8 INS8 INS32 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS33 INS21 INS22 INS42 INS22 INS42 INS42 INS42 INS42 INS22 INS42 INS22 INS42 INS22 INS42 INS42 INS42 INS14 INS43 INS59 INS25 INS60 INS60 INS61 INS44 INS8 INS42 INS42 INS42 INS42 INS27 INS27 INS21 INS42 INS33 INS21 INS42 INS42 INS14 INS42 INS42 INS21 INS44 INS8 INS44 INS8 INS32 INS34 MOV21 INS42 INS33 INS41 INS42 INS42 INS42 INS34 INS32 INS34 INS41 INS42 INS42 INS42 INS42 INS42 INS42 INS33 INS21 INS54 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS52 INS42 INS7 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS52 INS42 INS43 INS42 INS42 INS32 INS27 INS8 INS5 INS59 INS39 INS59 INS27 INS8 INS43 INS42 INS53 INS42 INS33 INS42 INS33 INS7 INS7 INS43 INS42 INS7 INS43 INS42 INS53 INS43 INS42 INS53 INS32 INS42 INS42 INS32 INS42 INS14 INS7 INS8 INS12 INS22 INS32 INS42 INS57 INS42 INS45 INS42 INS33 INS53 INS39 INS85 INS42 INS3 INS42 INS36 INS34 INS21 INS42 INS14 INS42 INS32 INS42 INS32 INS42 INS42 INS32 INS42 INS14 INS42 INS14 INS42 INS42 INS42 INS42 INS43 INS42 INS32 INS42 INS14 INS21 INS44 INS8 INS52 INS42 INS42 INS43 INS14 INS5 INS34 INS7 INS32 INS43 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS86 INS43 INS43 INS45 INS42 INS42 INS42 INS43 INS33 INS42 INS7 INS43 INS42 INS60 INS53 INS42 INS43 INS45 INS39 INS85 INS42 INS32 INS42 INS42 INS42 INS34 INS42 INS42 INS59 INS8 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS59 INS14 INS42 INS42 INS42 INS42 INS42 INS25 INS42 INS42 INS57 INS42 INS42 INS42 INS27 INS43 INS42 INS42 INS27 INS8 INS8 INS43 INS45 INS42 INS45 INS42 INS42 INS33 INS41 INS41 INS42 INS32 INS32 INS42 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL34 DEL42 DEL32 DEL14 DEL40 DEL42 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21