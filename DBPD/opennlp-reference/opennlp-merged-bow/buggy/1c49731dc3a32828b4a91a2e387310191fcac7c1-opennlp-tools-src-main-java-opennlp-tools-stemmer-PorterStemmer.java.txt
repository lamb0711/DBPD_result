OPENNLP-337 Fixed import, removed main method and removed dependency on Lucenes ArrayUtils.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1305254 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.lucene.analysis.en;
+package opennlp.tools.stemmer;
-/**
+/*
- * the License.  You may obtain a copy of the License at
+ * the License. You may obtain a copy of the License at
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.FileInputStream;
-
-import static org.apache.lucene.util.RamUsageEstimator.NUM_BYTES_CHAR;
-import org.apache.lucene.util.ArrayUtil;
-
-class PorterStemmer
-{
+class PorterStemmer implements Stemmer {
-  private static final int INITIAL_SIZE = 50;
-
+  private static final int INC = 50;
+  
-    b = new char[INITIAL_SIZE];
+    b = new char[INC];
-    if (b.length <= i) {
-      b = ArrayUtil.grow(b, i+1);
+    if (b.length == i) {
+      
+      char[] new_b = new char[i+INC];
+      for (int c = 0; c < i; c++) new_b[c] = b[c]; {
+        b = new_b;
+      }
+  /**
+   * Stem a word provided as a CharSequence.
+   * Returns the result as a CharSequence.
+   */
+  public CharSequence stem(CharSequence word) {
+    return stem(word.toString());
+  }
+  
-      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];
+      b = new char[wordLen - offset];
-
-  /** Test program for demonstrating the Stemmer.  It reads a file and
-   * stems each word, writing the result to standard out.
-   * Usage: Stemmer file-name
-   */
-  public static void main(String[] args) {
-    PorterStemmer s = new PorterStemmer();
-
-    for (int i = 0; i < args.length; i++) {
-      try {
-        InputStream in = new FileInputStream(args[i]);
-        byte[] buffer = new byte[1024];
-        int bufferLen, offset, ch;
-
-        bufferLen = in.read(buffer);
-        offset = 0;
-        s.reset();
-
-        while(true) {
-          if (offset < bufferLen)
-            ch = buffer[offset++];
-          else {
-            bufferLen = in.read(buffer);
-            offset = 0;
-            if (bufferLen < 0)
-              ch = -1;
-            else
-              ch = buffer[offset++];
-          }
-
-          if (Character.isLetter((char) ch)) {
-            s.add(Character.toLowerCase((char) ch));
-          }
-          else {
-             s.stem();
-             System.out.print(s.toString());
-             s.reset();
-             if (ch < 0)
-               break;
-             else {
-               System.out.print((char) ch);
-             }
-           }
-        }
-
-        in.close();
-      }
-      catch (IOException e) {
-        System.out.println("error reading " + args[i]);
-      }
-    }
-  }

UPD40 INS43 INS31 INS31 INS42 MOV29 MOV83 MOV39 MOV42 MOV44 INS8 INS29 INS83 INS43 INS42 INS44 INS8 UPD42 INS25 MOV21 INS65 INS42 UPD43 MOV43 UPD42 MOV42 INS41 UPD27 MOV27 INS8 INS66 INS66 UPD42 INS32 MOV60 INS24 INS8 UPD42 MOV42 INS32 UPD42 UPD5 INS58 INS27 INS37 INS21 INS21 INS42 INS42 UPD39 UPD42 INS39 INS59 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 MOV7 MOV7 UPD5 INS27 UPD42 MOV42 INS34 INS2 INS2 INS42 INS42 INS27 UPD39 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL34 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL37 DEL2 DEL42 DEL42 DEL42 DEL42 DEL42 DEL34 DEL27 DEL32 DEL7 DEL21 DEL8 DEL25 DEL8 DEL31 DEL42 DEL42 DEL42 DEL42 DEL32 DEL66 DEL66 DEL66 DEL65 DEL29 DEL83 DEL83 DEL39 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL2 DEL14 DEL59 DEL60 DEL39 DEL42 DEL59 DEL42 DEL59 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL32 DEL7 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL42 DEL32 DEL21 DEL9 DEL27 DEL42 DEL42 DEL37 DEL2 DEL7 DEL21 DEL21 DEL42 DEL34 DEL7 DEL21 DEL42 DEL34 DEL27 DEL42 DEL34 DEL38 DEL7 DEL21 DEL21 DEL25 DEL8 DEL25 DEL42 DEL42 DEL39 DEL42 DEL11 DEL32 DEL42 DEL42 DEL42 DEL42 DEL39 DEL42 DEL11 DEL32 DEL32 DEL21 DEL8 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL32 DEL21 DEL42 DEL34 DEL27 DEL10 DEL40 DEL42 DEL39 DEL42 DEL11 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL61 DEL42 DEL42 DEL32 DEL21 DEL8 DEL44 DEL40 DEL45 DEL42 DEL42 DEL2 DEL27 DEL32 DEL21 DEL8 DEL12 DEL54 DEL8 DEL24 DEL8 DEL31