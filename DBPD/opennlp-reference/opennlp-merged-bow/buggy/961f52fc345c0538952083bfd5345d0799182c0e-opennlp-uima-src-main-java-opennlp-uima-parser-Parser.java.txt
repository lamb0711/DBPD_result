OPENLP-24 Formated code to comply with conventions

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1063274 13f79535-47bb-0310-9956-ffa450edef68

-          String tokenString = tokens[i].getCoveredText(sentence).toString();
-          String escapedToken = escape(tokenString);
-          tokenList[i] = escapedToken;
-          
-          int escapedStart = sentenceStringBuilder.length();
-          int start = tokens[i].getStart();
-          mIndexMap.put(new Integer(escapedStart), new Integer(start));
-          
-          int escapedEnd = escapedStart + escapedToken.length();
-          int end = tokens[i].getEnd();
-          mIndexMap.put(new Integer(escapedEnd), new Integer(end));
-          
-          sentenceStringBuilder.append(tokenList[i]);
-          
-          sentenceStringBuilder.append(' '); 
+        String tokenString = tokens[i].getCoveredText(sentence).toString();
+        String escapedToken = escape(tokenString);
+        tokenList[i] = escapedToken;
+
+        int escapedStart = sentenceStringBuilder.length();
+        int start = tokens[i].getStart();
+        mIndexMap.put(new Integer(escapedStart), new Integer(start));
+
+        int escapedEnd = escapedStart + escapedToken.length();
+        int end = tokens[i].getEnd();
+        mIndexMap.put(new Integer(escapedEnd), new Integer(end));
+
+        sentenceStringBuilder.append(tokenList[i]);
+
+        sentenceStringBuilder.append(' ');
-        
-        mParseForTagger.insert(new Parse(tokenizedSentence, new Span(start, 
-              start + tokenList[i].length()), 
-              opennlp.tools.parser.chunking.Parser.TOK_NODE, 0f, 0));
-          
-          start += tokenList[i].length() + 1;
+
+        mParseForTagger.insert(new Parse(tokenizedSentence, new Span(start,
+            start + tokenList[i].length()),
+            opennlp.tools.parser.chunking.Parser.TOK_NODE, 0f, 0));
+
+        start += tokenList[i].length() + 1;
-    
-	this.context = context;
-	  
+
+    this.context = context;
+
-    
+
-    } 
-    
+    }
+
-    
+
-      ParserModelResource modelResource = 
-            (ParserModelResource) context.getResourceObject(UimaUtil.MODEL_PARAMETER);
-        
-        model = modelResource.getModel();
+      ParserModelResource modelResource = (ParserModelResource) context
+          .getResourceObject(UimaUtil.MODEL_PARAMETER);
+
+      model = modelResource.getModel();
+    } catch (ResourceAccessException e) {
+      throw new ResourceInitializationException(e);
-    catch (ResourceAccessException e) {
-        throw new ResourceInitializationException(e);
-    }
-    
+
-    
-	  mSentenceType = AnnotatorUtil.getRequiredTypeParameter(context, typeSystem,
+
+    mSentenceType = AnnotatorUtil.getRequiredTypeParameter(context, typeSystem,
-	  mTokenType = AnnotatorUtil.getRequiredTypeParameter(context, typeSystem,
+    mTokenType = AnnotatorUtil.getRequiredTypeParameter(context, typeSystem,
-	  mParseType = AnnotatorUtil.getRequiredTypeParameter(context, typeSystem,
+    mParseType = AnnotatorUtil.getRequiredTypeParameter(context, typeSystem,
-    mTypeFeature = AnnotatorUtil.getRequiredFeatureParameter(context, mParseType, TYPE_FEATURE_PARAMETER, 
-    		CAS.TYPE_NAME_STRING);
+    mTypeFeature = AnnotatorUtil.getRequiredFeatureParameter(context,
+        mParseType, TYPE_FEATURE_PARAMETER, CAS.TYPE_NAME_STRING);
-    while (containingTokens.hasNext())
-    {
-    	AnnotationFS token = (AnnotationFS) containingTokens.next();
-    	
-    	sentenceStringBuilder.append(token.getCoveredText());
-    	
-    	// attention the offsets moves inside the sentence...
-        sentenceStringBuilder.append(' '); 
+    while (containingTokens.hasNext()) {
+      AnnotationFS token = (AnnotationFS) containingTokens.next();
+
+      sentenceStringBuilder.append(token.getCoveredText());
+
+      // attention the offsets moves inside the sentence...
+      sentenceStringBuilder.append(' ');
-  
+

