OPENNLP-949: Add more eval tests for qn and others

-import opennlp.tools.ml.perceptron.PerceptronTrainer;
-  private static TrainingParameters getPerceptronZeroCutoff() {
-    TrainingParameters params = ModelUtil.createDefaultTrainingParameters();
-    params.put(TrainingParameters.ALGORITHM_PARAM,
-        PerceptronTrainer.PERCEPTRON_VALUE);
-    params.put(TrainingParameters.CUTOFF_PARAM, "0");
-
-    return params;
-  }
-
-  public void evalPortugueseSentenceDetector() throws IOException {
-    sentenceCrossEval(getPerceptronZeroCutoff(), 0.9892778840089301d);
+  public void evalPortugueseSentenceDetectorPerceptron() throws IOException {
+    sentenceCrossEval(EvalUtil.createPerceptronParams(), 0.9892778840089301d);
-  public void evalPortugueseTokenizer() throws IOException {
-    tokenizerCrossEval(getPerceptronZeroCutoff(), 0.9994887308380267d);
+  public void evalPortugueseSentenceDetectorGis() throws IOException {
+    sentenceCrossEval(ModelUtil.createDefaultTrainingParameters(), 0.987270070655111d);
-  public void evalPortugueseChunker() throws IOException {
+  public void evalPortugueseSentenceDetectorMaxentQn() throws IOException {
+    sentenceCrossEval(EvalUtil.createMaxentQnParams(), 0.99261110833375d);
+  }
+
+  @Test
+  public void evalPortugueseSentenceDetectorNaiveBayes() throws IOException {
+    sentenceCrossEval(EvalUtil.createNaiveBayesParams(), 0.9672196206048099d);
+  }
+
+  @Test
+  public void evalPortugueseTokenizerPerceptron() throws IOException {
+    tokenizerCrossEval(EvalUtil.createPerceptronParams(), 0.9994887308380267d);
+  }
+
+  @Test
+  public void evalPortugueseTokenizerGis() throws IOException {
+    tokenizerCrossEval(ModelUtil.createDefaultTrainingParameters(), 0.9992539405481062d);
+  }
+
+  @Test
+  public void evalPortugueseTokenizerMaxentQn() throws IOException {
+    tokenizerCrossEval(EvalUtil.createMaxentQnParams(), 0.9996017148748251d);
+  }
+
+  @Test
+  public void evalPortugueseTokenizerNaiveBayes() throws IOException {
+    tokenizerCrossEval(EvalUtil.createNaiveBayesParams(), 0.9962358244502717d);
+  }
+  @Test
+  public void evalPortugueseTokenizerMaxentQnMultipleThreads() throws IOException {
+    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    params.put("Threads", "4");
+    tokenizerCrossEval(params, 0.9996017148748251d);
+  }
+
+  @Test
+  public void evalPortugueseChunkerPerceptron() throws IOException {
+    chunkerCrossEval(EvalUtil.createPerceptronParams(),
+        0.9638122825015589d);
+  }
+
+  @Test
+  public void evalPortugueseChunkerGis() throws IOException {
+
+  @Test
+  public void evalPortugueseChunkerGisMultipleThreads() throws IOException {
+    TrainingParameters params = ModelUtil.createDefaultTrainingParameters();
+    params.put("Threads", "4");
+    chunkerCrossEval(params, 0.9573860781121228d);
+  }
+
+  @Test
+  public void evalPortugueseChunkerQn() throws IOException {
+    chunkerCrossEval(EvalUtil.createMaxentQnParams(),
+        0.9652111035230788d);
+  }
+
+  @Test
+  public void evalPortugueseChunkerQnMultipleThreads() throws IOException {
+    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    params.put("Threads", "4");
+
+    // NOTE: Should be the same as without multiple threads!!!
+    chunkerCrossEval(params, 0.9647304571382662);
+  }
+
+  @Test
+  public void evalPortugueseChunkerNaiveBayes() throws IOException {
+    chunkerCrossEval(EvalUtil.createNaiveBayesParams(), 0.9041507736043933d);
+  }

MOV31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS31 INS78 UPD83 MOV83 INS39 INS42 INS43 INS8 INS78 UPD83 MOV83 INS39 INS42 INS43 INS8 MOV78 INS83 INS39 INS42 MOV43 INS8 MOV78 INS83 INS39 INS42 MOV43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 UPD42 INS78 INS83 INS39 INS42 INS43 INS8 INS78 UPD42 INS43 INS78 INS83 INS39 INS42 INS43 INS8 INS78 UPD42 INS43 INS42 INS42 INS21 INS42 INS42 INS21 INS21 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS21 INS42 INS42 INS60 MOV21 INS21 INS42 INS42 INS21 INS42 INS42 MOV60 MOV21 INS21 INS42 INS42 INS42 INS42 INS60 INS21 INS21 INS42 INS42 INS32 INS32 INS32 INS32 INS32 INS32 INS32 INS32 MOV43 INS59 INS32 INS32 INS32 INS43 INS59 INS32 INS32 INS42 INS32 INS34 INS42 INS32 INS34 INS42 INS32 INS34 INS42 INS32 INS34 INS42 INS32 INS34 INS42 INS32 INS34 INS42 INS32 INS34 INS42 INS32 INS34 INS42 INS32 INS45 INS45 INS42 INS42 INS34 INS42 INS32 INS34 INS45 UPD45 INS42 INS42 INS34 UPD42 UPD34 INS42 INS42 INS32 INS42 INS42 INS45 INS45 INS42 INS42 INS34 UPD42 UPD34 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 INS42 INS42 INS42 UPD42 INS42 DEL40 DEL26 DEL42 DEL42 DEL41 DEL8 DEL31 DEL40 DEL40 DEL40