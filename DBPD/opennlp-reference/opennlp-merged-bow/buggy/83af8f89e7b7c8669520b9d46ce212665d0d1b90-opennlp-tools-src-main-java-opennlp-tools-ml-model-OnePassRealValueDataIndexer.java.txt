OPENNLP-880: Refactor data indexer

1.) Added method to EventTrainer – train(DataIndexer indexer)
    –Then I added the method to AbstractEventTrainer.
    No other code needed to be changed.

2.) Created a new class – PluggableParmeters: Only AbstractTrainers
    had access to getXXXParam(Value,Default). So I pulled out this
    functionality into a separate class. Now both
    AbstractTrainers and AbstractDataIndexers can hold parameters.

3.) Refactored DataIndexer. This touched a lot of code.
    Added init(Map,Map) method and index(ObjectStream) method.
    Changed 1-Pass and 2-Pass DataIndexers. Everywhere 1-pass/2-pass
    indexers where created, I changed the constructor,
    and added the init and index methods.

4.) Changed GIS.doTrain(indexer) to use the parameters
    passed in the init method.

5.) QNTrainer – created a working init method. Changed the
    isValid method so it is not the init method.

This closes #14

-import java.util.LinkedList;
-
+  
+  @Deprecated
-
+  
+  @Deprecated
+  public OnePassRealValueDataIndexer() {
+  }
+
-  protected List<ComparableEvent> index(LinkedList<Event> events, Map<String,Integer> predicateIndex) {
+
+  @Override
+  protected List<ComparableEvent> index(List<Event> events, Map<String,Integer> predicateIndex) {
-    for (int eventIndex = 0; eventIndex < numEvents; eventIndex++) {
-      Event ev = events.removeFirst();
+    for (Event ev:events) {
-      }
-      else {
+      } else {

INS31 INS78 INS78 INS83 INS42 INS8 INS78 INS42 INS42 INS42 UPD74 INS70 UPD43 INS44 INS42 MOV8 UPD42 MOV43 INS42 DEL40 DEL26 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL24