OPENNLP-658 The sequence codec is now configurable in the name finder.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1575219 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.List;
+import opennlp.tools.util.SequenceCodec;
+import opennlp.tools.util.ext.ExtensionLoader;
+// TODO: Fix the model validation, on loading via constructors and input streams
- 
-  public TokenNameFinderModel(String languageCode, SequenceClassificationModel nameFinderModel,
-      byte[] generatorDescriptor, Map<String, Object> resources, Map<String, String> manifestInfoEntries) {
+
+  private static final String SEQUENCE_CODEC_CLASS_NAME_PARAMETER = "sequenceCodecImplName";
+
+  public TokenNameFinderModel(String languageCode, SequenceClassificationModel<String> nameFinderModel,
+      byte[] generatorDescriptor, Map<String, Object> resources, Map<String, String> manifestInfoEntries,
+      SequenceCodec<String> seqCodec) {
-    // TODO: Add validation for sequence models!
-    //if (!isModelValid(nameFinderModel)) {
-    //  throw new IllegalArgumentException("Model not compatible with name finder!");
-    //}
+    init(nameFinderModel, generatorDescriptor, resources, manifestInfoEntries, seqCodec);
-    init(nameFinderModel, generatorDescriptor, resources, manifestInfoEntries);
+    if (!seqCodec.areOutcomesCompatible(nameFinderModel.getOutcomes())) {
+      throw new IllegalArgumentException("Model not compatible with name finder!");
+    }
-      byte[] generatorDescriptor, Map<String, Object> resources, Map<String, String> manifestInfoEntries) {
+      byte[] generatorDescriptor, Map<String, Object> resources, Map<String, String> manifestInfoEntries,
+      SequenceCodec<String> seqCodec) {
-    if (!isModelValid(nameFinderModel)) {
-      throw new IllegalArgumentException("Model not compatible with name finder!");
-    }
-    init(nameFinderModel, generatorDescriptor, resources, manifestInfoEntries);
+    init(nameFinderModel, generatorDescriptor, resources, manifestInfoEntries, seqCodec);
+    
+    if (!isModelValid(nameFinderModel)) {
+      throw new IllegalArgumentException("Model not compatible with name finder!");
+    }
-        generatorDescriptor, resources, manifestInfoEntries);
+        generatorDescriptor, resources, manifestInfoEntries, new BioCodec());
-      byte[] generatorDescriptor, Map<String, Object> resources, Map<String, String> manifestInfoEntries) {
+      byte[] generatorDescriptor, Map<String, Object> resources, Map<String, String> manifestInfoEntries,
+      SequenceCodec<String> seqCodec) {
+    
+    Properties manifest = (Properties) artifactMap.get(MANIFEST_ENTRY);
+    manifest.put(SEQUENCE_CODEC_CLASS_NAME_PARAMETER, seqCodec.getClass().getName());
+    
+  public SequenceCodec<String> createSequenceCodec() {
+    
+    // TODO: Lookup impl name with
+    // SEQUENCE_CODEC_CLASS_NAME_PARAMETER
+    Properties manifest = (Properties) artifactMap.get(MANIFEST_ENTRY);
+    
+    String sequeceCodecImplName = manifest.getProperty(SEQUENCE_CODEC_CLASS_NAME_PARAMETER);
+    return instantiateSequenceCodec(sequeceCodecImplName);
+  }
+  
-        if (getNameFinderModel() != null) {
-          model = new TokenNameFinderModel(getLanguage(), getNameFinderModel(),
-              descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap());
-        }
-        else {
-          model = new TokenNameFinderModel(getLanguage(), getNameFinderSequenceModel(),
-              descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap());
-        }
+    if (getNameFinderModel() != null) {
+      model = new TokenNameFinderModel(getLanguage(), getNameFinderModel(), 1,
+          descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap(), createSequenceCodec());
+    }
+    else {
+      model = new TokenNameFinderModel(getLanguage(), getNameFinderSequenceModel(),
+          descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap(),
+          createSequenceCodec());
+    }
-    // TODO: Not so nice!
-  // TODO: Write test for this method
-  public static boolean isModelValid(MaxentModel model) {
+  public boolean isModelValid(MaxentModel model) {
-    // We should have *optionally* one outcome named "other", some named xyz-start and sometimes 
-    // they have a pair xyz-cont. We should not have any other outcome
-    // To validate the model we check if we have one outcome named "other", at least
-    // one outcome with suffix start. After that we check if all outcomes that ends with
-    // "cont" have a pair that ends with "start".
-    List<String> start = new ArrayList<String>();
-    List<String> cont = new ArrayList<String>();
-
+    String outcomes[] = new String[model.getNumOutcomes()];
+    
-      String outcome = model.getOutcome(i);
-      if (outcome.endsWith(NameFinderME.START)) {
-        start.add(outcome.substring(0, outcome.length()
-            - NameFinderME.START.length()));
-      } else if (outcome.endsWith(NameFinderME.CONTINUE)) {
-        cont.add(outcome.substring(0, outcome.length()
-            - NameFinderME.CONTINUE.length()));
-      } else if (outcome.equals(NameFinderME.OTHER)) {
-        // don't fail anymore if couldn't find outcome named OTHER
-      } else {
-        // got unexpected outcome
-        return false;
-      }
+      outcomes[i] = model.getOutcome(i);
-
-    if (start.size() == 0) {
-      return false;
-    } else {
-      for (String contPreffix : cont) {
-        if (!start.contains(contPreffix)) {
-          return false;
-        }
-      }
-    }
-
-    return true;
+    
+    return createSequenceCodec().areOutcomesCompatible(outcomes);
+
+  public static SequenceCodec<String> instantiateSequenceCodec(
+      String sequenceCodecImplName) {
+    
+    if (sequenceCodecImplName != null) {
+      return ExtensionLoader.instantiateExtension(
+          SequenceCodec.class, sequenceCodecImplName);
+    }
+    else {
+      // If nothing is specified return old default!
+      return new BioCodec();
+    }
+  }

MOV26 MOV26 UPD40 UPD40 INS23 INS31 INS31 INS31 INS83 INS83 INS83 INS43 INS59 INS44 INS44 MOV25 INS44 INS83 UPD74 MOV74 INS42 INS8 INS83 INS39 INS42 MOV44 INS8 INS83 INS83 UPD74 MOV74 INS42 INS44 INS8 MOV42 INS42 INS45 INS74 INS74 INS42 INS25 INS74 INS42 INS74 INS42 INS60 INS21 UPD43 INS60 INS60 INS41 INS60 INS24 INS41 UPD43 INS43 UPD42 MOV42 MOV25 MOV43 INS43 INS43 INS43 INS38 INS8 INS43 MOV43 INS14 INS43 MOV43 INS43 INS59 INS32 UPD42 INS43 INS59 INS43 INS59 INS32 MOV43 INS59 MOV58 MOV27 MOV37 INS8 INS32 UPD42 INS42 INS27 INS8 INS42 INS42 INS42 INS42 INS32 INS53 INS42 INS42 INS42 INS43 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS11 INS42 INS42 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS85 INS3 INS21 INS32 UPD42 MOV42 UPD42 MOV42 INS42 INS33 INS41 INS42 INS42 INS32 INS14 INS42 INS43 INS32 INS32 INS42 INS43 INS32 UPD42 MOV42 UPD42 MOV42 UPD42 MOV42 INS5 INS32 INS7 UPD42 MOV42 INS32 INS14 INS42 INS42 INS43 INS45 INS42 INS42 INS42 INS42 INS42 INS42 INS42 UPD42 MOV42 UPD42 MOV42 INS42 MOV43 INS85 UPD42 MOV42 UPD42 MOV42 INS2 MOV32 INS42 UPD42 MOV42 INS57 UPD42 MOV42 INS43 INS42 INS34 INS32 INS32 INS42 INS42 INS43 INS42 INS42 INS42 INS42 DEL83 DEL83 DEL39 DEL42 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL59 DEL60 DEL40 DEL32 DEL42 DEL42 DEL34 DEL42 DEL32 DEL40 DEL42 DEL32 DEL27 DEL32 DEL32 DEL21 DEL8 DEL40 DEL32 DEL42 DEL42 DEL34 DEL42 DEL42 DEL32 DEL40 DEL32 DEL27 DEL32 DEL32 DEL21 DEL8 DEL40 DEL32 DEL8 DEL9 DEL41 DEL8 DEL25 DEL25 DEL25 DEL8 DEL24 DEL42 DEL42 DEL32 DEL34 DEL27 DEL9 DEL41 DEL8 DEL44 DEL42 DEL8 DEL70 DEL8 DEL25 DEL9 DEL41 DEL8 DEL31 DEL42 DEL32 DEL38 DEL9