OPENNLp-118 Replaced the EventStream with ObjectStream<Event>

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1567990 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-  private List<POSSample> samples;
+  private ObjectStream<POSSample> psi;
-    samples = new ArrayList<POSSample>();
-    
-    POSSample sample;
-    while((sample = psi.read()) != null) {
-      samples.add(sample);
-    }
-    System.err.println("Got "+samples.size()+" sequences");
+    this.psi = psi;
-  
-  @SuppressWarnings("unchecked")
-  public Iterator<Sequence> iterator() {
-    return new POSSampleSequenceIterator(samples.iterator());
-  }
-
-}
-
-class POSSampleSequenceIterator implements Iterator<Sequence> {
-
-  private Iterator<POSSample> psi;
-  private POSContextGenerator cg;
-  
-  public POSSampleSequenceIterator(Iterator<POSSample> psi) {
-    this.psi = psi;
-    cg = new DefaultPOSContextGenerator(null);
-  }
-  
-  public boolean hasNext() {
-    return psi.hasNext();
-  }
-
-  public Sequence<POSSample> next() {
-    POSSample sample = psi.next();
+  @Override
+  public Sequence read() throws IOException {
-    String sentence[] = sample.getSentence();
-    String tags[] = sample.getTags();
-    Event[] events = new Event[sentence.length];
+    POSSample sample = psi.read();
-    for (int i=0; i < sentence.length; i++) {
-
-      // it is safe to pass the tags as previous tags because
-      // the context generator does not look for non predicted tags
-      String[] context = cg.getContext(i, sentence, tags, null);
-
-      events[i] = new Event(tags[i], context);
+    if (sample != null) {
+      String sentence[] = sample.getSentence();
+      String tags[] = sample.getTags();
+      Event[] events = new Event[sentence.length];
+      
+      for (int i=0; i < sentence.length; i++) {
+  
+        // it is safe to pass the tags as previous tags because
+        // the context generator does not look for non predicted tags
+        String[] context = pcg.getContext(i, sentence, tags, null);
+  
+        events[i] = new Event(tags[i], context);
+      }
+      Sequence<POSSample> sequence = new Sequence<POSSample>(events,sample);
+      return sequence;
-    Sequence<POSSample> sequence = new Sequence<POSSample>(events,sample);
-    return sequence;
-  }
-
-  public void remove() {
-    throw new UnsupportedOperationException();
+    
+    return null;
+  @Override
+  public void reset() throws IOException, UnsupportedOperationException {
+    psi.reset();
+  }
+  
+  @Override
+  public void close() throws IOException {
+    psi.close();
+  }

INS31 INS31 INS31 INS31 UPD74 MOV59 MOV83 MOV42 MOV44 MOV44 MOV43 INS8 INS78 INS83 MOV43 INS42 INS43 INS8 INS78 INS83 INS39 INS42 INS43 MOV43 INS8 INS78 INS83 INS39 INS42 INS43 INS8 UPD43 UPD42 MOV42 MOV21 MOV21 INS42 INS42 MOV60 INS25 INS41 INS42 INS42 INS21 INS42 INS42 INS21 UPD42 INS27 INS8 INS33 INS32 INS32 MOV22 MOV42 MOV42 MOV32 INS42 MOV33 MOV60 MOV60 MOV60 INS24 MOV60 MOV41 INS42 INS42 INS42 INS42 MOV58 MOV27 MOV37 INS8 INS60 MOV21 UPD42 MOV42 MOV5 INS59 INS42 INS32 UPD42 MOV42 INS42 INS42 UPD42 MOV42 INS42 INS33 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL14 DEL42 DEL7 DEL36 DEL27 DEL32 DEL21 DEL8 DEL61 DEL40 DEL42 DEL45 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL31 DEL42 DEL45 DEL79 DEL83 DEL74 DEL42 DEL43 DEL42 DEL42 DEL32 DEL14 DEL41 DEL8 DEL31 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL23 DEL83 DEL42 DEL43 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL44 DEL42 DEL42 DEL43 DEL33 DEL14 DEL7 DEL21 DEL8 DEL31 DEL83 DEL39 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL33 DEL32 DEL59 DEL60 DEL8 DEL24 DEL8 DEL31 DEL83 DEL39 DEL42 DEL14 DEL53 DEL8 DEL31 DEL55