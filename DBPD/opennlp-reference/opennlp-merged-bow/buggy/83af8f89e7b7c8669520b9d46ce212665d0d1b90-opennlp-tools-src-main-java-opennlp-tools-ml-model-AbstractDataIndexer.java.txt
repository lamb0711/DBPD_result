OPENNLP-880: Refactor data indexer

1.) Added method to EventTrainer – train(DataIndexer indexer)
    –Then I added the method to AbstractEventTrainer.
    No other code needed to be changed.

2.) Created a new class – PluggableParmeters: Only AbstractTrainers
    had access to getXXXParam(Value,Default). So I pulled out this
    functionality into a separate class. Now both
    AbstractTrainers and AbstractDataIndexers can hold parameters.

3.) Refactored DataIndexer. This touched a lot of code.
    Added init(Map,Map) method and index(ObjectStream) method.
    Changed 1-Pass and 2-Pass DataIndexers. Everywhere 1-pass/2-pass
    indexers where created, I changed the constructor,
    and added the init and index methods.

4.) Changed GIS.doTrain(indexer) to use the parameters
    passed in the init method.

5.) QNTrainer – created a working init method. Changed the
    isValid method so it is not the init method.

This closes #14

+import opennlp.tools.ml.AbstractTrainer;
+import opennlp.tools.ml.PluggableParameters;
+  public static final String CUTOFF_PARAM = AbstractTrainer.CUTOFF_PARAM;
+  public static final int CUTOFF_DEFAULT = AbstractTrainer.CUTOFF_DEFAULT;
+
+  public static final String SORT_PARAM = "sort";
+  public static final boolean SORT_DEFAULT = true;
+
+  PluggableParameters parameters;
+
+  public void init(Map<String,String> indexingParameters, Map<String, String> reportMap) {
+    parameters = new PluggableParameters(indexingParameters, reportMap);
+  }
+
-
-

INS26 INS26 INS40 INS40 INS23 INS23 INS23 INS23 INS23 INS31 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS83 INS83 INS83 INS43 INS59 INS83 INS83 INS83 INS39 INS59 INS43 INS59 INS83 INS39 INS42 INS44 INS44 INS8 INS42 INS42 INS40 INS42 INS40 INS42 INS42 INS45 INS42 INS9 INS42 INS42 INS74 INS42 INS74 INS42 INS21 INS43 INS43 INS43 INS43 INS43 INS43 INS7 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS14 INS43 INS42 INS42 INS42