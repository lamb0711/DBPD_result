OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.UnsupportedEncodingException;
-import opennlp.tools.cmdline.ArgumentParser.ParameterDescription;
-import opennlp.tools.cmdline.ObjectStreamFactory;
-import opennlp.tools.cmdline.TerminateToolException;
+import opennlp.tools.cmdline.StreamFactoryRegistry;
+import opennlp.tools.cmdline.params.LanguageFormatParams;
-public class WordTagSampleStreamFactory implements ObjectStreamFactory<POSSample> {
+public class WordTagSampleStreamFactory extends LanguageSampleStreamFactory<POSSample> {
-  static interface Parameters {
-    
-    @ParameterDescription(valueName = "sampleData")
-    String getData();
-    
-    @ParameterDescription(valueName = "charsetName")
-    String getEncoding();
+  static interface Parameters extends LanguageFormatParams {
+  }
+
+  public static void registerFactory() {
+    StreamFactoryRegistry.registerFactory(POSSample.class,
+        StreamFactoryRegistry.DEFAULT_FORMAT, new WordTagSampleStreamFactory(Parameters.class));
-  public String getUsage() {
-    return ArgumentParser.createUsage(Parameters.class);
+  protected <P> WordTagSampleStreamFactory(Class<P> params) {
+    super(params);
-  public String validateArguments(String[] args) {
-    return ArgumentParser.validateArgumentsLoudly(args, Parameters.class);
-  }
-
-  ObjectStream<POSSample> create(Parameters params) {
-    ObjectStream<String> lineStream;
-    try {
-      lineStream = new PlainTextByLineStream(new InputStreamReader(
-          CmdLineUtil.openInFile(new File(params.getData())), params.getEncoding()));
-      
-      return new WordTagSampleStream(lineStream);
-    } catch (UnsupportedEncodingException e) {
-      System.err.println("Encoding not supported: " + params.getEncoding());
-      throw new TerminateToolException(-1);
-    }
-  }
-  
-    return create(params);
+    language = params.getLang();
+
+    CmdLineUtil.checkInputFile("Data", params.getData());
+    ObjectStream<String> lineStream;
+    lineStream = new PlainTextByLineStream(new InputStreamReader(
+        CmdLineUtil.openInFile(params.getData()), params.getEncoding()));
+
+    return new WordTagSampleStream(lineStream);
-}
+}

UPD40 UPD40 UPD74 INS31 UPD43 INS43 MOV83 UPD83 MOV83 INS39 INS42 MOV8 INS83 INS73 INS42 INS44 INS8 MOV8 UPD42 UPD42 MOV42 INS21 INS42 INS74 MOV42 INS46 MOV60 INS21 INS21 MOV60 INS32 INS43 INS43 INS42 INS7 INS32 UPD42 MOV42 UPD42 MOV42 MOV57 INS40 INS14 INS42 UPD42 MOV42 INS42 INS32 INS42 INS42 INS45 INS32 UPD43 INS43 MOV57 INS42 INS42 INS42 INS42 UPD42 INS42 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL42 DEL45 DEL80 DEL77 DEL43 DEL42 DEL31 DEL42 DEL42 DEL45 DEL80 DEL77 DEL42 DEL43 DEL42 DEL31 DEL42 DEL32 DEL41 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31 DEL42 DEL43 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL44 DEL31 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL44 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL42 DEL43 DEL34 DEL38 DEL14 DEL53 DEL8 DEL12 DEL54 DEL8 DEL42 DEL43 DEL14 DEL42 DEL42 DEL32 DEL41 DEL8