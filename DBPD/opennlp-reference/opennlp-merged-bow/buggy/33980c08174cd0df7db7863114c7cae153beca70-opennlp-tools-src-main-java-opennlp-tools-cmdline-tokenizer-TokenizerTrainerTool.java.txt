OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

-import java.nio.charset.Charset;
-import opennlp.tools.cmdline.ArgumentParser;
-import opennlp.tools.cmdline.CLI;
-import opennlp.tools.cmdline.CmdLineTool;
+import opennlp.tools.cmdline.AbstractTrainerTool;
+import opennlp.tools.cmdline.tokenizer.TokenizerTrainerTool.TrainerToolParams;
-import opennlp.tools.tokenize.TokenSampleStream;
-import opennlp.tools.util.ObjectStream;
-import opennlp.tools.util.PlainTextByLineStream;
-import opennlp.tools.util.TrainingParameters;
+import opennlp.tools.util.model.ModelUtil;
-public final class TokenizerTrainerTool implements CmdLineTool {
+public final class TokenizerTrainerTool
+    extends AbstractTrainerTool<TokenSample, TrainerToolParams> {
-  interface TrainerToolParams extends TrainingParams, TrainingToolParams{
-
+  interface TrainerToolParams extends TrainingParams, TrainingToolParams {
-  public String getName() {
-    return "TokenizerTrainer";
+  public TokenizerTrainerTool() {
+    super(TokenSample.class, TrainerToolParams.class);
-  public String getHelp() {
-    return "Usage: " + CLI.CMD + " " + getName() + " "
-      + ArgumentParser.createUsage(TrainerToolParams.class);
-  }
-
-  static ObjectStream<TokenSample> openSampleData(String sampleDataName,
-      File sampleDataFile, Charset encoding) {
-    CmdLineUtil.checkInputFile(sampleDataName + " Data", sampleDataFile);
-
-    FileInputStream sampleDataIn = CmdLineUtil.openInFile(sampleDataFile);
-
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn
-        .getChannel(), encoding);
-
-    return new TokenSampleStream(lineStream);
-  }
-  
-  public void run(String[] args) {
-    String errorMessage = ArgumentParser.validateArgumentsLoudly(args, TrainerToolParams.class);
-    if (null != errorMessage) {
-      System.err.println(errorMessage);
-      System.err.println(getHelp());
-      throw new TerminateToolException(1);
-    }
-    
-    TrainerToolParams params = ArgumentParser.parse(args,
-        TrainerToolParams.class);
+  public void run(String format, String[] args) {
+    super.run(format, args);
-    opennlp.tools.util.TrainingParameters mlParams =
-      CmdLineUtil.loadTrainingParameters(params.getParams(), false);
-    
+    mlParams = CmdLineUtil.loadTrainingParameters(params.getParams(), false);
+
-        System.err.println("Training parameters file is invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Training parameters file is invalid!");
-      
+
-        System.err.println("Sequence training is not supported!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Sequence training is not supported!");
-    
-    File trainingDataInFile = params.getData();
+
+    if(mlParams == null) {
+      mlParams = ModelUtil.createTrainingParameters(params.getIterations(), params.getCutoff());
+    }
+
-    
-    ObjectStream<TokenSample> sampleStream = openSampleData("Training",
-        trainingDataInFile, params.getEncoding());
-    
-    if(mlParams == null) 
-      mlParams = createTrainingParameters(params.getIterations(), params.getCutoff());
-      model = opennlp.tools.tokenize.TokenizerME.train(params.getLang(),
-          sampleStream, dict, params.getAlphaNumOpt(), mlParams);
+      model = opennlp.tools.tokenize.TokenizerME.train(factory.getLang(), sampleStream, dict,
+          params.getAlphaNumOpt(), mlParams);
-      CmdLineUtil.printTrainingIoError(e);
-      throw new TerminateToolException(-1);
+      throw new TerminateToolException(-1, "IO error while reading training data or indexing data: " + e.getMessage());
-
-  public static TrainingParameters createTrainingParameters(Integer iterations, Integer cutoff) {
-    TrainingParameters mlParams = new TrainingParameters();
-    mlParams.put(TrainingParameters.ALGORITHM_PARAM, "MAXENT");
-    mlParams.put(TrainingParameters.ITERATIONS_PARAM,
-        iterations.toString());
-    mlParams.put(TrainingParameters.CUTOFF_PARAM, cutoff.toString());
-    return mlParams;
-  }
-}
+}

MOV26 MOV31 UPD40 UPD40 UPD40 INS74 UPD43 MOV43 MOV43 MOV43 INS42 MOV44 MOV25 UPD42 INS46 UPD42 INS21 INS21 MOV25 INS57 MOV57 INS48 INS7 MOV27 INS8 INS8 MOV43 INS42 INS42 INS42 INS42 MOV32 INS25 INS25 MOV21 MOV38 INS8 MOV32 MOV8 INS53 INS53 INS14 INS14 INS42 MOV43 MOV38 INS27 MOV43 INS34 INS45 INS34 INS45 UPD42 INS45 INS32 UPD42 MOV42 UPD42 MOV42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL42 DEL43 DEL14 DEL59 DEL60 DEL42 DEL42 DEL40 DEL45 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL41 DEL83 DEL42 DEL43 DEL42 DEL45 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL45 DEL40 DEL45 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL45 DEL27 DEL42 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL14 DEL41 DEL8 DEL31 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL34 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL59 DEL60 DEL40 DEL42 DEL45 DEL32 DEL21 DEL34 DEL38 DEL14 DEL53 DEL8 DEL25 DEL8 DEL25 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL74 DEL42 DEL42 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL32 DEL21 DEL42 DEL43 DEL34 DEL38 DEL14 DEL53