OPENNLP-880: Refactor data indexer

1.) Added method to EventTrainer – train(DataIndexer indexer)
    –Then I added the method to AbstractEventTrainer.
    No other code needed to be changed.

2.) Created a new class – PluggableParmeters: Only AbstractTrainers
    had access to getXXXParam(Value,Default). So I pulled out this
    functionality into a separate class. Now both
    AbstractTrainers and AbstractDataIndexers can hold parameters.

3.) Refactored DataIndexer. This touched a lot of code.
    Added init(Map,Map) method and index(ObjectStream) method.
    Changed 1-Pass and 2-Pass DataIndexers. Everywhere 1-pass/2-pass
    indexers where created, I changed the constructor,
    and added the init and index methods.

4.) Changed GIS.doTrain(indexer) to use the parameters
    passed in the init method.

5.) QNTrainer – created a working init method. Changed the
    isValid method so it is not the init method.

This closes #14

+  @Deprecated
+  @Deprecated
+  @Deprecated
-    LinkedList<Event> events;
+    List<Event> events;
+    List<ComparableEvent> eventsToCompare;
+  
+    System.out.println("Indexing events using cutoff of " + cutoff + "\n");
+  
+    System.out.print("\tComputing event counts...  ");
+    events = computeEventCounts(eventStream, predicateIndex, cutoff);
+    System.out.println("done. " + events.size() + " events");
+  
+    System.out.print("\tIndexing...  ");
+    eventsToCompare = index(events, predicateIndex);
+    // done with event list
+    events = null;
+    // done with predicates
+    predicateIndex = null;
+  
+    System.out.println("done.");
+  
+    System.out.print("Sorting and merging events... ");
+    sortAndMerge(eventsToCompare, sort);
+    System.out.println("Done indexing.");
+  }
+
+  public OnePassDataIndexer(){}
+
+  @Override
+  public void index(ObjectStream<Event> eventStream) throws IOException {
+    int cutoff = parameters.getIntParam(CUTOFF_PARAM, CUTOFF_DEFAULT);
+    boolean sort = parameters.getBooleanParam(SORT_PARAM, SORT_DEFAULT);
+
+    Map<String, Integer> predicateIndex = new HashMap<>();
+    List<Event> events;
-  private LinkedList<Event> computeEventCounts(ObjectStream<Event> eventStream,
+  private List<Event> computeEventCounts(ObjectStream<Event> eventStream,
-    LinkedList<Event> events = new LinkedList<>();
+    List<Event> events = new LinkedList<>();
-      events.addLast(ev);
+      events.add(ev);
-  protected List<ComparableEvent> index(LinkedList<Event> events,
+  protected List<ComparableEvent> index(List<Event> events,
-    for (int eventIndex = 0; eventIndex < numEvents; eventIndex++) {
-      Event ev = events.removeFirst();
+    for (Event ev:events) {

INS31 INS31 INS78 INS78 INS78 INS83 INS42 INS8 INS78 INS83 INS39 INS42 INS44 INS43 INS8 INS74 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS60 INS60 INS60 MOV60 INS60 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS21 INS43 INS43 INS60 UPD74 INS70 UPD74 INS43 INS43 INS39 INS59 INS39 INS59 INS74 INS59 UPD74 INS59 INS74 INS59 INS32 INS32 INS7 INS32 INS32 INS7 INS7 INS7 INS32 INS32 INS32 INS32 INS42 INS42 UPD74 MOV74 MOV59 UPD43 INS44 INS42 MOV8 UPD43 INS42 INS42 INS42 INS32 INS42 INS32 INS43 INS43 INS43 INS42 INS14 UPD43 INS42 INS43 INS43 INS42 INS40 INS42 INS27 INS40 INS42 INS45 INS42 INS32 INS40 INS42 INS27 INS40 INS42 INS45 INS42 INS32 INS42 INS33 INS42 INS33 INS40 INS42 INS45 INS40 INS42 INS45 INS42 INS42 INS42 INS40 INS42 INS45 UPD43 UPD42 MOV43 INS42 UPD42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS74 UPD42 INS42 INS42 INS45 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS32 INS45 INS42 INS42 INS42 UPD42 INS43 INS42 INS42 UPD42 INS42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL42 DEL27 DEL42 DEL37 DEL24