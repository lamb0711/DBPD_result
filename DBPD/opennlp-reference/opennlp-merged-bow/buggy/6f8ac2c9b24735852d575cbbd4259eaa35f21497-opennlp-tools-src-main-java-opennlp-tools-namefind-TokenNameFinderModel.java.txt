OPENNLP-580 Added a factory to construct the name finder

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1576085 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.chunker.ChunkerFactory;
+import opennlp.tools.util.BaseToolFactory;
-  private static final String GENERATOR_DESCRIPTOR_ENTRY_NAME = "generator.featuregen";
+  static final String GENERATOR_DESCRIPTOR_ENTRY_NAME = "generator.featuregen";
-  private static final String SEQUENCE_CODEC_CLASS_NAME_PARAMETER = "sequenceCodecImplName";
+  static final String SEQUENCE_CODEC_CLASS_NAME_PARAMETER = "sequenceCodecImplName";
-  public SequenceCodec<String> createSequenceCodec() {
-    
-    // TODO: Lookup impl name with
-    // SEQUENCE_CODEC_CLASS_NAME_PARAMETER
-    Properties manifest = (Properties) artifactMap.get(MANIFEST_ENTRY);
-    
-    String sequeceCodecImplName = manifest.getProperty(SEQUENCE_CODEC_CLASS_NAME_PARAMETER);
-    return instantiateSequenceCodec(sequeceCodecImplName);
+  @Override
+  protected Class<? extends BaseToolFactory> getDefaultFactory() {
+    return TokenNameFinderFactory.class;
+  public TokenNameFinderFactory getFactory() {
+    return (TokenNameFinderFactory) this.toolFactory;
+  }
+
+  // TODO: This should be moved to the NameFinderFactory ... !!!
+  // Lets deprecate it!
+  
+   * @deprecated use TokenNameFinderFactory.createFeatureGenerators instead!
+  @Deprecated
-
-    byte descriptorBytes[] = (byte[]) artifactMap.get(GENERATOR_DESCRIPTOR_ENTRY_NAME);
-    
-    if (descriptorBytes != null) {
-      InputStream descriptorIn = new ByteArrayInputStream(descriptorBytes);
-  
-      AdaptiveFeatureGenerator generator = null;
-      try {
-        generator = GeneratorFactory.create(descriptorIn, new FeatureGeneratorResourceProvider() {
-  
-          public Object getResource(String key) {
-            return artifactMap.get(key);
-          }
-        });
-      } catch (InvalidFormatException e) {
-        // It is assumed that the creation of the feature generation does not
-        // fail after it succeeded once during model loading.
-        
-        // But it might still be possible that such an exception is thrown,
-        // in this case the caller should not be forced to handle the exception
-        // and a Runtime Exception is thrown instead.
-        
-        // If the re-creation of the feature generation fails it is assumed
-        // that this can only be caused by a programming mistake and therefore
-        // throwing a Runtime Exception is reasonable
-        
-        throw new FeatureGeneratorCreationError(e);
-      } catch (IOException e) {
-        throw new IllegalStateException("Reading from mem cannot result in an I/O error", e);
-      }
-  
-      return generator;
-    }
-    else {
-      return null;
-    }
+    return getFactory().createFeatureGenerators();
-          descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap(), createSequenceCodec());
+          descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap(),
+          getFactory().createSequenceCodec());
-          createSequenceCodec());
+          getFactory().createSequenceCodec());
-  public boolean isModelValid(MaxentModel model) {
+  boolean isModelValid(MaxentModel model) {
-    return createSequenceCodec().areOutcomesCompatible(outcomes);
+    return getFactory().createSequenceCodec().areOutcomesCompatible(outcomes);
-
-  public static SequenceCodec<String> instantiateSequenceCodec(
-      String sequenceCodecImplName) {
-    
-    if (sequenceCodecImplName != null) {
-      return ExtensionLoader.instantiateExtension(
-          SequenceCodec.class, sequenceCodecImplName);
-    }
-    else {
-      // If nothing is specified return old default!
-      return new BioCodec();
-    }
-  }

INS26 INS26 MOV31 INS40 INS40 INS78 UPD83 UPD74 UPD42 INS43 INS42 MOV8 MOV29 INS78 MOV43 UPD42 INS8 INS42 UPD43 INS76 UPD42 MOV42 INS65 INS42 MOV41 UPD42 INS43 INS57 INS11 INS66 UPD42 MOV42 INS43 INS43 INS22 INS32 UPD42 INS42 INS42 INS52 INS42 UPD42 MOV42 INS32 INS42 INS32 INS32 INS42 INS42 DEL83 DEL83 DEL43 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL32 DEL42 DEL39 DEL42 DEL85 DEL39 DEL85 DEL5 DEL42 DEL42 DEL42 DEL32 DEL11 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL14 DEL59 DEL60 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL83 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL44 DEL31 DEL1 DEL14 DEL32 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL14 DEL53 DEL8 DEL12 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL45 DEL42 DEL14 DEL53 DEL8 DEL12 DEL54 DEL42 DEL41 DEL8 DEL33 DEL41 DEL8 DEL25 DEL8 DEL83 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL43 DEL57 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL33 DEL27 DEL8 DEL42 DEL43 DEL14 DEL41 DEL8 DEL25 DEL8 DEL83