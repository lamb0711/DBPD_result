OPENNLP-923: Wrap all lines longer than 110 chars

And also add checkstyle enforcement

-  private Parser(MaxentModel buildModel, MaxentModel attachModel, MaxentModel checkModel, POSTagger tagger, Chunker chunker, HeadRules headRules, int beamSize, double advancePercentage) {
+  private Parser(MaxentModel buildModel, MaxentModel attachModel, MaxentModel checkModel,
+                 POSTagger tagger, Chunker chunker, HeadRules headRules, int beamSize,
+                 double advancePercentage) {
-      System.out.println("adi=" + advanceNodeIndex + " " + advanceNode.getType() + "." + advanceNode.getLabel()
-          + " " + advanceNode + " choose build=" + (1 - doneProb) + " attach=" + doneProb);
+      System.out.println("adi=" + advanceNodeIndex + " " + advanceNode.getType() + "."
+          + advanceNode.getLabel() + " " + advanceNode + " choose build=" + (1 - doneProb)
+          + " attach=" + doneProb);
-            cprobs = checkModel.eval(checkContextGenerator.getContext(newNode,children,advanceNodeIndex,false));
+            cprobs = checkModel.eval(checkContextGenerator.getContext(newNode, children,
+                advanceNodeIndex,false));
-          newParse1.setChild(originalAdvanceIndex,Parser.BUILT + "." + Parser.COMPLETE); //replace constituent being labeled to create new derivation
+          //replace constituent being labeled to create new derivation
+          newParse1.setChild(originalAdvanceIndex,Parser.BUILT + "." + Parser.COMPLETE);
-          newParse1.setChild(originalAdvanceIndex,Parser.BUILT + "." + Parser.INCOMPLETE); //replace constituent being labeled to create new derivation
+          //replace constituent being labeled to create new derivation
+          newParse1.setChild(originalAdvanceIndex,Parser.BUILT + "." + Parser.INCOMPLETE);
-        newParse1.setChild(originalAdvanceIndex,Parser.BUILT); //replace constituent being labeled to create new derivation
+        //replace constituent being labeled to create new derivation
+        newParse1.setChild(originalAdvanceIndex,Parser.BUILT);
-            //List cs = java.util.Arrays.asList(attachContextGenerator.getContext(children, advanceNodeIndex,rf,fi,punctSet));
+            // List cs = java.util.Arrays.asList(attachContextGenerator.getContext(children,
+            //     advanceNodeIndex,rf,fi,punctSet));
-                (checkComplete && ((attachments[ai] == daughterAttachIndex && !isComplete(fn)) || (attachments[ai] == sisterAttachIndex && isComplete(fn)))))) {
+                (checkComplete && ((attachments[ai] == daughterAttachIndex && !isComplete(fn))
+                    || (attachments[ai] == sisterAttachIndex && isComplete(fn)))))) {
-                //System.out.println(at"-removing "+(originalZeroIndex+1)+" "+newParse2.getChildren()[originalZeroIndex+1]);
+                //System.out.println(at"-removing "+(originalZeroIndex+1)+" "
+                // +newParse2.getChildren()[originalZeroIndex+1]);
-                cprobs = checkModel.eval(checkContextGenerator.getContext(updatedNode,newKids,advanceNodeIndex,true));
+                cprobs = checkModel.eval(
+                    checkContextGenerator.getContext(updatedNode,newKids,advanceNodeIndex,true));
-                  if (debugOn) System.out.println("Advancing both complete and incomplete nodes; c=" + cprobs[completeIndex]);
+                  if (debugOn)
+                    System.out.println("Advancing both complete and incomplete nodes; c="
+                        + cprobs[completeIndex]);
-    EventTrainer buildTrainer = TrainerFactory.getEventTrainer(mlParams.getSettings("build"), buildReportMap);
+    EventTrainer buildTrainer = TrainerFactory.getEventTrainer(
+        mlParams.getSettings("build"), buildReportMap);
-    opennlp.tools.parser.chunking.Parser.mergeReportIntoManifest(manifestInfoEntries, buildReportMap, "build");
+    opennlp.tools.parser.chunking.Parser.mergeReportIntoManifest(
+        manifestInfoEntries, buildReportMap, "build");
-    EventTrainer checkTrainer = TrainerFactory.getEventTrainer(mlParams.getSettings("check"), checkReportMap);
+    EventTrainer checkTrainer = TrainerFactory.getEventTrainer(
+        mlParams.getSettings("check"), checkReportMap);
-    opennlp.tools.parser.chunking.Parser.mergeReportIntoManifest(manifestInfoEntries, checkReportMap, "check");
+    opennlp.tools.parser.chunking.Parser.mergeReportIntoManifest(
+        manifestInfoEntries, checkReportMap, "check");
-    EventTrainer attachTrainer = TrainerFactory.getEventTrainer(mlParams.getSettings("attach"), attachReportMap);
+    EventTrainer attachTrainer = TrainerFactory.getEventTrainer(
+        mlParams.getSettings("attach"), attachReportMap);
-    opennlp.tools.parser.chunking.Parser.mergeReportIntoManifest(manifestInfoEntries, attachReportMap, "attach");
+    opennlp.tools.parser.chunking.Parser.mergeReportIntoManifest(
+        manifestInfoEntries, attachReportMap, "attach");
-  public static AbstractModel train(ObjectStream<Event>  es, int iterations, int cut) throws java.io.IOException {
+  public static AbstractModel train(ObjectStream<Event>  es, int iterations, int cut)
+      throws IOException {

UPD43 INS42 DEL40