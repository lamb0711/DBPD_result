OPENNLP-182 Refactored to extend new abstract event stream class

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1127042 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
-import java.util.Collections;
-import java.util.NoSuchElementException;
-public class NameFinderEventStream extends opennlp.model.AbstractEventStream {
-
-  private ObjectStream<NameSample> nameSampleStream;
-
-  private Iterator<Event> events = Collections.<Event>emptyList().iterator();
+public class NameFinderEventStream extends opennlp.tools.util.AbstractEventStream<NameSample> {
-    this.nameSampleStream = dataStream;
+    super(dataStream);
+    
-  private void createNewEvents() throws IOException {
-
-    // TODO: the iterator of the new events can be empty
-    // create as long new events as there are events
-    // or the name sample stream is empty
-    NameSample sample = null;
-    if ((sample = nameSampleStream.read()) != null) {
-      if (sample.isClearAdaptiveDataSet()) {
-        contextGenerator.clearAdaptiveData();
-      }
-      //System.err.println(sample);
-      String outcomes[] = generateOutcomes(sample.getNames(), type, sample.getSentence().length);
-      additionalContextFeatureGenerator.setCurrentContext(sample.getAdditionalContext());
-      String[] tokens = new String[sample.getSentence().length];
-      List<Event> events = new ArrayList<Event>(outcomes.length);
-      for (int i = 0; i < sample.getSentence().length; i++) {
-        tokens[i] = sample.getSentence()[i];
-      }
-      for (int i = 0; i < outcomes.length; i++) {
-        events.add(new Event((String) outcomes[i], contextGenerator.getContext(i, sample.getSentence(), outcomes,null)));
-      }
-      this.events = events.iterator();
-      contextGenerator.updateAdaptiveData(tokens, outcomes);
+  @Override
+  protected Iterator<Event> createEvents(NameSample sample) {
+    
+    if (sample.isClearAdaptiveDataSet()) {
+      contextGenerator.clearAdaptiveData();
+    
+    String outcomes[] = generateOutcomes(sample.getNames(), type, sample.getSentence().length);
+    additionalContextFeatureGenerator.setCurrentContext(sample.getAdditionalContext());
+    String[] tokens = new String[sample.getSentence().length];
+    List<Event> events = new ArrayList<Event>(outcomes.length);
+    for (int i = 0; i < sample.getSentence().length; i++) {
+      tokens[i] = sample.getSentence()[i];
+    }
+    for (int i = 0; i < outcomes.length; i++) {
+      events.add(new Event((String) outcomes[i], contextGenerator.getContext(i, sample.getSentence(), outcomes,null)));
+    }
+    
+    contextGenerator.updateAdaptiveData(tokens, outcomes);
+    
+    return events.iterator();
-  public boolean hasNext() throws IOException {
-
-    // check if iterator has next event
-    if (events.hasNext()) {
-      return true;
-    } else {
-      createNewEvents();
-
-      return events.hasNext();
-    }
-  }
-
-  public Event next() {
-    // call to hasNext() is necessary for reloading elements
-    // if the events iterator was already consumed
-    if (!events.hasNext()) {
-      throw new NoSuchElementException();
-    }
-
-    return events.next();
-  }
+  // Will be removed soon!
+  @Deprecated
-    EventStream es = new NameFinderEventStream(new NameSampleDataStream(new PlainTextByLineStream(new java.io.InputStreamReader(System.in))));
+    EventStream es = new NameFinderEventStream(new NameSampleDataStream(
+        new PlainTextByLineStream(new java.io.InputStreamReader(System.in))));

UPD74 MOV74 UPD43 INS78 UPD83 MOV74 UPD42 INS44 MOV8 INS78 INS40 INS46 INS42 MOV43 INS42 INS41 INS42 INS42 MOV32 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL40 DEL43 DEL83 DEL42 DEL59 DEL23 DEL83 DEL42 DEL42 DEL42 DEL43 DEL42 DEL32 DEL42 DEL32 DEL59 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL39 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL43 DEL42 DEL33 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL25 DEL8 DEL83 DEL39 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL9 DEL41 DEL8 DEL42 DEL32 DEL21 DEL42 DEL42 DEL32 DEL41 DEL8 DEL25 DEL8 DEL31 DEL83 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL38 DEL42 DEL43 DEL14 DEL53 DEL8 DEL25 DEL42 DEL42 DEL32 DEL41 DEL8 DEL31