OPENNLP-1118: Adds data verification for eval tests.

-import opennlp.tools.util.PlainTextByLineStream;
-public class SourceForgeModelEval {
+public class SourceForgeModelEval extends AbstractEvalTest {
-  public static void ensureTestDataIsCorrect() throws IOException {
-    MessageDigest digest = EvalUtil.createDigest();
-
-    try (ObjectStream<String> lines = new PlainTextByLineStream(
-        new MarkableFileInputStreamFactory(new File(EvalUtil.getOpennlpDataDir(),
-            "leipzig/eng_news_2010_300K-sentences.txt")), StandardCharsets.UTF_8)) {
-
-      String line;
-      while ((line = lines.read()) != null) {
-        digest.update(line.getBytes(StandardCharsets.UTF_8));
-      }
-
-      Assert.assertEquals(new BigInteger("248567841356936801447294643695012852392"),
-          new BigInteger(1, digest.digest()));
-    }
+  public static void verifyTrainingData() throws Exception {
+    verifyTrainingData(new LeipzigDoccatSampleStream("eng", 25,
+            new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+                    "leipzig/eng_news_2010_300K-sentences.txt"))), 
+        new BigInteger("248567841356936801447294643695012852392"));
-  public void evalSentenceModel() throws IOException {
+  public void evalSentenceModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-sent.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-sent.bin"));
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-        new MarkableFileInputStreamFactory(new File(EvalUtil.getOpennlpDataDir(),
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
-  public void evalTokenModel() throws IOException {
+  public void evalTokenModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-token.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-token.bin"));
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-        new MarkableFileInputStreamFactory(new File(EvalUtil.getOpennlpDataDir(),
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
-        new MarkableFileInputStreamFactory(new File(EvalUtil.getOpennlpDataDir(),
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
-      throws IOException {
+      throws Exception {
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-  public void evalNerDateModel() throws IOException {
+  public void evalNerDateModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-date.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-date.bin"));
-  public void evalNerLocationModel() throws IOException {
+  public void evalNerLocationModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-location.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-location.bin"));
-  public void evalNerMoneyModel() throws IOException {
+  public void evalNerMoneyModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-money.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-money.bin"));
-  public void evalNerOrganizationModel() throws IOException {
+  public void evalNerOrganizationModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-organization.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-organization.bin"));
-  public void evalNerPercentageModel() throws IOException {
+  public void evalNerPercentageModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-percentage.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-percentage.bin"));
-  public void evalNerPersonModel() throws IOException {
+  public void evalNerPersonModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-person.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-person.bin"));
-  public void evalNerTimeModel() throws IOException {
+  public void evalNerTimeModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-time.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-time.bin"));
-  public void evalChunkerModel() throws IOException {
+  public void evalChunkerModel() throws Exception {
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-pos-perceptron.bin")));
+        new File(getOpennlpDataDir(), "models-sf/en-pos-perceptron.bin")));
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-chunker.bin")));
+        new File(getOpennlpDataDir(), "models-sf/en-chunker.bin")));
-  private void evalPosModel(POSModel model, BigInteger expectedHash) throws IOException {
+  private void evalPosModel(POSModel model, BigInteger expectedHash) throws Exception {
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-  public void evalMaxentModel() throws IOException {
+  public void evalMaxentModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-pos-maxent.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-pos-maxent.bin"));
-  public void evalPerceptronModel() throws IOException {
+  public void evalPerceptronModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-pos-perceptron.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-pos-perceptron.bin"));
-  public void evalParserModel() throws IOException {
+  public void evalParserModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-parser-chunking.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-parser-chunking.bin"));
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);

INS43 INS42 UPD42 UPD43 INS8 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD43 UPD42 MOV21 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 UPD42 INS32 MOV43 MOV43 MOV43 MOV14 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 UPD42 MOV42 MOV14 MOV14 UPD43 INS45 INS34 MOV43 UPD42 UPD42 INS42 MOV43 UPD42 UPD42 INS42 INS14 UPD42 UPD42 INS42 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 UPD42 UPD42 INS42 UPD42 UPD42 INS42 MOV43 MOV43 MOV43 UPD42 UPD42 INS42 UPD42 MOV43 INS32 MOV43 MOV43 INS45 INS34 INS40 INS14 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV43 MOV42 MOV43 INS14 MOV43 MOV43 MOV43 MOV43 INS32 INS45 INS42 DEL40 DEL26 DEL42 DEL40 DEL42 DEL42 DEL42 DEL40 DEL32 DEL32 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL59 DEL58 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL7 DEL36 DEL33 DEL27 DEL8 DEL61 DEL42 DEL42 DEL42 DEL43 DEL34 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL54 DEL8 DEL42 DEL32 DEL42 DEL43 DEL42 DEL42 DEL40 DEL42 DEL45 DEL34 DEL42 DEL42 DEL32 DEL45 DEL14 DEL14 DEL14 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42 DEL42