OPENNLP-175 Updated cmd line interface and added train methods to train with trainig parameters file/object

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1124372 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.model.TrainUtil;
+import opennlp.tools.util.TrainingParameters;
+  public static ParserModel train(String languageCode, ObjectStream<Parse> parseSamples, HeadRules rules, TrainingParameters mlParams)
+  throws IOException {
+    
+    System.err.println("Building dictionary");
+ // TODO: Discuss and make dict cutoff configurable
+    Dictionary mdict = buildDictionary(parseSamples, rules, 5); 
+    
+    parseSamples.reset();
+    
+    Map<String, String> manifestInfoEntries = new HashMap<String, String>();
+    // TODO: Fix this, find a way to include train params in manifest ...
+//    ModelUtil.addCutoffAndIterations(manifestInfoEntries, cut, iterations);
+    
+    // build
+    System.err.println("Training builder");
+    opennlp.model.EventStream bes = new ParserEventStream(parseSamples, rules, ParserEventTypeEnum.BUILD, mdict);
+    HashSumEventStream hsbes = new HashSumEventStream(bes);
+    AbstractModel buildModel = TrainUtil.train(hsbes, mlParams.getSettings("build"));
+    manifestInfoEntries.put("Training-Builder-Eventhash", 
+        hsbes.calculateHashSum().toString(16));
+    
+    parseSamples.reset();
+    
+    // tag
+    POSModel posModel = POSTaggerME.train(languageCode, new PosSampleStream(parseSamples), 
+        mlParams.getParameters("tagger"), null, null); // <- pass on name space corrected TrainingParameters ...
+    
+    parseSamples.reset();
+    
+    // chunk
+    ChunkerModel chunkModel = ChunkerME.train(languageCode, 
+        new ChunkSampleStream(parseSamples), // <- pass on name space corrected TrainingParameters ...
+        new ChunkContextGenerator(), mlParams.getParameters("chunker"));
+    
+    parseSamples.reset();
+    
+    // check
+    System.err.println("Training checker");
+    opennlp.model.EventStream kes = new ParserEventStream(parseSamples, rules, ParserEventTypeEnum.CHECK);
+    HashSumEventStream hskes = new HashSumEventStream(kes);
+    AbstractModel checkModel = TrainUtil.train(hskes, mlParams.getSettings("check"));
+    manifestInfoEntries.put("Training-Checker-Eventhash", 
+        hskes.calculateHashSum().toString(16));
+    
+    // TODO: Remove cast for HeadRules
+    return new ParserModel(languageCode, buildModel, checkModel,
+        posModel, chunkModel, (opennlp.tools.parser.lang.en.HeadRules) rules,
+        ParserType.CHUNKING, manifestInfoEntries);
+  }
+  

INS26 INS26 INS40 INS40 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS60 INS21 INS60 INS60 INS60 INS21 INS21 INS60 INS21 INS60 INS21 INS21 INS60 INS60 INS60 INS21 INS41 INS42 INS43 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS74 INS59 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS43 INS59 INS32 INS14 INS42 INS42 INS40 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS43 INS42 INS14 INS40 INS42 INS45 INS40 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS45 INS40 INS42 INS14 INS42 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS45 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS11 INS40 INS42 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS74 INS43 INS42 INS42 INS40 INS42 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS34 INS42 INS42 INS42 INS14 INS32 INS33 INS33 INS42 INS42 INS42 INS14 INS14 INS32 INS43 INS42 INS42 INS40 INS43 INS42 INS42 INS42 INS42 INS32 INS32 INS42 INS34 INS42 INS43 INS42 INS43 INS43 INS43 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS43 INS42 INS42 INS42 INS45 INS43 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS42 INS45 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS42 INS42