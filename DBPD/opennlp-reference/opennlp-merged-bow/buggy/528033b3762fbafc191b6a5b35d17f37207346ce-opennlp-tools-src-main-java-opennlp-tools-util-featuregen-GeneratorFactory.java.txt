OPENNLP-605 Added a method to extract serializers from a custom feature generator configuration.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1576692 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import javax.xml.namespace.QName;
+import javax.xml.xpath.XPath;
+import javax.xml.xpath.XPathConstants;
+import javax.xml.xpath.XPathExpressionException;
+import javax.xml.xpath.XPathFactory;
+import opennlp.tools.util.model.SerializableArtifact;
+  // TODO: We have to support custom resources here. How does it work ?!
+  // Attributes get into a Map<String, String> properties
+  
+  // How can serialization be supported ?!
+  // The model is loaded, and the manifest should contain all serializer classes registered for the
+  // resources by name.
+  // When training, the descriptor could be consulted first to register the serializers, and afterwards
+  // they are stored in the model.
+  
+  private static org.w3c.dom.Document createDOM(InputStream xmlDescriptorIn)
+      throws IOException, InvalidFormatException {
+    DocumentBuilderFactory documentBuilderFacoty = DocumentBuilderFactory.newInstance();
+
+    DocumentBuilder documentBuilder;
+
+    try {
+      documentBuilder = documentBuilderFacoty.newDocumentBuilder();
+    } catch (ParserConfigurationException e) {
+      throw new IllegalStateException(e);
+    }
+
+    org.w3c.dom.Document xmlDescriptorDOM;
+
+    try {
+      xmlDescriptorDOM = documentBuilder.parse(xmlDescriptorIn);
+    } catch (SAXException e) {
+      throw new InvalidFormatException("Descriptor is not valid XML!", e);
+    }
+    
+    return xmlDescriptorDOM;
+  }
+  
-    DocumentBuilderFactory documentBuilderFacoty = DocumentBuilderFactory.newInstance();
-
-    DocumentBuilder documentBuilder;
-
-    try {
-      documentBuilder = documentBuilderFacoty.newDocumentBuilder();
-    } catch (ParserConfigurationException e) {
-      throw new IllegalStateException(e);
-    }
-
-    org.w3c.dom.Document xmlDescriptorDOM;
-
-    try {
-      xmlDescriptorDOM = documentBuilder.parse(xmlDescriptorIn);
-    } catch (SAXException e) {
-      throw new InvalidFormatException("Descriptor is not valid XML!", e);
-    }
+    org.w3c.dom.Document xmlDescriptorDOM = createDOM(xmlDescriptorIn);
-  // TODO: Add method to extract ArtifactSerializer mapping from feature gen ...
+  public static Map<String, Class<? extends SerializableArtifact>> extractCustomArtifactSerializerMappings(
+      InputStream xmlDescriptorIn, FeatureGeneratorResourceProvider resourceManager)
+      throws IOException, InvalidFormatException {
+    
+    Map<String, Class<? extends SerializableArtifact>> mapping = new HashMap<>();
+    
+    org.w3c.dom.Document xmlDescriptorDOM = createDOM(xmlDescriptorIn);
+    
+    XPath xPath = XPathFactory.newInstance().newXPath();
+    
+    NodeList customElements;
+    try {
+      customElements = (NodeList) xPath.evaluate("custom", xmlDescriptorDOM.getDocumentElement(), XPathConstants.NODESET);
+    } catch (XPathExpressionException e) {
+      throw new IllegalStateException("The hard coded XPath expression should always be valid!");
+    }
+    
+    for (int i = 0; i < customElements.getLength(); i++) {
+      
+      if (customElements.item(i) instanceof Element) {
+        Element customElement = (Element) customElements.item(i);
+        
+        AdaptiveFeatureGenerator generator = createGenerator(customElement, resourceManager);
+        
+        if (generator instanceof ArtifactToSerializerMapper) {
+          ArtifactToSerializerMapper mapper = (ArtifactToSerializerMapper) generator;
+          mapping.putAll(mapper.getArtifactSerializerMapping());
+        }
+      }
+      
+    }
+    
+    return mapping;
+  }

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS31 INS31 UPD83 INS43 UPD42 MOV29 INS83 INS83 MOV43 INS42 INS44 MOV44 INS43 INS43 INS8 INS83 INS83 INS74 INS42 INS44 INS44 INS43 INS43 INS8 INS40 INS41 INS43 INS42 INS42 INS42 INS60 MOV60 MOV41 INS43 INS43 INS74 INS43 INS42 INS43 INS42 INS42 INS42 INS60 INS60 INS60 INS60 INS54 INS24 INS41 INS42 INS42 INS43 INS59 INS42 INS42 INS43 INS76 INS42 INS42 INS74 INS59 INS43 INS59 INS43 INS59 INS43 INS59 INS8 INS12 INS58 INS27 INS37 INS8 INS42 INS40 INS42 INS32 INS42 INS43 INS43 INS43 INS74 INS42 INS14 INS40 INS42 INS32 INS42 INS42 INS32 INS42 INS42 INS21 INS44 INS8 INS39 INS59 INS42 INS32 INS42 INS25 INS42 INS42 INS42 INS42 INS42 INS43 INS76 INS74 INS42 INS42 INS32 INS42 INS7 INS43 INS42 INS53 INS42 INS34 INS42 INS42 INS62 INS8 INS42 INS43 INS43 INS42 INS42 INS42 INS11 INS42 INS14 INS32 INS43 INS60 INS60 INS25 INS42 INS42 INS43 INS32 INS43 INS45 INS42 INS42 INS42 INS42 INS43 INS59 INS43 INS59 INS62 INS8 INS42 INS42 INS42 INS45 INS32 INS40 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS42 INS43 INS60 INS21 INS42 INS42 INS43 INS32 INS42 INS42 INS42 INS42 INS43 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42