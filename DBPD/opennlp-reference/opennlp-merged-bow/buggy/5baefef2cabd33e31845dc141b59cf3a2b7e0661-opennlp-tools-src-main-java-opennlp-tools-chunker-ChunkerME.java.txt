OPENNLP-641 Added initial sequence classification support

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1570210 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.ml.EventTrainer;
+import opennlp.tools.ml.SequenceTrainer;
+import opennlp.tools.ml.TrainerFactory;
+import opennlp.tools.ml.TrainerFactory.TrainerType;
+import opennlp.tools.ml.model.SequenceClassificationModel;
-import opennlp.tools.util.BeamSearch;
+import opennlp.tools.postag.POSSampleSequenceStream;
-  /**
-   * The beam used to search for sequences of chunk tag assignments.
-   */
-  protected BeamSearch<String> beam;
-
-  protected MaxentModel model;
+  protected SequenceClassificationModel<String> model;
+
+  private ChunkerContextGenerator contextGenerator;
+  private SequenceValidator<String> sequenceValidator;
+  @Deprecated
-    this.model = model.getChunkerModel();
-    beam = new BeamSearch<String>(beamSize, contextGenerator, this.model, sequenceValidator, 0);
+    
+    this.sequenceValidator = sequenceValidator;
+    this.contextGenerator = contextGenerator;
+    
+    if (model.getChunkerModel() != null) {
+      this.model = new opennlp.tools.ml.BeamSearch<String>(beamSize,
+          model.getChunkerModel(), 0);
+    }
+    else {
+      this.model = model.getChunkerSequenceModel();
+    }
+  @Deprecated
-
+  
-    this.model = model.getChunkerModel();
-    ChunkerContextGenerator contextGenerator = model.getFactory().getContextGenerator();
-    SequenceValidator<String> sequenceValidator = model.getFactory().getSequenceValidator();
-    beam = new BeamSearch<String>(beamSize, contextGenerator, this.model, sequenceValidator, 0);
+    
+   contextGenerator = model.getFactory().getContextGenerator();
+   sequenceValidator = model.getFactory().getSequenceValidator();
+    // beam = new BeamSearch<String>(beamSize, contextGenerator, this.model, sequenceValidator, 0);
+    
+    if (model.getChunkerModel() != null) {
+      this.model = new opennlp.tools.ml.BeamSearch<String>(beamSize,
+          model.getChunkerModel(), 0);
+    }
+    else {
+      this.model = model.getChunkerSequenceModel();
+    }
-        beam.bestSequence(toks.toArray(new String[toks.size()]), new Object[] { tags.toArray(new String[tags.size()]) });
+        model.bestSequence(toks.toArray(new String[toks.size()]), new Object[] { tags.toArray(new String[tags.size()]) },
+            contextGenerator, sequenceValidator);
-    bestSequence = beam.bestSequence(toks, new Object[] {tags});
+    bestSequence = model.bestSequence(toks, new Object[] {tags}, contextGenerator, sequenceValidator);
-    return beam.bestSequences(DEFAULT_BEAM_SIZE, sentence,
-        new Object[] { tags });
+    return model.bestSequences(DEFAULT_BEAM_SIZE, sentence,
+        new Object[] { tags }, contextGenerator, sequenceValidator);
-    return beam.bestSequences(DEFAULT_BEAM_SIZE, sentence, new Object[] { tags },minSequenceScore);
+    return model.bestSequences(DEFAULT_BEAM_SIZE, sentence, new Object[] { tags }, minSequenceScore,
+        contextGenerator, sequenceValidator);
-    ObjectStream<Event> es = new ChunkerEventStream(in, factory.getContextGenerator());
+    TrainerType trainerType = TrainerFactory.getTrainerType(mlParams.getSettings());
+    
-    MaxentModel maxentModel = TrainUtil.train(es, mlParams.getSettings(),
-        manifestInfoEntries);
-
-    return new ChunkerModel(lang, maxentModel, manifestInfoEntries, factory);
+    MaxentModel chunkerModel = null;
+    SequenceClassificationModel<String> seqChunkerModel = null;
+    
+    if (TrainerType.EVENT_MODEL_TRAINER.equals(trainerType)) {
+      ObjectStream<Event> es = new ChunkerEventStream(in, factory.getContextGenerator());
+      EventTrainer trainer = TrainerFactory.getEventTrainer(mlParams.getSettings(),
+          manifestInfoEntries);
+      chunkerModel = trainer.train(es);
+    }
+    else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
+      SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
+          mlParams.getSettings(), manifestInfoEntries);
+      
+      // TODO: This will probably cause issue, since the feature generator uses the outcomes array
+      
+      ChunkSampleSequenceStream ss = new ChunkSampleSequenceStream(in, factory.getContextGenerator());
+      seqChunkerModel = trainer.train(ss);
+    }
+    else {
+      throw new IllegalArgumentException("Trainer type is not supported: " + trainerType);  
+    }
+    
+    if (chunkerModel != null) {
+      return new ChunkerModel(lang, chunkerModel, manifestInfoEntries, factory);
+    }
+    else {
+      return new ChunkerModel(lang, seqChunkerModel, manifestInfoEntries, factory);
+    }

MOV26 INS26 INS26 INS26 INS26 INS26 MOV23 UPD40 INS40 INS40 INS40 INS40 INS40 INS23 UPD74 MOV74 UPD83 MOV43 INS83 MOV74 INS59 INS78 INS8 INS78 INS8 MOV8 INS8 UPD43 UPD42 INS42 INS42 INS21 INS21 INS25 INS42 INS21 INS25 INS41 MOV60 MOV60 INS60 INS60 INS25 INS25 UPD42 INS7 INS7 INS27 MOV8 INS8 INS7 INS27 INS8 INS8 INS32 INS43 MOV43 INS59 INS74 INS59 INS32 INS8 INS25 INS27 INS8 INS8 INS22 INS42 INS22 INS42 INS32 INS33 INS21 INS42 MOV32 INS42 MOV32 INS32 INS33 MOV21 INS21 INS42 INS42 INS42 INS42 MOV3 INS42 INS42 UPD42 INS42 INS42 INS42 INS42 UPD42 INS42 INS33 INS43 INS43 INS42 INS33 INS40 INS42 INS42 MOV60 INS60 INS21 INS32 INS8 INS8 INS42 INS33 MOV41 INS41 INS52 INS42 INS52 INS42 INS42 INS42 INS7 INS42 INS42 INS7 UPD42 INS42 INS42 UPD42 INS42 INS42 UPD42 UPD42 INS42 INS42 INS43 INS59 INS7 INS40 INS42 INS42 INS60 INS60 INS21 INS53 INS14 INS14 MOV22 INS32 MOV22 MOV22 INS32 INS42 INS42 INS32 INS42 INS32 INS43 INS59 INS43 INS59 INS7 INS14 UPD42 INS43 INS42 INS42 INS42 INS42 INS74 INS42 MOV32 INS34 INS42 INS42 UPD74 MOV32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS14 INS42 INS32 INS43 INS27 INS42 INS43 MOV43 UPD43 INS42 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS32 INS42 INS42 INS42 INS42 INS45 INS42 INS40 INS40 INS42 INS42 INS42 INS42 INS42 DEL42 DEL43 DEL66 DEL65 DEL29 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL34 DEL14 DEL7 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL59 DEL60 DEL42 DEL59 DEL60 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL41 DEL8 DEL42 DEL42 DEL8