OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

-
-import java.io.FileNotFoundException;
-import java.nio.charset.Charset;
-import opennlp.tools.cmdline.ArgumentParser;
-import opennlp.tools.cmdline.CLI;
-import opennlp.tools.cmdline.CmdLineTool;
+import opennlp.tools.cmdline.AbstractTrainerTool;
+import opennlp.tools.cmdline.params.EncodingParameter;
+import opennlp.tools.cmdline.parser.ParserTrainerTool.TrainerToolParams;
-import opennlp.tools.parser.ParseSampleStream;
-import opennlp.tools.util.PlainTextByLineStream;
+import opennlp.tools.util.model.ModelUtil;
-public final class ParserTrainerTool implements CmdLineTool {
+public final class ParserTrainerTool extends AbstractTrainerTool<Parse, TrainerToolParams> {
-  interface TrainerToolParams extends TrainingParams, TrainingToolParams{
-
+  interface TrainerToolParams extends TrainingParams, TrainingToolParams, EncodingParameter {
-  public String getName() {
-    return "ParserTrainer";
+  public ParserTrainerTool() {
+    super(Parse.class, TrainerToolParams.class);
-  
+
-  public String getHelp() {
-    return "Usage: " + CLI.CMD + " " + getName() + " "
-      + ArgumentParser.createUsage(TrainerToolParams.class);
-  }
-
-  static ObjectStream<Parse> openTrainingData(File trainingDataFile, Charset encoding) {
-    
-    CmdLineUtil.checkInputFile("Training data", trainingDataFile);
-
-    System.err.print("Opening training data ... ");
-    
-    FileInputStream trainingDataIn;
-    try {
-      trainingDataIn = new FileInputStream(trainingDataFile);
-    } catch (FileNotFoundException e) {
-      System.err.println("failed");
-      System.err.println("File not found: " + e.getMessage());
-      throw new TerminateToolException(-1);
-    }
-    
-    System.err.println("done");
-    
-    return new ParseSampleStream(
-        new PlainTextByLineStream(trainingDataIn.getChannel(),
-        encoding));
-  }
-  
-        System.err.println("ParserType training parameter is invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "ParserType training parameter is invalid!");
-  public void run(String[] args) {
-    
-    String errorMessage = ArgumentParser.validateArgumentsLoudly(args, TrainerToolParams.class);
-    if (null != errorMessage) {
-      System.err.println(errorMessage);
-      System.err.println(getHelp());
-      throw new TerminateToolException(1);
-    }
-    
-    TrainerToolParams params = ArgumentParser.parse(args,
-        TrainerToolParams.class); 
-    
-    opennlp.tools.util.TrainingParameters mlParams =
-      CmdLineUtil.loadTrainingParameters(params.getParams(), true);
+  public void run(String format, String[] args) {
+    super.run(format, args);
+
+    mlParams = CmdLineUtil.loadTrainingParameters(params.getParams(), true);
-        System.err.println("Build training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Build training parameters are invalid!");
-        System.err.println("Check training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Check training parameters are invalid!");
-        System.err.println("Attach training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Attach training parameters are invalid!");
-        System.err.println("Tagger training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Tagger training parameters are invalid!");
-        System.err.println("Chunker training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Chunker training parameters are invalid!");
-    
-    ObjectStream<Parse> sampleStream = openTrainingData(params.getData(), params.getEncoding());
-    
+
+    if(mlParams == null) {
+      mlParams = ModelUtil.createTrainingParameters(params.getIterations(), params.getCutoff());
+    }
+
-      
+
+      // TODO hard-coded language reference
-      if (mlParams == null) {
-        if (ParserType.CHUNKING.equals(type)) {
-          model = opennlp.tools.parser.chunking.Parser.train(
-              params.getLang(), sampleStream, rules, 
-              params.getIterations(), params.getCutoff());
-        }
-        else if (ParserType.TREEINSERT.equals(type)) {
-          model = opennlp.tools.parser.treeinsert.Parser.train(params.getLang(), sampleStream, rules, params.getIterations(), 
-              params.getCutoff());
-        }
-        else {
-          throw new IllegalStateException();
-        }
+      if (ParserType.CHUNKING.equals(type)) {
+        model = opennlp.tools.parser.chunking.Parser.train(
+            factory.getLang(), sampleStream, rules,
+            mlParams);
+      }
+      else if (ParserType.TREEINSERT.equals(type)) {
+        model = opennlp.tools.parser.treeinsert.Parser.train(factory.getLang(), sampleStream, rules,
+            mlParams);
-        if (ParserType.CHUNKING.equals(type)) {
-          model = opennlp.tools.parser.chunking.Parser.train(
-              params.getLang(), sampleStream, rules, 
-              mlParams);
-        }
-        else if (ParserType.TREEINSERT.equals(type)) {
-          model = opennlp.tools.parser.treeinsert.Parser.train(params.getLang(), sampleStream, rules,
-              mlParams);
-        }
-        else {
-          throw new IllegalStateException();
-        }
-
+        throw new IllegalStateException();
-      CmdLineUtil.printTrainingIoError(e);
-      throw new TerminateToolException(-1);
+      throw new TerminateToolException(-1, "IO error while reading training data or indexing data: " + e.getMessage());

MOV26 MOV26 UPD40 UPD40 UPD40 UPD40 INS74 INS43 MOV43 MOV43 INS43 INS42 INS44 UPD42 MOV42 INS42 INS46 MOV43 INS42 INS21 MOV21 INS25 INS54 INS57 MOV57 INS48 MOV27 MOV8 INS8 MOV12 MOV8 MOV43 INS42 INS42 INS42 INS42 MOV32 MOV60 MOV60 MOV25 MOV8 INS8 MOV8 MOV8 MOV8 MOV32 MOV53 MOV53 UPD42 MOV32 MOV8 UPD42 UPD42 MOV42 MOV27 INS34 INS45 INS34 INS45 INS34 INS45 INS34 INS45 INS34 INS45 INS45 UPD45 UPD42 UPD42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL43 DEL42 DEL43 DEL42 DEL45 DEL41 DEL83 DEL42 DEL43 DEL42 DEL45 DEL40 DEL45 DEL42 DEL32 DEL45 DEL42 DEL42 DEL32 DEL27 DEL41 DEL8 DEL31 DEL83 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL42 DEL44 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL45 DEL42 DEL32 DEL21 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL59 DEL60 DEL42 DEL42 DEL43 DEL42 DEL14 DEL7 DEL21 DEL8 DEL42 DEL43 DEL42 DEL44 DEL40 DEL42 DEL45 DEL32 DEL21 DEL40 DEL42 DEL32 DEL21 DEL8 DEL12 DEL54 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL14 DEL14 DEL41 DEL8 DEL31 DEL34 DEL38 DEL42 DEL40 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL33 DEL42 DEL27 DEL40 DEL42 DEL42 DEL32 DEL21 DEL40 DEL42 DEL42 DEL32 DEL32 DEL21 DEL8 DEL25 DEL42 DEL42 DEL42 DEL42 DEL42 DEL43 DEL57 DEL32 DEL59 DEL60 DEL40 DEL43 DEL42 DEL59 DEL60 DEL40 DEL42 DEL45 DEL32 DEL21 DEL34 DEL38 DEL40 DEL42 DEL45 DEL32 DEL21 DEL34 DEL38 DEL40 DEL42 DEL45 DEL32 DEL21 DEL34 DEL38 DEL40 DEL42 DEL45 DEL32 DEL21 DEL34 DEL38 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL43 DEL34 DEL38 DEL14 DEL53 DEL40 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL40 DEL42 DEL42 DEL32 DEL40 DEL42 DEL42 DEL32 DEL42 DEL43 DEL14 DEL53 DEL8 DEL40 DEL42 DEL45 DEL32 DEL21 DEL42 DEL42 DEL42 DEL32 DEL21 DEL42 DEL43 DEL34 DEL38 DEL14 DEL53 DEL8 DEL8 DEL25 DEL25 DEL8 DEL8 DEL25 DEL8 DEL54