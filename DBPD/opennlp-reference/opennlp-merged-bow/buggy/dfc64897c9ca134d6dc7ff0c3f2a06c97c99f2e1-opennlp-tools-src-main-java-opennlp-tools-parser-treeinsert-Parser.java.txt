OPENNLP-175 Updated cmd line interface and added train methods to train with trainig parameters file/object

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1124372 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.model.TrainUtil;
+import opennlp.tools.util.TrainingParameters;
+      ObjectStream<Parse> parseSamples, HeadRules rules, TrainingParameters mlParams)
+  throws IOException {
+    
+    // TODO: training code should be shared between two parsers
+    System.err.println("Building dictionary");
+    // TODO: Make cutoff configurable ... 
+    Dictionary mdict = buildDictionary(parseSamples, rules, 5);
+    
+    parseSamples.reset();
+    
+    // tag
+    POSModel posModel = POSTaggerME.train(languageCode, new PosSampleStream(
+        parseSamples), mlParams.getParameters("tagger"), null, null);
+    
+    parseSamples.reset();
+    
+    // chunk
+    ChunkerModel chunkModel = ChunkerME.train(languageCode, new ChunkSampleStream(
+        parseSamples), new ChunkContextGenerator(), mlParams.getParameters("chunker"));
+    
+    parseSamples.reset();
+    
+    // build
+    System.err.println("Training builder");
+    opennlp.model.EventStream bes = new ParserEventStream(parseSamples, rules,
+        ParserEventTypeEnum.BUILD, mdict);
+    AbstractModel buildModel = TrainUtil.train(bes, mlParams.getSettings("build"));
+    
+    parseSamples.reset();
+    
+    // check
+    System.err.println("Training checker");
+    opennlp.model.EventStream kes = new ParserEventStream(parseSamples, rules,
+        ParserEventTypeEnum.CHECK);
+    AbstractModel checkModel = TrainUtil.train(kes, mlParams.getSettings("check"));
+    
+    parseSamples.reset();
+    
+    // attach 
+    System.err.println("Training attacher");
+    opennlp.model.EventStream attachEvents = new ParserEventStream(parseSamples, rules,
+        ParserEventTypeEnum.ATTACH);
+    AbstractModel attachModel = TrainUtil.train(attachEvents, mlParams.getSettings("attach"));
+    
+    // TODO: Remove cast for HeadRules
+    return new ParserModel(languageCode, buildModel, checkModel,
+        attachModel, posModel, chunkModel, 
+        (opennlp.tools.parser.lang.en.HeadRules) rules, ParserType.TREEINSERT);
+  }
+  
+  public static ParserModel train(String languageCode,

INS26 INS26 INS40 INS40 INS31 INS83 INS83 INS43 INS42 INS44 INS44 INS44 INS44 INS43 INS8 INS42 INS43 INS42 INS74 INS42 INS43 INS42 INS43 INS42 INS42 INS21 INS60 INS21 INS60 INS21 INS60 INS21 INS21 INS60 INS60 INS21 INS21 INS60 INS60 INS21 INS21 INS60 INS60 INS41 INS42 INS43 INS43 INS42 INS42 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS32 INS32 INS43 INS59 INS43 INS59 INS14 INS42 INS42 INS40 INS42 INS45 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS45 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS45 INS40 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS40 INS42 INS45 INS40 INS42 INS14 INS42 INS42 INS32 INS43 INS42 INS42 INS42 INS42 INS42 INS42 INS11 INS40 INS42 INS42 INS42 INS34 INS42 INS42 INS42 INS14 INS32 INS33 INS33 INS42 INS42 INS42 INS14 INS14 INS32 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS43 INS42 INS42 INS40 INS42 INS42 INS42 INS32 INS42 INS43 INS42 INS43 INS42 INS42 INS42 INS45 INS43 INS42 INS43 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS42 INS42 INS42 INS45 INS40 INS42 INS42 INS42