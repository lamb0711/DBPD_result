OPENNLP-760 modifying dictionary lemmatizer to use general lemmatizer interface

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1731151 13f79535-47bb-0310-9956-ffa450edef68

-public interface DictionaryLemmatizer {
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+
+/**
+ * Lemmatize by simple dictionary lookup into a hashmap built from a file
+ * containing, for each line, word\tablemma\tabpostag.
+ * @version 2014-07-08
+ */
+public class DictionaryLemmatizer implements Lemmatizer {
-   * Returns the lemma of the specified word with the specified part-of-speech.
-   *
-   * @param word The word whose lemmas are desired.
-   * @param postag The part-of-speech of the specified word.
-   * @return The lemma of the specified word given the specified part-of-speech.
+   * The hashmap containing the dictionary.
-  public String lemmatize(String word, String postag);
+  private final HashMap<List<String>, String> dictMap;
+  /**
+   * Construct a hashmap from the input tab separated dictionary.
+   * 
+   * The input file should have, for each line, word\tablemma\tabpostag
+   * 
+   * @param dictionary
+   *          the input dictionary via inputstream
+   */
+  public DictionaryLemmatizer(final InputStream dictionary) {
+    this.dictMap = new HashMap<List<String>, String>();
+    final BufferedReader breader = new BufferedReader(new InputStreamReader(
+        dictionary));
+    String line;
+    try {
+      while ((line = breader.readLine()) != null) {
+        final String[] elems = line.split("\t");
+        this.dictMap.put(Arrays.asList(elems[0], elems[2]), elems[1]);
+      }
+    } catch (final IOException e) {
+      e.printStackTrace();
+    }
+  }
+  /**
+   * Get the Map containing the dictionary.
+   * 
+   * @return dictMap the Map
+   */
+  public HashMap<List<String>, String> getDictMap() {
+    return this.dictMap;
+  }
+
+  /**
+   * Get the dictionary keys (word and postag).
+   * 
+   * @param word
+   *          the surface form word
+   * @param postag
+   *          the assigned postag
+   * @return returns the dictionary keys
+   */
+  private List<String> getDictKeys(final String word, final String postag) {
+    final List<String> keys = new ArrayList<String>();
+    keys.addAll(Arrays.asList(word.toLowerCase(), postag));
+    return keys;
+  }
+  
+  public String[] lemmatize(final String[] tokens, final String[] postags) {
+    List<String> lemmas = new ArrayList<String>();
+    for (int i = 0; i < tokens.length; i++) {
+      lemmas.add(this.apply(tokens[i], postags[i])); 
+    }
+    return lemmas.toArray(new String[lemmas.size()]);
+  }
+
+  /**
+   * Lookup lemma in a dictionary. Outputs "O" if not found.
+   * @param word the token
+   * @param postag the postag
+   * @return the lemma
+   */
+  public String apply(final String word, final String postag) {
+    String lemma = null;
+    final List<String> keys = this.getDictKeys(word, postag);
+    // lookup lemma as value of the map
+    final String keyValue = this.dictMap.get(keys);
+    if (keyValue != null) {
+      lemma = keyValue;
+    } else {
+      lemma = "O";
+    }
+    return lemma;
+  }
+

INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS26 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS40 INS29 INS43 INS23 INS31 INS31 INS31 INS31 INS65 INS65 INS42 INS29 INS83 INS83 INS74 INS59 INS29 INS83 INS42 INS44 INS8 INS29 INS83 INS74 INS42 INS8 INS29 INS83 INS74 INS42 INS44 INS44 INS8 INS83 INS5 INS42 INS44 INS44 INS8 INS43 INS42 INS8 INS66 INS66 INS66 INS65 INS43 INS74 MOV43 INS42 INS65 INS65 INS83 INS43 INS42 INS21 INS60 INS60 INS54 INS65 INS65 INS43 INS74 INS43 INS41 INS65 INS65 INS65 INS65 INS43 INS43 INS83 INS43 INS42 INS83 INS43 INS42 INS60 INS21 INS41 INS43 INS85 INS83 INS5 INS42 INS83 INS5 INS42 INS60 INS24 INS41 INS42 INS83 INS43 INS83 INS43 INS60 INS60 INS60 INS25 INS41 INS66 INS42 INS43 INS43 INS66 INS66 INS42 INS66 INS42 INS7 INS83 INS43 INS59 MOV43 INS59 INS8 INS12 INS66 INS66 INS42 INS43 INS43 INS42 INS22 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS42 INS42 INS83 INS74 INS59 INS32 INS42 INS42 INS43 INS85 INS43 INS85 INS74 INS59 INS58 INS27 INS37 INS8 INS32 UPD66 UPD66 UPD66 UPD66 INS42 INS42 INS43 INS59 INS83 INS74 INS59 INS83 INS43 INS59 INS27 INS8 INS8 INS42 INS42 INS42 INS22 INS14 INS42 INS42 INS14 INS42 INS61 INS44 INS8 INS42 INS42 INS52 INS42 INS43 INS43 INS42 INS14 INS42 INS42 INS32 INS42 INS42 INS43 INS43 INS42 INS14 INS39 INS59 INS42 INS40 INS42 INS21 INS42 INS42 INS3 INS42 INS42 INS33 INS43 INS43 INS42 INS32 INS42 INS42 INS32 INS42 INS33 INS21 INS21 INS52 INS42 INS74 INS43 INS14 INS27 INS8 INS83 INS43 INS42 INS21 INS42 INS42 INS74 INS42 INS42 INS32 INS42 INS42 INS42 INS74 INS42 INS34 INS32 INS5 INS32 INS42 INS42 INS52 INS42 INS42 INS42 INS22 INS42 INS42 INS7 INS7 INS43 INS74 INS43 INS42 INS43 INS42 INS36 INS33 INS60 INS21 INS42 INS32 INS43 INS43 INS42 INS42 INS43 INS43 INS42 INS42 INS32 INS43 INS85 INS42 INS42 INS52 INS42 INS42 INS42 INS42 INS45 INS42 INS43 INS43 INS42 INS42 INS7 INS83 INS5 INS59 INS32 INS42 INS42 INS42 INS42 INS42 INS42 INS52 INS42 INS2 INS2 INS42 INS42 INS42 INS42 INS32 MOV43 INS85 INS42 INS32 INS22 INS42 INS32 INS2 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS42 INS45 INS52 INS42 INS42 INS42 INS2 INS2 INS42 INS34 INS42 INS34 INS42 INS34 DEL42