OPENNLP-880: Refactor data indexer

1.) Added method to EventTrainer – train(DataIndexer indexer)
    –Then I added the method to AbstractEventTrainer.
    No other code needed to be changed.

2.) Created a new class – PluggableParmeters: Only AbstractTrainers
    had access to getXXXParam(Value,Default). So I pulled out this
    functionality into a separate class. Now both
    AbstractTrainers and AbstractDataIndexers can hold parameters.

3.) Refactored DataIndexer. This touched a lot of code.
    Added init(Map,Map) method and index(ObjectStream) method.
    Changed 1-Pass and 2-Pass DataIndexers. Everywhere 1-pass/2-pass
    indexers where created, I changed the constructor,
    and added the init and index methods.

4.) Changed GIS.doTrain(indexer) to use the parameters
    passed in the init method.

5.) QNTrainer – created a working init method. Changed the
    isValid method so it is not the init method.

This closes #14

+import java.util.HashMap;
+import java.util.Map;
+
-    return trainModel(iterations, new OnePassDataIndexer(eventStream,cutoff),cutoff);
+    DataIndexer indexer = new OnePassDataIndexer();
+    Map<String, String> params = new HashMap<>();
+    params.put(GIS.ITERATIONS_PARAM, Integer.toString(iterations));
+    params.put(GIS.CUTOFF_PARAM, Integer.toString(cutoff));
+    indexer.init(params, new HashMap<>());
+    return trainModel(iterations, indexer, cutoff);
-            for (int aoi = 0; aoi < activeOutcomes.length; aoi++) {
+            for (int aoi = 0;aoi < activeOutcomes.length; aoi++) {
-    // is not divisible by the number of threads, the first "leftOver"
+    // is not divisible by the number of threads, the first "leftOver" 

INS26 INS26 INS40 INS40 INS60 INS60 INS21 INS21 INS21 INS43 INS59 INS74 INS59 INS32 INS32 INS32 INS42 INS42 MOV14 INS43 INS43 INS43 INS42 INS14 INS42 INS42 INS40 INS32 INS42 INS42 INS40 INS32 INS42 INS42 INS42 INS14 INS42 INS42 INS42 INS42 INS74 INS42 INS42 INS42 INS42 INS42 INS42 INS74 INS43 INS43 INS42 INS42 DEL42 DEL42