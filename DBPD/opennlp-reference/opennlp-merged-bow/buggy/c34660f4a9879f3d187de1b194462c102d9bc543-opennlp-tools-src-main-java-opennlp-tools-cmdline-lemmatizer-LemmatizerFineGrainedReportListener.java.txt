OPENNLP-814 formatting code of new CLI for lemmatizer

- * Generates a detailed report for the POS Tagger.
+ * Generates a detailed report for the Lemmatizer.
- * provided getters
+ * provided getters.
-public class LemmatizerFineGrainedReportListener implements
-    LemmatizerEvaluationMonitor {
+public class LemmatizerFineGrainedReportListener
+    implements LemmatizerEvaluationMonitor {
-      'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
-      'w', 'x', 'y', 'z' };
+      'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',
+      'x', 'y', 'z' };
-  public void correctlyClassified(LemmaSample reference, LemmaSample prediction) {
+  public void correctlyClassified(LemmaSample reference,
+      LemmaSample prediction) {
-      sb.append(
-          String.format("|   %-6s |   %3s = ", matrix[i][j],
-              generateAlphaLabel(i - initialIndex))).append(tags[i]);
+      sb.append(String.format("|   %-6s |   %3s = ", matrix[i][j],
+          generateAlphaLabel(i - initialIndex))).append(tags[i]);
-    printStream.append(
-        String.format("%21s: %6s", "Number of sentences",
-            Long.toString(getNumberOfSentences()))).append("\n");
+    printStream.append(String.format("%21s: %6s", "Number of sentences",
+        Long.toString(getNumberOfSentences()))).append("\n");
-    printStream.append(
-        String.format("%21s: %6s", "Average sentence size",
+    printStream
+        .append(String.format("%21s: %6s", "Average sentence size",
-    printStream.append(
-        String.format("%21s: %6s", "Tags count", getNumberOfTags())).append(
-        "\n");
-    printStream.append(
-        String.format("%21s: %6s", "Accuracy",
-            MessageFormat.format("{0,number,#.##%}", getAccuracy()))).append(
-        "\n");
+    printStream
+        .append(String.format("%21s: %6s", "Tags count", getNumberOfTags()))
+        .append("\n");
+    printStream
+        .append(String.format("%21s: %6s", "Accuracy",
+            MessageFormat.format("{0,number,#.##%}", getAccuracy())))
+        .append("\n");
-    printStream.append(String.format(format, "Pos", "Count", "Token")).append(
-        "\n");
+    printStream.append(String.format(format, "Pos", "Count", "Token"))
+        .append("\n");
-    printStream.append(String.format(format, "Token", "Errors", "Count",
-        "% Err"));
+    printStream
+        .append(String.format(format, "Token", "Errors", "Count", "% Err"));
-      String rate = MessageFormat.format("{0,number,#.##%}", (double) errors
-          / ocurrencies);
+      String rate = MessageFormat.format("{0,number,#.##%}",
+          (double) errors / ocurrencies);
-      String rate = MessageFormat.format("{0,number,#.###}", (double) errors
-          / ocurrencies);
+      String rate = MessageFormat.format("{0,number,#.###}",
+          (double) errors / ocurrencies);
-        printStream
-            .append("\n[")
-            .append(t)
-            .append("]\n")
-            .append(
-                String.format("%12s: %-8s", "Accuracy",
-                    MessageFormat.format("{0,number,#.##%}", acc)))
+        printStream.append("\n[")
+            .append(t).append("]\n").append(String.format("%12s: %-8s",
+                "Accuracy", MessageFormat.format("{0,number,#.##%}", acc)))
-        printStream.append(
-            String.format("%12s: %-8s", "Ocurrencies",
-                Integer.toString(getTokenFrequency(t)))).append("\n");
-        printStream.append(
-            String.format("%12s: %-8s", "Errors",
-                Integer.toString(getTokenErrors(t)))).append("\n");
+        printStream.append(String.format("%12s: %-8s", "Ocurrencies",
+            Integer.toString(getTokenFrequency(t)))).append("\n");
+        printStream.append(String.format("%12s: %-8s", "Errors",
+            Integer.toString(getTokenErrors(t)))).append("\n");
-          matrix[line][column] = (double) (data.get(ref) != null ? data
-              .get(ref).getValue(pred) : 0);
+          matrix[line][column] = (double) (data.get(ref) != null
+              ? data.get(ref).getValue(pred) : 0);
-        matrix[line][column] = (double) (data.get(ref) != null ? data.get(ref)
-            .getAccuracy() : 0);
+        matrix[line][column] = (double) (data.get(ref) != null
+            ? data.get(ref).getAccuracy() : 0);
-      SortedSet<String> tags = new TreeSet<String>(new CategoryComparator(data));
+      SortedSet<String> tags = new TreeSet<String>(
+          new CategoryComparator(data));
-    public CategoryComparator(Map<String, ConfusionMatrixLine> confusionMatrix) {
+    public CategoryComparator(
+        Map<String, ConfusionMatrixLine> confusionMatrix) {

UPD66 UPD66