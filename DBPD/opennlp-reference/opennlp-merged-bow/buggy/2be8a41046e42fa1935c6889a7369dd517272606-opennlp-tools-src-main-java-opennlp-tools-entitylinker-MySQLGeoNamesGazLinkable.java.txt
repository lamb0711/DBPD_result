OPENNLP-611
GeoHashBinScorer has java 1.7 dependant objects.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1536650 13f79535-47bb-0310-9956-ffa450edef68

-      String thresh = properties.getProperty("mysqlusgsgazscorethresh", "200");
+      String thresh = properties.getProperty("geonames.gaz.rowsreturned", "200");
-      returnlocs.addAll(this.searchGaz(locationText, threshhold, countryHits.keySet(), properties));
-
-
+      /**
+       * Because we need equal amount of candidate toponyms from each country
+       * code, we iterate over the set of codes and do a search with the name
+       * for each code returning n rows based on threah
+       */
+      for (String code : countryHits.keySet()) {
+        returnlocs.addAll(this.searchGaz(locationText, threshhold, code, properties));
+      }
-  protected Connection getMySqlConnection(EntityLinkerProperties property) throws Exception {
+  private Connection getMySqlConnection(EntityLinkerProperties property) throws Exception {
-    String driver = property.getProperty("mysql.driver", "org.gjt.mm.mysql.Driver");
-    String url = property.getProperty("mysql.url", "jdbc:mysql://localhost:3306/world");
-    String username = property.getProperty("mysql.username", "root");
-    String password = property.getProperty("mysql.password", "?");
+    String driver = property.getProperty("db.driver", "org.gjt.mm.mysql.Driver");
+    String url = property.getProperty("db.url", "jdbc:mysql://localhost:3306/world");
+    String username = property.getProperty("db.username", "root");
+    String password = property.getProperty("db.password", "?");
-  public ArrayList<MySQLGeoNamesGazEntry> searchGaz(String searchString, int matchthresh, Set<String> countryCodes, EntityLinkerProperties properties) throws SQLException, Exception {
+  /**
+   *
+   * @param searchString the name to look up in the gazateer
+   * @param rowsReturned number of rows to return
+   * @param code         the two digit country code
+   * @param properties   EntityLinkerProperties that identifies the database
+   *                     connection properties
+   * @return
+   * @throws SQLException
+   * @throws Exception
+   */
+  public ArrayList<MySQLGeoNamesGazEntry> searchGaz(String searchString, int rowsReturned, String code, EntityLinkerProperties properties) throws SQLException, Exception {
-    cs.setInt(2, matchthresh);
+    cs.setInt(2, rowsReturned);
-      cs.setString(3, CountryContext.getCountryCodeCSV(countryCodes));
+      cs.setString(3, code);
-      //database stored procedure handles empty string
-        //ufi      
-//latitude, 
-//longitude, 
-//cc1,
-//adm1, 
-//dsg,
-//SHORT_FORM ,
-//	SORT_NAME_RO ,
-//	FULL_NAME_RO ,
-//	FULL_NAME_ND_RO ,
-//	SORT_NAME_RG ,
-//	FULL_NAME_RG ,
-//	FULL_NAME_ND_RG ,
-
-        s.getScoreMap().put("mysqlfulltext", s.getRank());
+        s.getScoreMap().put("dbfulltext", s.getRank());

UPD83 INS29 INS65 INS65 INS65 INS65 INS65 INS65 INS65 UPD42 MOV43 UPD42 MOV43 MOV43 MOV43 MOV43 INS42 INS66 INS42 INS66 INS42 INS66 INS42 INS66 INS66 INS42 INS42 INS70 UPD42 INS44 MOV32 INS8 UPD45 UPD45 UPD45 UPD45 INS43 INS42 MOV21 UPD42 MOV42 UPD45 INS42 UPD45 INS42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32