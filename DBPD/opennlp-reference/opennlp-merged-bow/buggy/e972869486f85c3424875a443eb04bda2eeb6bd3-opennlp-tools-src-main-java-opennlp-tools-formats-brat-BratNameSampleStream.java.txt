OPENNLP-1079 Added BratDocumentParser. Closed Annotation stream in
BratDocument
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import opennlp.tools.util.Span;
-  private SentenceDetector sentDetector;
-  private Tokenizer tokenizer;
+  private final BratDocumentParser parser;
-    this.sentDetector = sentDetector;
-    this.tokenizer = tokenizer;
+    this.parser = new BratDocumentParser(sentDetector, tokenizer);
-    this.sentDetector = new SentenceDetectorME(sentModel);
-    this.tokenizer = new TokenizerME(tokenModel);
+    this.parser = new BratDocumentParser(new SentenceDetectorME(sentModel), new TokenizerME(tokenModel)); 
-
-    // Note: Some entities might not match sentence boundaries,
-    // to be able to print warning a set of entities id must be maintained
-    // to check if all entities have been used up after the matching is done
-
-    Set<String> entityIdSet = new HashSet<>();
-    Map<Integer, Span> coveredIndexes = new HashMap<>();
-
-    for (BratAnnotation ann : sample.getAnnotations()) {
-      if (ann instanceof SpanAnnotation) {
-        entityIdSet.add(ann.getId());
-
-        Span span = ((SpanAnnotation) ann).getSpan();
-        for (int i = span.getStart(); i < span.getEnd(); i++) {
-          coveredIndexes.put(i, span);
-        }
-      }
-    }
-
-    List<Span> sentences = new ArrayList<>();
-    for (Span sentence : sentDetector.sentPosDetect(sample.getText())) {
-      Span conflictingName = coveredIndexes.get(sentence.getStart());
-
-      if (sentences.size() > 0 && conflictingName != null &&
-          conflictingName.getStart() < sentence.getStart()) {
-        Span lastSentence = sentences.remove(sentences.size() - 1);
-        sentences.add(new Span(lastSentence.getStart(), sentence.getEnd()));
-
-        System.out.println("Correcting sentence segmentation in document " +
-            sample.getId());
-      }
-      else {
-        sentences.add(sentence);
-      }
-    }
-
-    // TODO: Token breaks should be enforced on name span boundaries
-    // a) Just split tokens
-    // b) Implement a custom token split validator which can be injected into the Tokenizer
-
-    // Currently we are missing all
-
-    List<NameSample> samples = new ArrayList<>(sentences.size());
-
-    for (Span sentence : sentences) {
-
-      String sentenceText = sentence.getCoveredText(
-          sample.getText()).toString();
-
-      Span[] tokens = tokenizer.tokenizePos(sentenceText);
-
-      // Note:
-      // A begin and end token index can be identical, but map to different
-      // tokens, to distinguish between between the two begin indexes are
-      // stored with a negative sign, and end indexes are stored with a positive sign
-      // in the tokenIndexMap.
-      // The tokenIndexMap maps to the sentence local token index.
-
-      Map<Integer, Integer> tokenIndexMap = new HashMap<>();
-
-      for (int i = 0; i < tokens.length; i++) {
-        tokenIndexMap.put(-(sentence.getStart() + tokens[i].getStart()), i);
-        tokenIndexMap.put(sentence.getStart() + tokens[i].getEnd(), i + 1);
-      }
-
-      List<Span> names = new ArrayList<>();
-
-      for (BratAnnotation ann : sample.getAnnotations()) {
-
-        if (ann instanceof SpanAnnotation) {
-          SpanAnnotation entity = (SpanAnnotation) ann;
-
-          Span entitySpan = entity.getSpan();
-
-          if (sentence.contains(entitySpan)) {
-            entityIdSet.remove(ann.getId());
-
-            entitySpan = entitySpan.trim(sample.getText());
-
-            Integer nameBeginIndex = tokenIndexMap.get(-entitySpan.getStart());
-            Integer nameEndIndex = tokenIndexMap.get(entitySpan.getEnd());
-
-            if (nameBeginIndex != null && nameEndIndex != null) {
-              names.add(new Span(nameBeginIndex, nameEndIndex, entity.getType()));
-            }
-            else {
-              System.err.println("Dropped entity " + entity.getId() + " ("
-                  + entitySpan.getCoveredText(sample.getText()) + ") " + " in document "
-                  + sample.getId() + ", it is not matching tokenization!");
-            }
-          }
-        }
-      }
-
-      samples.add(new NameSample(sample.getId(), Span.spansToStrings(tokens, sentenceText),
-          names.toArray(new Span[names.size()]), null, samples.size() == 0));
-    }
-
-    for (String id : entityIdSet) {
-      System.err.println("Dropped entity " + id + " in document " +
-          sample.getId() + ", is not matching sentence segmentation!");
-    }
-
-    return samples;
+    return parser.parse(sample);

INS23 MOV83 UPD83 MOV83 UPD43 MOV43 MOV59 INS8 UPD42 UPD42 INS41 INS32 INS14 INS14 UPD42 MOV42 UPD42 MOV42 MOV42 UPD42 INS43 INS42 INS42 UPD42 INS43 MOV14 MOV14 INS42 INS42 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL40 DEL26 DEL42 DEL43 DEL42 DEL59 DEL23 DEL23 DEL52 DEL42 DEL22 DEL42 DEL7 DEL21 DEL42 DEL52 DEL42 DEL22 DEL7 DEL21 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL36 DEL42 DEL32 DEL59 DEL60 DEL39 DEL42 DEL42 DEL42 DEL32 DEL59 DEL58 DEL42 DEL42 DEL42 DEL32 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL24 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL42 DEL32 DEL34 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL27 DEL27 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL34 DEL27 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL40 DEL42 DEL45 DEL42 DEL42 DEL32 DEL27 DEL32 DEL21 DEL8 DEL42 DEL42 DEL42 DEL32 DEL21 DEL8 DEL25 DEL8 DEL70 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL42 DEL42 DEL32 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL39 DEL42 DEL34 DEL59 DEL58 DEL42 DEL40 DEL27 DEL42 DEL37 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL27 DEL36 DEL38 DEL42 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL2 DEL42 DEL32 DEL27 DEL42 DEL34 DEL27 DEL32 DEL21 DEL8 DEL24 DEL42 DEL43 DEL42 DEL43 DEL74 DEL42 DEL42 DEL43 DEL74 DEL14 DEL59 DEL60 DEL42 DEL43 DEL42 DEL44 DEL42 DEL42 DEL32 DEL42 DEL42 DEL43 DEL62 DEL42 DEL43 DEL42 DEL42 DEL43 DEL42 DEL11 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL32 DEL59 DEL60 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL21 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL7 DEL21 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL38 DEL32 DEL59 DEL60 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL42 DEL32 DEL32 DEL59 DEL60 DEL42 DEL33 DEL27 DEL42 DEL33 DEL27 DEL27 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL42 DEL42 DEL32 DEL14 DEL32 DEL21 DEL8 DEL40 DEL45 DEL42 DEL42 DEL32 DEL45 DEL42 DEL42 DEL42 DEL32 DEL32 DEL45 DEL45 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL25 DEL8 DEL25 DEL8 DEL25 DEL8 DEL70 DEL42 DEL42 DEL42 DEL43 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL42 DEL32 DEL42 DEL42 DEL42 DEL43 DEL85 DEL5 DEL42 DEL42 DEL32 DEL3 DEL32 DEL33 DEL42 DEL42 DEL32 DEL34 DEL27 DEL14 DEL32 DEL21 DEL8 DEL70 DEL42 DEL43 DEL42 DEL44 DEL42 DEL40 DEL42 DEL45 DEL42 DEL45 DEL42 DEL42 DEL32 DEL45 DEL27 DEL32 DEL21 DEL8 DEL70 DEL42 DEL41 DEL8