OPENNLP-581 Deprecated TrainUtil methods and removed duplicated references to constants. Moved the isValid method to TrainerFactory, updated it to work with class names and created a junit test to validate it.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1521519 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.ArrayList;
-import java.util.List;
+  
+  public static boolean isValid(Map<String, String> trainParams) {
+
+    // TODO: Need to validate all parameters correctly ... error prone?!
+    
+    String algorithmName = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
+    
+    // to check the algorithm we verify if it is a built in trainer, or if we can instantiate
+    // one if it is a class name
+    
+    if (algorithmName != null && 
+        !(BUILTIN_TRAINERS.containsKey(algorithmName) || canLoadTrainer(algorithmName))) {
+      return false;
+    }
+
+    try {
+      String cutoffString = trainParams.get(AbstractTrainer.CUTOFF_PARAM);
+      if (cutoffString != null) Integer.parseInt(cutoffString);
+      
+      String iterationsString = trainParams.get(AbstractTrainer.ITERATIONS_PARAM);
+      if (iterationsString != null) Integer.parseInt(iterationsString);
+    }
+    catch (NumberFormatException e) {
+      return false;
+    }
+    
+    String dataIndexer = trainParams.get(AbstractEventTrainer.DATA_INDEXER_PARAM);
+    
+    if (dataIndexer != null) {
+      if (!(AbstractEventTrainer.DATA_INDEXER_ONE_PASS_VALUE.equals(dataIndexer) 
+          || AbstractEventTrainer.DATA_INDEXER_TWO_PASS_VALUE.equals(dataIndexer))) {
+        return false;
+      }
+    }
+    
+    // TODO: Check data indexing ... 
+     
+    return true;
+  }
+
+  private static boolean canLoadTrainer(String className) {
+    try {
+      Class<?> trainerClass = Class.forName(className);
+      if(trainerClass != null &&
+          (EventTrainer.class.isAssignableFrom(trainerClass)
+              || SequenceTrainer.class.isAssignableFrom(trainerClass))) {
+        return true;
+      }
+    } catch (ClassNotFoundException e) {
+      // fail
+    }
+    return false;
+  }
+      
