OPENNLP-641 Added new method to detect the trainer type to Trainer Factory and updated Name Finder ME to use it

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1563002 13f79535-47bb-0310-9956-ffa450edef68

+// TODO: Another issue is that certain trainers will have certain properties,
+// the code using the trainer should have the possibilites to get these properties
+// in our case this could be communicated via the trainer interface itself!
+// For example via property methods.
+
+// 
+
+  public enum TrainerType {
+    EVENT_MODEL_TRAINER,
+    EVENT_MODEL_SEQUENCE_TRAINER,
+    SEQUENCE_TRAINER
+  }
+  
+  @Deprecated
-  // Note: A better way to indicate which training approach is necessary would be
-  // to use an enum which encodes the different possibilities ...
+  /**
+   * Determines the trainer type based on the ALGORITHM_PARAM value.
+   * 
+   * @param trainParams
+   * @return the trainer type or null if type couldn't be determined.
+   */
+  public static TrainerType getTrainerType(Map<String, String> trainParams){
+
+    String alogrithmValue = trainParams.get(AbstractTrainer.ALGORITHM_PARAM); 
+    
+    // Check if it is defaulting to the MAXENT trainer
+    if (alogrithmValue == null) {
+      return TrainerType.EVENT_MODEL_TRAINER;
+    }
+    
+    Class<?> trainerClass = BUILTIN_TRAINERS.get(alogrithmValue);
+    
+    // TODO: This will not work in an OSGi environment!
+    if (trainerClass == null) {
+      try {
+        trainerClass = Class.forName(alogrithmValue);
+      } catch (ClassNotFoundException e) {
+      }
+    }
+    
+    if(trainerClass != null) {
+      
+      if (EventTrainer.class.isAssignableFrom(trainerClass)) {
+        return TrainerType.EVENT_MODEL_TRAINER;
+      }
+      else if (EventModelSequenceTrainer.class.isAssignableFrom(trainerClass)) {
+        return TrainerType.EVENT_MODEL_SEQUENCE_TRAINER;
+      }
+      else if (SequenceTrainer.class.isAssignableFrom(trainerClass)) {
+        return TrainerType.SEQUENCE_TRAINER;
+      }
+    }
+    
+    return null;
+  }
+  /**
+   * @deprecated use getTrainerType instead!
+   */
+  @Deprecated
+  /**
+   * @deprecated use getTrainerType instead!
+   */
+  /**
+   * @deprecated use getTrainerType instead!
+   */
+  @Deprecated
+  /**
+   * @deprecated use getTrainerType instead!
+   */
+  @Deprecated
-   * This method is deprecated and should not be used! <br>
-   * Use {@link TrainerFactory#isSupportEventModelSequenceTraining(Map)} instead.
-   * 
-   * @param trainParams
-   * @return
+   * @deprecated use getTrainerType instead!
-    String trainerType = getTrainerType(trainParams);
+    String trainerType = getTrainerTypeInt(trainParams);
+  public static EventModelSequenceTrainer getEventModelSequenceTrainer(Map<String, String> trainParams,
+      Map<String, String> reportMap) {
+    return getSequenceTrainer(trainParams, reportMap);
+  }
+  
+  @Deprecated
-    String trainerType = getTrainerType(trainParams);
+    String trainerType = getTrainerTypeInt(trainParams);
-    String trainerType = getTrainerType(trainParams);
+    String trainerType = getTrainerTypeInt(trainParams);
-  private static String getTrainerType(Map<String, String> trainParams) {
+  private static String getTrainerTypeInt(Map<String, String> trainParams) {
