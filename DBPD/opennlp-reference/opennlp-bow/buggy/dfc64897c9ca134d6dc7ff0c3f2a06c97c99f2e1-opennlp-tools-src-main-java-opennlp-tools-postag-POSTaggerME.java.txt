OPENNLP-175 Updated cmd line interface and added train methods to train with trainig parameters file/object

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1124372 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.model.TrainUtil;
+import opennlp.tools.util.TrainingParameters;
-  public static POSModel train(String languageCode, ObjectStream<POSSample> samples, ModelType modelType, POSDictionary tagDictionary,
-      Dictionary ngramDictionary, int cutoff, int iterations) throws IOException {
-
+  public static POSModel train(String languageCode, ObjectStream<POSSample> samples, TrainingParameters trainParams, 
+      POSDictionary tagDictionary, Dictionary ngramDictionary) throws IOException {
+    
-    AbstractModel posModel = null;
-    
-    ModelUtil.addCutoffAndIterations(manifestInfoEntries, cutoff, iterations);
+    // TODO: Store train params in model ... 
+//    ModelUtil.addCutoffAndIterations(manifestInfoEntries, cutoff, iterations);
-    if (modelType.equals(ModelType.MAXENT) ||
-        modelType.equals(ModelType.PERCEPTRON)) {
+    AbstractModel posModel;
+    
+    if (!TrainUtil.isSequenceTraining(trainParams.getSettings())) {
+      
-      if (modelType.equals(ModelType.MAXENT)) {
-        posModel = opennlp.maxent.GIS.trainModel(iterations,
-            new TwoPassDataIndexer(hses, cutoff));
-      }
-      else if (modelType.equals(ModelType.PERCEPTRON)) {
-        boolean useAverage = true;
-
-        posModel = new opennlp.perceptron.PerceptronTrainer().trainModel(
-            iterations, new TwoPassDataIndexer(hses,
-            cutoff, false), cutoff, useAverage);
-      }
-      else {
-        throw new IllegalStateException();
-      }
+      posModel = TrainUtil.train(hses, trainParams.getSettings());
-    else if (modelType.equals(ModelType.PERCEPTRON_SEQUENCE)) {
-      
-      POSSampleSequenceStream ss = new POSSampleSequenceStream(samples, contextGenerator);
-      boolean useAverage = true;
-      
-      posModel = new SimplePerceptronSequenceTrainer().trainModel(iterations, ss, cutoff,useAverage);
-    }
-      throw new IllegalStateException();
+      POSSampleSequenceStream ss = new POSSampleSequenceStream(samples, contextGenerator);
+
+      posModel = TrainUtil.train(ss, trainParams.getSettings());
+  
+  public static POSModel train(String languageCode, ObjectStream<POSSample> samples, ModelType modelType, POSDictionary tagDictionary,
+      Dictionary ngramDictionary, int cutoff, int iterations) throws IOException {
+
+    TrainingParameters params = new TrainingParameters(); 
+    
+    params.put(TrainingParameters.ALGORITHM_PARAM, modelType.toString());
+    params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(iterations));
+    params.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(cutoff));
+    
+    return train(languageCode, samples, params, tagDictionary, ngramDictionary);
+  }
