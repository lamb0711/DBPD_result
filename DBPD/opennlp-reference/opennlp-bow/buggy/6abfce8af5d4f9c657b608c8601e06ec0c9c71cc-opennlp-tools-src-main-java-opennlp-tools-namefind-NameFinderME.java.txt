OPENNLP-17 Added support for custom feature generator

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1127445 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import opennlp.tools.util.featuregen.FeatureGeneratorResourceProvider;
+import opennlp.tools.util.featuregen.GeneratorFactory;
-
-    if (generator != null) 
+    
+    // If generator is provided always use that one
+    if (generator != null) {
-    else
-      contextGenerator = new DefaultNameContextGenerator(createFeatureGenerator());
+    }
+    else {
+      // If model has a generator use that one, otherwise create default 
+      AdaptiveFeatureGenerator featureGenerator = model.createFeatureGenerators();
+      
+      if (featureGenerator == null)
+        featureGenerator = createFeatureGenerator();
+      
+      contextGenerator = new DefaultNameContextGenerator(featureGenerator);
+    }
+    * 
+    * 
-     return train(languageCode, type, samples, null, resources, iterations, cutoff);
+     return train(languageCode, type, samples, (AdaptiveFeatureGenerator) null, resources, iterations, cutoff);
+  
+   // TODO: How can cmd line tool create the resources map ?!
+   // Needs access to derserializers ...
+   public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples, 
+       byte[] generatorDescriptor, final Map<String, Object> resources, 
+       int iterations, int cutoff) throws IOException {
+     
+     // TODO: Pass in resource manager ...
+     
+     AdaptiveFeatureGenerator featureGenerator;
+     
+     if (generatorDescriptor != null) {
+       featureGenerator = GeneratorFactory.create(new ByteArrayInputStream(generatorDescriptor), new FeatureGeneratorResourceProvider() {
+        
+        public Object getResource(String key) {
+          return resources.get(key);
+        }
+      });
+     }
+     else {
+       featureGenerator = null;
+     }
+     
+     TokenNameFinderModel model = train(languageCode, type, samples, featureGenerator,
+         resources, iterations, cutoff);
+     
+     if (generatorDescriptor != null) {
+       model = model.updateFeatureGenerator(generatorDescriptor);
+     }
+     
+     return model;
+   }
+   
