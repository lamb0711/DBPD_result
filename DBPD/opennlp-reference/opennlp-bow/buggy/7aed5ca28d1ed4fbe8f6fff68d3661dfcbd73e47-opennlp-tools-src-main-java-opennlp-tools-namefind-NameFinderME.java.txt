OPENNLP-580 Added a factory to construct the name finder

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1576089 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.util.featuregen.FeatureGeneratorFactory;
-    this(model, DEFAULT_BEAM_SIZE);
+    
+    TokenNameFinderFactory factory = model.getFactory();
+    
+    seqCodec = factory.createSequenceCodec();
+    sequenceValidator = seqCodec.createSequenceValidator();
+    this.model = model.getNameFinderSequenceModel();
+    contextGenerator = factory.createContextGenerator();
+    
+    // TODO: We should deprecate this. And come up with a better solution!
+    contextGenerator.addFeatureGenerator(
+          new WindowFeatureGenerator(additionalContextFeatureGenerator, 8, 8));
+   * 
+   * @deprecated Use {@link #NameFinderME(TokenNameFinderModel)} instead and use
+   * the {@link TokenNameFinderFactory} to configure it.
-    seqCodec = model.createSequenceCodec();
+    seqCodec = model.getFactory().createSequenceCodec();
-
-    // TODO: How to combine different sequence validators ?!
-    
-    this.sequenceValidator = seqCodec.createSequenceValidator();
-  private static AdaptiveFeatureGenerator createFeatureGenerator() {
+  static AdaptiveFeatureGenerator createFeatureGenerator() {
+   public static TokenNameFinderModel train(String languageCode, String type, 
+       ObjectStream<NameSample> samples, TrainingParameters trainParams,
+       TokenNameFinderFactory factory) throws IOException {
+     String beamSizeString = trainParams.getSettings().get(BeamSearch.BEAM_SIZE_PARAMETER);
+     
+     int beamSize = NameFinderME.DEFAULT_BEAM_SIZE;
+     if (beamSizeString != null) {
+       beamSize = Integer.parseInt(beamSizeString);
+     }
+     
+     Map<String, String> manifestInfoEntries = new HashMap<String, String>();
+
+     MaxentModel nameFinderModel = null;
+     
+     SequenceClassificationModel<String> seqModel = null;
+     
+     TrainerType trainerType = TrainerFactory.getTrainerType(trainParams.getSettings());
+     
+     if (TrainerType.EVENT_MODEL_TRAINER.equals(trainerType)) {
+       ObjectStream<Event> eventStream = new NameFinderEventStream(samples, type,
+           factory.createContextGenerator(), factory.createSequenceCodec());
+
+       EventTrainer trainer = TrainerFactory.getEventTrainer(trainParams.getSettings(), manifestInfoEntries);
+       nameFinderModel = trainer.train(eventStream);
+     }
+     // TODO: Maybe it is not a good idea, that these two don't use the context generator ?!
+     // These also don't use the sequence codec ?!
+     else if (TrainerType.EVENT_MODEL_SEQUENCE_TRAINER.equals(trainerType)) {
+       NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, factory.createContextGenerator());
+
+       EventModelSequenceTrainer trainer = TrainerFactory.getEventModelSequenceTrainer(
+           trainParams.getSettings(), manifestInfoEntries);
+       nameFinderModel = trainer.train(ss);
+     }
+     else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
+       SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
+           trainParams.getSettings(), manifestInfoEntries);
+       
+       NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, factory.createContextGenerator(), false);
+       seqModel = trainer.train(ss);
+     }
+     else {
+       throw new IllegalStateException("Unexpected trainer type!");
+     }
+     
+     if (seqModel != null) {
+       return new TokenNameFinderModel(languageCode, seqModel, null,
+           factory.getResources(), manifestInfoEntries, factory.getSequenceCodec());
+     }
+     else {
+       return new TokenNameFinderModel(languageCode, nameFinderModel, beamSize, null,
+           factory.getResources(), manifestInfoEntries, factory.getSequenceCodec());
+     }
+   }
+   
+    * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
+   @Deprecated
-       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources,
-       SequenceCodec<String> seqCodec) throws IOException {
+       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources)
+           throws IOException {
+     
+     if (languageCode == null) {
+       throw new IllegalArgumentException("languageCode must not be null!");
+     }
-     if (languageCode == null) {
-       throw new IllegalArgumentException("languageCode must not be null!");
-     }
-           new DefaultNameContextGenerator(featureGenerator), seqCodec);
+           new DefaultNameContextGenerator(featureGenerator), new BioCodec());
-           resources, manifestInfoEntries, seqCodec);
+           resources, manifestInfoEntries, new BioCodec());
-           resources, manifestInfoEntries, seqCodec);
+           resources, manifestInfoEntries, new BioCodec());
-
-   public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples,
-       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources) throws IOException {
-     return train(languageCode, type, samples, trainParams, generator, resources, new BioCodec());
-   }
+   * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
+   @Deprecated
-      byte[] featureGeneratorBytes, final Map<String, Object> resources, SequenceCodec<String> seqCodec)
+      byte[] featureGeneratorBytes, final Map<String, Object> resources,
+      TokenNameFinderFactory factory)
-        createFeatureGenerator(featureGeneratorBytes, resources), resources, seqCodec);
+        createFeatureGenerator(featureGeneratorBytes, resources), resources);
+   /**
+    * 
+    * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
+    */
+   @Deprecated
-    return train(languageCode, type, samples, trainParams, featureGeneratorBytes,
-        resources, new BioCodec());
+    return train(languageCode, type, samples, trainParams, featureGeneratorBytes, resources);
+   /**
+    * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
+    */
+   @Deprecated
-
