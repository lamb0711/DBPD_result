OPENNLP-923: Wrap all lines longer than 110 chars

And also add checkstyle enforcement

-   * Creates punctuation feature for the specified punctuation at the specified index based on the punctuation mark.
+   * Creates punctuation feature for the specified punctuation at the specified index
+   * based on the punctuation mark.
-   * Creates punctuation feature for the specified punctuation at the specfied index based on the punctuation's tag.
+   * Creates punctuation feature for the specified punctuation at the specfied index
+   * based on the punctuation's tag.
-   * @param bigram1 Specifies whether lexical bi-gram features between the first and second node should be generated.
-   * @param bigram2 Specifies whether lexical bi-gram features between the second and third node should be generated.
+   * @param bigram1 Specifies whether lexical bi-gram features between the first and second
+   *                node should be generated.
+   * @param bigram2 Specifies whether lexical bi-gram features between the second and third
+   *                node should be generated.
-            if (trigram) features.add(c0.cons   + "," + punctbo1 + "," + c1.cons   + "," + punctbo2 + "," + c2.cons);
+            if (trigram)
+              features.add(c0.cons + "," + punctbo1 + "," + c1.cons + "," + punctbo2 + "," + c2.cons);
-            if (bigram2) features.add(c0.consbo + "," + punctbo1 + "," + c1.cons   + "," + punctbo2 + "," + c2.cons);
-            if (c0.unigram && c2.unigram) features.add(c0.cons + "," + punctbo1 + "," + c1.consbo + "," + punctbo2 + "," + c2.cons);
-            if (bigram1) features.add(c0.cons + "," + punctbo1 + "," + c1.cons + "," + punctbo2 + ","  + c2.consbo);
+            if (bigram2)
+              features.add(c0.consbo + "," + punctbo1 + "," + c1.cons   + "," + punctbo2 + "," + c2.cons);
+            if (c0.unigram && c2.unigram)
+              features.add(c0.cons + "," + punctbo1 + "," + c1.consbo + "," + punctbo2 + "," + c2.cons);
+            if (bigram1)
+              features.add(c0.cons + "," + punctbo1 + "," + c1.cons + "," + punctbo2 + ","  + c2.consbo);
-            if (c2.unigram) features.add(c0.consbo + "," + punctbo1 + "," + c1.consbo + "," + punctbo2 + "," + c2.cons);
-            if (c1.unigram) features.add(c0.consbo + "," + punctbo1 + "," + c1.cons   + "," + punctbo2 + "," + c2.consbo);
-            if (c0.unigram) features.add(c0.cons   + "," + punctbo1 + "," + c1.consbo + "," + punctbo2 + "," + c2.consbo);
+            if (c2.unigram)
+              features.add(c0.consbo + "," + punctbo1 + "," + c1.consbo + "," + punctbo2 + "," + c2.cons);
+            if (c1.unigram)
+              features.add(c0.consbo + "," + punctbo1 + "," + c1.cons   + "," + punctbo2 + "," + c2.consbo);
+            if (c0.unigram)
+              features.add(c0.cons   + "," + punctbo1 + "," + c1.consbo + "," + punctbo2 + "," + c2.consbo);
+
-          if (bigram2) features.add(c0.consbo + "," + c1.cons   + ","  + punctbo2 + "," + c2.cons);
-          if (c0.unigram && c2.unigram) features.add(c0.cons    + "," + c1.consbo + "," + punctbo2 + "," + c2.cons);
+          if (bigram2)
+            features.add(c0.consbo + "," + c1.cons   + ","  + punctbo2 + "," + c2.cons);
+          if (c0.unigram && c2.unigram)
+            features.add(c0.cons    + "," + c1.consbo + "," + punctbo2 + "," + c2.cons);
-          if (trigram) features.add(c0.cons + "," + punctbo1 + "," + c1.cons + "," + c2.cons);
+          if (trigram)
+            features.add(c0.cons + "," + punctbo1 + "," + c1.cons + "," + c2.cons);
-          if (bigram2) features.add(c0.consbo + "," + punctbo1 + "," + c1.cons + "," + c2.cons);
-          if (c0.unigram && c2.unigram) features.add(c0.cons + "," + punctbo1 + "," + c1.consbo + "," + c2.cons);
-          if (bigram1) features.add(c0.cons + "," + punctbo1   + "," + c1.cons + "," + c2.consbo);
+          if (bigram2)
+            features.add(c0.consbo + "," + punctbo1 + "," + c1.cons + "," + c2.cons);
+          if (c0.unigram && c2.unigram)
+            features.add(c0.cons + "," + punctbo1 + "," + c1.consbo + "," + c2.cons);
+          if (bigram1)
+            features.add(c0.cons + "," + punctbo1   + "," + c1.cons + "," + c2.consbo);
-          if (c2.unigram) features.add(c0.consbo + "," + punctbo1 + "," + c1.consbo + "," + c2.cons);
-          if (c1.unigram) features.add(c0.consbo + "," + punctbo1 + "," + c1.cons   + "," + c2.consbo);
-          if (c0.unigram) features.add(c0.cons + "," + punctbo1 + "," + c1.consbo + "," + c2.consbo);
+          if (c2.unigram)
+            features.add(c0.consbo + "," + punctbo1 + "," + c1.consbo + "," + c2.cons);
+          if (c1.unigram)
+            features.add(c0.consbo + "," + punctbo1 + "," + c1.cons   + "," + c2.consbo);
+          if (c0.unigram)
+            features.add(c0.cons + "," + punctbo1 + "," + c1.consbo + "," + c2.consbo);
-  protected void surround(Parse node, int i, String type, Collection<Parse> punctuation, List<String> features) {
+  protected void surround(Parse node, int i, String type, Collection<Parse> punctuation,
+      List<String> features) {
-          feat.append(node.getHead().getCoveredText()).append("|").append(type).append("|").append(node.getType()).append("|").append(punct.getType());
+          feat.append(node.getHead().getCoveredText()).append("|").append(type)
+              .append("|").append(node.getType()).append("|").append(punct.getType());
-        feat.append(node.getHead().getCoveredText()).append("|").append(type).append("|").append(node.getType());
+        feat.append(node.getHead().getCoveredText()).append("|").append(type)
+            .append("|").append(node.getType());
-    feat.append("c").append(i).append("=").append(child.getType()).append("|").append(child.getHead().getCoveredText()).append("|").append(type);
+    feat.append("c").append(i).append("=").append(child.getType()).append("|")
+        .append(child.getHead().getCoveredText()).append("|").append(type);
-    feat.append("cil=").append(type).append(",").append(p1.getType()).append("|").append(p1.getHead().getCoveredText()).append(",").append(p2.getType()).append("|").append(p2.getHead().getCoveredText());
+    feat.append("cil=").append(type).append(",").append(p1.getType()).append("|")
+        .append(p1.getHead().getCoveredText()).append(",").append(p2.getType())
+        .append("|").append(p2.getHead().getCoveredText());
-    feat.append("ci*l=").append(type).append(",").append(p1.getType()).append(",").append(p2.getType()).append("|").append(p2.getHead().getCoveredText());
+    feat.append("ci*l=").append(type).append(",").append(p1.getType()).append(",")
+        .append(p2.getType()).append("|").append(p2.getHead().getCoveredText());
-    feat.append("cil*=").append(type).append(",").append(p1.getType()).append("|").append(p1.getHead().getCoveredText()).append(",").append(p2.getType());
+    feat.append("cil*=").append(type).append(",").append(p1.getType()).append("|")
+        .append(p1.getHead().getCoveredText()).append(",").append(p2.getType());
-    feat.append("ci*l*=").append(type).append(",").append(p1.getType()).append(",").append(p2.getType());
+    feat.append("ci*l*=").append(type).append(",").append(p1.getType())
+        .append(",").append(p2.getType());
