OPENNLP-337 Fixed import, removed main method and removed dependency on Lucenes ArrayUtils.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1305254 13f79535-47bb-0310-9956-ffa450edef68

-package org.apache.lucene.analysis.en;
+package opennlp.tools.stemmer;
-/**
+/*
- * the License.  You may obtain a copy of the License at
+ * the License. You may obtain a copy of the License at
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.FileInputStream;
-
-import static org.apache.lucene.util.RamUsageEstimator.NUM_BYTES_CHAR;
-import org.apache.lucene.util.ArrayUtil;
-
-class PorterStemmer
-{
+class PorterStemmer implements Stemmer {
-  private static final int INITIAL_SIZE = 50;
-
+  private static final int INC = 50;
+  
-    b = new char[INITIAL_SIZE];
+    b = new char[INC];
-    if (b.length <= i) {
-      b = ArrayUtil.grow(b, i+1);
+    if (b.length == i) {
+      
+      char[] new_b = new char[i+INC];
+      for (int c = 0; c < i; c++) new_b[c] = b[c]; {
+        b = new_b;
+      }
+  /**
+   * Stem a word provided as a CharSequence.
+   * Returns the result as a CharSequence.
+   */
+  public CharSequence stem(CharSequence word) {
+    return stem(word.toString());
+  }
+  
-      b = new char[ArrayUtil.oversize(wordLen, NUM_BYTES_CHAR)];
+      b = new char[wordLen - offset];
-
-  /** Test program for demonstrating the Stemmer.  It reads a file and
-   * stems each word, writing the result to standard out.
-   * Usage: Stemmer file-name
-   */
-  public static void main(String[] args) {
-    PorterStemmer s = new PorterStemmer();
-
-    for (int i = 0; i < args.length; i++) {
-      try {
-        InputStream in = new FileInputStream(args[i]);
-        byte[] buffer = new byte[1024];
-        int bufferLen, offset, ch;
-
-        bufferLen = in.read(buffer);
-        offset = 0;
-        s.reset();
-
-        while(true) {
-          if (offset < bufferLen)
-            ch = buffer[offset++];
-          else {
-            bufferLen = in.read(buffer);
-            offset = 0;
-            if (bufferLen < 0)
-              ch = -1;
-            else
-              ch = buffer[offset++];
-          }
-
-          if (Character.isLetter((char) ch)) {
-            s.add(Character.toLowerCase((char) ch));
-          }
-          else {
-             s.stem();
-             System.out.print(s.toString());
-             s.reset();
-             if (ch < 0)
-               break;
-             else {
-               System.out.print((char) ch);
-             }
-           }
-        }
-
-        in.close();
-      }
-      catch (IOException e) {
-        System.out.println("error reading " + args[i]);
-      }
-    }
-  }
