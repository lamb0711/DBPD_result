OPENNLP-1118: Adds data verification for eval tests.

+import java.math.BigInteger;
+import org.junit.BeforeClass;
-public class ConllXPosTaggerEval {
+public class ConllXPosTaggerEval extends AbstractEvalTest {
-  private static POSModel train(File trainFile, String lang,
+  private POSModel train(File trainFile, String lang,
-  private static void eval(POSModel model, File testData,
+  private void eval(POSModel model, File testData,
+  @BeforeClass
+  public static void verifyTrainingData() throws Exception {
+    
+    verifyTrainingData(new ConllXPOSSampleStream(
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+          "conllx/data/danish/ddt/train/danish_ddt_train.conll")), StandardCharsets.UTF_8), 
+        new BigInteger("30795670444498617202001550516753630016"));
+    
+    verifyTrainingData(new ConllXPOSSampleStream(
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+          "conllx/data/danish/ddt/test/danish_ddt_test.conll")), StandardCharsets.UTF_8), 
+            new BigInteger("314104267846430512372780024568104131337"));
+    
+    verifyTrainingData(new ConllXPOSSampleStream(
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+          "conllx/data/dutch/alpino/train/dutch_alpino_train.conll")), StandardCharsets.UTF_8), 
+            new BigInteger("109328245573060521952850454797286933887"));
+
+    verifyTrainingData(new ConllXPOSSampleStream(
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+          "conllx/data/dutch/alpino/test/dutch_alpino_test.conll")), StandardCharsets.UTF_8), 
+            new BigInteger("132343141132816640849897155456916243039"));
+
+    verifyTrainingData(new ConllXPOSSampleStream(
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+          "conllx/data/portuguese/bosque/treebank/portuguese_bosque_train.conll")), StandardCharsets.UTF_8), 
+            new BigInteger("9504382474772307801979515927230835901"));
+
+    verifyTrainingData(new ConllXPOSSampleStream(
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+          "conllx/data/swedish/talbanken05/train/swedish_talbanken05_train.conll")), StandardCharsets.UTF_8), 
+            new BigInteger("175256039869578311901318972681191182910"));
+
+    verifyTrainingData(new ConllXPOSSampleStream(
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+          "conllx/data/swedish/talbanken05/test/swedish_talbanken05_test.conll")), StandardCharsets.UTF_8), 
+            new BigInteger("128378790384268106811747599235147991544"));
+    
+  }
+
-    POSModel maxentModel = train(new File(EvalUtil.getOpennlpDataDir(),
+    POSModel maxentModel = train(new File(getOpennlpDataDir(),
-    eval(maxentModel, new File(EvalUtil.getOpennlpDataDir(),
+    eval(maxentModel, new File(getOpennlpDataDir(),
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    POSModel maxentModel = train(new File(EvalUtil.getOpennlpDataDir(),
+    POSModel maxentModel = train(new File(getOpennlpDataDir(),
-    eval(maxentModel, new File(EvalUtil.getOpennlpDataDir(),
+    eval(maxentModel, new File(getOpennlpDataDir(),
-    POSModel maxentModel = train(new File(EvalUtil.getOpennlpDataDir(),
+    POSModel maxentModel = train(new File(getOpennlpDataDir(),
-    eval(maxentModel, new File(EvalUtil.getOpennlpDataDir(),
+    eval(maxentModel, new File(getOpennlpDataDir(),
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    POSModel maxentModel = train(new File(EvalUtil.getOpennlpDataDir(),
+    POSModel maxentModel = train(new File(getOpennlpDataDir(),
-    eval(maxentModel, new File(EvalUtil.getOpennlpDataDir(),
+    eval(maxentModel, new File(getOpennlpDataDir(),
-    POSModel maxentModel = train(new File(EvalUtil.getOpennlpDataDir(),
+    POSModel maxentModel = train(new File(getOpennlpDataDir(),
-    eval(maxentModel, new File(EvalUtil.getOpennlpDataDir(),
+    eval(maxentModel, new File(getOpennlpDataDir(),
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    POSModel maxentModel = train(new File(EvalUtil.getOpennlpDataDir(),
+    POSModel maxentModel = train(new File(getOpennlpDataDir(),
-    eval(maxentModel, new File(EvalUtil.getOpennlpDataDir(),
+    eval(maxentModel, new File(getOpennlpDataDir(),
-    POSModel maxentModel = train(new File(EvalUtil.getOpennlpDataDir(),
+    POSModel maxentModel = train(new File(getOpennlpDataDir(),
-    eval(maxentModel, new File(EvalUtil.getOpennlpDataDir(),
+    eval(maxentModel, new File(getOpennlpDataDir(),
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    POSModel maxentModel = train(new File(EvalUtil.getOpennlpDataDir(),
+    POSModel maxentModel = train(new File(getOpennlpDataDir(),
-    eval(maxentModel, new File(EvalUtil.getOpennlpDataDir(),
+    eval(maxentModel, new File(getOpennlpDataDir(),
