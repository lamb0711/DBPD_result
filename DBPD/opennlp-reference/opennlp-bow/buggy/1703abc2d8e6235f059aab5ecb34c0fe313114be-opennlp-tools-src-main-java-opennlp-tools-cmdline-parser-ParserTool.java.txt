OPENNLP-600
Changed to MockInputStreamFactory everywhere except where a reader was being used in the PlainTextBylineStream constructor

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1564379 13f79535-47bb-0310-9956-ffa450edef68

-
+import opennlp.tools.util.MockInputStreamFactory;
-  
-  public String getHelp() {
-    return "Usage: " + CLI.CMD + " " + getName() + " [-bs n -ap n -k n] model < sentences \n" +
-        "-bs n: Use a beam size of n.\n" +
-        "-ap f: Advance outcomes in with at least f% of the probability mass.\n" + 
-        "-k n: Show the top n parses.  This will also display their log-probablities.";
-  }
+  public String getHelp() {
+    return "Usage: " + CLI.CMD + " " + getName() + " [-bs n -ap n -k n] model < sentences \n"
+            + "-bs n: Use a beam size of n.\n"
+            + "-ap f: Advance outcomes in with at least f% of the probability mass.\n"
+            + "-k n: Show the top n parses.  This will also display their log-probablities.";
+  }
-    int i=0;
-    for (Iterator<String> ti = tokens.iterator(); ti.hasNext();i++) {
+    int i = 0;
+    for (Iterator<String> ti = tokens.iterator(); ti.hasNext(); i++) {
-      p.insert(new Parse(text, new Span(start, start + tok.length()), AbstractBottomUpParser.TOK_NODE, 0,i));
+      p.insert(new Parse(text, new Span(start, start + tok.length()), AbstractBottomUpParser.TOK_NODE, 0, i));
-      parses = new Parse[] { parser.parse(p)};
-    }
-    else {
-      parses = parser.parse(p,numParses);
+      parses = new Parse[]{parser.parse(p)};
+    } else {
+      parses = parser.parse(p, numParses);
-  
+
-    
+
-    
+
-      if (beamSize == null)
-          beamSize = AbstractBottomUpParser.defaultBeamSize;
+      if (beamSize == null) {
+        beamSize = AbstractBottomUpParser.defaultBeamSize;
+      }
-      }
-      else {
+      } else {
-      if (advancePercentage == null)
+      if (advancePercentage == null) {
+      }
-          ParserFactory.create(model, beamSize, advancePercentage);
+              ParserFactory.create(model, beamSize, advancePercentage);
-      ObjectStream<String> lineStream =
-        new PlainTextByLineStream(new InputStreamReader(System.in));
-      PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
-      perfMon.start();
-
+      ObjectStream<String> lineStream = null;
+      PerformanceMonitor perfMon = null;
+        lineStream = new PlainTextByLineStream(new MockInputStreamFactory(System.in), "UTF-8");
+        perfMon = new PerformanceMonitor(System.err, "sent");
+        perfMon.start();
-          }
-          else {
+          } else {
-            for (int pi=0,pn=parses.length;pi<pn;pi++) {
+            for (int pi = 0, pn = parses.length; pi < pn; pi++) {
-                System.out.print(pi+" "+parses[pi].getProb()+" ");
+                System.out.print(pi + " " + parses[pi].getProb() + " ");
-      }
-      catch (IOException e) {
+      } catch (IOException e) {
