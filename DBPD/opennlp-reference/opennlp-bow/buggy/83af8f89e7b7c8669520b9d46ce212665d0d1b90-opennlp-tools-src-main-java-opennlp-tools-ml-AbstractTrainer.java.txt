OPENNLP-880: Refactor data indexer

1.) Added method to EventTrainer – train(DataIndexer indexer)
    –Then I added the method to AbstractEventTrainer.
    No other code needed to be changed.

2.) Created a new class – PluggableParmeters: Only AbstractTrainers
    had access to getXXXParam(Value,Default). So I pulled out this
    functionality into a separate class. Now both
    AbstractTrainers and AbstractDataIndexers can hold parameters.

3.) Refactored DataIndexer. This touched a lot of code.
    Added init(Map,Map) method and index(ObjectStream) method.
    Changed 1-Pass and 2-Pass DataIndexers. Everywhere 1-pass/2-pass
    indexers where created, I changed the constructor,
    and added the init and index methods.

4.) Changed GIS.doTrain(indexer) to use the parameters
    passed in the init method.

5.) QNTrainer – created a working init method. Changed the
    isValid method so it is not the init method.

This closes #14

-  private Map<String, String> trainParams;
-  private Map<String, String> reportMap;
+  public static final String VERBOSE_PARAM = "PrintMessages";
+  public static final boolean VERBOSE_DEFAULT = true;
+  
+  protected PluggableParameters parameters;
-    this.trainParams = trainParams;
-    this.reportMap = reportMap;
+    parameters = new PluggableParameters(trainParams, reportMap);
-    return getStringParam(ALGORITHM_PARAM, GIS.MAXENT_VALUE);
+    return parameters.getStringParam(ALGORITHM_PARAM, GIS.MAXENT_VALUE);
-    return getIntParam(CUTOFF_PARAM, CUTOFF_DEFAULT);
+    return parameters.getIntParam(CUTOFF_PARAM, CUTOFF_DEFAULT);
-    return getIntParam(ITERATIONS_PARAM, ITERATIONS_DEFAULT);
-  }
-
-  protected String getStringParam(String key, String defaultValue) {
-
-    String valueString = trainParams.get(key);
-
-    if (valueString == null)
-      valueString = defaultValue;
-
-    if (reportMap != null)
-      reportMap.put(key, valueString);
-
-    return valueString;
-  }
-
-  protected int getIntParam(String key, int defaultValue) {
-
-    String valueString = trainParams.get(key);
-
-    if (valueString != null)
-      return Integer.parseInt(valueString);
-    else
-      return defaultValue;
-  }
-
-  protected double getDoubleParam(String key, double defaultValue) {
-
-    String valueString = trainParams.get(key);
-
-    if (valueString != null)
-      return Double.parseDouble(valueString);
-    else
-      return defaultValue;
-  }
-
-  protected boolean getBooleanParam(String key, boolean defaultValue) {
-
-    String valueString = trainParams.get(key);
-
-    if (valueString != null)
-      return Boolean.parseBoolean(valueString);
-    else
-      return defaultValue;
-  }
-
-  protected void addToReport(String key, String value) {
-    if (reportMap != null) {
-      reportMap.put(key, value);
-    }
+    return parameters.getIntParam(ITERATIONS_PARAM, ITERATIONS_DEFAULT);
-      String cutoffString = trainParams.get(CUTOFF_PARAM);
-      if (cutoffString != null)
-        Integer.parseInt(cutoffString);
-
-      String iterationsString = trainParams.get(ITERATIONS_PARAM);
-      if (iterationsString != null)
-        Integer.parseInt(iterationsString);
+      parameters.getIntParam(CUTOFF_PARAM, CUTOFF_DEFAULT);
+      parameters.getIntParam(ITERATIONS_PARAM, ITERATIONS_DEFAULT);
+
+/**
+   * Use the PluggableParameters directly...
+   * @param key
+   * @param value
+   */
+  @Deprecated
+  protected String getStringParam(String key, String defaultValue) {
+    return parameters.getStringParam(key, defaultValue);
+  }
+
+  /**
+   * Use the PluggableParameters directly...
+   * @param key
+   * @param value
+   */
+  @Deprecated
+  protected int getIntParam(String key, int defaultValue) {
+    return parameters.getIntParam(key, defaultValue);
+  }
+  
+  /**
+   * Use the PluggableParameters directly...
+   * @param key
+   * @param value
+   */
+  @Deprecated
+  protected double getDoubleParam(String key, double defaultValue) {
+    return parameters.getDoubleParam(key, defaultValue);
+  }
+
+  /**
+   * Use the PluggableParameters directly...
+   * @param key
+   * @param value
+   */
+  @Deprecated
+  protected boolean getBooleanParam(String key, boolean defaultValue) {
+    return parameters.getBooleanParam(key, defaultValue);
+  }
+
+  /**
+   * Use the PluggableParameters directly...
+   * @param key
+   * @param value
+   */
+  @Deprecated
+  protected void addToReport(String key, String value) {
+    parameters.addToReport(key, value);
+  }
