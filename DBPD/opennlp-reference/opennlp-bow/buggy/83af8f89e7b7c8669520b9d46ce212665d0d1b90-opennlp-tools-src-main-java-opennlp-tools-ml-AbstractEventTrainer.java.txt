OPENNLP-880: Refactor data indexer

1.) Added method to EventTrainer – train(DataIndexer indexer)
    –Then I added the method to AbstractEventTrainer.
    No other code needed to be changed.

2.) Created a new class – PluggableParmeters: Only AbstractTrainers
    had access to getXXXParam(Value,Default). So I pulled out this
    functionality into a separate class. Now both
    AbstractTrainers and AbstractDataIndexers can hold parameters.

3.) Refactored DataIndexer. This touched a lot of code.
    Added init(Map,Map) method and index(ObjectStream) method.
    Changed 1-Pass and 2-Pass DataIndexers. Everywhere 1-pass/2-pass
    indexers where created, I changed the constructor,
    and added the init and index methods.

4.) Changed GIS.doTrain(indexer) to use the parameters
    passed in the init method.

5.) QNTrainer – created a working init method. Changed the
    isValid method so it is not the init method.

This closes #14

+import java.util.HashMap;
+import java.util.Map;
+import opennlp.tools.ml.model.AbstractDataIndexer;
-public abstract class AbstractEventTrainer extends AbstractTrainer implements
-    EventTrainer {
+public abstract class AbstractEventTrainer extends AbstractTrainer implements EventTrainer {
-    String dataIndexer = getStringParam(DATA_INDEXER_PARAM,
+    String dataIndexer = parameters.getStringParam(DATA_INDEXER_PARAM,
-    String dataIndexerName = getStringParam(DATA_INDEXER_PARAM,
+    String dataIndexerName = parameters.getStringParam(DATA_INDEXER_PARAM,
+    Map<String,String> indexParams = new HashMap<String, String>();
+    indexParams.put(AbstractDataIndexer.CUTOFF_PARAM, Integer.toString(getCutoff()));
+    indexParams.put(AbstractDataIndexer.SORT_PARAM, Boolean.toString(isSortAndMerge()));
-    int cutoff = getCutoff();
-    boolean sortAndMerge = isSortAndMerge();
-      indexer = new OnePassDataIndexer(events, cutoff, sortAndMerge);
+      indexer = new OnePassDataIndexer();
-      indexer = new TwoPassDataIndexer(events, cutoff, sortAndMerge);
+      indexer = new TwoPassDataIndexer();
+    indexer.init(indexParams, parameters.getReportMap());
+    indexer.index(events);
+  public final MaxentModel train(DataIndexer indexer) throws IOException {
+    if (!isValid()) {
+      throw new IllegalArgumentException("trainParams are not valid!");
+    }
+    MaxentModel model = doTrain(indexer);
+    parameters.addToReport(AbstractTrainer.TRAINER_TYPE_PARAM, EventTrainer.EVENT_VALUE);
+    return model;
+  }
+
-    MaxentModel model = doTrain(indexer);
-
-    addToReport("Training-Eventhash", hses.calculateHashSum().toString(16));
-    addToReport(AbstractTrainer.TRAINER_TYPE_PARAM, EventTrainer.EVENT_VALUE);
-    return model;
+    return train(indexer);
