OPENNLP-611
GeoHashBinScorer has java 1.7 dependant objects.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1536650 13f79535-47bb-0310-9956-ffa450edef68

-  GeoEntityScorer scorer = new GeoEntityScorer();
+  // CountryProximityScorer scorer = new CountryProximityScorer();
-  private Boolean filterCountryContext=true;
+  private Boolean filterCountryContext = true;
-  public List<LinkedSpan> find(String text, Span[] sentences, String[] tokens, Span[] names) {
+  @Override
+  public List<LinkedSpan> find(String doctext, Span[] sentences, String[][] tokensBySentence, Span[][] namesBySentence) {
-     
-        countryMentions = countryContext.regexfind(text, linkerProperties);
-      
+      countryMentions = countryContext.regexfind(doctext, linkerProperties);
-      String[] matches = Span.spansToStrings(names, tokens);
-      for (int i = 0; i < matches.length; i++) {
+
+      for (int s = 0; s < sentences.length; s++) {
+        Span[] names = namesBySentence[s];
+        String[] tokens = tokensBySentence[s];
+        String[] matches = Span.spansToStrings(names, tokens);
+
+        for (int i = 0; i < matches.length; i++) {
-        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
-        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
-          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
-        if (countryMentions.keySet().contains("us")) {
-          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
+          ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
+          if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1 || countryMentions.keySet().isEmpty()) {
+            geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+          }
+          ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
+          if (countryMentions.keySet().contains("us") || countryMentions.keySet().isEmpty()) {
+            usgsEntries = usgsGaz.find(matches[i], names[i], linkerProperties);
+          }
+          LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
-        if (!usgsEntries.isEmpty()) {
-          geoSpan.getLinkedEntries().addAll(usgsEntries);
-          geoSpan.setSearchTerm(matches[i]);
-        }
+          if (!usgsEntries.isEmpty()) {
+            geoSpan.getLinkedEntries().addAll(usgsEntries);
+            geoSpan.setSearchTerm(matches[i]);
+          }
-        if (!geoSpan.getLinkedEntries().isEmpty()) {
-          geoSpan.setSearchTerm(matches[i]);
-          spans.add(geoSpan);
+          if (!geoSpan.getLinkedEntries().isEmpty()) {
+            geoSpan.setSearchTerm(matches[i]);
+            geoSpan.setSentenceid(s);
+            spans.add(geoSpan);
+          }
-
-      //score the spans
-
-      scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 1000);
-
-      //  return spans;
+    List<LinkedEntityScorer<CountryContext>> scorers = new ArrayList<>();
+    scorers.add(new GeoHashBinScorer());
+    scorers.add(new CountryProximityScorer());
+    scorers.add(new FuzzyStringMatchScorer());
+    for (LinkedEntityScorer scorer : scorers) {
+      scorer.score(spans, doctext, sentences, countryContext);
+    }
-  public List<LinkedSpan> find(String text, Span[] sentences, Span[] tokens, Span[] names) {
-    ArrayList<LinkedSpan> spans = new ArrayList<LinkedSpan>();
-    try {
-      if (linkerProperties == null) {
-        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      }
-     
-        //  System.out.println("getting country context");
-        //hits = countryContext.find(text, linkerProperties);
-        countryMentions = countryContext.regexfind(text, linkerProperties);
-      
-      //get the sentence text....must assume some index
-      Span s = sentences[0];
-      String sentence = text.substring(s.getStart(), s.getEnd());
-
-      String[] stringtokens = Span.spansToStrings(tokens, sentence);
-      //get the names based on the tokens
-      String[] matches = Span.spansToStrings(names, stringtokens);
-      for (int i = 0; i < matches.length; i++) {
-        //nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
-        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
-        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
-          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
-        if (countryMentions.keySet().contains("us")) {
-          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
-
-        if (!usgsEntries.isEmpty()) {
-          geoSpan.getLinkedEntries().addAll(usgsEntries);
-          geoSpan.setSearchTerm(matches[i]);
-        }
-
-        if (!geoSpan.getLinkedEntries().isEmpty()) {
-          geoSpan.setSearchTerm(matches[i]);
-          spans.add(geoSpan);
-        }
-      }
-
-    } catch (IOException ex) {
-      Logger.getLogger(GeoEntityLinker.class.getName()).log(Level.SEVERE, null, ex);
-    }
-    scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 1000);
-    return spans;
-  }
-
-  public List<LinkedSpan> find(String text, Span[] sentences, Span[] tokens, Span[] names, int sentenceIndex) {
-    ArrayList<LinkedSpan> spans = new ArrayList<LinkedSpan>();
-    try {
-
-      if (linkerProperties == null) {
-        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      }
-
-      countryMentions = countryContext.regexfind(text, linkerProperties);
-
-      Span s = sentences[sentenceIndex];
-      String sentence = text.substring(s.getStart(), s.getEnd());
-
-      String[] stringtokens = Span.spansToStrings(tokens, sentence);
-      //get the names based on the tokens
-      String[] matches = Span.spansToStrings(names, stringtokens);
-
-      for (int i = 0; i < matches.length; i++) {
-//nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
-        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
-        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
-          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
-        if (countryMentions.keySet().contains("us")) {
-          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
-        }
-        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
-
-        if (!usgsEntries.isEmpty()) {
-          geoSpan.getLinkedEntries().addAll(usgsEntries);
-          geoSpan.setSearchTerm(matches[i]);
-        }
-
-        if (!geoSpan.getLinkedEntries().isEmpty()) {
-          geoSpan.setSearchTerm(matches[i]);
-          geoSpan.setSentenceid(sentenceIndex);
-          spans.add(geoSpan);
-        }
-      }
-      scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 2000);
-    } catch (IOException ex) {
-      Logger.getLogger(GeoEntityLinker.class.getName()).log(Level.SEVERE, null, ex);
-    }
-    return spans;
-  }
-
+  @Override
+
+  @Override
+  public List<LinkedSpan> find(String text, Span[] sentences, Span[] tokens, Span[] nameSpans) {
+    throw new UnsupportedOperationException("The GeoEntityLinker requires the entire document for proper scoring. This method is unsupported"); //To change body of generated methods, choose Tools | Templates.
+  }
+
+  @Override
+  public List<LinkedSpan> find(String text, Span[] sentences, Span[] tokens, Span[] nameSpans, int sentenceIndex) {
+    throw new UnsupportedOperationException("The GeoEntityLinker requires the entire document for proper scoring. This method is unsupported"); //To change body of generated methods, choose Tools | Templates.
+  }
+
+  @Override
+  public List<LinkedSpan> find(String text, Span[] sentences, String[] tokens, Span[] nameSpans) {
+    throw new UnsupportedOperationException("The GeoEntityLinker requires the entire document for proper scoring."); //To change body of generated methods, choose Tools | Templates.
+  }
