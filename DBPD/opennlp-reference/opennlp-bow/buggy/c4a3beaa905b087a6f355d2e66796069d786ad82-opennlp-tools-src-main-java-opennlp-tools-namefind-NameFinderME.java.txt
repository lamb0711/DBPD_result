OPENNLP-641 Added new method to detect the trainer type to Trainer Factory and updated Name Finder ME to use it

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1563002 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.ml.EventModelSequenceTrainer;
+import opennlp.tools.ml.EventTrainer;
+import opennlp.tools.ml.TrainerFactory.TrainerType;
-     if (TrainerFactory.isSupportEvent((trainParams.getSettings()))) {
+     TrainerType trainerType = TrainerFactory.getTrainerType(trainParams.getSettings());
+     
+     if (TrainerType.EVENT_MODEL_TRAINER.equals(trainerType)) {
-       nameFinderModel = TrainUtil.train(eventStream, trainParams.getSettings(), manifestInfoEntries);
+       EventTrainer trainer = TrainerFactory.getEventTrainer(trainParams.getSettings(), manifestInfoEntries);
+       nameFinderModel = trainer.train(eventStream);
-     else if (TrainerFactory.isSupportEventModelSequenceTraining((trainParams.getSettings()))) {
+     else if (TrainerType.EVENT_MODEL_SEQUENCE_TRAINER.equals(trainerType)) {
-       nameFinderModel = TrainUtil.train(ss, trainParams.getSettings(), manifestInfoEntries);
+       EventModelSequenceTrainer trainer = TrainerFactory.getEventModelSequenceTrainer(
+           trainParams.getSettings(), manifestInfoEntries);
+       nameFinderModel = trainer.train(ss);
-     else if (TrainerFactory.isSupportSequenceTraining((trainParams.getSettings()))) {
+     else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
-
+       
-       throw new IllegalStateException("Unexpected trainer type required!");
+       throw new IllegalStateException("Unexpected trainer type!");
-     
-     return new TokenNameFinderModel(languageCode, nameFinderModel,
-         resources, manifestInfoEntries);
+     else {
+       return new TokenNameFinderModel(languageCode, nameFinderModel,
+           resources, manifestInfoEntries);
+     }
