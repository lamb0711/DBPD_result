OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FileInputStream;
-import java.nio.charset.Charset;
-import opennlp.tools.cmdline.ArgumentParser;
-import opennlp.tools.cmdline.CLI;
-import opennlp.tools.cmdline.CmdLineTool;
+import opennlp.tools.cmdline.AbstractTrainerTool;
+import opennlp.tools.cmdline.doccat.DoccatTrainerTool.TrainerToolParams;
-import opennlp.tools.doccat.DocumentSampleStream;
-import opennlp.tools.util.ObjectStream;
-import opennlp.tools.util.PlainTextByLineStream;
+import opennlp.tools.util.model.ModelUtil;
-public class DoccatTrainerTool implements CmdLineTool {
+public class DoccatTrainerTool
+    extends AbstractTrainerTool<DocumentSample, TrainerToolParams> {
-  interface TrainerToolParams extends TrainingParams, TrainingToolParams{
-
+  interface TrainerToolParams extends TrainingParams, TrainingToolParams {
-  public String getName() {
-    return "DoccatTrainer";
+  public DoccatTrainerTool() {
+    super(DocumentSample.class, TrainerToolParams.class);
-  
+
-  public String getHelp() {
-    return "Usage: " + CLI.CMD + " " + getName() + " "
-        + ArgumentParser.createUsage(TrainerToolParams.class);
-  }
-  
-  static ObjectStream<DocumentSample> openSampleData(String sampleDataName,
-      File sampleDataFile, Charset encoding) {
-    CmdLineUtil.checkInputFile(sampleDataName + " Data", sampleDataFile);
+  public void run(String format, String[] args) {
+    super.run(format, args);
-    FileInputStream sampleDataIn = CmdLineUtil.openInFile(sampleDataFile);
-
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn
-        .getChannel(), encoding);
-
-    return new DocumentSampleStream(lineStream);
-  }
-  
-  public void run(String[] args) {
-    String errorMessage = ArgumentParser.validateArgumentsLoudly(args, TrainerToolParams.class);
-    if (null != errorMessage) {
-      System.err.println(errorMessage);
-      System.err.println(getHelp());
-      throw new TerminateToolException(1);
+    mlParams = CmdLineUtil.loadTrainingParameters(params.getParams(), false);
+    if(mlParams == null) {
+      mlParams = ModelUtil.createTrainingParameters(params.getIterations(), params.getCutoff());
-    
-    TrainerToolParams params = ArgumentParser.parse(args,
-        TrainerToolParams.class);
-    
-    opennlp.tools.util.TrainingParameters mlParams =
-      CmdLineUtil.loadTrainingParameters(params.getParams(), false);
-    
-    File trainingDataInFile = params.getData();
+
-    ObjectStream<DocumentSample> sampleStream = 
-        openSampleData("Training", trainingDataInFile, params.getEncoding());
-    
+
-      if (mlParams == null) {
-       model = DocumentCategorizerME.train(params.getLang(), sampleStream, 
-           params.getCutoff(), params.getIterations());
-      }
-      else {
-        model = DocumentCategorizerME.train(params.getLang(), sampleStream, 
-            mlParams);
-      }
+      model = DocumentCategorizerME.train(factory.getLang(), sampleStream, mlParams);
-      CmdLineUtil.printTrainingIoError(e);
-      throw new TerminateToolException(-1);
+      throw new TerminateToolException(-1, "IO error while reading training data or indexing data: " + e.getMessage());
