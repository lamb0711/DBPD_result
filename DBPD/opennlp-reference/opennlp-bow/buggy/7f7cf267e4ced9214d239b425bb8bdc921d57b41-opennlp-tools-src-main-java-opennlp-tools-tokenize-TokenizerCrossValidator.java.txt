OPENNLP-226 CrossValidators should receive a list/one listener in constructor, the same way is done with evaluators

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1160122 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collections;
+import java.util.LinkedList;
+  private LinkedList<EvaluationSampleListener<TokenSample>> listeners;
-  
-  /**
-   * Starts the evaluation.
-   * 
-   * @param samples
-   *          the data to train and test
-   * @param nFolds
-   *          number of folds
-   * 
-   * @throws IOException
-   */
-  public void evaluate(ObjectStream<TokenSample> samples, int nFolds)
-      throws IOException {
-    evaluate(samples, nFolds, null);
+  public TokenizerCrossValidator(String language,
+      boolean alphaNumericOptimization, TrainingParameters params,
+      List<? extends EvaluationSampleListener<TokenSample>> listeners) {
+    this(language, null, alphaNumericOptimization, params, listeners);
+  }
+
+  public TokenizerCrossValidator(String language, Dictionary abbreviations,
+      boolean alphaNumericOptimization, TrainingParameters params,
+      List<? extends EvaluationSampleListener<TokenSample>> listeners) {
+
+    this(language, abbreviations, alphaNumericOptimization, params);
+    if (listeners != null) {
+      this.listeners = new LinkedList<EvaluationSampleListener<TokenSample>>(
+          listeners);
+    }
+  }
+
+  public TokenizerCrossValidator(String language,
+      boolean alphaNumericOptimization, TrainingParameters params,
+      EvaluationSampleListener<TokenSample> listener) {
+    this(language, null, alphaNumericOptimization, params, Collections
+        .singletonList(listener));
+  }
+
+  public TokenizerCrossValidator(String language, Dictionary abbreviations,
+      boolean alphaNumericOptimization, TrainingParameters params,
+      EvaluationSampleListener<TokenSample> listener) {
+    this(language, abbreviations, alphaNumericOptimization, params, Collections
+        .singletonList(listener));
-   * @param listener
-   *          an optional listener to print missclassified items
-  public void evaluate(ObjectStream<TokenSample> samples, int nFolds,
-      List<EvaluationSampleListener<TokenSample>> listeners) throws IOException {
+  public void evaluate(ObjectStream<TokenSample> samples, int nFolds) throws IOException {
