OPENNLP-923: Wrap all lines longer than 110 chars

And also add checkstyle enforcement

-        distance[i][j] = minimum(distance[i - 1][j] + 1, distance[i][j - 1] + 1, distance[i - 1][j - 1] + cost);
+        distance[i][j] = minimum(distance[i - 1][j] + 1, distance[i][j - 1]
+            + 1, distance[i - 1][j - 1] + cost);
-  public static void computeShortestEditScript(String wordForm, String lemma, int[][] distance, StringBuffer permutations) {
+  public static void computeShortestEditScript(String wordForm, String lemma,
+      int[][] distance, StringBuffer permutations) {
-      if ((lemmaLength > 0 && wordFormLength > 0) && (distance[wordFormLength - 1][lemmaLength - 1] < distance[wordFormLength][lemmaLength])) {
-        permutations.append('R').append(Integer.toString(wordFormLength - 1)).append(wordForm.charAt(wordFormLength - 1)).append(lemma.charAt(lemmaLength - 1));
+      if ((lemmaLength > 0 && wordFormLength > 0) && (distance[wordFormLength - 1][lemmaLength - 1]
+          < distance[wordFormLength][lemmaLength])) {
+        permutations.append('R').append(Integer.toString(wordFormLength - 1))
+            .append(wordForm.charAt(wordFormLength - 1)).append(lemma.charAt(lemmaLength - 1));
-      if (lemmaLength > 0 && (distance[wordFormLength][lemmaLength - 1] < distance[wordFormLength][lemmaLength])) {
-        permutations.append('I').append(Integer.toString(wordFormLength)).append(lemma.charAt(lemmaLength - 1));
+      if (lemmaLength > 0 && (distance[wordFormLength][lemmaLength - 1]
+          < distance[wordFormLength][lemmaLength])) {
+        permutations.append('I').append(Integer.toString(wordFormLength))
+            .append(lemma.charAt(lemmaLength - 1));
-      if (wordFormLength > 0 && (distance[wordFormLength - 1][lemmaLength] < distance[wordFormLength][lemmaLength])) {
-        permutations.append('D').append(Integer.toString(wordFormLength - 1)).append(wordForm.charAt(wordFormLength - 1));
+      if (wordFormLength > 0 && (distance[wordFormLength - 1][lemmaLength]
+          < distance[wordFormLength][lemmaLength])) {
+        permutations.append('D').append(Integer.toString(wordFormLength - 1))
+            .append(wordForm.charAt(wordFormLength - 1));
-      if ((wordFormLength > 0 && lemmaLength > 0) && (distance[wordFormLength - 1][lemmaLength - 1] == distance[wordFormLength][lemmaLength])) {
+      if ((wordFormLength > 0 && lemmaLength > 0) && (distance[wordFormLength - 1][lemmaLength - 1]
+          == distance[wordFormLength][lemmaLength])) {
-      if (wordFormLength > 0 && (distance[wordFormLength - 1][lemmaLength] == distance[wordFormLength][lemmaLength])) {
+      if (wordFormLength > 0 && (distance[wordFormLength - 1][lemmaLength]
+          == distance[wordFormLength][lemmaLength])) {
-      if (lemmaLength > 0 && (distance[wordFormLength][lemmaLength - 1] == distance[wordFormLength][lemmaLength])) {
+      if (lemmaLength > 0 && (distance[wordFormLength][lemmaLength - 1]
+          == distance[wordFormLength][lemmaLength])) {
