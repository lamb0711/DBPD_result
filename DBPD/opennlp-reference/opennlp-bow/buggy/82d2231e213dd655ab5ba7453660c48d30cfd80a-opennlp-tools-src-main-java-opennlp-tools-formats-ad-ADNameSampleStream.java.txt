OPENNLP-485: Improved how contractions are handled: some are expanded to more than 2 tokens. Also now we force tokenization of named entities that has punctuations.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1305904 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Collection;
+import java.util.LinkedList;
+  private static final Pattern whitespacePattern = Pattern.compile("\\s+");
+  private static final Pattern underlinePattern = Pattern.compile("[_]+");
+  private static final Pattern alphanumericPattern = Pattern.compile("^[\\p{L}\\p{Nd}-]+$");
+
-          sentence.add(c);
+          String[] parts = whitespacePattern.split(c);
+          sentence.addAll(Arrays.asList(parts));
-          String[] lexemes = leaf.getLexeme().split("_");
+          String[] lexemes = underlinePattern.split(leaf.getLexeme());
-        sentence.addAll(Arrays.asList(leaf.getLexeme().split("_")));
+        sentence.addAll(processLexeme(leaf.getLexeme()));
-        // we check if it is true, and expand the lest NER
+        // we check if it is true, and expand the last NER
-  
+  private List<String> processLexeme(String lexemeStr) {
+    List<String> out = new ArrayList<String>();
+    String[] parts = underlinePattern.split(lexemeStr);
+    for (String tok : parts) {
+      if(tok.length() > 1 && !alphanumericPattern.matcher(tok).matches()) {
+        out.addAll(processTok(tok));
+      } else {
+        out.add(tok);
+      }
+    }
+    return out;
+  }
-
-
-
+  private Collection<? extends String> processTok(String tok) {
+    String original = tok;
+    List<String> out = new ArrayList<String>();
+    LinkedList<String> suffix = new LinkedList<String>();
+    char first = tok.charAt(0);
+    if (first == '«') {
+      out.add(Character.toString(first));
+      tok = tok.substring(1);
+    }
+    char last = tok.charAt(tok.length() - 1);
+    if (last == '»' || last == ':' || last == ',' || last == '!' ) {
+      suffix.add(Character.toString(last));
+      tok = tok.substring(0, tok.length() - 1);
+    }
+    
+    if(!original.equals(tok) && tok.length() > 1 && !alphanumericPattern.matcher(tok).matches()) {
+      out.addAll(processTok(tok));
+    } else {
+      out.add(tok);
+    }
+    out.addAll(suffix);
+    return out;
+  }
