OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FileInputStream;
-import java.nio.charset.Charset;
-import opennlp.tools.cmdline.ArgumentParser;
-import opennlp.tools.cmdline.CLI;
-import opennlp.tools.cmdline.CmdLineTool;
+import opennlp.tools.cmdline.AbstractTrainerTool;
+import opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool.TrainerToolParams;
-import opennlp.tools.namefind.NameSampleDataStream;
-import opennlp.tools.util.ObjectStream;
-import opennlp.tools.util.PlainTextByLineStream;
-/**
- * <b>Note:</b> Do not use this class, internal use only!
- */
-public final class TokenNameFinderTrainerTool implements CmdLineTool {
+public final class TokenNameFinderTrainerTool
+    extends AbstractTrainerTool<NameSample, TrainerToolParams> {
-  interface TrainerToolParams extends TrainingParams, TrainingToolParams{
-
+  interface TrainerToolParams extends TrainingParams, TrainingToolParams {
-  public String getName() {
-    return "TokenNameFinderTrainer";
+  public TokenNameFinderTrainerTool() {
+    super(NameSample.class, TrainerToolParams.class);
-  
+
-  public String getHelp() {
-    return "Usage: " + CLI.CMD + " " + getName() + " "
-      + ArgumentParser.createUsage(TrainerToolParams.class);
-  }
-
-  static ObjectStream<NameSample> openSampleData(String sampleDataName,
-      File sampleDataFile, Charset encoding) {
-    CmdLineUtil.checkInputFile(sampleDataName + " Data", sampleDataFile);
-
-    FileInputStream sampleDataIn = CmdLineUtil.openInFile(sampleDataFile);
-
-    ObjectStream<String> lineStream = new PlainTextByLineStream(sampleDataIn
-        .getChannel(), encoding);
-
-    return new NameSampleDataStream(lineStream);
-  }
-  
-        CmdLineUtil.printTrainingIoError(e);
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(-1, "IO error while reading training data or indexing data: " + e.getMessage());
-  public void run(String[] args) {
-    
-    String errorMessage = ArgumentParser.validateArgumentsLoudly(args, TrainerToolParams.class);
-    if (null != errorMessage) {
-      System.err.println(errorMessage);
-      System.err.println(getHelp());
-      throw new TerminateToolException(1);
+  public void run(String format, String[] args) {
+    super.run(format, args);
+
+    mlParams = CmdLineUtil.loadTrainingParameters(params.getParams(), false);
+    if(mlParams == null) {
+      mlParams = ModelUtil.createTrainingParameters(params.getIterations(), params.getCutoff());
-    
-    TrainerToolParams params = ArgumentParser.parse(args,
-        TrainerToolParams.class);
-    
-    opennlp.tools.util.TrainingParameters mlParams =
-      CmdLineUtil.loadTrainingParameters(params.getParams(), true);
-    
-    File trainingDataInFile = params.getData();
+
-    
-    
+
-    
-    // TODO: Support Custom resources: 
+
+    // TODO: Support Custom resources:
-    ObjectStream<NameSample> sampleStream = openSampleData("Training", trainingDataInFile,
-        params.getEncoding());
-      if (mlParams == null) {
-      model = opennlp.tools.namefind.NameFinderME.train(params.getLang(), params.getType(),
-           sampleStream, featureGeneratorBytes, resources, params.getIterations(),
-           params.getCutoff());
-      }
-      else {
-        model = opennlp.tools.namefind.NameFinderME.train(
-            params.getLang(), params.getType(), sampleStream,
-            mlParams, featureGeneratorBytes, resources);
-      }
-    } 
+      model = opennlp.tools.namefind.NameFinderME.train(
+          factory.getLang(), params.getType(), sampleStream,
+          mlParams, featureGeneratorBytes, resources);
+    }
-      CmdLineUtil.printTrainingIoError(e);
-      throw new TerminateToolException(-1);
+      throw new TerminateToolException(-1, "IO error while reading training data or indexing data: " + e.getMessage());
