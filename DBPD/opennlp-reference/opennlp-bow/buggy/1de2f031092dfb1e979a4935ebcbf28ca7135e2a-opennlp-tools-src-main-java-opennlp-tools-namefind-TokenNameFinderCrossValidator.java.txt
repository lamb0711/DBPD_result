OPENNLP-178 Added cross validation cmd line tool for the name finder

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1130913 13f79535-47bb-0310-9956-ffa450edef68

-
+import java.util.Map;
-import opennlp.tools.util.InvalidFormatException;
+import opennlp.tools.util.TrainingParameters;
-  private FMeasure fmeasure = new FMeasure();
+  private final TrainingParameters params;
+  private final String type;
+  private final byte[] featureGeneratorBytes;
+  private final Map<String, Object> resources;
-  public TokenNameFinderCrossValidator(String languageCode, int cutoff, int iterations) {
+
+  private FMeasure fmeasure = new FMeasure();
+
+  /**
+   * Name finder cross validator
+   *  
+   * @param languageCode 
+    *          the language of the training data
+   * @param cutoff
+   * @param iterations
+   */
+  public TokenNameFinderCrossValidator(String languageCode, int cutoff,
+      int iterations) {
+    this(languageCode, null, cutoff, iterations);
+  }
+
+  /**
+   * Name finder cross validator
+   * 
+   * @param languageCode
+   *          the language of the training data
+   * @param type
+   *          null or an override type for all types in the training data
+   * @param cutoff
+   *          specifies the min number of times a feature must be seen
+   * @param iterations
+   *          the number of iterations
+   */
+  public TokenNameFinderCrossValidator(String languageCode, String type,
+      int cutoff, int iterations) {
-  }
-  
-  public void evaluate(ObjectStream<NameSample> samples, int nFolds) throws IOException,
-      InvalidFormatException, IOException {
-    CrossValidationPartitioner<NameSample> partitioner = 
-        new CrossValidationPartitioner<NameSample>(samples, nFolds);
+    this.type = type;
-    while (partitioner.hasNext()) {
-      
-      CrossValidationPartitioner.TrainingSampleStream<NameSample> trainingSampleStream =
-          partitioner.next();
-      
-      TokenNameFinderModel model = NameFinderME.train(languageCode, null, trainingSampleStream,
-          Collections.<String, Object>emptyMap(), cutoff, iterations);
-       
-       // do testing
-       TokenNameFinderEvaluator evaluator = new TokenNameFinderEvaluator(
-           new NameFinderME(model));
-
-       evaluator.evaluate(trainingSampleStream.getTestSampleStream());
-       
-       fmeasure.mergeInto(evaluator.getFMeasure());
-     }
+    this.params = null;
+    this.featureGeneratorBytes = null;
+    this.resources = Collections.<String, Object>emptyMap(); 
-  
+
+  /**
+   * Name finder cross validator
+   * 
+   * @param languageCode
+   *          the language of the training data
+   * @param type
+   *          null or an override type for all types in the training data
+   * @param featureGeneratorBytes
+   *          descriptor to configure the feature generation or null
+   * @param resources
+   *          the resources for the name finder or null if none
+   * @param cutoff
+   *          specifies the min number of times a feature must be seen
+   * @param iterations
+   *          the number of iterations
+   */
+  public TokenNameFinderCrossValidator(String languageCode, String type,
+      byte[] featureGeneratorBytes,
+      Map<String, Object> resources, int iterations, int cutoff) {
+    this.languageCode = languageCode;
+    this.cutoff = cutoff;
+    this.iterations = iterations;
+    this.type = type;
+    this.featureGeneratorBytes = featureGeneratorBytes;
+    this.resources = resources;
+    
+    this.params = null;
+  }
+
+  /**
+   * Name finder cross validator
+   * 
+   * @param languageCode
+   *          the language of the training data
+   * @param type
+   *          null or an override type for all types in the training data
+   * @param trainParams
+   *          machine learning train parameters
+   * @param featureGeneratorBytes
+   *          descriptor to configure the feature generation or null
+   * @param resources
+   *          the resources for the name finder or null if none
+   */
+  public TokenNameFinderCrossValidator(String languageCode, String type,
+      TrainingParameters trainParams, byte[] featureGeneratorBytes, Map<String, Object> resources) {
+
+    this.languageCode = languageCode;
+    this.cutoff = -1;
+    this.iterations = -1;
+    this.type = type;
+    this.featureGeneratorBytes = featureGeneratorBytes;
+    this.resources = resources;
+
+    this.params = trainParams;
+  }
+
+  /**
+   * Starts the evaluation.
+   * 
+   * @param samples the data to train and test
+   * @param nFolds number of folds
+   * 
+   * @throws IOException
+   */
+  public void evaluate(ObjectStream<NameSample> samples, int nFolds)
+      throws IOException {
+    CrossValidationPartitioner<NameSample> partitioner = new CrossValidationPartitioner<NameSample>(
+        samples, nFolds);
+
+    while (partitioner.hasNext()) {
+
+      CrossValidationPartitioner.TrainingSampleStream<NameSample> trainingSampleStream = partitioner
+          .next();
+
+      TokenNameFinderModel model;
+      if (params == null) {
+        model = NameFinderME.train(languageCode, type, trainingSampleStream,
+            featureGeneratorBytes, resources, iterations, cutoff);
+      } else {
+        model = opennlp.tools.namefind.NameFinderME.train(languageCode, type,
+            trainingSampleStream, params, featureGeneratorBytes, resources);
+      }
+
+      // do testing
+      TokenNameFinderEvaluator evaluator = new TokenNameFinderEvaluator(
+          new NameFinderME(model));
+
+      evaluator.evaluate(trainingSampleStream.getTestSampleStream());
+
+      fmeasure.mergeInto(evaluator.getFMeasure());
+    }
+  }
+
