OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.nio.charset.Charset;
-import opennlp.tools.cmdline.ArgumentParser;
-import opennlp.tools.cmdline.CLI;
-import opennlp.tools.cmdline.CmdLineTool;
-import opennlp.tools.cmdline.CmdLineUtil;
+import opennlp.tools.cmdline.AbstractEvaluatorTool;
+import opennlp.tools.cmdline.sentdetect.SentenceDetectorEvaluatorTool.EvalToolParams;
-import opennlp.tools.util.ObjectStream;
-public final class SentenceDetectorEvaluatorTool implements CmdLineTool {
+public final class SentenceDetectorEvaluatorTool
+    extends AbstractEvaluatorTool<SentenceSample, EvalToolParams> {
-  public String getName() {
-    return "SentenceDetectorEvaluator";
+  interface EvalToolParams extends EvaluatorParams {
-  
+
+  public SentenceDetectorEvaluatorTool() {
+    super(SentenceSample.class, EvalToolParams.class);
+  }
+
-  public String getHelp() {
-    return "Usage: " + CLI.CMD + " " + getName() + " " + ArgumentParser.createUsage(EvaluatorParams.class);
-  }
+  public void run(String format, String[] args) {
+    super.run(format, args);
-  public void run(String[] args) {
-    
-    String errorMessage = ArgumentParser.validateArgumentsLoudly(args, EvaluatorParams.class);
-    if (null != errorMessage) {
-      System.err.println(errorMessage);
-      System.err.println(getHelp());
-      throw new TerminateToolException(1);
-    }
-    
-    EvaluatorParams params = ArgumentParser.parse(args, EvaluatorParams.class);
-    
-    Charset encoding = params.getEncoding();
-    
-    File trainingDataInFile = params.getData();
-    CmdLineUtil.checkInputFile("Training Data", trainingDataInFile);
-    
-    
+
-      ObjectStream<SentenceSample> sampleStream = SentenceDetectorTrainerTool.openSampleData("Test",
-          trainingDataInFile, encoding);
-      
+    try {
+    evaluator.evaluate(sampleStream);
+    }
+    catch (IOException e) {
+      throw new TerminateToolException(-1, "IO error while reading training data or indexing data: " + e.getMessage());
+    }
+    finally {
-      evaluator.evaluate(sampleStream);
+        sampleStream.close();
+      } catch (IOException e) {
+        // sorry that this can fail
-      catch (IOException e) {
-        CmdLineUtil.printTrainingIoError(e);
-        throw new TerminateToolException(-1);
-      }
-      finally {
-        try {
-          sampleStream.close();
-        } catch (IOException e) {
-          // sorry that this can fail
-        }
-      }
-      
-      System.err.println("done");
-      
-      System.out.println();
-      
-      System.out.println(evaluator.getFMeasure());
+    }
+
+    System.err.println("done");
+
+    System.out.println();
+
+    System.out.println(evaluator.getFMeasure());
