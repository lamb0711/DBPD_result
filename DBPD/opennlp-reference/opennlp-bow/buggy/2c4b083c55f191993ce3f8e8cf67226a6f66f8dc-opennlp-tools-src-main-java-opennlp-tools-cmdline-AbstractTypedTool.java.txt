OPENNLP-402: Improved class hierarchy and naming

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1234594 13f79535-47bb-0310-9956-ffa450edef68

- * Base class for tools which work with data of some type T.
+ * Base class for tools which support processing of samples of some type T
+ * coming from a stream of a certain format.
-public abstract class AbstractTypedTool<T, P>
-    extends AbstractCLITool<P> implements TypedCmdLineTool {
+public abstract class AbstractTypedTool<T>
+    extends AbstractCmdLineTool implements TypedCmdLineTool {
-  protected Class<T> type;
+  protected final Class<T> type;
-   * @param paramsClass interface with parameters
-  protected AbstractTypedTool(Class<T> sampleType, Class<P> paramsClass) {
-    super(paramsClass);
+  protected AbstractTypedTool(Class<T> sampleType) {
+    super();
-    this.paramsClass = paramsClass;
-
-  @SuppressWarnings({"unchecked"})
-  public String getHelp(String format) {
-    if ("".equals(format) || StreamFactoryRegistry.DEFAULT_FORMAT.equals(format)) {
-      return getBasicHelp(paramsClass,
-          StreamFactoryRegistry.getFactory(type, StreamFactoryRegistry.DEFAULT_FORMAT)
-              .<P>getParameters());
-    } else {
-      ObjectStreamFactory<T> factory = StreamFactoryRegistry.getFactory(type, format);
-      if (null == factory) {
-        throw new TerminateToolException(1, "Format " + format + " is not found.\n" + getHelp());
-      }
-      return "Usage: " + CLI.CMD + " " + getName() + "." + format + " " +
-        ArgumentParser.createUsage(paramsClass, factory.<P>getParameters());
-    }
-  }
