OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.cmdline.AbstractTypedTool;
-import opennlp.tools.cmdline.CLI;
-import opennlp.tools.cmdline.CmdLineTool;
+import opennlp.tools.cmdline.ObjectStreamFactory;
-abstract class ModelUpdaterTool implements CmdLineTool {
+abstract class ModelUpdaterTool
+    extends AbstractTypedTool<Parse, ModelUpdaterTool.ModelUpdaterParams> {
+  }
+  protected ModelUpdaterTool() {
+    super(Parse.class, ModelUpdaterParams.class);
-  public String getHelp() {
-    return "Usage: " + CLI.CMD + " " + getName() + " "
-      + ArgumentParser.createUsage(ModelUpdaterParams.class);
-  }
-  
-  public final void run(String[] args) {
-
-    String errorMessage = ArgumentParser.validateArgumentsLoudly(args, ModelUpdaterParams.class);
-    if (null != errorMessage) {
-      System.err.println(errorMessage);
-      System.err.println(getHelp());
-      throw new TerminateToolException(1);
-    }
-    
-    ModelUpdaterParams params = ArgumentParser.parse(args,
-        ModelUpdaterParams.class);
+  public final void run(String format, String[] args) {
+    ModelUpdaterParams params = validateAndParseParams(
+        ArgumentParser.filter(args, ModelUpdaterParams.class), ModelUpdaterParams.class);
-    ObjectStream<Parse> parseSamples = ParserTrainerTool.openTrainingData(params.getData(), 
-        params.getEncoding());
+    ObjectStreamFactory<Parse> factory = getStreamFactory(format);
+    String[] fargs = ArgumentParser.filter(args, factory.getParameters());
+    validateFactoryArgs(factory, fargs);
+    ObjectStream<Parse> sampleStream = factory.create(fargs);
-      updatedParserModel = trainAndUpdate(originalParserModel,
-          parseSamples, params);
+      updatedParserModel = trainAndUpdate(originalParserModel, sampleStream, params);
-      CmdLineUtil.printTrainingIoError(e);
-      throw new TerminateToolException(-1);
+      throw new TerminateToolException(-1, "IO error while reading training data or indexing data: " + e.getMessage());
-        parseSamples.close();
+        sampleStream.close();
