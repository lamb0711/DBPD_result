Restores type parameter in NameFinder

This closes #34
See issue OPENNLP-719

+import java.util.Objects;
+  private final String defaultType;
+
-  public NameFinderEventStream(ObjectStream<NameSample> dataStream, String type, NameContextGenerator contextGenerator, SequenceCodec codec) {
+  public NameFinderEventStream(ObjectStream<NameSample> dataStream, String type, NameContextGenerator contextGenerator, SequenceCodec<String> codec) {
-    String type1;
-    if (type != null)
-      type1 = type;
-    else
-      type1 = "default";
+    this.defaultType = type;
-    List<Event> events = new ArrayList<Event>(outcomes.length);
+    List<Event> events = new ArrayList<>(outcomes.length);
-    String outcomes[] = codec.encode(sample.getNames(), sample.getSentence().length);
+    Span[] names = sample.getNames();
+    if (!Objects.isNull(this.defaultType)) {
+      overrideDefaultType(names);
+    }
+
+    String outcomes[] = codec.encode(names, sample.getSentence().length);
+  private void overrideDefaultType(Span[] names) {
+    for (int i = 0; i < names.length; i++) {
+      Span n = names[i];
+      if (Objects.isNull(n.getType())) {
+        names[i] = new Span(n.getStart(), n.getEnd(), this.defaultType,
+                n.getProb());
+      }
+    }
+  }
+
