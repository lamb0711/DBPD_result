OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

-
-import java.io.FileNotFoundException;
-import java.nio.charset.Charset;
-import opennlp.tools.cmdline.ArgumentParser;
-import opennlp.tools.cmdline.CLI;
-import opennlp.tools.cmdline.CmdLineTool;
+import opennlp.tools.cmdline.AbstractTrainerTool;
+import opennlp.tools.cmdline.params.EncodingParameter;
+import opennlp.tools.cmdline.parser.ParserTrainerTool.TrainerToolParams;
-import opennlp.tools.parser.ParseSampleStream;
-import opennlp.tools.util.PlainTextByLineStream;
+import opennlp.tools.util.model.ModelUtil;
-public final class ParserTrainerTool implements CmdLineTool {
+public final class ParserTrainerTool extends AbstractTrainerTool<Parse, TrainerToolParams> {
-  interface TrainerToolParams extends TrainingParams, TrainingToolParams{
-
+  interface TrainerToolParams extends TrainingParams, TrainingToolParams, EncodingParameter {
-  public String getName() {
-    return "ParserTrainer";
+  public ParserTrainerTool() {
+    super(Parse.class, TrainerToolParams.class);
-  
+
-  public String getHelp() {
-    return "Usage: " + CLI.CMD + " " + getName() + " "
-      + ArgumentParser.createUsage(TrainerToolParams.class);
-  }
-
-  static ObjectStream<Parse> openTrainingData(File trainingDataFile, Charset encoding) {
-    
-    CmdLineUtil.checkInputFile("Training data", trainingDataFile);
-
-    System.err.print("Opening training data ... ");
-    
-    FileInputStream trainingDataIn;
-    try {
-      trainingDataIn = new FileInputStream(trainingDataFile);
-    } catch (FileNotFoundException e) {
-      System.err.println("failed");
-      System.err.println("File not found: " + e.getMessage());
-      throw new TerminateToolException(-1);
-    }
-    
-    System.err.println("done");
-    
-    return new ParseSampleStream(
-        new PlainTextByLineStream(trainingDataIn.getChannel(),
-        encoding));
-  }
-  
-        System.err.println("ParserType training parameter is invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "ParserType training parameter is invalid!");
-  public void run(String[] args) {
-    
-    String errorMessage = ArgumentParser.validateArgumentsLoudly(args, TrainerToolParams.class);
-    if (null != errorMessage) {
-      System.err.println(errorMessage);
-      System.err.println(getHelp());
-      throw new TerminateToolException(1);
-    }
-    
-    TrainerToolParams params = ArgumentParser.parse(args,
-        TrainerToolParams.class); 
-    
-    opennlp.tools.util.TrainingParameters mlParams =
-      CmdLineUtil.loadTrainingParameters(params.getParams(), true);
+  public void run(String format, String[] args) {
+    super.run(format, args);
+
+    mlParams = CmdLineUtil.loadTrainingParameters(params.getParams(), true);
-        System.err.println("Build training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Build training parameters are invalid!");
-        System.err.println("Check training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Check training parameters are invalid!");
-        System.err.println("Attach training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Attach training parameters are invalid!");
-        System.err.println("Tagger training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Tagger training parameters are invalid!");
-        System.err.println("Chunker training parameters are invalid!");
-        throw new TerminateToolException(-1);
+        throw new TerminateToolException(1, "Chunker training parameters are invalid!");
-    
-    ObjectStream<Parse> sampleStream = openTrainingData(params.getData(), params.getEncoding());
-    
+
+    if(mlParams == null) {
+      mlParams = ModelUtil.createTrainingParameters(params.getIterations(), params.getCutoff());
+    }
+
-      
+
+      // TODO hard-coded language reference
-      if (mlParams == null) {
-        if (ParserType.CHUNKING.equals(type)) {
-          model = opennlp.tools.parser.chunking.Parser.train(
-              params.getLang(), sampleStream, rules, 
-              params.getIterations(), params.getCutoff());
-        }
-        else if (ParserType.TREEINSERT.equals(type)) {
-          model = opennlp.tools.parser.treeinsert.Parser.train(params.getLang(), sampleStream, rules, params.getIterations(), 
-              params.getCutoff());
-        }
-        else {
-          throw new IllegalStateException();
-        }
+      if (ParserType.CHUNKING.equals(type)) {
+        model = opennlp.tools.parser.chunking.Parser.train(
+            factory.getLang(), sampleStream, rules,
+            mlParams);
+      }
+      else if (ParserType.TREEINSERT.equals(type)) {
+        model = opennlp.tools.parser.treeinsert.Parser.train(factory.getLang(), sampleStream, rules,
+            mlParams);
-        if (ParserType.CHUNKING.equals(type)) {
-          model = opennlp.tools.parser.chunking.Parser.train(
-              params.getLang(), sampleStream, rules, 
-              mlParams);
-        }
-        else if (ParserType.TREEINSERT.equals(type)) {
-          model = opennlp.tools.parser.treeinsert.Parser.train(params.getLang(), sampleStream, rules,
-              mlParams);
-        }
-        else {
-          throw new IllegalStateException();
-        }
-
+        throw new IllegalStateException();
-      CmdLineUtil.printTrainingIoError(e);
-      throw new TerminateToolException(-1);
+      throw new TerminateToolException(-1, "IO error while reading training data or indexing data: " + e.getMessage());
