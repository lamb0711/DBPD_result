OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

-import opennlp.tools.cmdline.ObjectStreamFactory;
-import opennlp.tools.cmdline.TerminateToolException;
+import opennlp.tools.cmdline.StreamFactoryRegistry;
+import opennlp.tools.formats.LanguageSampleStreamFactory;
- * A Factory to create a Arvores Deitadas NameSampleStream from the command line
+ * A Factory to create a Arvores Deitadas NameSampleDataStream from the command line
-public class ADNameSampleStreamFactory implements
-    ObjectStreamFactory<NameSample> {
+public class ADNameSampleStreamFactory extends LanguageSampleStreamFactory<NameSample> {
-    @ParameterDescription(valueName = "encoding")
+    //all have to be repeated, because encoding is not optional,
+    //according to the check if (encoding == null) { below (now removed)
+    @ParameterDescription(valueName = "charsetName",
+        description = "encoding for reading and writing text, if absent the system default is used.")
-    @ParameterDescription(valueName = "sampleData")
-    String getData();
+    @ParameterDescription(valueName = "sampleData", description = "data to be used, usually a file name.")
+    File getData();
+
+    @ParameterDescription(valueName = "language", description = "language which is being processed.")
+    String getLang();
-  public String getUsage() {
-    return ArgumentParser.createUsage(Parameters.class);
+  public static void registerFactory() {
+    StreamFactoryRegistry.registerFactory(NameSample.class,
+        "ad", new ADNameSampleStreamFactory(Parameters.class));
-  public String validateArguments(String[] args) {
-    return ArgumentParser.validateArgumentsLoudly(args, Parameters.class);
+  protected <P> ADNameSampleStreamFactory(Class<P> params) {
+    super(params);
+    language = params.getLang();
+
-    if (encoding == null) {
-      throw new TerminateToolException(1);
-    }
-
-    return new ADNameSampleStream(CmdLineUtil.openInFile(new File(params
-        .getData())), encoding.name());
+    return new ADNameSampleStream(CmdLineUtil.openInFile(params.getData()), encoding.name());
