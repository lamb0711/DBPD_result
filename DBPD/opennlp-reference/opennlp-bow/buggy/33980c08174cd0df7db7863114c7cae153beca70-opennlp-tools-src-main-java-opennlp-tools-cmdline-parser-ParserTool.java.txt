OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.cmdline.BaseCLITool;
-import opennlp.tools.cmdline.CmdLineTool;
-import opennlp.tools.cmdline.TerminateToolException;
-public final class ParserTool implements CmdLineTool {
+public final class ParserTool extends BaseCLITool {
-  public String getName() {
-    return "Parser";
-  }
-  
-      throw new TerminateToolException(1);
-    }
+    } else {
-    ParserModel model = new ParserModelLoader().load(new File(args[args.length - 1]));
-    
-    Integer beamSize = CmdLineUtil.getIntParameter("-bs", args);
-    if (beamSize == null)
-        beamSize = AbstractBottomUpParser.defaultBeamSize;
-    
-    Integer numParses = CmdLineUtil.getIntParameter("-k", args);
-    boolean showTopK;
-    if (numParses == null) {
-      numParses = 1;
-      showTopK = false;
-    }
-    else {
-      showTopK = true;
-    }
-    
-    Double advancePercentage = CmdLineUtil.getDoubleParameter("-ap", args);
-    
-    if (advancePercentage == null)
-      advancePercentage = AbstractBottomUpParser.defaultAdvancePercentage;
-      
-    opennlp.tools.parser.Parser parser = 
-        ParserFactory.create(model, beamSize, advancePercentage); 
+      ParserModel model = new ParserModelLoader().load(new File(args[args.length - 1]));
-    ObjectStream<String> lineStream =
-      new PlainTextByLineStream(new InputStreamReader(System.in));
-    
-    PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
-    perfMon.start();
-    
-    try {
-      String line;
-      while ((line = lineStream.read()) != null) {
-        if (line.length() == 0) {
-          System.out.println();
-        }
-        else {
-          Parse[] parses = parseLine(line, parser, numParses);
-          
-          for (int pi=0,pn=parses.length;pi<pn;pi++) {
-            if (showTopK) {
-              System.out.print(pi+" "+parses[pi].getProb()+" ");
+      Integer beamSize = CmdLineUtil.getIntParameter("-bs", args);
+      if (beamSize == null)
+          beamSize = AbstractBottomUpParser.defaultBeamSize;
+
+      Integer numParses = CmdLineUtil.getIntParameter("-k", args);
+      boolean showTopK;
+      if (numParses == null) {
+        numParses = 1;
+        showTopK = false;
+      }
+      else {
+        showTopK = true;
+      }
+
+      Double advancePercentage = CmdLineUtil.getDoubleParameter("-ap", args);
+
+      if (advancePercentage == null)
+        advancePercentage = AbstractBottomUpParser.defaultAdvancePercentage;
+
+      opennlp.tools.parser.Parser parser =
+          ParserFactory.create(model, beamSize, advancePercentage);
+
+      ObjectStream<String> lineStream =
+        new PlainTextByLineStream(new InputStreamReader(System.in));
+
+      PerformanceMonitor perfMon = new PerformanceMonitor(System.err, "sent");
+      perfMon.start();
+
+      try {
+        String line;
+        while ((line = lineStream.read()) != null) {
+          if (line.length() == 0) {
+            System.out.println();
+          }
+          else {
+            Parse[] parses = parseLine(line, parser, numParses);
+
+            for (int pi=0,pn=parses.length;pi<pn;pi++) {
+              if (showTopK) {
+                System.out.print(pi+" "+parses[pi].getProb()+" ");
+              }
+
+              parses[pi].show();
+
+              perfMon.incrementCounter();
-            
-            parses[pi].show();
-            
-            perfMon.incrementCounter();
-    } 
-    catch (IOException e) {
-      CmdLineUtil.handleStdinIoError(e);
+      catch (IOException e) {
+        CmdLineUtil.handleStdinIoError(e);
+      }
+
+      perfMon.stopAndPrintFinalResult();
-    
-    perfMon.stopAndPrintFinalResult();
