OPENNLP-541:  It was not working correctly for some longer chunks, sometimes it would create a new chunk instead of continuing it. Also, I changed a little the visibility and created some methods to make it easier to customize this formatter.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1396396 13f79535-47bb-0310-9956-ffa450edef68

-	private final ObjectStream<ADSentenceStream.Sentence> adSentenceStream;
+	protected final ObjectStream<ADSentenceStream.Sentence> adSentenceStream;
+    public static final String OTHER = "O";
+
-	private void processRoot(Node root, List<String> sentence, List<String> tags,
+	protected void processRoot(Node root, List<String> sentence, List<String> tags,
-					processLeaf((Leaf) elements[i], false, "O", sentence, tags, target);
+					processLeaf((Leaf) elements[i], false, OTHER, sentence, tags, target);
-	private void processNode(Node node, List<String> sentence, List<String> tags,
-			List<String> target, String inheritedTag) {
-		String phraseTag = getChunkTag(node.getSyntacticTag());
-		
-		boolean inherited = false;
-		if(phraseTag.equals("O") && inheritedTag != null) {
-		  phraseTag = inheritedTag;
-		  inherited = true;
-		}
+    private void processNode(Node node, List<String> sentence, List<String> tags,
+        List<String> target, String inheritedTag) {
+    String phraseTag = getChunkTag(node.getSyntacticTag());
+    
+    boolean inherited = false;
+    if(phraseTag.equals(OTHER) && inheritedTag != null) {
+      phraseTag = inheritedTag;
+      inherited = true;
+    }
-		TreeElement[] elements = node.getElements();
-		for (int i = 0; i < elements.length; i++) {
-			if (elements[i].isLeaf()) {
-				boolean isIntermediate = false;
-				if ( i > 0 && elements[i - 1].isLeaf() && phraseTag != null && !phraseTag.equals("O")) {
-					isIntermediate = true;
-				}
-				if(inherited && target.size() > 0 && target.get(target.size() - 1).endsWith(phraseTag)) {
-				  isIntermediate = true;
-				}
-				processLeaf((Leaf) elements[i], isIntermediate, phraseTag, sentence,
-						tags, target);
-			} else {
-				processNode((Node) elements[i], sentence, tags, target, phraseTag);
-			}
-		}
-	}
+    TreeElement[] elements = node.getElements();
+    for (int i = 0; i < elements.length; i++) {
+        if (elements[i].isLeaf()) {
+            boolean isIntermediate = false;
+            String tag = phraseTag;
+            Leaf leaf = (Leaf) elements[i];
+            
+            if(isIntermediate(tags, target, phraseTag) && (inherited || i > 0)) {
+                  isIntermediate = true;
+            }
+            if(!isIncludePunctuations() && leaf.getFunctionalTag() == null &&
+                (
+                    !( i + 1 < elements.length && elements[i+1].isLeaf() ) ||
+                    !( i > 0 && elements[i - 1].isLeaf() )
+                ) 
+              ){
+              isIntermediate = false;
+              tag = OTHER;
+            }
+            processLeaf(leaf, isIntermediate, tag, sentence,
+                    tags, target);
+        } else {
+            int before = target.size();
+            processNode((Node) elements[i], sentence, tags, target, phraseTag);
+            
+            // if the child node was of a different type we should break the chunk sequence
+            for (int j = target.size() - 1; j >= before; j--) {
+              if(!target.get(j).endsWith("-" + phraseTag)) {
+                phraseTag = OTHER;
+                break;
+              }
+            }
+        }
+    }
+}
-	private void processLeaf(Leaf leaf, boolean isIntermediate, String phraseTag,
+
+  protected void processLeaf(Leaf leaf, boolean isIntermediate, String phraseTag,
-		
-		
-				&& phraseTag.equals("O")) {
-			if(leaf.getFunctionalTag().equals("v-fin")) {
-				phraseTag = "VP";
-			} else if(leaf.getFunctionalTag().equals("n")) {
-				phraseTag = "NP";
-			}
+				&& phraseTag.equals(OTHER)) {
+		  phraseTag = getPhraseTagFromPosTag(leaf.getFunctionalTag());
-		if (!phraseTag.equals("O")) {
+		if (!phraseTag.equals(OTHER)) {
+  protected String getPhraseTagFromPosTag(String functionalTag) {
+    if (functionalTag.equals("v-fin")) {
+      return "VP";
+    } else if (functionalTag.equals("n")) {
+      return "NP";
+    }
+    return OTHER;
+  }
+
-    return "O";
+    return OTHER;
-  private String getChunkTag(String tag) {
-		
-		String phraseTag = tag.substring(tag.lastIndexOf(":") + 1);
+  protected String getChunkTag(String tag) {
-		// maybe we should use only np, vp and pp, but will keep ap and advp.
+    String phraseTag = tag.substring(tag.lastIndexOf(":") + 1);
+
+    while (phraseTag.endsWith("-")) {
+      phraseTag = phraseTag.substring(0, phraseTag.length() - 1);
+    }
+
+    // maybe we should use only np, vp and pp, but will keep ap and advp.
-        || phraseTag.equals("advp")) {
+        || phraseTag.equals("advp") || phraseTag.equals("adjp")) {
-      phraseTag = "O";
+      phraseTag = OTHER;
-		return phraseTag;
-	}
+    return phraseTag;
+  }
+	
+  protected boolean isIncludePunctuations() {
+    return false;
+  }
+
+  protected boolean isIntermediate(List<String> tags, List<String> target,
+      String phraseTag) {
+    return target.size() > 0
+        && target.get(target.size() - 1).endsWith("-" + phraseTag);
+  }
