OPENNLP-482: Changed TokenizerModel and TokenizerME to support factories. Implemented TokenizerFactory

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1304647 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.util.BaseToolFactory;
-  private static final String ABBREVIATIONS_ENTRY_NAME = "abbreviations.dictionary";
-  private static final String USE_ALPHA_NUMERIC_OPTIMIZATION =
-      "useAlphaNumericOptimization";
+  /**
+   * Initializes the current instance.
+   * 
+   * @param languageCode the language of the natural text
+   * @param tokenizerModel the model
+   * @param manifestInfoEntries the manifest
+   * @param tokenizerFactory the factory
+   */
+  public TokenizerModel(String languageCode, AbstractModel tokenizerModel,
+      Map<String, String> manifestInfoEntries, TokenizerFactory tokenizerFactory) {
+    super(COMPONENT_NAME, languageCode, manifestInfoEntries, tokenizerFactory);
+    artifactMap.put(TOKENIZER_MODEL_ENTRY, tokenizerModel);
+    checkArtifactMap();
+  }
+   * 
+   * @deprecated Use
+   *             {@link TokenizerModel#TokenizerModel(String, AbstractModel, Map, TokenizerFactory)}
+   *             instead and pass in a {@link TokenizerFactory}.
-    super(COMPONENT_NAME, language, manifestInfoEntries);
-
-    artifactMap.put(TOKENIZER_MODEL_ENTRY, tokenizerMaxentModel);
-
-    setManifestProperty(USE_ALPHA_NUMERIC_OPTIMIZATION,
-        Boolean.toString(useAlphaNumericOptimization));
-
-    // Abbreviations are optional
-    if (abbreviations != null)
-      artifactMap.put(ABBREVIATIONS_ENTRY_NAME, abbreviations);
-    checkArtifactMap();
+    this(language, tokenizerMaxentModel, manifestInfoEntries, 
+        new TokenizerFactory(language, abbreviations, useAlphaNumericOptimization, null));
+   * 
+   * @deprecated Use
+   *             {@link TokenizerModel#TokenizerModel(String, AbstractModel, Map, TokenizerFactory)}
+   *             instead and pass in a {@link TokenizerFactory}.
+   * 
+   * @deprecated Use
+   *             {@link TokenizerModel#TokenizerModel(String, AbstractModel, Map, TokenizerFactory)}
+   *             instead and pass in a {@link TokenizerFactory}.
+  }
-    if (getManifestProperty(USE_ALPHA_NUMERIC_OPTIMIZATION) == null) {
-      throw new InvalidFormatException("The " + USE_ALPHA_NUMERIC_OPTIMIZATION + " parameter " +
-          "cannot be found!");
-    }
-    
-    Object abbreviationsEntry = artifactMap.get(ABBREVIATIONS_ENTRY_NAME);
+  public TokenizerFactory getFactory() {
+    return (TokenizerFactory) this.toolFactory;
+  }
-    if (abbreviationsEntry != null && !(abbreviationsEntry instanceof Dictionary)) {
-      throw new InvalidFormatException("Abbreviations dictionary has wrong type!");
-    }
+  @Override
+  protected Class<? extends BaseToolFactory> getDefaultFactory() {
+    return TokenizerFactory.class;
-    return (Dictionary) artifactMap.get(ABBREVIATIONS_ENTRY_NAME);
+    if (getFactory() != null) {
+      return getFactory().getAbbreviationDictionary();
+    }
+    return null;
-    String optimization = getManifestProperty(USE_ALPHA_NUMERIC_OPTIMIZATION);
-
-    return Boolean.parseBoolean(optimization);
+    if (getFactory() != null) {
+      return getFactory().isUseAlphaNumericOptmization();
+    }
+    return false;
