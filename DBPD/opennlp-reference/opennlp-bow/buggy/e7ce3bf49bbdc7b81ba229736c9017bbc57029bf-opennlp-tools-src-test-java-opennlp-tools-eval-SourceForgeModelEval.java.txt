OPENNLP-1118: Adds data verification for eval tests.

-import opennlp.tools.util.PlainTextByLineStream;
-public class SourceForgeModelEval {
+public class SourceForgeModelEval extends AbstractEvalTest {
-  public static void ensureTestDataIsCorrect() throws IOException {
-    MessageDigest digest = EvalUtil.createDigest();
-
-    try (ObjectStream<String> lines = new PlainTextByLineStream(
-        new MarkableFileInputStreamFactory(new File(EvalUtil.getOpennlpDataDir(),
-            "leipzig/eng_news_2010_300K-sentences.txt")), StandardCharsets.UTF_8)) {
-
-      String line;
-      while ((line = lines.read()) != null) {
-        digest.update(line.getBytes(StandardCharsets.UTF_8));
-      }
-
-      Assert.assertEquals(new BigInteger("248567841356936801447294643695012852392"),
-          new BigInteger(1, digest.digest()));
-    }
+  public static void verifyTrainingData() throws Exception {
+    verifyTrainingData(new LeipzigDoccatSampleStream("eng", 25,
+            new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
+                    "leipzig/eng_news_2010_300K-sentences.txt"))), 
+        new BigInteger("248567841356936801447294643695012852392"));
-  public void evalSentenceModel() throws IOException {
+  public void evalSentenceModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-sent.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-sent.bin"));
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-        new MarkableFileInputStreamFactory(new File(EvalUtil.getOpennlpDataDir(),
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
-  public void evalTokenModel() throws IOException {
+  public void evalTokenModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-token.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-token.bin"));
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-        new MarkableFileInputStreamFactory(new File(EvalUtil.getOpennlpDataDir(),
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
-        new MarkableFileInputStreamFactory(new File(EvalUtil.getOpennlpDataDir(),
+        new MarkableFileInputStreamFactory(new File(getOpennlpDataDir(),
-      throws IOException {
+      throws Exception {
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-  public void evalNerDateModel() throws IOException {
+  public void evalNerDateModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-date.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-date.bin"));
-  public void evalNerLocationModel() throws IOException {
+  public void evalNerLocationModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-location.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-location.bin"));
-  public void evalNerMoneyModel() throws IOException {
+  public void evalNerMoneyModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-money.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-money.bin"));
-  public void evalNerOrganizationModel() throws IOException {
+  public void evalNerOrganizationModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-organization.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-organization.bin"));
-  public void evalNerPercentageModel() throws IOException {
+  public void evalNerPercentageModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-percentage.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-percentage.bin"));
-  public void evalNerPersonModel() throws IOException {
+  public void evalNerPersonModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-person.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-person.bin"));
-  public void evalNerTimeModel() throws IOException {
+  public void evalNerTimeModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-ner-time.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-ner-time.bin"));
-  public void evalChunkerModel() throws IOException {
+  public void evalChunkerModel() throws Exception {
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-pos-perceptron.bin")));
+        new File(getOpennlpDataDir(), "models-sf/en-pos-perceptron.bin")));
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-chunker.bin")));
+        new File(getOpennlpDataDir(), "models-sf/en-chunker.bin")));
-  private void evalPosModel(POSModel model, BigInteger expectedHash) throws IOException {
+  private void evalPosModel(POSModel model, BigInteger expectedHash) throws Exception {
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
-  public void evalMaxentModel() throws IOException {
+  public void evalMaxentModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-pos-maxent.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-pos-maxent.bin"));
-  public void evalPerceptronModel() throws IOException {
+  public void evalPerceptronModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-pos-perceptron.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-pos-perceptron.bin"));
-  public void evalParserModel() throws IOException {
+  public void evalParserModel() throws Exception {
-        new File(EvalUtil.getOpennlpDataDir(), "models-sf/en-parser-chunking.bin"));
+        new File(getOpennlpDataDir(), "models-sf/en-parser-chunking.bin"));
-    MessageDigest digest = EvalUtil.createDigest();
+    MessageDigest digest = MessageDigest.getInstance(HASH_ALGORITHM);
