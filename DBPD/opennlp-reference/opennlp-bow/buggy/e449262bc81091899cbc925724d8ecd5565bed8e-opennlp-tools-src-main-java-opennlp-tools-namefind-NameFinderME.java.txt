OPENNLP-658 The sequence codec is now configurable in the name finder.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1575219 13f79535-47bb-0310-9956-ffa450edef68

-  private static SequenceCodec<String> seqCodec = new BioCodec();
+  private SequenceCodec<String> seqCodec = new BioCodec();
+    seqCodec = model.createSequenceCodec();
+    
-       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources) throws IOException {
-
-     // SequenceCodec seqCodec = new BiolouCodec();
+       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources,
+       SequenceCodec<String> seqCodec) throws IOException {
+     
+     // TODO: Pass the sequence codec down to the model! We will just store the class
+     // name in the model, and then always use the extension loader to create it!
+     // The cmd line interface, will replace shortcuts with actual class names.
+     
-           resources, manifestInfoEntries);
+           resources, manifestInfoEntries, seqCodec);
-           resources, manifestInfoEntries);
+           resources, manifestInfoEntries, seqCodec);
+   public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples,
+       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources) throws IOException {
+     return train(languageCode, type, samples, trainParams, generator, resources, new BioCodec());
+   }
+   
-      byte[] featureGeneratorBytes, final Map<String, Object> resources)
+      byte[] featureGeneratorBytes, final Map<String, Object> resources, SequenceCodec<String> seqCodec)
-        createFeatureGenerator(featureGeneratorBytes, resources), resources);
+        createFeatureGenerator(featureGeneratorBytes, resources), resources, seqCodec);
+  public static TokenNameFinderModel train(String languageCode, String type,
+      ObjectStream<NameSample> samples, TrainingParameters trainParams,
+      byte[] featureGeneratorBytes, final Map<String, Object> resources)
+      throws IOException {
+    return train(languageCode, type, samples, trainParams, featureGeneratorBytes,
+        resources, new BioCodec());
+  }
