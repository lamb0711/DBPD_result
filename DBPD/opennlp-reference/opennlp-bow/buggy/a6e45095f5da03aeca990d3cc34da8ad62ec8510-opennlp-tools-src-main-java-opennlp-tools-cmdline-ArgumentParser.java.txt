OPENNLP-381 Error messages for command line arguments introduced into command line tools. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1202610 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
-   * 
-   * @param args
-   * @param argProxyInterface
-   * @return
+   *
+   * @param args command line arguments
+   * @param argProxyInterface interface with parameters description
+   * @return true, if arguments are valid
+    return null == validateArgumentsLoudly(args, argProxyInterface);
+  }
+
+  /**
+   * Tests if the arguments are correct or incorrect.
+   * 
+   * @param args command line arguments
+   * @param argProxyInterface interface with parameters description
+   * @return null, if arguments are valid or error message otherwise
+   */
+  public static <T> String validateArgumentsLoudly(String args[], Class<T> argProxyInterface) {
-    if (args.length < 2 || args.length % 2 != 0)
-      return false;
+    if (args.length < 2 || args.length % 2 != 0) {
+      return "Error: Number of parameters must be at least 2 and always be even";
+    }
-    
+
+    List<String> parameters = new ArrayList<String>(Arrays.asList(args));
-      
-      String valueString = CmdLineUtil.getParameter(
-          methodNameToParameter(method.getName()), args);
-      
+      String paramName = methodNameToParameter(method.getName());
+      int paramIndex = CmdLineUtil.getParameterIndex(paramName, args);
+      String valueString = CmdLineUtil.getParameter(paramName, args);
-        
-        // missing mandatory parameter
-        if (optionalParam == null)
-          return false;
+
+        if (optionalParam == null) {
+          if (-1 < paramIndex) {
+            return "Error: Missing mandatory parameter value: " + paramName;
+          } else {
+            return "Error: Missing mandatory parameter: " + paramName;
+          }
+        } else {
+          parameters.remove("-" + paramName);
+        }
+        parameters.remove(paramName);
+        parameters.remove(valueString);
-    if (args.length / 2 != argumentCount)
-      return false;
+    if (args.length / 2 > argumentCount) {
+      return "Error: Unrecognized parameters encountered: " + parameters.toString();
+    }
-    return true;
+    return null;
-   * @param args
-   * @param argProxyInterface
+   * @param args arguments
+   * @param argProxyInterface interface with parameters description
-   * @return
+   * @return parsed parameters
