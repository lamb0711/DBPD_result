OPENNLP-227 Updated Parser trainer tool

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1148012 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.cmdline.ArgumentParser;
+import opennlp.tools.cmdline.TrainingToolParams;
+  
+  interface TrainerToolParams extends TrainingParams, TrainingToolParams{
+
+  }
-    return "Usage: " + CLI.CMD + " " + getName() + " " + TrainingParameters.getParameterUsage() + 
-        " -head-rules head_rules -data trainingData -model model\n" + TrainingParameters.getDescription();
+    return "Usage: " + CLI.CMD + " " + getName() + " "
+      + ArgumentParser.createUsage(TrainerToolParams.class);
+  static ParserType parseParserType(String typeAsString) {
+    ParserType type = null;
+    if(typeAsString != null && typeAsString.length() > 0) {
+      type = ParserType.parse(typeAsString);
+      if(type == null) {
+        System.err.println("ParserType training parameter is invalid!");
+        throw new TerminateToolException(-1);
+      }
+    }
+    
+    return type;
+  }
+  
-    if (args.length < 10) {
-      System.out.println(getHelp());
+    if (!ArgumentParser.validateArguments(args, TrainerToolParams.class)) {
+      System.err.println(getHelp());
-
-    TrainingParameters parameters = new TrainingParameters(args);
-    if(!parameters.isValid()) {
-      System.out.println(getHelp());
-      throw new TerminateToolException(1);
-    } 
+    TrainerToolParams params = ArgumentParser.parse(args,
+        TrainerToolParams.class); 
-      CmdLineUtil.loadTrainingParameters(CmdLineUtil.getParameter("-params", args), true);
+      CmdLineUtil.loadTrainingParameters(params.getParams(), true);
-    ObjectStream<Parse> sampleStream = openTrainingData(new File(CmdLineUtil.getParameter("-data", args)), parameters.getEncoding());
+    ObjectStream<Parse> sampleStream = openTrainingData(params.getData(), params.getEncoding());
-    File modelOutFile = new File(CmdLineUtil.getParameter("-model", args));
+    File modelOutFile = params.getModel();
-          new InputStreamReader(new FileInputStream(new File(CmdLineUtil.getParameter("-head-rules", args))), 
-          parameters.getEncoding()));
+          new InputStreamReader(new FileInputStream(params.getHeadRules()),
+              params.getEncoding()));
+      
+      ParserType type = parseParserType(params.getParserType());
-        if (ParserType.CHUNKING.equals(parameters.getParserType())) {
+        if (ParserType.CHUNKING.equals(type)) {
-              parameters.getLanguage(), sampleStream, rules, 
-              parameters.getNumberOfIterations(), parameters.getCutoff());
+              params.getLang(), sampleStream, rules, 
+              params.getIterations(), params.getCutoff());
-        else if (ParserType.TREEINSERT.equals(parameters.getParserType())) {
-          model = opennlp.tools.parser.treeinsert.Parser.train(parameters.getLanguage(), sampleStream, rules, parameters.getNumberOfIterations(), 
-              parameters.getCutoff());
+        else if (ParserType.TREEINSERT.equals(type)) {
+          model = opennlp.tools.parser.treeinsert.Parser.train(params.getLang(), sampleStream, rules, params.getIterations(), 
+              params.getCutoff());
-        if (ParserType.CHUNKING.equals(parameters.getParserType())) {
+        if (ParserType.CHUNKING.equals(type)) {
-              parameters.getLanguage(), sampleStream, rules, 
+              params.getLang(), sampleStream, rules, 
-        else if (ParserType.TREEINSERT.equals(parameters.getParserType())) {
-          model = opennlp.tools.parser.treeinsert.Parser.train(parameters.getLanguage(), sampleStream, rules,
+        else if (ParserType.TREEINSERT.equals(type)) {
+          model = opennlp.tools.parser.treeinsert.Parser.train(params.getLang(), sampleStream, rules,
