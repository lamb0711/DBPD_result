OPENNLp-118 Replaced the EventStream with ObjectStream<Event>

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1567990 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Iterator;
-  private List<NameSample> samples;
+  private ObjectStream<NameSample> psi;
+    this.psi = psi;
-    samples = new ArrayList<NameSample>();
-    
-    NameSample sample;
-    while((sample = psi.read()) != null) {
-      samples.add(sample);
-    }
-    
-    System.err.println("Got "+samples.size()+" sequences");
-    
-  
-  @SuppressWarnings("unchecked")
-  public Iterator<Sequence> iterator() {
-    return new NameSampleSequenceIterator(samples.iterator(), useOutcomes);
-  }
+  @Override
+  public Sequence read() throws IOException {
+    NameSample sample = psi.read();
+    if (sample != null) {
+      String sentence[] = sample.getSentence();
+      String tags[] = NameFinderEventStream.generateOutcomes(sample.getNames(), null, sentence.length);
+      Event[] events = new Event[sentence.length];
+      
+      for (int i=0; i < sentence.length; i++) {
-}
-
-class NameSampleSequenceIterator implements Iterator<Sequence> {
-
-  private Iterator<NameSample> psi;
-  private NameContextGenerator cg;
-  private boolean useOutcomes;
-  
-  public NameSampleSequenceIterator(Iterator<NameSample> psi, boolean useOutcomes) {
-    this.psi = psi;
-    this.useOutcomes = useOutcomes;
-    cg = new DefaultNameContextGenerator(null);
-  }
-  
-  public boolean hasNext() {
-    return psi.hasNext();
-  }
-
-  public Sequence<NameSample> next() {
-    NameSample sample = psi.next();
-    
-    String sentence[] = sample.getSentence();
-    String tags[] = NameFinderEventStream.generateOutcomes(sample.getNames(), null, sentence.length);
-    Event[] events = new Event[sentence.length];
-    
-    for (int i=0; i < sentence.length; i++) {
-
-      // it is safe to pass the tags as previous tags because
-      // the context generator does not look for non predicted tags
-      String[] context;
-      if (useOutcomes) {
-        context = cg.getContext(i, sentence, tags, null);
+        // it is safe to pass the tags as previous tags because
+        // the context generator does not look for non predicted tags
+        String[] context;
+        if (useOutcomes) {
+          context = pcg.getContext(i, sentence, tags, null);
+        }
+        else {
+          context = pcg.getContext(i, sentence, null, null);
+        }
+        
+        events[i] = new Event(tags[i], context);
+      }
+      Sequence<NameSample> sequence = new Sequence<NameSample>(events,sample);
+      return sequence;
-        context = cg.getContext(i, sentence, null, null);
+        return null;
-      
-      events[i] = new Event(tags[i], context);
-    }
-    Sequence<NameSample> sequence = new Sequence<NameSample>(events,sample);
-    return sequence;
-  }
-
-  public void remove() {
-    throw new UnsupportedOperationException();
+  @Override
+  public void reset() throws IOException, UnsupportedOperationException {
+    psi.reset();
+  }
+  
+  @Override
+  public void close() throws IOException {
+    psi.close();
+  }
