OPENNLP-611
GeoHashBinScorer has java 1.7 dependant objects.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1536650 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
- * Links names to the USGS gazateer
+ * Links names to the USGS gazateer that resides in a database
-  private Boolean filterCountryContext;
-  public ArrayList<BaseLink> find(String locationText, Span span, Map<String, Set<Integer>> countryHits, EntityLinkerProperties properties) {
+  public ArrayList<BaseLink> find(String locationText, Span span, EntityLinkerProperties properties) {
-      filterCountryContext = Boolean.valueOf(properties.getProperty("geoentitylinker.filter_by_country_context", "false"));
-      //the usgs gazateer only has us geonames, so only use it if the user doesn't care about country isolation or the hits contain us
-      if (countryHits.keySet().contains("us") || !filterCountryContext) {
-        if (con == null) {
-          con = getMySqlConnection(properties);
-        }
-        String thresh = properties.getProperty("mysqlusgsgazscorethresh", "10");
-        int threshhold = -1;
-        if (!thresh.matches("[azAZ]")) {
-          threshhold = Integer.valueOf(thresh);
-        }
-        returnlocs.addAll(this.searchGaz(locationText, threshhold, countryHits.keySet(), properties));
+      if (con == null) {
+        con = getMySqlConnection(properties);
+      String thresh = properties.getProperty("usgs.gaz.rowsreturned", "5");
+      int threshhold = -1;
+      if (!thresh.matches("[azAZ]")) {
+        threshhold = Integer.valueOf(thresh);
+      }
+      returnlocs.addAll(this.searchGaz(locationText, threshhold, properties));
+
-  protected Connection getMySqlConnection(EntityLinkerProperties properties) throws Exception {
-    String driver = properties.getProperty("mysql.driver", "org.gjt.mm.mysql.Driver");
-    String url = properties.getProperty("mysql.url", "jdbc:mysql://127.0.0.1:3306/world");
-    String username = properties.getProperty("mysql.username", "root");
-    String password = properties.getProperty("mysql.password", "?");
+  private Connection getMySqlConnection(EntityLinkerProperties properties) throws Exception {
+    String driver = properties.getProperty("db.driver", "org.gjt.mm.mysql.Driver");
+    String url = properties.getProperty("db.url", "jdbc:mysql://127.0.0.1:3306/world");
+    String username = properties.getProperty("db.username", "root");
+    String password = properties.getProperty("db.password", "?");
-  private ArrayList<MySQLUSGSGazEntry> searchGaz(String searchString, int matchthresh, Set<String> countryCodes, EntityLinkerProperties properties) throws SQLException, Exception {
+  /**
+   *
+   * @param searchString the name to look up in the gazateer
+   * @param rowsReturned number of rows to return
+   * @param properties   EntityLinkerProperties that identifies the database
+   *                     connection properties
+   *
+   * @return
+   * @throws SQLException
+   * @throws Exception
+   */
+  public ArrayList<MySQLUSGSGazEntry> searchGaz(String searchString, int rowsReturned, EntityLinkerProperties properties) throws SQLException, Exception {
-    cs.setInt(2, matchthresh);
+    cs.setInt(2, rowsReturned);
-
-
-        //set the base link data
+        //set the baselink data
-        s.getScoreMap().put("mysqlfulltext", s.getRank());
+        s.getScoreMap().put("dbfulltext", s.getRank());
-  private Set<String> getCountryCodes(List<CountryContextHit> hits) {
-    Set<String> ccs = new HashSet<String>();
-    for (CountryContextHit hit : hits) {
-      ccs.add(hit.getCountryCode().toLowerCase());
-    }
-    return ccs;
-  }
-
