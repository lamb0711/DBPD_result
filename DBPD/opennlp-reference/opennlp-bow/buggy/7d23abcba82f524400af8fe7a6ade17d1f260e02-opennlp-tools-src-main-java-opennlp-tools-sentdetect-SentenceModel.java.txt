OPENNLP-434: The code that handles SenteceDetector resources and configuration moved to SentenceDetectorFactory

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1292630 13f79535-47bb-0310-9956-ffa450edef68

-  private static final String ABBREVIATIONS_ENTRY_NAME = "abbreviations.dictionary";
-  private static final String EOS_CHARACTERS_PROPERTY = "eosCharacters";
-
-  private static final String TOKEN_END_PROPERTY = "useTokenEnd";
-      boolean useTokenEnd, Dictionary abbreviations, char[] eosCharacters, Map<String, String> manifestInfoEntries) {
-
-    super(COMPONENT_NAME, languageCode, manifestInfoEntries);
-
+      Map<String, String> manifestInfoEntries, SentenceDetectorFactory sdFactory) {
+    super(COMPONENT_NAME, languageCode, manifestInfoEntries, sdFactory);
-
-    setManifestProperty(TOKEN_END_PROPERTY, Boolean.toString(useTokenEnd));
-
-    // Abbreviations are optional
-    if (abbreviations != null)
-      artifactMap.put(ABBREVIATIONS_ENTRY_NAME, abbreviations);
-
-    // EOS characters are optional
-    if (eosCharacters != null)
-      setManifestProperty(EOS_CHARACTERS_PROPERTY,
-          eosCharArrayToString(eosCharacters));
+  /**
+   * TODO: was added in 1.5.3 -> remove
+   * @deprecated Use
+   *             {@link #SentenceModel(String, AbstractModel, Map, SentenceDetectorFactory)}
+   *             instead and pass in a {@link SentenceDetectorFactory}
+   */
+  public SentenceModel(String languageCode, AbstractModel sentModel,
+      boolean useTokenEnd, Dictionary abbreviations, char[] eosCharacters, Map<String, String> manifestInfoEntries) {
+    this(languageCode, sentModel, manifestInfoEntries,
+        new SentenceDetectorFactory(languageCode, useTokenEnd, abbreviations,
+            eosCharacters));
+  }
+
+  /**
+   * TODO: was added in 1.5.3 -> remove
+   * 
+   * @deprecated Use
+   *             {@link #SentenceModel(String, AbstractModel, Map, SentenceDetectorFactory)}
+   *             instead and pass in a {@link SentenceDetectorFactory}
+   */
-    
-    if (getManifestProperty(TOKEN_END_PROPERTY) == null)
-      throw new InvalidFormatException(TOKEN_END_PROPERTY + " is a mandatory property!");
+  }
-    Object abbreviationsEntry = artifactMap.get(ABBREVIATIONS_ENTRY_NAME);
-
-    if (abbreviationsEntry != null && !(abbreviationsEntry instanceof Dictionary)) {
-      throw new InvalidFormatException("Abbreviations dictionary has wrong type!");
-    }
+  public SentenceDetectorFactory getFactory() {
+    return (SentenceDetectorFactory) this.toolFactory;
-    return (Dictionary) artifactMap.get(ABBREVIATIONS_ENTRY_NAME);
+    if (getFactory() != null) {
+      return getFactory().getAbbreviationDictionary();
+    }
+    return null;
-    return Boolean.parseBoolean(getManifestProperty(TOKEN_END_PROPERTY));
+    if (getFactory() != null) {
+      return getFactory().isUseTokenEnd();
+    }
+    return true;
-    String prop = getManifestProperty(EOS_CHARACTERS_PROPERTY);
-    if (prop != null)
-      return eosStringToCharArray(getManifestProperty(EOS_CHARACTERS_PROPERTY));
-    else
-      return null;
-  }
-
-  private String eosCharArrayToString(char[] eosCharacters) {
-    String eosString = "";
-    for (int i = 0; i < eosCharacters.length; i++)
-      eosString += eosCharacters[i];
-    return eosString;
-  }
-
-  private char[] eosStringToCharArray(String eosCharacters) {
-    return eosCharacters.toCharArray();
+    if (getFactory() != null) {
+      return getFactory().getEOSCharacters();
+    }
+    return null;
