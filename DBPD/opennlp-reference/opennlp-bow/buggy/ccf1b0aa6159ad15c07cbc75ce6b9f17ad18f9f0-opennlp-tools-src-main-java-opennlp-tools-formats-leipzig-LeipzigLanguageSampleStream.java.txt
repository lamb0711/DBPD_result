OPENNLP-1119 Select sentences randomly and shuffle order of samples

The samples should be build from randomly picked lines taken
from a sentences file. The samples in the stream should be shuffled.

+import java.nio.file.Files;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Random;
+import java.util.Set;
+import java.util.stream.IntStream;
-    private final String lang;
-    private int sentencesPerSample;
-    private int numberOfSamples;
-    private ObjectStream<String> lineStream;
-    private int sampleCount;
+    private final String lang;
+
+    private Iterator<String> lineIterator;
-      this.lang = sentencesFile.getName().substring(0, 3);
-      this.sentencesPerSample = sentencesPerSample;
-      this.numberOfSamples = numberOfSamples;
-      lineStream = new PlainTextByLineStream(new MarkableFileInputStreamFactory(sentencesFile),
-          StandardCharsets.UTF_8);
+      this.lang = lang;
+
+      // The file name contains the number of lines, but to make this more stable
+      // the file is once scanned for the count even tough this is slower
+      int totalLineCount = (int) Files.lines(sentencesFile.toPath()).count();
+
+      List<Integer> indexes = IntStream.range(0, totalLineCount)
+          .boxed().collect(Collectors.toList());
+
+      Collections.shuffle(indexes, random);
+
+      Set<Integer> selectedLines = new HashSet<>(
+          indexes.subList(0, sentencesPerSample * numberOfSamples));
+
+      List<String> sentences = new ArrayList<>();
+
+      try (ObjectStream<String> lineStream = new PlainTextByLineStream(
+          new MarkableFileInputStreamFactory(sentencesFile), StandardCharsets.UTF_8)) {
+
+        int lineIndex = 0;
+        String line;
+        while ((line = lineStream.read()) != null) {
+
+          int tabIndex = line.indexOf('\t');
+          if (tabIndex != -1) {
+            if (selectedLines.contains(lineIndex)) {
+              sentences.add(line);
+            }
+          }
+
+          lineIndex++;
+        }
+      }
+
+      Collections.shuffle(sentences, random);
+
+      lineIterator = sentences.iterator();
+      StringBuilder sampleString = new StringBuilder();
-      if (sampleCount < numberOfSamples) {
-        StringBuilder sampleString = new StringBuilder();
+      int count = 0;
+      while (count < sentencesPerSample && lineIterator.hasNext()) {
-        int count = 0;
-        String line;
-        while (count < sentencesPerSample && (line = lineStream.read()) != null) {
+        String line = lineIterator.next();
+        int textStart = line.indexOf('\t') + 1;
-          int textStart = line.indexOf('\t') + 1;
+        sampleString.append(line.substring(textStart) + " ");
-          // TODO: It should it be changed to contain an array of sample strings ?!
-          sampleString.append(line.substring(textStart) + " ");
-
-          count++;
-        }
-
-        if (sampleString.length() > 0) {
-          sampleCount++;
-          return new LanguageSample(new Language(lang), sampleString);
-        }
+        count++;
+
+      if (sampleString.length() > 0) {
+        return new LanguageSample(new Language(lang), sampleString);
+      }
+
+  private final Random random;
+
-    // TODO: Use a FileFilter to make this more reliable in case there are files which should be ignored
+    // TODO: Use a FileFilter to make this more reliable in case there are
+    //       files which should be ignored or are shorter than 3 chars for the lang detect substring
+    random = new Random(23);
+
-        System.out.println(sentencesFile);
+
-
-  public static void main(String[] args) throws Exception {
-    new LeipzigLanguageSampleStream(new File("/home/blue/opennlp-data-dir/leipzig-lang"),
-        10, 100000);
-  }
