OPENNLP-1118: Adds data verification for eval tests.

+import java.math.BigInteger;
+
+import org.junit.BeforeClass;
-public class Conll02NameFinderEval {
+public class Conll02NameFinderEval extends AbstractEvalTest {
-  private final File dutchTrainingFile;
-  private final File dutchTestAFile;
-  private final File dutchTestBFile;
+  private static File dutchTrainingFile;
+  private static File dutchTestAFile;
+  private static File dutchTestBFile;
+  private static File spanishTrainingFile;
+  private static File spanishTestAFile;
+  private static File spanishTestBFile;
+      
-  private final File spanishTrainingFile;
-  private final File spanishTestAFile;
-  private final File spanishTestBFile;
-
-  public Conll02NameFinderEval() {
-    dutchTrainingFile = new File(EvalUtil.getOpennlpDataDir(), "conll02/ner/data/ned.train");
-    dutchTestAFile = new File(EvalUtil.getOpennlpDataDir(), "conll02/ner/data/ned.testa");
-    dutchTestBFile = new File(EvalUtil.getOpennlpDataDir(), "conll02/ner/data/ned.testb");
-
-    spanishTrainingFile = new File(EvalUtil.getOpennlpDataDir(), "conll02/ner/data/esp.train");
-    spanishTestAFile = new File(EvalUtil.getOpennlpDataDir(), "conll02/ner/data/esp.testa");
-    spanishTestBFile = new File(EvalUtil.getOpennlpDataDir(), "conll02/ner/data/esp.testb");
-  }
-
-  private static TokenNameFinderModel train(File trainFile, LANGUAGE lang,
+  private TokenNameFinderModel train(File trainFile, LANGUAGE lang,
-  private static void eval(TokenNameFinderModel model, File testData, LANGUAGE lang,
+  private void eval(TokenNameFinderModel model, File testData, LANGUAGE lang,
+  
+  @BeforeClass
+  public static void verifyTrainingData() throws Exception {
+
+    dutchTrainingFile = new File(getOpennlpDataDir(), "conll02/ner/data/ned.train");
+    dutchTestAFile = new File(getOpennlpDataDir(), "conll02/ner/data/ned.testa");
+    dutchTestBFile = new File(getOpennlpDataDir(), "conll02/ner/data/ned.testb");
+    spanishTrainingFile = new File(getOpennlpDataDir(), "conll02/ner/data/esp.train");
+    spanishTestAFile = new File(getOpennlpDataDir(), "conll02/ner/data/esp.testa");
+    spanishTestBFile = new File(getOpennlpDataDir(), "conll02/ner/data/esp.testb");
+    
+    verifyTrainingData(new Conll02NameSampleStream(
+        LANGUAGE.NLD, new MarkableFileInputStreamFactory(dutchTrainingFile),
+          Conll02NameSampleStream.GENERATE_PERSON_ENTITIES),
+            new BigInteger("109687424525847313767541246922170457976"));
+    verifyTrainingData(new Conll02NameSampleStream(
+        LANGUAGE.NLD, new MarkableFileInputStreamFactory(dutchTestAFile),
+          Conll02NameSampleStream.GENERATE_PERSON_ENTITIES),
+            new BigInteger("12942966701628852910737840182656846323"));
+    verifyTrainingData(new Conll02NameSampleStream(
+        LANGUAGE.NLD, new MarkableFileInputStreamFactory(dutchTestBFile),
+          Conll02NameSampleStream.GENERATE_PERSON_ENTITIES),
+            new BigInteger("223206987942490952427646331013509976957"));
+    
+    verifyTrainingData(new Conll02NameSampleStream(
+        LANGUAGE.SPA, new MarkableFileInputStreamFactory(spanishTrainingFile),
+          Conll02NameSampleStream.GENERATE_PERSON_ENTITIES),
+            new BigInteger("226089384066775461905386060946810714487"));  
+    verifyTrainingData(new Conll02NameSampleStream(
+        LANGUAGE.SPA, new MarkableFileInputStreamFactory(spanishTestAFile),
+          Conll02NameSampleStream.GENERATE_PERSON_ENTITIES),
+            new BigInteger("313879596837181728494732341737647284762"));
+    verifyTrainingData(new Conll02NameSampleStream(
+        LANGUAGE.SPA, new MarkableFileInputStreamFactory(spanishTestBFile),
+          Conll02NameSampleStream.GENERATE_PERSON_ENTITIES),
+            new BigInteger("24037715705115461166858183817622459974"));
+
+  }
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
-    TrainingParameters params = EvalUtil.createPerceptronParams();
+    TrainingParameters params = createPerceptronParams();
-    TrainingParameters params = EvalUtil.createMaxentQnParams();
+    TrainingParameters params = createMaxentQnParams();
