OPENLP-24 Formated code to comply with conventions

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1063313 13f79535-47bb-0310-9956-ffa450edef68

-    public int outcome;
-    public int[] predIndexes;
-    public int seen = 1;            // the number of times this event
-                                    // has been seen.
+  public int outcome;
+  public int[] predIndexes;
+  public int seen = 1; // the number of times this event
+                       // has been seen.
-    public float[] values;
-    
-    public ComparableEvent(int oc, int[] pids, float[] values) {
-        outcome = oc;
-        if (values == null) {
-          Arrays.sort(pids);
-        }
-        else {
-          sort(pids,values);
-        }
-        this.values = values; //needs to be sorted like pids
-        predIndexes = pids;
+  public float[] values;
+
+  public ComparableEvent(int oc, int[] pids, float[] values) {
+    outcome = oc;
+    if (values == null) {
+      Arrays.sort(pids);
+    } else {
+      sort(pids, values);
-    
-    public ComparableEvent(int oc, int[] pids) {
-      this(oc,pids,null);
-    }
+    this.values = values; // needs to be sorted like pids
+    predIndexes = pids;
+  }
-    public int compareTo(Object o) {
-        ComparableEvent ce = (ComparableEvent)o;
-        if (outcome < ce.outcome) return -1;
-        else if (outcome > ce.outcome) return 1;
-	
-        int smallerLength = (predIndexes.length > ce.predIndexes.length?
-                             ce.predIndexes.length : predIndexes.length);
+  public ComparableEvent(int oc, int[] pids) {
+    this(oc, pids, null);
+  }
-        for (int i=0; i<smallerLength; i++) {
-            if (predIndexes[i] < ce.predIndexes[i]) return -1;
-            else if (predIndexes[i] > ce.predIndexes[i]) return 1;
-            if (values != null && ce.values != null) {
-              if (values[i] < ce.values[i]) return -1;
-              else if (values[i] > ce.values[i]) return 1;
-            }
-            else if (values != null) {
-              if (values[i] < 1)  return -1;
-              else if (values[i] > 1) return 1;
-            }
-            else if (ce.values != null) {
-              if (1 < ce.values[i]) return -1;
-              else if (1 > ce.values[i]) return 1;
-            }
-        }
+  public int compareTo(Object o) {
+    ComparableEvent ce = (ComparableEvent) o;
+    if (outcome < ce.outcome)
+      return -1;
+    else if (outcome > ce.outcome)
+      return 1;
+    int smallerLength = (predIndexes.length > ce.predIndexes.length ? ce.predIndexes.length
+        : predIndexes.length);
-        if (predIndexes.length < ce.predIndexes.length) return -1;
-        else if (predIndexes.length > ce.predIndexes.length) return 1;
-
-        return 0;
-    }
-
-    public String toString() {
-        StringBuffer s = new StringBuffer().append(outcome).append(":");
-        for (int i=0; i<predIndexes.length; i++) {
-          s.append(" ").append(predIndexes[i]);
-          if (values != null) {
-            s.append("=").append(values[i]);
-          }
-        }
-        return s.toString();
-    }
-    
-    private void sort(int[] pids, float[] values) {
-      for (int mi=0;mi<pids.length;mi++) {
-        int min = mi;
-        for (int pi=mi+1;pi<pids.length;pi++) {
-          if (pids[min] > pids[pi]) {
-            min = pi;
-          }
-        }
-        int pid = pids[mi];
-        pids[mi] = pids[min];
-        pids[min] = pid;
-        float val = values[mi];
-        values[mi] = values[min];
-        values[min] = val;
+    for (int i = 0; i < smallerLength; i++) {
+      if (predIndexes[i] < ce.predIndexes[i])
+        return -1;
+      else if (predIndexes[i] > ce.predIndexes[i])
+        return 1;
+      if (values != null && ce.values != null) {
+        if (values[i] < ce.values[i])
+          return -1;
+        else if (values[i] > ce.values[i])
+          return 1;
+      } else if (values != null) {
+        if (values[i] < 1)
+          return -1;
+        else if (values[i] > 1)
+          return 1;
+      } else if (ce.values != null) {
+        if (1 < ce.values[i])
+          return -1;
+        else if (1 > ce.values[i])
+          return 1;
+
+    if (predIndexes.length < ce.predIndexes.length)
+      return -1;
+    else if (predIndexes.length > ce.predIndexes.length)
+      return 1;
+
+    return 0;
+  }
+
+  public String toString() {
+    StringBuffer s = new StringBuffer().append(outcome).append(":");
+    for (int i = 0; i < predIndexes.length; i++) {
+      s.append(" ").append(predIndexes[i]);
+      if (values != null) {
+        s.append("=").append(values[i]);
+      }
+    }
+    return s.toString();
+  }
+
+  private void sort(int[] pids, float[] values) {
+    for (int mi = 0; mi < pids.length; mi++) {
+      int min = mi;
+      for (int pi = mi + 1; pi < pids.length; pi++) {
+        if (pids[min] > pids[pi]) {
+          min = pi;
+        }
+      }
+      int pid = pids[mi];
+      pids[mi] = pids[min];
+      pids[min] = pid;
+      float val = values[mi];
+      values[mi] = values[min];
+      values[min] = val;
+    }
+  }
