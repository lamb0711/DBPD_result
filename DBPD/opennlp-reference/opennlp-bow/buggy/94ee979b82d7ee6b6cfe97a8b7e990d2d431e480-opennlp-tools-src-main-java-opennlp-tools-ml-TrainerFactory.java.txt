OPENNLP-641 Extended TrainerFactory to support true sequence training

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1562819 13f79535-47bb-0310-9956-ffa450edef68

+        else if (SequenceTrainer.class.isAssignableFrom(trainerClass)) {
+          return SequenceTrainer.SEQUENCE_VALUE;
+        }
+  // Note: A better way to indicate which training approach is necessary would be
+  // to use an enum which encodes the different possibilities ...
+  
-    if (trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM) != null) {
-      return EventTrainer.EVENT_VALUE.equals(trainParams
-          .get(AbstractTrainer.TRAINER_TYPE_PARAM));
+    if (trainerType != null) {
+      return EventTrainer.EVENT_VALUE.equals(trainerType);
-
+  
+  @Deprecated
+    return isSupportEventModelSequenceTraining(trainParams);
+  }
+  
+  public static boolean isSupportEventModelSequenceTraining(Map<String, String> trainParams) {
-    if (EventModelSequenceTrainer.SEQUENCE_VALUE.equals(trainerType)) {
-      return true;
+    return EventModelSequenceTrainer.SEQUENCE_VALUE.equals(trainerType);
+  }
+  
+  public static boolean isSupportSequenceTraining(Map<String, String> trainParams) {
+    String trainerType = trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM);
+    
+    if (trainerType == null) {
+      String alogrithmValue = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
+      if (alogrithmValue != null) {
+        trainerType = getPluggableTrainerType(trainParams.get(AbstractTrainer.ALGORITHM_PARAM));
+      }
-    return false;
+    return SequenceTrainer.SEQUENCE_VALUE.equals(trainerType);
-
+  
+  // TODO: How to do the testing ?!
+  // is support event sequence ?
+  // is support sequence ?
+  
-   * Use {@link TrainerFactory#isSupportSequence(Map)} instead.
+   * Use {@link TrainerFactory#isSupportEventModelSequenceTraining(Map)} instead.
+  
+  public static SequenceTrainer getSequenceModelTrainer(Map<String, String> trainParams,
+      Map<String, String> reportMap) {
+    String trainerType = getTrainerType(trainParams);
+    if (BUILTIN_TRAINERS.containsKey(trainerType)) {
+      return TrainerFactory.<SequenceTrainer> create(
+          BUILTIN_TRAINERS.get(trainerType), trainParams, reportMap);
+    } else {
+      return TrainerFactory.<SequenceTrainer> create(trainerType, trainParams,
+          reportMap);
+    }
+    
+  }
+  
-              || EventModelSequenceTrainer.class.isAssignableFrom(trainerClass))) {
+              || EventModelSequenceTrainer.class.isAssignableFrom(trainerClass) || SequenceTrainer.class.isAssignableFrom(trainerClass))) {
