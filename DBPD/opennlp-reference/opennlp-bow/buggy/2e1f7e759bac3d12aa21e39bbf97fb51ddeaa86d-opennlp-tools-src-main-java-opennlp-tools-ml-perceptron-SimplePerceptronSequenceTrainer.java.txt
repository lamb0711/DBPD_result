OPENNLP-923: Wrap all lines longer than 110 chars

And also add checkstyle enforcement

-  public AbstractModel trainModel(int iterations, SequenceStream sequenceStream, int cutoff, boolean useAverage) throws IOException {
+  public AbstractModel trainModel(int iterations, SequenceStream sequenceStream,
+                                  int cutoff, boolean useAverage) throws IOException {
-        //System.err.print("train:");for (int ei=0;ei<events.length;ei++) {System.err.print(" "+events[ei].getOutcome());} System.err.println();
+        //System.err.print("train:");for (int ei=0;ei<events.length;ei++)
+        // {System.err.print(" "+events[ei].getOutcome());} System.err.println();
-        //System.err.print("test: ");for (int ei=0;ei<taggerEvents.length;ei++) {System.err.print(" "+taggerEvents[ei].getOutcome());} System.err.println();
+        //System.err.print("test: ");for (int ei=0;ei<taggerEvents.length;ei++)
+        // {System.err.print(" "+taggerEvents[ei].getOutcome());} System.err.println();
-                  averageParams[pi].updateParameter(oi,updates[pi][oi][VALUE] * (numSequences * (iteration - updates[pi][oi][ITER]) + (si - updates[pi][oi][EVENT])));
+                  averageParams[pi].updateParameter(oi,updates[pi][oi][VALUE] * (numSequences
+                      * (iteration - updates[pi][oi][ITER]) + (si - updates[pi][oi][EVENT])));
-                //System.err.println("p updates["+pi+"]["+oi+"]=("+updates[pi][oi][ITER]+","+updates[pi][oi][EVENT]+","+updates[pi][oi][VALUE]+") + ("+iteration+","+oei+","+params[pi].getParameters()[oi]+") -> "+averageParams[pi].getParameters()[oi]);
+                //System.err.println("p updates["+pi+"]["+oi+"]=("+updates[pi][oi][ITER]+","
+                // +updates[pi][oi][EVENT]+","+updates[pi][oi][VALUE]+") + ("+iteration+","+oei+","
+                // +params[pi].getParameters()[oi]+") -> "+averageParams[pi].getParameters()[oi]);
-            predParams[oi] += updates[pi][oi][VALUE] * (numSequences * (iterations - updates[pi][oi][ITER]) - updates[pi][oi][EVENT]);
+            predParams[oi] += updates[pi][oi][VALUE] * (numSequences
+                * (iterations - updates[pi][oi][ITER]) - updates[pi][oi][EVENT]);
-            //System.err.println("updates["+pi+"]["+oi+"]=("+updates[pi][oi][ITER]+","+updates[pi][oi][EVENT]+","+updates[pi][oi][VALUE]+") + ("+iterations+","+0+","+params[pi].getParameters()[oi]+") -> "+averageParams[pi].getParameters()[oi]);
+            //System.err.println("updates["+pi+"]["+oi+"]=("+updates[pi][oi][ITER]+","
+            // +updates[pi][oi][EVENT]+","+updates[pi][oi][VALUE]+") + ("+iterations+","+0+","
+            // +params[pi].getParameters()[oi]+") -> "+averageParams[pi].getParameters()[oi]);
-      Event[] taggerEvents = sequenceStream.updateContext(sequence, new PerceptronModel(params,predLabels,pmap,outcomeLabels));
+      Event[] taggerEvents = sequenceStream.updateContext(sequence,
+          new PerceptronModel(params,predLabels,pmap,outcomeLabels));
