OPENNLp-118 Replaced the EventStream with ObjectStream<Event>

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1567990 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.Closeable;
-import opennlp.tools.ml.maxent.GIS;
-import opennlp.tools.ml.maxent.io.SuffixSensitiveGISModelWriter;
+import opennlp.tools.util.ObjectStream;
-public class FileEventStream extends  AbstractEventStream implements Closeable {
+public class FileEventStream implements ObjectStream<Event> {
-  BufferedReader reader;
-  String line;
+  protected BufferedReader reader;
-  public boolean hasNext() {
-    try {
-      return (null != (line = reader.readLine()));
+  @Override
+  public Event read() throws IOException {
+    String line;
+    if ((line =reader.readLine()) != null) {
+      StringTokenizer st = new StringTokenizer(line);
+      String outcome = st.nextToken();
+      int count = st.countTokens();
+      String[] context = new String[count];
+      for (int ci = 0; ci < count; ci++) {
+        context[ci] = st.nextToken();
+      }
+      
+      return new Event(outcome, context);
-    catch (IOException e) {
-      System.err.println(e);
-      return (false);
+    else {
+      return null;
-  public Event next() {
-    StringTokenizer st = new StringTokenizer(line);
-    String outcome = st.nextToken();
-    int count = st.countTokens();
-    String[] context = new String[count];
-    for (int ci = 0; ci < count; ci++) {
-      context[ci] = st.nextToken();
-    }
-    return (new Event(outcome, context));
-  }
-  
-  
-  /**
-   * Trains and writes a model based on the events in the specified event file.
-   * the name of the model created is based on the event file name.
-   * @param args eventfile [iterations cuttoff]
-   * @throws IOException when the eventfile can not be read or the model file can not be written.
-   */
-  public static void main(String[] args) throws IOException {
-    if (args.length == 0) {
-      System.err.println("Usage: FileEventStream eventfile [iterations cutoff]");
-      System.exit(1);
-    }
-    int ai=0;
-    String eventFile = args[ai++];
-    int iterations = 100;
-    int cutoff = 5;
-    if (ai < args.length) {
-      iterations = Integer.parseInt(args[ai++]);
-      cutoff = Integer.parseInt(args[ai++]);
-    }
-    AbstractModel model;
-    FileEventStream es = new FileEventStream(eventFile);
-    try {
-      model = GIS.trainModel(es,iterations,cutoff);
-    } finally {
-      es.close();
-    }
-    new SuffixSensitiveGISModelWriter(model, new File(eventFile+".bin.gz")).persist();
+
+  @Override
+  public void reset() throws IOException, UnsupportedOperationException {
+    throw new UnsupportedOperationException();
