Replace StringTokenizer with OpenNLP Tokenizer

The StringTokenizer was used to perform white space tokenization
long before the WhitespaceTokenizer became a part of OpenNLP.
This change also allows to pass in some tokenizer to make it
easier to tokenize an input sentence without using pipes.

See issue OPENNLP-857 for more details.

Thanks to Tristan Nixon for providing a patch!

-import java.util.ArrayList;
+import java.util.Arrays;
-import java.util.StringTokenizer;
+import opennlp.tools.cmdline.tokenizer.TokenizerModelLoader;
+import opennlp.tools.parser.Parser;
+import opennlp.tools.tokenize.Tokenizer;
+import opennlp.tools.tokenize.TokenizerME;
+import opennlp.tools.tokenize.TokenizerModel;
+import opennlp.tools.tokenize.WhitespaceTokenizer;
-    return "Usage: " + CLI.CMD + " " + getName() + " [-bs n -ap n -k n] model < sentences \n"
+    return "Usage: " + CLI.CMD + " " + getName() + " [-bs n -ap n -k n -tk tok_model] model < sentences \n"
-            + "-k n: Show the top n parses.  This will also display their log-probablities.";
+            + "-k n: Show the top n parses.  This will also display their log-probablities.\n"
+            + "-tk tok_model: Use the specified tokenizer model to tokenize the sentences. Defaults to a WhitespaceTokenizer.";
-  public static Parse[] parseLine(String line, opennlp.tools.parser.Parser parser, int numParses) {
+  public static Parse[] parseLine(String line, Parser parser, int numParses) {
+    return parseLine( line, parser, WhitespaceTokenizer.INSTANCE, numParses );
+  }
+
+  public static Parse[] parseLine(String line, Parser parser, Tokenizer tokenizer, int numParses) {
+    // fix some parens patterns
-    StringTokenizer str = new StringTokenizer(line);
+
+    // tokenize
+    List<String> tokens = Arrays.asList( tokenizer.tokenize(line));
-    List<String> tokens = new ArrayList<String>();
-    while (str.hasMoreTokens()) {
-      String tok = str.nextToken();
-      tokens.add(tok);
+    for (String tok : tokens) {
-    String text = sb.substring(0, sb.length() - 1);
+    String text = sb.substring(0, sb.length());
-      opennlp.tools.parser.Parser parser =
-              ParserFactory.create(model, beamSize, advancePercentage);
+      Tokenizer tokenizer = WhitespaceTokenizer.INSTANCE;
+      String tokenizerModelName = CmdLineUtil.getParameter( "-tk", args );
+      if( tokenizerModelName != null ){
+        TokenizerModel tokenizerModel = new TokenizerModelLoader().load( new File( tokenizerModelName ) );
+        tokenizer = new TokenizerME( tokenizerModel );
+      }
+      Parser parser = ParserFactory.create(model, beamSize, advancePercentage);
-            Parse[] parses = parseLine(line, parser, numParses);
+            Parse[] parses = parseLine(line, parser, tokenizer, numParses);
