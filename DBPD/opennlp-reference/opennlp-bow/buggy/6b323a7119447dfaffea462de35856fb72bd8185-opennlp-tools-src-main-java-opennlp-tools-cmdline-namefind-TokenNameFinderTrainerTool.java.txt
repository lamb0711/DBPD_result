OPENNLP-17 Added support for custom feature generator

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1127447 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Map;
+import opennlp.tools.util.InvalidFormatException;
+import opennlp.tools.util.model.ArtifactSerializer;
+import opennlp.tools.util.model.ModelUtil;
+    
+    byte featureGeneratorBytes[] = null;
+    
+    // load descriptor file into memory
+    if (parameters.getFeatureGenDescriptorFile() != null) {
+      InputStream bytesIn = 
+          CmdLineUtil.openInFile(new File(parameters.getFeatureGenDescriptorFile()));
+      
+      try {
+        featureGeneratorBytes = ModelUtil.read(bytesIn);
+      } catch (IOException e) {
+        CmdLineUtil.printTrainingIoError(e);
+        throw new TerminateToolException(-1);
+      }
+      finally {
+        try {
+          bytesIn.close();
+        } catch (IOException e) {
+          // sorry that this can fail
+        }
+      }
+    }
+    
+    // TODO: Support Custom resources: 
+    //       Must be loaded into memory, or written to tmp file until descriptor 
+    //       is loaded which defines parses when model is loaded
+    
+    String resourceDirectory = parameters.getResourceDirectory();
+    
+    Map<String, Object> resources = new HashMap<String, Object>();
+    
+    if (resourceDirectory != null) {
+      
+      Map<String, ArtifactSerializer> artifactSerializers = 
+          TokenNameFinderModel.createArtifactSerializers();
+      
+      File resourcePath = new File(resourceDirectory);
+      
+      File resourceFiles[] = resourcePath.listFiles();
+      
+      // TODO: Filter files, also files with start with a dot
+      for (File resourceFile : resourceFiles) {
+        
+        // TODO: Move extension extracting code to method and
+        //       write unit test for it
+        
+        // extract file ending
+        String resourceName = resourceFile.getName();
+        
+        int lastDot = resourceName.lastIndexOf('.');
+        
+        if (lastDot == -1) {
+          continue;
+        }
+        
+        String ending = resourceName.substring(lastDot + 1);
+        
+        // lookup serializer from map
+        ArtifactSerializer serializer = artifactSerializers.get(ending);
+        
+        // TODO: Do different? For now just ignore ....
+        if (serializer == null)
+          continue;
+        
+        InputStream resoruceIn = CmdLineUtil.openInFile(resourceFile);
+        
+        try {
+          resources.put(resourceName, serializer.create(resoruceIn));
+        }
+        catch (InvalidFormatException e) {
+          // TODO: Fix exception handling
+          e.printStackTrace();
+        }
+        catch (IOException e) {
+          // TODO: Fix exception handling
+          e.printStackTrace();
+        }
+        finally {
+          try {
+            resoruceIn.close();
+          }
+          catch (IOException e) {
+          }
+        }
+      }
+    }
+    
-           sampleStream, Collections.<String, Object>emptyMap(),
-           parameters.getNumberOfIterations(), parameters.getCutoff());
+           sampleStream, featureGeneratorBytes, resources, parameters.getNumberOfIterations(),
+           parameters.getCutoff());
