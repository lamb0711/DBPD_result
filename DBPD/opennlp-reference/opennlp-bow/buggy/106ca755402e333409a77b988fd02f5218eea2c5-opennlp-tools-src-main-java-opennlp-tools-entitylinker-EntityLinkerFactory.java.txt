OPENNLP-614
Removed all GeoEntityLinker impl specific classes from tools. Moved to the sandbox in a module called Apache Opennlp Addons

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1539314 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-   * instantiates a single linker based on properties file configuration. The properties file supports multiple types.
+   * instantiates a single linker based on properties file configuration.
-      String linkerImplFullName = properties.getProperty("linker." + entityType, GeoEntityLinker.class.getName());
+      String linkerImplFullName = properties.getProperty("linker." + entityType,"");
-    } catch (InstantiationException ex) {
-      System.out.println("Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker" + ex);
-   } catch (IllegalAccessException ex) {
-      System.out.println("Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker" + ex);
-    } catch (ClassNotFoundException ex) {
-      System.out.println("Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker" + ex);
-    } catch (IOException ex) {
-      System.out.println("Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker" + ex);
-    }
+    } catch (Exception ex) {
+      System.out.println("Check the entity linker properties file. The entry must be formatted as linker.<type>=<fullclassname>, i.e linker.person=org.my.company.MyPersonLinker\n" + ex);
+   }
-  /**
-   * Instantiates a list of EntityLinkers based on a properties file entry that
-   * consists of a comma separated list of full class names. The entityType is
-   * used to build the key to the properties entry. the entityType will be
-   * prefixed with "linker." Therefore, a compliant property entry for location
-   * entity linker types would be: linker.<yourtype>=<yourclass1,yourclass2> For
-   * example:
-   * linker.location=opennlp.tools.entitylinker.GeoEntityLinker,opennlp.tools.entitylinker.GeoEntityLinker2
-   *
-   *
-   * @param entityType the type of entity, the same as what would be returned
-   *                   from span.getType()
-   * @param properties the entitylinker properties that contain the configured
-   *                   entitylinkers
-   * @return *
-   */
-  @Deprecated
-  public static synchronized List<EntityLinker> getLinkers(String entityType, EntityLinkerProperties properties) {
-    List<EntityLinker> linkers = new ArrayList<EntityLinker>();
-    try {
-      String listoflinkers = properties.getProperty("linker." + entityType, GeoEntityLinker.class.getName());
-      for (String classname : listoflinkers.split(",")) {
-        Class theClass = Class.forName(classname);
-        EntityLinker linker = (EntityLinker) theClass.newInstance();
-        System.out.println("EntityLinker factory instantiated: " + linker.getClass().getName());
-        linker.setEntityLinkerProperties(properties);
-        linkers.add(linker);
-      }
-    } catch (InstantiationException ex) {
-      Logger.getLogger(EntityLinkerFactory.class.getName()).log(Level.SEVERE, null, ex);
-    } catch (IllegalAccessException ex) {
-      Logger.getLogger(EntityLinkerFactory.class.getName()).log(Level.SEVERE, null, ex);
-    } catch (ClassNotFoundException ex) {
-      Logger.getLogger(EntityLinkerFactory.class.getName()).log(Level.SEVERE, null, ex);
-    } catch (IOException ex) {
-      Logger.getLogger(EntityLinkerFactory.class.getName()).log(Level.SEVERE, null, ex);
-    }
-    return linkers;
-  }
-
-  /**
-   *
-   * @param entityTypes the types of entities, i.e person, location,
-   *                    organization
-   * @param properties  the entitylinker properties that contain the configured
-   *                    entitylinkers
-   * @return
-   */
-  @Deprecated
-  public static synchronized List<EntityLinker> getLinkers(String[] entityTypes, EntityLinkerProperties properties) {
-    List<EntityLinker> linkers = new ArrayList<EntityLinker>();
-
-    for (String entityType : entityTypes) {
-      try {
-        String listoflinkers = properties.getProperty("linker." + entityType, GeoEntityLinker.class.getName());
-        for (String classname : listoflinkers.split(",")) {
-          Class theClass = Class.forName(classname);
-          EntityLinker linker = (EntityLinker) theClass.newInstance();
-          System.out.println("EntityLinker factory instantiated: " + linker.getClass().getName());
-          linker.setEntityLinkerProperties(properties);
-          linkers.add(linker);
-        }
-      } catch (InstantiationException ex) {
-        Logger.getLogger(EntityLinkerFactory.class.getName()).log(Level.SEVERE, null, ex);
-      } catch (IllegalAccessException ex) {
-        Logger.getLogger(EntityLinkerFactory.class.getName()).log(Level.SEVERE, null, ex);
-      } catch (ClassNotFoundException ex) {
-        Logger.getLogger(EntityLinkerFactory.class.getName()).log(Level.SEVERE, null, ex);
-      } catch (IOException ex) {
-        Logger.getLogger(EntityLinkerFactory.class.getName()).log(Level.SEVERE, null, ex);
-      }
-
-    }
-
-    return linkers;
-  }
