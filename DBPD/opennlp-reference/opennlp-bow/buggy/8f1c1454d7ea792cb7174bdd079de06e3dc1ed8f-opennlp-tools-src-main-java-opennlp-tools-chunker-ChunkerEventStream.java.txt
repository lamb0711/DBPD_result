OPENNLp-118 Replaced the EventStream with ObjectStream<Event>

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1567990 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import opennlp.tools.util.AbstractEventStream;
-public class ChunkerEventStream extends opennlp.tools.ml.model.AbstractEventStream {
+public class ChunkerEventStream extends AbstractEventStream<ChunkSample> {
-  private ObjectStream<ChunkSample> data;
-  private Event[] events;
-  private int ei;
-
+    super(d);
-    data = d;
-    ei = 0;
-    addNewEvents();
-
-  public Event next() {
-    
-    hasNext();
-    
-    return events[ei++];
-  }
-
-  public boolean hasNext() {
-    if (ei == events.length) {
-      addNewEvents();
-      ei = 0;
-    }
-    return ei < events.length;
-  }
-
-  private void addNewEvents() {
-    
-    ChunkSample sample;
-    try {
-      sample = data.read();
-    } catch (IOException e) {
-      throw new RuntimeException(e);
-    }
+  
+  @Override
+  protected Iterator<Event> createEvents(ChunkSample sample) {
-      events = new Event[sample.getSentence().length];
+      List<Event> events = new ArrayList<Event>();
-      for (int ei = 0, el = events.length; ei < el; ei++) {
-        events[ei] = new Event(predsArray[ei], cg.getContext(ei,toksArray,tagsArray,predsArray));
+      for (int ei = 0, el = sample.getSentence().length; ei < el; ei++) {
+        events.add(new Event(predsArray[ei], cg.getContext(ei,toksArray,tagsArray,predsArray)));
+      
+      return events.iterator();
-      events = new Event[0];
+      return Collections.emptyListIterator();
