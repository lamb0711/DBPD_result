OPENNLP-646 The coverd text is now retrieved from the .ann files.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1569285 13f79535-47bb-0310-9956-ffa450edef68

-    BratAnnotation parse(String values[]) throws IOException {
+    BratAnnotation parse(Span tokens[], CharSequence line) throws IOException {
-    BratAnnotation parse(String[] values) throws IOException {
+    BratAnnotation parse(Span values[], CharSequence line) throws IOException {
-        String type = values[BratAnnotationParser.TYPE_OFFSET];
+        String type = values[BratAnnotationParser.TYPE_OFFSET].getCoveredText(line).toString();
+        int firstTextTokenIndex = -1;
+        
-          if (!values[i].contains(";")) {
-            endOffset = parseInt(values[i]);
+          if (!values[i].getCoveredText(line).toString().contains(";")) {
+            endOffset = parseInt(values[i].getCoveredText(line).toString());
+            firstTextTokenIndex = i + 1;
-        return new SpanAnnotation(values[BratAnnotationParser.ID_OFFSET], type, 
-            new Span(parseInt(values[BEGIN_OFFSET]), endOffset, type));
+        String id = values[BratAnnotationParser.ID_OFFSET].getCoveredText(line).toString();
+
+        String coveredText = line.subSequence(values[firstTextTokenIndex].getStart(),
+            values[values.length - 1].getEnd()).toString();
+        
+        return new SpanAnnotation(id, type, 
+            new Span(parseInt(values[BEGIN_OFFSET]
+                .getCoveredText(line).toString()), endOffset, type), coveredText);
-    BratAnnotation parse(String[] values) throws IOException {
-      return new RelationAnnotation(values[BratAnnotationParser.ID_OFFSET], 
-          values[BratAnnotationParser.TYPE_OFFSET], parseArg(values[ARG1_OFFSET]),
-          parseArg(values[ARG2_OFFSET]));
+    BratAnnotation parse(Span tokens[], CharSequence line) throws IOException {
+      return new RelationAnnotation(tokens[BratAnnotationParser.ID_OFFSET].getCoveredText(line).toString(), 
+          tokens[BratAnnotationParser.TYPE_OFFSET].getCoveredText(line).toString(),
+          parseArg(tokens[ARG1_OFFSET].getCoveredText(line).toString()),
+          parseArg(tokens[ARG2_OFFSET].getCoveredText(line).toString()));
-      String values[] = WhitespaceTokenizer.INSTANCE.tokenize(line);
+      Span tokens[] = WhitespaceTokenizer.INSTANCE.tokenizePos(line);
-      if (values.length > 2) {
-        String typeClass = config.getTypeClass(values[BratAnnotationParser.TYPE_OFFSET]);
+      if (tokens.length > 2) {
+        String typeClass = config.getTypeClass(tokens[BratAnnotationParser.TYPE_OFFSET]
+            .getCoveredText(line).toString());
-              " type class, no parser registered: " + values[BratAnnotationParser.TYPE_OFFSET]);
+              " type class, no parser registered: " + tokens[BratAnnotationParser.TYPE_OFFSET]);
-        return parser.parse(values);
+        return parser.parse(tokens, line);
