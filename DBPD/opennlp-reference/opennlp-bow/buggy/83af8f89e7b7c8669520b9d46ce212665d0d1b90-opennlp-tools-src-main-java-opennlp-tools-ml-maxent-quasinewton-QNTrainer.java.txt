OPENNLP-880: Refactor data indexer

1.) Added method to EventTrainer – train(DataIndexer indexer)
    –Then I added the method to AbstractEventTrainer.
    No other code needed to be changed.

2.) Created a new class – PluggableParmeters: Only AbstractTrainers
    had access to getXXXParam(Value,Default). So I pulled out this
    functionality into a separate class. Now both
    AbstractTrainers and AbstractDataIndexers can hold parameters.

3.) Refactored DataIndexer. This touched a lot of code.
    Added init(Map,Map) method and index(ObjectStream) method.
    Changed 1-Pass and 2-Pass DataIndexers. Everywhere 1-pass/2-pass
    indexers where created, I changed the constructor,
    and added the init and index methods.

4.) Changed GIS.doTrain(indexer) to use the parameters
    passed in the init method.

5.) QNTrainer – created a working init method. Changed the
    isValid method so it is not the init method.

This closes #14

+import java.util.Map;
+  @Override
+  public void init(Map<String, String> trainParams, Map<String, String> reportMap) {
+    super.init(trainParams, reportMap);
+    this.m = parameters.getIntParam(M_PARAM, M_DEFAULT);
+    this.maxFctEval = parameters.getIntParam(MAX_FCT_EVAL_PARAM, MAX_FCT_EVAL_DEFAULT);
+    this.threads = parameters.getIntParam(THREADS_PARAM, THREADS_DEFAULT);
+    this.l1Cost = parameters.getDoubleParam(L1COST_PARAM, L1COST_DEFAULT);
+    this.l2Cost = parameters.getDoubleParam(L2COST_PARAM, L2COST_DEFAULT);
+  }
+
-    int m = getIntParam(M_PARAM, M_DEFAULT);
-    this.m = m;
-    int maxFctEval = getIntParam(MAX_FCT_EVAL_PARAM, MAX_FCT_EVAL_DEFAULT);
-    this.maxFctEval = maxFctEval;
-    int threads = getIntParam(THREADS_PARAM, THREADS_DEFAULT);
-    this.threads = threads;
-    double l1Cost = getDoubleParam(L1COST_PARAM, L1COST_DEFAULT);
-    this.l1Cost = l1Cost;
-    double l2Cost = getDoubleParam(L2COST_PARAM, L2COST_DEFAULT);
-    this.l2Cost = l2Cost;
