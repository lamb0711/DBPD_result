OPENNLP-402 Added formats support to trainer and evaluator tools. Refactoring of various things. Thanks to Aliaksandr Autayeu for providing a patch.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1209220 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.File;
-import java.io.UnsupportedEncodingException;
-import opennlp.tools.cmdline.ArgumentParser.ParameterDescription;
-import opennlp.tools.cmdline.ObjectStreamFactory;
-import opennlp.tools.cmdline.TerminateToolException;
+import opennlp.tools.cmdline.StreamFactoryRegistry;
+import opennlp.tools.cmdline.params.LanguageFormatParams;
-public class WordTagSampleStreamFactory implements ObjectStreamFactory<POSSample> {
+public class WordTagSampleStreamFactory extends LanguageSampleStreamFactory<POSSample> {
-  static interface Parameters {
-    
-    @ParameterDescription(valueName = "sampleData")
-    String getData();
-    
-    @ParameterDescription(valueName = "charsetName")
-    String getEncoding();
+  static interface Parameters extends LanguageFormatParams {
+  }
+
+  public static void registerFactory() {
+    StreamFactoryRegistry.registerFactory(POSSample.class,
+        StreamFactoryRegistry.DEFAULT_FORMAT, new WordTagSampleStreamFactory(Parameters.class));
-  public String getUsage() {
-    return ArgumentParser.createUsage(Parameters.class);
+  protected <P> WordTagSampleStreamFactory(Class<P> params) {
+    super(params);
-  public String validateArguments(String[] args) {
-    return ArgumentParser.validateArgumentsLoudly(args, Parameters.class);
-  }
-
-  ObjectStream<POSSample> create(Parameters params) {
-    ObjectStream<String> lineStream;
-    try {
-      lineStream = new PlainTextByLineStream(new InputStreamReader(
-          CmdLineUtil.openInFile(new File(params.getData())), params.getEncoding()));
-      
-      return new WordTagSampleStream(lineStream);
-    } catch (UnsupportedEncodingException e) {
-      System.err.println("Encoding not supported: " + params.getEncoding());
-      throw new TerminateToolException(-1);
-    }
-  }
-  
-    return create(params);
+    language = params.getLang();
+
+    CmdLineUtil.checkInputFile("Data", params.getData());
+    ObjectStream<String> lineStream;
+    lineStream = new PlainTextByLineStream(new InputStreamReader(
+        CmdLineUtil.openInFile(params.getData()), params.getEncoding()));
+
+    return new WordTagSampleStream(lineStream);
-}
+}
