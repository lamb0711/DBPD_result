OPENNLP-1091: Fixing some issues found with FindBugs and IDE

closes #229

+import java.util.Arrays;
+import java.util.Objects;
-    if (outcome < ce.outcome)
-      return -1;
-    else if (outcome > ce.outcome)
-      return 1;
+    int compareOutcome = Integer.compare(outcome, ce.outcome);
+    if (compareOutcome != 0) {
+      return compareOutcome;
+    }
-    int smallerLength = predIndexes.length > ce.predIndexes.length ? ce.predIndexes.length
-        : predIndexes.length;
+    int smallerLength = Math.min(predIndexes.length, ce.predIndexes.length);
-      if (predIndexes[i] < ce.predIndexes[i])
-        return -1;
-      else if (predIndexes[i] > ce.predIndexes[i])
-        return 1;
+      int comparePredIndexes = Integer.compare(predIndexes[i], ce.predIndexes[i]);
+      if (comparePredIndexes != 0) {
+        return comparePredIndexes;
+      }
-        if (values[i] < ce.values[i])
-          return -1;
-        else if (values[i] > ce.values[i])
-          return 1;
+        float compareValues = Float.compare(values[i], ce.values[i]);
+        if (!Float.valueOf(compareValues).equals(Float.valueOf(0.0f))) {
+          return (int) compareValues;
+        }
-        if (values[i] < 1)
-          return -1;
-        else if (values[i] > 1)
-          return 1;
+        float compareValues = Float.compare(values[i], 1.0f);
+        if (!Float.valueOf(compareValues).equals(Float.valueOf(0.0f))) {
+          return (int) compareValues;
+        }
-        if (1 < ce.values[i])
-          return -1;
-        else if (1 > ce.values[i])
-          return 1;
+        float compareValues = Float.compare(1.0f, ce.values[i]);
+        if (!Float.valueOf(compareValues).equals(Float.valueOf(0.0f))) {
+          return (int) compareValues;
+        }
-    if (predIndexes.length < ce.predIndexes.length)
-      return -1;
-    else if (predIndexes.length > ce.predIndexes.length)
-      return 1;
+    int comparePredIndexesLength = Integer.compare(predIndexes.length, ce.predIndexes.length);
+    if (comparePredIndexesLength != 0) {
+      return comparePredIndexesLength;
+    }
+  @Override
+  public boolean equals(Object obj) {
+
+    if (this == obj)
+      return true;
+
+    if (obj instanceof ComparableEvent) {
+      ComparableEvent other = (ComparableEvent) obj;
+      return outcome == other.outcome &&
+          Arrays.equals(predIndexes, other.predIndexes) &&
+          seen == other.seen &&
+          Arrays.equals(values, other.values);
+    }
+
+    return false;
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hash(outcome, Arrays.hashCode(predIndexes), seen, Arrays.hashCode(values));
+  }
+
-  private void sort(int[] pids, float[] values) {
-    for (int mi = 0; mi < pids.length; mi++) {
-      int min = mi;
-      for (int pi = mi + 1; pi < pids.length; pi++) {
-        if (pids[min] > pids[pi]) {
-          min = pi;
-        }
-      }
-      int pid = pids[mi];
-      pids[mi] = pids[min];
-      pids[min] = pid;
-      float val = values[mi];
-      values[mi] = values[min];
-      values[min] = val;
-    }
-  }
