OPENNLP-175 Removed duplicate code in parser train methods

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1126943 13f79535-47bb-0310-9956-ffa450edef68

-  throws IOException {
+          throws IOException {
- // TODO: Discuss and make dict cutoff configurable
-    Dictionary mdict = buildDictionary(parseSamples, rules, 5); 
+    
+    Dictionary mdict = buildDictionary(parseSamples, rules, mlParams);
-        mlParams.getParameters("tagger"), null, null); // <- pass on name space corrected TrainingParameters ...
+        mlParams.getParameters("tagger"), null, null);
-        new ChunkSampleStream(parseSamples), // <- pass on name space corrected TrainingParameters ...
+        new ChunkSampleStream(parseSamples),
-    
+
-  
+
-    System.err.println("Building dictionary");
-    Dictionary mdict = buildDictionary(parseSamples, rules, cut);
-    
-    parseSamples.reset();
-    
-    Map<String, String> manifestInfoEntries = new HashMap<String, String>();
-    ModelUtil.addCutoffAndIterations(manifestInfoEntries, cut, iterations);
-    
-    // build
-    System.err.println("Training builder");
-    opennlp.model.EventStream bes = new ParserEventStream(parseSamples, rules, ParserEventTypeEnum.BUILD, mdict);
-    HashSumEventStream hsbes = new HashSumEventStream(bes);
-    AbstractModel buildModel = train(hsbes, iterations, cut);
-    manifestInfoEntries.put("Training-Builder-Eventhash", 
-        hsbes.calculateHashSum().toString(16));
-    
-    parseSamples.reset();
-    
-    // tag
-    POSModel posModel = POSTaggerME.train(languageCode, new PosSampleStream(parseSamples), 
-        ModelType.MAXENT, null, null, cut, iterations);
-    
-    parseSamples.reset();
-    
-    // chunk
-    ChunkerModel chunkModel = ChunkerME.train(languageCode, 
-        new ChunkSampleStream(parseSamples), cut, iterations,
-        new ChunkContextGenerator());
-    
-    parseSamples.reset();
-    
-    // check
-    System.err.println("Training checker");
-    opennlp.model.EventStream kes = new ParserEventStream(parseSamples, rules, ParserEventTypeEnum.CHECK);
-    HashSumEventStream hskes = new HashSumEventStream(kes);
-    AbstractModel checkModel = train(hskes, iterations, cut);
-    manifestInfoEntries.put("Training-Checker-Eventhash", 
-        hskes.calculateHashSum().toString(16));
-    
-    // TODO: Remove cast for HeadRules
-    return new ParserModel(languageCode, buildModel, checkModel,
-        posModel, chunkModel, (opennlp.tools.parser.lang.en.HeadRules) rules,
-        ParserType.CHUNKING, manifestInfoEntries);
+    TrainingParameters params = new TrainingParameters();
+    params.put("dict", TrainingParameters.CUTOFF_PARAM, Integer.toString(cut));
+
+    params.put("tagger", TrainingParameters.CUTOFF_PARAM, Integer.toString(cut));
+    params.put("tagger", TrainingParameters.ITERATIONS_PARAM, Integer.toString(iterations));
+    params.put("chunker", TrainingParameters.CUTOFF_PARAM, Integer.toString(cut));
+    params.put("chunker", TrainingParameters.ITERATIONS_PARAM, Integer.toString(iterations));
+    params.put("check", TrainingParameters.CUTOFF_PARAM, Integer.toString(cut));
+    params.put("check", TrainingParameters.ITERATIONS_PARAM, Integer.toString(iterations));
+    params.put("build", TrainingParameters.CUTOFF_PARAM, Integer.toString(cut));
+    params.put("build", TrainingParameters.ITERATIONS_PARAM, Integer.toString(iterations));
+
+    return train(languageCode, parseSamples, rules, params);
