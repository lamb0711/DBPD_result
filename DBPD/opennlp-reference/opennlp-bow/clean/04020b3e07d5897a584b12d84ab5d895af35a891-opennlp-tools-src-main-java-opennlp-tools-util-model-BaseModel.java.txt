OPENNLP-429: Refactored the POSModel, moving everything related to the factory to BaseModel, so it will be reused by other model implementations. Eliminated the necessity of calling methods from sub-class constructor. Moved the methods to instantiate factories to POSTaggerFactory and BaseToolFactory.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243780 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.postag.POSTaggerFactory;
+import opennlp.tools.util.BaseToolFactory;
+  protected static final String FACTORY_NAME = "factory";
+  protected BaseToolFactory toolFactory;
+  
-   * Initializes the current instance. The sub-class constructor should call the methods:
-   * <li> {@link #loadArtifactSerializers()} to populate the serializers map, and
-   * <li> {@link #checkArtifactMap()} to check the artifact map is OK. <p>
-   * Not calling these methods will cause an {@link IllegalStateException}
-   *
-   * @param componentName the component name
-   * @param languageCode the language code
-   * @param manifestInfoEntries additional information in the manifest
+   * Initializes the current instance. The sub-class constructor should call the
+   * method {@link #checkArtifactMap()} to check the artifact map is OK.
+   * 
+   * @param componentName
+   *          the component name
+   * @param languageCode
+   *          the language code
+   * @param manifestInfoEntries
+   *          additional information in the manifest
+    this(componentName, languageCode, manifestInfoEntries, null);
+  }
+  
+  /**
+   * Initializes the current instance. The sub-class constructor should call the
+   * method {@link #checkArtifactMap()} to check the artifact map is OK.
+   * <p>
+   * Sub-classes will have access to custom artifacts and serializers provided
+   * by the factory.
+   * 
+   * @param componentName
+   *          the component name
+   * @param languageCode
+   *          the language code
+   * @param manifestInfoEntries
+   *          additional information in the manifest
+   * @param factory
+   *          the factory
+   */
+  protected BaseModel(String componentName, String languageCode,
+      Map<String, String> manifestInfoEntries, BaseToolFactory factory) {
+    
+    if (factory!=null) {
+      setManifestProperty(FACTORY_NAME, factory.getClass().getCanonicalName());
+      artifactMap.putAll(factory.createArtifactMap());
+    }
+    
+    initializeFactory();
+    loadArtifactSerializers();
+    initializeFactory();
+    
+    loadArtifactSerializers();
+    finishLoadingArtifacts(null);
+    checkArtifactMap();
+  }
+  
+  /**
+   * 
+   */
+  protected void initializeFactory() {
+    String factoryName = getManifestProperty(FACTORY_NAME);
+    if (factoryName == null) {
+      // load the default factory
+      this.toolFactory = new POSTaggerFactory(this);
+    } else {
+      try {
+        this.toolFactory = POSTaggerFactory.create(factoryName, this);
+      } catch (InvalidFormatException e) {
+        throw new IllegalArgumentException(e.getMessage());
+      }
+    }
+    
+    // validate the factory
+    String factoryName = getManifestProperty(FACTORY_NAME);
+    if (factoryName != null) {
+      try {
+        Class.forName(factoryName);
+      } catch (ClassNotFoundException e) {
+        throw new InvalidFormatException(
+            "Could not find the POS factory class: " + factoryName);
+      }
+      
+      toolFactory.validateArtifactMap();
+    }
+  
+  public BaseToolFactory getFactory() {
+    return null;
+  }
