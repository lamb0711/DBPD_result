OPENNLP-239: refactored the classes to have single case sensitivity flag.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1153728 13f79535-47bb-0310-9956-ffa450edef68

-  private static final String ATTRIBUTE_CASE = "case";
-
-  private static class StringListWrapper {
+  private class StringListWrapper {
-    private final boolean isCaseSensitive;
-    private StringListWrapper(StringList stringList, boolean isCaseSensitive) {
+    private StringListWrapper(StringList stringList) {
-      this.isCaseSensitive = isCaseSensitive;
-        /* TODO find out if we really want this default */
-        if (!isCaseSensitive || !other.isCaseSensitive) {
-          result = this.stringList.compareToIgnoreCase(other.getStringList());
+        if (isCaseSensitive) {
+          result = this.stringList.equals(other.getStringList());
-          result = this.stringList.equals(other.getStringList());
+          result = this.stringList.compareToIgnoreCase(other.getStringList());
-  private boolean caseSensitive;
+  private final boolean isCaseSensitive;
+
-    this.caseSensitive = caseSensitive;
+    isCaseSensitive = caseSensitive;
-    this.caseSensitive = caseSensitive;
-    DictionarySerializer.create(in, new EntryInserter()
-    {
-      public void insert(Entry entry) {
-        if (entry.getAttributes().getValue(ATTRIBUTE_CASE) != null) {
-          put(entry.getTokens(), Boolean.parseBoolean(entry.getAttributes().getValue(ATTRIBUTE_CASE)));
-        } else {
+    isCaseSensitive = DictionarySerializer.create(in, new EntryInserter()
+      {
+        public void insert(Entry entry) {
-      }
-    });
+      });
-      entrySet.add(new StringListWrapper(tokens, caseSensitive));
+      entrySet.add(new StringListWrapper(tokens));
-   * Add the token to the dictionary with the required attribute.
-   * 
-   * @param tokens the new entry
-   * @param cs the boolean case sensitivity for the entry
-   */
-  public void put(StringList tokens, boolean cs) {
-      entrySet.add(new StringListWrapper(tokens, cs));
-  }
-  
-  /**
-      return entrySet.contains(new StringListWrapper(tokens, caseSensitive));
+      return entrySet.contains(new StringListWrapper(tokens));
-      entrySet.remove(new StringListWrapper(tokens, caseSensitive));
+      entrySet.remove(new StringListWrapper(tokens));
-        private boolean c = Dictionary.this.caseSensitive;
-          Attributes att = new Attributes();
-          att.setValue(ATTRIBUTE_CASE, String.valueOf(c));
-          return new Entry(tokens, att);
+          return new Entry(tokens, new Attributes());
-    DictionarySerializer.serialize(out, entryIterator);
+    DictionarySerializer.serialize(out, entryIterator, isCaseSensitive);
-          result = entrySet.contains(new StringListWrapper(new StringList(str),
-              caseSensitive));
+          result = entrySet.contains(new StringListWrapper(new StringList(str)));
