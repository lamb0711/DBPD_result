OPENNLP-569 Attached is the patch for the current L-BFGS implementation. It includes bug fixes for numerical overflow when calculating sum of exponential functions and the formula error when computing log-likelihood. Thanks to Vinh Khuc for poviding a patch.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1584282 13f79535-47bb-0310-9956-ffa450edef68

- * class to store lineSearch result
+ * Class to store lineSearch result
-  public static LineSearchResult getInitialObject(double valueAtX, double[] gradAtX, double[] x, int maxFctEval) {
-    return new LineSearchResult(0.0, 0.0, valueAtX, null, gradAtX, null, x, maxFctEval);
-  }
-
-  public static LineSearchResult getInitialObject(double valueAtX, double[] gradAtX, double[] x) {
-    return new LineSearchResult(0.0, 0.0, valueAtX, null, gradAtX, null, x, QNTrainer.DEFAULT_MAX_FCT_EVAL);
-  }
-
+  
-  public LineSearchResult(double stepSize, double valueAtX, double valurAtX_1, 
-      double[] gradAtX, double[] gradAtX_1, double[] currPoint, double[] nextPoint, int fctEvalCount) {
-    this.stepSize = stepSize;
-    this.valueAtCurr = valueAtX;
-    this.valueAtNext = valurAtX_1;
-    this.gradAtCurr = gradAtX;
-    this.gradAtNext = gradAtX_1;
-    this.currPoint = currPoint;
-    this.nextPoint = nextPoint;
-    this.setFctEvalCount(fctEvalCount);
+  public LineSearchResult(double stepSize, double valueAtCurr, 
+      double valueAtNext, double[] gradAtCurr, double[] gradAtNext, 
+      double[] currPoint, double[] nextPoint, int fctEvalCount) 
+  {
+    setAll(stepSize, valueAtCurr, valueAtNext, gradAtCurr, gradAtNext, 
+      currPoint, nextPoint, fctEvalCount);
+  public void setAll(double stepSize, double valueAtCurr, 
+      double valueAtNext, double[] gradAtCurr, double[] gradAtNext, 
+      double[] currPoint, double[] nextPoint, int fctEvalCount) 
+  {
+    this.stepSize     = stepSize;
+    this.valueAtCurr  = valueAtCurr;
+    this.valueAtNext  = valueAtNext;
+    this.gradAtCurr   = gradAtCurr;
+    this.gradAtNext   = gradAtNext;
+    this.currPoint    = currPoint;
+    this.nextPoint    = nextPoint;
+    this.fctEvalCount = fctEvalCount;
+  }
+  
+  public double getFuncChangeRate() {
+    return (valueAtCurr - valueAtNext) / valueAtCurr;
+  }
+  
+  
+  
+  
+  
+  
+  
+  
+  
+  public static LineSearchResult getInitialObject(double valueAtX, 
+      double[] gradAtX, double[] x, int fctEvalCount) {
+    return new LineSearchResult(0.0, 0.0, valueAtX, new double[x.length], gradAtX, 
+        new double[x.length], x, fctEvalCount);
+  }
+
+  public static LineSearchResult getInitialObject(double valueAtX, double[] gradAtX, double[] x) {
+    return new LineSearchResult(0.0, 0.0, valueAtX, new double[x.length], 
+        gradAtX, new double[x.length], x, 0);
+  }
