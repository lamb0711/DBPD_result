OPENNLP-1086: Refactor the Data Indexers

The following has been done:
- Use Java 8 streams where it makes sense
- Deduplicate the index method and have one common one
- Avoid having all predicate Strings twice in memory for cutoff filter

+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.Objects;
+import opennlp.tools.util.ObjectStream;
+  protected List<ComparableEvent> index(ObjectStream<Event> events,
+                                        Map<String, Integer> predicateIndex) throws IOException {
+    Map<String, Integer> omap = new HashMap<>();
+
+    List<ComparableEvent> eventsToCompare = new ArrayList<>();
+
+    Event ev;
+    while ((ev = events.read()) != null) {
+
+      omap.putIfAbsent(ev.getOutcome(), omap.size());
+
+      int[] cons = Arrays.stream(ev.getContext())
+          .map(pred -> predicateIndex.get(pred))
+          .filter(Objects::nonNull)
+          .mapToInt(i -> i).toArray();
+
+      // drop events with no active features
+      if (cons.length > 0) {
+        int ocID = omap.get(ev.getOutcome());
+        eventsToCompare.add(new ComparableEvent(ocID, cons, ev.getValues()));
+      } else {
+        display("Dropped event " + ev.getOutcome() + ":"
+            + Arrays.asList(ev.getContext()) + "\n");
+      }
+    }
+    outcomeLabels = toIndexedStringArray(omap);
+    predLabels = toIndexedStringArray(predicateIndex);
+    return eventsToCompare;
+  }
+   * @deprecated will be removed after 1.8.1 release
+  @Deprecated
-      Integer i = counter.get(s);
-      if (i == null) {
-        counter.put(s, 1);
-      }
-      else {
-        counter.put(s, i + 1);
-      }
+      counter.merge(s, 1, (value, one) -> value + one);
+
+   * Updates the set of predicated and counter with the specified event contexts.
+   * @param ec The contexts/features which occur in a event.
+   * @param counter The predicate counters.
+   */
+  protected static void update(String[] ec, Map<String,Integer> counter) {
+    for (String s : ec) {
+      counter.merge(s, 1, (value, one) -> value + one);
+    }
+  }
+
+  /**
-   * @since maxent 1.2.6
-  protected static String[] toIndexedStringArray(Map<String,Integer> labelToIndexMap) {
-    final String[] array = new String[labelToIndexMap.size()];
-    for (String label : labelToIndexMap.keySet()) {
-      array[labelToIndexMap.get(label)] = label;
-    }
-    return array;
+  protected static String[] toIndexedStringArray(Map<String, Integer> labelToIndexMap) {
+    return labelToIndexMap.entrySet().stream().sorted(Comparator.comparingInt(Map.Entry::getValue))
+        .map(Map.Entry::getKey).toArray(String[]::new);
