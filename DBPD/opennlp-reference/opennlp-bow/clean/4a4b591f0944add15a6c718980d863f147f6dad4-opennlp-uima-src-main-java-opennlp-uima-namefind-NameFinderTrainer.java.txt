Remove references to PlainTextByLineStream constructor that takes InputStream

The PlainTextByLineStream that takes InputStream was deprecated for a while. We can remove safely remove it after reviewing internal code that was still using it.
Left the deprecated code that was using the constructor for a latter work.

See issue OPENNLP-882

-import java.io.FileInputStream;
-import java.io.InputStream;
-import java.io.InputStreamReader;
+import java.nio.charset.Charset;
-import opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool;
-import opennlp.tools.ml.maxent.GIS;
-import opennlp.tools.namefind.BioCodec;
-import opennlp.tools.namefind.NameFinderME;
-import opennlp.tools.namefind.NameSample;
-import opennlp.tools.namefind.NameSampleDataStream;
-import opennlp.tools.namefind.TokenNameFinderFactory;
-import opennlp.tools.namefind.TokenNameFinderModel;
-import opennlp.tools.util.ObjectStream;
-import opennlp.tools.util.ObjectStreamUtils;
-import opennlp.tools.util.PlainTextByLineStream;
-import opennlp.tools.util.Span;
-import opennlp.tools.util.TrainingParameters;
-import opennlp.uima.util.CasConsumerUtil;
-import opennlp.uima.util.ContainingConstraint;
-import opennlp.uima.util.OpennlpUtil;
-import opennlp.uima.util.SampleTraceStream;
-import opennlp.uima.util.UimaUtil;
-
+import opennlp.tools.cmdline.namefind.TokenNameFinderTrainerTool;
+import opennlp.tools.ml.maxent.GIS;
+import opennlp.tools.namefind.BioCodec;
+import opennlp.tools.namefind.NameFinderME;
+import opennlp.tools.namefind.NameSample;
+import opennlp.tools.namefind.NameSampleDataStream;
+import opennlp.tools.namefind.TokenNameFinderFactory;
+import opennlp.tools.namefind.TokenNameFinderModel;
+import opennlp.tools.util.InputStreamFactory;
+import opennlp.tools.util.MarkableFileInputStreamFactory;
+import opennlp.tools.util.ObjectStream;
+import opennlp.tools.util.ObjectStreamUtils;
+import opennlp.tools.util.PlainTextByLineStream;
+import opennlp.tools.util.Span;
+import opennlp.tools.util.TrainingParameters;
+import opennlp.uima.util.CasConsumerUtil;
+import opennlp.uima.util.ContainingConstraint;
+import opennlp.uima.util.OpennlpUtil;
+import opennlp.uima.util.SampleTraceStream;
+import opennlp.uima.util.UimaUtil;
+
-    InputStream additionalTrainingDataIn = null;
-        additionalTrainingDataIn = new FileInputStream(additionalTrainingDataFile);
+        InputStreamFactory additionalTrainingDataIn = new MarkableFileInputStreamFactory(
+            new File(additionalTrainingDataFile));
+        Charset additionalTrainingDataCharset = Charset
+            .forName(additionalTrainingDataEncoding);
-            new PlainTextByLineStream(new InputStreamReader(additionalTrainingDataIn, additionalTrainingDataEncoding)));
+            new PlainTextByLineStream(additionalTrainingDataIn,
+                additionalTrainingDataCharset));
-      if (additionalTrainingDataIn != null) {
-        additionalTrainingDataIn.close();
-      }
