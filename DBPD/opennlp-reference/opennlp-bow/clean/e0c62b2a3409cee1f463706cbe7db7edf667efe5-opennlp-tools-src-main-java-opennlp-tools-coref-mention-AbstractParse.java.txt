OPENNLP-357 Fixed inconsistent line ending style

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1198867 13f79535-47bb-0310-9956-ffa450edef68

-package opennlp.tools.coref.mention;
-
+package opennlp.tools.coref.mention;
+
-
-/**
- * Provides default implemenation of many of the methods in the {@link Parse} interface.
- */
-public abstract class AbstractParse implements Parse {
-
-  public boolean isCoordinatedNounPhrase() {
-    List<Parse> parts = getSyntacticChildren();
-    if (parts.size() >= 2) {
-      for (int pi = 1; pi < parts.size(); pi++) {
-        Parse child = parts.get(pi);
-        String ctype = child.getSyntacticType();
-        if (ctype != null && ctype.equals("CC") && !child.toString().equals("&")) {
-          return true;
-        }
-      }
-    }
-    return false;
-  }
-
-  public List<Parse> getNounPhrases() {
-    List<Parse> parts = getSyntacticChildren();
-    List<Parse> nps = new ArrayList<Parse>();
-    while (parts.size() > 0) {
-      List<Parse> newParts = new ArrayList<Parse>();
-      for (int pi=0,pn=parts.size();pi<pn;pi++) {
-        //System.err.println("AbstractParse.getNounPhrases "+parts.get(pi).getClass());
-        Parse cp = parts.get(pi);
-        if (cp.isNounPhrase()) {
-          nps.add(cp);
-        }
-        if (!cp.isToken()) {
-          newParts.addAll(cp.getSyntacticChildren());
-        }
-      }
-      parts = newParts;
-    }
-    return nps;
-  }
+
+/**
+ * Provides default implemenation of many of the methods in the {@link Parse} interface.
+ */
+public abstract class AbstractParse implements Parse {
+
+  public boolean isCoordinatedNounPhrase() {
+    List<Parse> parts = getSyntacticChildren();
+    if (parts.size() >= 2) {
+      for (int pi = 1; pi < parts.size(); pi++) {
+        Parse child = parts.get(pi);
+        String ctype = child.getSyntacticType();
+        if (ctype != null && ctype.equals("CC") && !child.toString().equals("&")) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  public List<Parse> getNounPhrases() {
+    List<Parse> parts = getSyntacticChildren();
+    List<Parse> nps = new ArrayList<Parse>();
+    while (parts.size() > 0) {
+      List<Parse> newParts = new ArrayList<Parse>();
+      for (int pi=0,pn=parts.size();pi<pn;pi++) {
+        //System.err.println("AbstractParse.getNounPhrases "+parts.get(pi).getClass());
+        Parse cp = parts.get(pi);
+        if (cp.isNounPhrase()) {
+          nps.add(cp);
+        }
+        if (!cp.isToken()) {
+          newParts.addAll(cp.getSyntacticChildren());
+        }
+      }
+      parts = newParts;
+    }
+    return nps;
+  }
