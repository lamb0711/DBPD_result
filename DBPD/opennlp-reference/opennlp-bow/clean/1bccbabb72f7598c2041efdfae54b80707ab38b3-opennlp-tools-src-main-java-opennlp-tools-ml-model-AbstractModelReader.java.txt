Correct indentation and white spaces

This closes #30

See issue OPENNLP-914

-      filename = filename.substring(0,filename.length()-3);
+      filename = filename.substring(0,filename.length() - 3);
-      int numOutcomes = readInt();
-      String[] outcomeLabels = new String[numOutcomes];
-      for (int i=0; i<numOutcomes; i++) outcomeLabels[i] = readUTF();
-      return outcomeLabels;
+    int numOutcomes = readInt();
+    String[] outcomeLabels = new String[numOutcomes];
+    for (int i = 0; i < numOutcomes; i++) outcomeLabels[i] = readUTF();
+    return outcomeLabels;
-      int numOCTypes = readInt();
-      int[][] outcomePatterns = new int[numOCTypes][];
-      for (int i=0; i<numOCTypes; i++) {
-          StringTokenizer tok = new StringTokenizer(readUTF(), " ");
-          int[] infoInts = new int[tok.countTokens()];
-          for (int j = 0; tok.hasMoreTokens(); j++) {
-              infoInts[j] = Integer.parseInt(tok.nextToken());
-          }
-          outcomePatterns[i] = infoInts;
+    int numOCTypes = readInt();
+    int[][] outcomePatterns = new int[numOCTypes][];
+    for (int i = 0; i < numOCTypes; i++) {
+      StringTokenizer tok = new StringTokenizer(readUTF(), " ");
+      int[] infoInts = new int[tok.countTokens()];
+      for (int j = 0; tok.hasMoreTokens(); j++) {
+        infoInts[j] = Integer.parseInt(tok.nextToken());
-      return outcomePatterns;
+      outcomePatterns[i] = infoInts;
+    }
+    return outcomePatterns;
-      NUM_PREDS = readInt();
-      String[] predLabels = new String[NUM_PREDS];
-      for (int i=0; i<NUM_PREDS; i++)
-          predLabels[i] = readUTF();
-      return predLabels;
+    NUM_PREDS = readInt();
+    String[] predLabels = new String[NUM_PREDS];
+    for (int i = 0; i < NUM_PREDS; i++)
+        predLabels[i] = readUTF();
+    return predLabels;
-   * outcome pattern (a set of outcomes that occurs with a context) is being specified.  The
-   * second index specifies the number of contexts which use this pattern at index 0, and the
-   * index of each outcomes which make up this pattern in indicies 1-n.
+   *     outcome pattern (a set of outcomes that occurs with a context) is being specified.  The
+   *     second index specifies the number of contexts which use this pattern at index 0, and the
+   *     index of each outcomes which make up this pattern in indicies 1-n.
-    int pid=0;
-    for (int i=0; i<outcomePatterns.length; i++) {
+    int pid = 0;
+    for (int i = 0; i < outcomePatterns.length; i++) {
-      int[] outcomePattern = new int[outcomePatterns[i].length-1];
-        System.arraycopy(outcomePatterns[i], 1, outcomePattern, 0, outcomePatterns[i].length - 1);
+      int[] outcomePattern = new int[outcomePatterns[i].length - 1];
+      System.arraycopy(outcomePatterns[i], 1, outcomePattern, 0, outcomePatterns[i].length - 1);
-      for (int j=0; j<outcomePatterns[i][0]; j++) {
-        double[] contextParameters = new double[outcomePatterns[i].length-1];
-        for (int k=1; k<outcomePatterns[i].length; k++) {
-          contextParameters[k-1] = readDouble();
+      for (int j = 0; j < outcomePatterns[i][0]; j++) {
+        double[] contextParameters = new double[outcomePatterns[i].length - 1];
+        for (int k = 1; k < outcomePatterns[i].length; k++) {
+          contextParameters[k - 1] = readDouble();
