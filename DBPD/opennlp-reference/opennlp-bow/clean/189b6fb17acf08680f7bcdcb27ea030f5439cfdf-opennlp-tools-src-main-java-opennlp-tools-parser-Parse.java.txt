OPENNLP-924: Remove all old and leftover main methods, this closes apache/opennlp#45

-import java.io.IOException;
-      this.prevPunctSet = new TreeSet<Parse>();
+      this.prevPunctSet = new TreeSet<>();
-      this.nextPunctSet = new TreeSet<Parse>();
+      this.nextPunctSet = new TreeSet<>();
-    List<Parse> nodes = new LinkedList<Parse>();
+    List<Parse> nodes = new LinkedList<>();
-    for (int ni = 0, nn = names.length; ni < nn; ni++) {
-      Span nameTokenSpan = names[ni];
+    for (Span nameTokenSpan : names) {
-        Span nameSpan = new Span(startToken.getSpan().getStart(),endToken.getSpan().getEnd());
+        Span nameSpan = new Span(startToken.getSpan().getStart(), endToken.getSpan().getEnd());
-          commonParent.insert(new Parse(commonParent.getText(),nameSpan,tag,1.0,endToken.getHeadIndex()));
-        }
-        else {
+          commonParent.insert(new Parse(commonParent.getText(), nameSpan, tag, 1.0, endToken.getHeadIndex()));
+        } else {
-          for (int ki = 0, kn = kids.length; ki < kn; ki++) {
-            if (nameSpan.crosses(kids[ki].getSpan())) {
+          for (Parse kid : kids) {
+            if (nameSpan.crosses(kid.getSpan())) {
-            commonParent.insert(new Parse(commonParent.getText(),nameSpan,tag,1.0,endToken.getHeadIndex()));
-          }
-          else {
+            commonParent.insert(new Parse(commonParent.getText(), nameSpan, tag, 1.0, endToken.getHeadIndex()));
+          } else {
-                commonParent.insert(new Parse(commonParent.getText(), commonParent.getSpan(), tag,1.0, commonParent.getHeadIndex()));
+                commonParent.insert(new Parse(commonParent.getText(), commonParent.getSpan(), tag, 1.0, commonParent.getHeadIndex()));
-
-  /**
-   * Reads training parses (one-sentence-per-line) and displays parse structure.
-   *
-   * @param args The head rules files.
-   *
-   * @throws IOException If the head rules file can not be opened and read.
-   */
-  @Deprecated
-  public static void main(String[] args) throws java.io.IOException {
-    if (args.length == 0) {
-      System.err.println("Usage: Parse -fun -pos head_rules < train_parses");
-      System.err.println("Reads training parses (one-sentence-per-line) and displays parse structure.");
-      System.exit(1);
-    }
-    int ai = 0;
-    boolean fixPossesives = false;
-    while (args[ai].startsWith("-") && ai < args.length) {
-      if (args[ai].equals("-fun")) {
-        Parse.useFunctionTags(true);
-        ai++;
-      }
-      else if (args[ai].equals("-pos")) {
-        fixPossesives = true;
-        ai++;
-      }
-    }
-
-    opennlp.tools.parser.lang.en.HeadRules rules = new opennlp.tools.parser.lang.en.HeadRules(args[ai]);
-    java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
-
-    for (String line = in.readLine(); line != null; line = in.readLine()) {
-      Parse p = Parse.parseParse(line,rules);
-      Parse.pruneParse(p);
-      if (fixPossesives) {
-        Parse.fixPossesives(p);
-      }
-      p.updateHeads(rules);
-      p.show();
-      //p.showCodeTree();
-    }
-  }
