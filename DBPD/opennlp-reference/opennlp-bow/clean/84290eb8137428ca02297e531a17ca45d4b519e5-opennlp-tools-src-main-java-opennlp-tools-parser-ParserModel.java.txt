OPENNLP-241 Unified model validation. Model is now validated independent on which constructor is used to create it.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1154873 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import opennlp.model.BinaryFileDataReader;
-import opennlp.model.GenericModelReader;
-    if (buildModel == null) {
-      throw new IllegalArgumentException("buildModel must not be null!");
-    }
-    if (checkModel == null) {
-      throw new IllegalArgumentException("checkModel must not be null!");
-    }
-    if (parserTagger == null) {
-      throw new IllegalArgumentException("parserTagger must not be null!");
-    }
-    if (chunkerTagger == null) {
-      throw new IllegalArgumentException("chunkerTagger must not be null!");
-    }
-    if (headRules == null) {
-        throw new IllegalArgumentException("headRules must not be null!");
-    }
+    
+    checkArtifactMap();
-  private static AbstractModel readModel(String fileName) throws FileNotFoundException, IOException {
-    return new GenericModelReader(new BinaryFileDataReader(new FileInputStream(fileName))).
-        getModel();
+  @Override
+  protected void validateArtifactMap() throws InvalidFormatException {
+    super.validateArtifactMap();
+    
+    if (!(artifactMap.get(BUILD_MODEL_ENTRY_NAME)  instanceof AbstractModel)) {
+      throw new InvalidFormatException("Missing the build model!");
+    }
+    
+    ParserType modelType = getParserType();
+    
+    if (modelType != null) {
+      if (ParserType.CHUNKING.equals(modelType)) {
+        if (artifactMap.get(ATTACH_MODEL_ENTRY_NAME) != null)
+            throw new InvalidFormatException("attachModel must be null for chunking parser!");
+      }
+      else if (ParserType.TREEINSERT.equals(modelType)) {
+        if (!(artifactMap.get(ATTACH_MODEL_ENTRY_NAME)  instanceof AbstractModel))
+          throw new InvalidFormatException("attachModel must not be null!");
+      }
+      else {
+        throw new InvalidFormatException("Unkown ParserType!");
+      }
+    }
+    else {
+      throw new InvalidFormatException("Missing the parser type property!");
+    }
+    
+    if (!(artifactMap.get(CHECK_MODEL_ENTRY_NAME)  instanceof AbstractModel)) {
+      throw new InvalidFormatException("Missing the check model!");
+    }
+    
+    if (!(artifactMap.get(PARSER_TAGGER_MODEL_ENTRY_NAME)  instanceof POSModel)) {
+      throw new InvalidFormatException("Missing the tagger model!");
+    }
+    
+    if (!(artifactMap.get(CHUNKER_TAGGER_MODEL_ENTRY_NAME)  instanceof ChunkerModel)) {
+      throw new InvalidFormatException("Missing the chunker model!");
+    }
+    
+    if (!(artifactMap.get(HEAD_RULES_MODEL_ENTRY_NAME)  instanceof HeadRules)) {
+      throw new InvalidFormatException("Missing the head rules!");
+    }
