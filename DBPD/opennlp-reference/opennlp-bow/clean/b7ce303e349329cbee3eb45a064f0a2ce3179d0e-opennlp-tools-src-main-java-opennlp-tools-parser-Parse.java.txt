OPENNLP-922: Refactor equals and hashCode, add missing hashCode

This closes #42

Also adds a checkstyle rule to enforce presence
of both hashCode and equals

-  public boolean equals(Object o) {
-    if (o instanceof Parse) {
-      Parse p = (Parse) o;
-      if (this.label == null) {
-        if (p.label != null) {
-          return false;
-        }
-      }
-      else if (!this.label.equals(p.label)) {
-        return false;
-      }
-      if (!this.span.equals(p.span)) {
-        return false;
-      }
-      if (!this.text.equals(p.text)) {
-        return false;
-      }
-      if (this.parts.size() != p.parts.size()) {
-        return false;
-      }
-      for (int ci = 0; ci < parts.size(); ci++) {
-        if (!parts.get(ci).equals(p.parts.get(ci))) {
-          return false;
-        }
-      }
+  public boolean equals(Object obj) {
+    if (obj == this) {
+
+    if (obj instanceof Parse) {
+      Parse p = (Parse) obj;
+
+      return Objects.equals(label, p.label) && span.equals(p.span)
+          && text.equals(p.text) && parts.equals(p.parts);
+    }
+
-    int result = 17;
-    result = 37 * result + span.hashCode();
-
-    // TODO: This might lead to a performance regression
-    // result = 37*result + label.hashCode();
-    result = 37 * result + text.hashCode();
-    return result;
+    // Note: label is missing here!
+    return Objects.hash(span, text);
