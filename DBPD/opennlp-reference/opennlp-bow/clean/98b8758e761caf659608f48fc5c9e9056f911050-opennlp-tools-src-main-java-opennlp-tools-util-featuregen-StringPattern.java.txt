OPENNLP-1197: support Japanese letters in FeatureGeneratorUtil

-  private static final int CONTAINS_PERIOD = 0x1 << 5;
-  private static final int CONTAINS_COMMA = 0x1 << 6;
-  private static final int CONTAINS_SLASH = 0x1 << 7;
-  private static final int CONTAINS_DIGIT = 0x1 << 8;
-  private static final int CONTAINS_HYPHEN = 0x1 << 9;
-  private static final int CONTAINS_LETTERS = 0x1 << 10;
-  private static final int CONTAINS_UPPERCASE = 0x1 << 11;
+  private static final int ALL_HIRAGANA = 0x1 << 5;
+  private static final int ALL_KATAKANA = 0x1 << 6;
+  private static final int CONTAINS_PERIOD = 0x1 << 7;
+  private static final int CONTAINS_COMMA = 0x1 << 8;
+  private static final int CONTAINS_SLASH = 0x1 << 9;
+  private static final int CONTAINS_DIGIT = 0x1 << 10;
+  private static final int CONTAINS_HYPHEN = 0x1 << 11;
+  private static final int CONTAINS_LETTERS = 0x1 << 12;
+  private static final int CONTAINS_UPPERCASE = 0x1 << 13;
-    int pattern = ALL_CAPITAL_LETTER | ALL_LOWERCASE_LETTER | ALL_DIGIT | ALL_LETTERS;
+    int pattern = ALL_CAPITAL_LETTER | ALL_LOWERCASE_LETTER | ALL_DIGIT | ALL_LETTERS
+        | ALL_HIRAGANA | ALL_KATAKANA;
+          pattern &= ~(ALL_HIRAGANA | ALL_KATAKANA);
+
+      // for Japanese...
+      final int codePoint = token.codePointAt(i);
+      final Character.UnicodeScript us = Character.UnicodeScript.of(codePoint);
+      if (us != Character.UnicodeScript.COMMON) {
+        if (us == Character.UnicodeScript.LATIN) {
+          pattern &= ~(ALL_HIRAGANA | ALL_KATAKANA);
+        }
+        else if (us == Character.UnicodeScript.HAN) {
+          pattern &= ~(ALL_HIRAGANA | ALL_KATAKANA | ALL_LOWERCASE_LETTER);
+        }
+        else if (us == Character.UnicodeScript.HIRAGANA) {
+          pattern &= ~(ALL_KATAKANA | ALL_LOWERCASE_LETTER);
+        }
+        else if (us == Character.UnicodeScript.KATAKANA) {
+          pattern &= ~(ALL_HIRAGANA | ALL_LOWERCASE_LETTER);
+        }
+      }
+      else {
+        if (ch == ',' || ch == '.' || ch == '?' || ch == '!') {
+          pattern &= ~(ALL_HIRAGANA | ALL_KATAKANA);
+        }
+      }
+   * @return true if all chars are hiragana.
+   */
+  public boolean isAllHiragana() {
+    return (pattern & ALL_HIRAGANA) > 0;
+  }
+
+  /**
+   * @return true if all chars are katakana.
+   */
+  public boolean isAllKatakana() {
+    return (pattern & ALL_KATAKANA) > 0;
+  }
+
+  /**
