Remove references to PlainTextByLineStream constructor that takes InputStream

The PlainTextByLineStream that takes InputStream was deprecated for a while. We can remove safely remove it after reviewing internal code that was still using it.
Left the deprecated code that was using the constructor for a latter work.

See issue OPENNLP-882

-import java.io.FileInputStream;
-import java.io.InputStream;
-import java.io.InputStreamReader;
+import java.nio.charset.Charset;
-import opennlp.tools.ml.maxent.GIS;
-import opennlp.tools.tokenize.TokenSample;
-import opennlp.tools.tokenize.TokenSampleStream;
-import opennlp.tools.tokenize.TokenizerME;
-import opennlp.tools.tokenize.TokenizerModel;
-import opennlp.tools.util.ObjectStream;
-import opennlp.tools.util.ObjectStreamUtils;
-import opennlp.tools.util.PlainTextByLineStream;
-import opennlp.tools.util.Span;
-import opennlp.uima.util.CasConsumerUtil;
-import opennlp.uima.util.ContainingConstraint;
-import opennlp.uima.util.OpennlpUtil;
-import opennlp.uima.util.SampleTraceStream;
-import opennlp.uima.util.UimaUtil;
-
+import opennlp.tools.ml.maxent.GIS;
+import opennlp.tools.tokenize.TokenSample;
+import opennlp.tools.tokenize.TokenSampleStream;
+import opennlp.tools.tokenize.TokenizerME;
+import opennlp.tools.tokenize.TokenizerModel;
+import opennlp.tools.util.InputStreamFactory;
+import opennlp.tools.util.MarkableFileInputStreamFactory;
+import opennlp.tools.util.ObjectStream;
+import opennlp.tools.util.ObjectStreamUtils;
+import opennlp.tools.util.PlainTextByLineStream;
+import opennlp.tools.util.Span;
+import opennlp.uima.util.CasConsumerUtil;
+import opennlp.uima.util.ContainingConstraint;
+import opennlp.uima.util.OpennlpUtil;
+import opennlp.uima.util.SampleTraceStream;
+import opennlp.uima.util.UimaUtil;
+
-    InputStream additionalTrainingDataIn = null;
-    try {
-      if (additionalTrainingDataFile != null) {
+    if (additionalTrainingDataFile != null) {
-        if (mLogger.isLoggable(Level.INFO)) {
-          mLogger.log(Level.INFO, "Using addional training data file: " + additionalTrainingDataFile);
-        }
-
-        additionalTrainingDataIn = new FileInputStream(additionalTrainingDataFile);
-
-        ObjectStream<TokenSample> additionalSamples = new TokenSampleStream(
-            new PlainTextByLineStream(new InputStreamReader(additionalTrainingDataIn, additionalTrainingDataEncoding)));
-
-        samples = ObjectStreamUtils.createObjectStream(samples, additionalSamples);
+      if (mLogger.isLoggable(Level.INFO)) {
+        mLogger.log(Level.INFO, "Using addional training data file: " + additionalTrainingDataFile);
-      if (sampleTraceFile != null) {
-        samplesOut = new OutputStreamWriter(new FileOutputStream(sampleTraceFile), sampleTraceFileEncoding);
-        samples = new SampleTraceStream<TokenSample>(samples, samplesOut);
-      }
+      InputStreamFactory additionalTrainingDataIn = new MarkableFileInputStreamFactory(
+          new File(additionalTrainingDataFile));
-      tokenModel = TokenizerME.train(language, samples, isSkipAlphaNumerics);
+      Charset additionalTrainingDataCharset = Charset
+          .forName(additionalTrainingDataEncoding);
+
+      ObjectStream<TokenSample> additionalSamples = new TokenSampleStream(
+          new PlainTextByLineStream(additionalTrainingDataIn,
+              additionalTrainingDataCharset));
+
+      samples = ObjectStreamUtils.createObjectStream(samples, additionalSamples);
-    finally {
-      if (additionalTrainingDataIn != null)
-        additionalTrainingDataIn.close();
+
+    if (sampleTraceFile != null) {
+      samplesOut = new OutputStreamWriter(new FileOutputStream(sampleTraceFile), sampleTraceFileEncoding);
+      samples = new SampleTraceStream<TokenSample>(samples, samplesOut);
+    tokenModel = TokenizerME.train(language, samples, isSkipAlphaNumerics);
+
