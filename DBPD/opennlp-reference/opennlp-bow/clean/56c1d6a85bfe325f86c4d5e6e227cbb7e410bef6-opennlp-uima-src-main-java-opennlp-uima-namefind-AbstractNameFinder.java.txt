OPENNLP-169 Updated to use combo iterator

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1101463 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import opennlp.uima.util.AnnotationComboIterator;
+import opennlp.uima.util.AnnotationIteratorPair;
-  protected abstract Span[] find(CAS cas, AnnotationFS sentence, List<AnnotationFS> tokenAnnotations, 
-      String[] tokens);
+  protected abstract Span[] find(CAS cas, String[] tokens);
-    FSIndex<AnnotationFS> sentenceIndex = cas.getAnnotationIndex(mSentenceType);
-
-    for (Iterator<AnnotationFS> sentenceIterator = sentenceIndex.iterator(); 
-        sentenceIterator.hasNext();) {
-      AnnotationFS sentenceAnnotation = (AnnotationFS) sentenceIterator.next();
+    if (isRemoveExistingAnnotations) {
+      final AnnotationComboIterator sentenceNameCombo = new AnnotationComboIterator(cas,
+          mSentenceType, mNameType);
-      if (isRemoveExistingAnnotations)
-        UimaUtil.removeAnnotations(cas, sentenceAnnotation, mNameType);
-      
-      ContainingConstraint containingConstraint =
-          new ContainingConstraint(sentenceAnnotation);
-
-      Iterator<AnnotationFS> tokenIterator = cas.createFilteredIterator(
-          cas.getAnnotationIndex(mTokenType).iterator(), containingConstraint);
-      
-      List<AnnotationFS> tokenAnnotationList = new ArrayList<AnnotationFS>();
-      
-      List<String> tokenList = new ArrayList<String>();
-
-      while (tokenIterator.hasNext()) {
-        
-        AnnotationFS tokenAnnotation = (AnnotationFS) tokenIterator
-            .next();
-
-        tokenAnnotationList.add(tokenAnnotation);
-        
-        tokenList.add(tokenAnnotation.getCoveredText());
+      List<AnnotationFS> removeAnnotations = new LinkedList<AnnotationFS>();
+      for (AnnotationIteratorPair annotationIteratorPair : sentenceNameCombo) {
+        for (AnnotationFS nameAnnotation : annotationIteratorPair.getSubIterator()) {
+          removeAnnotations.add(nameAnnotation);
+        }
-       
-      Span[] names  = find(cas, sentenceAnnotation, tokenAnnotationList, 
-          (String[]) tokenList.toArray(new String[tokenList.size()]));
-      // TODO: log names, maybe with NameSample class
+      for (AnnotationFS annotation : removeAnnotations) {
+        cas.removeFsFromIndexes(annotation);
+      }
+    }
+    
+    final AnnotationComboIterator sentenceTokenCombo = new AnnotationComboIterator(cas,
+        mSentenceType, mTokenType);
+	
+    for (AnnotationIteratorPair annotationIteratorPair : sentenceTokenCombo) {
+      final List<AnnotationFS> sentenceTokenAnnotationList = new LinkedList<AnnotationFS>();
+
+      final List<String> sentenceTokenList = new LinkedList<String>();
+
+      for (AnnotationFS tokenAnnotation : annotationIteratorPair.getSubIterator()) {
+
+        sentenceTokenAnnotationList.add(tokenAnnotation);
+
+        sentenceTokenList.add(tokenAnnotation.getCoveredText());
+      }
+      
+      Span[] names  = find(cas, 
+          (String[]) sentenceTokenList.toArray(new String[sentenceTokenList.size()]));
+    
-        int startIndex = ((AnnotationFS) tokenAnnotationList.get(
+        int startIndex = ((AnnotationFS) sentenceTokenAnnotationList.get(
-        int endIndex = ((AnnotationFS) tokenAnnotationList.get(
+        int endIndex = ((AnnotationFS) sentenceTokenAnnotationList.get(
-    
+        
