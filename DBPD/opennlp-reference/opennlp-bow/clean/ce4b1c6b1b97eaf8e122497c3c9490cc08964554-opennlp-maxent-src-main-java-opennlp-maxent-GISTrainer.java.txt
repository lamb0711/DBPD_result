OPENNLP-165 Removed slack parameter support

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1099036 13f79535-47bb-0310-9956-ffa450edef68

-  /**
-   * Specifies whether a slack parameter should be used in the model.
-   */
-  private final boolean useSlackParameter = false;
-  
-  /** 
-   * Observed expectation of correction feature.
-   */
-  private double cfObservedExpect;
-
-  private static final double NEAR_ZERO = 0.01;
-    // compute the expected value of correction
-    if (useSlackParameter) {
-      int cfvalSum = 0;
-      for (int ti = 0; ti < numUniqueEvents; ti++) {
-        for (int j = 0; j < contexts[ti].length; j++) {
-          int pi = contexts[ti][j];
-          if (!modelExpects[pi].contains(outcomeList[ti])) {
-            cfvalSum += numTimesEventsSeen[ti];
-          }
-        }
-        cfvalSum += (correctionConstant - contexts[ti].length) * numTimesEventsSeen[ti];
-      }
-      if (cfvalSum == 0) {
-        cfObservedExpect = Math.log(NEAR_ZERO); //nearly zero so log is defined
-      }
-      else {
-        cfObservedExpect = Math.log(cfvalSum);
-      }
-    }
-    double CFMOD = 0.0;
-          if (useSlackParameter) {
-            for (int oi = 0; oi < numOutcomes; oi++) {
-              if (!modelExpects[pi].contains(oi)) {
-                CFMOD += modelDistribution[oi] * numTimesEventsSeen[ei];
-              }
-            }
-          }
-      if (useSlackParameter)
-        CFMOD += (correctionConstant - contexts[ei].length) * numTimesEventsSeen[ei];
-    if (CFMOD > 0.0 && useSlackParameter)
-        evalParams.setCorrectionParam(evalParams.getCorrectionParam() + (cfObservedExpect - Math.log(CFMOD)));
