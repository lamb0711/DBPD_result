OPENNLP-844 ngram feature range in doccat now as parameter

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1741643 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.util.InvalidFormatException;
+
+ * Generates ngram features for a document.
+  //default values for bigrams
+  private int minGram = 2;
+  private int maxGram = 2;
+
+  /**
+   * Constructor for ngrams.
+   *
+   * @param minGram minGram value - which means minimum words in ngram features
+   * @param maxGram maxGram value - which means maximum words in ngram features
+   * @throws InvalidFormatException
+   */
+  public NGramFeatureGenerator(int minGram, int maxGram) throws InvalidFormatException {
+    if (minGram > 0 && maxGram > 0) {
+      if (minGram <= maxGram) {
+        this.minGram = minGram;
+        this.maxGram = maxGram;
+      } else {
+        throw new InvalidFormatException("Minimum range value (minGram) should be less than or equal to maximum range value (maxGram)!");
+      }
+    } else {
+      throw new InvalidFormatException("Both minimum range value (minGram) & maximum range value (maxGram) should be greater than or equal to 1!");
+    }
+  }
+
+  /**
+   * Default constructor for Bi grams
+   */
+  public NGramFeatureGenerator() {
+  }
+
+  /**
+   * Extract ngram features from given text fragments
+   *
+   * @param text      the text fragments to extract features from
+   * @param extraInfo optional extra information
+   * @return a collection of n gram features
+   */
-    for (int i = 0; i < text.length - 1; i++) {
-      features.add("ng=" + text[i] + ":" + text[i + 1]);
+    for (int i = 0; i <= text.length - minGram; i++) {
+      String feature = "ng=";
+      for (int y = 0; y < maxGram && i + y < text.length; y++) {
+        feature = feature + ":" + text[i + y];
+        int gramCount = y + 1;
+        if (maxGram >= gramCount && gramCount >= minGram) {
+          features.add(feature);
+        }
+      }
