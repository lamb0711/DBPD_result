OPENNLP-1180 - LM API switches to String[] (#304)


+  public void add(String... tokens) {
+    add(new StringList(tokens), 1, n);
+  }
+
-  public double calculateProbability(StringList sample) {
+  public double calculateProbability(StringList tokens) {
-      for (StringList ngram : NGramUtils.getNGrams(sample, n)) {
+      for (StringList ngram : NGramUtils.getNGrams(tokens, n)) {
+          break;
+        }
+      }
+      probability = Math.exp(probability);
+    }
+    return probability;
+  }
+
+  @Override
+  public double calculateProbability(String... tokens) {
+    double probability = 0d;
+    if (size() > 0) {
+      for (String[] ngram : NGramUtils.getNGrams(tokens, n)) {
+        double score = stupidBackoff(new StringList(ngram));
+        probability += Math.log(score);
+        if (Double.isNaN(probability)) {
+          probability = 0d;
+          break;
+  @Override
+  public String[] predictNextTokens(String... tokens) {
+    double maxProb = Double.NEGATIVE_INFINITY;
+    String[] token = null;
+
+    for (StringList ngram : this) {
+      String[] sequence = new String[ngram.size() + tokens.length];
+      for (int i = 0; i < tokens.length; i++) {
+        sequence[i] = tokens[i];
+      }
+      for (int i = 0; i < ngram.size(); i++) {
+        sequence[i + tokens.length] = ngram.getToken(i);
+      }
+      double v = calculateProbability(sequence);
+      if (v > maxProb) {
+        maxProb = v;
+        token = new String[ngram.size()];
+        for (int i = 0; i < ngram.size(); i++) {
+          token[i] = ngram.getToken(i);
+        }
+      }
+    }
+
+    return token;
+  }
+
