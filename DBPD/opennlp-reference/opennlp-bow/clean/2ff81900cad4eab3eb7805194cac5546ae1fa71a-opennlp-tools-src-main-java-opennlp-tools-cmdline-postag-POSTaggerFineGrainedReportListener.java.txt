NoJira: Trivial fixes, this closes apache/opennlp#78

-        tokenConfusionMatrix.put(tok,
-            new HashMap<String, ConfusionMatrixLine>());
+        tokenConfusionMatrix.put(tok, new HashMap<>());
-      SortedSet<String> toks = new TreeSet<>(new Comparator<String>() {
-        public int compare(String o1, String o2) {
-          if (o1.equals(o2)) {
-            return 0;
-          }
-          int e1 = 0, e2 = 0;
-          if (tokOcurrencies.containsKey(o1))
-            e1 = tokOcurrencies.get(o1).value();
-          if (tokOcurrencies.containsKey(o2))
-            e2 = tokOcurrencies.get(o2).value();
-          if (e1 == e2) {
-            return o1.compareTo(o2);
-          }
-          return e2 - e1;
+      SortedSet<String> toks = new TreeSet<>((o1, o2) -> {
+        if (o1.equals(o2)) {
+          return 0;
+        int e1 = 0, e2 = 0;
+        if (tokOcurrencies.containsKey(o1))
+          e1 = tokOcurrencies.get(o1).value();
+        if (tokOcurrencies.containsKey(o2))
+          e2 = tokOcurrencies.get(o2).value();
+        if (e1 == e2) {
+          return o1.compareTo(o2);
+        }
+        return e2 - e1;
-      SortedSet<String> toks = new TreeSet<>(new Comparator<String>() {
-        public int compare(String o1, String o2) {
-          if (o1.equals(o2)) {
-            return 0;
-          }
-          int e1 = 0, e2 = 0;
-          if (tokErrors.containsKey(o1))
-            e1 = tokErrors.get(o1).value();
-          if (tokErrors.containsKey(o2))
-            e2 = tokErrors.get(o2).value();
-          if (e1 == e2) {
-            return o1.compareTo(o2);
-          }
-          return e2 - e1;
+      SortedSet<String> toks = new TreeSet<>((o1, o2) -> {
+        if (o1.equals(o2)) {
+          return 0;
+        int e1 = 0, e2 = 0;
+        if (tokErrors.containsKey(o1))
+          e1 = tokErrors.get(o1).value();
+        if (tokErrors.containsKey(o2))
+          e2 = tokErrors.get(o2).value();
+        if (e1 == e2) {
+          return o1.compareTo(o2);
+        }
+        return e2 - e1;
-      SortedSet<String> tags = new TreeSet<>(new Comparator<String>() {
-        public int compare(String o1, String o2) {
-          if (o1.equals(o2)) {
-            return 0;
-          }
-          int e1 = 0, e2 = 0;
-          if (tagErrors.containsKey(o1))
-            e1 = tagErrors.get(o1).value();
-          if (tagErrors.containsKey(o2))
-            e2 = tagErrors.get(o2).value();
-          if (e1 == e2) {
-            return o1.compareTo(o2);
-          }
-          return e2 - e1;
+      SortedSet<String> tags = new TreeSet<>((o1, o2) -> {
+        if (o1.equals(o2)) {
+          return 0;
+        int e1 = 0, e2 = 0;
+        if (tagErrors.containsKey(o1))
+          e1 = tagErrors.get(o1).value();
+        if (tagErrors.containsKey(o2))
+          e2 = tagErrors.get(o2).value();
+        if (e1 == e2) {
+          return o1.compareTo(o2);
+        }
+        return e2 - e1;
