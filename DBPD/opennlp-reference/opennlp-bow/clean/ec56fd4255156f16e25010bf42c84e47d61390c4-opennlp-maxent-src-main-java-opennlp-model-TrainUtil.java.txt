OPENNLP-175 Updated to also report training parameters

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1124852 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.HashMap;
-  public static final String ITERATIONS_PARAM = "Iterations";
-  
-  private static final int ITERATIONS_DEFAULT = 100;
+  public static final String ITERATIONS_PARAM = "Iterations";
+  private static final int ITERATIONS_DEFAULT = 100;
+  
+  public static final String DATA_INDEXER_PARAM = "DataIndexer";
+  public static final String DATA_INDEXER_ONE_PASS_VALUE = "OnePass";
+  public static final String DATA_INDEXER_TWO_PASS_VALUE = "TwoPass";
+  
+  
+  private static String getStringParam(Map<String, String> trainParams, String key,
+      String defaultValue, Map<String, String> reportMap) {
+
+    String valueString = trainParams.get(key);
+
+    if (valueString == null)
+      valueString = defaultValue;
+    
+    if (reportMap != null)
+      reportMap.put(key, valueString);
+    
+    return valueString;
+  }
-      int defaultValue) {
-    
+      int defaultValue, Map<String, String> reportMap) {
+
-    
+
+  private static boolean getBooleanParam(Map<String, String> trainParams, String key,
+      boolean defaultValue, Map<String, String> reportMap) {
+
+    String valueString = trainParams.get(key);
+
+    if (valueString != null)
+      return Boolean.parseBoolean(valueString);
+    else
+      return defaultValue;
+  }
+  
+
+    // TODO: Need to validate all parameters correctly ... error prone?!
-    
-    if (!(MAXENT_VALUE.equals(algorithmName) || 
+
+    if (algorithmName != null && !(MAXENT_VALUE.equals(algorithmName) || 
-    
+
+    String dataIndexer = trainParams.get(DATA_INDEXER_PARAM);
+    
+    if (dataIndexer != null) {
+      if (!("OnePass".equals(dataIndexer) || "TwoPass".equals(dataIndexer))) {
+        return false;
+      }
+    }
+    
-  public static AbstractModel train(EventStream events, Map<String, String> trainParams) 
+  
+  
+  // TODO: Need a way to report results and settings back for inclusion in model ...
+  
+  public static AbstractModel train(EventStream events, Map<String, String> trainParams, Map<String, String> reportMap) 
-    // if PERCEPTRON or MAXENT
-    String algorithmName = trainParams.get(ALGORITHM_PARAM);
+    if (!isValid(trainParams))
+        throw new IllegalArgumentException("trainParams are not valid!");
-    // String DataIndexing -> OnePass|TwoPass
-    // TODO: Make data indexing configurable ... 
+    if(isSequenceTraining(trainParams))
+      throw new IllegalArgumentException("sequence training is not supported by this method!");
-    int iterations = getIntParam(trainParams, ITERATIONS_PARAM, ITERATIONS_DEFAULT);
-    int cutoff = getIntParam(trainParams, CUTOFF_PARAM, CUTOFF_DEFAULT);
+    String algorithmName = getStringParam(trainParams, ALGORITHM_PARAM, MAXENT_VALUE, reportMap);
+    
+    int iterations = getIntParam(trainParams, ITERATIONS_PARAM, ITERATIONS_DEFAULT, reportMap);
+        
+    int cutoff = getIntParam(trainParams, CUTOFF_PARAM, CUTOFF_DEFAULT, reportMap);
+
+    boolean sortAndMerge;
+    
+    if (MAXENT_VALUE.equals(algorithmName))
+        sortAndMerge = true;
+    else if (MAXENT_VALUE.equals(algorithmName))
+      sortAndMerge = false;
+    else
+      throw new IllegalStateException("Unexpected algorihtm name: " + algorithmName);
+
+    HashSumEventStream hses = new HashSumEventStream(events);
+    
+    String dataIndexerName = getStringParam(trainParams, DATA_INDEXER_PARAM,
+        DATA_INDEXER_TWO_PASS_VALUE, reportMap);
+
+    DataIndexer indexer = null;
+    
+    if (DATA_INDEXER_ONE_PASS_VALUE.equals(dataIndexerName)) {
+      indexer = new OnePassDataIndexer(hses, cutoff, sortAndMerge);
+    }
+    else if (DATA_INDEXER_TWO_PASS_VALUE.equals(dataIndexerName)) {
+      indexer = new TwoPassDataIndexer(hses, cutoff, sortAndMerge);
+    }
+    else {
+      throw new IllegalStateException("Unexpected data indexer name: " +  dataIndexerName);
+    }
-      model = opennlp.maxent.GIS.trainModel(iterations,
-          new TwoPassDataIndexer(events, cutoff));
+      
+      // TODO: Pass in number of threads
+//      int threads = getIntParam(trainParams, "Threads", 1, reportMap);
+      
+      model = opennlp.maxent.GIS.trainModel(iterations, indexer);
-      boolean useAverage = true; // <- read from params 
-      boolean sort = false; // <- read from params
+      boolean useAverage = getBooleanParam(trainParams, "UseAverage", true, reportMap);
-          iterations, new TwoPassDataIndexer(events,
-          cutoff, sort), cutoff, useAverage);
+          iterations, indexer, cutoff, useAverage);
+    if (reportMap != null)
+        reportMap.put("Training-Eventhash", hses.calculateHashSum().toString(16));
+    
-    
-    String algorithmName = trainParams.get(ALGORITHM_PARAM);
-    
-    return PERCEPTRON_SEQUENCE_VALUE.equals(algorithmName);
+    return PERCEPTRON_SEQUENCE_VALUE.equals(trainParams.get(ALGORITHM_PARAM));
-  public static AbstractModel train(SequenceStream events, Map<String, String> trainParams) 
-      throws IOException {
+  public static AbstractModel train(SequenceStream events, Map<String, String> trainParams,
+      Map<String, String> reportMap) throws IOException {
+    if (!isValid(trainParams))
+      throw new IllegalArgumentException("trainParams are not valid!");
+  
-    int iterations = getIntParam(trainParams, ITERATIONS_PARAM, ITERATIONS_DEFAULT);
-    int cutoff = getIntParam(trainParams, CUTOFF_PARAM, CUTOFF_DEFAULT);
+    int iterations = getIntParam(trainParams, ITERATIONS_PARAM, ITERATIONS_DEFAULT, reportMap);
+    int cutoff = getIntParam(trainParams, CUTOFF_PARAM, CUTOFF_DEFAULT, reportMap);
-    boolean useAverage = true; // <- TODO: read from params
+    boolean useAverage = getBooleanParam(trainParams, "UseAverage", true, reportMap);
