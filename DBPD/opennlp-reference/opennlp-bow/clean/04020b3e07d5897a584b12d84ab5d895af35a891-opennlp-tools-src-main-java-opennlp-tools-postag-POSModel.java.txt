OPENNLP-429: Refactored the POSModel, moving everything related to the factory to BaseModel, so it will be reused by other model implementations. Eliminated the necessity of calling methods from sub-class constructor. Moved the methods to instantiate factories to POSTaggerFactory and BaseToolFactory.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243780 13f79535-47bb-0310-9956-ffa450edef68

-import java.lang.reflect.Constructor;
-import opennlp.tools.util.model.ArtifactProvider;
-  private static final String FACTORY_NAME = "pos.factory";
-
-  private POSTaggerFactory posTaggerFactory = null;
-    super(COMPONENT_NAME, languageCode, manifestInfoEntries);
+    super(COMPONENT_NAME, languageCode, manifestInfoEntries, posFactory);
-
-    // The factory is optional
-    if (posFactory!=null) {
-      setManifestProperty(FACTORY_NAME, posFactory.getClass().getCanonicalName());
-      artifactMap.putAll(posFactory.createArtifactMap());
-    }
-    
-    loadArtifactSerializers();
-    loadArtifactSerializers();
-    finishLoadingArtifacts(in);
-    checkArtifactMap();
+  }
+
+  @Override
+  protected void initializeFactory() {
+    super.initializeFactory();
+
-    
-    // validate the factory
-    String factoryName = getManifestProperty(FACTORY_NAME);
-    if(factoryName != null) {
-      try {
-        Class.forName(factoryName);
-      } catch (ClassNotFoundException e) {
-        throw new InvalidFormatException("Could not find the POS factory class: " + factoryName);
-      }
-    }
-    
-    getFactory().validateArtifactMap();
-    if(this.posTaggerFactory != null) 
-      return this.posTaggerFactory;
-    String factoryName = getManifestProperty(FACTORY_NAME);
-    POSTaggerFactory theFactory = null;
-    Class<?> factoryClass = null;
-    if(factoryName != null) {
-      try {
-        factoryClass = Class.forName(factoryName);
-      } catch (ClassNotFoundException e) {
-        // already validated
-        return null;
-      }
-    } else {
-      // it is an old model, will use default factory
-      this.posTaggerFactory = new POSTaggerFactory(this);
-      return this.posTaggerFactory;
-    }
-    
-    Constructor<?> constructor = null;
-    if(factoryClass != null) {
-      try {
-        constructor = factoryClass.getConstructor(ArtifactProvider.class);
-        theFactory = (POSTaggerFactory) constructor.newInstance(this);
-      } catch (NoSuchMethodException e) {
-        // ignore, will try another constructor
-      } catch (Exception e) {
-        throw new IllegalArgumentException("Could not load POS Factory using Dictionary, POSDictionary constructor: " + factoryName, e);
-      }
-      if(theFactory == null) {
-        try {
-          factoryClass.getConstructor();
-          try {
-            theFactory = (POSTaggerFactory) constructor.newInstance();
-          } catch (Exception e) {
-            throw new IllegalArgumentException("Could not load POS Factory using default constructor: " + factoryName, e);
-          }
-        } catch (NoSuchMethodException e) {
-          // we couldn't load the class... raise an exception
-          throw new IllegalArgumentException("Could not load POS Factory: " + factoryName, e);
-        }
-      }
-    }
-    return theFactory;
+    return (POSTaggerFactory) this.toolFactory;
