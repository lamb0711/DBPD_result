OPENNLP-155 Replaced tabs for indent with white spaces

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1096673 13f79535-47bb-0310-9956-ffa450edef68

-	averageParams[pi] = 
-	  new MutableContext(allOutcomesPattern,new double[numOutcomes]);
-      for (int aoi=0;aoi<numOutcomes;aoi++) {
-        params[pi].setParameter(aoi, 0.0);
-        if (useAverage) 
-	  averageParams[pi].setParameter(aoi, 0.0);
-      }
+        averageParams[pi] = new MutableContext(allOutcomesPattern,new double[numOutcomes]);
+        for (int aoi=0;aoi<numOutcomes;aoi++) {
+          params[pi].setParameter(aoi, 0.0);
+          if (useAverage) 
+            averageParams[pi].setParameter(aoi, 0.0);
+        }
-	numTimesSameAccuracy++;
+        numTimesSameAccuracy++;
-	prevAccuracy = currAccuracy;
-	numTimesSameAccuracy = 0;
+        prevAccuracy = currAccuracy;
+        numTimesSameAccuracy = 0;
-	display("Accuracy repeated 4 times, stopping training.\n");
-	break;
+        display("Accuracy repeated 4 times, stopping training.\n");
+        break;
-	  int updateValue = -1;
+          int updateValue = -1;
-	    updateValue = 1;
+            updateValue = 1;
-	  if (modelDistribution[oi]*updateValue <= 0) {
-	    for (int ci = 0; ci < contexts[ei].length; ci++) {
-	      int pi = contexts[ei][ci];
-	      if (values == null)
-		params[pi].updateParameter(oi, updateValue);
-	      else
-		params[pi].updateParameter(oi, updateValue*values[ei][ci]);
-
-	      if (useAverage) {
-
-		if (updates[pi][oi][VALUE] != 0)
-		  averageParams[pi].updateParameter(oi,
-		     updates[pi][oi][VALUE] *
-		     (numEvents * (iteration-updates[pi][oi][ITER])
-		      + (ei-updates[pi][oi][EVENT])));
-
-		updates[pi][oi][VALUE] = (int) params[pi].getParameters()[oi];
-		updates[pi][oi][ITER] = iteration;
-		updates[pi][oi][EVENT] = ei;
-	      }
-	    }
-	  }
-	}
+    	  if (modelDistribution[oi]*updateValue <= 0) {
+    	    for (int ci = 0; ci < contexts[ei].length; ci++) {
+    	      int pi = contexts[ei][ci];
+    	      if (values == null)
+    	        params[pi].updateParameter(oi, updateValue);
+    	      else
+    	        params[pi].updateParameter(oi, updateValue*values[ei][ci]);
+    
+    	      if (useAverage) {
+    
+    	        if (updates[pi][oi][VALUE] != 0)
+    	          averageParams[pi].updateParameter(oi, updates[pi][oi][VALUE] *
+    	              (numEvents * (iteration-updates[pi][oi][ITER])
+    	              + (ei-updates[pi][oi][EVENT])));
+    	        
+    	        updates[pi][oi][VALUE] = (int) params[pi].getParameters()[oi];
+    	        updates[pi][oi][ITER] = iteration;
+    	        updates[pi][oi][EVENT] = ei;
+    	      }
+    	    }
+    	  }
+        }
-            predParams[oi] +=  
-	      updates[pi][oi][VALUE] *
-	      (numEvents * (iterations-updates[pi][oi][ITER])
-	       - updates[pi][oi][EVENT]);
+            predParams[oi] +=  updates[pi][oi][VALUE] *
+                (numEvents * (iterations-updates[pi][oi][ITER])
+                - updates[pi][oi][EVENT]);
-          numCorrect ++;
+          numCorrect++;
-    display(". ("+numCorrect+"/"+numEvents+") "+ trainingAccuracy + "\n");
+    display(". (" + numCorrect + "/" + numEvents+") " + trainingAccuracy + "\n");
