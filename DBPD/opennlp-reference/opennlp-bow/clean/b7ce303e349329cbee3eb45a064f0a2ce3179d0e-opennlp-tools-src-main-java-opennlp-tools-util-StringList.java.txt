OPENNLP-922: Refactor equals and hashCode, add missing hashCode

This closes #42

Also adds a checkstyle rule to enforce presence
of both hashCode and equals

-
-  public boolean equals(Object obj) {
-
-    boolean result;
-
-    if (this == obj) {
-      result = true;
-    }
-    else if (obj instanceof StringList) {
-      StringList tokenList = (StringList) obj;
-
-      result = Arrays.equals(tokens, tokenList.tokens);
-    }
-    else {
-      result = false;
-    }
-
-    return result;
+  public int hashCode() {
+    return Arrays.hashCode(tokens);
-  public int hashCode() {
-    int numBitsRegular = 32 / size();
-    int numExtra = 32 % size();
-    int maskExtra = 0xFFFFFFFF >>> (32 - numBitsRegular + 1);
-    int maskRegular = 0xFFFFFFFF >>> 32 - numBitsRegular;
-    int code = 0x000000000;
-    int leftMostBit = 0;
-
-    for (int wi = 0; wi < size(); wi++) {
-      int word;
-      int mask;
-      int numBits;
-      if (wi < numExtra) {
-        mask = maskExtra;
-        numBits = numBitsRegular + 1;
-      } else {
-        mask = maskRegular;
-        numBits = numBitsRegular;
-      }
-      word = getToken(wi).hashCode() & mask; // mask off top bits
-      word <<= 32 - leftMostBit - numBits; // move to correct position
-      leftMostBit += numBits; // set for next iteration
-      code |= word;
+  public boolean equals(Object obj) {
+    if (this == obj) {
+      return true;
-    return code;
+    if (obj instanceof StringList) {
+      StringList tokenList = (StringList) obj;
+
+      return Arrays.equals(tokens, tokenList.tokens);
+    }
+
+    return false;
