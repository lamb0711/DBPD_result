Correct indentation and white spaces

This closes #30

See issue OPENNLP-914

-public class ADSentenceStream extends
-    FilterObjectStream<String, ADSentenceStream.Sentence> {
+public class ADSentenceStream extends FilterObjectStream<String, ADSentenceStream.Sentence> {
-	public void setMetadata(String metadata) {
-		this.metadata = metadata;
-	}
+    public void setMetadata(String metadata) {
+      this.metadata = metadata;
+    }
-	public String getMetadata() {
-		return metadata;
-	}
+    public String getMetadata() {
+      return metadata;
+    }
-    		.compile("^([=-]*)([^:=]+=[^\\(\\s]+)\\(([\"'].+[\"'])?\\s*([^\\)]+)?\\)\\s+(.+)");
+        .compile("^([=-]*)([^:=]+=[^\\(\\s]+)\\(([\"'].+[\"'])?\\s*([^\\)]+)?\\)\\s+(.+)");
-          // should find the source source
-          while (!line.startsWith("SOURCE")) {
-        	  if(line.equals("&&")) {
-        		  // same sentence again!
-        		  useSameTextAndMeta = true;
-        		  break;
-        	  }
-            line = reader.readLine();
-            if (line == null) {
-              return null;
-            }
+        // should find the source source
+        while (!line.startsWith("SOURCE")) {
+          if (line.equals("&&")) {
+            // same sentence again!
+            useSameTextAndMeta = true;
+            break;
-        if(!useSameTextAndMeta) {
-            // got source, get the metadata
-	        String metaFromSource = line.substring(7);
-	        line = reader.readLine();
-	        // we should have the plain sentence
-	        // we remove the first token
-	        int start = line.indexOf(" ");
-	        text = line.substring(start + 1).trim();
-	        text = fixPunctuation(text);
-	        String titleTag = "";
-	        if(isTitle) titleTag = " title";
-	        String boxTag = "";
-	        if(isBox) boxTag = " box";
-	        if(start > 0) {
-	          meta = line.substring(0, start) + " p=" + para + titleTag + boxTag + metaFromSource;
-	        }
+          line = reader.readLine();
+          if (line == null) {
+            return null;
+          }
+        }
+        if (!useSameTextAndMeta) {
+          // got source, get the metadata
+          String metaFromSource = line.substring(7);
+          line = reader.readLine();
+          // we should have the plain sentence
+          // we remove the first token
+          int start = line.indexOf(" ");
+          text = line.substring(start + 1).trim();
+          text = fixPunctuation(text);
+          String titleTag = "";
+          if (isTitle) titleTag = " title";
+          String boxTag = "";
+          if (isBox) boxTag = " box";
+          if (start > 0) {
+            meta = line.substring(0, start) + " p=" + para + titleTag + boxTag + metaFromSource;
+          }
-        while(line != null && line.startsWith("###")) {
-        	line = reader.readLine();
+        while (line != null && line.startsWith("###")) {
+          line = reader.readLine();
-          if(element != null) {
+          if (element != null) {
-            if( element.isLeaf() ) {
+            if (element.isLeaf() ) {
-                  nodeStack.peek().addElement(element);
+                nodeStack.peek().addElement(element);
-      if(line.equals("_") || line.startsWith("<lixo") || line.startsWith("pause")) {
-      	return null;
+      if (line.equals("_") || line.startsWith("<lixo") || line.startsWith("pause")) {
+        return null;
-      if(line.startsWith("=")) {
-      	Matcher bizarreLeafMatcher = bizarreLeafPattern.matcher(line);
+      if (line.startsWith("=")) {
+        Matcher bizarreLeafMatcher = bizarreLeafPattern.matcher(line);
-        	int level = line.lastIndexOf("=") + 1;
-        	String lexeme = line.substring(level + 1);
+          int level = line.lastIndexOf("=") + 1;
+          String lexeme = line.substring(level + 1);
-        	if(lexeme.matches("\\w.*?[\\.<>].*")) {
-        	  return null;
-        	}
+          if (lexeme.matches("\\w.*?[\\.<>].*")) {
+            return null;
+          }
-        	 Leaf leaf = new Leaf();
-           leaf.setLevel(level + 1);
-           leaf.setSyntacticTag("");
-           leaf.setMorphologicalTag("");
-           leaf.setLexeme(lexeme);
+          Leaf leaf = new Leaf();
+          leaf.setLevel(level + 1);
+          leaf.setSyntacticTag("");
+          leaf.setMorphologicalTag("");
+          leaf.setLexeme(lexeme);
-           return leaf;
+          return leaf;
-      public boolean isLeaf() {return false;}
+      public boolean isLeaf() {
+        return false;
+      }
-      public boolean isLeaf() {return true;}
+      public boolean isLeaf() {
+        return true;
+      }
-      public String getFunctionalTag(){
+      public String getFunctionalTag() {
-        if(value == null) return "";
+        if (value == null) return "";
-    	  if(sentenceStarted) {
-    		  if (sentEnd.matcher(line).matches() || extEnd.matcher(line).matches()) {
-		          sentenceStarted = false;
-	          } else if (!line.startsWith("A1")) {
-	        	  sentence.append(line).append('\n');
-	          }
+        if (sentenceStarted) {
+          if (sentEnd.matcher(line).matches() || extEnd.matcher(line).matches()) {
+            sentenceStarted = false;
+          } else if (!line.startsWith("A1")) {
+            sentence.append(line).append('\n');
+          }
-    		  if (sentStart.matcher(line).matches()) {
-		          sentenceStarted = true;
-		        } else if(paraStart.matcher(line).matches()) {
-		        	paraID++;
-		        } else if(titleStart.matcher(line).matches()) {
-		        	isTitle = true;
-		        } else if(titleEnd.matcher(line).matches()) {
-		        	isTitle = false;
-		        } else if(textStart.matcher(line).matches()) {
-		        	paraID = 0;
-		        } else if(boxStart.matcher(line).matches()) {
-		        	isBox = true;
-		        } else if(boxEnd.matcher(line).matches()) {
-		        	isBox = false;
-		        }
-    	  }
+          if (sentStart.matcher(line).matches()) {
+            sentenceStarted = true;
+          } else if (paraStart.matcher(line).matches()) {
+            paraID++;
+          } else if (titleStart.matcher(line).matches()) {
+            isTitle = true;
+          } else if (titleEnd.matcher(line).matches()) {
+            isTitle = false;
+          } else if (textStart.matcher(line).matches()) {
+            paraID = 0;
+          } else if (boxStart.matcher(line).matches()) {
+            isBox = true;
+          } else if (boxEnd.matcher(line).matches()) {
+            isBox = false;
+          }
+        }
