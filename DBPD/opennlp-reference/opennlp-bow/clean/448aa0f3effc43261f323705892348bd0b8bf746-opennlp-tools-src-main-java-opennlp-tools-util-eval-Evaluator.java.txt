OPENNLP-226 Refactored the evaluator listeners:

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1159270 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.LinkedList;
+import java.util.List;
+  private List<EvaluationSampleListener<T>> listeners = new LinkedList<EvaluationSampleListener<T>>();
+  
-   * Evaluates the given reference object.
-   *
+   * Evaluates the given reference sample object.
+   * 
-   * @param sample the sample to be evaluated
+   * @param reference the reference sample.
+   * 
+   * @return the predicted sample
-  public abstract void evaluateSample(T sample);
+  public T processSample(T reference) {
+    // should be overridden by subclass... in the future we will make it abstract.
+    return null;
+  }
+   * Evaluates the given reference object. The default implementation calls
+   * {@link Evaluator#processSample(T)}
+   * 
+   * <p>
+   * <b>note:</b> this method will be changed to private in the future.
+   * Implementations should override {@link Evaluator#processSample(T)} instead.
+   * If this method is override, the implementation has to update the score
+   * after every invocation.
+   * </p>
+   * 
+   * @param sample
+   *          the sample to be evaluated
+   */
+  public void evaluateSample(T sample) {
+    T predicted = processSample(sample);
+    if(sample.equals(predicted)) {
+      notifyCorrectlyClassified(sample, predicted);
+    } else {
+      notifyMissclassified(sample, predicted);
+    }
+  }
+  
+  /**
+   * 
+  
+  public synchronized void addListener(EvaluationSampleListener<T> listener) {
+    this.listeners.add(listener);
+  }
+  
+  public synchronized void removeListener(EvaluationSampleListener<T> listener) {
+    this.listeners.remove(listener);
+  }
+  
+  protected void notifyCorrectlyClassified(T reference, T prediction) {
+    for (EvaluationSampleListener<T> listener : listeners) {
+      listener.correctlyClassified(reference, prediction);
+    }
+  }
+  
+  protected void notifyMissclassified(T reference, T prediction) {
+    for (EvaluationSampleListener<T> listener : listeners) {
+      listener.missclassified(reference, prediction);
+    }   
+  }
