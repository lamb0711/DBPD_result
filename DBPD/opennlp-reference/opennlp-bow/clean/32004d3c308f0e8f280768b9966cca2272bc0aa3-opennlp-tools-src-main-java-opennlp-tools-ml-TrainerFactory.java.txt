OPENNLP-635 pluggable trainers can now be correctly classified as event or sequence

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1559228 13f79535-47bb-0310-9956-ffa450edef68

-  public static boolean isSupportEvent(Map<String, String> trainParams) {
-    if (trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM) != null) {
-      if(EventTrainer.EVENT_VALUE.equals(trainParams
-            .get(AbstractTrainer.TRAINER_TYPE_PARAM))) {
-        return true;
+  private static String getPluggableTrainerType(String className) {
+    try {
+      Class<?> trainerClass = Class.forName(className);
+      if(trainerClass != null) {
+        
+        if (EventTrainer.class.isAssignableFrom(trainerClass)) {
+          return EventTrainer.EVENT_VALUE;
+        }
+        else if (SequenceTrainer.class.isAssignableFrom(trainerClass)) {
+          return SequenceTrainer.SEQUENCE_VALUE;
+        }
-      return false;
-    } else {
-      return true; // default to event train
+    } catch (ClassNotFoundException e) {
+    
+    return "UNKOWN";
+  }
+  
+  public static boolean isSupportEvent(Map<String, String> trainParams) {
+    
+    String trainerType = trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM);
+    
+    if (trainerType == null) {
+      trainerType = getPluggableTrainerType(trainParams.get(AbstractTrainer.ALGORITHM_PARAM));
+    }
+    
+    if (trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM) != null) {
+      return EventTrainer.EVENT_VALUE.equals(trainParams
+          .get(AbstractTrainer.TRAINER_TYPE_PARAM));
+    } 
+    
+    // default
+    return true;
-    if (SequenceTrainer.SEQUENCE_VALUE.equals(trainParams
-        .get(AbstractTrainer.TRAINER_TYPE_PARAM))) {
+    
+    String trainerType = trainParams.get(AbstractTrainer.TRAINER_TYPE_PARAM);
+    
+    if (trainerType == null) {
+      trainerType = getPluggableTrainerType(trainParams.get(AbstractTrainer.ALGORITHM_PARAM));
+    }
+    
+    if (SequenceTrainer.SEQUENCE_VALUE.equals(trainerType)) {
+    
