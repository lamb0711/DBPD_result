OPENNLP-429: Moved ngram and pos dictionary dealing from POSModel to POSTaggerFactory. Added a new unit test.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243605 13f79535-47bb-0310-9956-ffa450edef68

-import java.io.OutputStream;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
-import opennlp.tools.util.model.UncloseableInputStream;
-  static class POSDictionarySerializer implements ArtifactSerializer<POSDictionary> {
-
-    public POSDictionary create(InputStream in) throws IOException,
-        InvalidFormatException {
-      return POSDictionary.create(new UncloseableInputStream(in));
-    }
-
-    public void serialize(POSDictionary artifact, OutputStream out)
-        throws IOException {
-      artifact.serialize(out);
-    }
-
-    @SuppressWarnings("unchecked")
-    static void register(Map<String, ArtifactSerializer> factories) {
-      factories.put("tagdict", new POSDictionarySerializer());
-    }
-  }
-
-  private static final String POS_MODEL_ENTRY_NAME = "pos.model";
-  private static final String TAG_DICTIONARY_ENTRY_NAME = "tags.tagdict";
-  private static final String NGRAM_DICTIONARY_ENTRY_NAME = "ngram.dictionary";
+  public static final String POS_MODEL_ENTRY_NAME = "pos.model";
-    if (tagDictionary != null)
-      artifactMap.put(TAG_DICTIONARY_ENTRY_NAME, tagDictionary);
-
-    if (ngramDict != null)
-      artifactMap.put(NGRAM_DICTIONARY_ENTRY_NAME, ngramDict);
-    
-  @SuppressWarnings("unchecked")
+  @SuppressWarnings("rawtypes")
-    POSDictionarySerializer.register(serializers);
-
-    // Ensure that the tag dictionary is compatible with the model
-    Object tagdictEntry = artifactMap.get(TAG_DICTIONARY_ENTRY_NAME);
-
-    if (tagdictEntry != null) {
-      if (tagdictEntry instanceof POSDictionary) {
-        POSDictionary posDict = (POSDictionary) tagdictEntry;
-        
-        Set<String> dictTags = new HashSet<String>();
-        
-        for (String word : posDict) {
-          Collections.addAll(dictTags, posDict.getTags(word)); 
-        }
-        
-        Set<String> modelTags = new HashSet<String>();
-        
-        AbstractModel posModel = getPosModel();
-        
-        for  (int i = 0; i < posModel.getNumOutcomes(); i++) {
-          modelTags.add(posModel.getOutcome(i));
-        }
-        
-        if (!modelTags.containsAll(dictTags)) {
-          StringBuilder unknownTag = new StringBuilder();
-          for (String d : dictTags) {
-            if(!modelTags.contains(d)) {
-              unknownTag.append(d).append(" ");
-            }
-          }
-          throw new InvalidFormatException("Tag dictioinary contains tags " +
-          		"which are unknown by the model! The unknown tags are: " + unknownTag.toString());
-        }
-      }
-      else {
-        throw new InvalidFormatException("Abbreviations dictionary has wrong type!");
-      }
-    }
-
-    Object ngramDictEntry = artifactMap.get(NGRAM_DICTIONARY_ENTRY_NAME);
-
-    if (ngramDictEntry != null && !(ngramDictEntry instanceof Dictionary)) {
-      throw new InvalidFormatException("NGram dictionary has wrong type!");
-    }
+    getFactory().validateArtifactMap();
-    return (POSDictionary) artifactMap.get(TAG_DICTIONARY_ENTRY_NAME);
+    return null;
-    return (Dictionary) artifactMap.get(NGRAM_DICTIONARY_ENTRY_NAME);
+    if(getFactory() != null)
+      return getFactory().getDictionary();
+    return null;
