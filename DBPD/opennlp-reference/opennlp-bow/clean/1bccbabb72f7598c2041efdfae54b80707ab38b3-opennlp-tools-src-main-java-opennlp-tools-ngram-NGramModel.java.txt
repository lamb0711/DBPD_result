Correct indentation and white spaces

This closes #30

See issue OPENNLP-914

-public class NGramModel implements Iterable<StringList>{
+public class NGramModel implements Iterable<StringList> {
-        int count;
-        String countValueString = null;
+      int count;
+      String countValueString = null;
-        try {
-          countValueString = entry.getAttributes().getValue(COUNT);
+      try {
+        countValueString = entry.getAttributes().getValue(COUNT);
-          if (countValueString == null) {
-        	  throw new InvalidFormatException(
-        	      "The count attribute must be set!");
-          }
-
-          count = Integer.parseInt(countValueString);
-        } catch (NumberFormatException e) {
-          throw new InvalidFormatException("The count attribute '" + countValueString
-              + "' must be a number!", e);
+        if (countValueString == null) {
+          throw new InvalidFormatException(
+              "The count attribute must be set!");
-        add(entry.getTokens());
-        setCount(entry.getTokens(), count);
-      });
+        count = Integer.parseInt(countValueString);
+      } catch (NumberFormatException e) {
+        throw new InvalidFormatException("The count attribute '" + countValueString
+            + "' must be a number!", e);
+      }
+
+      add(entry.getTokens());
+      setCount(entry.getTokens(), count);
+    });
-        throw new IllegalArgumentException("minLength and maxLength param must be at least 1. " +
-            "minLength=" + minLength + ", maxLength= " + maxLength);
+      throw new IllegalArgumentException("minLength and maxLength param must be at least 1. " +
+          "minLength=" + minLength + ", maxLength= " + maxLength);
-        throw new IllegalArgumentException("minLength param must not be larger than " +
-            "maxLength param. minLength=" + minLength + ", maxLength= " + maxLength);
+      throw new IllegalArgumentException("minLength param must not be larger than " +
+          "maxLength param. minLength=" + minLength + ", maxLength= " + maxLength);
-	    Iterator<Entry> entryIterator = new Iterator<Entry>()
-	      {
-	        private Iterator<StringList> mDictionaryIterator = NGramModel.this.iterator();
+    Iterator<Entry> entryIterator = new Iterator<Entry>()
+    {
+      private Iterator<StringList> mDictionaryIterator = NGramModel.this.iterator();
-	        public boolean hasNext() {
-	          return mDictionaryIterator.hasNext();
-	        }
+      public boolean hasNext() {
+        return mDictionaryIterator.hasNext();
+      }
-	        public Entry next() {
+      public Entry next() {
-	          StringList tokens = mDictionaryIterator.next();
+        StringList tokens = mDictionaryIterator.next();
-	          Attributes attributes = new Attributes();
+        Attributes attributes = new Attributes();
-	          attributes.setValue(COUNT, Integer.toString(getCount(tokens)));
+        attributes.setValue(COUNT, Integer.toString(getCount(tokens)));
-	          return new Entry(tokens, attributes);
-	        }
+        return new Entry(tokens, attributes);
+      }
-	        public void remove() {
-	          throw new UnsupportedOperationException();
-	        }
+      public void remove() {
+        throw new UnsupportedOperationException();
+      }
-	      };
+    };
-	    DictionarySerializer.serialize(out, entryIterator, false);
+    DictionarySerializer.serialize(out, entryIterator, false);
-   }
+  }
