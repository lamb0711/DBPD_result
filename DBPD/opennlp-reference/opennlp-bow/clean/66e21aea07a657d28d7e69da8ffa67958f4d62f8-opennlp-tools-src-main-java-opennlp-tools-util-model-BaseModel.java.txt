OPENNLP-429: Forgot to commit the BaseModel

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243189 13f79535-47bb-0310-9956-ffa450edef68

-import java.util.Collections;
+import java.util.HashSet;
-public abstract class BaseModel {
+public abstract class BaseModel implements ArtifactProvider {
-
+  
+
+  private HashSet<String> unloadedExtensions;
+
+  private boolean subclassSerializersInitiated = false;
+  private boolean finishedLoadingArtifacts = false;
-   * Initializes the current instance.
+   * Initializes the current instance. The sub-class constructor should call the methods:
+   * <li> {@link #loadArtifactSerializers()} to populate the serializers map, and
+   * <li> {@link #checkArtifactMap()} to check the artifact map is OK. <p>
+   * Not calling these methods will cause an {@link IllegalStateException}
-   * @param languageCode
+   * @param componentName the component name
+   * @param languageCode the language code
-    createArtifactSerializers(artifactSerializers);
+    createBaseArtifactSerializers(artifactSerializers);
+    finishedLoadingArtifacts = true;
-   * Initializes the current instance.
-   *
-   * @param in
+   * Initializes the current instance. The sub-class constructor should call the methods:
+   * <li> {@link #loadArtifactSerializers()} to populate the serializers map, 
+   * <li> {@link #finishLoadingArtifacts(InputStream)} to finish loading artifacts with the loaded serializers, and
+   * <li> {@link #checkArtifactMap()} to check the artifact map is OK. <p>
+   * Not calling these methods will cause an {@link IllegalStateException}
+   * 
+   * @param componentName the component name
+   * @param in the input stream containing the model
-    Map<String, Object> artifactMap = new HashMap<String, Object>();
-    
-    createArtifactSerializers(artifactSerializers);
+    artifactMap = new HashMap<String, Object>();
+    createBaseArtifactSerializers(artifactSerializers);
+    
+    // will read it in two steps, first using the known factories, latter the
+    // unknown.
+    unloadedExtensions = new HashSet<String>();
-        throw new InvalidFormatException("Unkown artifact format: " + extension);
+        unloadedExtensions.add(extension);
+      } else {
+        artifactMap.put(entry.getName(), factory.create(zip));
-
-      artifactMap.put(entry.getName(), factory.create(zip));
-
+      
-    this.artifactMap = Collections.unmodifiableMap(artifactMap);
+  }
+  
+  /**
+   * Loads the artifact serializers. Should be called in sub-class constructor
+   */
+  protected void loadArtifactSerializers() {
+    if (!subclassSerializersInitiated)
+      createArtifactSerializers(artifactSerializers);
+    subclassSerializersInitiated = true;
+  }
-    validateArtifactMap();
+  /**
+   * Finish loading the artifacts now that it knows all serializers.
+   * <p>
+   * Should be called while loading a model from serialized file.
+   */
+  protected void finishLoadingArtifacts(InputStream in)
+      throws InvalidFormatException, IOException {
+    finishedLoadingArtifacts = true;
+    if (unloadedExtensions == null || unloadedExtensions.size() == 0) {
+      return;
+    }
+    in.reset();
+    final ZipInputStream zip = new ZipInputStream(in);
+    Map<String, Object> artifactMap = new HashMap<String, Object>(
+        this.artifactMap);
+    ZipEntry entry;
+    while ((entry = zip.getNextEntry()) != null) {
+
+      String extension = getEntryExtension(entry.getName());
+
+      if (unloadedExtensions.contains(extension)) {
+        ArtifactSerializer factory = artifactSerializers.get(extension);
+
+        if (factory == null) {
+          throw new InvalidFormatException("Unkown artifact format: "
+              + extension);
+        } else {
+          artifactMap.put(entry.getName(), factory.create(zip));
+        }
+      }
+
+      zip.closeEntry();
+    }
+    this.unloadedExtensions = null;
+    this.artifactMap.putAll(artifactMap);
-    serializers.putAll(createArtifactSerializers());
+    // do nothing, base artifacts are loaded by createBaseArtifactSerializers
+  private void createBaseArtifactSerializers(
+      Map<String, ArtifactSerializer> serializers) {
+    serializers.putAll(createArtifactSerializers());
+  }
+  
+    if (!finishedLoadingArtifacts)
+      throw new IllegalStateException(
+          "The method BaseModel.finishLoadingArtifacts(..) was not called by BaseModel sub-class.");
+    if (!subclassSerializersInitiated) {
+      throw new IllegalStateException(
+          "The method BaseModel.loadArtifactSerializers() was not called by BaseModel subclass constructor.");
+    }
+    
+  
+  @SuppressWarnings("unchecked")
+  public <T> T getArtifact(String key) {
+    Object artifact = artifactMap.get(key);
+    if(artifact == null)
+      return null;
+    return (T) artifact;
+  }
