Speed up GIS training by saving Executor in the GISTrainer

Thanks to Daniel Russ  for providing a patch

See issue OPENNLP-759

+import java.util.concurrent.CompletionService;
+import java.util.concurrent.ExecutorCompletionService;
+	int threads=modelExpects.length;
+	ExecutorService executor = Executors.newFixedThreadPool(threads);
+	CompletionService<ModelExpactationComputeTask> completionService=new ExecutorCompletionService<GISTrainer.ModelExpactationComputeTask>(executor);
-      currLL = nextIteration(correctionConstant);
+      currLL = nextIteration(correctionConstant,completionService);
+    executor.shutdown();
-  private double nextIteration(double correctionConstant) {
+  private double nextIteration(double correctionConstant, CompletionService<ModelExpactationComputeTask> completionService) {
+    // Each thread gets equal number of tasks, if the number of tasks
+    // is not divisible by the number of threads, the first "leftOver" 
+    // threads have one extra task.
-
-    ExecutorService executor = Executors.newFixedThreadPool(numberOfThreads);
-
-
-    List<Future<?>> futures = new ArrayList<Future<?>>();
-
+    // submit all tasks to the completion service.
-      if (i != numberOfThreads - 1)
-        futures.add(executor.submit(new ModelExpactationComputeTask(i, i*taskSize, taskSize)));
+      if (i < leftOver)
+        completionService.submit(new ModelExpactationComputeTask(i, i*taskSize+i, taskSize+1));
-        futures.add(executor.submit(new ModelExpactationComputeTask(i, i*taskSize, taskSize + leftOver)));
+        completionService.submit(new ModelExpactationComputeTask(i, i*taskSize+leftOver, taskSize));
-    for (Future<?> future : futures) {
-      ModelExpactationComputeTask finishedTask;
+    for (int i=0; i<numberOfThreads; i++) {
+      ModelExpactationComputeTask finishedTask = null;
-        finishedTask = (ModelExpactationComputeTask) future.get();
+        finishedTask = completionService.take().get();
-    executor.shutdown();
-
