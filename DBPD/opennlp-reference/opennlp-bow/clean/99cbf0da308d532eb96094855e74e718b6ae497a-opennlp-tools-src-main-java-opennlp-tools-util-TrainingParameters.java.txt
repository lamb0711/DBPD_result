OPENNLP-1036: Use Object values in TrainingParameters instead of String. This closes apache/opennlp#176

-  private Map<String, String> parameters = new HashMap<>();
+  private Map<String, Object> parameters = new HashMap<>();
-  
+
+  /**
+   *
+   * @deprecated
+   */
+    //parameters.putAll(map);
+    // try to respect their original type...
+    for (String key: map.keySet()) {
+      String value = map.get(key);
+      try {
+        int intValue = Integer.parseInt(value);
+        parameters.put(key, intValue);
+      }
+      catch (NumberFormatException ei) {
+        try {
+          double doubleValue = Double.parseDouble(value);
+          parameters.put(key, doubleValue);
+        }
+        catch (NumberFormatException ed) {
+          // Because Boolean.parseBoolean() doesn't throw NFE, it just checks the value is either
+          // true or yes. So let's see their letters here.
+          if (value.toLowerCase().equals("true") || value.toLowerCase().equals("false")) {
+            parameters.put(key, Boolean.parseBoolean(value));
+          }
+          else {
+            parameters.put(key, value);
+          }
+        }
+      }
+    }
+  }
+
+  /* TODO: Once we throw Map<String,String> away, have this constructor to be uncommented
+  public TrainingParameters(Map<String,Object> map) {
-  
+  */
+
-      parameters.put((String) entry.getKey(), (String) entry.getValue());
+      parameters.put((String) entry.getKey(), entry.getValue());
-    return parameters.get(namespace + "." + ALGORITHM_PARAM);
+    return (String)parameters.get(getKey(namespace, ALGORITHM_PARAM));
-    return parameters.get(ALGORITHM_PARAM);
+    return (String)parameters.get(ALGORITHM_PARAM);
+  }
+
+  /**
+   * Retrieves a map with the training parameters which have the passed name space.
+   *
+   * @param namespace
+   *
+   * @return a parameter map which can be passed to the train and validate methods.
+   *
+   * @deprecated use {@link #getObjectSettings(String)} instead
+   */
+  public Map<String, String> getSettings(String namespace) {
+
+    Map<String, String> trainingParams = new HashMap<>();
+    String prefix = namespace + ".";
+
+    for (Map.Entry<String, Object> entry : parameters.entrySet()) {
+      String key = entry.getKey();
+
+      if (namespace != null) {
+        if (key.startsWith(prefix))  {
+          trainingParams.put(key.substring(prefix.length()), getStringValue(entry.getValue()));
+        }
+      }
+      else {
+        if (!key.contains(".")) {
+          trainingParams.put(key, getStringValue(entry.getValue()));
+        }
+      }
+    }
+
+    return Collections.unmodifiableMap(trainingParams);
+  }
+
+  private static String getStringValue(Object value) {
+    if (value instanceof Integer) {
+      return Integer.toString((Integer)value);
+    }
+    else if (value instanceof Double) {
+      return Double.toString((Double)value);
+    }
+    else if (value instanceof Boolean) {
+      return Boolean.toString((Boolean)value);
+    }
+    else {
+      return (String)value;
+    }
+  }
+
+  /**
+   * Retrieves all parameters without a name space.
+   *
+   * @return the settings map
+   *
+   * @deprecated use {@link #getObjectSettings()} instead
+   */
+  public Map<String, String> getSettings() {
+    return getSettings(null);
-  public Map<String, String> getSettings(String namespace) {
+  public Map<String, Object> getObjectSettings(String namespace) {
-    Map<String, String> trainingParams = new HashMap<>();
+    Map<String, Object> trainingParams = new HashMap<>();
+    String prefix = namespace + ".";
-    for (Map.Entry<String, String> entry : parameters.entrySet()) {
+    for (Map.Entry<String, Object> entry : parameters.entrySet()) {
-        String prefix = namespace + ".";
-
-  public Map<String, String> getSettings() {
-    return getSettings(null);
+  public Map<String, Object> getObjectSettings() {
+    return getObjectSettings(null);
+    Map<String, Object> settings = getObjectSettings(namespace);
-    for (Map.Entry<String, String> entry : getSettings(namespace).entrySet()) {
-      params.put(entry.getKey(), entry.getValue());
+    for (String key: settings.keySet()) {
+      Object value = settings.get(key);
+      if (value instanceof Integer) {
+        params.put(key, (Integer)value);
+      }
+      else if (value instanceof Double) {
+        params.put(key, (Double)value);
+      }
+      else if (value instanceof Boolean) {
+        params.put(key, (Boolean)value);
+      }
+      else {
+        params.put(key, (String)value);
+      }
-    if (namespace == null) {
-      parameters.putIfAbsent(key, value);
-    }
-    else {
-      parameters.putIfAbsent(namespace + "." + key, value);
-    }
+    parameters.putIfAbsent(getKey(namespace, key), value);
-  public void put(String namespace, String key, String value) {
+  public void putIfAbsent(String namespace, String key, int value) {
+    parameters.putIfAbsent(getKey(namespace, key), value);
+  }
-    if (namespace == null) {
-      parameters.put(key, value);
-    }
-    else {
-      parameters.put(namespace + "." + key, value);
-    }
+  public void putIfAbsent(String key, int value) {
+    putIfAbsent(null, key, value);
+  }
+
+  public void putIfAbsent(String namespace, String key, double value) {
+    parameters.putIfAbsent(getKey(namespace, key), value);
+  }
+
+  public void putIfAbsent(String key, double value) {
+    putIfAbsent(null, key, value);
+  }
+
+  public void putIfAbsent(String namespace, String key, boolean value) {
+    parameters.putIfAbsent(getKey(namespace, key), value);
+  }
+
+  public void putIfAbsent(String key, boolean value) {
+    putIfAbsent(null, key, value);
+  }
+
+  public void put(String namespace, String key, String value) {
+    parameters.put(getKey(namespace, key), value);
+  public void put(String namespace, String key, int value) {
+    parameters.put(getKey(namespace, key), value);
+  }
+
+  public void put(String key, int value) {
+    put(null, key, value);
+  }
+
+  public void put(String namespace, String key, double value) {
+    parameters.put(getKey(namespace, key), value);
+  }
+
+  public void put(String key, double value) {
+    put(null, key, value);
+  }
+
+  public void put(String namespace, String key, boolean value) {
+    parameters.put(getKey(namespace, key), value);
+  }
+
+  public void put(String key, boolean value) {
+    put(null, key, value);
+  }
+
-    for (Map.Entry<String, String> entry : parameters.entrySet()) {
+    for (Map.Entry<String, Object> entry: parameters.entrySet()) {
+  /**
+   * get a String parameter
+   * @param key
+   * @param defaultValue
+   * @return
+   * @throws {@link java.lang.ClassCastException} can be thrown if the value is not {@link String}
+   */
-    return parameters.getOrDefault(key, defaultValue);
+    return getStringParameter(null, key, defaultValue);
-  
+
+  /**
+   * get a String parameter in the specified namespace
+   * @param namespace
+   * @param key
+   * @param defaultValue
+   * @return
+   * @throws {@link java.lang.ClassCastException} can be thrown if the value is not {@link String}
+   */
-    if (namespace == null) {
-      return getStringParameter(key, defaultValue);
+    Object value = parameters.get(getKey(namespace, key));
+    if (value == null) {
+      return defaultValue;
-    return parameters.getOrDefault(namespace + "." + key, defaultValue);
+    else {
+      return (String)value;
+    }
-  
+
+  /**
+   * get an Integer parameter
+   * @param key
+   * @param defaultValue
+   * @return
+   */
-    String value = parameters.getOrDefault(key, Integer.toString(defaultValue));
-    return Integer.parseInt(value);
+    return getIntParameter(null, key, defaultValue);
-  
+
+  /**
+   * get an Integer parameter in the specified namespace
+   * @param namespace
+   * @param key
+   * @param defaultValue
+   * @return
+   */
-    if (namespace == null) {
-      return getIntParameter(key, defaultValue);
+    Object value = parameters.get(getKey(namespace, key));
+    if (value == null) {
+      return defaultValue;
-    String value = parameters.getOrDefault(namespace + "." + key, Integer.toString(defaultValue));
-    return Integer.parseInt(value);
+    else {
+      // TODO: We have this try-catch for back-compat reason. After removing deprecated flag,
+      // we can remove try-catch block and just return (Integer)value;
+      try {
+        return (Integer) value;
+      }
+      catch (ClassCastException e) {
+        return Integer.parseInt((String)value);
+      }
+    }
-  
+
+  /**
+   * get a Double parameter
+   * @param key
+   * @param defaultValue
+   * @return
+   */
-    String value = parameters.getOrDefault(key, Double.toString(defaultValue));
-    return Double.parseDouble(value);
+    return getDoubleParameter(null, key, defaultValue);
-  
+
+  /**
+   * get a Double parameter in the specified namespace
+   * @param namespace
+   * @param key
+   * @param defaultValue
+   * @return
+   */
-    if (namespace == null) {
-      return getDoubleParameter(key, defaultValue);
+    Object value = parameters.get(getKey(namespace, key));
+    if (value == null) {
+      return defaultValue;
-    String value = parameters.getOrDefault(namespace + "." + key, Double.toString(defaultValue));
-    return Double.parseDouble(value);
+    else {
+      // TODO: We have this try-catch for back-compat reason. After removing deprecated flag,
+      // we can remove try-catch block and just return (Double)value;
+      try {
+        return (Double) value;
+      }
+      catch (ClassCastException e) {
+        return Double.parseDouble((String)value);
+      }
+    }
-  
+
+  /**
+   * get a Boolean parameter
+   * @param key
+   * @param defaultValue
+   * @return
+   */
-    String value = parameters.getOrDefault(key, Boolean.toString(defaultValue));
-    return Boolean.parseBoolean(value);
+    return getBooleanParameter(null, key, defaultValue);
-  
+
+  /**
+   * get a Boolean parameter in the specified namespace
+   * @param namespace
+   * @param key
+   * @param defaultValue
+   * @return
+   */
-    if (namespace == null) {
-      return getBooleanParameter(key, defaultValue);
+    Object value = parameters.get(getKey(namespace, key));
+    if (value == null) {
+      return defaultValue;
-    String value = parameters.getOrDefault(namespace + "." + key, Boolean.toString(defaultValue));
-    return Boolean.parseBoolean(value);
+    else {
+      // TODO: We have this try-catch for back-compat reason. After removing deprecated flag,
+      // we can remove try-catch block and just return (Boolean)value;
+      try {
+        return (Boolean) value;
+      }
+      catch (ClassCastException e) {
+        return Boolean.parseBoolean((String)value);
+      }
+    }
-    mlParams.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(100));
-    mlParams.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(5));
+    mlParams.put(TrainingParameters.ITERATIONS_PARAM, 100);
+    mlParams.put(TrainingParameters.CUTOFF_PARAM, 5);
+
+  static String getKey(String namespace, String key) {
+    if (namespace == null) {
+      return key;
+    }
+    else {
+      return namespace + "." + key;
+    }
+  }
