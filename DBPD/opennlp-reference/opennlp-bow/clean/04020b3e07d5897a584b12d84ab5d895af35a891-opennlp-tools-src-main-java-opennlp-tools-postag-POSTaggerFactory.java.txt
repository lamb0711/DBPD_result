OPENNLP-429: Refactored the POSModel, moving everything related to the factory to BaseModel, so it will be reused by other model implementations. Eliminated the necessity of calling methods from sub-class constructor. Moved the methods to instantiate factories to POSTaggerFactory and BaseToolFactory.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243780 13f79535-47bb-0310-9956-ffa450edef68

+import java.lang.reflect.Constructor;
-    this.ngramDictionary = artifactProvider.getArtifact(NGRAM_DICTIONARY_ENTRY_NAME);
-    this.posDictionary = artifactProvider.getArtifact(TAG_DICTIONARY_ENTRY_NAME);
+    if(this.posDictionary == null && artifactProvider != null)
+      this.posDictionary = artifactProvider.getArtifact(TAG_DICTIONARY_ENTRY_NAME);
+    if(this.ngramDictionary == null && artifactProvider != null)
+      this.ngramDictionary = artifactProvider.getArtifact(NGRAM_DICTIONARY_ENTRY_NAME);
-
+  
+  public static POSTaggerFactory create(String subclassName,
+      Dictionary ngramDictionary, POSDictionary posDictionary)
+      throws InvalidFormatException {
+    POSTaggerFactory theFactory = null;
+    Class<? extends BaseToolFactory> factoryClass = loadSubclass(subclassName);
+    if (factoryClass != null) {
+      try {
+        Constructor<?> constructor = null;
+        constructor = factoryClass.getConstructor(Dictionary.class,
+            POSDictionary.class);
+        theFactory = (POSTaggerFactory) constructor.newInstance(
+            ngramDictionary, posDictionary);
+      } catch (NoSuchMethodException e) {
+        String msg = "Could not instantiate the "
+            + subclassName
+            + ". The mandatry constructor (Dictionary, POSDictionary) is missing.";
+        System.err.println(msg);
+        throw new IllegalArgumentException(msg);
+      } catch (Exception e) {
+        String msg = "Could not instantiate the "
+            + subclassName
+            + ". The constructor (Dictionary, POSDictionary) throw an exception.";
+        System.err.println(msg);
+        e.printStackTrace();
+        throw new InvalidFormatException(msg);
+      }
+    }
+    return theFactory;
+  }
