OPENNLP-500: Now the BaseToolFactory uses the ExtensionLoader to instantiate a ToolFactory. ToolFactories now need an empty constructor, and the constructor that takes an ArtifactProvider was replaced by a init method in the BaseToolFactory.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1361242 13f79535-47bb-0310-9956-ffa450edef68

-import java.lang.reflect.Constructor;
+import opennlp.tools.util.ext.ExtensionLoader;
-  protected final ArtifactProvider artifactProvider;
+  protected ArtifactProvider artifactProvider;
-    this.artifactProvider = null;
-  /**
-   * All sub-classes should have a constructor whith this signature
-   */
-  public BaseToolFactory(ArtifactProvider artifactProvider) {
+ /**
+  * Initializes the ToolFactory with an artifact provider.
+  */
+  public void init(ArtifactProvider artifactProvider) {
-    Class<? extends BaseToolFactory> factoryClass = loadSubclass(subclassName);
-    if (factoryClass != null) {
-      try {
-        Constructor<?> constructor = null;
-        constructor = factoryClass.getConstructor(ArtifactProvider.class);
-        theFactory = (BaseToolFactory) constructor
-            .newInstance(artifactProvider);
-      } catch (NoSuchMethodException e) {
-        String msg = "Could not instantiate the "
-            + subclassName
-            + ". The mandatry constructor (ArtifactProvider) is missing.";
-        System.err.println(msg);
-        throw new IllegalArgumentException(msg);
-      } catch (Exception e) {
-        String msg = "Could not instantiate the "
-            + subclassName
-            + ". The constructor (ArtifactProvider) throw an exception.";
-        System.err.println(msg);
-        e.printStackTrace();
-        throw new InvalidFormatException(msg);
+    
+    try {
+      // load the ToolFactory using the default constructor
+      theFactory = ExtensionLoader.instantiateExtension(
+          BaseToolFactory.class, subclassName);
+
+      if (theFactory != null) {
+        theFactory.init(artifactProvider);
+    } catch (Exception e) {
+      String msg = "Could not instantiate the " + subclassName
+          + ". The initialization throw an exception.";
+      System.err.println(msg);
+      e.printStackTrace();
+      throw new InvalidFormatException(msg, e);
-        Constructor<?> constructor = null;
-        constructor = factoryClass.getConstructor(ArtifactProvider.class);
-        theFactory = (BaseToolFactory) constructor
-            .newInstance(artifactProvider);
-      } catch (NoSuchMethodException e) {
-        String msg = "Could not instantiate the "
-            + factoryClass.getCanonicalName()
-            + ". The mandatry constructor (ArtifactProvider) is missing.";
-        System.err.println(msg);
-        throw new IllegalArgumentException(msg);
+        theFactory = factoryClass.newInstance();
+        theFactory.init(artifactProvider);
-            + ". The constructor (ArtifactProvider) throw an exception.";
+            + ". The initialization throw an exception.";
-        throw new InvalidFormatException(msg);
+        throw new InvalidFormatException(msg, e);
