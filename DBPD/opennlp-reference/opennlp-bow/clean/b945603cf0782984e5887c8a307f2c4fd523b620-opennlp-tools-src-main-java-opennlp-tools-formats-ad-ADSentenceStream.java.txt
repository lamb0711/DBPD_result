OPENNLP-529: AD formatter was not working with Amazonia corpus. Now we add a fake root node if there is multiple roots.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1368010 13f79535-47bb-0310-9956-ffa450edef68

-        line = reader.readLine();
+        // skip lines starting with ###
+        line = reader.readLine();
+        while(line != null && line.startsWith("###")) {
+        	line = reader.readLine();
+        }
+        
-        // we get the complete line
-        root.setSyntacticTag(line);
+        root.setSyntacticTag("ROOT");
+        
-        line = reader.readLine();
+        
-            // remove elements at same level or higher
-            while (!nodeStack.isEmpty()
-                && element.getLevel() > 0 && element.getLevel() <= nodeStack.peek().getLevel()) {
-              nodeStack.pop();
+            // The idea here is to keep a stack of nodes that are candidates for
+            // parenting the following elements (nodes and leafs).
+
+            // 1) When we get a new element, we check its level and remove from
+            // the top of the stack nodes that are brothers or nephews.
+            while (!nodeStack.isEmpty() && element.getLevel() > 0
+                && element.getLevel() <= nodeStack.peek().getLevel()) {
+              Node nephew = nodeStack.pop();
+            
+              // 2a) If the element is a leaf and there is no parent candidate,
+              // add it as a daughter of the root.  
-  						} else {
-  							// look for the node with the correct level
-  							Node peek = nodeStack.peek();
-  							if (element.level == 0) { // add to the root
-  								nodeStack.firstElement().addElement(element);
-  							} else {
-  								Node parent = null;
-  								int index = nodeStack.size() - 1;
-  								while(parent == null) {
-  									if(peek.getLevel() < element.getLevel()) {
-  										parent = peek;
-  									} else {
-  										index--;
-  										if(index > -1) {
-  											peek = nodeStack.get(index);
-  										} else {
-  											parent = nodeStack.firstElement();
-  										}
-  									}
-  								}
-  								parent.addElement(element);
-  							}
+              } else {
+                // 2b) There are parent candidates. 
+                // look for the node with the correct level
+                Node peek = nodeStack.peek();
+                if (element.level == 0) { // add to the root
+                  nodeStack.firstElement().addElement(element);
+                } else {
+                  Node parent = null;
+                  int index = nodeStack.size() - 1;
+                  while (parent == null) {
+                    if (peek.getLevel() < element.getLevel()) {
+                      parent = peek;
+                    } else {
+                      index--;
+                      if (index > -1) {
+                        peek = nodeStack.get(index);
+                      } else {
+                        parent = nodeStack.firstElement();
+                      }
+                    }
+                  }
+                  parent.addElement(element);
+                }
-              if (!nodeStack.isEmpty()) {
-                nodeStack.peek().addElement(element);
+              // 3) Check if the element that is at the top of the stack is this
+              // node parent, if yes add it as a son 
+              if (!nodeStack.isEmpty() && nodeStack.peek().getLevel() < element.getLevel()) {
+                  nodeStack.peek().addElement(element);
+              } else {
+                System.err.println("should not happen!");
+              // 4) Add it to the stack so it is a parent candidate.
+              
+      // Note: all levels are higher than 1, because 0 is reserved for the root.
+      
-        int level = nodeMatcher.group(1).length();
+        int level = nodeMatcher.group(1).length() + 1;
-        int level = leafMatcher.group(1).length();
+        int level = leafMatcher.group(1).length() + 1;
-        int level = punctuationMatcher.group(1).length();
+        int level = punctuationMatcher.group(1).length() + 1;
-          int level = bizarreLeafMatcher.group(1).length();
+          int level = bizarreLeafMatcher.group(1).length() + 1;
-        	int level = line.lastIndexOf("=");
+        	int level = line.lastIndexOf("=") + 1;
-      leaf.setLevel(0);
+      leaf.setLevel(1);
