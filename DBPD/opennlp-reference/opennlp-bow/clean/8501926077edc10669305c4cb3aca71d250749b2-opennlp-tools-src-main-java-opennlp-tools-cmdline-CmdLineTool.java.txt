OPENNLP-402 Removed top-level interfaces and move the default implementations up to their places. That makes it easier to understand the source code since less super-types are involved.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1424177 13f79535-47bb-0310-9956-ffa450edef68

- * Base interface for all command line tools.
+ * Base class for all command line tools.
-public interface CmdLineTool {
+public abstract class CmdLineTool {
+
+  protected CmdLineTool() {
+  }
-  String getName();
+  public String getName() {
+    if (getClass().getName().endsWith("Tool")) {
+      return getClass().getSimpleName().substring(0, getClass().getSimpleName().length() - 4);
+    } else {
+      return getClass().getSimpleName();
+    }
+  }
-   * Retrieves a short description of what the tool does.
-   *
-   * @return a short description of what the tool does
+   * Returns whether the tool has any command line params.
+   * @return whether the tool has any command line params
-  String getShortDescription();
+  public boolean hasParams() {
+    return true;
+  }
+
+  @SuppressWarnings({"unchecked"})
+  protected <T> String getBasicHelp(Class<T> argProxyInterface) {
+    return getBasicHelp(new Class[]{argProxyInterface});
+  }
+
+  protected <T> String getBasicHelp(Class<T>... argProxyInterfaces) {
+    return "Usage: " + CLI.CMD + " " + getName() + " " +
+        ArgumentParser.createUsage(argProxyInterfaces);
+  }
-  String getHelp();
+  public abstract String getHelp();
+  
+  protected <T> T validateAndParseParams(String[] args, Class<T> argProxyInterface) {
+    String errorMessage = ArgumentParser.validateArgumentsLoudly(args, argProxyInterface);
+    if (null != errorMessage) {
+      throw new TerminateToolException(1, errorMessage + "\n" + getHelp());
+    }
+    return ArgumentParser.parse(args, argProxyInterface);
+  }
-   * Returns whether the tool has any command line params.
-   * @return whether the tool has any command line params
+   * Retrieves a short description of what the tool does.
+   *
+   * @return a short description of what the tool does
-  boolean hasParams();
-}
+  public String getShortDescription() {
+    return "";
+  }
+}
