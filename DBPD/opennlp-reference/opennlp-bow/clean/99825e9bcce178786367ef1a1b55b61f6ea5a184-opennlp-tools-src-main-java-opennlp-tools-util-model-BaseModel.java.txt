OPENNLP-429: Reseting the input stream could fail depending on how it was created. For now will store the artifact bytes to process it latter.

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1243675 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
-import java.util.HashSet;
-  private HashSet<String> unloadedExtensions;
+  private Map<String, byte[]> leftoverArtifacts;
-    unloadedExtensions = new HashSet<String>();
+    leftoverArtifacts = new HashMap<String, byte[]>();
-        unloadedExtensions.add(extension);
+        /* TODO: find a better solution, that would consume less memory */
+        byte[] bytes = toByteArray(zip);
+        leftoverArtifacts.put(entry.getName(), bytes);
-    if (unloadedExtensions == null || unloadedExtensions.size() == 0) {
+    if (leftoverArtifacts == null || leftoverArtifacts.size() == 0) {
-    in.reset();
-    final ZipInputStream zip = new ZipInputStream(in);
-    Map<String, Object> artifactMap = new HashMap<String, Object>(
-        this.artifactMap);
-    ZipEntry entry;
-    while ((entry = zip.getNextEntry()) != null) {
-      String extension = getEntryExtension(entry.getName());
+    Map<String, Object> artifactMap = new HashMap<String, Object>();
+    
+    for (String entryName : leftoverArtifacts.keySet()) {
+      
+      String extension = getEntryExtension(entryName);
-      if (unloadedExtensions.contains(extension)) {
+      if (leftoverArtifacts.containsKey(entryName)) {
-          artifactMap.put(entry.getName(), factory.create(zip));
+          artifactMap.put(entryName, factory.create(new ByteArrayInputStream(leftoverArtifacts.get(entryName))));
-
-      zip.closeEntry();
-    this.unloadedExtensions = null;
+    this.leftoverArtifacts = null;
+  
+  private static byte[] toByteArray(InputStream input) throws IOException {
+    ByteArrayOutputStream output = new ByteArrayOutputStream();
+    byte[] buffer = new byte[1024 * 4];
+    int count = 0;
+    int n = 0;
+    while (-1 != (n = input.read(buffer))) {
+      output.write(buffer, 0, n);
+      count += n;
+    }
+    return output.toByteArray();
+  }
