OPENNLP-579
GeoEntityLinkerImpl: Implemented better scoring using Dice coefficient of bigram, as well as highly improved scoring based on country context. Created an NgramGenerator class and a FuzzyStringMatching class, assuming they would be useful for other linker impls. Implemented Regex based discovery of countrycontext, which enabled proximity based analysis of doctext
Multiple other small efficiencies in the GeoEntityLinker

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1533959 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+import java.util.Set;
- * Links location entities to gazatteers.
+ * Links location entities to gazatteers. Currently supports gazateers in a
+ * MySql database (NGA and USGS)
+  GeoEntityScorer scorer = new GeoEntityScorer();
-  private List<CountryContextHit> hits;
-  private EntityLinkerProperties props;
+  private Map<String, Set<Integer>> countryMentions;
+  private EntityLinkerProperties linkerProperties;
+  /**
+   * Flag for deciding whether to search gaz only for toponyms within countries
+   * that are mentioned in the document
+   */
+  private Boolean filterCountryContext=true;
-      if (props == null) {
-        props = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
+      if (linkerProperties == null) {
+        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      if (hits == null) {
-        System.out.println("getting country context");
-        hits = countryContext.find(text, props);
-      }
-
+     
+        countryMentions = countryContext.regexfind(text, linkerProperties);
+      
+      //prioritize query
+      filterCountryContext = Boolean.valueOf(linkerProperties.getProperty("geoentitylinker.filter_by_country_context", "true"));
-        System.out.println("processing match " + i + " of " + matches.length);
-        ArrayList<BaseLink> geoNamesEntries = geoNamesGaz.find(matches[i], names[i], hits, props);
-        ArrayList<BaseLink> usgsEntries = usgsGaz.find(matches[i], names[i], hits, props);
-        LinkedSpan<BaseLink> geoSpans = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
-        geoSpans.getLinkedEntries().addAll(usgsEntries);
-        geoSpans.setSearchTerm(matches[i]);
-        spans.add(geoSpans);
+
+//nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
+        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
+        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
+          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
+        if (countryMentions.keySet().contains("us")) {
+          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
+
+        if (!usgsEntries.isEmpty()) {
+          geoSpan.getLinkedEntries().addAll(usgsEntries);
+          geoSpan.setSearchTerm(matches[i]);
+        }
+
+        if (!geoSpan.getLinkedEntries().isEmpty()) {
+          geoSpan.setSearchTerm(matches[i]);
+          spans.add(geoSpan);
+        }
+
-      return spans;
+      //score the spans
+
+      scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 1000);
+
+      //  return spans;
-
-
-      if (props == null) {
-        props = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
+      if (linkerProperties == null) {
+        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      List<CountryContextHit> hits = countryContext.find(text, props);
+     
+        //  System.out.println("getting country context");
+        //hits = countryContext.find(text, linkerProperties);
+        countryMentions = countryContext.regexfind(text, linkerProperties);
+      
-        ArrayList<BaseLink> geoNamesEntries = geoNamesGaz.find(matches[i], names[i], hits, props);
-        ArrayList<BaseLink> usgsEntries = usgsGaz.find(matches[i], names[i], hits, props);
-        LinkedSpan<BaseLink> geoSpans = new LinkedSpan<BaseLink>(geoNamesEntries, names[i], 0);
-        geoSpans.getLinkedEntries().addAll(usgsEntries);
-        geoSpans.setSearchTerm(matches[i]);
-        spans.add(geoSpans);
+        //nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
+        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
+        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
+          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
+        if (countryMentions.keySet().contains("us")) {
+          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
+
+        if (!usgsEntries.isEmpty()) {
+          geoSpan.getLinkedEntries().addAll(usgsEntries);
+          geoSpan.setSearchTerm(matches[i]);
+        }
+
+        if (!geoSpan.getLinkedEntries().isEmpty()) {
+          geoSpan.setSearchTerm(matches[i]);
+          spans.add(geoSpan);
+        }
-      return spans;
+
+    scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 1000);
-      if (props == null) {
-        props = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
+      if (linkerProperties == null) {
+        linkerProperties = new EntityLinkerProperties(new File("C:\\temp\\opennlpmodels\\entitylinker.properties"));
-      List<CountryContextHit> hits = countryContext.find(text, props);
+
+      countryMentions = countryContext.regexfind(text, linkerProperties);
-        ArrayList<BaseLink> geoNamesEntries = geoNamesGaz.find(matches[i], names[i], hits, props);
-        ArrayList<BaseLink> usgsEntries = usgsGaz.find(matches[i], names[i], hits, props);
-        LinkedSpan<BaseLink> geoSpans = new LinkedSpan<BaseLink>(geoNamesEntries, names[i], 0);
-        geoSpans.getLinkedEntries().addAll(usgsEntries);
-        geoSpans.setSearchTerm(matches[i]);
-        geoSpans.setSentenceid(sentenceIndex);
-        spans.add(geoSpans);
-      }
+//nga gazateer is for other than US placenames, don't use it unless US is a mention in the document
+        ArrayList<BaseLink> geoNamesEntries = new ArrayList<BaseLink>();
+        if (!(countryMentions.keySet().contains("us") && countryMentions.keySet().size() == 1) || countryMentions.keySet().size() > 1) {
+          geoNamesEntries = geoNamesGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        ArrayList<BaseLink> usgsEntries = new ArrayList<BaseLink>();
+        if (countryMentions.keySet().contains("us")) {
+          usgsEntries = usgsGaz.find(matches[i], names[i], countryMentions, linkerProperties);
+        }
+        LinkedSpan<BaseLink> geoSpan = new LinkedSpan<BaseLink>(geoNamesEntries, names[i].getStart(), names[i].getEnd());
+        if (!usgsEntries.isEmpty()) {
+          geoSpan.getLinkedEntries().addAll(usgsEntries);
+          geoSpan.setSearchTerm(matches[i]);
+        }
+
+        if (!geoSpan.getLinkedEntries().isEmpty()) {
+          geoSpan.setSearchTerm(matches[i]);
+          geoSpan.setSentenceid(sentenceIndex);
+          spans.add(geoSpan);
+        }
+      }
+      scorer.score(spans, countryMentions, countryContext.getNameCodesMap(), text, sentences, 2000);
-    this.props = properties;
+    this.linkerProperties = properties;
