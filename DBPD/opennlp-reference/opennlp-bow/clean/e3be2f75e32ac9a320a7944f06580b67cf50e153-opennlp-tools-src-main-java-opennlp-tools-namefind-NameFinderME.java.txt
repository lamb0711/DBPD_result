OPENNLP-684
OPENNLP-685
OPENNLP-686
OPENNLP-691
Added prob support to Span and LinkedSpan. SentenceDetectorME and NameFinderME return Span[] with probs. All tests pass locally. Also made minor javadoc and formatting changes on EntityLinker and TokenNameFinder

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1594063 13f79535-47bb-0310-9956-ffa450edef68

-
-
-  private AdditionalContextFeatureGenerator additionalContextFeatureGenerator =
-      new AdditionalContextFeatureGenerator();
+  private AdditionalContextFeatureGenerator additionalContextFeatureGenerator
+          = new AdditionalContextFeatureGenerator();
-          new WindowFeatureGenerator(additionalContextFeatureGenerator, 8, 8));
+            new WindowFeatureGenerator(additionalContextFeatureGenerator, 8, 8));
-   * @deprecated the beam size is now configured during training time in the trainer parameter
-   * file via beamSearch.beamSize
+   * @deprecated the beam size is now configured during training time in the
+   * trainer parameter file via beamSearch.beamSize
-      SequenceValidator<String> sequenceValidator) {
+          SequenceValidator<String> sequenceValidator) {
-
-    }
-    else {
+    } else {
-          model.getNameFinderModel());
+              model.getNameFinderModel());
-    }
-    else {
+    } else {
-      if (featureGenerator == null)
+      if (featureGenerator == null) {
+      }
-          new WindowFeatureGenerator(additionalContextFeatureGenerator, 8, 8));
+            new WindowFeatureGenerator(additionalContextFeatureGenerator, 8, 8));
-    if (this.sequenceValidator == null)
+    if (this.sequenceValidator == null) {
+    }
-   * @deprecated the beam size is now configured during training time in the trainer parameter
-   * file via beamSearch.beamSize
+   * @deprecated the beam size is now configured during training time in the
+   * trainer parameter file via beamSearch.beamSize
-  @Deprecated  public NameFinderME(TokenNameFinderModel model, AdaptiveFeatureGenerator generator, int beamSize) {
+  @Deprecated
+  public NameFinderME(TokenNameFinderModel model, AdaptiveFeatureGenerator generator, int beamSize) {
-   * @deprecated the beam size is now configured during training time in the trainer parameter
-   * file via beamSearch.beamSize
+   * @deprecated the beam size is now configured during training time in the
+   * trainer parameter file via beamSearch.beamSize
-   return new CachedFeatureGenerator(
-         new AdaptiveFeatureGenerator[]{
-           new WindowFeatureGenerator(new TokenFeatureGenerator(), 2, 2),
-           new WindowFeatureGenerator(new TokenClassFeatureGenerator(true), 2, 2),
-           new OutcomePriorFeatureGenerator(),
-           new PreviousMapFeatureGenerator(),
-           new BigramNameFeatureGenerator(),
-           new SentenceFeatureGenerator(true, false)
-           });
+    return new CachedFeatureGenerator(
+            new AdaptiveFeatureGenerator[]{
+              new WindowFeatureGenerator(new TokenFeatureGenerator(), 2, 2),
+              new WindowFeatureGenerator(new TokenClassFeatureGenerator(true), 2, 2),
+              new OutcomePriorFeatureGenerator(),
+              new PreviousMapFeatureGenerator(),
+              new BigramNameFeatureGenerator(),
+              new SentenceFeatureGenerator(true, false)
+            });
-      byte[] generatorDescriptor, final Map<String, Object> resources)
-      throws IOException {
+          byte[] generatorDescriptor, final Map<String, Object> resources)
+          throws IOException {
-          generatorDescriptor), new FeatureGeneratorResourceProvider() {
+              generatorDescriptor), new FeatureGeneratorResourceProvider() {
-        public Object getResource(String key) {
-          if (resources != null)
-            return resources.get(key);
-          return null;
-        }
-      });
+                public Object getResource(String key) {
+                  if (resources != null) {
+                    return resources.get(key);
+                  }
+                  return null;
+                }
+              });
-   * Generates name tags for the given sequence, typically a sentence,
-   * returning token spans for any identified names.
+   * Generates name tags for the given sequence, typically a sentence, returning
+   * token spans for any identified names.
-   * @param tokens an array of the tokens or words of the sequence,
-   *     typically a sentence.
-   * @param additionalContext features which are based on context outside
-   *     of the sentence but which should also be used.
+   * @param tokens an array of the tokens or words of the sequence, typically a
+   * sentence.
+   * @param additionalContext features which are based on context outside of the
+   * sentence but which should also be used.
-
-    return seqCodec.decode(c);
+    Span[] spans = seqCodec.decode(c);
+    spans = setProbs(spans);
+    return spans;
-   * Forgets all adaptive data which was collected during previous
-   * calls to one of the find methods.
+   * Forgets all adaptive data which was collected during previous calls to one
+   * of the find methods.
-   contextGenerator.clearAdaptiveData();
+    contextGenerator.clearAdaptiveData();
-   * <code>chunk</code>. The specified array should be at least as large as
-   * the number of tokens in the previous call to <code>chunk</code>.
+   * <code>chunk</code>. The specified array should be at least as large as the
+   * number of tokens in the previous call to <code>chunk</code>.
-   * @param probs
-   *          An array used to hold the probabilities of the last decoded
-   *          sequence.
+   * @param probs An array used to hold the probabilities of the last decoded
+   * sequence.
-   public void probs(double[] probs) {
-     bestSequence.getProbs(probs);
-   }
+  public void probs(double[] probs) {
+    bestSequence.getProbs(probs);
+  }
-    * Returns an array with the probabilities of the last decoded sequence.  The
-    * sequence was determined based on the previous call to <code>chunk</code>.
-    *
-    * @return An array with the same number of probabilities as tokens were sent to <code>chunk</code>
-    * when it was last called.
-    */
-   public double[] probs() {
-     return bestSequence.getProbs();
-   }
+   * Returns an array with the probabilities of the last decoded sequence. The
+   * sequence was determined based on the previous call to <code>chunk</code>.
+   *
+   * @return An array with the same number of probabilities as tokens were sent
+   * to <code>chunk</code> when it was last called.
+   */
+  public double[] probs() {
+    return bestSequence.getProbs();
+  }
-   /**
-    * Returns an array of probabilities for each of the specified spans which is the arithmetic mean
-    * of the probabilities for each of the outcomes which make up the span.
-    *
-    * @param spans The spans of the names for which probabilities are desired.
-    *
-    * @return an array of probabilities for each of the specified spans.
-    */
-   public double[] probs(Span[] spans) {
+  /**
+   * sets the probs for the spans
+   *
+   * @param spans
+   * @return
+   */
+  private Span[] setProbs(Span[] spans) {
+     double[] probs = probs(spans);
+     if (probs != null) {    
+       
+      for (int i = 0; i < probs.length; i++) {
+        double prob = probs[i];
+        spans[i].setProb(prob);
+      }
+    }
+    return spans;
+  }
-     double[] sprobs = new double[spans.length];
-     double[] probs = bestSequence.getProbs();
+  /**
+   * Returns an array of probabilities for each of the specified spans which is
+   * the arithmetic mean of the probabilities for each of the outcomes which
+   * make up the span.
+   *
+   * @param spans The spans of the names for which probabilities are desired.
+   *
+   * @return an array of probabilities for each of the specified spans.
+   */
+  public double[] probs(Span[] spans) {
-     for (int si=0; si<spans.length; si++) {
+    double[] sprobs = new double[spans.length];
+    double[] probs = bestSequence.getProbs();
-       double p = 0;
+    for (int si = 0; si < spans.length; si++) {
-       for (int oi = spans[si].getStart(); oi < spans[si].getEnd(); oi++) {
-         p += probs[oi];
-       }
+      double p = 0;
-       p /= spans[si].length();
+      for (int oi = spans[si].getStart(); oi < spans[si].getEnd(); oi++) {
+        p += probs[oi];
+      }
-       sprobs[si] = p;
-     }
+      p /= spans[si].length();
-     return sprobs;
-   }
+      sprobs[si] = p;
+    }
-   public static TokenNameFinderModel train(String languageCode, String type,
-       ObjectStream<NameSample> samples, TrainingParameters trainParams,
-       TokenNameFinderFactory factory) throws IOException {
-     String beamSizeString = trainParams.getSettings().get(BeamSearch.BEAM_SIZE_PARAMETER);
+    return sprobs;
+  }
-     int beamSize = NameFinderME.DEFAULT_BEAM_SIZE;
-     if (beamSizeString != null) {
-       beamSize = Integer.parseInt(beamSizeString);
-     }
+  public static TokenNameFinderModel train(String languageCode, String type,
+          ObjectStream<NameSample> samples, TrainingParameters trainParams,
+          TokenNameFinderFactory factory) throws IOException {
+    String beamSizeString = trainParams.getSettings().get(BeamSearch.BEAM_SIZE_PARAMETER);
-     Map<String, String> manifestInfoEntries = new HashMap<String, String>();
+    int beamSize = NameFinderME.DEFAULT_BEAM_SIZE;
+    if (beamSizeString != null) {
+      beamSize = Integer.parseInt(beamSizeString);
+    }
-     MaxentModel nameFinderModel = null;
+    Map<String, String> manifestInfoEntries = new HashMap<String, String>();
-     SequenceClassificationModel<String> seqModel = null;
+    MaxentModel nameFinderModel = null;
-     TrainerType trainerType = TrainerFactory.getTrainerType(trainParams.getSettings());
+    SequenceClassificationModel<String> seqModel = null;
-     if (TrainerType.EVENT_MODEL_TRAINER.equals(trainerType)) {
-       ObjectStream<Event> eventStream = new NameFinderEventStream(samples, type,
-           factory.createContextGenerator(), factory.createSequenceCodec());
+    TrainerType trainerType = TrainerFactory.getTrainerType(trainParams.getSettings());
-       EventTrainer trainer = TrainerFactory.getEventTrainer(trainParams.getSettings(), manifestInfoEntries);
-       nameFinderModel = trainer.train(eventStream);
-     }
-     // TODO: Maybe it is not a good idea, that these two don't use the context generator ?!
-     // These also don't use the sequence codec ?!
-     else if (TrainerType.EVENT_MODEL_SEQUENCE_TRAINER.equals(trainerType)) {
-       NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, factory.createContextGenerator());
+    if (TrainerType.EVENT_MODEL_TRAINER.equals(trainerType)) {
+      ObjectStream<Event> eventStream = new NameFinderEventStream(samples, type,
+              factory.createContextGenerator(), factory.createSequenceCodec());
-       EventModelSequenceTrainer trainer = TrainerFactory.getEventModelSequenceTrainer(
-           trainParams.getSettings(), manifestInfoEntries);
-       nameFinderModel = trainer.train(ss);
-     }
-     else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
-       SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
-           trainParams.getSettings(), manifestInfoEntries);
+      EventTrainer trainer = TrainerFactory.getEventTrainer(trainParams.getSettings(), manifestInfoEntries);
+      nameFinderModel = trainer.train(eventStream);
+    } // TODO: Maybe it is not a good idea, that these two don't use the context generator ?!
+    // These also don't use the sequence codec ?!
+    else if (TrainerType.EVENT_MODEL_SEQUENCE_TRAINER.equals(trainerType)) {
+      NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, factory.createContextGenerator());
-       NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, factory.createContextGenerator(), false);
-       seqModel = trainer.train(ss);
-     }
-     else {
-       throw new IllegalStateException("Unexpected trainer type!");
-     }
+      EventModelSequenceTrainer trainer = TrainerFactory.getEventModelSequenceTrainer(
+              trainParams.getSettings(), manifestInfoEntries);
+      nameFinderModel = trainer.train(ss);
+    } else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
+      SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
+              trainParams.getSettings(), manifestInfoEntries);
-     if (seqModel != null) {
-       return new TokenNameFinderModel(languageCode, seqModel, null,
-           factory.getResources(), manifestInfoEntries, factory.getSequenceCodec());
-     }
-     else {
-       return new TokenNameFinderModel(languageCode, nameFinderModel, beamSize, null,
-           factory.getResources(), manifestInfoEntries, factory.getSequenceCodec());
-     }
-   }
+      NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, factory.createContextGenerator(), false);
+      seqModel = trainer.train(ss);
+    } else {
+      throw new IllegalStateException("Unexpected trainer type!");
+    }
-   /**
-    * Trains a name finder model.
-    *
-    * @param languageCode
-    *          the language of the training data
-    * @param type
-    *          null or an override type for all types in the training data
-    * @param samples
-    *          the training data
-    * @param trainParams
-    *          machine learning train parameters
-    * @param generator
-    *          null or the feature generator
-    * @param resources
-    *          the resources for the name finder or null if none
-    *
-    * @return the newly trained model
-    *
-    * @throws IOException
-    * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
-    */
-   @Deprecated
-   public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples,
-       TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources)
-           throws IOException {
-
-     if (languageCode == null) {
-       throw new IllegalArgumentException("languageCode must not be null!");
-     }
-
-     String beamSizeString = trainParams.getSettings().get(BeamSearch.BEAM_SIZE_PARAMETER);
-
-     int beamSize = NameFinderME.DEFAULT_BEAM_SIZE;
-     if (beamSizeString != null) {
-       beamSize = Integer.parseInt(beamSizeString);
-     }
-
-
-     Map<String, String> manifestInfoEntries = new HashMap<String, String>();
-
-     AdaptiveFeatureGenerator featureGenerator;
-
-     if (generator != null)
-       featureGenerator = generator;
-     else
-       featureGenerator = createFeatureGenerator();
-
-     MaxentModel nameFinderModel = null;
-
-     SequenceClassificationModel<String> seqModel = null;
-
-     TrainerType trainerType = TrainerFactory.getTrainerType(trainParams.getSettings());
-
-     if (TrainerType.EVENT_MODEL_TRAINER.equals(trainerType)) {
-       ObjectStream<Event> eventStream = new NameFinderEventStream(samples, type,
-           new DefaultNameContextGenerator(featureGenerator), new BioCodec());
-
-       EventTrainer trainer = TrainerFactory.getEventTrainer(trainParams.getSettings(), manifestInfoEntries);
-       nameFinderModel = trainer.train(eventStream);
-     }
-     else if (TrainerType.EVENT_MODEL_SEQUENCE_TRAINER.equals(trainerType)) {
-       NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, featureGenerator);
-
-       EventModelSequenceTrainer trainer = TrainerFactory.getEventModelSequenceTrainer(
-           trainParams.getSettings(), manifestInfoEntries);
-       nameFinderModel = trainer.train(ss);
-     }
-     else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
-       SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
-           trainParams.getSettings(), manifestInfoEntries);
-
-       NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, featureGenerator, false);
-       seqModel = trainer.train(ss);
-     }
-     else {
-       throw new IllegalStateException("Unexpected trainer type!");
-     }
-
-     // TODO: Pass the sequence codec down to the model! We will just store the class
-     // name in the model, and then always use the extension loader to create it!
-     // The cmd line interface, will replace shortcuts with actual class names.
-
-     // depending on which one is not null!
-     if (seqModel != null) {
-       return new TokenNameFinderModel(languageCode, seqModel, null,
-           resources, manifestInfoEntries, new BioCodec());
-     }
-     else {
-       return new TokenNameFinderModel(languageCode, nameFinderModel, beamSize, null,
-           resources, manifestInfoEntries, new BioCodec());
-     }
-   }
+    if (seqModel != null) {
+      return new TokenNameFinderModel(languageCode, seqModel, null,
+              factory.getResources(), manifestInfoEntries, factory.getSequenceCodec());
+    } else {
+      return new TokenNameFinderModel(languageCode, nameFinderModel, beamSize, null,
+              factory.getResources(), manifestInfoEntries, factory.getSequenceCodec());
+    }
+  }
-   * @param languageCode
-   *          the language of the training data
-   * @param type
-   *          null or an override type for all types in the training data
-   * @param samples
-   *          the training data
-   * @param trainParams
-   *          machine learning train parameters
-   * @param featureGeneratorBytes
-   *          descriptor to configure the feature generation or null
-   * @param resources
-   *          the resources for the name finder or null if none
+   * @param languageCode the language of the training data
+   * @param type null or an override type for all types in the training data
+   * @param samples the training data
+   * @param trainParams machine learning train parameters
+   * @param generator null or the feature generator
+   * @param resources the resources for the name finder or null if none
-   * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
+   * @deprecated use
+   * {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)}
+   * instead.
-   @Deprecated
+  @Deprecated
+  public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples,
+          TrainingParameters trainParams, AdaptiveFeatureGenerator generator, final Map<String, Object> resources)
+          throws IOException {
+
+    if (languageCode == null) {
+      throw new IllegalArgumentException("languageCode must not be null!");
+    }
+
+    String beamSizeString = trainParams.getSettings().get(BeamSearch.BEAM_SIZE_PARAMETER);
+
+    int beamSize = NameFinderME.DEFAULT_BEAM_SIZE;
+    if (beamSizeString != null) {
+      beamSize = Integer.parseInt(beamSizeString);
+    }
+
+    Map<String, String> manifestInfoEntries = new HashMap<String, String>();
+
+    AdaptiveFeatureGenerator featureGenerator;
+
+    if (generator != null) {
+      featureGenerator = generator;
+    } else {
+      featureGenerator = createFeatureGenerator();
+    }
+
+    MaxentModel nameFinderModel = null;
+
+    SequenceClassificationModel<String> seqModel = null;
+
+    TrainerType trainerType = TrainerFactory.getTrainerType(trainParams.getSettings());
+
+    if (TrainerType.EVENT_MODEL_TRAINER.equals(trainerType)) {
+      ObjectStream<Event> eventStream = new NameFinderEventStream(samples, type,
+              new DefaultNameContextGenerator(featureGenerator), new BioCodec());
+
+      EventTrainer trainer = TrainerFactory.getEventTrainer(trainParams.getSettings(), manifestInfoEntries);
+      nameFinderModel = trainer.train(eventStream);
+    } else if (TrainerType.EVENT_MODEL_SEQUENCE_TRAINER.equals(trainerType)) {
+      NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, featureGenerator);
+
+      EventModelSequenceTrainer trainer = TrainerFactory.getEventModelSequenceTrainer(
+              trainParams.getSettings(), manifestInfoEntries);
+      nameFinderModel = trainer.train(ss);
+    } else if (TrainerType.SEQUENCE_TRAINER.equals(trainerType)) {
+      SequenceTrainer trainer = TrainerFactory.getSequenceModelTrainer(
+              trainParams.getSettings(), manifestInfoEntries);
+
+      NameSampleSequenceStream ss = new NameSampleSequenceStream(samples, featureGenerator, false);
+      seqModel = trainer.train(ss);
+    } else {
+      throw new IllegalStateException("Unexpected trainer type!");
+    }
+
+     // TODO: Pass the sequence codec down to the model! We will just store the class
+    // name in the model, and then always use the extension loader to create it!
+    // The cmd line interface, will replace shortcuts with actual class names.
+    // depending on which one is not null!
+    if (seqModel != null) {
+      return new TokenNameFinderModel(languageCode, seqModel, null,
+              resources, manifestInfoEntries, new BioCodec());
+    } else {
+      return new TokenNameFinderModel(languageCode, nameFinderModel, beamSize, null,
+              resources, manifestInfoEntries, new BioCodec());
+    }
+  }
+
+  /**
+   * Trains a name finder model.
+   *
+   * @param languageCode the language of the training data
+   * @param type null or an override type for all types in the training data
+   * @param samples the training data
+   * @param trainParams machine learning train parameters
+   * @param featureGeneratorBytes descriptor to configure the feature generation
+   * or null
+   * @param resources the resources for the name finder or null if none
+   *
+   * @return the newly trained model
+   *
+   * @throws IOException
+   * @deprecated use
+   * {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)}
+   * instead.
+   */
+  @Deprecated
-      ObjectStream<NameSample> samples, TrainingParameters trainParams,
-      byte[] featureGeneratorBytes, final Map<String, Object> resources)
-      throws IOException {
+          ObjectStream<NameSample> samples, TrainingParameters trainParams,
+          byte[] featureGeneratorBytes, final Map<String, Object> resources)
+          throws IOException {
-        createFeatureGenerator(featureGeneratorBytes, resources), resources);
+            createFeatureGenerator(featureGeneratorBytes, resources), resources);
-   /**
-    * @deprecated use {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)} instead.
-    */
-   @Deprecated
-   public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples,
-       final Map<String, Object> resources) throws IOException {
-     return NameFinderME.train(languageCode, type, samples,
-         ModelUtil.createDefaultTrainingParameters(), (byte[]) null, resources);
-   }
+  /**
+   * @deprecated use
+   * {@link NameFinderME#train(String, String, ObjectStream, TrainingParameters, TokenNameFinderFactory)}
+   * instead.
+   */
+  @Deprecated
+  public static TokenNameFinderModel train(String languageCode, String type, ObjectStream<NameSample> samples,
+          final Map<String, Object> resources) throws IOException {
+    return NameFinderME.train(languageCode, type, samples,
+            ModelUtil.createDefaultTrainingParameters(), (byte[]) null, resources);
+  }
+   *
-    if(matcher.matches()) {
+    if (matcher.matches()) {
-
