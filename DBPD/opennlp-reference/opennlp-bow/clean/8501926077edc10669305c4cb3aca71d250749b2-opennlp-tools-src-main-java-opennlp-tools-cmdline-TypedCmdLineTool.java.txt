OPENNLP-402 Removed top-level interfaces and move the default implementations up to their places. That makes it easier to understand the source code since less super-types are involved.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1424177 13f79535-47bb-0310-9956-ffa450edef68

+import java.util.Map;
+
- * Interface for tools which support processing of samples of some type
+ * Base class for tools which support processing of samples of some type T
-public interface TypedCmdLineTool extends CmdLineTool {
+public abstract class TypedCmdLineTool<T>
+    extends CmdLineTool {
+   * variable to access the type of the generic parameter.
+   */
+  protected final Class<T> type;
+
+  /**
+   * Constructor with type parameters.
+   *
+   * @param sampleType class of the template parameter
+   */
+  protected TypedCmdLineTool(Class<T> sampleType) {
+    this.type = sampleType;
+  }
+
+  /**
+   * Returns stream factory for the type of this tool for the </code>format</code>.
+   *
+   * @param format data format name
+   * @return stream factory for the type of this tool for the format
+   */
+  protected ObjectStreamFactory<T> getStreamFactory(String format) {
+    ObjectStreamFactory<T> factory = StreamFactoryRegistry.getFactory(type, format);
+    if (null != factory) {
+      return factory;
+    } else {
+      throw new TerminateToolException(1, "Format " + format + " is not found.\n" + getHelp());
+    }
+  }
+
+  /**
+   * Validates arguments using parameters from <code>argProxyInterface</code> and the parameters of the
+   * <code>format</code>.
+   *
+   * @param args arguments
+   * @param argProxyInterface interface with parameter descriptions
+   * @param format data format name
+   * @param <A> A
+   */
+  @SuppressWarnings({"unchecked"})
+  protected <A> void validateAllArgs(String[] args, Class<A> argProxyInterface, String format) {
+    ObjectStreamFactory<T> factory = getStreamFactory(format);
+    String errMessage = ArgumentParser.validateArgumentsLoudly(args, argProxyInterface,
+        factory.<A>getParameters());
+    if (null != errMessage) {
+      throw new TerminateToolException(1, errMessage + "\n" + getHelp(format));
+    }
+  }
+
+  /**
+   * Validates arguments for a format processed by the <code>factory</code>.
+   * @param factory a stream factory
+   * @param args arguments
+   */
+  protected void validateFactoryArgs(ObjectStreamFactory<T> factory, String[] args) {
+    String errMessage = ArgumentParser.validateArgumentsLoudly(args, factory.getParameters());
+    if (null != errMessage) {
+      throw new TerminateToolException(1, "Format parameters are invalid: " + errMessage + "\n" +
+          "Usage: " + ArgumentParser.createUsage(factory.getParameters()));
+    }
+  }
+
+  @Override
+  protected <A> String getBasicHelp(Class<A>... argProxyInterfaces) {
+    Map<String, ObjectStreamFactory<T>> factories = StreamFactoryRegistry.getFactories(type);
+
+    String formatsHelp = " ";
+    if (1 < factories.size()) {
+      StringBuilder formats = new StringBuilder();
+      for (String format : factories.keySet()) {
+        if (!StreamFactoryRegistry.DEFAULT_FORMAT.equals(format)) {
+          formats.append(".").append(format).append("|");
+        }
+      }
+      formatsHelp = "[" + formats.substring(0, formats.length() - 1)+ "] ";
+    }
+
+    return "Usage: " + CLI.CMD + " " + getName() + formatsHelp +
+        ArgumentParser.createUsage(argProxyInterfaces);
+  }
+
+  public String getHelp() {
+    return getHelp("");
+  }
+  
+  /**
-  void run(String format, String args[]);
+  public abstract void run(String format, String args[]);
-  String getHelp(String format);
-}
+  public abstract String getHelp(String format);
+}
