Remove deprecated API from the POS Tagger

See issue OPENNLP-883

-   * Initializes the current instance with the provided
-   * model and provided beam size.
-   *
-   * @param model
-   * @param beamSize
-   *
-   * @deprecated the beam size should be specified in the params during training
-   */
-  @Deprecated
-  public POSTaggerME(POSModel model, int beamSize, int cacheSize) {
-    POSTaggerFactory factory = model.getFactory();
-
-    modelPackage = model;
-
-    // TODO: Why is this the beam size?! not cache size?
-    contextGen = factory.getPOSContextGenerator(beamSize);
-    tagDictionary = factory.getTagDictionary();
-    size = beamSize;
-
-    sequenceValidator = factory.getSequenceValidator();
-
-    if (model.getPosSequenceModel() != null) {
-      this.model = model.getPosSequenceModel();
-    }
-    else {
-      this.model = new opennlp.tools.ml.BeamSearch<String>(beamSize,
-          model.getPosModel(), cacheSize);
-    }
-  }
-
-  /**
-   * Initializes the current instance with the provided model
-   * and the default beam size of 3.
+   * Initializes the current instance with the provided model.
-   * Returns the number of different tags predicted by this model.
-   *
-   * @return the number of different tags predicted by this model.
-   * @deprecated use getAllPosTags instead!
-   */
-  @Deprecated
-  public int getNumTags() {
-
-    // TODO: Lets discuss on the dev list how to do this properly!
-    // Nobody needs the number of tags, if the tags are not available.
-
-    return model.getOutcomes().length;
-  }
-
-  /**
-  @Deprecated
-  public List<String> tag(List<String> sentence) {
-    bestSequence = model.bestSequence(sentence.toArray(new String[sentence.size()]), null, contextGen, sequenceValidator);
-    return bestSequence.getOutcomes();
-  }
-
-  @Deprecated
-  public Sequence[] topKSequences(List<String> sentence) {
-    return model.bestSequences(size, sentence.toArray(new String[sentence.size()]), null,
-        contextGen, sequenceValidator);
-  }
-
-  @Deprecated
-  public String tag(String sentence) {
-    List<String> toks = new ArrayList<String>();
-    StringTokenizer st = new StringTokenizer(sentence);
-    while (st.hasMoreTokens())
-      toks.add(st.nextToken());
-    List<String> tags = tag(toks);
-    StringBuilder sb = new StringBuilder();
-    for (int i = 0; i < tags.size(); i++)
-      sb.append(toks.get(i) + "/" + tags.get(i) + " ");
-    return sb.toString().trim();
-  }
-
-  /**
-   * @deprecated use
-   *             {@link #train(String, ObjectStream, TrainingParameters, POSTaggerFactory)}
-   *             instead and pass in a {@link POSTaggerFactory}.
-   */
-  public static POSModel train(String languageCode, ObjectStream<POSSample> samples, TrainingParameters trainParams,
-      POSDictionary tagDictionary, Dictionary ngramDictionary) throws IOException {
-
-    return train(languageCode, samples, trainParams, new POSTaggerFactory(
-        ngramDictionary, tagDictionary));
-  }
-
-  /**
-   * @deprecated use
-   *             {@link #train(String, ObjectStream, TrainingParameters, POSTaggerFactory)}
-   *             instead and pass in a {@link POSTaggerFactory} and a
-   *             {@link TrainingParameters}.
-   */
-  @Deprecated
-  public static POSModel train(String languageCode, ObjectStream<POSSample> samples, ModelType modelType, POSDictionary tagDictionary,
-      Dictionary ngramDictionary, int cutoff, int iterations) throws IOException {
-
-    TrainingParameters params = new TrainingParameters();
-
-    params.put(TrainingParameters.ALGORITHM_PARAM, modelType.toString());
-    params.put(TrainingParameters.ITERATIONS_PARAM, Integer.toString(iterations));
-    params.put(TrainingParameters.CUTOFF_PARAM, Integer.toString(cutoff));
-
-    return train(languageCode, samples, params, tagDictionary, ngramDictionary);
-  }
-
