OPENNLP-56 Added util method to insert a mention into an existing parse tree.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1308785 13f79535-47bb-0310-9956-ffa450edef68

+  
+  // Tries to find matching noun phrase, if none is there one is created
+  public static void addMention(int id, Span mention, Parse[] tokens) {
+    
+    Parse startToken = tokens[mention.getStart()];
+    Parse endToken = tokens[mention.getEnd() - 1];
+    Parse commonParent = startToken.getCommonParent(endToken);
+    
+    if (commonParent != null) {
+      Span mentionSpan = new Span(startToken.getSpan().getStart(), endToken.getSpan().getEnd());
+      
+      if (mentionSpan.equals(commonParent.getSpan())) {
+        if (commonParent.getType().equals("NP")) {
+          commonParent.setType("NP#" + id);
+        }
+        else {
+          commonParent.insert(new Parse(commonParent.getText(), mentionSpan, "NP#" + id, 1.0, endToken.getHeadIndex()));
+        }
+      }
+      else {
+        Parse[] kids = commonParent.getChildren();
+        boolean crossingKids = false;
+        for (int ki=0,kn=kids.length;ki<kn;ki++) {
+          if (mentionSpan.crosses(kids[ki].getSpan())){
+            crossingKids = true;
+          }
+        }
+        
+        if (!crossingKids) {
+          commonParent.insert(new Parse(commonParent.getText(), mentionSpan, "NP#" + id, 1.0, endToken.getHeadIndex()));
+        }
+        else {
+          if (commonParent.getType().equals("NP")) {
+            Parse[] grandKids = kids[0].getChildren();
+            if (grandKids.length > 1 && mentionSpan.contains(grandKids[grandKids.length-1].getSpan())) {
+              commonParent.insert(new Parse(commonParent.getText(),commonParent.getSpan(),"NP#" + id,1.0,commonParent.getHeadIndex()));
+            }
+            else {
+              // System.out.println("FAILED TO INSERT (1)");
+            }
+
+          }
+          else {
+            // System.out.println("FAILED TO INSERT (1)");
+          }
+        }
+      }
+    }
+    else {
+      throw new IllegalArgumentException("Tokens must always have a common parent!");
+    }
+  }
