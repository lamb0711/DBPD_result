OPENNLP-227 Updated POS Tagger trainer and cv tools

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1148042 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.cmdline.ArgumentParser;
+import opennlp.tools.cmdline.TrainingToolParams;
+import opennlp.tools.util.model.ModelType;
+  
+  interface TrainerToolParams extends TrainingParams, TrainingToolParams{
+
+  }
-    return "Usage: " + CLI.CMD + " " + getName() + " " + TrainingParameters.getParameterUsage() 
-        + " -data trainingData -model model\n" +
-        TrainingParameters.getDescription();
+    return "Usage: " + CLI.CMD + " " + getName() + " "
+      + ArgumentParser.createUsage(TrainerToolParams.class);
-    if (args.length < 8) {
-      System.out.println(getHelp());
+    if (!ArgumentParser.validateArguments(args, TrainerToolParams.class)) {
+      System.err.println(getHelp());
-    TrainingParameters parameters = new TrainingParameters(args);
-    
-    if(!parameters.isValid()) {
-      System.out.println(getHelp());
-      throw new TerminateToolException(1);
-    }    
+    TrainerToolParams params = ArgumentParser.parse(args,
+        TrainerToolParams.class);    
-      CmdLineUtil.loadTrainingParameters(CmdLineUtil.getParameter("-params", args), true);
+      CmdLineUtil.loadTrainingParameters(params.getParams(), true);
-    File trainingDataInFile = new File(CmdLineUtil.getParameter("-data", args));
-    File modelOutFile = new File(CmdLineUtil.getParameter("-model", args));
+    File trainingDataInFile = params.getData();
+    File modelOutFile = params.getModel();
-        parameters.getEncoding());
+        params.getEncoding());
-    String ngramCutoffString = CmdLineUtil.getParameter("-ngram", args);
+    Integer ngramCutoff = params.getNgram();
-    if (ngramCutoffString != null) {
+    if (ngramCutoff != null) {
-      int ngramCutoff = Integer.parseInt(ngramCutoffString);
-      if (parameters.getDictionaryPath() != null) {
-        // TODO: Should re-factored as described in OPENNLP-193
-        tagdict = new POSDictionary(parameters.getDictionaryPath());
+      if (params.getDict() != null) {
+        tagdict = POSDictionary.create(new FileInputStream(params.getDict()));
-        model = opennlp.tools.postag.POSTaggerME.train(parameters.getLanguage(),
-             sampleStream, parameters.getModel(), tagdict, ngramDict, parameters.getCutoff(), parameters.getNumberOfIterations());
+        model = opennlp.tools.postag.POSTaggerME.train(params.getLang(),
+             sampleStream, getModelType(params.getType()), tagdict, ngramDict, params.getCutoff(), params.getIterations());
-        model = opennlp.tools.postag.POSTaggerME.train(parameters.getLanguage(),
+        model = opennlp.tools.postag.POSTaggerME.train(params.getLang(),
+  
+  static ModelType getModelType(String modelString) {
+    ModelType model;
+    if (modelString == null)
+      modelString = "maxent";
+    
+    if (modelString.equals("maxent")) {
+      model = ModelType.MAXENT; 
+    }
+    else if (modelString.equals("perceptron")) {
+      model = ModelType.PERCEPTRON; 
+    }
+    else if (modelString.equals("perceptron_sequence")) {
+      model = ModelType.PERCEPTRON_SEQUENCE; 
+    }
+    else {
+      model = null;
+    }
+    return model;
+  }
