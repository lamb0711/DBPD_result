OpenNLP-977: Remove deprecated map methods

+import opennlp.tools.util.TrainingParameters;
-  public static TrainerType getTrainerType(Map<String, String> trainParams) {
+  public static TrainerType getTrainerType(TrainingParameters trainParams) {
-    String alogrithmValue = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
+    String algorithmValue = trainParams.getStringParameter(AbstractTrainer.ALGORITHM_PARAM,null);
-    if (alogrithmValue == null) {
+    if (algorithmValue == null) {
-    Class<?> trainerClass = BUILTIN_TRAINERS.get(alogrithmValue);
+    Class<?> trainerClass = BUILTIN_TRAINERS.get(algorithmValue);
-      ExtensionLoader.instantiateExtension(EventTrainer.class, alogrithmValue);
+      ExtensionLoader.instantiateExtension(EventTrainer.class, algorithmValue);
-      ExtensionLoader.instantiateExtension(EventModelSequenceTrainer.class, alogrithmValue);
+      ExtensionLoader.instantiateExtension(EventModelSequenceTrainer.class, algorithmValue);
-      ExtensionLoader.instantiateExtension(SequenceTrainer.class, alogrithmValue);
+      ExtensionLoader.instantiateExtension(SequenceTrainer.class, algorithmValue);
-  public static SequenceTrainer getSequenceModelTrainer(Map<String, String> trainParams,
+  public static SequenceTrainer getSequenceModelTrainer(TrainingParameters trainParams,
-    String trainerType = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
+    String trainerType = trainParams.getStringParameter(AbstractTrainer.ALGORITHM_PARAM,null);
-  public static EventModelSequenceTrainer getEventModelSequenceTrainer(Map<String, String> trainParams,
+  public static EventModelSequenceTrainer getEventModelSequenceTrainer(TrainingParameters trainParams,
-    String trainerType = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
+    String trainerType = trainParams.getStringParameter(AbstractTrainer.ALGORITHM_PARAM,null);
+
-  public static EventTrainer getEventTrainer(Map<String, String> trainParams,
+  public static EventTrainer getEventTrainer(TrainingParameters trainParams,
-    String trainerType = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
-    if (trainerType == null) {
-      // default to MAXENT
-      AbstractEventTrainer trainer = new GISTrainer();
+
+    // if the trainerType is not defined -- use the GISTrainer.
+    String trainerType = 
+        trainParams.getStringParameter(AbstractTrainer.ALGORITHM_PARAM, GISTrainer.MAXENT_VALUE);
+
+    if (BUILTIN_TRAINERS.containsKey(trainerType)) {
+      EventTrainer trainer = TrainerFactory.<EventTrainer>createBuiltinTrainer(
+          BUILTIN_TRAINERS.get(trainerType));
+      trainer.init(trainParams, reportMap);
+      return trainer;
+    } else {
+      EventTrainer trainer = ExtensionLoader.instantiateExtension(EventTrainer.class, trainerType);
-    else {
-      if (BUILTIN_TRAINERS.containsKey(trainerType)) {
-        EventTrainer trainer = TrainerFactory.<EventTrainer>createBuiltinTrainer(
-            BUILTIN_TRAINERS.get(trainerType));
-        trainer.init(trainParams, reportMap);
-        return trainer;
-      } else {
-        EventTrainer trainer = ExtensionLoader.instantiateExtension(EventTrainer.class, trainerType);
-        trainer.init(trainParams, reportMap);
-        return trainer;
-      }
-    }
+
-  public static boolean isValid(Map<String, String> trainParams) {
+  public static boolean isValid(TrainingParameters trainParams) {
-
-    String algorithmName = trainParams.get(AbstractTrainer.ALGORITHM_PARAM);
+    String algorithmName = trainParams.getStringParameter(AbstractTrainer.ALGORITHM_PARAM,null);
-      String cutoffString = trainParams.get(AbstractTrainer.CUTOFF_PARAM);
-      if (cutoffString != null) {
-        Integer.parseInt(cutoffString);
-      }
-
-      String iterationsString = trainParams.get(AbstractTrainer.ITERATIONS_PARAM);
-      if (iterationsString != null) {
-        Integer.parseInt(iterationsString);
-      }
+      // require that the Cutoff and the number of iterations be an integer.
+      // if they are not set, the default values will be ok.
+      trainParams.getIntParameter(AbstractTrainer.CUTOFF_PARAM, 0);
+      trainParams.getIntParameter(AbstractTrainer.ITERATIONS_PARAM, 0);
-    String dataIndexer = trainParams.get(AbstractEventTrainer.DATA_INDEXER_PARAM);
-
-    if (dataIndexer != null) {
-      if (!(AbstractEventTrainer.DATA_INDEXER_ONE_PASS_VALUE.equals(dataIndexer)
-          || AbstractEventTrainer.DATA_INDEXER_TWO_PASS_VALUE.equals(dataIndexer))) {
-        return false;
-      }
-    }
+    // no reason to require that the dataIndexer be a 1-pass or 2-pass dataindexer.
+    trainParams.getStringParameter(AbstractEventTrainer.DATA_INDEXER_PARAM, null);
