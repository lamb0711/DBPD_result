OPENNLP-1034: Move serializers to resource mapping to GeneratorFactory

Closes #173

-import java.util.ArrayList;
-import java.util.List;
-import org.w3c.dom.Element;
-
-  public static Map<String, Object> loadResources(File resourcePath, File featureGenDescriptor) {
+  public static Map<String, Object> loadResources(File resourcePath, File featureGenDescriptor)
+      throws IOException {
+      Map<String, ArtifactSerializer> artifactSerializers = new HashMap<>();
-      Map<String, ArtifactSerializer> artifactSerializers = TokenNameFinderModel
-          .createArtifactSerializers();
-      List<Element> elements = new ArrayList<>();
-      ArtifactSerializer serializer = null;
-
-
-      // TODO: If there is descriptor file, it should be consulted too
-              GeneratorFactory.extractCustomArtifactSerializerMappings(xmlDescriptorIn));
-        } catch (IOException e) {
-          // TODO: Improve error handling!
-          e.printStackTrace();
-        }
-
-        try (InputStream inputStreamXML = CmdLineUtil.openInFile(featureGenDescriptor)) {
-          elements = GeneratorFactory.getDescriptorElements(inputStreamXML);
-        } catch (IOException e) {
-          e.printStackTrace();
+              GeneratorFactory.extractArtifactSerializerMappings(xmlDescriptorIn));
-      File[] resourceFiles = resourcePath.listFiles();
-
-      for (File resourceFile : resourceFiles) {
-        String resourceName = resourceFile.getName();
-        //gettting the serializer key from the element tag name
-        //if the element contains a dict attribute
-        for (Element xmlElement : elements) {
-          String dictName = xmlElement.getAttribute("dict");
-          if (dictName != null && dictName.equals(resourceName)) {
-            serializer = artifactSerializers.get(xmlElement.getTagName());
-          }
-        }
-        // TODO: Do different? For now just ignore ....
-        if (serializer == null)
-          continue;
-
-        try (InputStream resourceIn = CmdLineUtil.openInFile(resourceFile)) {
-          resources.put(resourceName, serializer.create(resourceIn));
-        } catch (IOException e) {
-          // TODO: Fix exception handling
-          e.printStackTrace();
+      for (Map.Entry<String, ArtifactSerializer> serializerMapping : artifactSerializers.entrySet()) {
+        String resourceName = serializerMapping.getKey();
+        try (InputStream resourceIn = CmdLineUtil.openInFile(new File(resourcePath, resourceName))) {
+          resources.put(resourceName, serializerMapping.getValue().create(resourceIn));
-  /**
-   * Calls a loadResources method above to load any external resource required for training.
-   * @param resourceDirectory the directory where the resources are to be found
-   * @param featureGeneratorDescriptor the xml feature generator
-   * @return a map containing the file name of the resource and its mapped Object
-   */
-  static Map<String, Object> loadResources(String resourceDirectory, File featureGeneratorDescriptor) {
-
-    if (resourceDirectory != null) {
-      File resourcePath = new File(resourceDirectory);
-
-      return loadResources(resourcePath, featureGeneratorDescriptor);
-    }
-
-    return new HashMap<>();
-  }
-
-
-    Map<String, Object> resources = loadResources(params.getResources(), params.getFeaturegen());
+    Map<String, Object> resources;
+    try {
+      resources = loadResources(params.getResources(), params.getFeaturegen());
+    }
+    catch (IOException e) {
+      throw new TerminateToolException(-1, e.getMessage(), e);
+    }
