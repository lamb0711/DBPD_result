OPENNLP-819 Now reads multiple files from a directory and extracts the language from the file name

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1703610 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.File;
+import java.io.FilenameFilter;
+import opennlp.tools.cmdline.ArgumentParser.ParameterDescription;
+import opennlp.tools.cmdline.params.EncodingParameter;
+import opennlp.tools.util.ObjectStreamUtils;
-public class LeipzigDocumentSampleStreamFactory extends LanguageSampleStreamFactory<DocumentSample> {
+public class LeipzigDocumentSampleStreamFactory
+    extends AbstractSampleStreamFactory<DocumentSample> {
-  interface Parameters extends BasicFormatParams, LanguageParams {
+  interface Parameters extends EncodingParameter {
+    @ParameterDescription(valueName = "sentencesDir",
+        description = "dir with Leipig sentences to be used")
+    File getSentencesDir();
-    language = params.getLang();
+    File sentencesFileDir = params.getSentencesDir();
+    
+    File sentencesFiles[] = sentencesFileDir.listFiles(new FilenameFilter() {
+      @Override
+      public boolean accept(File dir, String name) {
+        return name.contains("sentences") && name.endsWith(".txt");
+      }
+    });
+    
+    @SuppressWarnings("unchecked")
+    ObjectStream<DocumentSample> sampleStreams[] = 
+        new ObjectStream[sentencesFiles.length];
-    try {
-      return new LeipzigDoccatSampleStream(params.getLang(), 20,
-          CmdLineUtil.openInFile(params.getData()));
-    } catch (IOException e) {
-      throw new TerminateToolException(-1, "IO error while opening sample data: " + e.getMessage(), e);
+    for (int i = 0; i < sentencesFiles.length; i++) {
+      try {
+        sampleStreams[i] = new LeipzigDoccatSampleStream(sentencesFiles[i].getName().substring(0, 3), 20,
+            CmdLineUtil.openInFile(sentencesFiles[i]));
+      } catch (IOException e) {
+        throw new TerminateToolException(-1, "IO error while opening sample data: " + e.getMessage(), e);
+      }
+    
+    return ObjectStreamUtils.createObjectStream(sampleStreams);
