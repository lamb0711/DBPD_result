OPENNLP-901:Replace references to deprecated NameFinderME.train(), this closes apache/opennlp#21

-import java.util.Collections;
-
-import opennlp.tools.util.featuregen.AdaptiveFeatureGenerator;
-import opennlp.tools.util.featuregen.AggregatedFeatureGenerator;
-    public byte[] create(InputStream in) throws IOException,
-        InvalidFormatException {
-
+    public byte[] create(InputStream in) throws IOException {
-  /**
-   * @deprecated use getNameFinderSequenceModel instead. This method will be removed soon.
-   */
-  @Deprecated
-  public MaxentModel getNameFinderModel() {
-
-    if (artifactMap.get(MAXENT_MODEL_ENTRY_NAME) instanceof MaxentModel) {
-      return (MaxentModel) artifactMap.get(MAXENT_MODEL_ENTRY_NAME);
-    }
-    else {
-      return null;
-    }
-  }
-
-  // TODO: This should be moved to the NameFinderFactory ... !!!
-  // Lets deprecate it!
-
-  /**
-   * Creates the {@link AdaptiveFeatureGenerator}. Usually this
-   * is a set of generators contained in the {@link AggregatedFeatureGenerator}.
-   *
-   * Note:
-   * The generators are created on every call to this method.
-   *
-   * @return the feature generator or null if there is no descriptor in the model
-   * @deprecated use TokenNameFinderFactory.createFeatureGenerators instead!
-   */
-  @Deprecated
-  public AdaptiveFeatureGenerator createFeatureGenerators() {
-    return getFactory().createFeatureGenerators();
-  }
-
-  public TokenNameFinderModel updateFeatureGenerator(byte descriptor[]) {
-
-    TokenNameFinderModel model;
-
-    if (getNameFinderModel() != null) {
-      model = new TokenNameFinderModel(getLanguage(), getNameFinderModel(), 1,
-          descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap(),
-          getFactory().createSequenceCodec(), getFactory());
-    }
-    else {
-      model = new TokenNameFinderModel(getLanguage(), getNameFinderSequenceModel(),
-          descriptor, Collections.<String, Object>emptyMap(), Collections.<String, String>emptyMap(),
-          getFactory().createSequenceCodec(), getFactory());
-    }
-
-    model.artifactMap.clear();
-    model.artifactMap.putAll(artifactMap);
-    model.artifactMap.put(GENERATOR_DESCRIPTOR_ENTRY_NAME, descriptor);
-
-    return model;
-  }
-
-  boolean isModelValid(MaxentModel model) {
+  private boolean isModelValid(MaxentModel model) {
