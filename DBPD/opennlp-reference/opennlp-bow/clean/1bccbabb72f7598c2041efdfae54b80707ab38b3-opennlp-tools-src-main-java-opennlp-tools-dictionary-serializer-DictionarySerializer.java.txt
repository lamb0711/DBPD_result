Correct indentation and white spaces

This closes #30

See issue OPENNLP-914

-  * This class is used by for reading and writing dictionaries of all kinds.
-  */
+ * This class is used by for reading and writing dictionaries of all kinds.
+ */
-//    private boolean mIsInsideDictionaryElement;
-//    private boolean mIsInsideEntryElement;
+    //    private boolean mIsInsideDictionaryElement;
+    //    private boolean mIsInsideEntryElement;
+
-     public void processingInstruction(String target, String data)
-       throws SAXException {
-     }
+    public void processingInstruction(String target, String data)
+        throws SAXException {
+    }
-     /**
-      * Not implemented.
-      */
-     public void startDocument() throws SAXException {
-     }
+    /**
+     * Not implemented.
+     */
+    public void startDocument() throws SAXException {
+    }
-     public void startElement(String uri, String localName, String qName,
-         org.xml.sax.Attributes atts) throws SAXException {
-       if (DICTIONARY_ELEMENT.equals(localName)) {
+    public void startElement(String uri, String localName, String qName,
+        org.xml.sax.Attributes atts) throws SAXException {
+      if (DICTIONARY_ELEMENT.equals(localName)) {
-         mAttributes = new Attributes();
+        mAttributes = new Attributes();
-         for (int i = 0; i < atts.getLength(); i++) {
-           mAttributes.setValue(atts.getLocalName(i), atts.getValue(i));
-         }
-         /* get the attribute here ... */
-         if (mAttributes.getValue(ATTRIBUTE_CASE_SENSITIVE) != null) {
-           mIsCaseSensitiveDictionary = Boolean.valueOf(mAttributes.getValue(ATTRIBUTE_CASE_SENSITIVE));
-         }
-         mAttributes = null;
-       }
-       else if (ENTRY_ELEMENT.equals(localName)) {
+        for (int i = 0; i < atts.getLength(); i++) {
+          mAttributes.setValue(atts.getLocalName(i), atts.getValue(i));
+        }
+        /* get the attribute here ... */
+        if (mAttributes.getValue(ATTRIBUTE_CASE_SENSITIVE) != null) {
+          mIsCaseSensitiveDictionary = Boolean.valueOf(mAttributes.getValue(ATTRIBUTE_CASE_SENSITIVE));
+        }
+        mAttributes = null;
+      }
+      else if (ENTRY_ELEMENT.equals(localName)) {
-         mAttributes = new Attributes();
+        mAttributes = new Attributes();
-         for (int i = 0; i < atts.getLength(); i++) {
-           mAttributes.setValue(atts.getLocalName(i), atts.getValue(i));
-         }
-       }
-       else if (TOKEN_ELEMENT.equals(localName)) {
-         mIsInsideTokenElement = true;
-       }
-     }
+        for (int i = 0; i < atts.getLength(); i++) {
+          mAttributes.setValue(atts.getLocalName(i), atts.getValue(i));
+        }
+      }
+      else if (TOKEN_ELEMENT.equals(localName)) {
+        mIsInsideTokenElement = true;
+      }
+    }
-     public void characters(char[] ch, int start, int length)
-         throws SAXException {
-       if (mIsInsideTokenElement) {
-         token.append(ch, start, length);
-       }
-     }
+    public void characters(char[] ch, int start, int length)
+        throws SAXException {
+      if (mIsInsideTokenElement) {
+        token.append(ch, start, length);
+      }
+    }
-     /**
-      * Creates the Profile object after processing is complete
-      * and switches mIsInsideNgramElement flag.
-      */
-     public void endElement(String uri, String localName, String qName)
-         throws SAXException {
+    /**
+     * Creates the Profile object after processing is complete
+     * and switches mIsInsideNgramElement flag.
+     */
+    public void endElement(String uri, String localName, String qName)
+        throws SAXException {
-       if (TOKEN_ELEMENT.equals(localName)) {
-         mTokenList.add(token.toString().trim());
-         token.setLength(0);
-         mIsInsideTokenElement = false;
-       }
-       else if (ENTRY_ELEMENT.equals(localName)) {
+      if (TOKEN_ELEMENT.equals(localName)) {
+        mTokenList.add(token.toString().trim());
+        token.setLength(0);
+        mIsInsideTokenElement = false;
+      }
+      else if (ENTRY_ELEMENT.equals(localName)) {
-         String[] tokens = mTokenList.toArray(
-             new String[mTokenList.size()]);
+        String[] tokens = mTokenList.toArray(
+            new String[mTokenList.size()]);
-         Entry entry = new Entry(new StringList(tokens), mAttributes);
+        Entry entry = new Entry(new StringList(tokens), mAttributes);
-         try {
-           mInserter.insert(entry);
-         } catch (InvalidFormatException e) {
-           throw new SAXException("Invalid dictionary format!", e);
-         }
+        try {
+          mInserter.insert(entry);
+        } catch (InvalidFormatException e) {
+          throw new SAXException("Invalid dictionary format!", e);
+        }
-         mTokenList.clear();
-         mAttributes = null;
-       }
-     }
+        mTokenList.clear();
+        mAttributes = null;
+      }
+    }
-     /**
-      * Not implemented.
-      */
-     public void endDocument() throws SAXException {
-     }
+    /**
+     * Not implemented.
+     */
+    public void endDocument() throws SAXException {
+    }
-     /**
-      * Not implemented.
-      */
-     public void endPrefixMapping(String prefix) throws SAXException {
-     }
+    /**
+     * Not implemented.
+     */
+    public void endPrefixMapping(String prefix) throws SAXException {
+    }
-     /**
-      * Not implemented.
-      */
-     public void ignorableWhitespace(char[] ch, int start, int length)
-         throws SAXException {
-     }
+    /**
+     * Not implemented.
+     */
+    public void ignorableWhitespace(char[] ch, int start, int length)
+        throws SAXException {
+    }
-     /**
-      * Not implemented.
-      */
-     public void setDocumentLocator(Locator locator) {
-     }
+    /**
+     * Not implemented.
+     */
+    public void setDocumentLocator(Locator locator) {
+    }
-     /**
-      * Not implemented.
-      */
-     public void skippedEntity(String name) throws SAXException {
-     }
+    /**
+     * Not implemented.
+     */
+    public void skippedEntity(String name) throws SAXException {
+    }
-     /**
-      * Not implemented.
-      */
-     public void startPrefixMapping(String prefix, String uri)
-         throws SAXException {
-     }
+    /**
+     * Not implemented.
+     */
+    public void startPrefixMapping(String prefix, String uri)
+        throws SAXException {
+    }
-            "an invalid format!", e);
+          "an invalid format!", e);
-          throws IOException {
-      DictionarySerializer.serialize(out, entries, true);
+      throws IOException {
+    DictionarySerializer.serialize(out, entries, true);
-          boolean casesensitive)
-      throws IOException {
+      boolean casesensitive) throws IOException {
-                "", String.valueOf(casesensitive));
+          "", String.valueOf(casesensitive));
-      throws SAXException{
+      throws SAXException {
-              "", entry.getAttributes().getValue(key));
+          "", entry.getAttributes().getValue(key));
