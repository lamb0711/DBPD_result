Correct indentation and white spaces

This closes #30

See issue OPENNLP-914

-  private MutableContext[] findParameters (int iterations, boolean useAverage) {
+  private MutableContext[] findParameters(int iterations, boolean useAverage) {
-    int[] allOutcomesPattern= new int[numOutcomes];
+    int[] allOutcomesPattern = new int[numOutcomes];
-      for (int aoi=0;aoi<numOutcomes;aoi++)
+      for (int aoi = 0; aoi < numOutcomes; aoi++)
-        for (int aoi=0;aoi<numOutcomes;aoi++)
+        for (int aoi = 0; aoi < numOutcomes; aoi++)
-        && Math.abs(prevAccuracy2 - trainingAccuracy) < tolerance
-        && Math.abs(prevAccuracy3 - trainingAccuracy) < tolerance) {
+          && Math.abs(prevAccuracy2 - trainingAccuracy) < tolerance
+          && Math.abs(prevAccuracy3 - trainingAccuracy) < tolerance) {
-        for (int aoi=0;aoi<numOutcomes;aoi++)
-          summedParams[pi].setParameter(aoi, summedParams[pi].getParameters()[aoi]/numTimesSummed);
+        for (int aoi = 0; aoi < numOutcomes; aoi++)
+          summedParams[pi].setParameter(aoi, summedParams[pi].getParameters()[aoi] / numTimesSummed);
-  private double trainingStats (EvalParameters evalParams) {
+  private double trainingStats(EvalParameters evalParams) {
-      for (int ni=0;ni<this.numTimesEventsSeen[ei];ni++) {
+      for (int ni = 0; ni < this.numTimesEventsSeen[ei]; ni++) {
-    display("Stats: (" + numCorrect + "/" + numEvents+") " + trainingAccuracy + "\n");
+    display("Stats: (" + numCorrect + "/" + numEvents + ") " + trainingAccuracy + "\n");
-  private int maxIndex (double[] values) {
+  private int maxIndex(double[] values) {
-  private void display (String s) {
+  private void display(String s) {
-  private void displayIteration (int i) {
-    if (i > 10 && (i%10) != 0)
+  private void displayIteration(int i) {
+    if (i > 10 && (i % 10) != 0)
-  private static boolean isPerfectSquare (int n) {
-    int root = (int)Math.sqrt(n);
-    return root*root == n;
+  private static boolean isPerfectSquare(int n) {
+    int root = (int) Math.sqrt(n);
+    return root * root == n;
