OPENNLP-189 Now maven version is used instead of hard coded version

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1129130 13f79535-47bb-0310-9956-ffa450edef68

+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+  private static final String DEV_VERSION_STRING = "0.0.0-SNAPSHOT";
+  
+  public static final Version DEV_VERSION = Version.parse(DEV_VERSION_STRING);
+  
+  private static final String SNAPSHOT_MARKER = "-SNAPSHOT";
+  
+  private final boolean snapshot;
+  
+   * @param snapshot
-  public Version(int major, int minor, int revision) {
+  public Version(int major, int minor, int revision, boolean snapshot) {
+    this.snapshot = snapshot;
+   * Initializes the current instance with the provided
+   * versions. The version will not be a snapshot version.
+   *
+   * @param major
+   * @param minor
+   * @param revision
+   */
+  public Version(int major, int minor, int revision) {
+   this(major, minor, revision, false); 
+  }
+
+  
+  /**
+  public boolean isSnapshot() {
+    return snapshot;
+  }
+  
-      "." + Integer.toString(getRevision());
+      "." + Integer.toString(getRevision()) + (isSnapshot() ? SNAPSHOT_MARKER : "");
-          && getRevision() == version.getRevision();
+          && getRevision() == version.getRevision()
+          && isSnapshot() == version.isSnapshot();
+    int indexFirstDash = version.indexOf('-');
+    
+    int versionEnd;
+    if (indexFirstDash == -1) {
+      versionEnd = version.length();
+    }
+    else {
+      versionEnd = indexFirstDash;
+    }
+    
+    boolean snapshot = version.endsWith(SNAPSHOT_MARKER);
+    
-        Integer.parseInt(version.substring(indexSecondDot + 1)));
+        Integer.parseInt(version.substring(indexSecondDot + 1, versionEnd)), snapshot);
-    return new Version(1, 5, 2);
+    
+    Properties manifest = new Properties();
+    
+    // Try to read the version from the version file if it is available,
+    // otherwise set the version to the development version
+    
+    InputStream versionIn = Version.class.getResourceAsStream("opennlp.version");
+    
+    if (versionIn != null) {
+      try {
+        manifest.load(versionIn);
+      } catch (IOException e) {
+        // ignore error
+      }
+      finally {
+        try {
+          versionIn.close();
+        } catch (IOException e) {
+          // ignore error
+        }
+      }
+    }
+    
+    String versionString = 
+      manifest.getProperty("OpenNLP-Version", DEV_VERSION_STRING);
+    
+    if (versionString.equals("${pom.version}"))
+      versionString = DEV_VERSION_STRING;
+    
+    return Version.parse(versionString);
