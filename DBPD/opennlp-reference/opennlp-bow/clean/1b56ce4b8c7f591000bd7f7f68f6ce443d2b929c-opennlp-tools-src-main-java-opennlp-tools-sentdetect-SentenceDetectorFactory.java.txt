OPENNLP-500: Each ToolFactory now uses the ExtensionLoader to instantiate subclasses, and implements a protected init method that takes the required arguments. To make it easier to instantiate the tool factory from api we kept the constructor that takes the same arguments, internally it calls the init method.

git-svn-id: https://svn.apache.org/repos/asf/opennlp/trunk@1361308 13f79535-47bb-0310-9956-ffa450edef68

-import java.lang.reflect.Constructor;
+import opennlp.tools.util.ext.ExtensionLoader;
+    this.init(languageCode, useTokenEnd, abbreviationDictionary, eosCharacters);
+  }
+  
+  protected void init(String languageCode, boolean useTokenEnd,
+      Dictionary abbreviationDictionary, char[] eosCharacters) {
-    SentenceDetectorFactory theFactory = null;
-    Class<? extends BaseToolFactory> factoryClass = loadSubclass(subclassName);
-    if (factoryClass != null) {
-      try {
-        Constructor<?> constructor = null;
-        constructor = factoryClass.getConstructor(String.class, boolean.class,
-            Dictionary.class, char[].class);
-        theFactory = (SentenceDetectorFactory) constructor.newInstance(
-            languageCode, useTokenEnd, abbreviationDictionary, eosCharacters);
-      } catch (NoSuchMethodException e) {
-        String msg = "Could not instantiate the "
-            + subclassName
-            + ". The mandatory constructor (String, boolean, Dictionary, char[])) is missing.";
-        System.err.println(msg);
-        throw new IllegalArgumentException(msg);
-      } catch (Exception e) {
-        String msg = "Could not instantiate the "
-            + subclassName
-            + ". The constructor (String, boolean, Dictionary, char[]) throw an exception.";
-        System.err.println(msg);
-        e.printStackTrace();
-        throw new InvalidFormatException(msg);
-      }
+    try {
+      SentenceDetectorFactory theFactory = ExtensionLoader
+          .instantiateExtension(SentenceDetectorFactory.class, subclassName);
+      theFactory.init(languageCode, useTokenEnd, abbreviationDictionary,
+          eosCharacters);
+      return theFactory;
+    } catch (Exception e) {
+      String msg = "Could not instantiate the " + subclassName
+          + ". The initialization throw an exception.";
+      System.err.println(msg);
+      e.printStackTrace();
+      throw new InvalidFormatException(msg, e);
-    return theFactory;
