OPENNLP-179 Added cross validation cmd line tool for the POS Tagger

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1128913 13f79535-47bb-0310-9956-ffa450edef68

+import opennlp.tools.util.TrainingParameters;
+  private final TrainingParameters params;
+  
+  
+    
+    params = null;
+  public POSTaggerCrossValidator(String languageCode,
+      TrainingParameters trainParam, POSDictionary tagDictionary,
+      Dictionary ngramDictionary) {
+    this.params = trainParam;
+    this.languageCode = languageCode;
+    cutoff = -1;
+    iterations = -1;
+    modelType = null;
+  }
+  
-    CrossValidationPartitioner<POSSample> partitioner = 
-      new CrossValidationPartitioner<POSSample>(samples, nFolds);
-  
-     while (partitioner.hasNext()) {
-       
-       CrossValidationPartitioner.TrainingSampleStream<POSSample> trainingSampleStream =
-         partitioner.next();
-       
-       POSModel model = POSTaggerME.train(languageCode, trainingSampleStream, modelType, tagDictionary,
-           ngramDictionary, cutoff, iterations);
-       
-       POSEvaluator evaluator = new POSEvaluator(new POSTaggerME(model));
-       evaluator.evaluate(trainingSampleStream.getTestSampleStream());
-       
-       wordAccuracy.add(evaluator.getWordAccuracy(), evaluator.getWordCount());
-     }
+    
+    CrossValidationPartitioner<POSSample> partitioner = new CrossValidationPartitioner<POSSample>(
+        samples, nFolds);
+
+    while (partitioner.hasNext()) {
+
+      CrossValidationPartitioner.TrainingSampleStream<POSSample> trainingSampleStream = partitioner
+          .next();
+
+      POSModel model;
+
+      if (params == null) {
+        model = POSTaggerME.train(languageCode, trainingSampleStream,
+            modelType, tagDictionary, ngramDictionary, cutoff, iterations);
+      } else {
+        model = POSTaggerME.train(languageCode, trainingSampleStream, params,
+            this.tagDictionary, this.ngramDictionary);
+      }
+
+      POSEvaluator evaluator = new POSEvaluator(new POSTaggerME(model));
+      evaluator.evaluate(trainingSampleStream.getTestSampleStream());
+
+      wordAccuracy.add(evaluator.getWordAccuracy(), evaluator.getWordCount());
+    }
