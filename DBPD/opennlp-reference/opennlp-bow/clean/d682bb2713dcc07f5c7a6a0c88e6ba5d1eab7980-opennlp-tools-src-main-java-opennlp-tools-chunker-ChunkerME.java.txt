OPENNLP-180 Removed old main methods

git-svn-id: https://svn.apache.org/repos/asf/incubator/opennlp/trunk@1124657 13f79535-47bb-0310-9956-ffa450edef68

-
-  @Deprecated
-  private static void usage() {
-    System.err.println("Usage: ChunkerME [-encoding charset] trainingFile modelFile");
-    System.err.println();
-    System.err.println("Training file should be one word per line where each line consists of a ");
-    System.err.println("space-delimited triple of \"word pos outcome\".  Sentence breaks are indicated by blank lines.");
-    System.exit(1);
-  }
-
-  /**
-   * Trains the chunker using the specified parameters. <br>
-   * Usage: ChunkerME trainingFile modelFile. <br>
-   * Training file should be one word per line where each line consists of a
-   * space-delimited triple of "word pos outcome".  Sentence breaks are indicated by blank lines.
-   * @param args The training file and the model file.
-   * @throws IOException When the specified files can not be read.
-   */
-  @Deprecated
-  public static void main(String[] args) throws IOException, ObjectStreamException {
-    if (args.length == 0) {
-      usage();
-    }
-    int ai = 0;
-    String encoding = null;
-    while (args[ai].startsWith("-")) {
-      if (args[ai].equals("-encoding") && ai+1 < args.length) {
-        ai++;
-        encoding = args[ai];
-      }
-      else {
-        System.err.println("Unknown option: "+args[ai]);
-        usage();
-      }
-      ai++;
-    }
-    java.io.File inFile = null;
-    java.io.File outFile = null;
-    if (ai < args.length) {
-      inFile = new java.io.File(args[ai++]);
-    }
-    else {
-      usage();
-    }
-    if (ai < args.length) {
-      outFile = new java.io.File(args[ai++]);
-    }
-    else {
-      usage();
-    }
-    int iterations = 100;
-    int cutoff = 5;
-    if (args.length > ai) {
-      iterations = Integer.parseInt(args[ai++]);
-    }
-    if (args.length > ai) {
-      cutoff = Integer.parseInt(args[ai++]);
-    }
-    ChunkerModel mod;
-    ObjectStream<ChunkSample> es;
-    if (encoding != null) {
-       es = new ChunkSampleStream(new PlainTextByLineStream(new InputStreamReader(new FileInputStream(inFile),encoding)));
-    }
-    else {
-      es = new ChunkSampleStream(new PlainTextByLineStream(new java.io.FileReader(inFile)));
-    }
-    mod = train("en", es, cutoff, iterations);
-    System.out.println("Saving the model as: " + args[1]);
-    OutputStream out = new FileOutputStream(outFile);
-    mod.serialize(out);
-    out.close();
-  }
